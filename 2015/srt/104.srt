X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:26,536 --> 00:00:27,056 A:middle
>> Ken Orr: Good morning.

2
00:00:28,516 --> 00:00:34,616 A:middle
[applause]

3
00:00:35,116 --> 00:00:38,076 A:middle
>> Ken Orr: Xcode 7 is our
next major release of tools

4
00:00:38,366 --> 00:00:42,206 A:middle
for building Mac, iPhone,
iPad and Apple Watch apps.

5
00:00:43,096 --> 00:00:44,826 A:middle
Let's get started this
morning and take a look

6
00:00:44,826 --> 00:00:47,166 A:middle
at what's new in Xcode.

7
00:00:48,896 --> 00:00:52,516 A:middle
The biggest news this year
is that we've added support

8
00:00:52,836 --> 00:00:56,886 A:middle
for a third platform,
Watch OS, and of course,

9
00:00:57,336 --> 00:00:59,386 A:middle
you can build Apple
Watch apps right

10
00:00:59,386 --> 00:01:02,656 A:middle
in the same great Xcode
tools that you already know.

11

12
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

13
00:00:59,386 --> 00:01:02,656 A:middle
in the same great Xcode
tools that you already know.

14
00:01:03,616 --> 00:01:07,356 A:middle
Xcode 7 also includes Swift 2,

15
00:01:08,366 --> 00:01:10,536 A:middle
building on the new programming
language we introduced

16
00:01:10,536 --> 00:01:10,986 A:middle
last year.

17
00:01:12,256 --> 00:01:14,926 A:middle
Swift 2 is faster
across the board,

18
00:01:15,536 --> 00:01:18,156 A:middle
not only will your apps run
faster when you're running

19
00:01:18,156 --> 00:01:20,776 A:middle
and debugging in
Xcode, more importantly,

20
00:01:21,236 --> 00:01:23,376 A:middle
they'll run faster
on customer devices.

21
00:01:23,706 --> 00:01:28,626 A:middle
Swift 2 also includes a number
of new language features,

22
00:01:29,076 --> 00:01:33,156 A:middle
like Error Handling which
introduces an explicit syntax

23
00:01:33,556 --> 00:01:36,476 A:middle
that makes it much more natural
to deal with errors in Swift.

24
00:01:37,826 --> 00:01:40,686 A:middle
Availability, Swift
now has insight

25
00:01:40,686 --> 00:01:45,496 A:middle
into the minimum OS required for
particular API, making it easier

26
00:01:45,496 --> 00:01:46,726 A:middle
for you to adopt new API

27
00:01:47,096 --> 00:01:50,536 A:middle
and also maintaining
support for existing OSs.

28
00:01:51,996 --> 00:01:53,056 A:middle
Testability.

29
00:01:53,636 --> 00:01:57,306 A:middle
Test bundles can now
see internal API,

30
00:01:57,836 --> 00:02:01,276 A:middle
letting you get broader
test coverage without having

31

32
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

33
00:01:57,836 --> 00:02:01,276 A:middle
letting you get broader
test coverage without having

34
00:02:01,276 --> 00:02:03,716 A:middle
to expose anything
additional in your sources.

35
00:02:04,856 --> 00:02:09,336 A:middle
Protocol Extensions lets
you add methods to any type

36
00:02:09,336 --> 00:02:11,276 A:middle
that implements a
particular protocol.

37
00:02:11,876 --> 00:02:16,266 A:middle
You can convert all
of your Swift code

38
00:02:16,266 --> 00:02:19,386 A:middle
to Swift 2 using
Xcode 7's Migrator.

39
00:02:20,036 --> 00:02:23,766 A:middle
It works great for projects
as well as playgrounds.

40
00:02:27,436 --> 00:02:29,996 A:middle
We have also added a couple
of new language features

41
00:02:30,096 --> 00:02:33,886 A:middle
to Objective-C to make it
work even better with Swift.

42
00:02:34,856 --> 00:02:37,926 A:middle
Like Generics which let you
specify type information

43
00:02:38,406 --> 00:02:40,276 A:middle
for collections.

44
00:02:40,786 --> 00:02:45,116 A:middle
Also Nullability Annotations
which let you specify

45
00:02:45,116 --> 00:02:47,696 A:middle
when you expect something
it to be nil or non-nil.

46
00:02:48,236 --> 00:02:51,056 A:middle
In Objective-C which makes it
really seamless when you want

47
00:02:51,056 --> 00:02:54,406 A:middle
to interact with options
in Swift, really nice.

48
00:02:55,106 --> 00:02:57,496 A:middle
We have gone ahead, we have
adopted all these language

49
00:02:57,526 --> 00:02:58,636 A:middle
features in our own SDKs.

50
00:02:58,636 --> 00:03:04,706 A:middle
So you will start seeing
the benefits today.

51

52
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

53
00:02:58,636 --> 00:03:04,706 A:middle
So you will start seeing
the benefits today.

54
00:03:04,896 --> 00:03:08,606 A:middle
Now, if you want to get started
with Swift 2 or maybe some

55
00:03:08,606 --> 00:03:10,826 A:middle
of those new APIs
you saw yesterday,

56
00:03:11,416 --> 00:03:14,646 A:middle
well there's no better place to
do that than in the playground.

57
00:03:15,746 --> 00:03:17,686 A:middle
We introduced playgrounds
last year

58
00:03:18,356 --> 00:03:20,956 A:middle
and they have come a
long way since then.

59
00:03:21,756 --> 00:03:25,076 A:middle
Not only can you explore
and play with code,

60
00:03:25,846 --> 00:03:29,746 A:middle
but now you can explain
an idea or a concept all

61
00:03:29,746 --> 00:03:31,096 A:middle
from within a playground.

62
00:03:32,586 --> 00:03:35,926 A:middle
We have introduced
features like Rich Comments

63
00:03:36,066 --> 00:03:37,556 A:middle
which let you explain
what's going

64
00:03:37,556 --> 00:03:41,396 A:middle
on in the surrounding code
using a simple mark-up syntax.

65
00:03:42,256 --> 00:03:44,206 A:middle
They have beautiful
formatting and fonts

66
00:03:44,556 --> 00:03:46,506 A:middle
which really help
them stand out.

67
00:03:47,766 --> 00:03:52,006 A:middle
Within these comments you can
include things like web links

68
00:03:52,176 --> 00:03:54,066 A:middle
or lists or even images.

69
00:03:54,556 --> 00:03:59,456 A:middle
We have also made it possible
to pull results which were shown

70
00:03:59,456 --> 00:04:02,166 A:middle
in quick-look popovers,
you can pull them right

71

72
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

73
00:03:59,456 --> 00:04:02,166 A:middle
in quick-look popovers,
you can pull them right

74
00:04:02,216 --> 00:04:04,436 A:middle
into the source code
under the line

75
00:04:04,436 --> 00:04:05,916 A:middle
of source that generated them.

76
00:04:07,236 --> 00:04:09,456 A:middle
This really helps tie the cause

77
00:04:09,456 --> 00:04:11,856 A:middle
and the effect much
more closely together.

78
00:04:12,356 --> 00:04:13,396 A:middle
This is really nice.

79
00:04:13,846 --> 00:04:18,326 A:middle
You can add almost unlimited
functionality to a playground

80
00:04:19,036 --> 00:04:22,106 A:middle
by adding Swift code to the
new supporting sources folder.

81
00:04:23,146 --> 00:04:25,076 A:middle
This helps you keep
your playground clean

82
00:04:25,436 --> 00:04:28,486 A:middle
and focused while also
giving you a place

83
00:04:28,656 --> 00:04:30,186 A:middle
to put the supporting
functionality.

84
00:04:31,426 --> 00:04:32,846 A:middle
There is also a performance
one here

85
00:04:33,346 --> 00:04:36,286 A:middle
because the supporting
sources, they can be compiled

86
00:04:36,286 --> 00:04:38,676 A:middle
down because they're
not run interactively.

87
00:04:38,996 --> 00:04:41,376 A:middle
They're only there to
support your playground

88
00:04:41,816 --> 00:04:46,056 A:middle
and that helps them run
really, really fast.

89
00:04:46,056 --> 00:04:51,986 A:middle
Our newest playground
feature is Pages

90
00:04:52,616 --> 00:04:57,226 A:middle
which lets you create content
that progresses through a topic.

91
00:04:58,386 --> 00:05:00,886 A:middle
For example, if you wanted
to author a playground

92

93
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

94
00:04:58,386 --> 00:05:00,886 A:middle
For example, if you wanted
to author a playground

95
00:05:00,886 --> 00:05:05,416 A:middle
about sorting, you could add
an introductory page that went

96
00:05:05,416 --> 00:05:07,316 A:middle
into the fundamentals of sorting

97
00:05:07,316 --> 00:05:09,836 A:middle
and then you could
add subsequent pages

98
00:05:10,166 --> 00:05:10,956 A:middle
that covered things

99
00:05:10,956 --> 00:05:14,536 A:middle
like specific sorting algorithms
quick sort, bubble sort.

100
00:05:15,646 --> 00:05:18,346 A:middle
Then, when you wanted to provide
navigation through the pages,

101
00:05:18,906 --> 00:05:21,456 A:middle
you can add some of the
new mark-up syntax we

102
00:05:21,456 --> 00:05:22,706 A:middle
have introduced.

103
00:05:23,336 --> 00:05:26,856 A:middle
Playgrounds are a
powerful way to teach.

104
00:05:28,896 --> 00:05:31,916 A:middle
Last year we introduced the
guided tour as a playground.

105
00:05:32,526 --> 00:05:35,716 A:middle
This year we have
updated it to use Pages.

106
00:05:38,676 --> 00:05:42,036 A:middle
That's Swift 2 and
the new playgrounds.

107
00:05:43,476 --> 00:05:50,186 A:middle
In addition to iOS 9 and OS 10
El Capitan we have added sport

108
00:05:50,186 --> 00:05:51,636 A:middle
for Watch OS 2.

109
00:05:52,706 --> 00:05:56,776 A:middle
The new WatchKit will help
make your apps more responsive,

110
00:05:57,806 --> 00:05:59,566 A:middle
but it also gives
you more control

111
00:05:59,566 --> 00:06:01,006 A:middle
and flexibility as a developer.

112

113
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

114
00:05:59,566 --> 00:06:01,006 A:middle
and flexibility as a developer.

115
00:06:02,186 --> 00:06:03,896 A:middle
If you haven't already,
I encourage you to check

116
00:06:03,896 --> 00:06:05,686 A:middle
out What's New in Watch OS 2.

117
00:06:05,776 --> 00:06:09,086 A:middle
Some really nice stuff.

118
00:06:10,696 --> 00:06:12,916 A:middle
You can build your entire
watch app, of course,

119
00:06:13,346 --> 00:06:17,336 A:middle
right in Xcode using storyboards
where you can quickly lay

120
00:06:17,336 --> 00:06:19,756 A:middle
out how your app will flow
from screen to screen.

121
00:06:20,886 --> 00:06:23,176 A:middle
You can design and
implement glances

122
00:06:24,126 --> 00:06:26,126 A:middle
or even the new WatchKit
complications.

123
00:06:27,086 --> 00:06:31,476 A:middle
For iOS, using things like
the new StackView it never was

124
00:06:31,476 --> 00:06:34,336 A:middle
easier to create a universal
app that deals with things

125
00:06:34,336 --> 00:06:36,666 A:middle
such as changing
screen orientation

126
00:06:36,666 --> 00:06:38,656 A:middle
or different screen sizes.

127
00:06:39,906 --> 00:06:43,766 A:middle
With the new iPad multitasking,
size classes which you define

128
00:06:43,766 --> 00:06:46,796 A:middle
in interface builder, they
have never been more important.

129
00:06:47,236 --> 00:06:53,416 A:middle
Along with iOS 9 we're
introducing a new crosscutting

130
00:06:53,416 --> 00:06:55,266 A:middle
feature called App Thinning.

131
00:06:56,546 --> 00:07:01,256 A:middle
The App Store can tailor
your app to deliver the best,

132

133
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

134
00:06:56,546 --> 00:07:01,256 A:middle
The App Store can tailor
your app to deliver the best,

135
00:07:01,386 --> 00:07:05,646 A:middle
smallest possible version to
each unique customer device.

136
00:07:07,426 --> 00:07:10,176 A:middle
This will let you focus
more on building a great app

137
00:07:10,176 --> 00:07:14,136 A:middle
and worry less about size
because you will know

138
00:07:14,356 --> 00:07:18,346 A:middle
that customers, they'll never
download bits they won't use.

139
00:07:18,746 --> 00:07:21,356 A:middle
Xcode of course has
great support

140
00:07:21,356 --> 00:07:24,486 A:middle
to help you configure how
your app will be thinned.

141
00:07:25,816 --> 00:07:28,776 A:middle
There are three separate
parts to App Thinning,

142
00:07:30,296 --> 00:07:31,796 A:middle
starting with Bitcode.

143
00:07:32,706 --> 00:07:36,896 A:middle
When you archive for submission,
Xcode compiles your app

144
00:07:36,896 --> 00:07:40,046 A:middle
down into an intermediate
representation called Bitcode

145
00:07:40,456 --> 00:07:42,056 A:middle
which gets sent to the store.

146
00:07:43,326 --> 00:07:47,336 A:middle
The App Store can later
re-optimize your binary,

147
00:07:47,616 --> 00:07:51,876 A:middle
helping you future-proof for
things like compiler updates

148
00:07:52,066 --> 00:07:54,076 A:middle
or even new processer
capabilities.

149
00:07:55,156 --> 00:07:57,846 A:middle
To take advantage of Bitcode
you don't actually have

150
00:07:57,846 --> 00:07:58,426 A:middle
to do anything.

151
00:07:58,676 --> 00:08:02,436 A:middle
Xcode will do all
the hard work here.

152

153
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

154
00:07:58,676 --> 00:08:02,436 A:middle
Xcode will do all
the hard work here.

155
00:08:02,646 --> 00:08:04,476 A:middle
The second, there is Slicing.

156
00:08:05,046 --> 00:08:08,776 A:middle
When the App Store
goes to send your app

157
00:08:08,776 --> 00:08:12,996 A:middle
to a customer device it will
only include artwork that's

158
00:08:12,996 --> 00:08:14,626 A:middle
needed for that particular
device.

159
00:08:15,046 --> 00:08:19,486 A:middle
For example, if you have both
2x and 3x artwork in your app

160
00:08:19,556 --> 00:08:24,676 A:middle
for an iPhone6 and a 6+ the
iPhone6 will only get the 2x

161
00:08:24,676 --> 00:08:28,676 A:middle
artwork and the iPhone6+
will only get the 3x artwork.

162
00:08:29,916 --> 00:08:32,785 A:middle
To take advantage of
Slicing, all you need

163
00:08:32,785 --> 00:08:38,546 A:middle
to do is use Asset
Catalogs in Xcode.

164
00:08:38,546 --> 00:08:42,916 A:middle
Third, on-demand resources,
which let you control

165
00:08:43,265 --> 00:08:45,046 A:middle
when assets are downloaded.

166
00:08:45,796 --> 00:08:48,386 A:middle
For example, you can
start downloading level 5

167
00:08:48,386 --> 00:08:52,536 A:middle
of your game just as the
user is finishing up level 4.

168
00:08:53,456 --> 00:08:55,206 A:middle
It gives you a ton of control.

169
00:08:55,506 --> 00:08:56,146 A:middle
Really nice.

170
00:08:57,426 --> 00:09:01,776 A:middle
Here to give us a demo of Watch
OS 2 and App Thinning is Jon.

171

172
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

173
00:08:57,426 --> 00:09:01,776 A:middle
Here to give us a demo of Watch
OS 2 and App Thinning is Jon.

174
00:09:02,896 --> 00:09:10,476 A:middle
>> Jon Hess: Good morning.

175
00:09:10,476 --> 00:09:13,776 A:middle
Today I would like to show you
two of my favorite new features

176
00:09:13,776 --> 00:09:16,206 A:middle
in Xcode 7; native-watch
extensions

177
00:09:16,446 --> 00:09:17,416 A:middle
and application thinning.

178
00:09:21,076 --> 00:09:23,276 A:middle
Let's get started with
our trivia game project.

179
00:09:24,256 --> 00:09:26,526 A:middle
Now in our trivia game we
already have things set

180
00:09:26,526 --> 00:09:30,296 A:middle
up for WatchKit 1,
and right now I want

181
00:09:30,296 --> 00:09:31,746 A:middle
to update it to Watch OS 2.

182
00:09:32,556 --> 00:09:34,076 A:middle
It looks like Xcode
has the same idea.

183
00:09:34,626 --> 00:09:37,666 A:middle
Here in the navigator, I can see
a project modernization sequence

184
00:09:37,726 --> 00:09:38,656 A:middle
already queued up for me.

185
00:09:38,656 --> 00:09:40,656 A:middle
I going to go ahead
and select it

186
00:09:40,656 --> 00:09:43,546 A:middle
and begin migrating my
project settings to Watch OS 2.

187
00:09:44,426 --> 00:09:46,976 A:middle
Here in the panel, Xcode
gives me a brief overview

188
00:09:46,976 --> 00:09:49,006 A:middle
of everything that's
going to happen.

189
00:09:49,166 --> 00:09:51,386 A:middle
I would like to go into it
with more detail for you.

190
00:09:52,406 --> 00:09:56,316 A:middle
Just like Watch OS 1, Watch
OS 2 applications are composed

191
00:09:56,316 --> 00:09:58,296 A:middle
of an app extension
and application.

192
00:09:59,076 --> 00:10:00,696 A:middle
Your code goes in
the app extension

193

194
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

195
00:09:59,076 --> 00:10:00,696 A:middle
Your code goes in
the app extension

196
00:10:00,696 --> 00:10:02,406 A:middle
and drives the app remotely.

197
00:10:03,236 --> 00:10:05,856 A:middle
New in Watch OS 2,
both the app extension

198
00:10:06,126 --> 00:10:08,356 A:middle
and the app run directly
on the watch.

199
00:10:08,776 --> 00:10:09,906 A:middle
This allows our applications

200
00:10:09,906 --> 00:10:12,116 A:middle
to be more responsive
and independent.

201
00:10:12,866 --> 00:10:13,696 A:middle
Sounds great.

202
00:10:13,696 --> 00:10:15,406 A:middle
I want to perform these changes.

203
00:10:16,296 --> 00:10:17,176 A:middle
What just happened?

204
00:10:17,756 --> 00:10:19,356 A:middle
Xcode took care of the details

205
00:10:19,356 --> 00:10:21,916 A:middle
of migrating my project
settings to Watch OS 2.

206
00:10:21,916 --> 00:10:24,216 A:middle
It configured my
Watch targets to build

207
00:10:24,216 --> 00:10:26,776 A:middle
against the new Watch OS SDK
that we released yesterday,

208
00:10:26,776 --> 00:10:29,646 A:middle
it set their minimum
deployment target to Watch OS 2

209
00:10:29,646 --> 00:10:33,606 A:middle
and it configured my Watch app
extension to be copied inside

210
00:10:33,606 --> 00:10:36,106 A:middle
of my Watch app so that
when they're installed

211
00:10:36,106 --> 00:10:38,266 A:middle
on the Watch itself they
both go over together.

212
00:10:38,266 --> 00:10:39,236 A:middle
All right.

213
00:10:39,236 --> 00:10:41,196 A:middle
That's everything with
upgrading my project settings

214
00:10:41,196 --> 00:10:42,136 A:middle
to Watch OS 2.

215
00:10:43,406 --> 00:10:45,326 A:middle
Our Watch application
is nice and light,

216
00:10:46,296 --> 00:10:48,976 A:middle
but our iOS application
is a quite bit bigger.

217
00:10:48,976 --> 00:10:52,446 A:middle
It is mostly due to all of these
images in my asset catalog.

218
00:10:53,186 --> 00:10:55,516 A:middle
I want to make it
smaller but don't want

219
00:10:55,516 --> 00:10:56,626 A:middle
to remove any content.

220
00:10:57,326 --> 00:10:59,906 A:middle
This is where the new App
Slicing feature comes in play.

221

222
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

223
00:11:00,556 --> 00:11:02,566 A:middle
You see every one ever
these images has a 1,

224
00:11:02,916 --> 00:11:05,196 A:middle
2, 3x representation?

225
00:11:05,846 --> 00:11:08,996 A:middle
Well with App Slicing, Xcode
7 and the App Store are going

226
00:11:08,996 --> 00:11:10,076 A:middle
to work together to make sure

227
00:11:10,076 --> 00:11:13,266 A:middle
that each device just gets this
single image that best suits it.

228
00:11:13,696 --> 00:11:16,496 A:middle
This cuts 30- to 40 percent
off the size of our application

229
00:11:16,496 --> 00:11:18,956 A:middle
and the best part is it's
pretty much automatic.

230
00:11:19,436 --> 00:11:22,306 A:middle
All I need to do is use
Xcode 7 in an asset catalog

231
00:11:22,456 --> 00:11:23,376 A:middle
which I'm already doing.

232
00:11:23,376 --> 00:11:25,616 A:middle
What about the other
assets you would

233
00:11:25,616 --> 00:11:28,426 A:middle
like to target for each device.

234
00:11:28,896 --> 00:11:32,116 A:middle
We have extended the
asset catalog in Xcode 7

235
00:11:32,376 --> 00:11:33,706 A:middle
to support arbitrary data.

236
00:11:33,806 --> 00:11:35,666 A:middle
You can put whatever
you want in here.

237
00:11:36,776 --> 00:11:38,126 A:middle
Down here further
in the catalog,

238
00:11:38,226 --> 00:11:39,656 A:middle
I have this skylines folder.

239
00:11:40,246 --> 00:11:43,716 A:middle
It's filled with 3D models of
cities from around the world.

240
00:11:43,776 --> 00:11:45,746 A:middle
We present them to the
user and they guess

241
00:11:45,746 --> 00:11:48,266 A:middle
which city they are looking at.

242
00:11:48,266 --> 00:11:52,596 A:middle
San Francisco, I have a really
high-quality model of the city

243
00:11:52,596 --> 00:11:54,246 A:middle
of San Francisco I would
like to include in our game,

244
00:11:54,606 --> 00:11:57,026 A:middle
but I only want to send it
to the most high-end devices.

245
00:11:57,596 --> 00:11:58,256 A:middle
No problem.

246
00:11:58,696 --> 00:12:01,846 A:middle
Just like images can vary by
scale factor and size class,

247

248
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

249
00:11:58,696 --> 00:12:01,846 A:middle
Just like images can vary by
scale factor and size class,

250
00:12:02,156 --> 00:12:05,006 A:middle
data assets can vary by device
performance characteristics,

251
00:12:05,446 --> 00:12:07,376 A:middle
things like the amount
of memory on the device,

252
00:12:07,566 --> 00:12:08,916 A:middle
or the GPU capabilities.

253
00:12:09,136 --> 00:12:11,826 A:middle
I want to add a specialization
for machines

254
00:12:11,826 --> 00:12:12,946 A:middle
with 2 gigabytes of memory.

255
00:12:13,016 --> 00:12:15,306 A:middle
Then I will just
go ahead and drag

256
00:12:15,306 --> 00:12:18,336 A:middle
in my high-end resource
and I'm good to go.

257
00:12:18,546 --> 00:12:21,286 A:middle
Each device will get the
resource that best suits it

258
00:12:21,286 --> 00:12:22,296 A:middle
without double-paying.

259
00:12:22,736 --> 00:12:23,046 A:middle
All right.

260
00:12:24,196 --> 00:12:27,126 A:middle
Now I would like to show
you on-demand resources.

261
00:12:28,246 --> 00:12:30,706 A:middle
On-demand resources allow
us to host the content

262
00:12:30,706 --> 00:12:34,426 A:middle
for application remotely
on the App Store.

263
00:12:34,626 --> 00:12:37,536 A:middle
We opt our resources
in to on-demand hosting

264
00:12:37,536 --> 00:12:39,216 A:middle
by tagging them with strings.

265
00:12:39,786 --> 00:12:41,556 A:middle
The strings can be
anything we want.

266
00:12:42,186 --> 00:12:45,376 A:middle
For example, if we're making
a game, we might tag each

267
00:12:45,376 --> 00:12:46,706 A:middle
of the assets that comprise one

268
00:12:46,706 --> 00:12:48,536 A:middle
of the levels by
that level's name.

269
00:12:49,186 --> 00:12:52,176 A:middle
Then, at run time, we use the
new NS Bundle Resource Request

270
00:12:52,176 --> 00:12:55,256 A:middle
class to fetch and pull down
whole tags worth of content

271
00:12:55,586 --> 00:12:57,566 A:middle
into our game for
fast, local access.

272
00:12:58,006 --> 00:12:59,426 A:middle
Let me show you how
to get started

273
00:12:59,426 --> 00:13:00,606 A:middle
with on-demand resources.

274

275
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

276
00:12:59,426 --> 00:13:00,606 A:middle
with on-demand resources.

277
00:13:01,826 --> 00:13:03,656 A:middle
Here I've selected a
folder in the catalog.

278
00:13:03,976 --> 00:13:05,556 A:middle
It represents all
of the questions

279
00:13:05,596 --> 00:13:07,016 A:middle
in the world genre of the game.

280
00:13:08,056 --> 00:13:09,116 A:middle
In the inspector I'm going

281
00:13:09,116 --> 00:13:11,386 A:middle
to use the new on-demand
resource tag section

282
00:13:11,916 --> 00:13:15,616 A:middle
and tag this content,
world questions.

283
00:13:15,766 --> 00:13:17,936 A:middle
I've just opted all of it
in to on-demand hosting.

284
00:13:19,126 --> 00:13:21,136 A:middle
Now, what kind of things
can you tag in a catalog?

285
00:13:21,916 --> 00:13:23,966 A:middle
You can tag entire
folders like I just did.

286
00:13:24,496 --> 00:13:26,636 A:middle
You can tag images and
data assets directly,

287
00:13:26,676 --> 00:13:29,526 A:middle
you can also tag Sprite
Atlases in the Asset catalog.

288
00:13:29,896 --> 00:13:31,416 A:middle
Sprite Atlases are
a new component

289
00:13:31,416 --> 00:13:32,916 A:middle
of the Asset catalog in Xcode 7.

290
00:13:33,556 --> 00:13:35,616 A:middle
By putting your Sprite
Atlases in the catalog,

291
00:13:35,686 --> 00:13:37,756 A:middle
it makes them eligible
for the Splicing feature I

292
00:13:37,756 --> 00:13:38,416 A:middle
mentioned earlier.

293
00:13:39,696 --> 00:13:42,566 A:middle
You can also tag loose
files in your Xcode project.

294
00:13:43,926 --> 00:13:46,956 A:middle
This inspector gives me
a great overview of all

295
00:13:46,956 --> 00:13:48,646 A:middle
of the tags on a
particular file.

296
00:13:49,186 --> 00:13:51,846 A:middle
What if I want to see
all the files in a tag,

297
00:13:51,846 --> 00:13:53,046 A:middle
or just all the tags period.

298
00:13:53,676 --> 00:13:55,746 A:middle
For that, I can head over
to the Project Editor,

299
00:13:56,456 --> 00:13:58,746 A:middle
by selecting our
Application Target and going

300
00:13:58,746 --> 00:14:01,786 A:middle
to the New Resource tag section
I can see all of my tags.

301

302
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

303
00:13:58,746 --> 00:14:01,786 A:middle
to the New Resource tag section
I can see all of my tags.

304
00:14:02,386 --> 00:14:04,776 A:middle
As you see, I tagged a
lot of content earlier.

305
00:14:04,776 --> 00:14:07,396 A:middle
It is a great place
to get an overview

306
00:14:07,396 --> 00:14:09,686 A:middle
and make sure things are
consistent like I expect.

307
00:14:11,106 --> 00:14:13,936 A:middle
For example, I see this books
tag doesn't match the format

308
00:14:13,936 --> 00:14:16,326 A:middle
of the others, they all
have this question suffix.

309
00:14:17,006 --> 00:14:17,606 A:middle
No problem.

310
00:14:17,606 --> 00:14:21,986 A:middle
I'll edit this, and update
all the content in one go.

311
00:14:21,986 --> 00:14:27,296 A:middle
Now with tag to all of our
content for on-demand resources,

312
00:14:27,486 --> 00:14:30,576 A:middle
and I would like to show you how
to started using it from code.

313
00:14:30,846 --> 00:14:33,496 A:middle
That's where the new NS Bundle
resource request class comes

314
00:14:33,496 --> 00:14:33,856 A:middle
into play.

315
00:14:34,776 --> 00:14:37,356 A:middle
Here in our game class,
we have two callbacks

316
00:14:37,356 --> 00:14:38,306 A:middle
that will be perfect for this,

317
00:14:38,736 --> 00:14:40,736 A:middle
start using genre
and stop using genre.

318
00:14:41,826 --> 00:14:44,366 A:middle
Two reasons they are great for
using on-demand resources first,

319
00:14:44,366 --> 00:14:46,416 A:middle
they are bracketed
in time, and second,

320
00:14:46,626 --> 00:14:49,036 A:middle
they happen a just a bit before
the user actually initiates the

321
00:14:49,036 --> 00:14:51,056 A:middle
game but as soon as when we
know what they're going to play

322
00:14:51,056 --> 00:14:53,496 A:middle
in the game, It lets us
pre-fetch the on-demand content.

323
00:14:54,756 --> 00:14:56,886 A:middle
I'll get started with
an instance variable

324
00:14:56,886 --> 00:14:58,896 A:middle
to hold an NS Bundle
resource request.

325
00:14:59,536 --> 00:15:02,536 A:middle
NS Bundle resource requests
are substantiated from tags,

326

327
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

328
00:14:59,536 --> 00:15:02,536 A:middle
NS Bundle resource requests
are substantiated from tags,

329
00:15:02,536 --> 00:15:04,946 A:middle
and remember, tags are
just simple strings.

330
00:15:05,576 --> 00:15:08,766 A:middle
I'll use our genre's name
with batch questions appended

331
00:15:08,766 --> 00:15:09,796 A:middle
to the end to form our tag.

332
00:15:11,266 --> 00:15:16,456 A:middle
Then I can create the bundle
resource request from that tag.

333
00:15:16,456 --> 00:15:19,006 A:middle
Finally, I can invoke
the request

334
00:15:19,426 --> 00:15:21,376 A:middle
with the new begin
accessing resources

335
00:15:21,376 --> 00:15:22,586 A:middle
with completion handler method.

336
00:15:23,106 --> 00:15:25,326 A:middle
This is an asynchronous method
that runs in the background.

337
00:15:25,936 --> 00:15:27,626 A:middle
It downloads all the
content from the store,

338
00:15:27,626 --> 00:15:30,176 A:middle
and when it's done, it
fires my completion handler.

339
00:15:31,016 --> 00:15:33,926 A:middle
Once my completion handler
runs, and until I say I'm done

340
00:15:33,926 --> 00:15:34,896 A:middle
with the resource request,

341
00:15:34,896 --> 00:15:37,626 A:middle
I have fast local access
to all the content.

342
00:15:38,166 --> 00:15:39,196 A:middle
This is my favorite part.

343
00:15:39,196 --> 00:15:42,736 A:middle
I get it all, that content with
the same APIs I'm already using.

344
00:15:43,016 --> 00:15:46,566 A:middle
Methods like NS Bundle, Path of
Resource, UI Image, Image Name,

345
00:15:46,566 --> 00:15:48,916 A:middle
Texture, Texture
Name, all continue

346
00:15:48,916 --> 00:15:50,716 A:middle
to work exactly as
they did before.

347
00:15:50,716 --> 00:15:53,206 A:middle
I'm not making any
changes to the rest

348
00:15:53,206 --> 00:15:55,266 A:middle
of the resource lookout code
throughout my application.

349
00:15:57,056 --> 00:16:00,366 A:middle
Now, I set all that content as
available until I say I'm done

350

351
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

352
00:15:57,056 --> 00:16:00,366 A:middle
Now, I set all that content as
available until I say I'm done

353
00:16:00,366 --> 00:16:01,596 A:middle
with the NS Bundle
resource request.

354
00:16:01,966 --> 00:16:02,656 A:middle
How do I do that?

355
00:16:03,246 --> 00:16:05,386 A:middle
In our stop using genre method,

356
00:16:05,886 --> 00:16:08,256 A:middle
I'll invoke end accessing
resource

357
00:16:08,256 --> 00:16:09,716 A:middle
on the NS Bundle
resource request.

358
00:16:10,366 --> 00:16:13,046 A:middle
This moves all the content
that I fetched into the cache

359
00:16:13,426 --> 00:16:16,636 A:middle
so it is available for future
access but it also marks it

360
00:16:16,786 --> 00:16:18,446 A:middle
as available for
purging in the even

361
00:16:18,446 --> 00:16:19,956 A:middle
that the system runs
out of space.

362
00:16:20,896 --> 00:16:23,106 A:middle
With that, we have written
all of the code we need

363
00:16:23,106 --> 00:16:24,196 A:middle
for on-demand resources.

364
00:16:24,496 --> 00:16:25,906 A:middle
I want to build and
run our game.

365
00:16:26,996 --> 00:16:27,866 A:middle
We'll start a new game.

366
00:16:28,836 --> 00:16:30,846 A:middle
I'll show you some of the
debugging functionality

367
00:16:31,186 --> 00:16:32,586 A:middle
for working with
on-demand resources.

368
00:16:33,726 --> 00:16:36,896 A:middle
Here in the debug navigator, I'm
going to select the disk gage

369
00:16:37,586 --> 00:16:39,976 A:middle
to bring up the disk
report to get an overview

370
00:16:39,976 --> 00:16:41,846 A:middle
of all the ways the
application is using the disk.

371
00:16:42,576 --> 00:16:44,456 A:middle
We've added a new
section here in Xcode 7,

372
00:16:44,636 --> 00:16:45,856 A:middle
on-demand resource tags.

373
00:16:46,286 --> 00:16:49,416 A:middle
You see can see my tags, their
size, and their current status.

374
00:16:50,196 --> 00:16:52,146 A:middle
All that are currently
marked not downloaded,

375
00:16:52,886 --> 00:16:55,076 A:middle
Xcode is mimicking the role
of the app store right now.

376
00:16:55,536 --> 00:16:58,986 A:middle
All of my resources are in
Xcode, not on the simulator yet.

377
00:16:59,396 --> 00:17:01,216 A:middle
But, when I click
one of these genres,

378

379
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

380
00:16:59,396 --> 00:17:01,216 A:middle
But, when I click
one of these genres,

381
00:17:02,636 --> 00:17:04,796 A:middle
the code that we just wrote
runs in the background,

382
00:17:05,006 --> 00:17:07,886 A:middle
downloads the content and now
you see my tag is marked in use.

383
00:17:08,526 --> 00:17:10,086 A:middle
If I switch to a second genre,

384
00:17:10,746 --> 00:17:12,896 A:middle
you can see the first
content is moved to the cache,

385
00:17:13,175 --> 00:17:16,026 A:middle
just marked downloaded, and
now engineering questions are

386
00:17:16,026 --> 00:17:16,536 A:middle
in use.

387
00:17:17,156 --> 00:17:19,006 A:middle
That's Slicing and
on-demand resources.

388
00:17:19,606 --> 00:17:22,756 A:middle
With Application Slicing,
we're able to lower the size

389
00:17:22,756 --> 00:17:26,205 A:middle
of our iPhone 6 application
from more than 140 megabytes

390
00:17:26,445 --> 00:17:27,826 A:middle
to less than 100 megabytes.

391
00:17:28,516 --> 00:17:30,086 A:middle
With on-demand resources
we were able

392
00:17:30,086 --> 00:17:32,166 A:middle
to further lower the
initial install size

393
00:17:32,446 --> 00:17:33,896 A:middle
down to just 30 megabytes.

394
00:17:34,356 --> 00:17:36,976 A:middle
Now users can get started with
our game faster than ever.

395
00:17:37,406 --> 00:17:38,116 A:middle
Back to you, Ken.

396
00:17:39,516 --> 00:17:45,436 A:middle
[applause]

397
00:17:45,936 --> 00:17:46,976 A:middle
>> Ken Orr: Thank you, Jon.

398
00:17:49,696 --> 00:17:51,766 A:middle
This year we have
introduced a number

399
00:17:51,766 --> 00:17:54,046 A:middle
of new features targeted
squarely

400
00:17:54,046 --> 00:17:57,266 A:middle
at helping you enhance
the quality of your app.

401
00:17:58,446 --> 00:18:00,466 A:middle
Let's start by talking about
debugging and profiling.

402

403
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

404
00:17:58,446 --> 00:18:00,466 A:middle
Let's start by talking about
debugging and profiling.

405
00:18:01,056 --> 00:18:06,796 A:middle
In Xcode 7 we have brought
the energy gage to iOS apps.

406
00:18:07,536 --> 00:18:11,466 A:middle
IOS 9 contracts energy
on a per process basis.

407
00:18:11,676 --> 00:18:14,126 A:middle
That's reflected right
here in the energy report.

408
00:18:15,606 --> 00:18:18,186 A:middle
The gages in Xcode are
a great way for you

409
00:18:18,236 --> 00:18:21,126 A:middle
to match what you
expect to be happening

410
00:18:21,476 --> 00:18:24,866 A:middle
against what's actually
happening.

411
00:18:24,866 --> 00:18:27,906 A:middle
If you see a spike in energy
usage and you're sitting

412
00:18:27,906 --> 00:18:31,416 A:middle
in your app apparently
idle, that's a first clue

413
00:18:31,416 --> 00:18:33,266 A:middle
that maybe you have a problem.

414
00:18:34,006 --> 00:18:36,146 A:middle
Sometimes when you have
a problem like that,

415
00:18:36,246 --> 00:18:38,316 A:middle
you know exactly where to
go looking in your code.

416
00:18:38,316 --> 00:18:43,826 A:middle
But when you don't, you can jump
right into Instruments from all

417
00:18:43,826 --> 00:18:45,346 A:middle
of the reports in Xcode.

418
00:18:46,056 --> 00:18:48,226 A:middle
From the Energy report
we can jump

419
00:18:48,226 --> 00:18:52,596 A:middle
into the New Location instrument
which lets us make sure

420
00:18:52,596 --> 00:18:55,536 A:middle
that we're efficiently
using core location APIs.

421
00:18:56,706 --> 00:18:59,456 A:middle
We can answer questions
like are we asking

422
00:18:59,456 --> 00:19:03,276 A:middle
for the user's location
too often, are we asking

423

424
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

425
00:18:59,456 --> 00:19:03,276 A:middle
for the user's location
too often, are we asking

426
00:19:03,276 --> 00:19:05,926 A:middle
for the user's location
with too high a precision?

427
00:19:07,156 --> 00:19:09,516 A:middle
Things like that are
going to cost energy

428
00:19:09,756 --> 00:19:12,346 A:middle
and we can investigate
those right here.

429
00:19:12,346 --> 00:19:18,476 A:middle
For iOS, this is also the new
Metal System Trace instrument

430
00:19:18,476 --> 00:19:21,626 A:middle
letting you see how the
frame rate is being effected

431
00:19:21,876 --> 00:19:24,006 A:middle
by things like your own code.

432
00:19:24,666 --> 00:19:29,026 A:middle
The graphics driver, hardware
rendering, it gives you insight

433
00:19:29,426 --> 00:19:33,276 A:middle
into the entire Graphic
Stack, really powerful.

434
00:19:34,736 --> 00:19:36,816 A:middle
You may also notice
here in Instruments

435
00:19:36,926 --> 00:19:39,276 A:middle
that there is a redesigned
track view.

436
00:19:40,326 --> 00:19:41,516 A:middle
It has a cleaner look,

437
00:19:42,566 --> 00:19:45,726 A:middle
more importantly it is
more natural to use.

438
00:19:46,326 --> 00:19:47,956 A:middle
With gestures like
pinch to zoom,

439
00:19:48,236 --> 00:19:51,656 A:middle
navigating through your
data is really, really easy.

440
00:19:52,156 --> 00:19:55,726 A:middle
That's a quick peak at
the new Instruments.

441
00:19:57,806 --> 00:20:03,186 A:middle
I'm willing to bet that every
developer in this room has been

442

443
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

444
00:19:57,806 --> 00:20:03,186 A:middle
I'm willing to bet that every
developer in this room has been

445
00:20:03,186 --> 00:20:08,576 A:middle
in a situation where a
customer reports a crash

446
00:20:08,766 --> 00:20:10,356 A:middle
and you just can't reproduce it.

447
00:20:11,326 --> 00:20:11,586 A:middle
All right.

448
00:20:12,416 --> 00:20:13,616 A:middle
That happened once
or twice maybe?

449
00:20:15,066 --> 00:20:19,046 A:middle
The new in Address
Sanitizer in Xcode 7 can help.

450
00:20:20,176 --> 00:20:25,356 A:middle
Address Sanitizer compiles your
Objective-C in C code in a way

451
00:20:25,356 --> 00:20:28,116 A:middle
that catch things
like buffer overflows

452
00:20:28,346 --> 00:20:32,116 A:middle
and it can catch them
immediately when they happen.

453
00:20:32,576 --> 00:20:35,686 A:middle
Xcode will stop you
right on the line of code

454
00:20:35,926 --> 00:20:36,956 A:middle
that caused the problem.

455
00:20:37,886 --> 00:20:40,286 A:middle
This is a powerful
new debugging feature.

456
00:20:40,676 --> 00:20:43,746 A:middle
Here to give us a demo of
Address Sanitizer is Kate.

457
00:20:49,236 --> 00:20:49,716 A:middle
>> Kate Stone: Thank you, Ken.

458
00:20:50,306 --> 00:20:53,796 A:middle
Our trivia game is a great
diversion with friends

459
00:20:54,306 --> 00:20:56,806 A:middle
but some are experiencing
crashes

460
00:20:56,806 --> 00:20:57,866 A:middle
when they're setting up a game.

461
00:20:58,996 --> 00:21:01,216 A:middle
It is unpredictable
enough that it is the kind

462

463
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

464
00:20:58,996 --> 00:21:01,216 A:middle
It is unpredictable
enough that it is the kind

465
00:21:01,216 --> 00:21:04,496 A:middle
of bug that's hard to reproduce
and make heads or tails of.

466
00:21:05,626 --> 00:21:07,436 A:middle
I'm sure you experienced
something similar

467
00:21:07,436 --> 00:21:10,106 A:middle
as I've heard anywhere
you have used pointers

468
00:21:10,136 --> 00:21:11,556 A:middle
to explicitly managed memory.

469
00:21:12,126 --> 00:21:15,916 A:middle
Our game is looking beautiful.

470
00:21:16,786 --> 00:21:20,576 A:middle
We can dive on in, start
a new game, pick a genre,

471
00:21:21,816 --> 00:21:25,526 A:middle
pick a few users to work
with and we're ready to play.

472
00:21:26,206 --> 00:21:28,886 A:middle
So it seems to work
just fine -- oh.

473
00:21:30,696 --> 00:21:33,296 A:middle
Being on stage is
perfect to reproduce this.

474
00:21:33,426 --> 00:21:34,516 A:middle
Hard to find bugs.

475
00:21:35,986 --> 00:21:37,326 A:middle
So let's have a look at this.

476
00:21:37,326 --> 00:21:39,196 A:middle
It's crashed, where
is it crashed?

477
00:21:39,196 --> 00:21:40,056 A:middle
What can I debug?

478
00:21:40,856 --> 00:21:43,316 A:middle
It's crashed in my main class.

479
00:21:43,556 --> 00:21:46,756 A:middle
So there's not even I line
of code I've written there.

480
00:21:46,996 --> 00:21:48,246 A:middle
There's nothing in
the Stack Trace

481
00:21:48,276 --> 00:21:49,406 A:middle
to give me a place to start.

482
00:21:49,766 --> 00:21:51,936 A:middle
That's typical of
this kind of bug.

483
00:21:52,296 --> 00:21:54,356 A:middle
Luckily, Address
Sanitizer can help there.

484
00:21:55,116 --> 00:21:57,376 A:middle
We have a variety of
these diagnostic tools

485
00:21:57,376 --> 00:21:58,736 A:middle
that you can get to from Xcode.

486
00:21:59,076 --> 00:21:59,916 A:middle
All you need to do is go

487
00:21:59,916 --> 00:22:01,596 A:middle
to the Scheme editor
for running your app.

488

489
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

490
00:21:59,916 --> 00:22:01,596 A:middle
to the Scheme editor
for running your app.

491
00:22:02,136 --> 00:22:04,996 A:middle
As that handy shortcut, I'll
hold down Option while I click

492
00:22:04,996 --> 00:22:06,546 A:middle
on Run to get to
the Scheme Editor.

493
00:22:07,656 --> 00:22:09,816 A:middle
I can configure how I
run my application here,

494
00:22:10,136 --> 00:22:11,846 A:middle
including the Diagnostics tab

495
00:22:12,176 --> 00:22:14,766 A:middle
which lets me select some
potentially familiar tools

496
00:22:15,006 --> 00:22:17,346 A:middle
as well as the new
tool, Address Sanitizer.

497
00:22:18,066 --> 00:22:20,716 A:middle
Enabling Address Sanitizer
does something different

498
00:22:20,996 --> 00:22:24,366 A:middle
in that it recompiles the
application adding a bunch more

499
00:22:24,366 --> 00:22:27,526 A:middle
Instrumentation showing
me not just where I failed

500
00:22:27,886 --> 00:22:29,366 A:middle
but why I failed as well.

501
00:22:30,526 --> 00:22:33,616 A:middle
Let's rerun that application
and see how this works.

502
00:22:34,936 --> 00:22:37,256 A:middle
Now I'll find when I
select a genre and move

503
00:22:37,256 --> 00:22:40,416 A:middle
to the next page it
immediately stops my application

504
00:22:40,656 --> 00:22:43,826 A:middle
because this is where the memory
corruption actually occurred.

505
00:22:44,356 --> 00:22:47,306 A:middle
Far before the application
finally comes

506
00:22:47,306 --> 00:22:49,656 A:middle
to a screeching halt I can
find out what went wrong.

507
00:22:50,456 --> 00:22:53,376 A:middle
In this case I get the exact
Stack of where it stopped

508
00:22:53,876 --> 00:22:56,406 A:middle
and it turns out that it
is some Objective-C code

509
00:22:56,406 --> 00:22:57,116 A:middle
that I'm calling.

510
00:22:57,866 --> 00:23:01,296 A:middle
Not everybody has the luxury
of writing everything in Swift.

511

512
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

513
00:22:57,866 --> 00:23:01,296 A:middle
Not everybody has the luxury
of writing everything in Swift.

514
00:23:01,566 --> 00:23:04,786 A:middle
In fact, in our case, we have
this C code that's been wrapped

515
00:23:04,866 --> 00:23:06,356 A:middle
in an Objective-C framework.

516
00:23:06,356 --> 00:23:08,446 A:middle
That's the source
of our problem.

517
00:23:09,036 --> 00:23:10,476 A:middle
I'm not familiar with this code.

518
00:23:10,476 --> 00:23:13,266 A:middle
I'll have a look at the
code that I'm calling it

519
00:23:13,266 --> 00:23:14,276 A:middle
from written in Swift.

520
00:23:15,036 --> 00:23:17,536 A:middle
Here I am calling
some logging API.

521
00:23:18,226 --> 00:23:21,526 A:middle
That tells me where exactly
I'm triggering the failure

522
00:23:21,856 --> 00:23:23,416 A:middle
but still not yet why.

523
00:23:24,506 --> 00:23:26,816 A:middle
If I look further down the
Debug navigator though,

524
00:23:27,216 --> 00:23:30,716 A:middle
I can see that in addition to
Address Sanitizer telling me

525
00:23:30,916 --> 00:23:32,886 A:middle
that I'm using deallocated
memory

526
00:23:32,886 --> 00:23:35,366 A:middle
and that that's the actual
source of my problem.

527
00:23:36,316 --> 00:23:39,956 A:middle
I can also see in the Debug
navigator what memory that is.

528
00:23:40,306 --> 00:23:43,046 A:middle
I'm accessing the first bite
in a 50-bite heat region

529
00:23:43,046 --> 00:23:44,436 A:middle
that was previously allocated.

530
00:23:45,186 --> 00:23:48,796 A:middle
I can go a step further, click
on and actually see the memory,

531
00:23:48,796 --> 00:23:51,796 A:middle
and see it has been previously
used to store a log message.

532
00:23:52,356 --> 00:23:55,906 A:middle
Because it is gray, Address
Sanitizer is telling me

533
00:23:56,136 --> 00:23:58,746 A:middle
that it knows that it is
no longer valid memory,

534
00:23:58,836 --> 00:24:00,706 A:middle
no longer memory I
should be accessing.

535

536
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

537
00:23:58,836 --> 00:24:00,706 A:middle
no longer memory I
should be accessing.

538
00:24:01,476 --> 00:24:02,796 A:middle
It also gives me the call Stack,

539
00:24:02,926 --> 00:24:05,666 A:middle
where that memory was originally
allocated and I can see

540
00:24:05,666 --> 00:24:09,106 A:middle
that it is when I'm creating
a usage log that makes sense,

541
00:24:09,836 --> 00:24:11,316 A:middle
and more importantly
in this case,

542
00:24:11,636 --> 00:24:13,646 A:middle
where that memory
was deallocated.

543
00:24:14,486 --> 00:24:17,716 A:middle
I can tell here that it is
when I call end logging,

544
00:24:18,356 --> 00:24:20,346 A:middle
the particularly
badly designed API.

545
00:24:20,806 --> 00:24:23,906 A:middle
I thought it was just to
flush the log but it turns

546
00:24:23,906 --> 00:24:26,286 A:middle
out it takes down
critical resources.

547
00:24:26,916 --> 00:24:28,416 A:middle
Let's solve that
problem quickly.

548
00:24:29,306 --> 00:24:30,736 A:middle
I can take that line of code,

549
00:24:30,896 --> 00:24:33,106 A:middle
instead of calling it
every time I log a message,

550
00:24:33,516 --> 00:24:37,386 A:middle
I'm going to call it only
once during tear down.

551
00:24:37,626 --> 00:24:40,386 A:middle
Now Address Sanitizer rebuilds
the application complete

552
00:24:40,386 --> 00:24:43,676 A:middle
with Instrumentation, still
very snappy, still possible

553
00:24:43,676 --> 00:24:46,946 A:middle
to use it interactively, and
I can get a step further.

554
00:24:47,026 --> 00:24:50,526 A:middle
It all looks good until
it finds my next problem.

555
00:24:52,226 --> 00:24:56,456 A:middle
Because Address Sanitizer is not
just about deallocated memory.

556
00:24:56,726 --> 00:24:57,586 A:middle
In this case it is telling me

557
00:24:57,586 --> 00:25:00,646 A:middle
about a heap buffer
overflow similarly telling me

558

559
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

560
00:24:57,586 --> 00:25:00,646 A:middle
about a heap buffer
overflow similarly telling me

561
00:25:00,646 --> 00:25:04,536 A:middle
about under flows and Stack
memory that I'm overflowing

562
00:25:04,536 --> 00:25:07,746 A:middle
or under flowing, it is an
extraordinarily powerful tool.

563
00:25:08,326 --> 00:25:10,326 A:middle
It's the kind of
tool you should use

564
00:25:10,326 --> 00:25:11,526 A:middle
on your applications right now

565
00:25:11,886 --> 00:25:14,386 A:middle
to find all those
lurking memory issues.

566
00:25:15,206 --> 00:25:17,566 A:middle
We tried to make that
as easy as possible

567
00:25:18,146 --> 00:25:21,626 A:middle
because Address Sanitizer
cannot only run

568
00:25:21,626 --> 00:25:24,206 A:middle
in this interactive
form, but you can use it

569
00:25:24,206 --> 00:25:26,726 A:middle
with Xcode Servers so you
can set up a suite of tests

570
00:25:27,396 --> 00:25:30,106 A:middle
with Address Sanitizer
enabled and find those problems

571
00:25:30,106 --> 00:25:32,126 A:middle
when they creep in your code.

572
00:25:33,436 --> 00:25:35,866 A:middle
Because you want to minimize
the number of crashes

573
00:25:35,906 --> 00:25:38,736 A:middle
but let's be realistic, you
can't eliminate them entirely.

574
00:25:39,306 --> 00:25:42,046 A:middle
So I'm proud to bring
up Itai to talk

575
00:25:42,046 --> 00:25:45,436 A:middle
about how Xcode helps you
analyze those crash logs you

576
00:25:45,436 --> 00:25:45,856 A:middle
will get.

577
00:25:47,516 --> 00:25:56,876 A:middle
[applause]

578
00:25:57,376 --> 00:25:58,526 A:middle
>> Itai Rom: Thanks, Kate.

579
00:25:58,526 --> 00:25:59,416 A:middle
Good morning, everyone.

580

581
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

582
00:26:00,056 --> 00:26:02,956 A:middle
As Apple developer program
members you have access

583
00:26:03,036 --> 00:26:04,556 A:middle
to the new crash logs in Xcode.

584
00:26:05,386 --> 00:26:07,086 A:middle
When you distribute your
app through the App Store

585
00:26:07,086 --> 00:26:11,216 A:middle
or TestFlight and include symbol
information we'll collect crash

586
00:26:11,216 --> 00:26:12,176 A:middle
logs from your users.

587
00:26:13,056 --> 00:26:17,286 A:middle
Those crash logs will be fully
aggregated into crash reports

588
00:26:17,286 --> 00:26:19,346 A:middle
and downloaded into
Xcode wher you can view

589
00:26:19,346 --> 00:26:21,946 A:middle
and analyze them right
in the organizer window.

590
00:26:22,866 --> 00:26:25,456 A:middle
The integration here is
seamless making it easier

591
00:26:25,456 --> 00:26:28,306 A:middle
than ever before to find and
fix your most critical issues.

592
00:26:28,506 --> 00:26:33,586 A:middle
I would like to show
you how to use it.

593
00:26:33,856 --> 00:26:35,406 A:middle
Last year we introduced
TestFlight.

594
00:26:36,376 --> 00:26:38,086 A:middle
TestFlight is a convenient
service

595
00:26:38,086 --> 00:26:41,156 A:middle
for distributing beta builds
of your apps and works great

596
00:26:41,156 --> 00:26:42,646 A:middle
with crash logs in Xcode.

597
00:26:43,486 --> 00:26:46,486 A:middle
We just distributed a beta build
of our trivia game yesterday.

598
00:26:46,876 --> 00:26:49,306 A:middle
I'll like to find and
fix some of the crashes

599
00:26:49,376 --> 00:26:50,756 A:middle
that our testers reported.

600
00:26:52,196 --> 00:26:53,626 A:middle
I'll launch Xcode.

601
00:26:54,066 --> 00:26:56,706 A:middle
I have already entered
my Apple ID information

602
00:26:56,706 --> 00:26:59,646 A:middle
into Xcode's Account Preferences
panel, so all I have to do

603
00:26:59,646 --> 00:27:02,306 A:middle
to view crashes is open
the Organizer window.

604

605
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

606
00:26:59,646 --> 00:27:02,306 A:middle
to view crashes is open
the Organizer window.

607
00:27:02,886 --> 00:27:07,576 A:middle
On the left side of the window,
Xcode will download information

608
00:27:07,576 --> 00:27:10,736 A:middle
about all of the apps that my
development team has uploaded

609
00:27:10,856 --> 00:27:13,606 A:middle
to iTunes Connect for the
App Store or TestFlight.

610
00:27:14,426 --> 00:27:15,236 A:middle
I'll choose trivia.

611
00:27:15,236 --> 00:27:18,676 A:middle
On the right, I can
choose which build

612
00:27:18,676 --> 00:27:19,936 A:middle
of trivia I'm interested in.

613
00:27:20,536 --> 00:27:23,366 A:middle
This build 55 at the top
of the list is the one

614
00:27:23,366 --> 00:27:25,306 A:middle
that we distributed through
TestFlight yesterday.

615
00:27:25,356 --> 00:27:27,586 A:middle
I'll click that.

616
00:27:27,766 --> 00:27:29,836 A:middle
Underneath Xcode will
download information

617
00:27:29,836 --> 00:27:31,196 A:middle
about all of the top crashes.

618
00:27:31,976 --> 00:27:34,966 A:middle
These are sorted by frequency of
occurrence, the one at the top

619
00:27:34,966 --> 00:27:36,736 A:middle
of the list is naturally the one

620
00:27:36,736 --> 00:27:38,846 A:middle
that our testers
experienced the most often.

621
00:27:39,236 --> 00:27:44,016 A:middle
To the right I can see the
back trace for this crash.

622
00:27:44,146 --> 00:27:46,316 A:middle
Xcode helpfully highlights
one of the Stack frames

623
00:27:46,316 --> 00:27:48,256 A:middle
in a beautiful orangey
salmon color,

624
00:27:49,066 --> 00:27:51,256 A:middle
that tells me something
fishy is happening in my app.

625
00:27:52,946 --> 00:27:55,536 A:middle
In particular that's where
my app crashed inside

626
00:27:55,536 --> 00:27:58,106 A:middle
of this usage log
and log in method.

627
00:27:58,366 --> 00:28:01,276 A:middle
That looks similar to the
crash that Kate just found

628

629
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

630
00:27:58,366 --> 00:28:01,276 A:middle
That looks similar to the
crash that Kate just found

631
00:28:01,276 --> 00:28:02,916 A:middle
and fixed using the
Address Sanitizer.

632
00:28:03,546 --> 00:28:05,206 A:middle
That's my favorite type of
bug report, I don't have

633
00:28:05,246 --> 00:28:07,666 A:middle
to do anything since
I watched her fix it.

634
00:28:08,366 --> 00:28:10,706 A:middle
I'm going to go ahead
and mark it as resolved

635
00:28:10,706 --> 00:28:13,836 A:middle
by clicking this button
on top of the window.

636
00:28:13,836 --> 00:28:17,106 A:middle
I can have Xcode filter out the
crashes I have already resolved

637
00:28:17,606 --> 00:28:21,366 A:middle
by clicking the filter in
the bottom of the window.

638
00:28:21,516 --> 00:28:24,026 A:middle
Now I can focus on the crashes
that I still need to fix.

639
00:28:25,156 --> 00:28:26,536 A:middle
We have warmed up with
a pretty easy one.

640
00:28:26,536 --> 00:28:27,876 A:middle
Let's take a look
at the next crash.

641
00:28:28,656 --> 00:28:29,796 A:middle
This time we're crashing inside

642
00:28:29,796 --> 00:28:31,486 A:middle
of our splash screen
view controller,

643
00:28:31,826 --> 00:28:34,526 A:middle
the beautiful landing page in
the app where you see a grid

644
00:28:34,526 --> 00:28:35,646 A:middle
of your friends' images.

645
00:28:36,186 --> 00:28:37,906 A:middle
It looks like we're
indexing into an array

646
00:28:38,006 --> 00:28:40,116 A:middle
and we might have indexed
beyond the array's bounds.

647
00:28:40,116 --> 00:28:41,676 A:middle
I would like to try
fixing this crash.

648
00:28:42,386 --> 00:28:44,766 A:middle
I can jump right into my source
code by clicking the Open

649
00:28:44,766 --> 00:28:48,386 A:middle
and Project button, selecting my
project, and then clicking Open.

650
00:28:48,916 --> 00:28:52,546 A:middle
Now, Xcode has not
only opened my project,

651
00:28:52,646 --> 00:28:54,886 A:middle
it has also magically
transported the crash log

652
00:28:54,886 --> 00:28:57,196 A:middle
that I was just viewing
in the organizer right

653
00:28:57,196 --> 00:29:00,356 A:middle
into the Debug navigator where
I can click through Stack Frames

654

655
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

656
00:28:57,196 --> 00:29:00,356 A:middle
into the Debug navigator where
I can click through Stack Frames

657
00:29:00,816 --> 00:29:02,696 A:middle
and navigate through
my crash log

658
00:29:02,696 --> 00:29:04,946 A:middle
and source code side-by-side.

659
00:29:05,926 --> 00:29:08,626 A:middle
It looks like we're crashing
into the next image method.

660
00:29:09,376 --> 00:29:12,186 A:middle
This looks similar to a
crash I think Jon came

661
00:29:12,186 --> 00:29:14,066 A:middle
to my office yesterday to
tell me he was hitting.

662
00:29:15,036 --> 00:29:17,886 A:middle
What we're doing is indexing
through an array of images

663
00:29:17,886 --> 00:29:20,496 A:middle
of our friends and
incrementing a counter as we go.

664
00:29:21,496 --> 00:29:22,776 A:middle
When we get to the end
of the end of the array,

665
00:29:22,776 --> 00:29:25,256 A:middle
we set the counter back to zero.

666
00:29:25,256 --> 00:29:28,086 A:middle
We have an easy to miss
off by one error here.

667
00:29:28,366 --> 00:29:30,356 A:middle
This should be a greater
than or equal to check.

668
00:29:30,406 --> 00:29:31,446 A:middle
I'll fix that.

669
00:29:32,346 --> 00:29:34,266 A:middle
It looks like you could hit
this crash really easily

670
00:29:34,266 --> 00:29:35,476 A:middle
if you don't have
very many friends,

671
00:29:35,816 --> 00:29:37,556 A:middle
which probably explains
why Jon found it.

672
00:29:39,796 --> 00:29:42,176 A:middle
Now I can go back to the
organizer and fix more crashes.

673
00:29:43,016 --> 00:29:44,576 A:middle
The new crash logs
feature in Xcode

674
00:29:44,576 --> 00:29:47,166 A:middle
and TestFlight work great
together to help you find

675
00:29:47,166 --> 00:29:49,376 A:middle
and fix your most critical
issues before you ship

676
00:29:49,376 --> 00:29:50,196 A:middle
to your customers.

677
00:29:50,926 --> 00:29:51,806 A:middle
Now back to Ken.

678
00:29:53,516 --> 00:29:59,976 A:middle
[applause]

679

680
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

681
00:30:00,476 --> 00:30:02,056 A:middle
>> Ken Orr: Thank you, Itai.

682
00:30:03,536 --> 00:30:09,046 A:middle
Testing. Over the past few
years we have continually added

683
00:30:09,356 --> 00:30:11,166 A:middle
to the testing support in Xcode.

684
00:30:11,536 --> 00:30:13,796 A:middle
Making it possible
for you to test more

685
00:30:13,796 --> 00:30:15,936 A:middle
and more parts of
your application.

686
00:30:16,776 --> 00:30:19,476 A:middle
In Xcode 5 we added
a Test navigator.

687
00:30:19,846 --> 00:30:23,246 A:middle
When you combine that with the
assistant editor we have a nice

688
00:30:23,246 --> 00:30:25,216 A:middle
workflow for test-driven
development.

689
00:30:25,726 --> 00:30:29,166 A:middle
We have introduced XC Test
our unit-testing framework,

690
00:30:30,076 --> 00:30:33,666 A:middle
along with Bots which let you
automatically run the unit tests

691
00:30:34,016 --> 00:30:36,466 A:middle
on Xcode Server for
continuous integration.

692
00:30:37,296 --> 00:30:40,616 A:middle
In Xcode 6, we introduced
performance testing

693
00:30:40,616 --> 00:30:43,446 A:middle
to quickly let you identify
performance regressions

694
00:30:43,576 --> 00:30:46,406 A:middle
and added testing for
asynchronous APIs.

695
00:30:46,406 --> 00:30:52,526 A:middle
In Xcode 7, we're introducing
User Interface testing.

696
00:30:53,766 --> 00:30:57,266 A:middle
The UI testing lets you
test the part of the app

697
00:30:57,386 --> 00:31:00,226 A:middle
that users actually
see and touch.

698

699
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

700
00:30:57,386 --> 00:31:00,226 A:middle
that users actually
see and touch.

701
00:31:01,326 --> 00:31:02,766 A:middle
The tests like this
are so important

702
00:31:03,206 --> 00:31:06,116 A:middle
because they help you ensure
that your app continues

703
00:31:06,116 --> 00:31:08,676 A:middle
to function the way you
originally intended.

704
00:31:09,256 --> 00:31:14,986 A:middle
Even as you make changes
and enhancements over time.

705
00:31:15,396 --> 00:31:17,906 A:middle
Like all the testing features
we have added to Xcode,

706
00:31:18,286 --> 00:31:20,486 A:middle
UI Tests work grade
with Xcode Server.

707
00:31:21,896 --> 00:31:23,736 A:middle
This is particularly
important for UI Test

708
00:31:24,116 --> 00:31:26,446 A:middle
because they may take
a bit longer to run.

709
00:31:27,286 --> 00:31:29,936 A:middle
Also on Xcode Server you
will oftentimes have access

710
00:31:29,936 --> 00:31:32,336 A:middle
to many more devices than
you would at your desk.

711
00:31:33,196 --> 00:31:35,606 A:middle
This will let you get a
broader range of coverage

712
00:31:36,316 --> 00:31:38,886 A:middle
and let you get that
coverage more often.

713
00:31:39,656 --> 00:31:44,066 A:middle
Speaking of coverage, to
round things out in Xcode 7,

714
00:31:44,776 --> 00:31:46,566 A:middle
we have added Code
Coverage for testing.

715
00:31:47,786 --> 00:31:51,186 A:middle
You can turn on Code Coverage
here in the Schemes Test action,

716
00:31:51,726 --> 00:31:54,426 A:middle
and when you do, Xcode
will build your app

717
00:31:54,586 --> 00:31:58,026 A:middle
with special instrumentation
that lets it track exactly

718
00:31:58,026 --> 00:32:00,096 A:middle
which lines of code
are being executed.

719

720
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

721
00:31:58,026 --> 00:32:00,096 A:middle
which lines of code
are being executed.

722
00:32:00,706 --> 00:32:02,706 A:middle
After you run a suite of tests,

723
00:32:03,186 --> 00:32:05,856 A:middle
you will notice the New
Code Coverage bar here

724
00:32:05,856 --> 00:32:07,546 A:middle
on the right side of
the source code editor.

725
00:32:08,566 --> 00:32:10,426 A:middle
This gives you a quick
visual indication

726
00:32:10,426 --> 00:32:13,996 A:middle
that shows you exactly which
lines of code were called,

727
00:32:13,996 --> 00:32:17,626 A:middle
more importantly it shows
you which ones were not.

728
00:32:18,806 --> 00:32:22,466 A:middle
Here to give us a demo of UI
testing in Xcode 7 is Joar.

729
00:32:23,516 --> 00:32:29,056 A:middle
[applause]

730
00:32:29,556 --> 00:32:30,066 A:middle
>> Joar Wingfors:
Thank you, Ken.

731
00:32:30,616 --> 00:32:36,806 A:middle
It is really easy to get started
with UI Testing in Xcode.

732
00:32:36,956 --> 00:32:41,666 A:middle
You add a new UI Testing
target, like I have done here.

733
00:32:42,366 --> 00:32:44,636 A:middle
If you have used
unit testing before,

734
00:32:44,796 --> 00:32:46,726 A:middle
you recognize getting
a test case sub class

735
00:32:46,726 --> 00:32:49,106 A:middle
and the method created for you.

736
00:32:50,076 --> 00:32:52,466 A:middle
Had this been a unit
test, you would now have

737
00:32:52,566 --> 00:32:55,236 A:middle
to write the test method
using your bare hands.

738
00:32:56,126 --> 00:33:01,916 A:middle
Now we can write this for you
recording the application.

739

740
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

741
00:32:56,126 --> 00:33:01,916 A:middle
Now we can write this for you
recording the application.

742
00:33:02,426 --> 00:33:08,156 A:middle
Let's take a look.

743
00:33:08,416 --> 00:33:12,146 A:middle
I put my curser in the Test
Method and start recording

744
00:33:12,336 --> 00:33:18,176 A:middle
by clicking the Record button
at the bottom of the window.

745
00:33:18,326 --> 00:33:20,826 A:middle
While recording any
event received

746
00:33:21,106 --> 00:33:22,356 A:middle
by my application will result

747
00:33:22,356 --> 00:33:24,376 A:middle
in source code being
emitted into my Test Method.

748
00:33:24,956 --> 00:33:27,566 A:middle
For this test I want to
configure a new game.

749
00:33:27,796 --> 00:33:30,216 A:middle
I'll go ahead, tap the
Start a New Game button.

750
00:33:30,746 --> 00:33:37,076 A:middle
Note that as I tap the
button, the corresponding line

751
00:33:37,076 --> 00:33:39,376 A:middle
of code showed up in the
Source Editor right away.

752
00:33:40,936 --> 00:33:42,726 A:middle
Here I'm asked to pick a genre,

753
00:33:42,966 --> 00:33:45,346 A:middle
I'll go with sci-fi
for this test.

754
00:33:46,076 --> 00:33:53,226 A:middle
Tap next. I'll invite a couple
of players, Alice, Brandon,

755
00:33:53,326 --> 00:33:54,926 A:middle
I'll search for Stacy.

756
00:33:56,036 --> 00:33:57,546 A:middle
There she is.

757
00:33:58,296 --> 00:34:00,056 A:middle
I'll tap done.

758

759
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

760
00:33:58,296 --> 00:34:00,056 A:middle
I'll tap done.

761
00:34:00,866 --> 00:34:05,916 A:middle
Tap next. Finally tap the switch
to mark the game as ready.

762
00:34:07,366 --> 00:34:10,176 A:middle
With this I'm done with -- with
what I wanted to record here.

763
00:34:10,306 --> 00:34:15,436 A:middle
Let's take a look with
what we ended up with.

764
00:34:15,626 --> 00:34:17,456 A:middle
This first line of
code contains a query

765
00:34:17,646 --> 00:34:20,016 A:middle
to find a button label
start a new game,

766
00:34:20,585 --> 00:34:23,716 A:middle
and it returns what we call an
element, an element is a proxy

767
00:34:24,266 --> 00:34:26,076 A:middle
of the actual button
in the application.

768
00:34:27,085 --> 00:34:29,936 A:middle
Using this element I can now
access properties of the button

769
00:34:29,985 --> 00:34:33,266 A:middle
and also send events,
in this case, a tap.

770
00:34:35,456 --> 00:34:38,176 A:middle
These next couple of lines
contains the source code

771
00:34:38,176 --> 00:34:44,065 A:middle
for selecting the sci-fi genre
and for tapping the Next button.

772
00:34:44,156 --> 00:34:46,856 A:middle
We designed the UI Testing
APIs to be easy to read here,

773
00:34:47,255 --> 00:34:49,666 A:middle
as you see here,
to be easy to write

774
00:34:49,666 --> 00:34:53,436 A:middle
and to help you produce
robust tests.

775
00:34:54,576 --> 00:34:57,146 A:middle
Now for this to be
a test it would have

776
00:34:57,146 --> 00:34:59,506 A:middle
to actually test something,
and it already does.

777

778
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

779
00:35:00,776 --> 00:35:02,636 A:middle
If I were to run
this test as-is,

780
00:35:02,916 --> 00:35:05,456 A:middle
it would implicitly validate
that all the controls

781
00:35:05,886 --> 00:35:09,806 A:middle
that I interacted with while
recording are still available

782
00:35:09,806 --> 00:35:12,236 A:middle
to me and fail a
test if they're not.

783
00:35:14,116 --> 00:35:16,086 A:middle
In addition to this
implicit validation,

784
00:35:16,086 --> 00:35:17,366 A:middle
I would typically also want

785
00:35:17,366 --> 00:35:20,716 A:middle
to explicitly validate other
aspects of my application state

786
00:35:21,016 --> 00:35:22,856 A:middle
at different points
throughout the test.

787
00:35:24,156 --> 00:35:27,086 A:middle
In this test, I selected
a specific genre

788
00:35:27,536 --> 00:35:29,436 A:middle
and invited a specific
set of players.

789
00:35:30,936 --> 00:35:33,456 A:middle
Let's add a couple of
assertions to the test

790
00:35:33,586 --> 00:35:40,036 A:middle
to make sure that's
what we ended up with.

791
00:35:40,246 --> 00:35:44,526 A:middle
These assertions validate that
there are elements in the UI

792
00:35:44,526 --> 00:35:45,966 A:middle
of the last screen
of the application

793
00:35:46,326 --> 00:35:48,106 A:middle
that contains the
name of the genre

794
00:35:48,336 --> 00:35:49,666 A:middle
and names of these players.

795
00:35:51,076 --> 00:35:53,276 A:middle
With these assertions in
place, I will be allowed

796
00:35:53,386 --> 00:35:55,916 A:middle
to run the test to make sure
it performs as expected.

797

798
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

799
00:36:05,166 --> 00:36:05,546 A:middle
No hands.

800
00:36:18,156 --> 00:36:19,626 A:middle
The test passed.

801
00:36:20,516 --> 00:36:27,006 A:middle
[applause]

802
00:36:27,506 --> 00:36:28,756 A:middle
>> Joar Wingfors: This
is a quick overview

803
00:36:28,756 --> 00:36:30,126 A:middle
of testing in Xcode 7.

804
00:36:31,616 --> 00:36:33,056 A:middle
I think you should all try it.

805
00:36:33,056 --> 00:36:35,666 A:middle
I think you'll love it.

806
00:36:35,666 --> 00:36:37,476 A:middle
More importantly, I think
your customers will.

807
00:36:38,266 --> 00:36:38,806 A:middle
Back to you, Ken.

808
00:36:39,516 --> 00:36:46,506 A:middle
[applause]

809
00:36:47,006 --> 00:36:47,206 A:middle
>> Ken Orr: Great.

810
00:36:47,306 --> 00:36:47,966 A:middle
Thank you, Joar.

811
00:36:50,906 --> 00:36:52,446 A:middle
We have looked at just a few

812
00:36:52,446 --> 00:36:54,396 A:middle
of the many new features
this morning.

813
00:36:55,666 --> 00:36:57,696 A:middle
I hope you're excited
by what you've seen,

814
00:36:58,116 --> 00:37:00,166 A:middle
and you can see even
more throughout this week

815

816
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

817
00:36:58,116 --> 00:37:00,166 A:middle
and you can see even
more throughout this week

818
00:37:00,166 --> 00:37:01,626 A:middle
at the many great
sessions which will go

819
00:37:01,626 --> 00:37:03,706 A:middle
into much more detail
on Xcode 7.

820
00:37:04,676 --> 00:37:05,946 A:middle
If you haven't already,
I encourage you

821
00:37:05,946 --> 00:37:08,466 A:middle
to download the new Xcode and
let us know what you think.

822
00:37:08,466 --> 00:37:09,836 A:middle
Thank you very much.

823
00:37:10,508 --> 00:37:12,508 A:middle
[applause]

824
