X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:21,516 --> 00:00:25,846 A:middle
[Applause]

2
00:00:26,346 --> 00:00:27,886 A:middle
>> IVAN KRSTIC: My name is
Ivan, and I head the Security

3
00:00:27,886 --> 00:00:31,686 A:middle
and Privacy Strategy group at
Apple, and today we are going

4
00:00:31,686 --> 00:00:32,555 A:middle
to talk about security.

5
00:00:32,555 --> 00:00:36,846 A:middle
And, in fact, most of
today's talk will focus

6
00:00:36,846 --> 00:00:38,626 A:middle
on security on devices.

7
00:00:39,436 --> 00:00:42,046 A:middle
Now, as you know, we
have a very strong lineup

8
00:00:42,046 --> 00:00:43,906 A:middle
of device security
features, some of them unique

9
00:00:43,966 --> 00:00:47,356 A:middle
to OS X others to iOS, and some
present on both our platforms.

10
00:00:47,456 --> 00:00:50,446 A:middle
We are continually working to
make these features better,

11
00:00:50,446 --> 00:00:52,126 A:middle
and you're going
to see us continue

12
00:00:52,126 --> 00:00:54,046 A:middle
to relentlessly innovate
in this space.

13
00:00:54,736 --> 00:00:57,256 A:middle
But I'm actually here today to
have a brief interlude with you

14
00:00:57,366 --> 00:00:58,476 A:middle
about network security.

15
00:00:58,476 --> 00:01:02,376 A:middle
When we think about network
security most of you think

16

17
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

18
00:00:58,476 --> 00:01:02,376 A:middle
When we think about network
security most of you think

19
00:01:02,376 --> 00:01:05,135 A:middle
of HTTPS, which most
of us experience

20
00:01:05,135 --> 00:01:06,846 A:middle
as the lock icon in the browser.

21
00:01:07,996 --> 00:01:13,076 A:middle
It used to be that
websites used HTTPS and TLS

22
00:01:13,286 --> 00:01:15,476 A:middle
if they were transmitting
sensitive information.

23
00:01:16,836 --> 00:01:18,706 A:middle
But we no longer think of things

24
00:01:18,706 --> 00:01:20,496 A:middle
like credit card
information as sensitive.

25
00:01:20,496 --> 00:01:24,166 A:middle
In fact, today we think of
all kinds of user information

26
00:01:24,296 --> 00:01:26,386 A:middle
as being sensitive, and
even some things that you

27
00:01:26,386 --> 00:01:29,496 A:middle
as a developer may not think
of as sensitive, a user may.

28
00:01:31,436 --> 00:01:33,356 A:middle
One other really
important thing about TLS

29
00:01:33,356 --> 00:01:34,866 A:middle
that we don't often
think about is

30
00:01:34,866 --> 00:01:37,756 A:middle
that it doesn't just protect
the secrecy of information

31
00:01:37,756 --> 00:01:39,056 A:middle
as it moves across the network.

32
00:01:39,666 --> 00:01:41,876 A:middle
It also protects the
integrity of those connections.

33
00:01:42,766 --> 00:01:44,896 A:middle
And the threats on the
network have changed.

34
00:01:45,866 --> 00:01:48,856 A:middle
It's no longer just someone
wearing a black ski mask hiding

35
00:01:48,856 --> 00:01:50,096 A:middle
on some corner of
the Internet trying

36
00:01:50,096 --> 00:01:51,336 A:middle
to get your credit card numbers.

37
00:01:51,466 --> 00:01:53,936 A:middle
In fact, users may want
to protect themselves

38
00:01:53,936 --> 00:01:55,196 A:middle
against other kinds of threats.

39
00:01:55,606 --> 00:01:58,256 A:middle
For example, Internet
service providers

40
00:01:58,256 --> 00:02:00,826 A:middle
that are injecting tracking
headers into every request,

41

42
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

43
00:01:58,256 --> 00:02:00,826 A:middle
that are injecting tracking
headers into every request,

44
00:02:01,186 --> 00:02:03,476 A:middle
or even outright
recording browsing histories

45
00:02:03,526 --> 00:02:04,566 A:middle
to support ad targeting.

46
00:02:04,566 --> 00:02:09,795 A:middle
So in 2015 we believe that TLS
is really a minimum base line

47
00:02:09,866 --> 00:02:11,856 A:middle
for responsibly protecting
customer information

48
00:02:12,216 --> 00:02:12,796 A:middle
on the network.

49
00:02:15,536 --> 00:02:17,756 A:middle
But TLS is not quite enough.

50
00:02:18,526 --> 00:02:20,716 A:middle
Many servers still
use version 1 of TLS,

51
00:02:21,256 --> 00:02:23,026 A:middle
which is very old,
it's 16 years old.

52
00:02:23,126 --> 00:02:26,756 A:middle
And the newest version of TLS,
1.2, which is 7 years old,

53
00:02:27,076 --> 00:02:29,206 A:middle
contains a number of really
important cryptographic

54
00:02:29,206 --> 00:02:31,856 A:middle
improvements to the protocol,
which make it more resilient

55
00:02:31,856 --> 00:02:33,986 A:middle
to the kinds of threats
that we are seeing today

56
00:02:33,986 --> 00:02:35,336 A:middle
and will be facing
in the future.

57
00:02:35,336 --> 00:02:40,036 A:middle
And in fact, even TLS
1.2 is not quite enough.

58
00:02:40,586 --> 00:02:43,626 A:middle
With the way TLS works,
if an attacker is able

59
00:02:43,626 --> 00:02:47,146 A:middle
to compromise a server and
steal your TLS key, they can use

60
00:02:47,146 --> 00:02:50,936 A:middle
that key to retroactively
decrypt all previously encrypted

61
00:02:50,936 --> 00:02:51,936 A:middle
data by that server.

62
00:02:52,446 --> 00:02:53,906 A:middle
That's obviously
very undesirable.

63
00:02:54,486 --> 00:02:56,146 A:middle
There's a property
called forward secrecy

64
00:02:56,146 --> 00:02:57,416 A:middle
that makes it not true.

65
00:02:57,526 --> 00:02:59,726 A:middle
With forward secrecy,
if an attacker is able

66
00:02:59,726 --> 00:03:03,166 A:middle
to compromise a server and steal
the TLS key, they can only use

67

68
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

69
00:02:59,726 --> 00:03:03,166 A:middle
to compromise a server and steal
the TLS key, they can only use

70
00:03:03,166 --> 00:03:04,986 A:middle
that key to decrypt
future traffic

71
00:03:05,166 --> 00:03:07,546 A:middle
that the server encrypts,
but no prior traffic.

72
00:03:08,556 --> 00:03:10,816 A:middle
And this is great because
it mitigates bulk recording

73
00:03:10,816 --> 00:03:13,686 A:middle
of network encrypted data.

74
00:03:13,876 --> 00:03:17,246 A:middle
TLS supports forward secrecy
and it does it through the use

75
00:03:17,246 --> 00:03:19,436 A:middle
of what are called cipher
suites which are combinations

76
00:03:19,436 --> 00:03:21,506 A:middle
of cryptographic primitives
that you actually have

77
00:03:21,506 --> 00:03:22,746 A:middle
to enable on your server.

78
00:03:23,356 --> 00:03:26,786 A:middle
So your server need only not
run just TLS, but in fact needs

79
00:03:26,846 --> 00:03:29,746 A:middle
to run TLS 1.2, and in order
to get forward secrecy,

80
00:03:29,746 --> 00:03:31,076 A:middle
you must configure
it to do that.

81
00:03:32,236 --> 00:03:33,696 A:middle
So why am I telling
you all of this?

82
00:03:33,696 --> 00:03:42,506 A:middle
Well, here is a quote from Tim,
and I will let you read it.

83
00:03:42,786 --> 00:03:44,366 A:middle
>> "We must get this right."

84
00:03:45,026 --> 00:03:47,366 A:middle
And to help you get it right,

85
00:03:48,586 --> 00:03:50,926 A:middle
we're introducing a feature
called App Transport Security.

86
00:03:51,696 --> 00:03:52,666 A:middle
Here's how it works.

87
00:03:53,816 --> 00:03:58,406 A:middle
If you link your app against
OS X El Capitan or iOS 9,

88
00:03:59,546 --> 00:04:00,736 A:middle
by default it won't be able

89

90
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

91
00:03:59,546 --> 00:04:00,736 A:middle
by default it won't be able

92
00:04:00,736 --> 00:04:03,106 A:middle
to make any unprotected
HTTP connections;

93
00:04:03,106 --> 00:04:05,816 A:middle
they will simply fail,
and any TLS connections

94
00:04:05,816 --> 00:04:09,276 A:middle
that your app makes will have no
adhere to these best practices

95
00:04:09,276 --> 00:04:10,196 A:middle
that I just described.

96
00:04:10,436 --> 00:04:12,456 A:middle
And that's TLS 1.2
with forward secrecy.

97
00:04:13,016 --> 00:04:14,446 A:middle
Cryptographic primitives
that are known

98
00:04:14,446 --> 00:04:16,176 A:middle
to be insecure are not allowed,

99
00:04:16,505 --> 00:04:18,826 A:middle
and there are minimum key size
requirements put in place.

100
00:04:19,516 --> 00:04:21,776 A:middle
Now, you may not be
able to comply with all

101
00:04:21,776 --> 00:04:25,116 A:middle
of these restrictions
immediately, and that's okay,

102
00:04:25,116 --> 00:04:27,636 A:middle
you can specify exceptions
in your Info.plist either

103
00:04:27,636 --> 00:04:31,856 A:middle
on a case-by-case basis for each
domain or as a global override.

104
00:04:32,456 --> 00:04:35,826 A:middle
But, as an industry we have
to very soon get to a point

105
00:04:35,826 --> 00:04:38,366 A:middle
where no user information
hits the network unencrypted,

106
00:04:39,486 --> 00:04:40,166 A:middle
and we need your help.

107
00:04:41,676 --> 00:04:42,996 A:middle
Thank you for that
and I will turn it

108
00:04:42,996 --> 00:04:44,986 A:middle
over to my colleague Pierre
who's going to tell you

109
00:04:44,986 --> 00:04:46,276 A:middle
about System Integrity
Protection.

110
00:04:47,516 --> 00:04:50,976 A:middle
[Applause]

111
00:04:51,476 --> 00:04:52,086 A:middle
>> PIERRE-OLIVIER
MARTEL: Thank you Ivan.

112
00:04:54,466 --> 00:04:57,466 A:middle
Hi everyone, my name is
Pierre-Olivier Martel.

113
00:04:57,546 --> 00:04:59,086 A:middle
I'm the engineering manager

114
00:04:59,086 --> 00:05:01,116 A:middle
for Sandboxing Technologies
here at Apple.

115

116
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

117
00:04:59,086 --> 00:05:01,116 A:middle
for Sandboxing Technologies
here at Apple.

118
00:05:01,926 --> 00:05:03,386 A:middle
And today I'm here
to talk to you

119
00:05:03,386 --> 00:05:04,836 A:middle
about System Integrity
Protection

120
00:05:05,396 --> 00:05:07,036 A:middle
which is a new hardening
mechanism

121
00:05:07,236 --> 00:05:08,926 A:middle
that we are introducing
in El Capitan.

122
00:05:10,346 --> 00:05:13,546 A:middle
Before I dive into the details,
I would like to take a step back

123
00:05:13,796 --> 00:05:15,386 A:middle
and provide some context

124
00:05:15,386 --> 00:05:16,646 A:middle
around what we're
trying to achieve here.

125
00:05:17,906 --> 00:05:23,176 A:middle
My team's mission at Apple is
to make sure that our users get

126
00:05:23,176 --> 00:05:25,766 A:middle
to enjoy the great user
experience that comes

127
00:05:25,766 --> 00:05:28,056 A:middle
with our product,
with the confidence

128
00:05:28,096 --> 00:05:32,376 A:middle
that their personal data is
protected and that malware

129
00:05:32,656 --> 00:05:35,586 A:middle
or even simply a poorly
written piece of software,

130
00:05:35,946 --> 00:05:39,196 A:middle
only has a limited impact
on their user experience.

131
00:05:39,616 --> 00:05:44,376 A:middle
So to that end we've designed
and integrated various pieces

132
00:05:44,376 --> 00:05:47,516 A:middle
of security technologies,
as Ivan mentioned before,

133
00:05:47,996 --> 00:05:51,296 A:middle
over the year in iOS and OS X.

134
00:05:51,296 --> 00:05:52,546 A:middle
One of the quotas and principles

135
00:05:52,546 --> 00:05:56,446 A:middle
that we applied there is the
concept of defense in depth.

136
00:05:57,196 --> 00:06:00,096 A:middle
Now, the key principle here is
something you've probably heard

137

138
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

139
00:05:57,196 --> 00:06:00,096 A:middle
Now, the key principle here is
something you've probably heard

140
00:06:00,096 --> 00:06:03,186 A:middle
before, which is that
security is all about layers.

141
00:06:04,226 --> 00:06:06,956 A:middle
And for the same reason that you
shouldn't put all of your eggs

142
00:06:06,956 --> 00:06:11,106 A:middle
in the same basket, you
shouldn't rely on a single layer

143
00:06:11,106 --> 00:06:12,996 A:middle
of protection to
defend the device,

144
00:06:13,786 --> 00:06:18,166 A:middle
because no matter how
bulletproof, or water resistant,

145
00:06:18,166 --> 00:06:21,636 A:middle
or shock absorbent this layer
is, when it starts failing you,

146
00:06:22,376 --> 00:06:25,426 A:middle
then it's complete game over.

147
00:06:25,666 --> 00:06:28,746 A:middle
Instead, you should rely on
multiple layers of protection,

148
00:06:29,456 --> 00:06:32,796 A:middle
ideally with different
security properties

149
00:06:33,296 --> 00:06:35,576 A:middle
that will delay the
advance of an attacker

150
00:06:36,086 --> 00:06:37,386 A:middle
and reduce your attack surface.

151
00:06:38,106 --> 00:06:41,286 A:middle
Now, the concept of defense

152
00:06:41,286 --> 00:06:43,626 A:middle
in depth is an old military
concept that's been used

153
00:06:43,756 --> 00:06:48,296 A:middle
to defend fortresses all around
the world for centuries for now.

154
00:06:48,656 --> 00:06:49,886 A:middle
Because I you know
you guys like trivia,

155
00:06:50,076 --> 00:06:52,656 A:middle
I can tell that you it
was actually formalized

156
00:06:52,656 --> 00:06:57,516 A:middle
by this gentleman, Sebastien
de Vauban, in the 1670s,

157
00:06:57,516 --> 00:06:59,056 A:middle
when he was asked by
the King of France

158
00:06:59,496 --> 00:07:01,566 A:middle
to rebuild all the
fortresses around the country

159

160
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

161
00:06:59,496 --> 00:07:01,566 A:middle
to rebuild all the
fortresses around the country

162
00:07:02,166 --> 00:07:04,766 A:middle
that were used to
defend the kingdom.

163
00:07:05,696 --> 00:07:08,086 A:middle
And you may not be
familiar with the character,

164
00:07:08,086 --> 00:07:11,026 A:middle
but maybe you've seen
some of his work before.

165
00:07:11,286 --> 00:07:13,636 A:middle
That's the design of
one of his castles.

166
00:07:14,046 --> 00:07:16,056 A:middle
You can clearly see several
layers of protection here

167
00:07:16,056 --> 00:07:17,966 A:middle
that are designed to stop
different kinds of attacks

168
00:07:18,946 --> 00:07:22,216 A:middle
and that will basically delay
the attacker and funnel him

169
00:07:22,296 --> 00:07:27,446 A:middle
through different bottlenecks
that are easier to defend.

170
00:07:28,196 --> 00:07:31,656 A:middle
So let's see how this applies
to the OS X security model.

171
00:07:32,526 --> 00:07:34,906 A:middle
And I don't know about you,
but I've always dreamed

172
00:07:34,906 --> 00:07:37,206 A:middle
to build my own fort,
so there it is,

173
00:07:37,836 --> 00:07:41,186 A:middle
and we'll put our own
security layers on it.

174
00:07:41,736 --> 00:07:44,556 A:middle
Starting from the bottom,
we'll start with Gatekeeper.

175
00:07:45,736 --> 00:07:49,406 A:middle
So Gatekeeper makes sure that an
application that gets downloaded

176
00:07:49,406 --> 00:07:54,046 A:middle
from the Internet onto the
user's machine has to be signed

177
00:07:54,326 --> 00:07:56,596 A:middle
by a -- we have a
Developer ID certificate

178
00:07:56,656 --> 00:07:58,416 A:middle
that Apple has issued
to a developer,

179
00:07:59,106 --> 00:08:02,596 A:middle
otherwise the application
does not get to launch.

180

181
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

182
00:07:59,106 --> 00:08:02,596 A:middle
otherwise the application
does not get to launch.

183
00:08:03,886 --> 00:08:06,146 A:middle
And combined with some
other mechanism that we have

184
00:08:06,146 --> 00:08:08,856 A:middle
on the system, like some
malware detection mechanism,

185
00:08:09,306 --> 00:08:11,586 A:middle
then it's actually a
pretty effective measure

186
00:08:12,446 --> 00:08:16,106 A:middle
to stop a massive malware
attack on our ecosystem.

187
00:08:16,596 --> 00:08:19,436 A:middle
The second layer is Sandbox.

188
00:08:20,786 --> 00:08:23,526 A:middle
So back in Lion, we
introduced App Sandbox

189
00:08:23,976 --> 00:08:24,936 A:middle
and we mad it mandatory

190
00:08:24,936 --> 00:08:28,676 A:middle
for applications coming
from the App Store.

191
00:08:28,896 --> 00:08:32,196 A:middle
We also highly recommended it
for applications coming outside

192
00:08:32,196 --> 00:08:34,546 A:middle
of the App Store, like for
instance using the Developer

193
00:08:34,546 --> 00:08:35,066 A:middle
ID program.

194
00:08:36,496 --> 00:08:38,476 A:middle
Sandbox is a containment
mechanism.

195
00:08:39,236 --> 00:08:40,736 A:middle
Which means that it
makes sure that even

196
00:08:40,736 --> 00:08:42,296 A:middle
if your application
gets exploited,

197
00:08:43,106 --> 00:08:46,106 A:middle
then the application only
has access to the data

198
00:08:46,106 --> 00:08:47,346 A:middle
that the user actually gave it,

199
00:08:47,786 --> 00:08:50,466 A:middle
which means the application
cannot steal all the user's

200
00:08:50,466 --> 00:08:53,766 A:middle
data, and cannot compromise
the rest of the system.

201
00:08:54,236 --> 00:08:58,376 A:middle
The third layer, if you
manage to go through

202
00:08:58,376 --> 00:09:02,426 A:middle
or around the first two, is the
classic POSIX permission scheme,

203

204
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

205
00:08:58,376 --> 00:09:02,426 A:middle
or around the first two, is the
classic POSIX permission scheme,

206
00:09:03,196 --> 00:09:05,776 A:middle
which means that your
application only runs

207
00:09:05,776 --> 00:09:09,206 A:middle
with the set of privileges that
the system granted to your user.

208
00:09:09,796 --> 00:09:12,586 A:middle
So the application won't be
able to access data owned

209
00:09:12,586 --> 00:09:14,826 A:middle
by a different user
and it won't be able

210
00:09:14,826 --> 00:09:17,396 A:middle
to modify a systemwide
configuration settings

211
00:09:17,396 --> 00:09:19,706 A:middle
that are usually owned
by the root user.

212
00:09:20,226 --> 00:09:25,386 A:middle
And finally, we can think of the
Keychain as yet another layer

213
00:09:25,386 --> 00:09:26,866 A:middle
on top of that, which
is designed

214
00:09:26,866 --> 00:09:28,886 A:middle
to protect the user's secrets.

215
00:09:29,416 --> 00:09:33,666 A:middle
It relies on cryptography
and application separation

216
00:09:34,266 --> 00:09:37,866 A:middle
to make sure that only the
application that's stored a

217
00:09:37,866 --> 00:09:40,736 A:middle
secret in the first place
can get back to it later.

218
00:09:42,656 --> 00:09:44,366 A:middle
So when you look at
the big picture here,

219
00:09:45,066 --> 00:09:46,476 A:middle
you realize a couple of things.

220
00:09:47,576 --> 00:09:51,896 A:middle
First, Gatekeeper will stop
untrusted code downloaded

221
00:09:51,896 --> 00:09:54,416 A:middle
on the machine from
being launched.

222
00:09:55,336 --> 00:09:57,366 A:middle
But it's not actually a
containment mechanism.

223
00:09:57,366 --> 00:09:59,126 A:middle
It doesn't stop the application

224
00:09:59,126 --> 00:10:01,486 A:middle
when it's run from
doing anything.

225

226
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

227
00:09:59,126 --> 00:10:01,486 A:middle
when it's run from
doing anything.

228
00:10:02,276 --> 00:10:05,516 A:middle
Also, it does not protect code
that's already on the machine.

229
00:10:05,516 --> 00:10:07,196 A:middle
So code that ships with
the OS, for instance,

230
00:10:07,196 --> 00:10:08,946 A:middle
is not protected by it.

231
00:10:09,916 --> 00:10:13,926 A:middle
Then, sandboxing, although it's
probably the most effective

232
00:10:14,216 --> 00:10:17,256 A:middle
containment mechanism
we have on the platform,

233
00:10:17,256 --> 00:10:19,196 A:middle
is only an opt-in in OS X.

234
00:10:19,856 --> 00:10:22,646 A:middle
So there's no requirement
for every single process

235
00:10:22,966 --> 00:10:26,936 A:middle
to actually run in a sandbox.

236
00:10:26,936 --> 00:10:30,366 A:middle
Finally, when you look at the
POSIX layer, you realize that,

237
00:10:31,516 --> 00:10:36,476 A:middle
well, most of the Macs out there
are actually single user systems

238
00:10:37,066 --> 00:10:40,466 A:middle
where the user is the de
facto administrator running

239
00:10:40,466 --> 00:10:43,716 A:middle
with administrative
privileges all the time.

240
00:10:44,836 --> 00:10:46,866 A:middle
The root account is
usually protected

241
00:10:46,866 --> 00:10:52,186 A:middle
or hidden behind an often weak
password or no password at all.

242
00:10:52,186 --> 00:10:55,296 A:middle
And in fact, if there is a
password and you ask for it,

243
00:10:55,506 --> 00:10:56,946 A:middle
the users likely give it to you.

244
00:10:58,186 --> 00:11:02,926 A:middle
And finally, when you root, then
you actually have full control

245

246
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

247
00:10:58,186 --> 00:11:02,926 A:middle
And finally, when you root, then
you actually have full control

248
00:11:02,926 --> 00:11:06,266 A:middle
on the machine, because root can
disable all security measures

249
00:11:06,376 --> 00:11:06,986 A:middle
on the device.

250
00:11:07,686 --> 00:11:10,956 A:middle
It can replace the
kernel extensions,

251
00:11:11,466 --> 00:11:15,286 A:middle
it can replace launchd, any
other security services,

252
00:11:15,816 --> 00:11:17,956 A:middle
it can even interfere
with the Keychain layers

253
00:11:17,956 --> 00:11:20,426 A:middle
that sit on top of it.

254
00:11:20,686 --> 00:11:24,036 A:middle
So the reality is that once you
have code running on the Mac,

255
00:11:24,536 --> 00:11:26,706 A:middle
it's actually not that
hard to become root,

256
00:11:27,196 --> 00:11:28,986 A:middle
and once you are root, you have
full control of the machine.

257
00:11:29,606 --> 00:11:31,806 A:middle
Which means that any piece

258
00:11:31,806 --> 00:11:33,786 A:middle
of malware is actually
one password,

259
00:11:33,786 --> 00:11:35,546 A:middle
or one vulnerability away

260
00:11:35,916 --> 00:11:40,336 A:middle
from taking full
control of the device.

261
00:11:40,416 --> 00:11:44,336 A:middle
This shows us that we
need another layer.

262
00:11:45,416 --> 00:11:48,346 A:middle
We need a layer that will
eliminate the power of root

263
00:11:48,516 --> 00:11:52,046 A:middle
on the machine and protect
the system by default,

264
00:11:52,086 --> 00:11:54,506 A:middle
as it was installed by
Apple on the machine.

265
00:11:55,346 --> 00:11:57,026 A:middle
Both on disk and at runtime.

266
00:11:57,566 --> 00:12:02,036 A:middle
And because we are talking
about taking some power away

267

268
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

269
00:11:57,566 --> 00:12:02,036 A:middle
And because we are talking
about taking some power away

270
00:12:02,096 --> 00:12:05,276 A:middle
from root, then we need

271
00:12:05,276 --> 00:12:06,856 A:middle
to provide a configuration
mechanism

272
00:12:07,326 --> 00:12:09,886 A:middle
that root itself
cannot compromise,

273
00:12:10,846 --> 00:12:14,126 A:middle
but that can give away
this power back to root.

274
00:12:15,296 --> 00:12:18,086 A:middle
This is what System
Integrated Protection is.

275
00:12:18,876 --> 00:12:21,366 A:middle
It is a new security
policy that applies

276
00:12:21,406 --> 00:12:24,006 A:middle
to every single process
running on the system.

277
00:12:24,646 --> 00:12:26,526 A:middle
Regardless of whether
this process is running

278
00:12:26,526 --> 00:12:29,856 A:middle
with extra privileges, or
if it's running unsandboxed.

279
00:12:30,296 --> 00:12:33,896 A:middle
It's designed to
provide extra protections

280
00:12:34,216 --> 00:12:37,916 A:middle
to system components, both
on disk and at runtime,

281
00:12:39,096 --> 00:12:43,106 A:middle
and it makes it so that system
binaries are only modifiable

282
00:12:43,106 --> 00:12:46,886 A:middle
by the installer, if it installs
an Apple signed package,

283
00:12:48,096 --> 00:12:50,006 A:middle
or the Software Update
mechanism.

284
00:12:50,706 --> 00:12:54,316 A:middle
And finally, that the system
binaries are protected

285
00:12:54,386 --> 00:12:58,426 A:middle
from runtime attachments,
and from code injection.

286
00:12:58,976 --> 00:13:01,556 A:middle
So before we dive
into the details here,

287

288
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

289
00:12:58,976 --> 00:13:01,556 A:middle
So before we dive
into the details here,

290
00:13:01,976 --> 00:13:05,276 A:middle
let's see how this is going
to impact you the developers.

291
00:13:06,426 --> 00:13:09,556 A:middle
Well the good news is that
if you ship your application

292
00:13:09,556 --> 00:13:12,256 A:middle
on the App Store, then your
application is not impacted

293
00:13:12,256 --> 00:13:16,496 A:middle
by any of this, because
the App Store guidelines

294
00:13:16,636 --> 00:13:18,616 A:middle
and the app sandbox policy,

295
00:13:18,796 --> 00:13:20,546 A:middle
already prohibits all
of these behaviors.

296
00:13:21,506 --> 00:13:23,616 A:middle
However, if you ship
outside of the store,

297
00:13:24,346 --> 00:13:26,606 A:middle
then your application is
potentially impacted by this,

298
00:13:27,136 --> 00:13:31,616 A:middle
if it relies on being able
to modify system binaries

299
00:13:31,736 --> 00:13:32,896 A:middle
or frameworks on disk.

300
00:13:33,436 --> 00:13:36,276 A:middle
If it needs to be able
to install content

301
00:13:36,686 --> 00:13:39,966 A:middle
in system locations, and I
will explain a little bit

302
00:13:39,966 --> 00:13:41,756 A:middle
about what system
locations mean in here.

303
00:13:42,416 --> 00:13:45,176 A:middle
And finally, if your
application needs

304
00:13:45,176 --> 00:13:47,986 A:middle
to inspect the memory
states of any process

305
00:13:48,096 --> 00:13:52,046 A:middle
on a system including system
processes, or if it needs

306
00:13:52,046 --> 00:13:56,536 A:middle
to be able to inject libraries
or debug over processes,

307
00:13:56,696 --> 00:13:57,706 A:middle
including system processes.

308
00:13:59,456 --> 00:14:02,576 A:middle
So let's look at the key
aspects of this new mechanism.

309

310
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

311
00:13:59,456 --> 00:14:02,576 A:middle
So let's look at the key
aspects of this new mechanism.

312
00:14:03,076 --> 00:14:05,666 A:middle
First, we look at new
filesystem restrictions

313
00:14:05,946 --> 00:14:08,566 A:middle
that we are introducing
in Capitan,

314
00:14:08,566 --> 00:14:11,006 A:middle
and then we'll see
how these extend

315
00:14:11,316 --> 00:14:13,426 A:middle
to new runtime protections.

316
00:14:14,736 --> 00:14:17,206 A:middle
Finally, we'll see
how this all ties

317
00:14:17,206 --> 00:14:20,166 A:middle
in with the kernel
extension development workflow

318
00:14:20,166 --> 00:14:23,526 A:middle
and how it potentially impacts
you if you are a kext developer.

319
00:14:23,526 --> 00:14:27,346 A:middle
And then because the feature
can entirely be disabled,

320
00:14:28,006 --> 00:14:29,516 A:middle
I will just show you how.

321
00:14:30,016 --> 00:14:32,536 A:middle
Let's talk about the
filesystem first.

322
00:14:33,966 --> 00:14:35,456 A:middle
What we're trying to
achieve here is we want

323
00:14:35,456 --> 00:14:39,866 A:middle
to protect system content
from being modified.

324
00:14:40,486 --> 00:14:45,876 A:middle
To do so, the installer will
actually flag system content

325
00:14:45,876 --> 00:14:47,866 A:middle
as it installs the
files on disk.

326
00:14:48,646 --> 00:14:50,976 A:middle
We have a new filesystem flag
that we introduced in Capitan.

327
00:14:51,986 --> 00:14:56,536 A:middle
And then later on, at runtime,
the kernel will stop any attempt

328
00:14:56,846 --> 00:14:58,946 A:middle
at modifying these
protected files

329
00:14:58,946 --> 00:15:02,046 A:middle
or protected folders
unless the attempt comes

330

331
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

332
00:14:58,946 --> 00:15:02,046 A:middle
or protected folders
unless the attempt comes

333
00:15:02,046 --> 00:15:05,196 A:middle
from a specially
entitled process,

334
00:15:05,416 --> 00:15:07,916 A:middle
of which there's only
a handful on Capitan.

335
00:15:09,016 --> 00:15:12,136 A:middle
It will also stop you from
writing to the block devices

336
00:15:12,306 --> 00:15:13,886 A:middle
that back this protected
content.

337
00:15:15,216 --> 00:15:16,776 A:middle
And it will stop
you from mounting

338
00:15:16,966 --> 00:15:18,886 A:middle
over this protected content.

339
00:15:19,846 --> 00:15:22,126 A:middle
And one thing you have to
keep in mind is that for now,

340
00:15:22,406 --> 00:15:25,166 A:middle
this only applies to the
root, and the boot volume

341
00:15:25,576 --> 00:15:27,906 A:middle
of the currently running OS.

342
00:15:27,996 --> 00:15:30,736 A:middle
So you should see this
as a way for the system

343
00:15:31,046 --> 00:15:36,126 A:middle
to protect itself at runtime.

344
00:15:36,266 --> 00:15:39,316 A:middle
Now, because we are trying to
protect system content on disk,

345
00:15:39,316 --> 00:15:41,326 A:middle
we need to have a
clear separation

346
00:15:41,326 --> 00:15:43,596 A:middle
between system content
and third-party content.

347
00:15:44,896 --> 00:15:48,876 A:middle
So in Capitan, all the
locations that are on the left

348
00:15:48,876 --> 00:15:52,016 A:middle
of this chart will now be
considered system locations.

349
00:15:52,846 --> 00:15:54,426 A:middle
Which means that the system
will actually stop you

350
00:15:54,426 --> 00:15:56,986 A:middle
from writing there,
including if it comes

351
00:15:57,036 --> 00:15:57,886 A:middle
in an installer package.

352
00:15:58,366 --> 00:16:01,226 A:middle
So it should not
impact many of you here

353

354
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

355
00:15:58,366 --> 00:16:01,226 A:middle
So it should not
impact many of you here

356
00:16:01,226 --> 00:16:03,686 A:middle
because we've been
advising for many years now,

357
00:16:03,986 --> 00:16:05,376 A:middle
that you shouldn't write
to these locations.

358
00:16:05,746 --> 00:16:08,556 A:middle
But it's not going to be
a hard failure in Capitan

359
00:16:08,556 --> 00:16:10,666 A:middle
if your package installs
content in there.

360
00:16:11,506 --> 00:16:13,216 A:middle
So if you install
anything in /System,

361
00:16:13,216 --> 00:16:16,776 A:middle
you need to move this content
into the appropriate subfolder

362
00:16:17,116 --> 00:16:20,666 A:middle
of /Library, if it's supposed
to be system wide content,

363
00:16:21,256 --> 00:16:24,316 A:middle
or (tilde)/Library if it's
supposed to be user content.

364
00:16:24,836 --> 00:16:32,156 A:middle
If you install anything in /bin,
or /sbin, or anywhere under /usr

365
00:16:32,186 --> 00:16:36,446 A:middle
like /usr/bin, /usr/lib,
/usr/libexec, then you need

366
00:16:36,446 --> 00:16:39,266 A:middle
to move this content into
the appropriate subfolder

367
00:16:39,596 --> 00:16:44,336 A:middle
of the /usr/local folder,
because that's the only location

368
00:16:44,336 --> 00:16:45,926 A:middle
that is now available
to third-parties.

369
00:16:46,356 --> 00:16:50,466 A:middle
And then a reminder
that the best location

370
00:16:50,466 --> 00:16:52,516 A:middle
for your content is
still /Applications

371
00:16:52,656 --> 00:16:55,536 A:middle
because that's the location
that is visible to the user

372
00:16:56,136 --> 00:16:58,796 A:middle
and it's easy for them to
actually drag your application

373
00:16:58,796 --> 00:17:00,516 A:middle
to the trash and just
remove all content.

374

375
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

376
00:16:58,796 --> 00:17:00,516 A:middle
to the trash and just
remove all content.

377
00:17:01,856 --> 00:17:07,506 A:middle
One important note here,
that when the user upgrades

378
00:17:07,685 --> 00:17:10,695 A:middle
from a Yosemite install,
to a Capitan install,

379
00:17:11,435 --> 00:17:14,806 A:middle
the installer will actually
migrate any third-party content

380
00:17:14,806 --> 00:17:17,766 A:middle
that it finds in
system locations outside

381
00:17:17,766 --> 00:17:18,506 A:middle
of these locations.

382
00:17:19,656 --> 00:17:23,165 A:middle
So you need to make sure that
today you start migrating

383
00:17:23,165 --> 00:17:25,945 A:middle
that content away as soon
as possible so as not

384
00:17:25,945 --> 00:17:26,816 A:middle
to impact these users.

385
00:17:26,816 --> 00:17:31,606 A:middle
Now, let's look at the
runtime protections.

386
00:17:33,086 --> 00:17:35,766 A:middle
Being able to modify the
behavior of a process

387
00:17:35,906 --> 00:17:39,016 A:middle
at runtime is more
equivalent to being able

388
00:17:39,016 --> 00:17:40,836 A:middle
to modify the binary on disk.

389
00:17:41,506 --> 00:17:43,256 A:middle
So if you try to protect
the binary on disk

390
00:17:43,516 --> 00:17:46,126 A:middle
and the system content on
disk, we have to make sure

391
00:17:46,396 --> 00:17:49,616 A:middle
that it's not possible to inject
code or modify the behavior

392
00:17:50,276 --> 00:17:51,536 A:middle
of these system processes.

393
00:17:52,696 --> 00:17:56,716 A:middle
To do so, we are introducing
a new restricted flag

394
00:17:57,356 --> 00:18:00,426 A:middle
in the process structure
that the kernel holds

395

396
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

397
00:17:57,356 --> 00:18:00,426 A:middle
in the process structure
that the kernel holds

398
00:18:00,846 --> 00:18:01,806 A:middle
for every single process.

399
00:18:03,046 --> 00:18:06,086 A:middle
And a kernel will set
that flag at exact time

400
00:18:06,846 --> 00:18:11,116 A:middle
if the main executable
is protected on disk,

401
00:18:11,256 --> 00:18:13,306 A:middle
or if the main executable
is signed

402
00:18:13,306 --> 00:18:14,606 A:middle
with an Apple-private
entitlement.

403
00:18:15,036 --> 00:18:22,546 A:middle
And then later on, the system
will actually treat these

404
00:18:22,846 --> 00:18:24,906 A:middle
restricted processes
slightly differently

405
00:18:24,906 --> 00:18:26,076 A:middle
than regular processes.

406
00:18:26,196 --> 00:18:29,406 A:middle
For one, the task-for-pid

407
00:18:29,956 --> 00:18:35,016 A:middle
and the processor-set-tasks SPI
will now fail if they are called

408
00:18:35,116 --> 00:18:36,296 A:middle
on a restricted process.

409
00:18:37,236 --> 00:18:39,626 A:middle
And will set an 0 to EPERM.

410
00:18:40,616 --> 00:18:44,196 A:middle
Which means that if part of your
product relies on being able

411
00:18:44,196 --> 00:18:48,076 A:middle
to attach to a system process
at runtime, for instance,

412
00:18:48,266 --> 00:18:51,226 A:middle
the Finder, and that you expect
to be able to inject code

413
00:18:51,226 --> 00:18:56,246 A:middle
into the Finder, that is
not going to work anymore.

414
00:18:56,276 --> 00:19:00,676 A:middle
Then if you fork an exec,
a binary that will result

415

416
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

417
00:18:56,276 --> 00:19:00,676 A:middle
Then if you fork an exec,
a binary that will result

418
00:19:00,796 --> 00:19:03,236 A:middle
in the child process
being restricted,

419
00:19:03,286 --> 00:19:07,246 A:middle
then the system will
automatically reset the mach

420
00:19:07,246 --> 00:19:08,956 A:middle
special ports on
this child process,

421
00:19:09,666 --> 00:19:11,976 A:middle
which means you won't
be able to keep control

422
00:19:12,366 --> 00:19:13,576 A:middle
over the child process.

423
00:19:14,436 --> 00:19:18,156 A:middle
So if you expect to be able
to fork a privileged tool

424
00:19:18,586 --> 00:19:19,776 A:middle
and then keep control on it,

425
00:19:19,896 --> 00:19:23,156 A:middle
that's not going
to work anymore.

426
00:19:23,256 --> 00:19:27,526 A:middle
The linker is going to ignore
all the dyld environment

427
00:19:27,526 --> 00:19:29,486 A:middle
variables on these
protected binaries.

428
00:19:30,256 --> 00:19:33,396 A:middle
So if you expect to be
able to inject the library

429
00:19:33,566 --> 00:19:35,506 A:middle
into a system binary
when you exec it,

430
00:19:36,116 --> 00:19:38,746 A:middle
the linker will just
ignore the new library.

431
00:19:39,286 --> 00:19:44,386 A:middle
And finally, if you use
dtrace, all dtrace probes

432
00:19:44,556 --> 00:19:49,176 A:middle
that target a restricted process
will not be matched anymore,

433
00:19:49,876 --> 00:19:51,786 A:middle
which means you won't be
able to see an interaction

434
00:19:51,786 --> 00:19:55,076 A:middle
between the process
and the kernel.

435
00:19:55,076 --> 00:19:58,716 A:middle
You won't be able to inspect the
restricted process memory space

436
00:19:58,926 --> 00:20:00,956 A:middle
and you won't be able to
inspect the kernel memory.

437

438
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

439
00:19:58,926 --> 00:20:00,956 A:middle
and you won't be able to
inspect the kernel memory.

440
00:20:01,556 --> 00:20:05,386 A:middle
Of course, this applies
to our own debugger, LLDB.

441
00:20:05,386 --> 00:20:09,586 A:middle
If you try to invoke lldb
even as root and try to attach

442
00:20:09,586 --> 00:20:15,046 A:middle
to the Finder, then
this is going to fail.

443
00:20:15,276 --> 00:20:17,386 A:middle
Now, when it comes to
the kext signing program,

444
00:20:17,756 --> 00:20:21,336 A:middle
I'm sure you know by now, all
extensions have to be signed

445
00:20:21,606 --> 00:20:24,966 A:middle
with a Developer ID for Kexts
certificate that was issued

446
00:20:24,966 --> 00:20:28,856 A:middle
by Apple, and then these
extensions have to be installed

447
00:20:29,236 --> 00:20:31,096 A:middle
into /Library/Extensions.

448
00:20:31,576 --> 00:20:33,826 A:middle
The new thing here is

449
00:20:33,826 --> 00:20:37,626 A:middle
that because we are pulling
the kext signing program

450
00:20:38,346 --> 00:20:42,026 A:middle
under the System Integrity
Protection umbrella,

451
00:20:42,576 --> 00:20:45,116 A:middle
the kext-dev-mode
boot-arg is now obsolete.

452
00:20:46,196 --> 00:20:49,996 A:middle
If you are a kext developer,
you need to be able to test

453
00:20:50,096 --> 00:20:52,416 A:middle
with unsigned kernel
extensions, you will need

454
00:20:52,416 --> 00:20:55,596 A:middle
to disable this protection, and
I'll show you how in a minute.

455
00:20:56,036 --> 00:20:59,696 A:middle
But it also means that,
this comment line here

456
00:20:59,696 --> 00:21:02,846 A:middle
that you probably saw out
there to disable kext signing,

457

458
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

459
00:20:59,696 --> 00:21:02,846 A:middle
that you probably saw out
there to disable kext signing,

460
00:21:03,096 --> 00:21:04,196 A:middle
is not doing anything anymore.

461
00:21:04,196 --> 00:21:10,326 A:middle
So let's talk about the
configuration mechanism.

462
00:21:10,326 --> 00:21:14,506 A:middle
We strongly believe
that this new mechanism,

463
00:21:14,506 --> 00:21:17,126 A:middle
this new protection, is
critical for our users.

464
00:21:17,536 --> 00:21:21,856 A:middle
That being said, we realize that
it gets in the way of people

465
00:21:21,856 --> 00:21:24,416 A:middle
who want to have complete
control over their machine,

466
00:21:25,386 --> 00:21:26,636 A:middle
and because of what
I said before,

467
00:21:26,876 --> 00:21:28,406 A:middle
because it protects
the kernel on disk

468
00:21:28,906 --> 00:21:31,536 A:middle
and requires all kernel
extensions to be signed,

469
00:21:32,196 --> 00:21:34,806 A:middle
then it also gets in the way
of kext developers who want

470
00:21:34,806 --> 00:21:36,766 A:middle
to be able to test
with unsigned kext.

471
00:21:37,716 --> 00:21:40,186 A:middle
So because of that, it
can be entirely disabled.

472
00:21:41,206 --> 00:21:44,776 A:middle
The configuration is stored
in your NVRAM setting,

473
00:21:45,256 --> 00:21:48,136 A:middle
which means that it applies
to the entire machine.

474
00:21:48,476 --> 00:21:50,416 A:middle
So if you have several
installs of Capitan,

475
00:21:50,766 --> 00:21:52,496 A:middle
they will all be
configured the same way

476
00:21:53,466 --> 00:21:55,516 A:middle
and it's persistent
across OS install.

477
00:21:55,646 --> 00:21:59,196 A:middle
So as you move from seed 1 to
seed 2 up to GM and even later,

478
00:21:59,766 --> 00:22:01,306 A:middle
the configuration will persist.

479

480
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

481
00:21:59,766 --> 00:22:01,306 A:middle
the configuration will persist.

482
00:22:01,446 --> 00:22:03,256 A:middle
So we won't reset it
every time we install.

483
00:22:03,256 --> 00:22:08,156 A:middle
Now, because root can
actually set a NVRAM setting

484
00:22:08,266 --> 00:22:10,636 A:middle
and we can't trust root to
do the right thing here,

485
00:22:11,086 --> 00:22:13,326 A:middle
it means we cannot have
the configuration mechanism

486
00:22:13,426 --> 00:22:14,446 A:middle
in the OS itself.

487
00:22:15,076 --> 00:22:17,556 A:middle
So we actually pulled it and
installed it in the Recovery OS.

488
00:22:17,716 --> 00:22:20,656 A:middle
So this NVRAM setting can
only be set in Recovery.

489
00:22:21,766 --> 00:22:23,026 A:middle
If you want to change
the configuration,

490
00:22:23,786 --> 00:22:26,336 A:middle
you need to reboot your machine
in Recovery OS, and you can do

491
00:22:26,336 --> 00:22:29,526 A:middle
so by holding the
Command+R key on boot.

492
00:22:30,546 --> 00:22:32,566 A:middle
Then all you have to do
is launch the Security

493
00:22:32,566 --> 00:22:35,246 A:middle
Configuration application
from the Utilities menu,

494
00:22:36,326 --> 00:22:38,556 A:middle
and check the System
Integrity Protection box,

495
00:22:39,376 --> 00:22:40,706 A:middle
apply and reboot.

496
00:22:41,536 --> 00:22:44,506 A:middle
Keep in mind that these types
that I just describe are likely

497
00:22:44,506 --> 00:22:46,316 A:middle
to change in an upcoming seed.

498
00:22:46,446 --> 00:22:49,416 A:middle
So make sure you read
the release notes

499
00:22:49,536 --> 00:22:51,666 A:middle
to know what the new steps are.

500
00:22:53,676 --> 00:22:57,066 A:middle
So let's summarize what
we discussed so far.

501
00:22:57,276 --> 00:22:59,996 A:middle
System Integrity Protection
is a new policy that applies

502
00:22:59,996 --> 00:23:01,196 A:middle
to every process on the system.

503

504
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

505
00:22:59,996 --> 00:23:01,196 A:middle
to every process on the system.

506
00:23:02,276 --> 00:23:06,516 A:middle
It protects the system as it was
installed by Apple, both on disk

507
00:23:06,616 --> 00:23:10,436 A:middle
and at runtime, by
restricting write access

508
00:23:10,846 --> 00:23:14,986 A:middle
to system locations, and by
preventing runtime attachment

509
00:23:15,946 --> 00:23:18,596 A:middle
and code injection
on system processes.

510
00:23:19,076 --> 00:23:23,216 A:middle
The installer will actively
migrate third-party content

511
00:23:23,336 --> 00:23:25,216 A:middle
outside of system locations,

512
00:23:25,216 --> 00:23:27,046 A:middle
so make sure you actually
migrate your content as soon

513
00:23:27,046 --> 00:23:29,396 A:middle
as possible or that you
fall back gracefully

514
00:23:29,396 --> 00:23:30,726 A:middle
when you can't find it.

515
00:23:31,356 --> 00:23:35,526 A:middle
Then finally, the feature can be
disabled using the configuration

516
00:23:35,526 --> 00:23:38,526 A:middle
mechanism that is
in the Recovery OS.

517
00:23:39,416 --> 00:23:40,216 A:middle
That's it for me.

518
00:23:40,456 --> 00:23:41,236 A:middle
Thank you very much, guys.

519
00:23:41,646 --> 00:23:42,556 A:middle
I will leave the
stage to Andrew.

520
00:23:43,516 --> 00:23:48,506 A:middle
[Applause]

521
00:23:49,006 --> 00:23:49,526 A:middle
>> ANDREW WHALLEY:
Thank you, Pierre.

522
00:23:51,666 --> 00:23:54,716 A:middle
I'm Andrew Whalley, and I
manage the data security group

523
00:23:54,846 --> 00:23:56,966 A:middle
within Core OS Security
Engineering.

524
00:23:57,516 --> 00:24:01,466 A:middle
You heard about app
transport security,

525

526
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

527
00:23:57,516 --> 00:24:01,466 A:middle
You heard about app
transport security,

528
00:24:02,136 --> 00:24:04,626 A:middle
and how it helps
protect data in motion,

529
00:24:05,026 --> 00:24:07,006 A:middle
through the network
connections your app makes.

530
00:24:07,626 --> 00:24:09,746 A:middle
I'm going to look
at the various ways

531
00:24:09,746 --> 00:24:12,326 A:middle
that you can protect
data at rest.

532
00:24:12,876 --> 00:24:16,206 A:middle
I will touch on the Keychain
and storing user secrets,

533
00:24:17,496 --> 00:24:21,796 A:middle
look at Touch ID and how you
can use it to balance security

534
00:24:21,846 --> 00:24:24,186 A:middle
and convenience in your app.

535
00:24:25,236 --> 00:24:29,306 A:middle
Along the way, I will be looking
at existing technologies as well

536
00:24:29,306 --> 00:24:32,936 A:middle
as what's new in iOS 9 and
how they can fit together

537
00:24:33,406 --> 00:24:37,256 A:middle
to deliver a level of security
appropriate for your apps.

538
00:24:39,696 --> 00:24:42,656 A:middle
So let's start with a quick
overview of the Keychain.

539
00:24:43,226 --> 00:24:46,586 A:middle
You can think of it as a
very specialized database.

540
00:24:47,456 --> 00:24:51,416 A:middle
You store data by adding rows,
which we call Keychain items,

541
00:24:51,896 --> 00:24:54,696 A:middle
and then query for them
with the attributes.

542
00:24:55,196 --> 00:25:01,316 A:middle
It's optimized for small secrets
and by secret I mean a password,

543

544
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

545
00:24:55,196 --> 00:25:01,316 A:middle
It's optimized for small secrets
and by secret I mean a password,

546
00:25:01,316 --> 00:25:04,766 A:middle
a token or cookie,
or cryptographic key.

547
00:25:06,126 --> 00:25:10,516 A:middle
If you have tens of thousands,
thousands of megabytes to store,

548
00:25:10,856 --> 00:25:15,556 A:middle
consider using file-based data
protection or a bulk encryption

549
00:25:16,036 --> 00:25:18,326 A:middle
through an API like
Common Crypto

550
00:25:18,406 --> 00:25:20,176 A:middle
and then just store the
key in the Keychain.

551
00:25:24,956 --> 00:25:27,976 A:middle
These SecItem APIs have
been around a long time,

552
00:25:28,256 --> 00:25:30,646 A:middle
but they're still the best
place to store secrets,

553
00:25:30,946 --> 00:25:33,066 A:middle
including in your
new Swift apps.

554
00:25:34,176 --> 00:25:37,906 A:middle
So here we have a secret
and we want to store it

555
00:25:37,906 --> 00:25:40,206 A:middle
in the Keychain using
SecItemAdd.

556
00:25:41,146 --> 00:25:44,356 A:middle
To do that, we construct
a dictionary

557
00:25:44,716 --> 00:25:46,486 A:middle
which includes both the secret

558
00:25:46,956 --> 00:25:51,726 A:middle
and some attributes describing
how to find it in the future

559
00:25:52,296 --> 00:25:54,166 A:middle
and what protection
it should have.

560
00:25:55,576 --> 00:25:59,606 A:middle
This pattern of creating a
dictionary to describe or query

561
00:25:59,606 --> 00:26:05,106 A:middle
for an item, is also used by
the calls to query, delete,

562

563
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

564
00:25:59,606 --> 00:26:05,106 A:middle
for an item, is also used by
the calls to query, delete,

565
00:26:05,106 --> 00:26:08,536 A:middle
and update an item, as well
as some of the other APIs,

566
00:26:08,536 --> 00:26:10,046 A:middle
I should be talking about later.

567
00:26:11,396 --> 00:26:13,466 A:middle
There's a lot more
about Keychain APIs

568
00:26:13,506 --> 00:26:17,076 A:middle
in Session 709 from 2013's WWDC.

569
00:26:17,076 --> 00:26:21,866 A:middle
So here's some things
to consider

570
00:26:22,416 --> 00:26:25,156 A:middle
when you are writing code
to access the Keychain.

571
00:26:26,696 --> 00:26:30,866 A:middle
The first is dealing with user
secrets is a really security

572
00:26:30,866 --> 00:26:32,326 A:middle
sensitive part of your code.

573
00:26:33,106 --> 00:26:37,456 A:middle
So you should factor it into
small, simple, testable units.

574
00:26:37,926 --> 00:26:44,256 A:middle
Often this is done
with a wrapper class.

575
00:26:44,426 --> 00:26:46,586 A:middle
Whether you are using it
directly or through a wrapper,

576
00:26:47,116 --> 00:26:49,716 A:middle
make sure it has the
highest level of protection

577
00:26:50,396 --> 00:26:52,296 A:middle
that your application can use.

578
00:26:53,666 --> 00:26:56,996 A:middle
We describe and talk about
data protection classes,

579
00:26:57,526 --> 00:27:02,926 A:middle
which are the times at which
cryptographic access is provided

580

581
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

582
00:26:57,526 --> 00:27:02,926 A:middle
which are the times at which
cryptographic access is provided

583
00:27:02,926 --> 00:27:03,796 A:middle
to those items.

584
00:27:03,926 --> 00:27:06,366 A:middle
For example, when the
device is unlocked.

585
00:27:06,956 --> 00:27:11,646 A:middle
In iOS 8, we added the
AfterFirstUnlock --

586
00:27:11,646 --> 00:27:15,046 A:middle
I beg your pardon.

587
00:27:15,046 --> 00:27:18,326 A:middle
That's been around for a while,
but you can use it if you have

588
00:27:18,576 --> 00:27:21,776 A:middle
to access items in the
background, for example,

589
00:27:21,776 --> 00:27:26,926 A:middle
if you are a VoIP app.

590
00:27:27,156 --> 00:27:30,636 A:middle
Always accessible is going
to be deprecated in iOS 9.

591
00:27:31,056 --> 00:27:33,126 A:middle
So you need to start
moving items out of

592
00:27:33,246 --> 00:27:34,686 A:middle
that into a higher level.

593
00:27:40,216 --> 00:27:44,496 A:middle
We have WatchKit 2, your
Watch apps now have access

594
00:27:44,556 --> 00:27:49,006 A:middle
to the SecItem APIs, though
entering a full user name

595
00:27:49,006 --> 00:27:52,486 A:middle
and password on the Watch is
probably not the user experience

596
00:27:52,486 --> 00:27:52,876 A:middle
you want.

597
00:27:54,416 --> 00:27:58,496 A:middle
If your Watch app is displaying
data from a paired iOS device,

598
00:27:59,076 --> 00:28:01,406 A:middle
consider just sending
that content across

599

600
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

601
00:27:59,076 --> 00:28:01,406 A:middle
consider just sending
that content across

602
00:28:01,736 --> 00:28:03,756 A:middle
and not a persistent credential.

603
00:28:04,416 --> 00:28:07,956 A:middle
If your Watch app does
need direct access

604
00:28:08,806 --> 00:28:11,566 A:middle
to a credential then
consider rather

605
00:28:11,566 --> 00:28:14,456 A:middle
than storing a full
user name and password,

606
00:28:15,166 --> 00:28:18,076 A:middle
have your server send
you a token or a cookie

607
00:28:18,376 --> 00:28:22,506 A:middle
that only has the permissions
to access the content

608
00:28:22,686 --> 00:28:26,136 A:middle
that the focused functionality
of your Watch app requires.

609
00:28:26,676 --> 00:28:33,546 A:middle
It's not just on the
Watch that user name

610
00:28:33,546 --> 00:28:35,726 A:middle
and password prompts
can be inconvenient,

611
00:28:36,406 --> 00:28:39,566 A:middle
and over the last few releases
we have introduced a couple

612
00:28:39,566 --> 00:28:42,836 A:middle
of technologies to help you
prompt for passwords less often.

613
00:28:44,516 --> 00:28:47,076 A:middle
The first is shared
web credentials.

614
00:28:48,576 --> 00:28:51,796 A:middle
We all know and love
Safari saved passwords

615
00:28:52,276 --> 00:28:55,506 A:middle
and how it will suggest
and store them for us.

616
00:28:56,096 --> 00:29:00,436 A:middle
With iCloud Keychain, passwords
will be synced and autofilled

617

618
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

619
00:28:56,096 --> 00:29:00,436 A:middle
With iCloud Keychain, passwords
will be synced and autofilled

620
00:29:00,436 --> 00:29:01,486 A:middle
on all of your devices.

621
00:29:02,006 --> 00:29:05,226 A:middle
However, it's common
for a service

622
00:29:05,226 --> 00:29:08,166 A:middle
to have both a website
and an iOS app.

623
00:29:08,766 --> 00:29:12,606 A:middle
So it would be great to have
those applications participate

624
00:29:12,766 --> 00:29:14,366 A:middle
in Safari saved passwords

625
00:29:15,106 --> 00:29:19,506 A:middle
and with shared web
credentials you can.

626
00:29:19,686 --> 00:29:22,276 A:middle
Here's some code you might
want to include in the sign-up

627
00:29:22,346 --> 00:29:24,706 A:middle
or the registration flow
of your application.

628
00:29:27,316 --> 00:29:29,896 A:middle
SecCreateShared
WebCredentialPassword will

629
00:29:29,896 --> 00:29:33,476 A:middle
return a random string in the
same format that Safari uses

630
00:29:33,476 --> 00:29:34,946 A:middle
for it's suggested passwords.

631
00:29:36,296 --> 00:29:38,606 A:middle
Can you can call
SecAddSharedWebCredential

632
00:29:38,606 --> 00:29:42,396 A:middle
to let Safari know that there's
a new user name and password

633
00:29:42,646 --> 00:29:44,636 A:middle
to autofill for a
specific domain.

634
00:29:47,396 --> 00:29:51,086 A:middle
In iOS 9, we've made it easy to
give this functionality a try

635
00:29:51,486 --> 00:29:53,476 A:middle
by relaxing some of
the security checks

636
00:29:53,476 --> 00:29:54,766 A:middle
when you're running
in the Simulator.

637
00:29:54,766 --> 00:29:59,086 A:middle
So let's have a look at that.

638
00:29:59,196 --> 00:30:02,816 A:middle
Here I'm going through the
registration flow of my app

639

640
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

641
00:29:59,196 --> 00:30:02,816 A:middle
Here I'm going through the
registration flow of my app

642
00:30:03,226 --> 00:30:06,306 A:middle
to which I just added the code
I showed you a few moments ago.

643
00:30:06,306 --> 00:30:12,026 A:middle
After that, just pop in
to the settings for Safari

644
00:30:12,026 --> 00:30:15,746 A:middle
and make sure that name and
password autofill is enabled.

645
00:30:16,386 --> 00:30:19,426 A:middle
Go to Safari and
see the results.

646
00:30:19,426 --> 00:30:25,336 A:middle
Here we are back in the
app, being presented

647
00:30:25,826 --> 00:30:29,146 A:middle
with a user name
and password prompt.

648
00:30:29,236 --> 00:30:32,826 A:middle
Shared web credentials
allows the application

649
00:30:32,826 --> 00:30:36,716 A:middle
to display a picker, which lists
all the accounts Safari has

650
00:30:36,716 --> 00:30:37,696 A:middle
saved for that domain.

651
00:30:38,246 --> 00:30:43,036 A:middle
When the user has
picked one, the user name

652
00:30:43,036 --> 00:30:46,456 A:middle
and password is returned to your
app in the completion handler

653
00:30:46,456 --> 00:30:51,616 A:middle
for SharedWebCredential and
you can then log the user

654
00:30:51,726 --> 00:30:52,246 A:middle
straight in.

655
00:30:52,246 --> 00:30:58,116 A:middle
If you want to use this
on device and not just

656
00:30:58,116 --> 00:31:01,216 A:middle
in the simulator, you're going
to have to add an entitlement

657

658
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

659
00:30:58,116 --> 00:31:01,216 A:middle
in the simulator, you're going
to have to add an entitlement

660
00:31:01,216 --> 00:31:04,026 A:middle
to your application,
and you can do this

661
00:31:04,026 --> 00:31:06,116 A:middle
in the Associated
Domains section

662
00:31:06,236 --> 00:31:08,186 A:middle
of the Capabilities
tab in Xcode.

663
00:31:08,736 --> 00:31:13,776 A:middle
You are also going to
need to put a JSON file

664
00:31:13,886 --> 00:31:16,376 A:middle
up on your server, but you
might have this already.

665
00:31:16,726 --> 00:31:19,256 A:middle
As it's the same one
used for Handoff,

666
00:31:19,816 --> 00:31:24,926 A:middle
as well as in iOS 9 app links.

667
00:31:29,796 --> 00:31:31,646 A:middle
One change we have made in iOS 9

668
00:31:31,646 --> 00:31:35,116 A:middle
to make adoption even easier is
you no longer need separately

669
00:31:35,116 --> 00:31:35,996 A:middle
sign that file.

670
00:31:36,546 --> 00:31:39,406 A:middle
It's going to be protected
with a secure TLS connection.

671
00:31:45,216 --> 00:31:49,256 A:middle
I mentioned that Safari saved
passwords uses iCloud Keychain,

672
00:31:49,646 --> 00:31:52,046 A:middle
but you can also use it
directly in your own apps.

673
00:31:53,156 --> 00:31:59,066 A:middle
Imagine you have an iOS, iPad,
iPhone, and OS X App Store app

674
00:31:59,376 --> 00:32:01,986 A:middle
and you want to make
logging into one the same

675

676
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

677
00:31:59,376 --> 00:32:01,986 A:middle
and you want to make
logging into one the same

678
00:32:01,986 --> 00:32:03,426 A:middle
as logging into them all.

679
00:32:03,866 --> 00:32:08,016 A:middle
So for all of your apps
passwords that can be used

680
00:32:08,016 --> 00:32:12,056 A:middle
on multiple devices, consider
just adding the synchronizable

681
00:32:12,056 --> 00:32:13,886 A:middle
attribute to all SecItem calls.

682
00:32:13,886 --> 00:32:17,256 A:middle
There are a few things that
you've got to think about,

683
00:32:17,256 --> 00:32:19,976 A:middle
for example, deleting an item
will delete it everywhere,

684
00:32:20,116 --> 00:32:22,696 A:middle
so make sure you only do that
under the right circumstances.

685
00:32:23,166 --> 00:32:27,036 A:middle
There are a few more
caveats, and you can see the,

686
00:32:27,036 --> 00:32:32,056 A:middle
in SecItem.h. If you are
interested in finding out more

687
00:32:32,056 --> 00:32:34,256 A:middle
about the security
of iCloud Keychain

688
00:32:34,746 --> 00:32:37,906 A:middle
and how synced passwords are
never accessible to anyone

689
00:32:37,906 --> 00:32:41,116 A:middle
but the user, see the
iOS Security White Paper.

690
00:32:41,536 --> 00:32:43,096 A:middle
There's a link at the
end of the session.

691
00:32:43,666 --> 00:32:51,306 A:middle
So to recap, on the Keychain,
store all your secrets there.

692
00:32:51,476 --> 00:32:53,376 A:middle
There really is no
place for passwords

693
00:32:53,376 --> 00:32:55,316 A:middle
in plain text files or plists.

694
00:32:56,506 --> 00:32:58,976 A:middle
Protect them at the
highest level possible

695
00:32:59,456 --> 00:33:03,026 A:middle
and if appropriate use
SharedWedCredentials

696

697
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

698
00:32:59,456 --> 00:33:03,026 A:middle
and if appropriate use
SharedWedCredentials

699
00:33:03,026 --> 00:33:06,276 A:middle
like our Keychain to sync them
around your user's devices

700
00:33:06,336 --> 00:33:08,906 A:middle
and present fewer
password prompts.

701
00:33:12,636 --> 00:33:15,586 A:middle
So iCloud Keychain is great
for the secrets that can go

702
00:33:15,586 --> 00:33:18,486 A:middle
on multiple devices but
sometimes you want them

703
00:33:18,486 --> 00:33:21,546 A:middle
to stay firmly and
securely on just one device.

704
00:33:22,176 --> 00:33:25,636 A:middle
An example might be a
secure messaging app,

705
00:33:26,006 --> 00:33:29,956 A:middle
where encryption is device to
device rather than user to user.

706
00:33:30,516 --> 00:33:35,536 A:middle
The various protection classes
I already mentions have a

707
00:33:35,536 --> 00:33:37,236 A:middle
ThisDeviceOnly variant.

708
00:33:38,126 --> 00:33:40,906 A:middle
Items will be backed up,
but only ever restored

709
00:33:40,906 --> 00:33:44,366 A:middle
to the device they came from.

710
00:33:44,366 --> 00:33:47,796 A:middle
Last year, we added the
WhenPassCodeSet class,

711
00:33:48,286 --> 00:33:50,476 A:middle
that ensures items
are always protected

712
00:33:50,576 --> 00:33:52,546 A:middle
by a local device passcode.

713
00:33:53,096 --> 00:33:56,166 A:middle
And you can use AccessControl
lists

714
00:33:56,166 --> 00:33:59,356 A:middle
for even finer grained
control over items.

715
00:33:59,356 --> 00:34:04,696 A:middle
So since we are talking

716

717
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

718
00:33:59,356 --> 00:34:04,696 A:middle
So since we are talking

719
00:34:04,816 --> 00:34:07,446 A:middle
about protecting
device-specific credentials,

720
00:34:07,866 --> 00:34:10,906 A:middle
let's look at the security
domains on an iOS device.

721
00:34:12,315 --> 00:34:14,806 A:middle
User space, where
your application runs,

722
00:34:15,666 --> 00:34:19,106 A:middle
and the kernel, which as Pierre
mentioned provides process

723
00:34:19,106 --> 00:34:21,216 A:middle
separation and other
security functionality.

724
00:34:22,545 --> 00:34:25,835 A:middle
But it also provides many,
many other OS facilities,

725
00:34:26,045 --> 00:34:28,335 A:middle
which means it has quite
a large attack service.

726
00:34:29,036 --> 00:34:32,315 A:middle
So with iPhone 5s, we
added Secure Enclave.

727
00:34:34,795 --> 00:34:40,676 A:middle
Secure Enclave is a separate on
core that has been architected

728
00:34:40,815 --> 00:34:43,525 A:middle
from the ground up
with security in mind.

729
00:34:44,176 --> 00:34:48,266 A:middle
That's where we put Touch
ID to ensure the privacy

730
00:34:48,266 --> 00:34:50,866 A:middle
and the security of your
fingerprint biometrics.

731
00:34:52,636 --> 00:34:55,696 A:middle
We also moved the KeyStore
component from the kernel

732
00:34:55,696 --> 00:34:58,516 A:middle
into Secure Enclave
and it's that component

733
00:34:58,876 --> 00:35:02,056 A:middle
which controls the cryptography
around Keychain items

734

735
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

736
00:34:58,876 --> 00:35:02,056 A:middle
which controls the cryptography
around Keychain items

737
00:35:02,166 --> 00:35:03,076 A:middle
and the data protection.

738
00:35:07,016 --> 00:35:11,026 A:middle
So let's focus for a
moment on Touch ID.

739
00:35:11,306 --> 00:35:13,546 A:middle
While we think of it as
a security technology,

740
00:35:13,946 --> 00:35:16,356 A:middle
where it really excels
is convenience.

741
00:35:17,156 --> 00:35:18,936 A:middle
You can unlock your
device without having

742
00:35:18,936 --> 00:35:20,316 A:middle
to enter your passcode
all the time,

743
00:35:20,846 --> 00:35:24,456 A:middle
but that itself can give
us some security benefits.

744
00:35:25,116 --> 00:35:29,036 A:middle
For example it's now much easier
to have a long, complex passcode

745
00:35:29,896 --> 00:35:32,126 A:middle
which improves the
security of data protection.

746
00:35:33,466 --> 00:35:37,976 A:middle
Or your phone can now lock
immediately so it's vulnerable

747
00:35:37,976 --> 00:35:44,756 A:middle
and unlocked for as
small a time as possible.

748
00:35:44,756 --> 00:35:48,646 A:middle
In iOS 8, we provided some
APIs so you can use Touch ID

749
00:35:48,646 --> 00:35:50,026 A:middle
in your own applications

750
00:35:50,076 --> 00:35:52,486 A:middle
as you balance security
and convenience.

751
00:35:53,176 --> 00:35:55,556 A:middle
But why two and how
do they differ?

752
00:35:56,886 --> 00:35:59,566 A:middle
Well to understand you're going
to have to know how Touch ID

753
00:35:59,566 --> 00:36:01,496 A:middle
and biometrics security works.

754

755
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

756
00:35:59,566 --> 00:36:01,496 A:middle
and biometrics security works.

757
00:36:01,846 --> 00:36:03,616 A:middle
But luckily, it's very simple.

758
00:36:03,616 --> 00:36:05,366 A:middle
It boils down to
an if statement.

759
00:36:06,306 --> 00:36:10,006 A:middle
If a presented finger matches
one that's been enrolled,

760
00:36:10,546 --> 00:36:11,786 A:middle
then do something.

761
00:36:12,176 --> 00:36:16,386 A:middle
It's what that something
is, and where it happens

762
00:36:16,946 --> 00:36:17,826 A:middle
that makes the difference.

763
00:36:18,306 --> 00:36:22,806 A:middle
Let's start with
Local Authentication.

764
00:36:24,496 --> 00:36:28,496 A:middle
A finger is placed on the
Touch ID sensor and is matched

765
00:36:28,496 --> 00:36:29,556 A:middle
within the Secure Enclave.

766
00:36:31,776 --> 00:36:33,246 A:middle
With Local Authentication,

767
00:36:33,296 --> 00:36:36,156 A:middle
knowledge of the match
just a Boolean success

768
00:36:36,156 --> 00:36:38,906 A:middle
or failure, is sent to your app.

769
00:36:39,776 --> 00:36:43,226 A:middle
And it's there that
your app does something

770
00:36:43,356 --> 00:36:46,576 A:middle
with that knowledge.

771
00:36:46,736 --> 00:36:51,746 A:middle
So while the process started
in Secure Enclave, ultimately,

772
00:36:51,746 --> 00:36:54,976 A:middle
it's the application
in user space

773
00:36:55,436 --> 00:36:59,006 A:middle
where a security
decision is being made.

774

775
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

776
00:37:00,976 --> 00:37:02,906 A:middle
So when might you
want to use Touch ID

777
00:37:02,906 --> 00:37:04,146 A:middle
with Local Authentication?

778
00:37:05,476 --> 00:37:09,076 A:middle
Think about your app and if
you have any security barriers,

779
00:37:09,546 --> 00:37:12,796 A:middle
such as requiring a passcode
to confirm an operation,

780
00:37:13,346 --> 00:37:15,326 A:middle
even though the user
is already logged in.

781
00:37:15,326 --> 00:37:19,236 A:middle
Touch ID at that
would be much easier.

782
00:37:19,316 --> 00:37:24,696 A:middle
Or maybe you always wanted
to have an extra step

783
00:37:24,696 --> 00:37:27,626 A:middle
in an authentication
process but without Touch ID,

784
00:37:27,626 --> 00:37:30,486 A:middle
it would have been really
just too much of a barrier.

785
00:37:31,156 --> 00:37:37,066 A:middle
So, for example, you could
prompt before viewing,

786
00:37:37,066 --> 00:37:38,446 A:middle
especially sensitive data.

787
00:37:39,036 --> 00:37:49,616 A:middle
Or before an operation like
permanently deleting an account.

788
00:37:49,786 --> 00:37:52,356 A:middle
One pattern is to have
a Touch ID prompt early

789
00:37:52,486 --> 00:37:53,666 A:middle
in your application's flow.

790
00:37:55,026 --> 00:37:58,246 A:middle
But this can lead to a situation
where the user has just unlocked

791
00:37:58,246 --> 00:38:01,666 A:middle
with Touch ID, and then moments
later has been prompted again

792

793
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

794
00:37:58,246 --> 00:38:01,666 A:middle
with Touch ID, and then moments
later has been prompted again

795
00:38:01,666 --> 00:38:02,536 A:middle
by your application.

796
00:38:04,476 --> 00:38:09,216 A:middle
In iOS 9, we have added
the TouchIDAuthentication

797
00:38:09,216 --> 00:38:11,946 A:middle
AllowableReuseDuration,
which is a property

798
00:38:11,946 --> 00:38:13,696 A:middle
on the Local Authentication
context.

799
00:38:14,816 --> 00:38:17,696 A:middle
You can use this to
specify a window during

800
00:38:17,696 --> 00:38:19,596 A:middle
which you won't need
to prompt again

801
00:38:20,086 --> 00:38:22,356 A:middle
if the user has recently
unlocked their device

802
00:38:22,526 --> 00:38:23,846 A:middle
with Touch ID.

803
00:38:24,776 --> 00:38:28,546 A:middle
So that's one way to make
your policy a little more lax.

804
00:38:29,376 --> 00:38:32,366 A:middle
But maybe you want to make your
policy a little more strict

805
00:38:32,526 --> 00:38:33,576 A:middle
in some situations.

806
00:38:33,576 --> 00:38:39,756 A:middle
For example, by reacting to a
new fingerprint being enrolled.

807
00:38:40,416 --> 00:38:44,146 A:middle
Also new, we have the
evaluatedPolicyDomainState

808
00:38:44,146 --> 00:38:44,616 A:middle
property.

809
00:38:45,216 --> 00:38:47,836 A:middle
It's a totally opaque value

810
00:38:48,266 --> 00:38:51,066 A:middle
that represents the current
set of enrolled fingers.

811
00:38:51,156 --> 00:38:55,626 A:middle
All you can really do with
it is compare it over time.

812
00:38:56,406 --> 00:39:00,566 A:middle
If it changed, then a finger
has been added or removed

813

814
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

815
00:38:56,406 --> 00:39:00,566 A:middle
If it changed, then a finger
has been added or removed

816
00:39:00,566 --> 00:39:02,406 A:middle
to the enrolled set in settings.

817
00:39:02,956 --> 00:39:07,056 A:middle
If you detect that,
and it's appropriate

818
00:39:07,056 --> 00:39:11,266 A:middle
for your application, maybe
you can prompt again to see

819
00:39:11,266 --> 00:39:14,056 A:middle
if users still wants to use
Touch ID on your application,

820
00:39:14,566 --> 00:39:17,226 A:middle
or require a password
to reenable it.

821
00:39:19,336 --> 00:39:22,876 A:middle
So let's recap what's new for
Local Authentication in iOS 9.

822
00:39:23,466 --> 00:39:27,146 A:middle
I have already mentioned
AllowableReuseDuration,

823
00:39:27,326 --> 00:39:28,666 A:middle
and PolicyDomainState.

824
00:39:29,266 --> 00:39:34,396 A:middle
You can also invalidate a
Local Authentication context

825
00:39:34,896 --> 00:39:38,836 A:middle
and if a Touch ID prompt is
currently being presented

826
00:39:38,836 --> 00:39:42,746 A:middle
to the user, it will behave as
if the user had hit canceled

827
00:39:43,176 --> 00:39:46,116 A:middle
and tear down the dialogue.

828
00:39:46,236 --> 00:39:50,316 A:middle
evaluateAccessControl allows
Local Authentication to be used

829
00:39:50,366 --> 00:39:53,396 A:middle
with Keychain Access
Control Lists, I will touch

830
00:39:53,396 --> 00:39:56,126 A:middle
on that later and there's
also a lot more examples

831
00:39:56,226 --> 00:40:00,256 A:middle
in some example code
we are releasing today.

832

833
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

834
00:39:56,226 --> 00:40:00,256 A:middle
in some example code
we are releasing today.

835
00:40:01,736 --> 00:40:04,306 A:middle
So talking of Keychain
Access Control Lists,

836
00:40:04,306 --> 00:40:06,486 A:middle
that's the second way
you can use Touch ID

837
00:40:06,486 --> 00:40:07,606 A:middle
within your application,

838
00:40:08,216 --> 00:40:10,966 A:middle
by using it to protect
specific Keychain items.

839
00:40:12,306 --> 00:40:13,956 A:middle
Here's our architecture
diagram again.

840
00:40:15,136 --> 00:40:18,916 A:middle
As before, the Touch ID match
occurs in Secure Enclave

841
00:40:19,646 --> 00:40:22,626 A:middle
but this time, knowledge
of the match is sent

842
00:40:23,156 --> 00:40:27,286 A:middle
within Secure Enclave
to the KeyStore.

843
00:40:27,366 --> 00:40:32,486 A:middle
Only then will your Keychain
item be released back

844
00:40:32,926 --> 00:40:33,676 A:middle
to your application.

845
00:40:34,286 --> 00:40:39,886 A:middle
So this is useful in you
want to add protection

846
00:40:39,886 --> 00:40:41,796 A:middle
to a particular saved
credential.

847
00:40:42,356 --> 00:40:46,286 A:middle
And to take advantage
of additional security

848
00:40:46,696 --> 00:40:48,616 A:middle
around Secure Enclave.

849
00:40:48,616 --> 00:40:54,106 A:middle
Maybe at the moment you've
looked at the security tradeoffs

850
00:40:54,106 --> 00:40:55,526 A:middle
of your particular application

851
00:40:55,776 --> 00:40:58,216 A:middle
and there are some things you
really don't want to save,

852
00:40:58,216 --> 00:41:00,406 A:middle
you're prompting every
time or very frequently.

853

854
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

855
00:40:58,216 --> 00:41:00,406 A:middle
you're prompting every
time or very frequently.

856
00:41:01,866 --> 00:41:04,236 A:middle
Maybe using Access Control
Lists you can save it,

857
00:41:04,386 --> 00:41:05,386 A:middle
protect it with Touch ID

858
00:41:05,386 --> 00:41:07,906 A:middle
and provide a more
convenient experience.

859
00:41:09,666 --> 00:41:12,396 A:middle
Or you could use it to
increase the security

860
00:41:12,686 --> 00:41:14,646 A:middle
of something you're
already saving.

861
00:41:17,676 --> 00:41:19,586 A:middle
You create access control lists

862
00:41:19,586 --> 00:41:21,686 A:middle
by specifying two
security properties.

863
00:41:21,686 --> 00:41:25,876 A:middle
The first is effectively
the data protection class.

864
00:41:26,656 --> 00:41:30,296 A:middle
That's when the data is
cryptographically accessible

865
00:41:31,086 --> 00:41:33,096 A:middle
to the Secure Enclave.

866
00:41:33,096 --> 00:41:34,926 A:middle
Next, you specify a policy.

867
00:41:35,556 --> 00:41:38,306 A:middle
The policy describes a condition

868
00:41:38,306 --> 00:41:41,996 A:middle
that must be met before Secure
Enclave will release the item

869
00:41:42,126 --> 00:41:44,906 A:middle
even if it has cryptographic
access to it.

870
00:41:47,236 --> 00:41:50,826 A:middle
So let's have a look
at the policy types.

871
00:41:51,676 --> 00:41:53,466 A:middle
The first is .UserPresence.

872
00:41:54,036 --> 00:41:56,826 A:middle
This will prompt for a
Touch ID match and fall back

873
00:41:56,826 --> 00:41:57,936 A:middle
to the device passcode.

874
00:41:58,036 --> 00:42:00,276 A:middle
And you can go straight

875

876
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

877
00:41:58,036 --> 00:42:00,276 A:middle
And you can go straight

878
00:42:00,276 --> 00:42:02,376 A:middle
to .DevicePasscode
as well if you want.

879
00:42:02,976 --> 00:42:07,006 A:middle
New in iOS 9, it's .TouchIDAny.

880
00:42:08,406 --> 00:42:12,156 A:middle
This will require a Touch ID
match and there is no fallback.

881
00:42:13,786 --> 00:42:17,986 A:middle
Also new, and stricter
still, is .TouchIDCurrentSet.

882
00:42:19,186 --> 00:42:22,446 A:middle
With this, items will only
be released if the set

883
00:42:22,446 --> 00:42:24,606 A:middle
of enrolled fingers
has not changed

884
00:42:24,916 --> 00:42:26,346 A:middle
since the item was stored.

885
00:42:26,816 --> 00:42:31,496 A:middle
I'm going to focus on
this because it might be

886
00:42:31,496 --> 00:42:33,356 A:middle
that your application
could benefit

887
00:42:33,356 --> 00:42:36,416 A:middle
from this providing a form of
multifactor authentication.

888
00:42:36,416 --> 00:42:40,726 A:middle
When you think about multiple
factors, you often talk

889
00:42:40,726 --> 00:42:46,086 A:middle
about something you know, like a
password, and something you have

890
00:42:46,086 --> 00:42:49,776 A:middle
and carry with you, like a
physical token, a smart card,

891
00:42:50,806 --> 00:42:54,686 A:middle
or maybe an iOS device with
Secure Enclave and Touch ID.

892
00:42:56,576 --> 00:42:59,066 A:middle
If you store an item, protected

893
00:42:59,176 --> 00:43:02,986 A:middle
with the TouchIDCurrentSet
policy, there's no way to get

894

895
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

896
00:42:59,176 --> 00:43:02,986 A:middle
with the TouchIDCurrentSet
policy, there's no way to get

897
00:43:02,986 --> 00:43:06,266 A:middle
at the item without a
successful Touch ID match.

898
00:43:07,506 --> 00:43:08,576 A:middle
There's no fallback.

899
00:43:09,316 --> 00:43:13,956 A:middle
And if maybe an adversary
has the device passcode,

900
00:43:14,616 --> 00:43:17,246 A:middle
they can't go into
settings, enroll a finger,

901
00:43:17,246 --> 00:43:24,496 A:middle
and then have access
to that item.

902
00:43:24,716 --> 00:43:27,266 A:middle
The last two policies,
.ApplicationPassword

903
00:43:27,266 --> 00:43:29,716 A:middle
and .PrivateKeyUsage allow you

904
00:43:29,716 --> 00:43:31,706 A:middle
to implement some
advanced functionality

905
00:43:31,706 --> 00:43:33,606 A:middle
that goes beyond Touch ID.

906
00:43:34,536 --> 00:43:36,506 A:middle
The first is
ApplicationPassword.

907
00:43:36,996 --> 00:43:40,226 A:middle
To help illustrate,
let's look at how an item

908
00:43:40,226 --> 00:43:43,166 A:middle
in the WhenUnlocked class is
cryptographically protected.

909
00:43:43,716 --> 00:43:47,716 A:middle
In the same way that even
the best door lock is useless

910
00:43:47,716 --> 00:43:49,186 A:middle
if you've left your
key in the door,

911
00:43:49,596 --> 00:43:52,026 A:middle
encrypted data isn't
actually protected

912
00:43:52,466 --> 00:43:54,296 A:middle
if stored alongside the key.

913
00:43:55,716 --> 00:43:59,636 A:middle
The security of data protection
and the Keychain comes

914
00:43:59,636 --> 00:44:03,066 A:middle
down to the device passcode
and that's stored in one

915

916
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

917
00:43:59,636 --> 00:44:03,066 A:middle
down to the device passcode
and that's stored in one

918
00:44:03,066 --> 00:44:06,176 A:middle
of the most complex systems
we know, the user's brain.

919
00:44:08,176 --> 00:44:10,576 A:middle
They remember it, enter
it into the device,

920
00:44:10,686 --> 00:44:14,306 A:middle
and we take that passcode and
derive a cryptographic key

921
00:44:14,526 --> 00:44:19,786 A:middle
and it's that, which
decrypts the item.

922
00:44:20,006 --> 00:44:22,436 A:middle
Now, let's look at
an item protected

923
00:44:22,436 --> 00:44:23,726 A:middle
with ApplicationPassword.

924
00:44:28,156 --> 00:44:32,086 A:middle
Just the device passcode
is no longer sufficient.

925
00:44:33,636 --> 00:44:36,516 A:middle
Your application has also got
to provide its own password.

926
00:44:37,566 --> 00:44:41,496 A:middle
Again, we derive a cryptographic
key from it, and it's only

927
00:44:41,496 --> 00:44:45,366 A:middle
when the device passcode and the
app password are both present

928
00:44:45,966 --> 00:44:48,806 A:middle
that access is granted
to the Keychain item.

929
00:44:49,356 --> 00:44:55,266 A:middle
As I mentioned, if you store the
password on device or it's baked

930
00:44:55,266 --> 00:44:57,866 A:middle
into your app, this
really doesn't offer any

931
00:44:57,866 --> 00:44:58,736 A:middle
additional protection.

932
00:44:58,736 --> 00:45:00,796 A:middle
So you have to think
about where off

933

934
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

935
00:44:58,736 --> 00:45:00,796 A:middle
So you have to think
about where off

936
00:45:00,796 --> 00:45:02,916 A:middle
that device you can
store that password.

937
00:45:04,406 --> 00:45:07,506 A:middle
Maybe it's up on a server, which
can implement its own policy

938
00:45:07,506 --> 00:45:09,766 A:middle
about when it's released
back to your app.

939
00:45:10,816 --> 00:45:13,866 A:middle
Or perhaps you have a
physical accessory and you want

940
00:45:13,866 --> 00:45:16,766 A:middle
to prove the user has it.

941
00:45:16,766 --> 00:45:19,506 A:middle
If the accessory can't
give your app a password,

942
00:45:20,376 --> 00:45:22,666 A:middle
then it can't decrypt
a Keychain item

943
00:45:23,136 --> 00:45:25,426 A:middle
and you know it's not present.

944
00:45:28,696 --> 00:45:34,076 A:middle
To use ApplicationPasswords, you
create both a AccessControl list

945
00:45:34,616 --> 00:45:36,526 A:middle
and a Local Authentication
context.

946
00:45:37,626 --> 00:45:39,506 A:middle
The first says please
use application password

947
00:45:39,506 --> 00:45:43,176 A:middle
for this item, and the second
specifies the password itself.

948
00:45:43,706 --> 00:45:47,296 A:middle
You then take both of
these and add to them

949
00:45:47,296 --> 00:45:49,446 A:middle
to the dictionary you
passed the SecItem call.

950
00:45:49,446 --> 00:45:56,746 A:middle
This is an example of using a
Local Authentication context

951
00:45:56,966 --> 00:45:59,106 A:middle
in conjunction with
the Keychain item.

952
00:45:59,106 --> 00:46:03,136 A:middle
So that was ApplicationPassword.

953

954
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

955
00:45:59,106 --> 00:46:03,136 A:middle
So that was ApplicationPassword.

956
00:46:04,436 --> 00:46:07,116 A:middle
The final new policy,
it's Private Key Usage.

957
00:46:07,576 --> 00:46:10,636 A:middle
Here's the diagram from earlier,

958
00:46:11,236 --> 00:46:14,086 A:middle
where we saw a Keychain item
being released from the KeyStore

959
00:46:14,086 --> 00:46:16,696 A:middle
in Secure Enclave, back
to your application.

960
00:46:17,166 --> 00:46:21,896 A:middle
This obviously is needed if you
take that password and use it

961
00:46:21,896 --> 00:46:22,656 A:middle
to log into a server,

962
00:46:22,736 --> 00:46:27,026 A:middle
but it exposes the password
it a potentially compromised

963
00:46:27,476 --> 00:46:28,806 A:middle
user space.

964
00:46:28,986 --> 00:46:30,776 A:middle
So wouldn't it be
great if there's a way

965
00:46:30,916 --> 00:46:33,636 A:middle
to keep the secret
inside Secure Enclave

966
00:46:33,906 --> 00:46:35,096 A:middle
but still have it be usable?

967
00:46:35,916 --> 00:46:38,126 A:middle
And there is, using
asymmetric cryptography.

968
00:46:39,486 --> 00:46:42,766 A:middle
There we don't just have a
single key, but a key pair.

969
00:46:43,606 --> 00:46:47,306 A:middle
A public key that doesn't
require any protection,

970
00:46:47,826 --> 00:46:53,906 A:middle
and a private key we
have to keep safe.

971
00:46:54,116 --> 00:46:58,656 A:middle
Using this requires the
SecKey API and the details

972
00:46:58,656 --> 00:47:00,336 A:middle
that are somewhat
beyond the scope

973

974
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

975
00:46:58,656 --> 00:47:00,336 A:middle
that are somewhat
beyond the scope

976
00:47:00,336 --> 00:47:03,106 A:middle
of the few minutes I have left,
but here is an overview just

977
00:47:03,106 --> 00:47:05,506 A:middle
so you can see the flow.

978
00:47:05,506 --> 00:47:09,436 A:middle
Calling SecKeyGeneratePair
will cause the private key

979
00:47:09,796 --> 00:47:11,946 A:middle
to be stored in Secure Enclave,

980
00:47:12,176 --> 00:47:14,576 A:middle
if you specify some new
additional parameters.

981
00:47:15,796 --> 00:47:18,366 A:middle
But the public key
is still returned

982
00:47:18,366 --> 00:47:19,676 A:middle
to your application to store.

983
00:47:23,716 --> 00:47:26,396 A:middle
If you try and retrieve
the private key,

984
00:47:26,676 --> 00:47:30,966 A:middle
using SecItemCopyMatching,
you can get a reference,

985
00:47:31,006 --> 00:47:35,216 A:middle
but cannot get the actual
data out of Secure Enclave.

986
00:47:35,766 --> 00:47:38,936 A:middle
So how do you actually use it?

987
00:47:39,736 --> 00:47:42,566 A:middle
Well, you might have some
data you want to be signed.

988
00:47:43,206 --> 00:47:47,736 A:middle
So you can call SecKeyRawSign
and pass the data

989
00:47:47,736 --> 00:47:52,016 A:middle
into Secure Enclave, and if
you've set up the private key

990
00:47:52,016 --> 00:47:53,826 A:middle
to be protected by Touch ID,

991
00:47:54,886 --> 00:47:59,246 A:middle
only after a successful match
will the private key be used

992
00:47:59,416 --> 00:48:02,936 A:middle
to sign that data, and have it
returned to your application.

993

994
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

995
00:47:59,416 --> 00:48:02,936 A:middle
to sign that data, and have it
returned to your application.

996
00:48:09,036 --> 00:48:10,626 A:middle
So one place you might want

997
00:48:10,626 --> 00:48:13,716 A:middle
to use this is strengthening
Touch ID as a second factor.

998
00:48:13,786 --> 00:48:18,246 A:middle
I'm going to give an example
flow, but bear in mind

999
00:48:18,246 --> 00:48:20,916 A:middle
that there are a lot
of intricate details

1000
00:48:20,916 --> 00:48:22,656 A:middle
in writing cryptographic
protocol.

1001
00:48:22,906 --> 00:48:24,746 A:middle
So please don't take this
to be too prescriptive.

1002
00:48:25,156 --> 00:48:28,906 A:middle
First of all, for
the enrollment flow,

1003
00:48:29,086 --> 00:48:33,946 A:middle
you would generate a key pair,
and send the public key back

1004
00:48:33,946 --> 00:48:37,746 A:middle
to the server, along with a
user's regular login details.

1005
00:48:39,656 --> 00:48:43,836 A:middle
The server would record the
public key as being associated

1006
00:48:43,836 --> 00:48:47,206 A:middle
with that user, and
that's enrollment.

1007
00:48:47,206 --> 00:48:52,316 A:middle
Later on, when the server wants
to verify that you're logging

1008
00:48:52,316 --> 00:48:55,436 A:middle
in from the same physical
device that you were before,

1009
00:48:55,836 --> 00:48:59,036 A:middle
it can send a challenge
to your application,

1010
00:48:59,946 --> 00:49:02,336 A:middle
which in turn calls
SecKeyRawSign.

1011

1012
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1013
00:48:59,946 --> 00:49:02,336 A:middle
which in turn calls
SecKeyRawSign.

1014
00:49:04,556 --> 00:49:06,716 A:middle
The user will present
their finger

1015
00:49:07,156 --> 00:49:08,356 A:middle
and have a Touch ID match.

1016
00:49:08,906 --> 00:49:12,596 A:middle
That will result in the
challenge being signed

1017
00:49:12,656 --> 00:49:14,136 A:middle
and you can send it
back to the server.

1018
00:49:14,736 --> 00:49:19,446 A:middle
And the server can then use the
public key it previously stored

1019
00:49:19,996 --> 00:49:21,056 A:middle
to validate the signature.

1020
00:49:21,576 --> 00:49:27,156 A:middle
Just a few more details
on this topic.

1021
00:49:27,706 --> 00:49:30,466 A:middle
The supported keys are
Elliptic Curve P256,

1022
00:49:31,726 --> 00:49:34,376 A:middle
the private key is not
extractible in any form,

1023
00:49:34,376 --> 00:49:37,776 A:middle
even protected, and the
applications are RawSign

1024
00:49:37,806 --> 00:49:38,566 A:middle
and RawVerify.

1025
00:49:42,656 --> 00:49:46,616 A:middle
So in summary, I have given
an overview of the Keychain,

1026
00:49:47,616 --> 00:49:50,666 A:middle
and some situations where
you might want to use it.

1027
00:49:52,076 --> 00:49:53,966 A:middle
I talked about the
technologies we have

1028
00:49:53,966 --> 00:49:56,626 A:middle
to avoid presenting the
user with password prompts.

1029
00:49:57,096 --> 00:50:02,336 A:middle
Looked at the two Touch ID
APIs, Local Authentication

1030

1031
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1032
00:49:57,096 --> 00:50:02,336 A:middle
Looked at the two Touch ID
APIs, Local Authentication

1033
00:50:02,736 --> 00:50:04,396 A:middle
and Keychain Access Controls.

1034
00:50:04,916 --> 00:50:10,056 A:middle
And told you about some new
advanced features you can build

1035
00:50:10,236 --> 00:50:13,536 A:middle
on top the new things we
added to those APIs iOS 9.

1036
00:50:17,436 --> 00:50:22,966 A:middle
App passwords and Secure
Enclave protected private keys.

1037
00:50:24,086 --> 00:50:27,076 A:middle
I'm always fascinated to find

1038
00:50:27,076 --> 00:50:28,976 A:middle
out what wonderful
things you are going

1039
00:50:28,976 --> 00:50:30,736 A:middle
to make using these new APIs

1040
00:50:31,156 --> 00:50:34,856 A:middle
and how you can better balance
security and convenience

1041
00:50:34,856 --> 00:50:36,106 A:middle
in your own applications.

1042
00:50:38,856 --> 00:50:41,986 A:middle
There's some more
information available online,

1043
00:50:42,206 --> 00:50:46,226 A:middle
including the iOS Security
White Paper I mentioned earlier.

1044
00:50:46,226 --> 00:50:52,126 A:middle
There's more information
about app transport security

1045
00:50:52,336 --> 00:50:55,196 A:middle
on Thursday's Networking
with NSURL Session, session.

1046
00:50:55,856 --> 00:51:02,246 A:middle
And come and visit us tomorrow
morning and Thursday morning

1047

1048
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1049
00:50:55,856 --> 00:51:02,246 A:middle
And come and visit us tomorrow
morning and Thursday morning

1050
00:51:02,656 --> 00:51:04,396 A:middle
in the Security and
Privacy labs.

1051
00:51:05,106 --> 00:51:06,066 A:middle
Thank you very much, indeed.

1052
00:51:07,516 --> 00:51:11,500 A:middle
[Applause]

1053
