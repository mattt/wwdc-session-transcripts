X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:23,306 --> 00:00:24,016 A:middle
>> ALI OZER: Good afternoon.

2
00:00:24,306 --> 00:00:25,946 A:middle
Welcome to What's New in Cocoa.

3
00:00:30,546 --> 00:00:31,696 A:middle
My name is Ali Ozer.

4
00:00:32,326 --> 00:00:36,266 A:middle
I'll be talking to you about
what's new in Cocoa this year.

5
00:00:36,656 --> 00:00:39,796 A:middle
Three areas: Swiftificaiton,
AppKit, and Foundation.

6
00:00:41,016 --> 00:00:43,826 A:middle
We have a lot of
material, so let's dive in.

7
00:00:44,516 --> 00:00:48,606 A:middle
Swiftification refers to the
API enhancements we have done

8
00:00:48,606 --> 00:00:52,946 A:middle
across our frameworks
in support of Swift.

9
00:00:53,176 --> 00:00:56,606 A:middle
The changes also improve our
Objective-C APIs as well.

10
00:00:57,156 --> 00:01:00,566 A:middle
As you know, Swift
provides features

11

12
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

13
00:00:57,156 --> 00:01:00,566 A:middle
As you know, Swift
provides features

14
00:01:00,566 --> 00:01:02,426 A:middle
to express APIs more precisely.

15
00:01:02,836 --> 00:01:05,366 A:middle
For instance, you can
indicate this is an array.

16
00:01:05,366 --> 00:01:07,216 A:middle
The Subviews property
is an array

17
00:01:07,216 --> 00:01:09,186 A:middle
of NSView, not just an array.

18
00:01:09,866 --> 00:01:12,036 A:middle
You can indicate that a
method such as System Font

19
00:01:12,036 --> 00:01:15,156 A:middle
Of Size returns an NSFont
and will never return nil.

20
00:01:16,096 --> 00:01:18,246 A:middle
In methods such as
Image For Resource,

21
00:01:18,246 --> 00:01:20,996 A:middle
an NSBundle may return
nil because it is declared

22
00:01:20,996 --> 00:01:22,246 A:middle
as an optional NSImage.

23
00:01:24,256 --> 00:01:27,096 A:middle
We enable these features
in Objective-C as well

24
00:01:27,096 --> 00:01:28,466 A:middle
with nullability in generics.

25
00:01:28,926 --> 00:01:31,506 A:middle
So I'm going to talk about
these two areas briefly,

26
00:01:31,766 --> 00:01:33,946 A:middle
and then also a few
other changes we made

27
00:01:34,186 --> 00:01:38,466 A:middle
to make our Objective-C
and Swift APIs better.

28
00:01:38,666 --> 00:01:41,386 A:middle
We applied these in APIs
of many our frameworks,

29
00:01:41,386 --> 00:01:44,606 A:middle
not just AppKit and Foundation.

30
00:01:45,086 --> 00:01:48,096 A:middle
By doing this we not only do
better exposure of the APIs

31
00:01:48,096 --> 00:01:51,906 A:middle
in Swift but also
make the APIs clearer

32
00:01:52,096 --> 00:01:54,176 A:middle
and also provide compile
time type-checking

33
00:01:54,176 --> 00:01:57,506 A:middle
which is very important,
of course.

34
00:01:57,656 --> 00:02:00,896 A:middle
Nullability is whether
values can or cannot be nil.

35

36
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

37
00:01:57,656 --> 00:02:00,896 A:middle
Nullability is whether
values can or cannot be nil.

38
00:02:01,516 --> 00:02:06,146 A:middle
If you use Swift with
X v10 or iOS 8 SDKs,

39
00:02:06,146 --> 00:02:09,985 A:middle
you know the Swift APIs already
have the proper nullability

40
00:02:09,985 --> 00:02:11,446 A:middle
and optional declarations
on them.

41
00:02:11,706 --> 00:02:15,186 A:middle
We have managed that with
handcrafted side data,

42
00:02:15,226 --> 00:02:15,916 A:middle
side files.

43
00:02:16,436 --> 00:02:19,886 A:middle
In X v11 and iOS 9, we bring
this ability to Objective-C,

44
00:02:20,086 --> 00:02:22,766 A:middle
and we have several new keywords
we've added to Objective-C.

45
00:02:23,446 --> 00:02:27,666 A:middle
`nonnull` indicates never nil,
`nullable` indicates can be nil,

46
00:02:28,166 --> 00:02:31,726 A:middle
`null_resettable` indicates that
a property can be set to nil

47
00:02:31,726 --> 00:02:33,176 A:middle
but won't ever return nil.

48
00:02:33,316 --> 00:02:36,036 A:middle
We'll have an example
in a second.

49
00:02:36,036 --> 00:02:38,706 A:middle
Last and least, we
have `null_unspecified`,

50
00:02:38,706 --> 00:02:39,836 A:middle
meaning not specified.

51
00:02:40,186 --> 00:02:43,146 A:middle
This is used for
deprecated stuff or stuff

52
00:02:43,146 --> 00:02:47,636 A:middle
that has not yet been audited.

53
00:02:47,686 --> 00:02:51,306 A:middle
Since nonnull is the
majority of cases in our API,

54
00:02:51,556 --> 00:02:53,256 A:middle
we also have these
two declarations:

55
00:02:53,256 --> 00:02:54,866 A:middle
Assume Nonnull Begin and End,

56
00:02:54,866 --> 00:02:56,556 A:middle
which we wrap our
header files with.

57
00:02:57,056 --> 00:02:59,506 A:middle
With this, the nonnull
declarations are no

58
00:02:59,506 --> 00:03:00,216 A:middle
longer needed.

59

60
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

61
00:02:59,506 --> 00:03:00,216 A:middle
longer needed.

62
00:03:00,696 --> 00:03:03,206 A:middle
Nonnull is unnecessary

63
00:03:03,206 --> 00:03:05,066 A:middle
and we have the other
declarators on our APIs.

64
00:03:05,066 --> 00:03:08,026 A:middle
We recommend you use
these in your header files

65
00:03:08,266 --> 00:03:10,586 A:middle
if you have a lot of
header files of your own.

66
00:03:11,656 --> 00:03:15,256 A:middle
Let's look at some examples
of how these affect our APIs.

67
00:03:15,756 --> 00:03:18,276 A:middle
You can see the Color
property on NSColorWell.

68
00:03:18,696 --> 00:03:22,096 A:middle
We have not put any declaration
on it, which means it is nonnull

69
00:03:22,506 --> 00:03:25,566 A:middle
and comes across in Swift
as a non-optional value.

70
00:03:25,616 --> 00:03:26,496 A:middle
The Color property.

71
00:03:27,056 --> 00:03:29,336 A:middle
The Image property of
NSImageView, on the other hand,

72
00:03:29,336 --> 00:03:33,806 A:middle
is nullable which means that
it can be set to nil and comes

73
00:03:33,806 --> 00:03:36,376 A:middle
across in Swift as
an optional value.

74
00:03:36,796 --> 00:03:39,636 A:middle
And finally the Font property
of NSMenu is declarated

75
00:03:39,636 --> 00:03:42,616 A:middle
as null resettable,
and this comes

76
00:03:42,616 --> 00:03:44,236 A:middle
as implicitly unwrapped
optional.

77
00:03:44,956 --> 00:03:48,176 A:middle
In this case what this means is
we can set this value to nil,

78
00:03:48,176 --> 00:03:49,706 A:middle
but it will never return nil.

79
00:03:50,236 --> 00:03:53,706 A:middle
What NSMenu does is if you ever
set it to nil, it goes back

80
00:03:53,756 --> 00:03:56,776 A:middle
to the default font that it
would have had for the system.

81
00:03:56,816 --> 00:03:58,666 A:middle
So it never will return nil.

82

83
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

84
00:04:00,176 --> 00:04:03,016 A:middle
With nullability, you may
see some build time warnings.

85
00:04:03,756 --> 00:04:04,866 A:middle
Let me show you an example.

86
00:04:05,186 --> 00:04:07,926 A:middle
If you have code like this that
was setting the Color property

87
00:04:07,926 --> 00:04:11,156 A:middle
of a ColorWell to nil,
the compiler will now warn

88
00:04:11,456 --> 00:04:13,156 A:middle
because we declared
this to be nonnull.

89
00:04:13,726 --> 00:04:16,856 A:middle
This is a good thing because it
turns out if you had the code

90
00:04:16,856 --> 00:04:19,546 A:middle
and it was being run, it
would have raised a parameter

91
00:04:19,546 --> 00:04:20,456 A:middle
assertion anyway.

92
00:04:20,866 --> 00:04:22,926 A:middle
This is kind of things that
now you'll get warnings

93
00:04:22,926 --> 00:04:23,906 A:middle
about from the compiler.

94
00:04:23,906 --> 00:04:24,446 A:middle
That's great.

95
00:04:26,106 --> 00:04:31,146 A:middle
As you probably know, in general
nil is not a valid object value

96
00:04:31,146 --> 00:04:32,796 A:middle
in our APIs.

97
00:04:32,796 --> 00:04:36,146 A:middle
NSString, NSArray, NSDictionary,
et cetera have easy

98
00:04:36,146 --> 00:04:40,916 A:middle
to express empty values
and APIs that accept

99
00:04:40,916 --> 00:04:44,016 A:middle
or return nils should
document what nil means

100
00:04:44,016 --> 00:04:45,206 A:middle
as an exceptional case.

101
00:04:45,576 --> 00:04:47,736 A:middle
I'll give you several
examples from our APIs.

102
00:04:48,326 --> 00:04:51,476 A:middle
If you set the background color
of an NSTextView object to nil,

103
00:04:51,616 --> 00:04:53,126 A:middle
it means don't draw
the background.

104
00:04:53,936 --> 00:04:55,486 A:middle
A nil locale in many of our APIs

105
00:04:55,486 --> 00:04:58,696 A:middle
that take locale
means nonlocalized.

106
00:04:58,696 --> 00:04:59,976 A:middle
So you can specify a locale,

107
00:04:59,976 --> 00:05:02,696 A:middle
but if you specify nil
it means nonlocalized.

108

109
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

110
00:04:59,976 --> 00:05:02,696 A:middle
but if you specify nil
it means nonlocalized.

111
00:05:03,286 --> 00:05:07,336 A:middle
Let's talk about generics.

112
00:05:08,666 --> 00:05:12,366 A:middle
Generics as you have
heard is lightweight type

113
00:05:12,366 --> 00:05:16,326 A:middle
parameterization that we
added to Objective-C and great

114
00:05:16,646 --> 00:05:19,726 A:middle
for specifying types of
elements in collections.

115
00:05:21,076 --> 00:05:23,116 A:middle
Here is an example
of NSSearchField.

116
00:05:23,486 --> 00:05:24,916 A:middle
The Recent Search property

117
00:05:24,916 --> 00:05:28,456 A:middle
of NSSearchField is
declared like this in X v10.

118
00:05:28,456 --> 00:05:31,666 A:middle
The name Recent Searches
is not superclear.

119
00:05:31,666 --> 00:05:33,126 A:middle
What does this contain?

120
00:05:33,126 --> 00:05:34,716 A:middle
Strings? URLs?

121
00:05:34,716 --> 00:05:35,916 A:middle
Some search objects?

122
00:05:36,386 --> 00:05:39,926 A:middle
In X v11 SDK, we
can clarify this.

123
00:05:39,976 --> 00:05:41,996 A:middle
It is an array of NSString.

124
00:05:42,376 --> 00:05:45,516 A:middle
And the Swift declaration goes
from an array of any object

125
00:05:45,766 --> 00:05:47,266 A:middle
to an array of string as well.

126
00:05:47,836 --> 00:05:53,196 A:middle
The way we have done this, we
have taken NSArray in Foundation

127
00:05:53,516 --> 00:05:56,256 A:middle
and added the Object Type
parameter to it, like so.

128
00:05:56,256 --> 00:05:59,406 A:middle
We have applied this object
type to all of the APIs,

129
00:05:59,886 --> 00:06:02,826 A:middle
appropriate APIs, which
used to take or return ID,

130

131
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

132
00:05:59,886 --> 00:06:02,826 A:middle
appropriate APIs, which
used to take or return ID,

133
00:06:02,826 --> 00:06:06,146 A:middle
such as object at index,
contains object, and so on.

134
00:06:06,536 --> 00:06:09,916 A:middle
There is many other APIs
this applies to in NSArray.

135
00:06:10,236 --> 00:06:13,866 A:middle
With this, the code we
had with Recent Searches,

136
00:06:14,486 --> 00:06:15,806 A:middle
let's say you had
a code like this,

137
00:06:16,266 --> 00:06:19,006 A:middle
Recent Searches contains
object, some URL,

138
00:06:19,936 --> 00:06:21,196 A:middle
we are passing in NSURL.

139
00:06:21,476 --> 00:06:24,536 A:middle
The compiler now will warn
you that you're passing URL

140
00:06:25,126 --> 00:06:27,336 A:middle
into a method that expects
an array of strings.

141
00:06:27,676 --> 00:06:30,246 A:middle
The great thing here is this
code would have never failed

142
00:06:30,246 --> 00:06:32,696 A:middle
or crashed because that
URL never would have been

143
00:06:32,696 --> 00:06:33,316 A:middle
found before.

144
00:06:33,386 --> 00:06:36,496 A:middle
The compiler is telling you of
a potential bug in the code.

145
00:06:38,166 --> 00:06:40,926 A:middle
We have added generic support in
Foundation not only to NSArray

146
00:06:40,926 --> 00:06:43,996 A:middle
but to all the other collections
as well, including NSEnumerator,

147
00:06:43,996 --> 00:06:48,106 A:middle
which strictly speaking is not
even a collection, of course.

148
00:06:48,556 --> 00:06:50,486 A:middle
You can apply this to
non-collections as well.

149
00:06:51,066 --> 00:06:55,266 A:middle
Now with generics you can use
them as well, you can use them

150
00:06:55,316 --> 00:06:57,446 A:middle
in variable declarations
in your own classes.

151
00:06:57,886 --> 00:07:00,876 A:middle
If you are taking the result of
Recent Searches and assigning it

152

153
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

154
00:06:57,886 --> 00:07:00,876 A:middle
If you are taking the result of
Recent Searches and assigning it

155
00:07:00,936 --> 00:07:04,716 A:middle
to a property of your own,
you can go ahead and declarate

156
00:07:04,766 --> 00:07:07,866 A:middle
that to be NSArray of NSString,
and that will allow the type

157
00:07:07,946 --> 00:07:09,536 A:middle
to propagate through
your own code.

158
00:07:10,656 --> 00:07:12,116 A:middle
You can declarate your
own properties in APIs.

159
00:07:12,116 --> 00:07:14,476 A:middle
Here is an array of files.

160
00:07:14,476 --> 00:07:15,306 A:middle
What are they?

161
00:07:15,306 --> 00:07:16,396 A:middle
Strings or URLs?

162
00:07:16,906 --> 00:07:17,946 A:middle
You can be clear.

163
00:07:17,946 --> 00:07:21,346 A:middle
You can apply generics to
your custom collections

164
00:07:21,346 --> 00:07:23,686 A:middle
if you have any or even
to your custom categories

165
00:07:23,686 --> 00:07:24,816 A:middle
on foundation collections.

166
00:07:25,536 --> 00:07:28,216 A:middle
For instance, here is
a category on NSArray.

167
00:07:29,076 --> 00:07:32,296 A:middle
You can go in and add it, just
right there in your own code.

168
00:07:32,296 --> 00:07:34,736 A:middle
These generics work
with categories as well.

169
00:07:35,346 --> 00:07:43,166 A:middle
Now kindof is another feature
we have added to Objective-C.

170
00:07:43,636 --> 00:07:46,216 A:middle
Let's give you motivation
as to why we need this.

171
00:07:46,656 --> 00:07:48,316 A:middle
Here's what the subviews
declaration looked

172
00:07:48,316 --> 00:07:49,026 A:middle
like in X v10.

173
00:07:49,896 --> 00:07:54,766 A:middle
Here is what we did our first
attempt in applying generics.

174
00:07:55,456 --> 00:07:58,136 A:middle
Subviews was changed
to NSArray of NSView.

175
00:07:58,806 --> 00:08:02,546 A:middle
Then we had code like this,
where we assign an element

176

177
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

178
00:07:58,806 --> 00:08:02,546 A:middle
Then we had code like this,
where we assign an element

179
00:08:02,546 --> 00:08:04,116 A:middle
out of this array into NSButton.

180
00:08:04,966 --> 00:08:07,206 A:middle
Turns out that this
concerns the compiler,

181
00:08:07,746 --> 00:08:10,986 A:middle
the compiler is always looking
out for us, always concerned.

182
00:08:11,456 --> 00:08:12,476 A:middle
It generates a warning.

183
00:08:12,946 --> 00:08:15,606 A:middle
Why? Because we're assigning
something that's explicitly

184
00:08:15,606 --> 00:08:18,626 A:middle
declared to be an NSView
to a subclass of NSView,

185
00:08:18,816 --> 00:08:20,816 A:middle
and the compiler is
right in being concerned.

186
00:08:21,326 --> 00:08:23,736 A:middle
However, this is a kind
of code we use a lot,

187
00:08:23,736 --> 00:08:25,046 A:middle
and it is often valid.

188
00:08:25,636 --> 00:08:28,586 A:middle
So we added this kindof keyword
and changed the declaration

189
00:08:28,846 --> 00:08:33,486 A:middle
of the subviews property to
be NSArray of kindof NSViews.

190
00:08:33,916 --> 00:08:35,145 A:middle
What this says is --

191
00:08:36,515 --> 00:08:39,655 A:middle
[Applause]

192
00:08:40,155 --> 00:08:40,895 A:middle
>> ALI OZER: Thank you.

193
00:08:41,606 --> 00:08:45,976 A:middle
Thank you for overlooking
the under bars there!

194
00:08:45,976 --> 00:08:48,096 A:middle
What this says, it is okay
for the caller to be able

195
00:08:48,096 --> 00:08:50,826 A:middle
to access the elements
of the array as instances

196
00:08:50,826 --> 00:08:54,086 A:middle
of the specified class or
instances of a subclass as well.

197
00:08:54,826 --> 00:08:56,946 A:middle
So this is now -- this works.

198
00:08:57,616 --> 00:09:02,826 A:middle
Note that kindof is a compile
time facility like most

199

200
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

201
00:08:57,616 --> 00:09:02,826 A:middle
Note that kindof is a compile
time facility like most

202
00:09:02,826 --> 00:09:04,206 A:middle
of the things I have
talked about here.

203
00:09:04,676 --> 00:09:07,356 A:middle
There is no runtime
code changes,

204
00:09:08,396 --> 00:09:11,196 A:middle
there is no runtime check
for the type, for instance.

205
00:09:11,586 --> 00:09:14,066 A:middle
There are cases where we
want the caller to think

206
00:09:14,066 --> 00:09:16,936 A:middle
about what the elements
are before accessing them.

207
00:09:17,396 --> 00:09:20,526 A:middle
So we're going to use
these sparingly in our APIs

208
00:09:20,526 --> 00:09:22,166 A:middle
and we recommend
you do the same.

209
00:09:22,396 --> 00:09:24,466 A:middle
They should be used when
it is safe for the caller

210
00:09:24,466 --> 00:09:25,566 A:middle
to make that assumption.

211
00:09:25,896 --> 00:09:27,486 A:middle
If you want the caller
to think twice

212
00:09:27,486 --> 00:09:29,816 A:middle
or maybe do some runtime
query, don't use the kindof.

213
00:09:30,236 --> 00:09:32,346 A:middle
An example is this
Representations method

214
00:09:32,346 --> 00:09:33,136 A:middle
on NSImage.

215
00:09:33,866 --> 00:09:35,886 A:middle
It returns an array
of NSImage reps,

216
00:09:36,066 --> 00:09:40,086 A:middle
which are often subclassed,
almost always subclassed.

217
00:09:40,536 --> 00:09:42,136 A:middle
However, we have
not used kindof here

218
00:09:42,136 --> 00:09:44,626 A:middle
because the kindof
representations you get back

219
00:09:45,096 --> 00:09:47,686 A:middle
isn't always predictable
and it might, in fact,

220
00:09:47,686 --> 00:09:50,406 A:middle
change during the runtime
of an application or in fact

221
00:09:50,406 --> 00:09:52,216 A:middle
between releases of the OS.

222
00:09:52,216 --> 00:09:54,576 A:middle
It is better for the
caller to be more alert here

223
00:09:54,576 --> 00:09:55,866 A:middle
and do some runtime checks.

224
00:09:56,386 --> 00:10:01,026 A:middle
Let me talk about
error handling.

225

226
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

227
00:09:56,386 --> 00:10:01,026 A:middle
Let me talk about
error handling.

228
00:10:01,026 --> 00:10:03,906 A:middle
As you heard yesterday, Swift
2 brings an amazing error

229
00:10:03,906 --> 00:10:06,326 A:middle
handling facility.

230
00:10:08,226 --> 00:10:11,336 A:middle
What that means is for a method
like this on NSData write

231
00:10:11,436 --> 00:10:15,426 A:middle
to URL options error, it now
looks like this in Swift.

232
00:10:15,426 --> 00:10:18,206 A:middle
The Boolean return value goes
away, it is now implicit.

233
00:10:18,566 --> 00:10:21,426 A:middle
And the error, the by
reference NSError parameter,

234
00:10:21,726 --> 00:10:24,516 A:middle
also goes away because it is
captured in the throw statement.

235
00:10:24,946 --> 00:10:28,486 A:middle
Here is a kindof code you
write to deal with this.

236
00:10:28,486 --> 00:10:30,066 A:middle
As you can see in
the catch phrase,

237
00:10:30,066 --> 00:10:32,986 A:middle
you can capture the error,
it is either available

238
00:10:32,986 --> 00:10:34,886 A:middle
for you automatically
or you can declare it.

239
00:10:34,886 --> 00:10:36,816 A:middle
And you can declare
different catch statements,

240
00:10:36,816 --> 00:10:37,576 A:middle
of course, as well.

241
00:10:38,066 --> 00:10:40,536 A:middle
It is great, straightforward.

242
00:10:40,536 --> 00:10:41,876 A:middle
Now, one thing.

243
00:10:42,056 --> 00:10:45,206 A:middle
Note that despite the
terminology here, throw, try,

244
00:10:45,206 --> 00:10:47,516 A:middle
catch, et cetera, these
are not exceptions

245
00:10:47,516 --> 00:10:48,606 A:middle
in the Objective-C sense.

246
00:10:48,996 --> 00:10:50,606 A:middle
We're not raising
exceptions here.

247
00:10:50,606 --> 00:10:53,796 A:middle
We're actually returning
errors and unwinding properly

248
00:10:53,796 --> 00:10:58,116 A:middle
through the stack just like, you
know, what we do with NSErrors.

249
00:10:58,816 --> 00:11:01,356 A:middle
In fact, NSError
guidelines apply

250

251
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

252
00:10:58,816 --> 00:11:01,356 A:middle
In fact, NSError
guidelines apply

253
00:11:01,446 --> 00:11:03,696 A:middle
to the Swift error handling.

254
00:11:03,806 --> 00:11:08,056 A:middle
Use NSErrors and Swift error
handling for runtime errors,

255
00:11:08,056 --> 00:11:10,656 A:middle
errors that you expect to
present to the user or handle

256
00:11:10,656 --> 00:11:12,996 A:middle
at runtime, such as file
not found and so forth.

257
00:11:12,996 --> 00:11:16,576 A:middle
We continue to use
exceptions or Swift assertions

258
00:11:16,576 --> 00:11:20,266 A:middle
for programming errors such
as array index out of bounds.

259
00:11:20,406 --> 00:11:22,736 A:middle
The last category, of
course, are the kind of errors

260
00:11:22,736 --> 00:11:26,176 A:middle
that are not expected
to be captured.

261
00:11:26,176 --> 00:11:28,386 A:middle
One more Swiftification
item is naming cleanup.

262
00:11:29,186 --> 00:11:32,406 A:middle
As you might be away, we
still have a lot of enum names

263
00:11:32,406 --> 00:11:35,896 A:middle
from a long time ago where
we use a common suffix rather

264
00:11:35,896 --> 00:11:38,566 A:middle
than common prefix, and we have
renamed them in some cases,

265
00:11:38,566 --> 00:11:40,576 A:middle
not all, to have
a common prefix,

266
00:11:40,576 --> 00:11:41,766 A:middle
which means that they come

267
00:11:41,766 --> 00:11:43,416 A:middle
across in Swift with
a better name.

268
00:11:43,416 --> 00:11:45,466 A:middle
Instead of dot left
text alignment it comes

269
00:11:45,466 --> 00:11:46,616 A:middle
across as dot.left.

270
00:11:46,976 --> 00:11:48,476 A:middle
There are many more
examples of this.

271
00:11:49,066 --> 00:11:51,446 A:middle
Note that in many cases we
haven't actually deprecated the

272
00:11:51,446 --> 00:11:54,496 A:middle
old names, so your sources
will continue to compile,

273
00:11:54,496 --> 00:11:56,896 A:middle
but you can switch to the new
names as you rewrite your code.

274
00:11:57,386 --> 00:12:01,646 A:middle
And there is many more of these.

275

276
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

277
00:11:57,386 --> 00:12:01,646 A:middle
And there is many more of these.

278
00:12:01,676 --> 00:12:03,146 A:middle
With that, let's
switch to AppKit.

279
00:12:04,576 --> 00:12:06,246 A:middle
There are many AppKit
topics I would love

280
00:12:06,246 --> 00:12:09,356 A:middle
to talk about, I'll
talk about some.

281
00:12:09,826 --> 00:12:13,666 A:middle
One note here: from this point
on i'm going to show APIs

282
00:12:13,666 --> 00:12:16,426 A:middle
and code samples
mostly in Swift.

283
00:12:16,596 --> 00:12:18,626 A:middle
Even if you're not
comfortable yet in Swift,

284
00:12:19,086 --> 00:12:21,476 A:middle
don't worry because no
code I show will be all

285
00:12:21,476 --> 00:12:22,256 A:middle
that complicated.

286
00:12:22,736 --> 00:12:23,916 A:middle
After all, I'm just a manager.

287
00:12:24,476 --> 00:12:25,506 A:middle
It is important to note --

288
00:12:26,016 --> 00:12:27,126 A:middle
[Laughter]

289
00:12:27,126 --> 00:12:27,766 A:middle
>> ALI OZER: It is
important to note

290
00:12:27,766 --> 00:12:29,806 A:middle
that these APIs are
all available

291
00:12:29,806 --> 00:12:31,226 A:middle
in Objective-C and Swift.

292
00:12:31,536 --> 00:12:33,256 A:middle
So we're not showing you
anything that works only

293
00:12:33,256 --> 00:12:34,426 A:middle
for Objective-C or Swift.

294
00:12:34,426 --> 00:12:37,086 A:middle
It is available for whatever
language you're using.

295
00:12:37,616 --> 00:12:43,686 A:middle
As you know, the new Force
Touch trackpad brings pressure

296
00:12:43,686 --> 00:12:46,716 A:middle
sensitivity as well
as haptic feedback.

297
00:12:46,806 --> 00:12:49,696 A:middle
opening up interesting
possibilities for applications.

298
00:12:49,696 --> 00:12:53,486 A:middle
Let's look at some use cases.

299
00:12:53,486 --> 00:12:56,956 A:middle
Here, for instance, by applying
Force Click on some text,

300
00:12:56,956 --> 00:12:59,796 A:middle
you can do lookup or you
can automatically create a

301
00:12:59,796 --> 00:13:00,426 A:middle
calendar event.

302

303
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

304
00:12:59,796 --> 00:13:00,426 A:middle
calendar event.

305
00:13:01,626 --> 00:13:03,686 A:middle
In this case, by
applying a pressure

306
00:13:03,686 --> 00:13:05,816 A:middle
to the fast-forward button,
you can cause the movie

307
00:13:05,816 --> 00:13:07,936 A:middle
to fast-forward even faster.

308
00:13:08,496 --> 00:13:13,006 A:middle
Here you can apply pressure
to draw thin or thick strokes

309
00:13:13,246 --> 00:13:16,446 A:middle
when you're signing your name
or doing drawing in markup.

310
00:13:17,336 --> 00:13:20,996 A:middle
Finally, in this case, as you
move objects around in a program

311
00:13:20,996 --> 00:13:23,936 A:middle
like Xcode's Interface
Builder or in a drawing program

312
00:13:24,316 --> 00:13:27,576 A:middle
as objects go into alignment
you will get haptic feedback.

313
00:13:28,306 --> 00:13:32,666 A:middle
Now some of the Force Touch APIs
made an appearance in X v10.3,

314
00:13:32,666 --> 00:13:34,796 A:middle
some of you may have seen those.

315
00:13:35,146 --> 00:13:37,376 A:middle
First, we have accelerator
controls APIs.

316
00:13:38,246 --> 00:13:40,956 A:middle
These APIs interpret variable
pressure and are useful

317
00:13:40,956 --> 00:13:43,746 A:middle
for creating the likes of
the fast-forward buttons

318
00:13:43,746 --> 00:13:45,746 A:middle
or zoom buttons in an
application like Maps.

319
00:13:46,146 --> 00:13:48,476 A:middle
You can set accelerator
controls on NSButton

320
00:13:48,476 --> 00:13:49,616 A:middle
in NSSegmentedControl.

321
00:13:50,236 --> 00:13:51,726 A:middle
If you want to do more
sophisticated things

322
00:13:51,726 --> 00:13:55,266 A:middle
with pressure, we give you
an event, a new event type

323
00:13:55,316 --> 00:13:57,716 A:middle
for pressure with the
corresponding methods

324
00:13:57,956 --> 00:14:00,276 A:middle
on NSResponder and
gesture recognizer as well,

325

326
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

327
00:13:57,956 --> 00:14:00,276 A:middle
on NSResponder and
gesture recognizer as well,

328
00:14:00,376 --> 00:14:01,656 A:middle
Pressure Change With event.

329
00:14:01,656 --> 00:14:03,406 A:middle
You can interpreter
pressure events yourself.

330
00:14:04,376 --> 00:14:08,286 A:middle
In X v11, we introduced
several new classes.

331
00:14:08,286 --> 00:14:10,106 A:middle
One is pressure configuration
class.

332
00:14:10,526 --> 00:14:12,526 A:middle
You set the pressure
configuration of a view

333
00:14:12,526 --> 00:14:13,746 A:middle
or gesture recognizer

334
00:14:14,026 --> 00:14:16,406 A:middle
to indicate how the
trackpad should react.

335
00:14:16,916 --> 00:14:18,976 A:middle
In general, the haptic
feedback provided

336
00:14:18,976 --> 00:14:20,296 A:middle
to the user will be dependent

337
00:14:20,296 --> 00:14:22,466 A:middle
on the pressure configuration
you specified.

338
00:14:22,976 --> 00:14:26,106 A:middle
We have two other classes,
haptic feedback manager

339
00:14:26,106 --> 00:14:28,416 A:middle
and alignment feedback
filter, allowing you

340
00:14:28,416 --> 00:14:34,896 A:middle
to customize the kind of haptic
feedback you give to the user.

341
00:14:34,896 --> 00:14:38,356 A:middle
Many of you may have
used spring loading.

342
00:14:38,736 --> 00:14:42,026 A:middle
That's when you start a
drag, and when you hover

343
00:14:42,026 --> 00:14:44,656 A:middle
over a destination the
destination opens up for you.

344
00:14:44,816 --> 00:14:46,226 A:middle
You probably use this in Finder.

345
00:14:46,686 --> 00:14:48,876 A:middle
With Force Click, we now have it

346
00:14:48,936 --> 00:14:52,706 A:middle
such that you can also do
spring loading immediately just

347
00:14:52,706 --> 00:14:54,346 A:middle
by force clicking
on the destination.

348
00:14:55,136 --> 00:14:59,536 A:middle
We have a new API for making
spring loading even easier.

349
00:14:59,536 --> 00:15:02,776 A:middle
This is just a simple Boolean
property, spring loaded

350

351
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

352
00:14:59,536 --> 00:15:02,776 A:middle
This is just a simple Boolean
property, spring loaded

353
00:15:02,776 --> 00:15:04,916 A:middle
on NSButton and
NSSegmentedControl,

354
00:15:05,286 --> 00:15:08,416 A:middle
and the action will be sent
on hover or on Force Click.

355
00:15:08,606 --> 00:15:09,586 A:middle
Very straightforward.

356
00:15:09,936 --> 00:15:15,326 A:middle
If this doesn't quite meet your
needs, we have a new protocol,

357
00:15:15,426 --> 00:15:17,336 A:middle
NSSpringLoadingDestination,
which allows you

358
00:15:17,336 --> 00:15:19,526 A:middle
to do spring loading on
arbitrary destinations.

359
00:15:20,036 --> 00:15:24,086 A:middle
For example, the Finder example
would be appropriate for this.

360
00:15:24,276 --> 00:15:26,906 A:middle
Swipe to delete, you're
familiar with this,

361
00:15:26,906 --> 00:15:29,656 A:middle
you saw it yesterday
likely in the keynote

362
00:15:29,956 --> 00:15:33,316 A:middle
and you may be familiar with
it from iOS, you can swipe left

363
00:15:33,316 --> 00:15:37,956 A:middle
or right in a table view such
as the messages list in Mail

364
00:15:38,026 --> 00:15:40,936 A:middle
to mark messages as unread,
or delete them, and so on.

365
00:15:41,236 --> 00:15:43,246 A:middle
We now have API for
this also in El Capitan.

366
00:15:43,826 --> 00:15:44,816 A:middle
It is a delegate method

367
00:15:44,876 --> 00:15:47,056 A:middle
on NSTableView, Row
Actions for Row.

368
00:15:47,556 --> 00:15:50,686 A:middle
You simply return an array
of NSTableView row action,

369
00:15:51,066 --> 00:15:56,796 A:middle
and these instances of the class
simply declares how the items,

370
00:15:56,856 --> 00:15:59,266 A:middle
the row should be drawn
and what should happen

371
00:15:59,266 --> 00:16:01,656 A:middle
when the user selects that
action via this block,

372

373
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

374
00:15:59,266 --> 00:16:01,656 A:middle
when the user selects that
action via this block,

375
00:16:01,746 --> 00:16:04,486 A:middle
this handler block at the end.

376
00:16:04,486 --> 00:16:05,836 A:middle
I sort of breezed
through the topics.

377
00:16:06,236 --> 00:16:09,026 A:middle
There is a talk, Adopting
New Rrackpad Features,

378
00:16:09,026 --> 00:16:11,826 A:middle
Thursday morning at 10:00
a.m. that you can catch

379
00:16:11,826 --> 00:16:14,406 A:middle
that will give you more
detail on these topics.

380
00:16:15,586 --> 00:16:18,176 A:middle
Full screen, you heard
about this yesterday.

381
00:16:18,306 --> 00:16:21,626 A:middle
Full screen enables you to
remove distractions and focus

382
00:16:21,626 --> 00:16:24,216 A:middle
on one task, as you
can see here.

383
00:16:24,486 --> 00:16:28,986 A:middle
Now with split view full screen,
you can focus on one task

384
00:16:29,036 --> 00:16:30,786 A:middle
but possibily bring
in another window.

385
00:16:30,866 --> 00:16:34,026 A:middle
For instance, here you are using
Xcode and you brought up Safari

386
00:16:34,026 --> 00:16:36,686 A:middle
to look at some documentation
or some forums.

387
00:16:36,996 --> 00:16:38,976 A:middle
You can imagine bringing
up messages next to Xcode

388
00:16:38,976 --> 00:16:42,036 A:middle
because you want to chat
with a buddy about a piece

389
00:16:42,036 --> 00:16:42,816 A:middle
of code you're writing.

390
00:16:43,696 --> 00:16:45,986 A:middle
This is called tiling, when
the windows are brought

391
00:16:46,526 --> 00:16:47,536 A:middle
into split view.

392
00:16:48,656 --> 00:16:51,436 A:middle
Tiling is automatic
for many windows.

393
00:16:52,866 --> 00:16:55,156 A:middle
Resizable windows are
automatically eligible

394
00:16:55,156 --> 00:16:55,736 A:middle
for tiling.

395
00:16:55,736 --> 00:16:57,056 A:middle
This means your applications,

396
00:16:57,056 --> 00:16:58,386 A:middle
the windows in your
applications,

397
00:16:58,386 --> 00:17:01,416 A:middle
will automatically be candidates
for being tiled in full screen

398

399
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

400
00:16:58,386 --> 00:17:01,416 A:middle
will automatically be candidates
for being tiled in full screen

401
00:17:01,416 --> 00:17:02,776 A:middle
without any changes
on your part.

402
00:17:03,146 --> 00:17:05,386 A:middle
Whether they're full
screen-capable or not already.

403
00:17:06,086 --> 00:17:09,146 A:middle
However, there is API for opting
windows in and out of tiling,

404
00:17:09,246 --> 00:17:12,146 A:middle
and it's part of this NSWindow
collection behavior options

405
00:17:12,146 --> 00:17:12,896 A:middle
on NSWindow.

406
00:17:13,715 --> 00:17:15,675 A:middle
For instance, you may
have a nonresizable window

407
00:17:15,675 --> 00:17:17,226 A:middle
that you think should
be tillable.

408
00:17:17,695 --> 00:17:19,976 A:middle
You can use the Allowd
Tiling option.

409
00:17:20,126 --> 00:17:22,156 A:middle
Or you have an antisocial window

410
00:17:22,156 --> 00:17:23,586 A:middle
that just doesn't
want to be tiled.

411
00:17:23,695 --> 00:17:25,236 A:middle
You can set Disallows Tiling.

412
00:17:25,415 --> 00:17:28,236 A:middle
I don't know an example
of that, but it is there.

413
00:17:28,636 --> 00:17:31,756 A:middle
These joined full
screen primary settings

414
00:17:31,756 --> 00:17:34,226 A:middle
that we had here
already in X v7.

415
00:17:34,286 --> 00:17:37,086 A:middle
It is important to note that the
full-screen primary is the way

416
00:17:37,086 --> 00:17:41,356 A:middle
that you specify a window
should go into full screen.

417
00:17:41,726 --> 00:17:44,106 A:middle
Note that this is still
very much an opt-in setting

418
00:17:44,706 --> 00:17:47,666 A:middle
because we want you to think
about how your windows behave

419
00:17:47,806 --> 00:17:50,006 A:middle
in the vast screen
space of full screen,

420
00:17:50,346 --> 00:17:53,146 A:middle
so that is still an opt-in
thing where you think

421
00:17:53,146 --> 00:17:55,216 A:middle
about how your window
should act in full screen.

422
00:17:55,216 --> 00:17:59,306 A:middle
That one you still opt into.

423

424
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

425
00:18:00,246 --> 00:18:03,186 A:middle
You can also set these of course
in Xcode's attributes inspector

426
00:18:03,186 --> 00:18:04,866 A:middle
as well, both the tiling

427
00:18:04,866 --> 00:18:07,916 A:middle
and whether a window
becomes full screen or not.

428
00:18:07,916 --> 00:18:10,206 A:middle
I said that tiling is
automatic for many windows,

429
00:18:10,486 --> 00:18:12,216 A:middle
but AppKit does check to see,

430
00:18:12,216 --> 00:18:14,806 A:middle
make sure that windows can
coexist in the same screen.

431
00:18:15,186 --> 00:18:17,016 A:middle
Imagine you have a
relatively small screen

432
00:18:17,016 --> 00:18:20,786 A:middle
and two fairly large windows,
when you try to tile them,

433
00:18:20,856 --> 00:18:23,036 A:middle
if the windows cannot
be resized small enough,

434
00:18:23,036 --> 00:18:24,906 A:middle
AppKit will not allow
them to be tiled.

435
00:18:24,906 --> 00:18:29,236 A:middle
I want you to think about how
your windows can resize small

436
00:18:29,236 --> 00:18:31,876 A:middle
enough, how they can be
flexible enough to fit

437
00:18:31,876 --> 00:18:35,576 A:middle
into the smaller area
of tiled split view.

438
00:18:36,146 --> 00:18:39,086 A:middle
To help achieve this,
we have some APIs.

439
00:18:39,256 --> 00:18:41,846 A:middle
For instance, split view item
now has sidebar behavior,

440
00:18:42,146 --> 00:18:44,766 A:middle
where the sidebar gets
smaller and collapses

441
00:18:44,806 --> 00:18:47,136 A:middle
and can be brought
back up as an overlay,

442
00:18:47,576 --> 00:18:48,986 A:middle
and also has proper vibrancy.

443
00:18:49,816 --> 00:18:53,296 A:middle
NSStackView automatic detaching
of hidden views allows you

444
00:18:53,296 --> 00:18:56,106 A:middle
to create NSToolbar-like
experiences

445
00:18:56,106 --> 00:18:58,396 A:middle
for your custom views
where the items,

446
00:18:58,396 --> 00:19:00,216 A:middle
as they're dropped off the edge,

447

448
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

449
00:18:58,396 --> 00:19:00,216 A:middle
as they're dropped off the edge,

450
00:19:00,346 --> 00:19:03,096 A:middle
can be put into a
menu, and so on.

451
00:19:03,646 --> 00:19:04,446 A:middle
And many more.

452
00:19:04,666 --> 00:19:05,746 A:middle
You can hear about these

453
00:19:05,746 --> 00:19:07,876 A:middle
in Improving the
Full-Screen Window Experience,

454
00:19:07,876 --> 00:19:09,066 A:middle
which is Thursday afternoon.

455
00:19:11,246 --> 00:19:14,626 A:middle
Auto Layout, as you know,
this is very important,

456
00:19:14,626 --> 00:19:16,756 A:middle
we have made some
significant changes,

457
00:19:16,756 --> 00:19:19,616 A:middle
significant improvements
in Auto Layout as well.

458
00:19:19,946 --> 00:19:21,166 A:middle
First is stack view.

459
00:19:22,416 --> 00:19:25,276 A:middle
Stack view is a very
important class.

460
00:19:25,536 --> 00:19:28,356 A:middle
It should be the first-stop
shop for your Auto Layout needs.

461
00:19:28,356 --> 00:19:30,026 A:middle
If you can get done what
you have to get done

462
00:19:30,026 --> 00:19:31,176 A:middle
within a stack view rather

463
00:19:31,176 --> 00:19:33,206 A:middle
than using constraints
directly, do it.

464
00:19:33,206 --> 00:19:36,406 A:middle
It is a high level of
abstraction, very powerful.

465
00:19:36,856 --> 00:19:39,896 A:middle
First good news about stack view
is it is now on iOS as well,

466
00:19:39,896 --> 00:19:43,196 A:middle
as UI stack view, with
equal pretty much APIs.

467
00:19:43,196 --> 00:19:46,196 A:middle
This goes along with
our constant attempt

468
00:19:46,196 --> 00:19:49,096 A:middle
of bringing parity
between our platforms,

469
00:19:49,136 --> 00:19:50,456 A:middle
and this is one of
those examples.

470
00:19:50,846 --> 00:19:52,796 A:middle
Secondly, it is now
even better than ever.

471
00:19:52,836 --> 00:19:55,486 A:middle
I already mentioned the
detaching functionality.

472
00:19:55,936 --> 00:19:58,086 A:middle
There is also new options
for view distribution

473
00:19:58,086 --> 00:19:59,596 A:middle
with this property
called distribution.

474

475
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

476
00:20:01,206 --> 00:20:03,276 A:middle
One value in here
is gravity areas,

477
00:20:03,276 --> 00:20:07,426 A:middle
which is the option you had
in stack view from day one

478
00:20:07,516 --> 00:20:09,386 A:middle
when we introduced it in X v9.

479
00:20:09,386 --> 00:20:11,296 A:middle
We have added other settings,

480
00:20:11,296 --> 00:20:12,606 A:middle
and rather than explaining
these,

481
00:20:12,836 --> 00:20:14,556 A:middle
I will show you a quick video.

482
00:20:14,556 --> 00:20:18,476 A:middle
There are six stack views here
configured with these settings.

483
00:20:18,516 --> 00:20:21,036 A:middle
I will resize the
window, larger,

484
00:20:21,036 --> 00:20:22,526 A:middle
smaller, back larger again.

485
00:20:22,726 --> 00:20:25,286 A:middle
As you can see, you get
some powerful functionality,

486
00:20:25,346 --> 00:20:27,926 A:middle
such as ability to have
equal sizes, equal spacing,

487
00:20:27,926 --> 00:20:30,666 A:middle
and so on that hopefully
will fit your needs.

488
00:20:30,666 --> 00:20:34,346 A:middle
The stack views can be
nested in arbitrary ways

489
00:20:34,416 --> 00:20:36,346 A:middle
to give you powerful layouts.

490
00:20:36,946 --> 00:20:40,146 A:middle
NSLayoutAnchor is a new
class providing a concise

491
00:20:40,366 --> 00:20:42,636 A:middle
representation of an
edge or dimension.

492
00:20:43,046 --> 00:20:44,376 A:middle
Let's say you have
two views and you want

493
00:20:44,376 --> 00:20:45,696 A:middle
to create a constraint
between them.

494
00:20:46,326 --> 00:20:47,866 A:middle
This is code that you would
have had to have write.

495
00:20:48,546 --> 00:20:51,926 A:middle
With layout anchors, here is
the code that you can write.

496
00:20:52,506 --> 00:20:55,426 A:middle
Note that these two items here
are basically layout anchors

497
00:20:55,426 --> 00:20:58,286 A:middle
referring to those
edges of those views,

498
00:20:58,666 --> 00:21:00,776 A:middle
and this is not only
shorter, sweeter,

499

500
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

501
00:20:58,666 --> 00:21:00,776 A:middle
and this is not only
shorter, sweeter,

502
00:21:00,776 --> 00:21:04,026 A:middle
it is also giving you more
compile time type-checking.

503
00:21:04,026 --> 00:21:04,476 A:middle
It is great.

504
00:21:05,516 --> 00:21:10,076 A:middle
[Applause]

505
00:21:10,576 --> 00:21:12,836 A:middle
>> ALI OZER: NSLayoutGuide
is another new class.

506
00:21:12,836 --> 00:21:15,826 A:middle
If you ever find yourself
doing this sort of stuff,

507
00:21:15,886 --> 00:21:20,596 A:middle
creating dummy views to do
things like equal spacing

508
00:21:20,596 --> 00:21:24,126 A:middle
between views, you can now
instead create layout guides.

509
00:21:24,126 --> 00:21:27,256 A:middle
It's a lightweight object that
takes the place of a view,

510
00:21:27,256 --> 00:21:29,826 A:middle
but it is much lighter
weight so it can participate

511
00:21:29,826 --> 00:21:31,806 A:middle
in Auto Layout without
creating views.

512
00:21:33,306 --> 00:21:35,846 A:middle
Collection view has been
with us for a while.

513
00:21:36,306 --> 00:21:39,666 A:middle
As you know, UICollectionView
was also introduced a few

514
00:21:39,766 --> 00:21:41,356 A:middle
releases ago.

515
00:21:41,786 --> 00:21:44,426 A:middle
With X v11, we brought
NSCollectionView to parity

516
00:21:44,426 --> 00:21:47,686 A:middle
with the iOS version while still
maintaining important features

517
00:21:47,686 --> 00:21:50,226 A:middle
for the desktop, such as drag
and drop and bulk selection.

518
00:21:50,816 --> 00:21:53,356 A:middle
So here are some of the features
in the new collection view.

519
00:21:53,816 --> 00:21:56,346 A:middle
Features such as
heterogeneous items,

520
00:21:56,346 --> 00:21:58,386 A:middle
optional grouping,
customizable layout.

521
00:21:58,846 --> 00:22:01,696 A:middle
Let me show you a quick video
of a sample application here.

522

523
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

524
00:21:58,846 --> 00:22:01,696 A:middle
Let me show you a quick video
of a sample application here.

525
00:22:01,696 --> 00:22:03,556 A:middle
There is a bunch of
images being displayed.

526
00:22:03,556 --> 00:22:08,396 A:middle
I will first group by group with
headers and footers and use some

527
00:22:08,396 --> 00:22:10,506 A:middle
of the custom layouts
provided by the app.

528
00:22:11,726 --> 00:22:15,006 A:middle
You see this app in action and
learn about the features and how

529
00:22:15,006 --> 00:22:17,206 A:middle
to apply them in your own
applications in What's New

530
00:22:17,206 --> 00:22:20,216 A:middle
in Collection View, that's
Thursday afternoon at 4:30.

531
00:22:22,436 --> 00:22:23,876 A:middle
We have some great
changes in text.

532
00:22:24,166 --> 00:22:25,936 A:middle
First is the new system UI font.

533
00:22:26,246 --> 00:22:30,456 A:middle
Here is what the new system
font looks like, San Francisco.

534
00:22:30,456 --> 00:22:35,136 A:middle
As you know, it is the same
font on iOS and watchOS as well.

535
00:22:35,826 --> 00:22:39,156 A:middle
This font is automatic
for applications.

536
00:22:39,156 --> 00:22:41,976 A:middle
When you run your application
in X v11 on El Capitan,

537
00:22:41,976 --> 00:22:42,926 A:middle
you will get this font.

538
00:22:43,006 --> 00:22:44,816 A:middle
But it's possible that
you are doing something

539
00:22:44,816 --> 00:22:45,516 A:middle
that prevents this.

540
00:22:46,026 --> 00:22:49,586 A:middle
If you see this font, it
was introduced in X v10,

541
00:22:49,806 --> 00:22:53,596 A:middle
there is something going on,
check it to see what you need

542
00:22:53,596 --> 00:22:55,786 A:middle
to do to make sure you're
using San Francisco.

543
00:22:56,446 --> 00:23:00,356 A:middle
If you're using this font, this
is one we introduced in X v0,

544

545
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

546
00:22:56,446 --> 00:23:00,356 A:middle
If you're using this font, this
is one we introduced in X v0,

547
00:23:00,356 --> 00:23:02,506 A:middle
more of that is going on.

548
00:23:02,976 --> 00:23:05,896 A:middle
Finally, if you're
using this font --

549
00:23:06,066 --> 00:23:08,066 A:middle
[Laughter]

550
00:23:08,116 --> 00:23:09,566 A:middle
>> ALI OZER: You have
a lot of work to do.

551
00:23:09,806 --> 00:23:10,396 A:middle
Hang in there.

552
00:23:11,496 --> 00:23:13,826 A:middle
This was the font we
stopped using in Mac OS 9.

553
00:23:13,826 --> 00:23:18,386 A:middle
Here are the APIs in
NSFont that you can use

554
00:23:18,386 --> 00:23:20,736 A:middle
to make sure you're using
the latest system font,

555
00:23:21,126 --> 00:23:22,846 A:middle
system font of size and so on.

556
00:23:22,846 --> 00:23:25,926 A:middle
These fonts, these
APIs, they have been

557
00:23:25,926 --> 00:23:27,096 A:middle
with us for a long time.

558
00:23:27,676 --> 00:23:32,196 A:middle
You can set the system fonts via
the Xcode attributes inspector.

559
00:23:32,726 --> 00:23:34,776 A:middle
Fairly straightforward
There is a pop-up,

560
00:23:34,826 --> 00:23:36,766 A:middle
you choose the appropriate
system font

561
00:23:36,766 --> 00:23:37,646 A:middle
for your application.

562
00:23:39,456 --> 00:23:41,916 A:middle
We do have new API for a system
font at different weights.

563
00:23:42,476 --> 00:23:45,956 A:middle
If your designers are asking
you to use different weights,

564
00:23:46,416 --> 00:23:49,056 A:middle
you can now do that with a
system font with this API,

565
00:23:49,266 --> 00:23:51,346 A:middle
system font of size and weight.

566
00:23:52,016 --> 00:23:54,656 A:middle
There is nine different
weights predefined,

567
00:23:54,706 --> 00:23:56,406 A:middle
I'm showing you only
three of them,

568
00:23:56,616 --> 00:23:58,026 A:middle
ranging from ultralight
to black.

569
00:23:58,476 --> 00:24:00,626 A:middle
The regular setting is
what you get by default

570

571
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

572
00:23:58,476 --> 00:24:00,626 A:middle
The regular setting is
what you get by default

573
00:24:00,626 --> 00:24:01,806 A:middle
for system font of size.

574
00:24:02,676 --> 00:24:06,916 A:middle
We have another API, mono space
system font of size weight.

575
00:24:07,496 --> 00:24:08,936 A:middle
Let me show you why
you need this.

576
00:24:09,996 --> 00:24:14,286 A:middle
If you call the system font
of size API in an application

577
00:24:14,286 --> 00:24:16,646 A:middle
that is linked against X v11 SDK

578
00:24:16,646 --> 00:24:19,096 A:middle
and you draw some digits,
here is what you see.

579
00:24:19,616 --> 00:24:24,036 A:middle
Those of you with eagle eyes
for fonts may note, wow,

580
00:24:24,126 --> 00:24:26,516 A:middle
those digits are
not fixed pitched,

581
00:24:26,516 --> 00:24:27,476 A:middle
they're different widths.

582
00:24:28,066 --> 00:24:31,076 A:middle
This is shocking because
traditionally system fonts have

583
00:24:31,076 --> 00:24:33,476 A:middle
always had digits that
are the same width.

584
00:24:33,946 --> 00:24:39,466 A:middle
That's to make sure that tabular
data appears organized or UIs

585
00:24:39,466 --> 00:24:43,306 A:middle
with changing numbers
in text doesn't jiggle

586
00:24:43,306 --> 00:24:44,676 A:middle
as the numbers are changing.

587
00:24:45,526 --> 00:24:47,236 A:middle
But now, if your app is linked

588
00:24:47,236 --> 00:24:50,636 A:middle
against X v11 you will get this
system font with the fonts.

589
00:24:50,846 --> 00:24:53,246 A:middle
If you have to have
fixed pitched fonts,

590
00:24:53,366 --> 00:24:56,816 A:middle
that's when you use this
API, this will give up digits

591
00:24:56,896 --> 00:24:59,266 A:middle
that are equal widths.

592
00:24:59,746 --> 00:25:02,776 A:middle
Typographically not as pleasing,
but it will get the job done.

593

594
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

595
00:24:59,746 --> 00:25:02,776 A:middle
Typographically not as pleasing,
but it will get the job done.

596
00:25:03,216 --> 00:25:05,496 A:middle
The changes are drastic.

597
00:25:05,776 --> 00:25:08,796 A:middle
Here is the proportional, and
here is the fixed widths ones.

598
00:25:09,006 --> 00:25:10,086 A:middle
It is a tool for you.

599
00:25:10,716 --> 00:25:13,826 A:middle
You can hear more about
this and more about the APIs

600
00:25:13,826 --> 00:25:15,416 A:middle
in Introducing New System Fonts,

601
00:25:15,416 --> 00:25:18,856 A:middle
which is Friday afternoon
at 2:30.

602
00:25:19,196 --> 00:25:23,136 A:middle
I also mentioned new APIs, there
is new APIs in the tech system.

603
00:25:23,476 --> 00:25:26,916 A:middle
These bring new functionality
and parity with TextKit and iOS,

604
00:25:27,426 --> 00:25:28,556 A:middle
there is a lot of items here.

605
00:25:28,556 --> 00:25:30,736 A:middle
I'm just going to cover
two, three of them.

606
00:25:31,136 --> 00:25:32,526 A:middle
First is exclusion paths.

607
00:25:33,126 --> 00:25:36,276 A:middle
This is the ability to
easily put paths so you can

608
00:25:36,276 --> 00:25:38,736 A:middle
to wrap text around objects
such as this butterfly,

609
00:25:38,796 --> 00:25:41,476 A:middle
it is straightforward.

610
00:25:42,196 --> 00:25:44,926 A:middle
Another one is two properties
on text field: maximum number

611
00:25:44,926 --> 00:25:48,116 A:middle
of lines, which is great
especially with Auto Layout,

612
00:25:48,526 --> 00:25:53,976 A:middle
or allows default tightening
for truncation, which allows you

613
00:25:53,976 --> 00:25:55,466 A:middle
to specify if the contents

614
00:25:55,466 --> 00:25:59,016 A:middle
of the text field should be
tightened before it actually

615
00:25:59,016 --> 00:25:59,716 A:middle
gets truncated.

616
00:25:59,786 --> 00:26:02,546 A:middle
There was a way to control this,
before but now it is controlled

617

618
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

619
00:25:59,786 --> 00:26:02,546 A:middle
There was a way to control this,
before but now it is controlled

620
00:26:02,546 --> 00:26:03,766 A:middle
with this one Boolean property.

621
00:26:05,226 --> 00:26:07,646 A:middle
There are many more changes,
these are some highlights.

622
00:26:07,646 --> 00:26:11,836 A:middle
So last thing I want to talk

623
00:26:11,836 --> 00:26:14,656 A:middle
about in the AppKit
section is visual atomicity.

624
00:26:15,276 --> 00:26:17,676 A:middle
You may wonder, what
is visual atomicity?

625
00:26:18,386 --> 00:26:19,106 A:middle
A mountain?

626
00:26:19,106 --> 00:26:22,316 A:middle
What does it have to
do with Half Dome?

627
00:26:22,346 --> 00:26:25,096 A:middle
I'll show you a short clip
demonstrating what I mean

628
00:26:25,096 --> 00:26:28,426 A:middle
by visual atomicity or
lack of visual atomicity.

629
00:26:28,746 --> 00:26:30,566 A:middle
You see the Open
panel come up twice.

630
00:26:31,406 --> 00:26:33,086 A:middle
First time, okay, not great.

631
00:26:33,776 --> 00:26:41,276 A:middle
Second time, judge for yourself.

632
00:26:42,526 --> 00:26:44,936 A:middle
Unless you blinked, you
saw what I'm talking about.

633
00:26:45,206 --> 00:26:46,726 A:middle
Let's show you in slow motion.

634
00:26:47,226 --> 00:26:49,466 A:middle
Shadow. Parts of the panel.

635
00:26:49,566 --> 00:26:50,356 A:middle
Rest of the panel.

636
00:26:50,796 --> 00:26:53,796 A:middle
This is the Open panel
running in Yosemite.

637
00:26:54,686 --> 00:26:57,136 A:middle
Open panel is a rough
case because it is drawn

638
00:26:57,136 --> 00:27:00,136 A:middle
by multiple processes,
but that's not an excuse.

639

640
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

641
00:26:57,136 --> 00:27:00,136 A:middle
by multiple processes,
but that's not an excuse.

642
00:27:00,456 --> 00:27:03,316 A:middle
A UI like this should
appear to the user as coming

643
00:27:03,316 --> 00:27:05,976 A:middle
up in one step, one
frame, it shouldn't go

644
00:27:05,976 --> 00:27:08,876 A:middle
through a few visual
steps like that.

645
00:27:09,576 --> 00:27:11,236 A:middle
That's what we mean
by visual atomicity,

646
00:27:11,236 --> 00:27:14,436 A:middle
achieving that one
single-step drawing when needed.

647
00:27:15,256 --> 00:27:18,796 A:middle
Those of you who had to
[undecipherable] windows, views,

648
00:27:19,086 --> 00:27:21,626 A:middle
also Core Animation
layers explicitly,

649
00:27:21,626 --> 00:27:24,176 A:middle
you know that achieving
visual atomicity is not always

650
00:27:24,176 --> 00:27:25,076 A:middle
that straightforward.

651
00:27:26,546 --> 00:27:28,766 A:middle
There are a number of APIs,
you don't have to read

652
00:27:28,766 --> 00:27:30,216 A:middle
through the list,
there is no quiz.

653
00:27:30,676 --> 00:27:32,896 A:middle
There are a number of
APIs that do the job,

654
00:27:32,956 --> 00:27:36,366 A:middle
but they don't necessarily
work well together.

655
00:27:36,366 --> 00:27:41,636 A:middle
In X v11, we fixed it up so that
you can achieve visual atomicity

656
00:27:41,636 --> 00:27:42,966 A:middle
with NSAnimationContext.

657
00:27:44,786 --> 00:27:47,856 A:middle
You can call Begin Grouping or
End Grouping or its equivalent,

658
00:27:47,856 --> 00:27:50,146 A:middle
Run Animation Group,
around a bunch

659
00:27:50,146 --> 00:27:53,506 A:middle
of independent drawing you're
doing, such as you see here.

660
00:27:53,566 --> 00:27:56,946 A:middle
This should give you
visual atomicity.

661
00:27:56,946 --> 00:28:00,876 A:middle
Beyond this, we discourage the
use of Disable Screen Updates

662

663
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

664
00:27:56,946 --> 00:28:00,876 A:middle
Beyond this, we discourage the
use of Disable Screen Updates

665
00:28:00,876 --> 00:28:01,946 A:middle
and Enable Screen Updates

666
00:28:01,946 --> 00:28:04,046 A:middle
and Disable Screen
Updates until Flush.

667
00:28:04,486 --> 00:28:07,506 A:middle
They're not deprecated, but
they are not recommended anymore

668
00:28:07,816 --> 00:28:12,956 A:middle
and should not be necessary.

669
00:28:12,956 --> 00:28:15,376 A:middle
With that, we can
move on to Foundation.

670
00:28:15,996 --> 00:28:18,286 A:middle
There is a lot of things to talk
about in Foundation as well.

671
00:28:19,696 --> 00:28:20,876 A:middle
First one is undo manager.

672
00:28:21,846 --> 00:28:25,636 A:middle
Those of you who used undo
manager from Swift know

673
00:28:25,636 --> 00:28:28,506 A:middle
that undo manager APIs is
not a perfect fit in Swift.

674
00:28:29,216 --> 00:28:30,666 A:middle
This is what the APIs look like.

675
00:28:30,966 --> 00:28:34,506 A:middle
The first has a selector, and
it only works in some cases.

676
00:28:34,506 --> 00:28:36,166 A:middle
The second one has
an indication.

677
00:28:36,546 --> 00:28:39,646 A:middle
NSIndication in Objective-C
is of course awesome,

678
00:28:39,886 --> 00:28:42,976 A:middle
but it doesn't know about all
of the fancier types in Swift.

679
00:28:43,576 --> 00:28:45,966 A:middle
So we're adding block-based
undo.

680
00:28:46,926 --> 00:28:48,666 A:middle
This is how it looks
in Objective-C,

681
00:28:48,666 --> 00:28:50,086 A:middle
and this is how it
looks in Swift.

682
00:28:50,586 --> 00:28:52,626 A:middle
As you will see, there
is a target argument

683
00:28:52,916 --> 00:28:55,196 A:middle
and also a block, which
is basically the code

684
00:28:55,196 --> 00:28:57,946 A:middle
to be executed to undo
the action you just did.

685
00:28:59,126 --> 00:29:01,836 A:middle
Separate argument for the
target means you don't have

686

687
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

688
00:28:59,126 --> 00:29:01,836 A:middle
Separate argument for the
target means you don't have

689
00:29:01,886 --> 00:29:03,526 A:middle
to reference the
target in the block,

690
00:29:03,526 --> 00:29:05,236 A:middle
which avoids retain cycles.

691
00:29:05,706 --> 00:29:07,486 A:middle
And there is also a
use of generic type

692
00:29:07,486 --> 00:29:09,616 A:middle
in the Swift declaration, and
I'll tell you how it works.

693
00:29:10,296 --> 00:29:11,286 A:middle
Here is an example.

694
00:29:11,626 --> 00:29:13,146 A:middle
You have a class
named Colorful Shape,

695
00:29:13,726 --> 00:29:15,346 A:middle
it's got a property named Color,

696
00:29:17,106 --> 00:29:20,066 A:middle
we add a Did Set property
observer to this property.

697
00:29:20,426 --> 00:29:23,376 A:middle
This is just one of the ways
you can do undo, you can undo

698
00:29:23,376 --> 00:29:24,926 A:middle
in other ways as well,
but here we're doing it

699
00:29:24,926 --> 00:29:26,066 A:middle
in the Did Set property.

700
00:29:26,066 --> 00:29:28,626 A:middle
This is the call to
register undo with target,

701
00:29:29,386 --> 00:29:32,756 A:middle
and here is actually the code to
be executed to undo the action

702
00:29:32,826 --> 00:29:33,616 A:middle
that I might be doing.

703
00:29:34,476 --> 00:29:38,696 A:middle
Note that thanks to the use of
generics in the register undo

704
00:29:38,696 --> 00:29:41,496 A:middle
at target, this all works

705
00:29:41,546 --> 00:29:43,676 A:middle
and the target is
automatically recognized

706
00:29:43,676 --> 00:29:46,316 A:middle
as a colorful shape thanks to
the reference to self there

707
00:29:46,316 --> 00:29:48,136 A:middle
in the register undo column.

708
00:29:48,136 --> 00:29:52,066 A:middle
You don't have to cast the
target to colorful shape.

709
00:29:53,036 --> 00:29:55,156 A:middle
NSCoder now has error handling.

710
00:29:55,656 --> 00:29:58,756 A:middle
Those of you who have used
NSCoders like NSKeyedArchiver

711
00:29:58,756 --> 00:30:02,946 A:middle
or so on, you know there is no
error arguments to those things.

712

713
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

714
00:29:58,756 --> 00:30:02,946 A:middle
or so on, you know there is no
error arguments to those things.

715
00:30:02,946 --> 00:30:04,646 A:middle
We have added explicit
error handling.

716
00:30:05,406 --> 00:30:08,456 A:middle
Methods such as these, Decode
Object for Key and Decode Object

717
00:30:08,726 --> 00:30:11,186 A:middle
of Classes for Key,
now have versions

718
00:30:11,186 --> 00:30:13,836 A:middle
that actually return errors,
throw errors in Swift.

719
00:30:14,276 --> 00:30:16,476 A:middle
They're named Decode
Top Level Object for Key

720
00:30:16,476 --> 00:30:18,486 A:middle
and Decode Top Level
Object of Classes for Key.

721
00:30:18,886 --> 00:30:21,876 A:middle
Note that they have
throws declaration,

722
00:30:21,876 --> 00:30:23,296 A:middle
which means that
they return an error.

723
00:30:23,636 --> 00:30:25,976 A:middle
And note that they
return an optional object

724
00:30:26,006 --> 00:30:29,056 A:middle
because a nil return is actually
a valid return out of these,

725
00:30:29,056 --> 00:30:31,396 A:middle
it just indicates that the
object was not in the archive.

726
00:30:33,216 --> 00:30:36,176 A:middle
Note that these are named
Decode Top Level Object for Key,

727
00:30:36,176 --> 00:30:39,356 A:middle
and we intend for this to
be used at the top levels

728
00:30:39,356 --> 00:30:41,216 A:middle
when you're unarchiving
your root objects.

729
00:30:41,496 --> 00:30:44,366 A:middle
We don't intend these to be
called in your implementations

730
00:30:44,366 --> 00:30:45,276 A:middle
of [unintelligible] coder.

731
00:30:46,726 --> 00:30:48,666 A:middle
Also note that these are not
the only the two methods we have

732
00:30:48,666 --> 00:30:51,026 A:middle
here; we have another two or
three to go along with all

733
00:30:51,026 --> 00:30:55,526 A:middle
of the decode object type
methods we have currently.

734
00:30:56,176 --> 00:30:59,666 A:middle
NSError now has a value
provider, let me model this.

735

736
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

737
00:31:00,256 --> 00:31:04,486 A:middle
This is a simple way you may
be creating an NSError object.

738
00:31:04,486 --> 00:31:06,696 A:middle
It's pretty simple,
straightforward, however,

739
00:31:06,696 --> 00:31:08,226 A:middle
note that it's not
user presentable.

740
00:31:08,576 --> 00:31:10,506 A:middle
If this were ever to
be shown to the user,

741
00:31:10,506 --> 00:31:11,596 A:middle
this is what they'll see.

742
00:31:12,176 --> 00:31:16,286 A:middle
Not good. This is really what
you would like them to see

743
00:31:16,286 --> 00:31:17,966 A:middle
if this was ever
presented to the user.

744
00:31:18,246 --> 00:31:20,466 A:middle
Even if you don't ever present
this to the user, you know,

745
00:31:20,466 --> 00:31:22,576 A:middle
in the debugger something like
this would be helpful too,

746
00:31:22,576 --> 00:31:24,326 A:middle
as opposed to getting error 42.

747
00:31:25,266 --> 00:31:28,366 A:middle
So the code that you write
for this looks like this.

748
00:31:29,386 --> 00:31:33,536 A:middle
So you specify the values for
various keys, and if you want it

749
00:31:33,536 --> 00:31:36,246 A:middle
to be user presentable you
would also localize them.

750
00:31:36,856 --> 00:31:38,396 A:middle
So you know, it is
a bunch of code,

751
00:31:38,926 --> 00:31:40,996 A:middle
you can create methods
here forever.

752
00:31:41,186 --> 00:31:44,206 A:middle
The code isn't the problem,
writing code, it is our job,

753
00:31:44,206 --> 00:31:46,296 A:middle
right, we're paid for it,
that's not the problem.

754
00:31:46,616 --> 00:31:48,896 A:middle
The problem is that all this
is happening at the time

755
00:31:48,896 --> 00:31:51,956 A:middle
that errors are being
created even if the consumer

756
00:31:51,956 --> 00:31:53,746 A:middle
of the error does
nothing with the error.

757
00:31:53,746 --> 00:31:55,806 A:middle
So it is, performance-wise,
wasteful.

758
00:31:56,436 --> 00:31:58,796 A:middle
So we've added this
ability to create

759
00:31:58,796 --> 00:32:01,076 A:middle
and return desired
values on demand.

760

761
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

762
00:31:58,796 --> 00:32:01,076 A:middle
and return desired
values on demand.

763
00:32:02,296 --> 00:32:05,646 A:middle
We have this method, set
user info value provider

764
00:32:05,646 --> 00:32:07,236 A:middle
for domain provider.

765
00:32:07,476 --> 00:32:11,186 A:middle
You basically specify a
domain you created for NSError

766
00:32:11,186 --> 00:32:13,966 A:middle
in your application and provide
a provider, which is a block

767
00:32:13,966 --> 00:32:17,206 A:middle
that returns values
for any keys missing

768
00:32:17,206 --> 00:32:18,296 A:middle
in the user info dictionary.

769
00:32:18,296 --> 00:32:20,256 A:middle
So it will be invoked
on demand lazily.

770
00:32:20,586 --> 00:32:24,206 A:middle
You can go back to using this
nice, shortened piece of code

771
00:32:24,206 --> 00:32:28,086 A:middle
for generating errors, and
the user information will be

772
00:32:29,036 --> 00:32:31,036 A:middle
filled dynamically.

773
00:32:31,096 --> 00:32:32,806 A:middle
You may be familiar
with NSProgress.

774
00:32:32,966 --> 00:32:35,276 A:middle
It is an object for
reporting progress

775
00:32:35,276 --> 00:32:36,716 A:middle
and it has a great feature

776
00:32:36,716 --> 00:32:41,736 A:middle
where it will implicitly compose
progress from across a hierarchy

777
00:32:41,736 --> 00:32:43,616 A:middle
of operations and
it will present

778
00:32:43,616 --> 00:32:45,656 A:middle
that to the user as
one single number.

779
00:32:46,126 --> 00:32:47,976 A:middle
It is pretty good,
but it is implicit.

780
00:32:48,676 --> 00:32:52,196 A:middle
As being implicit,
it has some issues

781
00:32:52,196 --> 00:32:53,196 A:middle
that you may have run into.

782
00:32:53,546 --> 00:32:55,616 A:middle
We're introducing
an explicit mode

783
00:32:55,616 --> 00:32:57,106 A:middle
for managing progress reporting.

784
00:32:57,766 --> 00:33:00,436 A:middle
This has two pieces:
one is APIs to add

785

786
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

787
00:32:57,766 --> 00:33:00,436 A:middle
This has two pieces:
one is APIs to add

788
00:33:00,436 --> 00:33:03,456 A:middle
and remove child progress
objects directly to a hierarchy

789
00:33:03,456 --> 00:33:06,486 A:middle
of progress objects and
the second is this protocol

790
00:33:06,486 --> 00:33:09,426 A:middle
which lets you declare the
progress on an object directly.

791
00:33:09,866 --> 00:33:12,086 A:middle
For instance, if you have
a subclass of NSOperation,

792
00:33:12,086 --> 00:33:16,466 A:middle
which does some one-shot
operation, you know, it starts

793
00:33:16,466 --> 00:33:19,526 A:middle
and ends, it is a good candidate
for this progress property.

794
00:33:19,846 --> 00:33:23,266 A:middle
It allows it to opt in to
explicit progress reporting.

795
00:33:24,426 --> 00:33:27,056 A:middle
NSProgress now also has
the ability to resume.

796
00:33:27,436 --> 00:33:30,476 A:middle
It had the ability to pause,
we have added the second part.

797
00:33:32,066 --> 00:33:34,876 A:middle
NSNotificationCenter
now has the ability

798
00:33:34,876 --> 00:33:37,466 A:middle
to automatically unregister
the allocated observers.

799
00:33:39,516 --> 00:33:43,176 A:middle
[Applause]

800
00:33:43,676 --> 00:33:45,056 A:middle
>> ALI OZER: Here is the kind
of code you would have had

801
00:33:45,056 --> 00:33:47,476 A:middle
to have write to add
yourself as an observer,

802
00:33:47,476 --> 00:33:48,406 A:middle
and here is the code you write

803
00:33:48,406 --> 00:33:49,686 A:middle
to remove yourself
as an observer.

804
00:33:49,946 --> 00:33:51,546 A:middle
You can call this
code if you want

805
00:33:51,546 --> 00:33:53,356 A:middle
to remove yourself
as an observer.

806
00:33:53,876 --> 00:33:57,286 A:middle
If you don't, and freed, you'll
automatically be unregistered.

807
00:33:57,356 --> 00:33:59,316 A:middle
That's pretty great.

808

809
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

810
00:34:01,406 --> 00:34:05,966 A:middle
So here is the class whose name
Toby did not dare say yesterday

811
00:34:05,966 --> 00:34:09,576 A:middle
in the State of the Union,
NSFirstNameComponentsFormatter.

812
00:34:09,996 --> 00:34:13,106 A:middle
The rule is, if it is not
long enough to be wrapped

813
00:34:13,106 --> 00:34:15,085 A:middle
on a slide title,
it is not too long.

814
00:34:15,246 --> 00:34:17,306 A:middle
So,
NSFirstNameComponentsFomatter.

815
00:34:18,146 --> 00:34:20,666 A:middle
It allows proper localized
formatting of names.

816
00:34:20,936 --> 00:34:23,616 A:middle
This joins other
formatters we have added

817
00:34:23,616 --> 00:34:26,656 A:middle
over the last few years such
as date components formatter,

818
00:34:27,045 --> 00:34:29,356 A:middle
byte count formatter,
length formatter, and so on.

819
00:34:30,606 --> 00:34:34,196 A:middle
It also provides styles for
a number of different forms.

820
00:34:34,346 --> 00:34:35,815 A:middle
Let me give you a quick example.

821
00:34:36,306 --> 00:34:39,666 A:middle
You create a person named
Components Object, it has parts

822
00:34:39,666 --> 00:34:42,295 A:middle
of name, you specify the
parts of name you have,

823
00:34:42,466 --> 00:34:44,976 A:middle
there is many more, let's say
here we're specifying three

824
00:34:44,976 --> 00:34:45,235 A:middle
of them.

825
00:34:46,726 --> 00:34:49,376 A:middle
Then you create a person in
componenst formatter and ask

826
00:34:49,376 --> 00:34:50,606 A:middle
for it to be formatted.

827
00:34:51,196 --> 00:34:54,226 A:middle
Depending on the kind
of style that you give,

828
00:34:54,226 --> 00:34:56,436 A:middle
you get different forms
of the name, like long,

829
00:34:56,466 --> 00:34:58,286 A:middle
default, short, and so on.

830
00:34:58,696 --> 00:35:01,856 A:middle
Note that if you ask for short,
but in some other language,

831

832
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

833
00:34:58,696 --> 00:35:01,856 A:middle
Note that if you ask for short,
but in some other language,

834
00:35:01,856 --> 00:35:05,576 A:middle
you may get a totally different
form of the name depending

835
00:35:05,576 --> 00:35:07,426 A:middle
on rules of localization
for that language.

836
00:35:07,426 --> 00:35:09,146 A:middle
Don't make assumptions
about the kind

837
00:35:09,146 --> 00:35:11,126 A:middle
of names you will get
back from this API.

838
00:35:11,916 --> 00:35:14,256 A:middle
The purpose of this API,
one of the main purposes is

839
00:35:14,256 --> 00:35:16,276 A:middle
to isolate you from complexities

840
00:35:16,276 --> 00:35:18,336 A:middle
of writing world-ready
applications.

841
00:35:19,316 --> 00:35:22,516 A:middle
NSString has new APIs to
help you write world-ready

842
00:35:22,516 --> 00:35:24,196 A:middle
internationalizable
applications.

843
00:35:24,636 --> 00:35:27,486 A:middle
There is facility for
conditional quotation,

844
00:35:27,776 --> 00:35:31,556 A:middle
whether a technical term, for
instance, should be surrounded

845
00:35:31,816 --> 00:35:34,406 A:middle
by quotes, for which rules
change in different languages.

846
00:35:34,766 --> 00:35:37,236 A:middle
Simpler localized case
changing and searching APIs,

847
00:35:38,106 --> 00:35:41,306 A:middle
transliteration APIs, which
previously were in CFString,

848
00:35:41,306 --> 00:35:44,296 A:middle
now they're in NSString,
and also facilities

849
00:35:44,296 --> 00:35:47,276 A:middle
for adaptive strings
for UI presentation.

850
00:35:47,606 --> 00:35:51,406 A:middle
You can provide multiple forms,
multiple lengths of the string

851
00:35:51,406 --> 00:35:54,716 A:middle
in your strings files and have
the right one chosen depending

852
00:35:54,716 --> 00:35:58,026 A:middle
on how much space you have
in your UI to display it.

853
00:35:58,136 --> 00:36:00,936 A:middle
You can hear about the person
name components formatter

854

855
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

856
00:35:58,136 --> 00:36:00,936 A:middle
You can hear about the person
name components formatter

857
00:36:01,286 --> 00:36:03,836 A:middle
and all of these facilities
and more in What's New

858
00:36:03,836 --> 00:36:05,736 A:middle
in Internationalization,
which is Friday morning

859
00:36:05,736 --> 00:36:10,066 A:middle
at 9:00 a.m. Let me talk
about thermal state.

860
00:36:10,066 --> 00:36:15,156 A:middle
These are APIs introduced in X
v10.3, which was the same time

861
00:36:15,156 --> 00:36:18,146 A:middle
as our sexy new MacBook
which, of course,

862
00:36:18,146 --> 00:36:20,286 A:middle
as you may know doesn't
have any fans

863
00:36:20,396 --> 00:36:23,256 A:middle
and in fact is a good
case study for this API.

864
00:36:23,896 --> 00:36:27,646 A:middle
Note that although this API was
introduced at the same time,

865
00:36:27,866 --> 00:36:30,816 A:middle
it works on our other machines

866
00:36:30,816 --> 00:36:32,396 A:middle
and is generally
available and functional.

867
00:36:32,396 --> 00:36:33,936 A:middle
It's not just for
the MacBook only.

868
00:36:34,806 --> 00:36:37,896 A:middle
This API is captured
with a property,

869
00:36:37,896 --> 00:36:40,026 A:middle
a thermal state property
on NSProcessInfo.

870
00:36:40,456 --> 00:36:43,196 A:middle
It has four values: nominal,
fair, serious, critical.

871
00:36:43,586 --> 00:36:46,836 A:middle
There is a notification you can
get whenever the value changes.

872
00:36:48,496 --> 00:36:51,476 A:middle
Note that serious, that's
when the fans are going

873
00:36:51,476 --> 00:36:53,796 A:middle
at maximum speed if
your machine had fans,

874
00:36:54,246 --> 00:36:56,876 A:middle
imagine what's happening
if you don't have fans.

875
00:36:57,196 --> 00:36:59,586 A:middle
Serious is typically when
you want to take some action.

876
00:36:59,586 --> 00:37:02,376 A:middle
For instance, let's say
you're doing custom animation

877

878
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

879
00:36:59,586 --> 00:37:02,376 A:middle
For instance, let's say
you're doing custom animation

880
00:37:03,386 --> 00:37:05,306 A:middle
at 60 FIPS, this a time to think

881
00:37:05,306 --> 00:37:07,346 A:middle
about reducing your
animation to 30 FIPS.

882
00:37:07,846 --> 00:37:11,056 A:middle
That's what NSScrollView
will do for you automatically

883
00:37:11,056 --> 00:37:12,856 A:middle
so you don't have to worry
about NSScrollView case.

884
00:37:13,196 --> 00:37:15,156 A:middle
Let's say you're using
high-quality textures

885
00:37:15,156 --> 00:37:17,696 A:middle
in the application and you
get a serious thermal state,

886
00:37:18,176 --> 00:37:21,116 A:middle
time to drop to maybe
lower-quality textures.

887
00:37:22,166 --> 00:37:25,296 A:middle
This API is great for cases when
you need it, but it is important

888
00:37:25,296 --> 00:37:28,726 A:middle
to note that this API is
reactive and not proactive.

889
00:37:28,726 --> 00:37:32,046 A:middle
It is the kind of API where the
system calls you to tell you

890
00:37:32,046 --> 00:37:35,146 A:middle
of trouble and you have to
take action, and, of course,

891
00:37:35,146 --> 00:37:36,966 A:middle
the action you take
is not adding more

892
00:37:36,966 --> 00:37:38,056 A:middle
to the load on the system.

893
00:37:38,696 --> 00:37:40,956 A:middle
We have a lot of other
APIs which are proactive

894
00:37:40,956 --> 00:37:43,666 A:middle
that we have introduced
over the last few releases.

895
00:37:44,386 --> 00:37:46,976 A:middle
These are the kind of APIs
where you tell the system

896
00:37:46,976 --> 00:37:51,756 A:middle
about what you're doing, and the
system optimizes your activities

897
00:37:51,756 --> 00:37:55,666 A:middle
and tasks based on whatever
happens to be going on.

898
00:37:56,046 --> 00:37:58,046 A:middle
For instance, tolerance
on timers,

899
00:37:58,396 --> 00:38:01,936 A:middle
process info activity
APIs, doing downloads

900

901
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

902
00:37:58,396 --> 00:38:01,936 A:middle
process info activity
APIs, doing downloads

903
00:38:01,936 --> 00:38:03,786 A:middle
in the background
with NSURLSession,

904
00:38:03,846 --> 00:38:06,526 A:middle
setting quality service, so on.

905
00:38:07,476 --> 00:38:10,826 A:middle
These APIs allow not only
energy efficient behavior,

906
00:38:10,826 --> 00:38:13,156 A:middle
but they also enable
proper thermal behavior.

907
00:38:13,156 --> 00:38:17,496 A:middle
They enable longer battery
life and make your system coo,

908
00:38:17,856 --> 00:38:19,826 A:middle
figuratively and
literally as well.

909
00:38:22,386 --> 00:38:26,326 A:middle
Last, core data, quick mention
here since I'm short on time.

910
00:38:26,696 --> 00:38:29,136 A:middle
A lot of great features in
core data, unique constraints

911
00:38:29,136 --> 00:38:31,796 A:middle
and batch deletion and many
other API enhancements,

912
00:38:32,046 --> 00:38:33,106 A:middle
that's all I'll say.

913
00:38:34,176 --> 00:38:35,746 A:middle
Of course, it wouldn't
be a what's new talk

914
00:38:35,746 --> 00:38:38,106 A:middle
if I don't leave a lot
of things on the floor.

915
00:38:38,436 --> 00:38:40,646 A:middle
These are many other topics
I just didn't get around to,

916
00:38:40,646 --> 00:38:42,746 A:middle
you can read about them
hopefully in the release notes.

917
00:38:43,176 --> 00:38:45,656 A:middle
This is not even including
amazing new technologies

918
00:38:45,716 --> 00:38:48,086 A:middle
such as Metal or
GameplayKit as well.

919
00:38:48,686 --> 00:38:53,366 A:middle
In summary, we have a lot
of general API improvements

920
00:38:53,366 --> 00:38:55,246 A:middle
across the board
for Swiftification.

921
00:38:55,246 --> 00:38:57,956 A:middle
In addition, we have a lot of
great features and enhancements.

922
00:38:58,666 --> 00:39:03,466 A:middle
Look at the material, think
about how to adopt them,

923

924
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

925
00:38:58,666 --> 00:39:03,466 A:middle
Look at the material, think
about how to adopt them,

926
00:39:03,466 --> 00:39:07,266 A:middle
and come see us at the labs
if you have any questions.

927
00:39:07,736 --> 00:39:10,426 A:middle
For more information,
here are the pointers.

928
00:39:10,806 --> 00:39:13,006 A:middle
The AppKit and Foundation
release notes are available

929
00:39:13,006 --> 00:39:16,176 A:middle
at developer.apple.com.osx.

930
00:39:16,236 --> 00:39:19,516 A:middle
The release notes are for the
seed, so it's a good source.

931
00:39:20,086 --> 00:39:21,506 A:middle
Thank you for joining me today.

932
00:39:21,506 --> 00:39:22,856 A:middle
Have a great rest
of the conference.

933
00:39:23,516 --> 00:39:28,500 A:middle
[Applause]

934
