X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:26,516 --> 00:00:33,406 A:middle
[Applause]

2
00:00:33,906 --> 00:00:34,676 A:middle
>> LUKE HIESTERMAN:
Hello, everyone.

3
00:00:35,226 --> 00:00:38,716 A:middle
Thank you so much for coming
to Cocoa Touch best practices.

4
00:00:39,386 --> 00:00:42,246 A:middle
I am Luke Hiesterman, an
engineer on the UIKit team,

5
00:00:42,646 --> 00:00:44,736 A:middle
and it will be my
pleasure to walk you

6
00:00:44,796 --> 00:00:48,946 A:middle
through today a collection of
pieces of wisdom, practical bits

7
00:00:48,946 --> 00:00:52,086 A:middle
of advice that you can apply
directly to the applications

8
00:00:52,376 --> 00:00:54,766 A:middle
that you are writing
today and into the future.

9
00:00:54,766 --> 00:00:59,736 A:middle
So I am going to do this by
walking across a collection

10
00:00:59,826 --> 00:01:02,686 A:middle
of topics that will
be of strong interest

11

12
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

13
00:00:59,826 --> 00:01:02,686 A:middle
of topics that will
be of strong interest

14
00:01:02,686 --> 00:01:07,086 A:middle
to any Cocoa Touch application,
and in each of these topics,

15
00:01:07,086 --> 00:01:10,186 A:middle
I will have sort of a series
of best practice tips to give

16
00:01:10,186 --> 00:01:16,896 A:middle
to you, and those topics are
app life cycle, number one;

17
00:01:17,716 --> 00:01:22,736 A:middle
views and view controllers;
Auto Layout; and finally,

18
00:01:23,136 --> 00:01:24,556 A:middle
table and collection views.

19
00:01:25,256 --> 00:01:27,406 A:middle
Now, as I go across
these topics,

20
00:01:27,856 --> 00:01:31,066 A:middle
I am going to have a series
of goals that I want to impart

21
00:01:31,066 --> 00:01:35,176 A:middle
to you with each of the bits
of wisdom that I am giving

22
00:01:35,586 --> 00:01:37,946 A:middle
because everything is sort

23
00:01:37,946 --> 00:01:41,196 A:middle
of corralled towards
accomplishing a few basic ideas

24
00:01:41,296 --> 00:01:43,326 A:middle
that you definitely want
to have in your app.

25
00:01:43,326 --> 00:01:45,216 A:middle
So you know, number one
is going to be you want

26
00:01:45,216 --> 00:01:46,326 A:middle
to have peak performance.

27
00:01:46,696 --> 00:01:48,486 A:middle
Your apps want to
be silky smooth,

28
00:01:48,716 --> 00:01:50,646 A:middle
so you look like
rock star developers

29
00:01:50,646 --> 00:01:53,496 A:middle
and everybody loves you.

30
00:01:53,736 --> 00:01:56,716 A:middle
You also want to have a
top-notch user experience

31
00:01:56,716 --> 00:01:57,226 A:middle
in your app.

32
00:01:57,736 --> 00:01:59,246 A:middle
That way everybody thinks

33
00:01:59,246 --> 00:02:01,176 A:middle
that your app looks
polished and it's awesome.

34

35
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

36
00:01:59,246 --> 00:02:01,176 A:middle
that your app looks
polished and it's awesome.

37
00:02:01,966 --> 00:02:05,436 A:middle
And finally, you want to
write your code in such a way

38
00:02:05,436 --> 00:02:07,856 A:middle
that it's as future-proof
as possible so that

39
00:02:07,856 --> 00:02:10,666 A:middle
as future versions of iOS
come out, you're writing

40
00:02:10,666 --> 00:02:14,446 A:middle
as little code as possible to
adapt to those revisions of iOS.

41
00:02:15,256 --> 00:02:16,886 A:middle
So those are the goals we
are going to have in mind

42
00:02:16,886 --> 00:02:17,996 A:middle
as we go through these topics.

43
00:02:18,426 --> 00:02:21,156 A:middle
And I will start off by
talking about app life cycle.

44
00:02:22,116 --> 00:02:26,756 A:middle
The very first best practice
I want to impart upon you has

45
00:02:26,806 --> 00:02:29,816 A:middle
to do with the very first
experience that the user has

46
00:02:29,816 --> 00:02:31,706 A:middle
with your app, and
that's launching it.

47
00:02:32,136 --> 00:02:35,766 A:middle
So the first best
practice is launch quickly.

48
00:02:36,676 --> 00:02:40,086 A:middle
That's how you appear responsive
when the user taps on your icon

49
00:02:40,136 --> 00:02:43,136 A:middle
and right away they get your
app ready to interact with.

50
00:02:43,316 --> 00:02:45,676 A:middle
And the way that you launch
quickly is extremely simple.

51
00:02:46,066 --> 00:02:49,576 A:middle
It's return quickly from the
Application Did Finish Launching

52
00:02:49,906 --> 00:02:51,286 A:middle
UI application delegate event.

53
00:02:52,266 --> 00:02:54,816 A:middle
That in itself is really simple.

54
00:02:54,816 --> 00:02:56,336 A:middle
I am sure you all
already know how to do it.

55
00:02:57,866 --> 00:03:00,596 A:middle
Take all the long-running work
you might have to do to set

56

57
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

58
00:02:57,866 --> 00:03:00,596 A:middle
Take all the long-running work
you might have to do to set

59
00:03:00,596 --> 00:03:02,436 A:middle
up an application
and defer that out

60
00:03:02,576 --> 00:03:05,066 A:middle
of Application Did Finish
Launching because you want

61
00:03:05,066 --> 00:03:07,566 A:middle
to return as fast as possible
doing the minimum amount

62
00:03:07,566 --> 00:03:10,576 A:middle
of work, set up a
basic UI for your users

63
00:03:10,576 --> 00:03:12,366 A:middle
to interact with, and return.

64
00:03:12,526 --> 00:03:15,516 A:middle
So if you are loading data,
whatever you need to do,

65
00:03:15,516 --> 00:03:17,886 A:middle
from a database,
network, defer that out

66
00:03:17,886 --> 00:03:19,356 A:middle
of Application Did
Finish Launching.

67
00:03:20,016 --> 00:03:24,106 A:middle
If you take too much time, of
course, your app will be killed

68
00:03:24,106 --> 00:03:25,956 A:middle
because it just looks like
it's hung to the system,

69
00:03:26,256 --> 00:03:29,926 A:middle
so you really want to return
as fast as possible from that.

70
00:03:30,266 --> 00:03:33,636 A:middle
Now, being a superresponsive
app doesn't end

71
00:03:33,636 --> 00:03:35,016 A:middle
at application launch.

72
00:03:35,276 --> 00:03:36,326 A:middle
We want to think beyond that.

73
00:03:36,326 --> 00:03:38,376 A:middle
We want to be superresponsive
all the time.

74
00:03:39,276 --> 00:03:42,266 A:middle
So I want to delve deeper into
this technique of what it means

75
00:03:42,266 --> 00:03:45,836 A:middle
to be responsive in general
so we can build a technique

76
00:03:45,836 --> 00:03:47,716 A:middle
that works not just
at app launch

77
00:03:47,746 --> 00:03:50,476 A:middle
but throughout the
life cycle of your app.

78
00:03:50,476 --> 00:03:53,006 A:middle
So even though I just talked
about deferring all of this work

79
00:03:53,006 --> 00:03:54,726 A:middle
out of Application
Did Finish Launching,

80
00:03:55,606 --> 00:03:56,376 A:middle
what we are really getting

81
00:03:56,376 --> 00:03:59,296 A:middle
at for a best practice
isn't just about asynchrony.

82

83
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

84
00:04:00,046 --> 00:04:03,016 A:middle
It's actually about taking
long-running work and putting

85
00:04:03,016 --> 00:04:04,536 A:middle
that on background queues.

86
00:04:04,916 --> 00:04:07,026 A:middle
If you need to load
data from a database,

87
00:04:07,026 --> 00:04:08,026 A:middle
if you are hitting the network,

88
00:04:08,386 --> 00:04:10,416 A:middle
that's work that can be
done in the background.

89
00:04:10,926 --> 00:04:13,206 A:middle
So if we revisit Application
Did Finish Launching

90
00:04:13,206 --> 00:04:16,315 A:middle
and we have this sort
of very simple approach

91
00:04:16,315 --> 00:04:20,396 A:middle
to a naive Application Did
Finish Launching, you know,

92
00:04:20,396 --> 00:04:22,686 A:middle
we see we load our data directly

93
00:04:22,856 --> 00:04:24,246 A:middle
in Application Did
Finish Launching,

94
00:04:24,246 --> 00:04:25,756 A:middle
and I just said defer that.

95
00:04:25,756 --> 00:04:27,826 A:middle
Okay. So we can do
that pretty easily.

96
00:04:28,146 --> 00:04:31,546 A:middle
We dispatch that, and it's gone.

97
00:04:31,546 --> 00:04:33,706 A:middle
It's out of Application
Did Finish Launching.

98
00:04:34,006 --> 00:04:37,586 A:middle
We are able to launch quickly,
and things are better at launch.

99
00:04:37,946 --> 00:04:40,216 A:middle
But that still introduces
the possibility

100
00:04:40,976 --> 00:04:43,896 A:middle
of blocking the main
queue later on and, thus,

101
00:04:43,966 --> 00:04:45,386 A:middle
blocking user interaction.

102
00:04:46,036 --> 00:04:49,396 A:middle
So really, the best
practice is move that work

103
00:04:49,396 --> 00:04:53,166 A:middle
onto a background queue so
that whenever it does run,

104
00:04:53,586 --> 00:04:55,696 A:middle
user interaction
continues to happen,

105
00:04:55,986 --> 00:04:58,366 A:middle
and your application seems
responsive all the time.

106
00:04:59,266 --> 00:05:02,686 A:middle
So this technique, putting
the work on background queues,

107

108
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

109
00:04:59,266 --> 00:05:02,686 A:middle
So this technique, putting
the work on background queues,

110
00:05:02,686 --> 00:05:06,766 A:middle
can be applied anytime in
your app, not just at launch.

111
00:05:07,626 --> 00:05:10,446 A:middle
Then, you take that work that
you do in the background working

112
00:05:10,446 --> 00:05:12,336 A:middle
with data, and when
you are done with it,

113
00:05:12,336 --> 00:05:14,526 A:middle
that's when you come back to
the main queue to interact

114
00:05:14,646 --> 00:05:17,316 A:middle
with UIKit elements like
views and view launchers.

115
00:05:18,166 --> 00:05:19,856 A:middle
So that's being really
responsive.

116
00:05:20,576 --> 00:05:23,666 A:middle
The next thing you
want to do besides

117
00:05:23,666 --> 00:05:26,066 A:middle
that first launch is
be superresponsive

118
00:05:26,476 --> 00:05:29,076 A:middle
on the second time the
user launches your app,

119
00:05:29,236 --> 00:05:30,596 A:middle
and the third time, and so on.

120
00:05:31,236 --> 00:05:32,936 A:middle
And this comes from the fact

121
00:05:33,016 --> 00:05:36,986 A:middle
that when the user exits your
app, the app doesn't just die,

122
00:05:37,156 --> 00:05:39,446 A:middle
it goes into a suspended
state on iOS.

123
00:05:40,416 --> 00:05:43,506 A:middle
And so to be superfast the
second time the user goes

124
00:05:43,506 --> 00:05:45,846 A:middle
to your app, you really
just want to resume

125
00:05:45,846 --> 00:05:47,056 A:middle
from that suspended state,

126
00:05:47,516 --> 00:05:50,666 A:middle
and that's contingent upon
you still being in memory.

127
00:05:51,256 --> 00:05:53,076 A:middle
So if we take a look
at a picture

128
00:05:53,076 --> 00:05:55,366 A:middle
of what system memory
looks like, you know,

129
00:05:55,366 --> 00:05:57,506 A:middle
we know that some of it
is taken up by the kernel

130
00:05:57,506 --> 00:05:59,076 A:middle
and the operating
system processes.

131
00:05:59,706 --> 00:06:02,686 A:middle
A good chunk is going to be
taken up by the foreground app.

132

133
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

134
00:05:59,706 --> 00:06:02,686 A:middle
A good chunk is going to be
taken up by the foreground app.

135
00:06:02,686 --> 00:06:05,836 A:middle
And then a bunch of it
is going to be taken

136
00:06:05,836 --> 00:06:07,846 A:middle
up by background apps.

137
00:06:08,856 --> 00:06:11,476 A:middle
Now, you'll notice that
there's one sort of hog

138
00:06:11,476 --> 00:06:13,466 A:middle
of a background app in
this picture that's using

139
00:06:13,466 --> 00:06:14,886 A:middle
up more memory than
everyone else.

140
00:06:15,596 --> 00:06:18,596 A:middle
You don't want your
app to be that app,

141
00:06:18,596 --> 00:06:20,056 A:middle
and the reason you
don't want that is

142
00:06:20,056 --> 00:06:23,476 A:middle
because that app is the
first one that's going to die

143
00:06:23,626 --> 00:06:25,566 A:middle
when the foreground app
needs additional memory.

144
00:06:25,906 --> 00:06:30,916 A:middle
So you want your app to be the
one that's using UI application

145
00:06:30,916 --> 00:06:33,646 A:middle
delegate methods to know when
it's going into the background,

146
00:06:34,116 --> 00:06:36,406 A:middle
get rid of unneeded
memory resources,

147
00:06:36,446 --> 00:06:39,106 A:middle
take its memory footprint and
get it as small as possible

148
00:06:39,106 --> 00:06:40,396 A:middle
when it's going into
the background.

149
00:06:40,836 --> 00:06:43,336 A:middle
This is even more
important in the world

150
00:06:43,336 --> 00:06:45,136 A:middle
when we have split view

151
00:06:45,366 --> 00:06:47,456 A:middle
and there can be
multiple foreground apps.

152
00:06:48,166 --> 00:06:50,796 A:middle
You know when a second
foreground app comes,

153
00:06:51,086 --> 00:06:53,936 A:middle
that big hog of an app
isn't going to survive.

154
00:06:54,816 --> 00:06:57,026 A:middle
So you don't want to be that.

155
00:06:57,026 --> 00:06:59,726 A:middle
So that's being superresponsive
and thinking

156
00:06:59,726 --> 00:07:01,826 A:middle
about performance throughout
the life cycle of your app.

157

158
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

159
00:06:59,726 --> 00:07:01,826 A:middle
about performance throughout
the life cycle of your app.

160
00:07:02,286 --> 00:07:05,876 A:middle
The next best practices I want
to talk about with respect

161
00:07:05,946 --> 00:07:07,766 A:middle
to general application
programming is

162
00:07:07,766 --> 00:07:08,956 A:middle
leveraging frameworks.

163
00:07:10,016 --> 00:07:13,446 A:middle
Now, this is maybe the most
basic best practice I can give

164
00:07:13,446 --> 00:07:15,166 A:middle
to you, but that's: do it!

165
00:07:15,316 --> 00:07:17,186 A:middle
Leverage frameworks
that Apple provides.

166
00:07:17,906 --> 00:07:21,026 A:middle
We spend our lives throughout
the year building great

167
00:07:21,126 --> 00:07:24,356 A:middle
frameworks for you to build
on top of, and doing so comes

168
00:07:24,356 --> 00:07:25,926 A:middle
with several basic advantages

169
00:07:25,926 --> 00:07:27,016 A:middle
that I am sure you
are familiar with.

170
00:07:27,016 --> 00:07:29,376 A:middle
It reduces your maintenance
burden.

171
00:07:29,816 --> 00:07:32,736 A:middle
You know? If you use UI
Navigation Controller,

172
00:07:32,736 --> 00:07:34,636 A:middle
for example, then you don't have

173
00:07:34,666 --> 00:07:37,376 A:middle
to maintain the Navigation
Controller across releases

174
00:07:37,686 --> 00:07:40,066 A:middle
as you would if you built your
own Navigation Controller.

175
00:07:40,476 --> 00:07:43,726 A:middle
And as we make improvements, you
get those improvements for free.

176
00:07:44,346 --> 00:07:45,426 A:middle
For example, you know,

177
00:07:45,426 --> 00:07:49,016 A:middle
Navigation Controller
gained a swipe gesture

178
00:07:49,306 --> 00:07:51,286 A:middle
for going back a
couple of releases ago.

179
00:07:51,676 --> 00:07:54,846 A:middle
Everyone who built on top of it
got that improvement for free.

180
00:07:55,356 --> 00:07:57,636 A:middle
If you had your own, you would
have had to go implement it

181
00:07:57,636 --> 00:08:00,976 A:middle
or not have a feel that fit
with the rest of the system.

182

183
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

184
00:07:57,636 --> 00:08:00,976 A:middle
or not have a feel that fit
with the rest of the system.

185
00:08:01,306 --> 00:08:05,316 A:middle
So that's what you want because
you really want to be able

186
00:08:05,316 --> 00:08:09,116 A:middle
to spend your time focusing on
what makes your app special.

187
00:08:09,116 --> 00:08:10,196 A:middle
That's what we all want.

188
00:08:10,196 --> 00:08:12,936 A:middle
We want you to write fantastic
apps and spend your time

189
00:08:12,936 --> 00:08:14,926 A:middle
on that rather than things

190
00:08:14,926 --> 00:08:16,806 A:middle
that you could leave
to our framework.

191
00:08:16,856 --> 00:08:19,296 A:middle
So that's what we want
to encourage you to do.

192
00:08:20,316 --> 00:08:22,206 A:middle
And of course, while
you are doing that,

193
00:08:22,206 --> 00:08:24,416 A:middle
something that you're
going to have to keep

194
00:08:24,416 --> 00:08:27,426 A:middle
in mind is how you
deal with versioning.

195
00:08:27,876 --> 00:08:30,336 A:middle
So one of the biggest
questions we get is:

196
00:08:30,636 --> 00:08:33,775 A:middle
How many versions should
apps deploy against?

197
00:08:34,176 --> 00:08:36,186 A:middle
And our advice to
you is going to be,

198
00:08:36,525 --> 00:08:39,966 A:middle
target the two most
major releases of iOS.

199
00:08:40,806 --> 00:08:43,756 A:middle
So starting this fall when iOS
9 comes out and going forward,

200
00:08:43,756 --> 00:08:45,946 A:middle
that's going to mean
iOS 8 and 9.

201
00:08:46,696 --> 00:08:50,416 A:middle
This technique will give you the
best mix of getting a whole lot

202
00:08:50,416 --> 00:08:53,286 A:middle
of users while not taking
on the maintenance burden

203
00:08:53,726 --> 00:08:56,566 A:middle
of deploying back
several iOS releases

204
00:08:56,566 --> 00:08:57,636 A:middle
and having to deal with that.

205
00:08:58,876 --> 00:09:02,186 A:middle
Now, in this process,
you might find yourself

206

207
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

208
00:08:58,876 --> 00:09:02,186 A:middle
Now, in this process,
you might find yourself

209
00:09:02,736 --> 00:09:06,606 A:middle
at times needing specific
logic to check the version

210
00:09:06,606 --> 00:09:07,766 A:middle
of what system you're on.

211
00:09:08,336 --> 00:09:11,566 A:middle
And another best practice for
that is going to be to make sure

212
00:09:11,566 --> 00:09:14,256 A:middle
that you include
fallbacks for your logic

213
00:09:14,536 --> 00:09:16,096 A:middle
that is based on system version.

214
00:09:16,636 --> 00:09:19,746 A:middle
So that means definitely don't
write code that looks like this,

215
00:09:19,746 --> 00:09:22,176 A:middle
where you check for
a specific version

216
00:09:22,176 --> 00:09:24,566 A:middle
like iOS 9 before
doing something.

217
00:09:24,996 --> 00:09:27,366 A:middle
If you make a check like this,
it is almost certainly going

218
00:09:27,366 --> 00:09:31,436 A:middle
to cause a bug in your program
when iOS 9.1, for example,

219
00:09:31,696 --> 00:09:34,486 A:middle
is released that causes
this check to fail.

220
00:09:35,276 --> 00:09:38,016 A:middle
Instead, you want to think
about anything that's

221
00:09:38,016 --> 00:09:43,176 A:middle
in iOS 9 is going to be in
future releases, so any logic

222
00:09:43,216 --> 00:09:46,216 A:middle
that you put in iOS 9 you'd
want for versions greater

223
00:09:46,216 --> 00:09:47,836 A:middle
than or equal to iOS 9.

224
00:09:48,716 --> 00:09:51,576 A:middle
And even better, if you are
writing your app in Swift,

225
00:09:51,876 --> 00:09:55,116 A:middle
you can take advantage of the
new pound availability syntax

226
00:09:55,496 --> 00:09:59,636 A:middle
to put all your version-specific
code into a block

227
00:09:59,636 --> 00:10:02,246 A:middle
that the compiler can
understand and reason about

228

229
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

230
00:09:59,636 --> 00:10:02,246 A:middle
that the compiler can
understand and reason about

231
00:10:02,246 --> 00:10:04,436 A:middle
and let you know if you
are doing anything wrong

232
00:10:04,706 --> 00:10:05,746 A:middle
for a particular version.

233
00:10:06,726 --> 00:10:09,316 A:middle
Whichever technique
that you end up using,

234
00:10:09,796 --> 00:10:12,226 A:middle
think through whether you
need to have an Else clause

235
00:10:12,576 --> 00:10:14,276 A:middle
because you don't want
to make the mistake

236
00:10:14,276 --> 00:10:19,216 A:middle
of putting some specific logic
in that handles a core piece

237
00:10:19,216 --> 00:10:23,656 A:middle
of your application for some
system version but fails

238
00:10:23,656 --> 00:10:27,516 A:middle
to do other work that it needs
to do if it's not that version,

239
00:10:27,516 --> 00:10:31,116 A:middle
and you get a bug on versions
that aren't what you expected.

240
00:10:31,726 --> 00:10:34,006 A:middle
So that's some basic
best practices

241
00:10:34,036 --> 00:10:35,446 A:middle
for general application
life cycle.

242
00:10:35,906 --> 00:10:38,836 A:middle
Let's talk about view and view
controller best practices.

243
00:10:39,516 --> 00:10:42,856 A:middle
And the first idea I want
to hit there is how we think

244
00:10:42,856 --> 00:10:44,736 A:middle
about layout on modern devices.

245
00:10:45,836 --> 00:10:48,806 A:middle
You all know that last
fall we introduced iPhone 6

246
00:10:49,276 --> 00:10:53,016 A:middle
and iPhone 6 Plus, and I am
sure you are aware that along

247
00:10:53,016 --> 00:10:55,896 A:middle
with this we had
four new dimensions

248
00:10:56,176 --> 00:11:00,166 A:middle
that had never been
seen on iOS devices

249

250
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

251
00:10:56,176 --> 00:11:00,166 A:middle
that had never been
seen on iOS devices

252
00:11:00,166 --> 00:11:01,326 A:middle
for your apps to lay out in.

253
00:11:02,326 --> 00:11:06,246 A:middle
When you add that to the
dimensions of various iPhones

254
00:11:06,246 --> 00:11:09,926 A:middle
that we already had plus
iPad, now the matrix

255
00:11:10,056 --> 00:11:13,116 A:middle
for possible dimensions that
your app needs to lay out in,

256
00:11:13,116 --> 00:11:16,396 A:middle
especially when you throw
in split view on iPad Air 2,

257
00:11:17,636 --> 00:11:19,086 A:middle
that matrix is fairly large.

258
00:11:19,476 --> 00:11:22,006 A:middle
So it no longer makes
sense to build layouts

259
00:11:22,006 --> 00:11:25,926 A:middle
that are built specific
for a particular dimension

260
00:11:25,926 --> 00:11:27,956 A:middle
that your view controller
expects to be in.

261
00:11:28,296 --> 00:11:32,956 A:middle
Instead, layout in general wants
to think of itself as being done

262
00:11:32,996 --> 00:11:35,036 A:middle
to proportions, and we do

263
00:11:35,036 --> 00:11:39,166 A:middle
that by specifically avoiding
hard-coded values in the layout

264
00:11:39,166 --> 00:11:40,646 A:middle
of our views and
view controllers.

265
00:11:41,476 --> 00:11:45,836 A:middle
If we imagine a view that simply
puts a label into a superview,

266
00:11:46,416 --> 00:11:49,376 A:middle
we might have a couple of
years ago thought of the layout

267
00:11:49,376 --> 00:11:54,866 A:middle
of this as being done as a label
described as 260 points wide

268
00:11:54,866 --> 00:11:57,856 A:middle
with a 30-point margin
from the left.

269
00:11:58,106 --> 00:12:00,836 A:middle
We don't want to do that
because we want to think

270

271
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

272
00:11:58,106 --> 00:12:00,836 A:middle
We don't want to do that
because we want to think

273
00:12:01,456 --> 00:12:02,916 A:middle
about the dimension scaling.

274
00:12:02,916 --> 00:12:04,396 A:middle
Either or both of
them might scale.

275
00:12:04,396 --> 00:12:07,786 A:middle
In this case, if the width
scales, this layout breaks,

276
00:12:07,786 --> 00:12:12,016 A:middle
it just doesn't work because the
offset no longer makes sense.

277
00:12:12,016 --> 00:12:15,356 A:middle
So if we had instead thought
of this as a centered label,

278
00:12:15,906 --> 00:12:18,706 A:middle
then that makes sense
as the dimensions scale.

279
00:12:18,816 --> 00:12:20,866 A:middle
And we will revisit this
example a bit when I talk

280
00:12:20,866 --> 00:12:22,986 A:middle
about Auto Layout
best practices.

281
00:12:23,996 --> 00:12:28,296 A:middle
I want to talk a little bit
about an API that we introduced

282
00:12:28,356 --> 00:12:30,736 A:middle
in iOS 8 to help you
with this idea of laying

283
00:12:30,736 --> 00:12:34,706 A:middle
out to proportions because
part of the goal was to get rid

284
00:12:34,706 --> 00:12:36,896 A:middle
of the idea of orientation.

285
00:12:36,896 --> 00:12:40,816 A:middle
You know, we no longer want you
to ever think about orientation.

286
00:12:41,196 --> 00:12:43,306 A:middle
In fact, I am going
to tell you if,

287
00:12:43,306 --> 00:12:45,896 A:middle
when you are designing your
app, you have the thought

288
00:12:45,896 --> 00:12:48,686 A:middle
in your head that thinks
about portrait or landscape

289
00:12:48,686 --> 00:12:50,476 A:middle
or you have that
conversation with your designer

290
00:12:50,476 --> 00:12:52,406 A:middle
where the word "portrait"
or "landscape" comes out,

291
00:12:53,096 --> 00:12:54,726 A:middle
you are already thinking
about it wrong.

292
00:12:55,106 --> 00:12:57,296 A:middle
We only think about
things in terms of size.

293
00:12:58,196 --> 00:13:02,986 A:middle
And so size classes are here
to help us think about things

294

295
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

296
00:12:58,196 --> 00:13:02,986 A:middle
And so size classes are here
to help us think about things

297
00:13:02,986 --> 00:13:05,476 A:middle
in terms of size, do
proportional layout,

298
00:13:06,026 --> 00:13:08,356 A:middle
while also recognizing
and embracing

299
00:13:08,496 --> 00:13:11,416 A:middle
that there are certain
size thresholds

300
00:13:12,056 --> 00:13:15,696 A:middle
where the fundamental
UI we have changes.

301
00:13:16,046 --> 00:13:17,796 A:middle
As an example, Settings

302
00:13:17,886 --> 00:13:21,026 A:middle
on iPhone 4S is a simple
one-column table view.

303
00:13:21,196 --> 00:13:25,236 A:middle
When we go to the iPhone
5, it's still a table view.

304
00:13:25,236 --> 00:13:26,116 A:middle
It's just a little taller.

305
00:13:26,766 --> 00:13:29,346 A:middle
On iPhone 6, it's
taller and wider,

306
00:13:29,456 --> 00:13:30,806 A:middle
still basically a table view.

307
00:13:31,066 --> 00:13:33,246 A:middle
iPhone 6 Plus, bigger still.

308
00:13:34,056 --> 00:13:36,156 A:middle
However, when we
transition to iPad,

309
00:13:36,706 --> 00:13:39,506 A:middle
we cross a certain
width threshold

310
00:13:40,026 --> 00:13:45,866 A:middle
where now this view changes
fundamentally how it appears.

311
00:13:45,866 --> 00:13:48,746 A:middle
It's now two columns
of scrolling content.

312
00:13:49,226 --> 00:13:51,086 A:middle
So we've crossed
some threshold there.

313
00:13:51,286 --> 00:13:55,226 A:middle
And in fact, you find that that
same threshold has been crossed

314
00:13:55,636 --> 00:13:57,436 A:middle
when we view in iPhone 6,

315
00:13:57,436 --> 00:13:59,416 A:middle
and I will use the dirty
word, landscape mode.

316
00:13:59,976 --> 00:14:05,996 A:middle
And size classes are
the API that's there.

317

318
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

319
00:13:59,976 --> 00:14:05,996 A:middle
And size classes are
the API that's there.

320
00:14:06,276 --> 00:14:08,756 A:middle
For Apple to communicate
to your app

321
00:14:09,196 --> 00:14:11,996 A:middle
where those fundamental
thresholds are crossed

322
00:14:12,486 --> 00:14:16,446 A:middle
so that you can then react
to those thresholds and think

323
00:14:16,446 --> 00:14:19,776 A:middle
about having a fundamentally
changed UI according

324
00:14:19,776 --> 00:14:20,616 A:middle
to those thresholds.

325
00:14:20,876 --> 00:14:23,806 A:middle
And you get notified of
those thresholds changing

326
00:14:24,076 --> 00:14:28,976 A:middle
as size classes are packaged
in UITraitCollection objects,

327
00:14:28,976 --> 00:14:31,046 A:middle
which your view controller
will have access to.

328
00:14:31,706 --> 00:14:32,846 A:middle
So that's layout.

329
00:14:33,496 --> 00:14:35,886 A:middle
The next best practice I
want to impart upon you is

330
00:14:35,886 --> 00:14:37,756 A:middle
to use properties
in your classes

331
00:14:37,756 --> 00:14:40,706 A:middle
as an alternative
to tags on UIView.

332
00:14:41,156 --> 00:14:45,026 A:middle
So what I mean here is if
you are using View With Tag

333
00:14:45,206 --> 00:14:47,986 A:middle
or Set Tag UIView API
and shipping code,

334
00:14:47,986 --> 00:14:50,676 A:middle
I am going to encourage
you to move away from that.

335
00:14:51,406 --> 00:14:53,126 A:middle
Reasons are this is just --

336
00:14:54,016 --> 00:14:55,266 A:middle
[Applause]

337
00:14:55,266 --> 00:14:55,536 A:middle
Thank you.

338
00:14:55,536 --> 00:15:01,516 A:middle
I am really, really glad that
somebody is happy about that.

339

340
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

341
00:14:55,536 --> 00:15:01,516 A:middle
I am really, really glad that
somebody is happy about that.

342
00:15:02,206 --> 00:15:04,586 A:middle
Yes. So I mean, the reasons
for this should be obvious.

343
00:15:04,586 --> 00:15:07,886 A:middle
It's just an integer, and it
has collisions potentially

344
00:15:07,886 --> 00:15:08,616 A:middle
with other code.

345
00:15:08,616 --> 00:15:10,106 A:middle
Maybe it's other
code that you write.

346
00:15:10,316 --> 00:15:12,586 A:middle
Maybe it's the new guy on
your team who doesn't know

347
00:15:12,586 --> 00:15:14,456 A:middle
about your carefully
managed integers.

348
00:15:14,896 --> 00:15:18,076 A:middle
Maybe it's a framework
that you use

349
00:15:18,076 --> 00:15:20,026 A:middle
that you have no
visibility into.

350
00:15:20,916 --> 00:15:22,746 A:middle
And whenever these
collisions happen,

351
00:15:22,746 --> 00:15:24,826 A:middle
you get no compiler
warnings about them.

352
00:15:25,066 --> 00:15:26,306 A:middle
The compiler has
no way to reason

353
00:15:26,306 --> 00:15:27,586 A:middle
about your integer management.

354
00:15:28,546 --> 00:15:31,966 A:middle
And when you not only do
not get a compiler warning,

355
00:15:32,296 --> 00:15:35,356 A:middle
but any runtime errors you
get will not say anything

356
00:15:35,356 --> 00:15:36,766 A:middle
about your use of
View With Tags.

357
00:15:36,826 --> 00:15:40,156 A:middle
At best, you'll get a crash
for unrecognized selector.

358
00:15:40,406 --> 00:15:41,906 A:middle
You won't know what happened.

359
00:15:42,816 --> 00:15:45,786 A:middle
As a replacement to
this, declare properties

360
00:15:45,986 --> 00:15:50,356 A:middle
on your classes, and then you
will have real connections

361
00:15:50,356 --> 00:15:51,886 A:middle
to those views that
you need later.

362
00:15:52,546 --> 00:15:58,206 A:middle
As a simple code example,
imagine that I wrote some code

363
00:15:58,206 --> 00:16:01,056 A:middle
that creates an image view, and
I keep track of it with a tag

364

365
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

366
00:15:58,206 --> 00:16:01,056 A:middle
that creates an image view, and
I keep track of it with a tag

367
00:16:01,056 --> 00:16:02,936 A:middle
of 1,000 because I'm sure

368
00:16:02,936 --> 00:16:07,096 A:middle
in all my cleverness nobody else
will ever use a tag of 1,000.

369
00:16:07,626 --> 00:16:11,646 A:middle
But then I watch my own
talk, and I say no, no,

370
00:16:12,096 --> 00:16:14,506 A:middle
let me create an actual property

371
00:16:14,826 --> 00:16:16,536 A:middle
that declares it
a UI image view.

372
00:16:16,536 --> 00:16:19,166 A:middle
Then I keep a real
reference to that view

373
00:16:19,516 --> 00:16:23,176 A:middle
that also has better type
information because View

374
00:16:23,176 --> 00:16:25,896 A:middle
With Tag only is a type UI view.

375
00:16:26,356 --> 00:16:29,106 A:middle
Now that I use a
property-typed UI image view,

376
00:16:29,316 --> 00:16:32,236 A:middle
the compiler can actually reason
about what I do and help me

377
00:16:32,236 --> 00:16:33,406 A:middle
out if I make mistakes.

378
00:16:34,066 --> 00:16:36,756 A:middle
So please heed that.

379
00:16:36,756 --> 00:16:39,346 A:middle
The last best practice for
view and view controllers is

380
00:16:39,346 --> 00:16:41,776 A:middle
about making timing
deterministic.

381
00:16:42,696 --> 00:16:47,006 A:middle
This is, for those of you who
may have been in the position

382
00:16:47,096 --> 00:16:51,876 A:middle
of doing something
alongside a system animation

383
00:16:52,366 --> 00:16:55,636 A:middle
or you have some work
that you want to fire off

384
00:16:55,636 --> 00:16:58,256 A:middle
when an animation is
complete, and so you are left

385
00:16:58,256 --> 00:17:01,116 A:middle
in the position of trying to
make a guess about how long

386

387
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

388
00:16:58,256 --> 00:17:01,116 A:middle
in the position of trying to
make a guess about how long

389
00:17:01,116 --> 00:17:02,516 A:middle
that animation is going to take

390
00:17:02,516 --> 00:17:04,685 A:middle
and perhaps implementing
an NSTimer

391
00:17:05,026 --> 00:17:06,826 A:middle
to take care of that
time for you.

392
00:17:06,826 --> 00:17:09,576 A:middle
Well, you don't want
to do that because

393
00:17:09,576 --> 00:17:12,046 A:middle
that introduces indeterminism
into your app,

394
00:17:12,086 --> 00:17:14,195 A:middle
especially with the possibility

395
00:17:14,195 --> 00:17:16,935 A:middle
that animation timings can
change from release to release.

396
00:17:17,586 --> 00:17:19,876 A:middle
You are really the
opposite of future-proof

397
00:17:19,876 --> 00:17:21,766 A:middle
if that's what you are doing.

398
00:17:21,766 --> 00:17:25,185 A:middle
Instead, leverage
UIViewTransitionCoordinator,

399
00:17:25,486 --> 00:17:30,346 A:middle
an API on UIViewController,
to know what the timings are

400
00:17:30,346 --> 00:17:31,786 A:middle
for the animations
that you have.

401
00:17:32,316 --> 00:17:33,516 A:middle
This has the capability

402
00:17:33,516 --> 00:17:36,406 A:middle
to let you do any
animation you want alongside

403
00:17:36,636 --> 00:17:38,036 A:middle
of view controller transition.

404
00:17:39,286 --> 00:17:43,316 A:middle
You know for sure when that
transition is completed.

405
00:17:44,146 --> 00:17:47,936 A:middle
And it has built-in support
for cancelable animations

406
00:17:48,286 --> 00:17:49,716 A:middle
and interactive animations.

407
00:17:50,076 --> 00:17:52,956 A:middle
So if you imagine that
navigation swipe gesture again,

408
00:17:53,366 --> 00:17:56,306 A:middle
the user may move his or
her hand back and forth,

409
00:17:56,386 --> 00:17:59,596 A:middle
changing the speed,
direction, and even decide not

410
00:17:59,626 --> 00:18:01,836 A:middle
to pop the view controller
and cancel it altogether.

411

412
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

413
00:17:59,626 --> 00:18:01,836 A:middle
to pop the view controller
and cancel it altogether.

414
00:18:02,566 --> 00:18:04,906 A:middle
If you use the Transition
Coordinator, you are prepared

415
00:18:04,906 --> 00:18:07,106 A:middle
to handle all of that.

416
00:18:07,656 --> 00:18:09,606 A:middle
Let's talk about Auto
Layout best practices.

417
00:18:10,546 --> 00:18:13,406 A:middle
Auto Layout is a tool that I am
sure many of you know and love,

418
00:18:13,826 --> 00:18:17,156 A:middle
and it's kind of
built there designed

419
00:18:17,156 --> 00:18:22,136 A:middle
to help you be adaptable and
future-proof in your code.

420
00:18:22,136 --> 00:18:23,836 A:middle
And of course, we are
going to talk about that.

421
00:18:23,836 --> 00:18:26,546 A:middle
Future-proofing is one of
the goals with Auto Layout.

422
00:18:27,256 --> 00:18:30,606 A:middle
But first I want to hit
on some best practices

423
00:18:30,606 --> 00:18:33,276 A:middle
for high performance
in your Auto Layout.

424
00:18:33,716 --> 00:18:37,126 A:middle
And that's going to start
with managing your constraints

425
00:18:37,406 --> 00:18:38,916 A:middle
in the most efficient
way possible.

426
00:18:39,866 --> 00:18:44,316 A:middle
So the way that you do that is
imagining all the constraints

427
00:18:44,376 --> 00:18:48,216 A:middle
that will be in your view and
identify those constraints

428
00:18:48,516 --> 00:18:50,866 A:middle
that might change throughout
the lifetime of the view.

429
00:18:52,066 --> 00:18:56,366 A:middle
What that does when you identify
what changes is you'll be able

430
00:18:56,366 --> 00:19:01,626 A:middle
to make targeted changes
and not change the things

431

432
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

433
00:18:56,366 --> 00:19:01,626 A:middle
to make targeted changes
and not change the things

434
00:19:01,736 --> 00:19:02,946 A:middle
that don't need to change

435
00:19:03,146 --> 00:19:06,276 A:middle
because when you keep
some things constant,

436
00:19:06,696 --> 00:19:09,766 A:middle
you allow the Auto Layout engine
to optimize for those things

437
00:19:09,766 --> 00:19:12,716 A:middle
that don't change and,
therefore, it doesn't have

438
00:19:12,786 --> 00:19:16,616 A:middle
to make certain calculations
over again, and your app lays

439
00:19:16,616 --> 00:19:18,726 A:middle
out faster, which is
especially important

440
00:19:18,726 --> 00:19:21,526 A:middle
if you are doing
re-layout during scrolling

441
00:19:21,746 --> 00:19:23,346 A:middle
or something else
user interactive.

442
00:19:24,436 --> 00:19:27,466 A:middle
So part of that, a
definite best practice --

443
00:19:27,466 --> 00:19:29,716 A:middle
while this is a worst practice
and the best practice is

444
00:19:29,776 --> 00:19:31,386 A:middle
to avoid the worst practice --

445
00:19:31,856 --> 00:19:34,616 A:middle
is removing all the
constraints from a view.

446
00:19:35,196 --> 00:19:38,606 A:middle
This is bad not only in
terms of the performance

447
00:19:38,606 --> 00:19:40,626 A:middle
of your app enforcing
the Auto Layout engine

448
00:19:40,626 --> 00:19:42,526 A:middle
to do the most work possible,

449
00:19:43,066 --> 00:19:46,556 A:middle
but it's also actually a
potential compatibility issue

450
00:19:46,556 --> 00:19:51,126 A:middle
because future versions of iOS
may have additional constraints

451
00:19:51,126 --> 00:19:53,606 A:middle
that the framework has added,
which you'll be removing

452
00:19:53,606 --> 00:19:55,306 A:middle
when you call Remove
All Constraints.

453
00:19:55,806 --> 00:19:58,436 A:middle
So you want to avoid calling
Remove All Constraints

454
00:19:58,436 --> 00:20:00,206 A:middle
on a view as much as possible.

455

456
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

457
00:19:58,436 --> 00:20:00,206 A:middle
on a view as much as possible.

458
00:20:01,436 --> 00:20:05,456 A:middle
So the way that you sort of
tie this together and are able

459
00:20:05,546 --> 00:20:07,546 A:middle
to manage your constraints
efficiently is

460
00:20:07,546 --> 00:20:11,546 A:middle
by having explicit references
to them using the same strategy

461
00:20:11,546 --> 00:20:14,586 A:middle
that we just talked about
by replacing view tags,

462
00:20:14,886 --> 00:20:18,656 A:middle
having actual properties
that point out the views

463
00:20:18,656 --> 00:20:20,506 A:middle
or the constraints
that you might need

464
00:20:20,506 --> 00:20:22,836 A:middle
to change throughout the
lifetime of the view.

465
00:20:23,586 --> 00:20:26,346 A:middle
So we can look at a
very simple example

466
00:20:26,696 --> 00:20:30,006 A:middle
of how you might write your
update view constraints code,

467
00:20:30,336 --> 00:20:32,616 A:middle
and this does the most
naive thing possible,

468
00:20:32,616 --> 00:20:35,696 A:middle
and that is it says hey, I
need to update my constraints.

469
00:20:36,036 --> 00:20:37,466 A:middle
Let me just remove all of them,

470
00:20:37,726 --> 00:20:39,396 A:middle
and then I will recalculate
them and add them back.

471
00:20:40,846 --> 00:20:41,796 A:middle
We don't want to do this.

472
00:20:41,836 --> 00:20:43,246 A:middle
This is not the best practice.

473
00:20:43,596 --> 00:20:47,916 A:middle
The best practice is if we have
one constraint, for example,

474
00:20:48,246 --> 00:20:51,346 A:middle
that needs to be changed, we
can remove that constraint,

475
00:20:52,526 --> 00:20:56,076 A:middle
rebuild just that
constraint, and add it back.

476
00:20:56,786 --> 00:20:59,176 A:middle
The Auto Layout engine again
knows what didn't change

477
00:20:59,296 --> 00:21:02,136 A:middle
and is able to optimize
for us around that.

478

479
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

480
00:20:59,296 --> 00:21:02,136 A:middle
and is able to optimize
for us around that.

481
00:21:03,916 --> 00:21:07,456 A:middle
So the next set of best
practices I have for you

482
00:21:07,456 --> 00:21:09,786 A:middle
around constraints
are around this idea

483
00:21:09,786 --> 00:21:13,796 A:middle
of how specific you are when
you describe your constraints.

484
00:21:14,386 --> 00:21:16,766 A:middle
In general, you want
your constraints

485
00:21:16,766 --> 00:21:21,306 A:middle
to describe your layout exactly
as precisely as is necessary.

486
00:21:21,636 --> 00:21:23,956 A:middle
That is, you want to
say what is needed

487
00:21:23,956 --> 00:21:27,206 A:middle
to get the layout you
desire, and you don't want

488
00:21:27,206 --> 00:21:29,026 A:middle
to say any more, and you
don't want to say any less.

489
00:21:30,036 --> 00:21:34,756 A:middle
And there are potential problems
that can happen on both sides

490
00:21:35,296 --> 00:21:38,676 A:middle
of this specificity problem,
and I am going to talk

491
00:21:38,676 --> 00:21:39,716 A:middle
about each of these now.

492
00:21:40,246 --> 00:21:43,006 A:middle
The first one is a
performance problem.

493
00:21:43,446 --> 00:21:47,556 A:middle
So the first one is about
adding duplicate constraints

494
00:21:47,556 --> 00:21:48,256 A:middle
to your views.

495
00:21:48,566 --> 00:21:52,586 A:middle
Duplicate constraints are those
ones that if you removed them,

496
00:21:53,076 --> 00:21:54,936 A:middle
the layout would
be exactly the same

497
00:21:55,126 --> 00:21:58,236 A:middle
because they're just implied
by what's already there.

498
00:21:58,946 --> 00:22:01,246 A:middle
And when you have that, it
causes the layout engine

499

500
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

501
00:21:58,946 --> 00:22:01,246 A:middle
And when you have that, it
causes the layout engine

502
00:22:01,246 --> 00:22:03,396 A:middle
to do more work than it
needs to because it's solving

503
00:22:03,396 --> 00:22:04,916 A:middle
for these constraints
because they are there,

504
00:22:05,136 --> 00:22:07,016 A:middle
but it didn't actually
need to solve for them.

505
00:22:07,016 --> 00:22:11,696 A:middle
An example of this can be seen
in this sort of simple layout.

506
00:22:12,216 --> 00:22:14,456 A:middle
I've got a couple of
views inside a superview,

507
00:22:14,856 --> 00:22:21,246 A:middle
and I might describe the layout
first by doing the vertical axis

508
00:22:21,786 --> 00:22:25,276 A:middle
and say, hey, there's
some margin between my top

509
00:22:25,276 --> 00:22:29,246 A:middle
and bottom view, and I give
it an alignment option to say

510
00:22:29,246 --> 00:22:31,926 A:middle
that the left edges of both of
those views are also aligned.

511
00:22:32,736 --> 00:22:35,326 A:middle
Then I say, okay, let me go
to the horizontal dimension.

512
00:22:35,686 --> 00:22:39,196 A:middle
I provide some spacing
for the top view,

513
00:22:39,516 --> 00:22:41,906 A:middle
so now I know what
its left margin is.

514
00:22:42,346 --> 00:22:45,146 A:middle
Then I think, well, I've got
to specify that bottom view

515
00:22:45,146 --> 00:22:48,106 A:middle
as well, so I specify a
margin for that bottom view.

516
00:22:48,786 --> 00:22:52,076 A:middle
But what I've just done
is provided a margin

517
00:22:52,076 --> 00:22:55,656 A:middle
that I really didn't need in
that bottom view left margin.

518
00:22:56,186 --> 00:22:58,856 A:middle
Since I already knew what
the top view's margin was

519
00:22:59,386 --> 00:23:02,496 A:middle
and I also knew that the
left edges of the bottom

520

521
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

522
00:22:59,386 --> 00:23:02,496 A:middle
and I also knew that the
left edges of the bottom

523
00:23:02,496 --> 00:23:04,876 A:middle
and the top view were going
to align to each other,

524
00:23:05,476 --> 00:23:09,436 A:middle
this view hierarchy would
have laid out exactly the same

525
00:23:09,436 --> 00:23:14,086 A:middle
if I hadn't specified the left
margin of the bottom view.

526
00:23:14,416 --> 00:23:17,136 A:middle
So that extra constraint just
causes the engine to do work

527
00:23:17,136 --> 00:23:18,326 A:middle
that it doesn't need to do.

528
00:23:19,326 --> 00:23:21,556 A:middle
Get rid of that,
we'll be faster.

529
00:23:22,256 --> 00:23:24,856 A:middle
The next problem that
can happen as a result

530
00:23:24,856 --> 00:23:27,306 A:middle
of overspecifying your
constraints actually isn't a

531
00:23:27,306 --> 00:23:30,796 A:middle
performance problem, but
it's an adaptability problem.

532
00:23:30,796 --> 00:23:32,906 A:middle
It's a future problem
for your app.

533
00:23:32,906 --> 00:23:35,746 A:middle
And that's when your constraints
simply aren't flexible enough.

534
00:23:36,296 --> 00:23:40,366 A:middle
So if we think about hard-coded
values, we know we hate them,

535
00:23:40,996 --> 00:23:42,466 A:middle
and let's go back
to this example

536
00:23:42,466 --> 00:23:46,396 A:middle
that I promised we'd come back
to about a label in a view.

537
00:23:47,156 --> 00:23:51,446 A:middle
Again, if we think about this in
terms of it's a 30-point margin

538
00:23:51,446 --> 00:23:53,376 A:middle
from the left and
it's 260 points wide,

539
00:23:53,886 --> 00:23:55,906 A:middle
we might describe
its constraints

540
00:23:56,336 --> 00:23:58,156 A:middle
in terms of those hard values.

541
00:23:58,706 --> 00:24:02,276 A:middle
But those hard values cause
us to be rigid and unchanging,

542

543
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

544
00:23:58,706 --> 00:24:02,276 A:middle
But those hard values cause
us to be rigid and unchanging,

545
00:24:02,476 --> 00:24:05,606 A:middle
which kind of defeats the
entire purpose of Auto Layout

546
00:24:05,606 --> 00:24:07,216 A:middle
as a future-proofing tool.

547
00:24:07,916 --> 00:24:11,866 A:middle
What we really want to do is
describe our constraints using

548
00:24:11,866 --> 00:24:13,696 A:middle
the bounds of the
views that they're in.

549
00:24:14,186 --> 00:24:17,916 A:middle
So this should have been
something that used the bounds

550
00:24:17,916 --> 00:24:21,806 A:middle
of the superview and
described minimum margins

551
00:24:21,806 --> 00:24:22,606 A:middle
around that view.

552
00:24:22,916 --> 00:24:27,966 A:middle
So let's talk about the other
side of constraint specificity,

553
00:24:28,176 --> 00:24:30,726 A:middle
which is underspecifying
your constraints.

554
00:24:30,726 --> 00:24:31,536 A:middle
You don't want to
do that either.

555
00:24:31,536 --> 00:24:33,906 A:middle
You want to make sure you've
specified everything you need.

556
00:24:34,616 --> 00:24:38,096 A:middle
If you think about this view
here and imagine what happens

557
00:24:38,096 --> 00:24:41,586 A:middle
if we underspecified, we'd
be introducing ambiguity.

558
00:24:42,246 --> 00:24:45,836 A:middle
So focus in on constraints
I might have specified here.

559
00:24:46,126 --> 00:24:49,906 A:middle
If I set left and right
margins around this label

560
00:24:50,406 --> 00:24:54,206 A:middle
and I set a top margin as well,
there's something missing,

561
00:24:54,256 --> 00:24:55,966 A:middle
and it should be
pretty obvious to you

562
00:24:56,216 --> 00:24:58,616 A:middle
that there's no bottom
margin, and there needs to be.

563
00:24:59,046 --> 00:25:03,046 A:middle
And there needs to be because if
it's ambiguous, it's undefined,

564

565
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

566
00:24:59,046 --> 00:25:03,046 A:middle
And there needs to be because if
it's ambiguous, it's undefined,

567
00:25:03,116 --> 00:25:06,236 A:middle
and that means my
view might come

568
00:25:06,236 --> 00:25:09,336 A:middle
out different ways
different times I run my app.

569
00:25:09,656 --> 00:25:11,136 A:middle
Maybe if this is a table cell,

570
00:25:11,476 --> 00:25:13,316 A:middle
it changes when I
call Reload Data,

571
00:25:13,316 --> 00:25:14,716 A:middle
and I am mystified by that.

572
00:25:15,256 --> 00:25:17,436 A:middle
Maybe it will change on the
next version of iOS because,

573
00:25:17,636 --> 00:25:21,566 A:middle
you know, the cosmic rays
hit the phone differently.

574
00:25:21,956 --> 00:25:22,556 A:middle
Who knows.

575
00:25:23,176 --> 00:25:25,496 A:middle
We don't want undefined
behavior.

576
00:25:25,816 --> 00:25:28,096 A:middle
We don't want our view to
come out looking like this.

577
00:25:28,856 --> 00:25:31,816 A:middle
We want it to be the height
that we want it to be.

578
00:25:32,176 --> 00:25:34,726 A:middle
So make sure you fully
specify your constraints.

579
00:25:35,436 --> 00:25:38,146 A:middle
I want to give you a best
practice in terms of testing

580
00:25:38,146 --> 00:25:39,686 A:middle
and debugging your
Auto Layout code.

581
00:25:40,816 --> 00:25:44,956 A:middle
You can use a method on UIView
called Has Ambiguous Layout.

582
00:25:45,316 --> 00:25:47,036 A:middle
If you are in a debugger,
you are trying to figure

583
00:25:47,036 --> 00:25:50,166 A:middle
out why your view isn't
laying out the way

584
00:25:50,166 --> 00:25:53,306 A:middle
that you expect it to,
call Has Ambiguous Layout.

585
00:25:53,306 --> 00:25:56,586 A:middle
It will let you know if
there's ambiguity in your view.

586
00:25:57,726 --> 00:26:02,186 A:middle
Moreover, you call this method
on a UIWindow, it will tell you

587

588
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

589
00:25:57,726 --> 00:26:02,186 A:middle
Moreover, you call this method
on a UIWindow, it will tell you

590
00:26:02,216 --> 00:26:05,956 A:middle
if any view in the window
tree has ambiguous layout.

591
00:26:06,486 --> 00:26:07,516 A:middle
So that's pretty handy.

592
00:26:09,026 --> 00:26:13,536 A:middle
You can call UIView Auto Layout
Trace, then, to get a picture

593
00:26:13,536 --> 00:26:16,416 A:middle
of all the constraints
throughout your entire view tree

594
00:26:17,126 --> 00:26:19,866 A:middle
and use those constraints
to go find ambiguity.

595
00:26:20,466 --> 00:26:24,186 A:middle
A really interesting
best practice is

596
00:26:24,186 --> 00:26:28,446 A:middle
to take these methods as they
are, put them into a unit test.

597
00:26:29,836 --> 00:26:34,986 A:middle
You can imagine for each view
tree, each basic UI in your app,

598
00:26:34,986 --> 00:26:40,526 A:middle
you could call UIWindow
Has Ambiguous Layout,

599
00:26:41,476 --> 00:26:43,616 A:middle
and if it does have
ambiguous layout,

600
00:26:44,076 --> 00:26:48,376 A:middle
then you could call UIView
Auto Layout Trace to find

601
00:26:48,416 --> 00:26:51,586 A:middle
where the ambiguous
constraints are.

602
00:26:52,036 --> 00:26:55,666 A:middle
Just package that up into a
report, and then you have a test

603
00:26:56,306 --> 00:26:58,716 A:middle
which both lets you know
when there's ambiguity

604
00:26:58,716 --> 00:27:01,076 A:middle
and provides debugging
information

605

606
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

607
00:26:58,716 --> 00:27:01,076 A:middle
and provides debugging
information

608
00:27:01,336 --> 00:27:02,756 A:middle
for whoever comes along and sees

609
00:27:02,756 --> 00:27:04,436 A:middle
that there is a failure
in the test.

610
00:27:05,146 --> 00:27:07,866 A:middle
So that's a great best
practice you can use

611
00:27:07,866 --> 00:27:08,816 A:middle
with your Auto Layout apps.

612
00:27:09,516 --> 00:27:15,736 A:middle
[Applause]

613
00:27:16,236 --> 00:27:16,656 A:middle
All right.

614
00:27:16,656 --> 00:27:21,436 A:middle
So I will transition now to our
last topic for best practices,

615
00:27:21,786 --> 00:27:23,506 A:middle
and that's table and
collection views.

616
00:27:24,026 --> 00:27:26,516 A:middle
I know that this is
something that is important

617
00:27:26,516 --> 00:27:29,426 A:middle
to almost every iOS
app out there,

618
00:27:29,886 --> 00:27:31,846 A:middle
and it's certainly
important to me, too.

619
00:27:32,296 --> 00:27:36,116 A:middle
So the first best practice
is use self-sizing cells

620
00:27:36,196 --> 00:27:39,856 A:middle
when you have content
that needs to change --

621
00:27:39,896 --> 00:27:41,296 A:middle
or you have cells that need

622
00:27:41,296 --> 00:27:42,726 A:middle
to change size based
on the content.

623
00:27:43,876 --> 00:27:47,806 A:middle
I am sure most all of
you have at some point

624
00:27:47,806 --> 00:27:50,796 A:middle
in your iOS development
life been in this situation

625
00:27:51,126 --> 00:27:54,966 A:middle
where you have a basic table
view with some content in there,

626
00:27:55,256 --> 00:27:58,026 A:middle
and you realize,
oh, each cell needs

627
00:27:58,026 --> 00:28:00,406 A:middle
to be a different height based
on the content that's in it.

628

629
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

630
00:27:58,026 --> 00:28:00,406 A:middle
to be a different height based
on the content that's in it.

631
00:28:00,406 --> 00:28:02,936 A:middle
I can't just have one
height for every cell.

632
00:28:04,076 --> 00:28:07,576 A:middle
And self-sizing cells introduced
in iOS 8 make it easier

633
00:28:07,576 --> 00:28:10,286 A:middle
than ever to transition
to what you really want,

634
00:28:10,606 --> 00:28:13,156 A:middle
which is a table view where all
the cells are the height they

635
00:28:13,156 --> 00:28:15,756 A:middle
need for the content.

636
00:28:15,756 --> 00:28:18,136 A:middle
So I'll run through the
best practice mechanism

637
00:28:18,416 --> 00:28:21,806 A:middle
for how you get self-sizing
cells in your app.

638
00:28:21,806 --> 00:28:23,856 A:middle
And it starts just
like we talked

639
00:28:23,856 --> 00:28:25,436 A:middle
about in the Auto Layout section

640
00:28:25,776 --> 00:28:27,746 A:middle
by fully specifying
your constraints.

641
00:28:28,816 --> 00:28:31,946 A:middle
You want to use all those
tips that I just talked about,

642
00:28:32,446 --> 00:28:38,136 A:middle
thinking about this idea of
your Auto Layout system is this

643
00:28:38,136 --> 00:28:41,536 A:middle
machine that's taking
width in as an input

644
00:28:42,206 --> 00:28:44,736 A:middle
because the table view
has a fixed width,

645
00:28:44,926 --> 00:28:46,586 A:middle
and so your cell is
going to be that wide.

646
00:28:46,586 --> 00:28:50,806 A:middle
And then it's producing as an
output the height of the cell.

647
00:28:51,516 --> 00:28:54,216 A:middle
So any ambiguity in there,

648
00:28:54,216 --> 00:28:56,336 A:middle
if you haven't fully
specified your constraints,

649
00:28:56,336 --> 00:29:00,766 A:middle
comes out as the height
isn't what you want it to be.

650

651
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

652
00:28:56,336 --> 00:29:00,766 A:middle
comes out as the height
isn't what you want it to be.

653
00:29:01,016 --> 00:29:03,856 A:middle
If we use the simple
example of a table view cell,

654
00:29:04,106 --> 00:29:05,166 A:middle
here it's really easy.

655
00:29:05,656 --> 00:29:09,086 A:middle
We can just put margins
around all of our content,

656
00:29:09,086 --> 00:29:10,766 A:middle
which in this case
is just a label,

657
00:29:10,766 --> 00:29:12,906 A:middle
and it has an intrinsic
content size.

658
00:29:12,906 --> 00:29:15,046 A:middle
So when we put margins
around it,

659
00:29:15,266 --> 00:29:18,796 A:middle
we fully specified
the constraints

660
00:29:18,796 --> 00:29:23,146 A:middle
of this particular cell, and
we'll get the size that we want.

661
00:29:23,326 --> 00:29:26,426 A:middle
You, however, might have some
more complex cells than this.

662
00:29:26,486 --> 00:29:28,356 A:middle
I understand that
this is an easy case.

663
00:29:28,996 --> 00:29:33,286 A:middle
And if you are in the position
where you find, you know, hey,

664
00:29:33,546 --> 00:29:35,116 A:middle
I've specified all
my constraints,

665
00:29:35,116 --> 00:29:37,426 A:middle
but I am not getting the height
that I thought I should get,

666
00:29:37,426 --> 00:29:42,176 A:middle
I want to give you a tip, which
is try adding a constraint

667
00:29:42,176 --> 00:29:43,466 A:middle
to your content view

668
00:29:43,756 --> 00:29:45,976 A:middle
that specifies the height
of the content view.

669
00:29:45,976 --> 00:29:48,276 A:middle
So you are using, in fact,

670
00:29:48,276 --> 00:29:49,976 A:middle
a height constraint
on the content view.

671
00:29:50,446 --> 00:29:52,716 A:middle
Then you can specify that
in terms of your content.

672
00:29:52,776 --> 00:29:56,196 A:middle
Here I can say hey, content
view height should be equal

673
00:29:56,196 --> 00:29:59,826 A:middle
to the height of the label
plus my top and bottom margins.

674

675
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

676
00:30:00,376 --> 00:30:03,016 A:middle
In this case, that's
repeating work.

677
00:30:03,016 --> 00:30:05,036 A:middle
I don't really need
to do that here,

678
00:30:05,356 --> 00:30:07,026 A:middle
and I'll get the same thing.

679
00:30:07,426 --> 00:30:10,076 A:middle
But if in your app you are
not getting what you expect

680
00:30:11,116 --> 00:30:13,806 A:middle
and you add a height
constraint to your view,

681
00:30:13,806 --> 00:30:18,076 A:middle
and then that causes the
height of the cell to change,

682
00:30:18,906 --> 00:30:20,466 A:middle
then that's a great indication

683
00:30:20,466 --> 00:30:25,236 A:middle
that your constraints aren't
giving you quite the logic

684
00:30:25,516 --> 00:30:26,736 A:middle
that you expected them to.

685
00:30:27,266 --> 00:30:31,296 A:middle
So that's a great tool that
you can use to figure that out.

686
00:30:31,496 --> 00:30:34,906 A:middle
Now, once you have that,
you might want to think

687
00:30:34,906 --> 00:30:38,906 A:middle
about how you animate the height
changes of your cells, you know,

688
00:30:39,416 --> 00:30:42,976 A:middle
even using self-sizing
cells and Auto Layout.

689
00:30:44,096 --> 00:30:49,046 A:middle
Now, you can imagine if you had
some cell in here that you want

690
00:30:49,046 --> 00:30:52,996 A:middle
to change its content, you might
take the very naive approach

691
00:30:53,406 --> 00:30:56,536 A:middle
and update your model and
then call Reload Data.

692
00:30:56,536 --> 00:30:59,336 A:middle
And if you do that, it's
going to look like this,

693
00:30:59,636 --> 00:31:02,556 A:middle
where it snaps to the new
position of the table,

694

695
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

696
00:30:59,636 --> 00:31:02,556 A:middle
where it snaps to the new
position of the table,

697
00:31:02,876 --> 00:31:08,476 A:middle
and it gets the job done, but it
just isn't the user experience

698
00:31:08,476 --> 00:31:09,616 A:middle
that you wanted out of your app.

699
00:31:09,616 --> 00:31:11,696 A:middle
It doesn't quite look as
polished as it should be.

700
00:31:12,556 --> 00:31:16,686 A:middle
What you wanted was to have
that cell animate its height

701
00:31:17,196 --> 00:31:20,186 A:middle
and the cells around it
animate their positions smoothly

702
00:31:20,666 --> 00:31:23,426 A:middle
so everything dropped into place

703
00:31:23,426 --> 00:31:26,506 A:middle
and the user understood
what was happening.

704
00:31:26,666 --> 00:31:28,666 A:middle
So let's walk through
how you do that.

705
00:31:29,326 --> 00:31:30,466 A:middle
Thankfully, it's pretty simple.

706
00:31:31,486 --> 00:31:34,736 A:middle
Whenever you want to
specify a geometry change is

707
00:31:34,736 --> 00:31:40,496 A:middle
to be animated in table
view, you use a begin update

708
00:31:40,496 --> 00:31:43,306 A:middle
and update block with
the Table View API.

709
00:31:43,546 --> 00:31:47,076 A:middle
So first step is to call
Table View Begin Updates.

710
00:31:47,346 --> 00:31:50,036 A:middle
This is true whether you are
using self-sizing cells or not.

711
00:31:50,166 --> 00:31:52,656 A:middle
This is the general way you
animate geometry changes

712
00:31:52,656 --> 00:31:53,266 A:middle
in table view.

713
00:31:54,026 --> 00:31:55,636 A:middle
Then you update your model.

714
00:31:56,836 --> 00:31:57,436 A:middle
That's easy.

715
00:31:58,086 --> 00:32:02,856 A:middle
Third step is if you're changing
the height of an onscreen cell,

716

717
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

718
00:31:58,086 --> 00:32:02,856 A:middle
Third step is if you're changing
the height of an onscreen cell,

719
00:32:03,356 --> 00:32:05,746 A:middle
you can just reach into
that cell, get a reference

720
00:32:05,746 --> 00:32:08,076 A:middle
by calling Table View Cell
For Row At Index Path,

721
00:32:08,586 --> 00:32:10,436 A:middle
and change the contents
of that cell,

722
00:32:10,436 --> 00:32:12,376 A:middle
even changing the
constraints as needed.

723
00:32:12,636 --> 00:32:13,866 A:middle
Sometimes people think they need

724
00:32:13,866 --> 00:32:16,406 A:middle
to call Reload Rows
Of Index Path.

725
00:32:16,456 --> 00:32:17,686 A:middle
You don't actually
need to do that,

726
00:32:17,686 --> 00:32:20,516 A:middle
and it won't get you quite
the optimal experience.

727
00:32:21,246 --> 00:32:23,086 A:middle
You actually can just
reach into the cell

728
00:32:23,086 --> 00:32:24,106 A:middle
and change its contents.

729
00:32:24,796 --> 00:32:25,946 A:middle
Then when you are
done with that,

730
00:32:26,596 --> 00:32:30,116 A:middle
you say Table View End
Updates, and table view

731
00:32:30,116 --> 00:32:33,816 A:middle
at that time recalculates
the geometry of all the rows,

732
00:32:34,346 --> 00:32:36,506 A:middle
including asking all
the onscreen rows

733
00:32:36,506 --> 00:32:38,856 A:middle
for their Auto Layout
information to get their height,

734
00:32:38,856 --> 00:32:42,436 A:middle
and everything animates
into place as you saw.

735
00:32:42,846 --> 00:32:45,946 A:middle
So begin updates, end
updates is the key to that.

736
00:32:47,356 --> 00:32:51,716 A:middle
So the last best practice
that I want to give you is how

737
00:32:51,716 --> 00:32:56,986 A:middle
to implement custom
collection view layouts

738
00:32:56,986 --> 00:33:00,606 A:middle
that invalidate themselves and
are very fast as they do it.

739

740
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

741
00:32:56,986 --> 00:33:00,606 A:middle
that invalidate themselves and
are very fast as they do it.

742
00:33:01,156 --> 00:33:03,196 A:middle
So I know this comes up a lot,

743
00:33:03,196 --> 00:33:05,566 A:middle
people write custom
collection view layouts,

744
00:33:05,856 --> 00:33:08,286 A:middle
and they're doing something,
they are changing something

745
00:33:08,286 --> 00:33:10,586 A:middle
about themselves as
the user is scrolling,

746
00:33:10,706 --> 00:33:13,546 A:middle
and they have a hard time
keeping up with that layout.

747
00:33:14,156 --> 00:33:17,096 A:middle
Well, I am going to tell you
exactly how the Photos app

748
00:33:17,096 --> 00:33:21,116 A:middle
in iOS does this job so that
you can take that technique

749
00:33:21,186 --> 00:33:25,206 A:middle
and put it into your
custom layout that you have.

750
00:33:25,386 --> 00:33:28,986 A:middle
So the Photos layout has this
header, which is expressed

751
00:33:28,986 --> 00:33:31,926 A:middle
as a supplementary view
in collection view terms,

752
00:33:32,516 --> 00:33:35,606 A:middle
and when the user scrolls,
even though the cells move

753
00:33:35,666 --> 00:33:39,956 A:middle
with the scrolling, that header
view stays in place on screen.

754
00:33:41,106 --> 00:33:44,196 A:middle
This is the same basic idea
that I know many people want

755
00:33:44,196 --> 00:33:46,286 A:middle
to implement in their
collection views,

756
00:33:46,766 --> 00:33:50,256 A:middle
and the Photos layout
is able to do this

757
00:33:50,576 --> 00:33:54,696 A:middle
by using a UICollectionView
invalidation context instance.

758
00:33:54,696 --> 00:33:58,556 A:middle
This is API that you can
find in UICollectionView.

759
00:33:59,646 --> 00:34:02,816 A:middle
So the steps to this
are just a few.

760

761
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

762
00:33:59,646 --> 00:34:02,816 A:middle
So the steps to this
are just a few.

763
00:34:03,306 --> 00:34:04,886 A:middle
Number one is the most obvious.

764
00:34:05,236 --> 00:34:08,775 A:middle
The Photos layout is invalidated
on every bounds change.

765
00:34:08,775 --> 00:34:10,806 A:middle
So every frame as the
user is scrolling,

766
00:34:11,545 --> 00:34:13,255 A:middle
the Photos layout
gets invalidated.

767
00:34:13,606 --> 00:34:14,166 A:middle
Piece of cake.

768
00:34:14,466 --> 00:34:15,376 A:middle
That's the easy part.

769
00:34:15,376 --> 00:34:17,106 A:middle
The question is, how
do we make that fast?

770
00:34:17,545 --> 00:34:22,516 A:middle
And the answer is, the Photos
layout builds a targeted

771
00:34:22,516 --> 00:34:26,786 A:middle
invalidation context that is
specified to invalidate just

772
00:34:26,966 --> 00:34:30,846 A:middle
that header view so that
the collection view is able

773
00:34:30,846 --> 00:34:33,626 A:middle
to optimize, understanding
that the only view

774
00:34:33,626 --> 00:34:35,826 A:middle
that is being invalidated
is the header view

775
00:34:36,235 --> 00:34:37,416 A:middle
and none of the cells are.

776
00:34:37,876 --> 00:34:40,416 A:middle
That allows the collection
view to do the entire operation

777
00:34:40,476 --> 00:34:43,226 A:middle
as fast as possible,
and it's so fast

778
00:34:43,226 --> 00:34:45,946 A:middle
that this can just be
repeated as necessary

779
00:34:46,136 --> 00:34:48,076 A:middle
at frame rate scrolling as fast,

780
00:34:48,525 --> 00:34:52,045 A:middle
even though the layout is being
invalidated on every frame.

781
00:34:52,545 --> 00:34:55,966 A:middle
So you can use that same
technique in any layout if,

782
00:34:55,996 --> 00:35:00,056 A:middle
in general, if you have
performance concerns using a

783

784
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

785
00:34:55,996 --> 00:35:00,056 A:middle
in general, if you have
performance concerns using a

786
00:35:00,056 --> 00:35:00,896 A:middle
custom layout.

787
00:35:01,266 --> 00:35:02,396 A:middle
Generally speaking,

788
00:35:02,586 --> 00:35:05,736 A:middle
UICollectionView
invalidation context is the key

789
00:35:05,736 --> 00:35:07,986 A:middle
to overcoming those
performance concerns.

790
00:35:08,256 --> 00:35:11,626 A:middle
So I encourage you to
check out that API.

791
00:35:12,056 --> 00:35:16,296 A:middle
Okay. So I've talked
about a whole collection

792
00:35:16,366 --> 00:35:18,316 A:middle
of best practices here.

793
00:35:19,236 --> 00:35:21,366 A:middle
We talked about performance
and how

794
00:35:21,366 --> 00:35:24,236 A:middle
to make your apps
superresponsive at launch

795
00:35:24,236 --> 00:35:26,516 A:middle
and throughout its
life cycle and how

796
00:35:26,516 --> 00:35:28,526 A:middle
to make your Auto Layout
as fast as possible.

797
00:35:29,626 --> 00:35:32,926 A:middle
We've discussed user experience
as one of your great goals

798
00:35:32,926 --> 00:35:36,976 A:middle
and animating your table views
around and laying out properly

799
00:35:36,976 --> 00:35:39,126 A:middle
across the myriad
of iOS devices.

800
00:35:39,866 --> 00:35:43,836 A:middle
And of course, I've given you
tips for how to write your code

801
00:35:43,836 --> 00:35:47,086 A:middle
in the most future-proof way so
that it's running on versions

802
00:35:47,086 --> 00:35:48,846 A:middle
of iOS for generations to come.

803
00:35:50,026 --> 00:35:53,436 A:middle
Now, I encourage you to use
this entire talk as a reference,

804
00:35:53,856 --> 00:35:56,126 A:middle
something you can come
back, watch the video

805
00:35:56,126 --> 00:35:57,616 A:middle
as you are building
your future apps.

806
00:35:57,616 --> 00:36:01,336 A:middle
There's a lot of best practices
here that you can use this

807

808
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

809
00:35:57,616 --> 00:36:01,336 A:middle
There's a lot of best practices
here that you can use this

810
00:36:01,416 --> 00:36:05,276 A:middle
as a launching board to then
go into the documentation,

811
00:36:05,566 --> 00:36:08,176 A:middle
look up the specific APIs
that I've referenced,

812
00:36:08,506 --> 00:36:11,126 A:middle
and you will be able to
put that to -- well --

813
00:36:11,126 --> 00:36:13,336 A:middle
best practice in all
of your future apps.

814
00:36:13,926 --> 00:36:17,156 A:middle
So you know, with that, I
thank you, and I am glad

815
00:36:17,186 --> 00:36:19,516 A:middle
that you have come here to WWDC,
and I hope you have a best rest

816
00:36:19,516 --> 00:36:20,916 A:middle
of your afternoon possible.

817
00:36:21,516 --> 00:36:24,500 A:middle
[Applause]

818
