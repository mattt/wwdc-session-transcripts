X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:23,516 --> 00:00:28,136 A:middle
[Applause]

2
00:00:28,636 --> 00:00:29,066 A:middle
>> DAVE ADDEY: Hello.

3
00:00:29,066 --> 00:00:31,866 A:middle
Welcome to Deeper into
GameplayKit with DemoBots.

4
00:00:32,906 --> 00:00:36,166 A:middle
We created a new game sample
this year called DemoBots.

5
00:00:36,896 --> 00:00:38,336 A:middle
If you would like to
play along at home,

6
00:00:38,596 --> 00:00:39,876 A:middle
you can download
the sample today

7
00:00:40,186 --> 00:00:42,766 A:middle
from
developer.apple.com/spritekit.

8
00:00:44,046 --> 00:00:46,526 A:middle
This game takes advantage of
lots of the things you learned

9
00:00:46,526 --> 00:00:48,826 A:middle
about in the What's New
in SpriteKit session

10
00:00:49,166 --> 00:00:50,406 A:middle
and Introducing GameplayKit.

11
00:00:50,486 --> 00:00:53,216 A:middle
Check it out if you couldn't.

12
00:00:53,216 --> 00:00:57,506 A:middle
We couldn't make a
game called DemoBots

13
00:00:58,276 --> 00:01:00,086 A:middle
without giving you a demo.

14

15
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

16
00:00:58,276 --> 00:01:00,086 A:middle
without giving you a demo.

17
00:01:00,336 --> 00:01:02,036 A:middle
Let's take a look and
see how the game plays.

18
00:01:07,956 --> 00:01:12,846 A:middle
We start a new game, you're
PlayerBot, this guy here.

19
00:01:13,586 --> 00:01:17,226 A:middle
Your job is to find and
fix all of the bad TaskBots

20
00:01:17,406 --> 00:01:19,176 A:middle
on each level before
the clock runs out.

21
00:01:20,036 --> 00:01:22,476 A:middle
Here we have two good TaskBots,
you can tell they're good,

22
00:01:22,476 --> 00:01:23,476 A:middle
because they've got green faces.

23
00:01:24,576 --> 00:01:27,256 A:middle
If I run around the corner here,
we find the first bad TaskBot.

24
00:01:27,526 --> 00:01:29,716 A:middle
He's a GroundBot in this case.

25
00:01:29,716 --> 00:01:32,326 A:middle
When he spots me, he will
charge toward me and attack me.

26
00:01:33,266 --> 00:01:33,956 A:middle
I lose some charge.

27
00:01:34,796 --> 00:01:35,246 A:middle
That's okay.

28
00:01:35,286 --> 00:01:37,106 A:middle
I have a beam to zap him with.

29
00:01:37,106 --> 00:01:41,216 A:middle
After I zapped him for a few
seconds he's fixed and green.

30
00:01:41,446 --> 00:01:42,086 A:middle
Let's see where he's going.

31
00:01:44,106 --> 00:01:46,156 A:middle
Here we have another
bad TaskBots,

32
00:01:46,236 --> 00:01:48,166 A:middle
I have to fix him as well.

33
00:01:49,726 --> 00:01:51,146 A:middle
There are two more on
this level that I need

34
00:01:51,146 --> 00:01:52,796 A:middle
to fix before the
timer runs out.

35
00:01:53,376 --> 00:01:55,326 A:middle
Unfortunately they
have a tendency

36
00:01:55,326 --> 00:01:56,516 A:middle
to attack one another as well.

37
00:01:57,196 --> 00:01:58,986 A:middle
They can turn each other bad.

38
00:01:59,736 --> 00:02:01,406 A:middle
That's what happened there.

39

40
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

41
00:01:59,736 --> 00:02:01,406 A:middle
That's what happened there.

42
00:02:02,596 --> 00:02:09,936 A:middle
Once all of them are fixed
the level is complete.

43
00:02:10,515 --> 00:02:13,356 A:middle
[Applause]

44
00:02:13,856 --> 00:02:14,776 A:middle
There's a level 2.

45
00:02:17,266 --> 00:02:20,096 A:middle
Level 2 introduces a new
character, FlyingBot,

46
00:02:20,536 --> 00:02:23,096 A:middle
here is a FlyingBot on the side
hanging out, doing his thing.

47
00:02:23,836 --> 00:02:25,426 A:middle
If you find a bad FlyingBot,

48
00:02:25,486 --> 00:02:29,846 A:middle
they have a different
attack.When we bump into him,

49
00:02:30,206 --> 00:02:32,316 A:middle
he does a blast attack
affecting everybody

50
00:02:32,316 --> 00:02:33,236 A:middle
within a certain radius.

51
00:02:34,306 --> 00:02:37,496 A:middle
The good news, if you fix
one, they do a good attack

52
00:02:37,496 --> 00:02:40,096 A:middle
that will cure any other
FlyingBot within range.

53
00:02:40,856 --> 00:02:41,806 A:middle
Follow him over here.

54
00:02:43,096 --> 00:02:47,856 A:middle
He's almost certainly going
to bump into another bad one.

55
00:02:47,856 --> 00:02:48,426 A:middle
He avoided him.

56
00:02:48,556 --> 00:02:50,146 A:middle
Good. I can cure
this one as well.

57
00:02:50,846 --> 00:02:53,676 A:middle
He's almost certainly going to
do a really, really silly thing,

58
00:02:54,116 --> 00:02:56,366 A:middle
to go all the way around
here to a great big nest

59
00:02:56,466 --> 00:02:57,506 A:middle
of the things around the corner.

60
00:02:58,386 --> 00:02:59,476 A:middle
This is almost a certainty.

61

62
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

63
00:03:01,916 --> 00:03:04,406 A:middle
We can use his benevolent
blast after he's been made bad,

64
00:03:04,816 --> 00:03:14,376 A:middle
he can cure one, two,
all of them in one go.

65
00:03:14,376 --> 00:03:17,986 A:middle
[Laughter] One more to go.

66
00:03:18,446 --> 00:03:22,756 A:middle
Oh no! [Laughter] This
is not going well.

67
00:03:25,136 --> 00:03:25,886 A:middle
[Laughter] One more.

68
00:03:27,846 --> 00:03:28,596 A:middle
Then the level is complete.

69
00:03:29,516 --> 00:03:34,906 A:middle
[Applause]

70
00:03:35,406 --> 00:03:36,286 A:middle
So that's DemoBots.

71
00:03:36,746 --> 00:03:39,056 A:middle
I would like to take
a look at tools

72
00:03:39,056 --> 00:03:43,326 A:middle
and technologies we have used
to make this game a reality.

73
00:03:43,326 --> 00:03:45,626 A:middle
You saw our TaskBots had lots

74
00:03:45,626 --> 00:03:47,246 A:middle
of animation states
they went through.

75
00:03:47,246 --> 00:03:52,756 A:middle
A thing we tried to do is keep
the textures, images we needed

76
00:03:52,756 --> 00:03:55,516 A:middle
for those to a minimum to
keep the app size realistic.

77
00:03:55,516 --> 00:03:59,886 A:middle
We decided to keep the new
action editor in SpriteKit

78

79
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

80
00:04:00,276 --> 00:04:01,136 A:middle
to create the actions as --

81
00:04:01,136 --> 00:04:03,056 A:middle
animations as actions
rather than textures.

82
00:04:03,726 --> 00:04:07,086 A:middle
The zap animation you
see, the zap beam,

83
00:04:07,746 --> 00:04:10,606 A:middle
that's a reference action
we have made and applied

84
00:04:10,646 --> 00:04:12,036 A:middle
to both the GroundBot
and FlyingBot.

85
00:04:12,496 --> 00:04:15,426 A:middle
If we click into that action
we can see it is made of lots

86
00:04:15,426 --> 00:04:17,495 A:middle
of small move actions
one after another.

87
00:04:19,296 --> 00:04:22,826 A:middle
Because it is a reference
action we can create it once

88
00:04:23,086 --> 00:04:26,156 A:middle
and apply it to all
TaskBots we have regardless

89
00:04:26,156 --> 00:04:27,266 A:middle
of the orientation.

90
00:04:28,406 --> 00:04:31,796 A:middle
Because it is a reference
action, we can create it once

91
00:04:32,166 --> 00:04:34,666 A:middle
and then go and change
it, the source,

92
00:04:34,836 --> 00:04:36,836 A:middle
seeing that change going
everywhere, we don't have

93
00:04:36,836 --> 00:04:38,706 A:middle
to change it in multiple places.

94
00:04:40,826 --> 00:04:43,946 A:middle
We use the action editor to
create the beam animation.

95
00:04:44,476 --> 00:04:47,556 A:middle
It is only fired for so many
seconds, we want that beam

96
00:04:47,636 --> 00:04:51,306 A:middle
to decay over time and we
create that actions editor too

97
00:04:51,306 --> 00:04:56,066 A:middle
so that we can see it visually
and use it in the game.

98
00:04:56,066 --> 00:04:58,276 A:middle
All of the assets in the
game have been created

99
00:04:58,276 --> 00:05:00,056 A:middle
in asset catalogs and out

100

101
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

102
00:04:58,276 --> 00:05:00,056 A:middle
in asset catalogs and out

103
00:05:00,056 --> 00:05:03,136 A:middle
of Xcode 7 these asset
catalogs are converted

104
00:05:03,136 --> 00:05:04,616 A:middle
to texture atlases for us.

105
00:05:05,336 --> 00:05:07,906 A:middle
That means that we get the
best possible draw performance

106
00:05:07,906 --> 00:05:09,876 A:middle
when used in a game.

107
00:05:09,876 --> 00:05:11,086 A:middle
We have a lot of these images.

108
00:05:11,426 --> 00:05:14,456 A:middle
It also gives us a way to
specify the right images to use

109
00:05:14,806 --> 00:05:15,696 A:middle
for different devices.

110
00:05:16,926 --> 00:05:18,456 A:middle
This helps us to
optimize the size further.

111
00:05:19,886 --> 00:05:22,596 A:middle
When we were designing our
levels we used a reference

112
00:05:22,596 --> 00:05:26,736 A:middle
height of 768 points, the yellow
box there, that's our reference

113
00:05:26,736 --> 00:05:29,346 A:middle
for how much level we wanted
to be visible onscreen.

114
00:05:30,166 --> 00:05:35,106 A:middle
At that size our PlayerBot is
120 points, and now if we use

115
00:05:35,106 --> 00:05:39,826 A:middle
that level on an iPad, the
iPad is also 768 points,

116
00:05:40,086 --> 00:05:41,356 A:middle
so we'll know the size of
the PlayerBot on screen,

117
00:05:41,356 --> 00:05:43,676 A:middle
and he's going to be 120
points and we can work

118
00:05:43,676 --> 00:05:45,796 A:middle
out the image size we need

119
00:05:45,796 --> 00:05:47,416 A:middle
to get a sharp image
of him onscreen.

120
00:05:48,726 --> 00:05:52,906 A:middle
If we scale that level down
to an iPhone with, say,

121
00:05:52,906 --> 00:05:55,956 A:middle
a 320 point height, he
actually is a bit smaller,

122
00:05:56,126 --> 00:05:57,116 A:middle
he'll be 50 points high.

123
00:05:58,246 --> 00:06:00,376 A:middle
We don't need such a
high resolution texture

124

125
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

126
00:05:58,246 --> 00:06:00,376 A:middle
We don't need such a
high resolution texture

127
00:06:00,376 --> 00:06:02,526 A:middle
as on the iPad and
we can save space.

128
00:06:04,006 --> 00:06:08,186 A:middle
If we look at all of the devices
that we support with DemoBots,

129
00:06:08,186 --> 00:06:12,846 A:middle
iPad, iPhone and Mac, as that
Scene height scales we can work

130
00:06:12,846 --> 00:06:14,446 A:middle
out the corresponding
player height.

131
00:06:15,086 --> 00:06:20,876 A:middle
The iPhone 6 is slightly bigger
than the 4S through the 5S,

132
00:06:21,046 --> 00:06:24,226 A:middle
we used the same assets, it
is so small, you don't notice.

133
00:06:26,126 --> 00:06:31,186 A:middle
This then means you work out
the 1X, 2X, 3X assets we need

134
00:06:31,566 --> 00:06:34,146 A:middle
to make them look sharp
without using any more pixels

135
00:06:34,146 --> 00:06:35,176 A:middle
than we needed to.

136
00:06:35,176 --> 00:06:38,326 A:middle
We rounded the iPhone 6
Plus down to 180 pixels just

137
00:06:38,326 --> 00:06:41,276 A:middle
to keep things simple.

138
00:06:41,276 --> 00:06:43,976 A:middle
We can set up the assets
we want for each device.

139
00:06:44,756 --> 00:06:46,216 A:middle
We have a lot of
these in the game.

140
00:06:46,706 --> 00:06:48,886 A:middle
I really, really do
mean a lot of them.

141
00:06:48,956 --> 00:06:49,526 A:middle
There are thousands.

142
00:06:51,396 --> 00:06:54,196 A:middle
All of these character
assets are actually generated

143
00:06:54,196 --> 00:06:56,276 A:middle
from a 3D rendering output.

144
00:06:56,916 --> 00:06:57,686 A:middle
Which we can also connect.

145
00:06:58,596 --> 00:07:02,186 A:middle
We automated that creation
of the asset catalogs too.

146

147
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

148
00:06:58,596 --> 00:07:02,186 A:middle
We automated that creation
of the asset catalogs too.

149
00:07:02,836 --> 00:07:05,476 A:middle
The JSON file here,
the one frame

150
00:07:05,476 --> 00:07:07,576 A:middle
of the PlayerBot's
walk animation,

151
00:07:08,336 --> 00:07:09,886 A:middle
and we can create
these automatically,

152
00:07:09,886 --> 00:07:12,746 A:middle
this is what Xcode creates
with the asset catalogs

153
00:07:13,426 --> 00:07:16,226 A:middle
and we can automate the process
of picking the right images

154
00:07:16,226 --> 00:07:20,406 A:middle
for the right device and we'll
release the Asset Catalog format

155
00:07:20,406 --> 00:07:24,676 A:middle
reference in a future seed
to make it easier for you

156
00:07:25,096 --> 00:07:27,516 A:middle
to create these yourself
as well.

157
00:07:27,516 --> 00:07:29,036 A:middle
Another SpriteKit
feature that we used

158
00:07:29,036 --> 00:07:33,546 A:middle
in the game was SKCameraNode,
before that, if we wanted

159
00:07:34,066 --> 00:07:37,026 A:middle
to move the view around
the level, we actually had

160
00:07:37,026 --> 00:07:37,966 A:middle
to move the world, we had

161
00:07:37,966 --> 00:07:39,756 A:middle
to move the level
itself beneath the view.

162
00:07:41,816 --> 00:07:44,406 A:middle
with SKCameraNode
things are much simpler,

163
00:07:45,086 --> 00:07:46,666 A:middle
the camera is a node
in the scene.

164
00:07:46,666 --> 00:07:47,496 A:middle
It has a position.

165
00:07:48,186 --> 00:07:50,796 A:middle
Because it has a position,
we can move it around just

166
00:07:50,796 --> 00:07:51,716 A:middle
by changing that position.

167
00:07:51,886 --> 00:07:52,756 A:middle
Same as any other node.

168
00:07:52,756 --> 00:07:55,636 A:middle
It is easier to change where
the view is currently looking.

169
00:07:57,976 --> 00:08:01,046 A:middle
Because it is a node we can
do node-like things with it.

170

171
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

172
00:07:57,976 --> 00:08:01,046 A:middle
Because it is a node we can
do node-like things with it.

173
00:08:01,516 --> 00:08:03,536 A:middle
We can apply constraints
to that node for example.

174
00:08:04,096 --> 00:08:06,826 A:middle
We can use this to constrain
the node's Camera position

175
00:08:07,106 --> 00:08:12,476 A:middle
to a PlayerBot position,
when he runs to the corner

176
00:08:12,476 --> 00:08:16,986 A:middle
of the screen, we have a lot
of black space around him,

177
00:08:16,986 --> 00:08:21,106 A:middle
not as much level as we
would like on the screen.

178
00:08:21,106 --> 00:08:23,966 A:middle
We can make it better to
use a second restraint

179
00:08:24,726 --> 00:08:27,756 A:middle
to make sure we're never too
near the edge of the level.

180
00:08:28,126 --> 00:08:29,026 A:middle
That's how that looks.

181
00:08:30,206 --> 00:08:32,525 A:middle
We follow the PlayerBot
generally speaking

182
00:08:33,155 --> 00:08:35,746 A:middle
but if he's near we
stop following him

183
00:08:35,806 --> 00:08:36,986 A:middle
and keep more level onscreen.

184
00:08:37,686 --> 00:08:41,926 A:middle
This is easier to see when
the enemy bots attack you.

185
00:08:43,756 --> 00:08:45,256 A:middle
How do we do that?

186
00:08:45,676 --> 00:08:48,276 A:middle
We start by working out
the banding rectangle

187
00:08:48,476 --> 00:08:49,386 A:middle
of the entire level.

188
00:08:50,506 --> 00:08:53,776 A:middle
We then make a smaller
rectangle in set from that based

189
00:08:53,776 --> 00:08:55,246 A:middle
on the screens width and height

190
00:08:55,246 --> 00:08:56,286 A:middle
that they're viewing
the game on.

191
00:08:57,166 --> 00:09:00,716 A:middle
We make sure that the Camera can
never move outside of that box.

192

193
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

194
00:08:57,166 --> 00:09:00,716 A:middle
We make sure that the Camera can
never move outside of that box.

195
00:09:00,716 --> 00:09:02,206 A:middle
We constrain it to
that rectangle.

196
00:09:03,216 --> 00:09:04,676 A:middle
Then when the Camera moves

197
00:09:04,676 --> 00:09:07,106 A:middle
around following the player
it never gets too near

198
00:09:07,326 --> 00:09:11,206 A:middle
to the edge of the level.

199
00:09:11,206 --> 00:09:15,576 A:middle
Because the Camera is a node we
can also add child nodes to it,

200
00:09:15,626 --> 00:09:17,516 A:middle
which is good for
heads-up displays

201
00:09:17,516 --> 00:09:19,326 A:middle
like our timer label
we have in the game.

202
00:09:20,706 --> 00:09:21,876 A:middle
We don't want this
label to move,

203
00:09:21,876 --> 00:09:23,206 A:middle
we want it to stay
top and center.

204
00:09:23,896 --> 00:09:26,536 A:middle
So we add it as a child of the
Camera rather than had a child

205
00:09:26,536 --> 00:09:28,676 A:middle
of the Scene, that way,
as the Camera moves

206
00:09:28,676 --> 00:09:31,826 A:middle
around the label moves
with it and it is easier

207
00:09:31,826 --> 00:09:34,206 A:middle
to keep the permanent features
onscreen in the right place.

208
00:09:37,316 --> 00:09:39,426 A:middle
Those are some of the
SpriteKit features

209
00:09:39,426 --> 00:09:40,456 A:middle
that we have used in the game.

210
00:09:41,036 --> 00:09:43,106 A:middle
Let's look at some if of the
GameplayKit ones we used.

211
00:09:43,916 --> 00:09:46,896 A:middle
the first is GKStateMachine,
you would have seen

212
00:09:46,896 --> 00:09:49,656 A:middle
from the GameplayKit talk how
you can use state machines

213
00:09:49,656 --> 00:09:52,806 A:middle
to track what's going on
with characters and levels

214
00:09:52,976 --> 00:09:54,086 A:middle
and other elements of your game.

215
00:09:55,116 --> 00:09:57,286 A:middle
We use this amongst other
things for the PlayerBot,

216
00:09:57,896 --> 00:09:58,936 A:middle
this is the states he has.

217
00:09:59,336 --> 00:10:00,936 A:middle
He starts in his Appear state

218

219
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

220
00:09:59,336 --> 00:10:00,936 A:middle
He starts in his Appear state

221
00:10:01,006 --> 00:10:03,316 A:middle
where he teleports
into the game.

222
00:10:03,926 --> 00:10:07,606 A:middle
The nice thing about using
custom states for this is

223
00:10:07,606 --> 00:10:10,256 A:middle
that they can make sure that
the right thing happens.

224
00:10:10,256 --> 00:10:15,026 A:middle
They start and it starts a
timer, after the right amount

225
00:10:15,606 --> 00:10:18,426 A:middle
of time passes, it
moves straight

226
00:10:18,586 --> 00:10:21,236 A:middle
to the player control state
and turns on the input use

227
00:10:21,236 --> 00:10:22,756 A:middle
so you can control it.

228
00:10:24,376 --> 00:10:29,096 A:middle
If he's hit we move into the
Hit state, when we have this,

229
00:10:29,096 --> 00:10:32,346 A:middle
we enter a different
animation, the jump animation

230
00:10:32,346 --> 00:10:35,896 A:middle
and the player can't
be controlled when hit

231
00:10:35,986 --> 00:10:39,306 A:middle
and it turns off
input, tracks the state,

232
00:10:39,726 --> 00:10:41,616 A:middle
when the time has
passed, move him back

233
00:10:41,736 --> 00:10:44,376 A:middle
to the player control state.

234
00:10:44,376 --> 00:10:47,756 A:middle
If we get hit enough
times we have to recharge

235
00:10:47,796 --> 00:10:50,786 A:middle
and instead the Hit state
moves to the Recharging state.

236
00:10:51,616 --> 00:10:53,446 A:middle
That tracks how long we
have been recharging for.

237
00:10:53,926 --> 00:10:55,266 A:middle
The state actually does the job

238
00:10:55,476 --> 00:10:57,106 A:middle
of adding more charge
back on to the player.

239
00:10:57,866 --> 00:11:00,276 A:middle
Eventually when recharged,
it goes back

240

241
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

242
00:10:57,866 --> 00:11:00,276 A:middle
Eventually when recharged,
it goes back

243
00:11:00,336 --> 00:11:01,336 A:middle
to the PlayerControlled state.

244
00:11:01,336 --> 00:11:05,576 A:middle
That's a reasonably
complex set of behaviors

245
00:11:05,576 --> 00:11:06,426 A:middle
that the player can have.

246
00:11:07,216 --> 00:11:11,026 A:middle
By using a state machine to
not only codify the states,

247
00:11:11,026 --> 00:11:13,826 A:middle
make them happen, define the
right things to happen moving

248
00:11:14,096 --> 00:11:17,386 A:middle
from state to state it
is easier to make sure

249
00:11:17,386 --> 00:11:19,016 A:middle
that only the right thing
could happen in game.

250
00:11:19,016 --> 00:11:23,786 A:middle
Our player Bot can't do
something we don't want him to.

251
00:11:23,786 --> 00:11:27,456 A:middle
We use this also
for the game itself.

252
00:11:28,346 --> 00:11:30,646 A:middle
We have an active state
when you play a level,

253
00:11:31,526 --> 00:11:33,706 A:middle
if we hit pause we go
into a pause state.

254
00:11:34,126 --> 00:11:37,186 A:middle
This handles overlay,
by removing that overlay

255
00:11:37,446 --> 00:11:38,596 A:middle
when you move out
of the pause state.

256
00:11:39,566 --> 00:11:41,976 A:middle
If I complete the level,
we have a success state.

257
00:11:42,486 --> 00:11:45,406 A:middle
Again, this handles all of the
tasks of showing the buttons

258
00:11:45,586 --> 00:11:47,266 A:middle
and overlay for when
we succeeded.

259
00:11:47,526 --> 00:11:49,526 A:middle
The state knows the right things
to do in these situations.

260
00:11:50,826 --> 00:11:55,036 A:middle
Another aspect of GameplayKit
we have used is entities

261
00:11:55,226 --> 00:11:55,906 A:middle
and components.

262
00:11:56,776 --> 00:11:59,406 A:middle
Now components are a
really good way to package

263
00:11:59,406 --> 00:12:01,306 A:middle
up self-contained
pieces of functionality

264

265
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

266
00:11:59,406 --> 00:12:01,306 A:middle
up self-contained
pieces of functionality

267
00:12:01,306 --> 00:12:03,886 A:middle
that are shared amongst
different entities in the game.

268
00:12:04,586 --> 00:12:06,786 A:middle
We have three entities,
we have PlayerBot,

269
00:12:07,456 --> 00:12:09,016 A:middle
GroundBot and FlyingBot.

270
00:12:10,356 --> 00:12:11,656 A:middle
They have some things in common.

271
00:12:12,416 --> 00:12:14,036 A:middle
They all need to be
rendered into the Scene

272
00:12:14,036 --> 00:12:15,266 A:middle
and they all need a shadow.

273
00:12:15,656 --> 00:12:17,126 A:middle
So we have a render component

274
00:12:17,126 --> 00:12:18,546 A:middle
and a shadow component
to do these things.

275
00:12:19,506 --> 00:12:22,896 A:middle
They also all have animation,
physics and intelligence,

276
00:12:22,896 --> 00:12:25,006 A:middle
which is the name we've given
to the state machine tracking .

277
00:12:26,086 --> 00:12:29,406 A:middle
At this point you may think
they look very similar.

278
00:12:30,156 --> 00:12:33,356 A:middle
Why not have a base
Bot class providing all

279
00:12:33,356 --> 00:12:34,886 A:middle
of the functionality
to all three?

280
00:12:36,476 --> 00:12:38,266 A:middle
They're not actually
that similar after all.

281
00:12:39,176 --> 00:12:42,446 A:middle
The PlayerBot needs
input and we can control

282
00:12:42,446 --> 00:12:46,506 A:middle
that from a game controller or
keyboard or from touch control.

283
00:12:47,586 --> 00:12:49,186 A:middle
The GroundBot and
FlyingBot don't need that,

284
00:12:49,286 --> 00:12:50,656 A:middle
you never control
those characters.

285
00:12:51,096 --> 00:12:53,186 A:middle
They're driven instead
by an agent.

286
00:12:53,186 --> 00:12:55,526 A:middle
You will see later
how we use agents

287
00:12:55,526 --> 00:12:56,906 A:middle
to drive the characters
around the level.

288
00:12:57,736 --> 00:12:58,976 A:middle
Player Bot doesn't
need an agent,

289
00:12:59,186 --> 00:13:00,576 A:middle
he's powered by your input.

290

291
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

292
00:12:59,186 --> 00:13:00,576 A:middle
he's powered by your input.

293
00:13:01,866 --> 00:13:03,006 A:middle
Likewise, GroundBot

294
00:13:03,066 --> 00:13:05,816 A:middle
and FlyingBot have rules
telling the what they should do

295
00:13:05,816 --> 00:13:08,486 A:middle
in a given situation and we'll
look at those later on as well.

296
00:13:09,436 --> 00:13:13,046 A:middle
Player Bot doesn't, you
tell him what to do.

297
00:13:13,046 --> 00:13:15,876 A:middle
PlayerBot and GroundBot do
have one thing in common,

298
00:13:16,516 --> 00:13:18,586 A:middle
they both have a
movement component.

299
00:13:19,636 --> 00:13:22,746 A:middle
This component's job is to
say if I'm here and I need

300
00:13:22,746 --> 00:13:25,326 A:middle
to move this distance
at a certain angle make

301
00:13:25,326 --> 00:13:26,556 A:middle
that happen within the Scene.

302
00:13:27,206 --> 00:13:30,276 A:middle
Player Bot uses that
input to render it

303
00:13:30,276 --> 00:13:31,516 A:middle
in the Scene, move him around.

304
00:13:32,366 --> 00:13:35,036 A:middle
GroundBot uses it for a
charge forward attack,

305
00:13:35,036 --> 00:13:36,576 A:middle
he moves from here
to charge forward.

306
00:13:37,956 --> 00:13:39,566 A:middle
FlyingBot doesn't
need that capability.

307
00:13:39,766 --> 00:13:42,636 A:middle
He doesn't move so he
doesn't have that component.

308
00:13:43,746 --> 00:13:46,666 A:middle
These components, it is a
good way to break up bits

309
00:13:46,666 --> 00:13:48,716 A:middle
of functionality
and assign them only

310
00:13:48,716 --> 00:13:50,116 A:middle
to the entities that need them.

311
00:13:51,976 --> 00:13:54,506 A:middle
So these are some of the
ways we have used GameplayKit

312
00:13:54,506 --> 00:13:55,866 A:middle
functionality in the game.

313
00:13:55,866 --> 00:13:59,836 A:middle
I would like to invite Dave
on stage to tell you more

314
00:13:59,836 --> 00:14:01,126 A:middle
about how we have
used GameplayKit

315

316
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

317
00:13:59,836 --> 00:14:01,126 A:middle
about how we have
used GameplayKit

318
00:14:01,516 --> 00:14:04,566 A:middle
to create our games
Logic and Gameplay.

319
00:14:05,516 --> 00:14:09,306 A:middle
[Applause]

320
00:14:09,806 --> 00:14:10,236 A:middle
>> DAVE SCHAEFGEN:
Thank you, Dave.

321
00:14:10,976 --> 00:14:14,016 A:middle
So when we think about
Logic in Gameplay,

322
00:14:14,336 --> 00:14:16,806 A:middle
one of the most immediate
things that jump to my mind

323
00:14:16,806 --> 00:14:17,566 A:middle
when I think about logic

324
00:14:17,566 --> 00:14:20,926 A:middle
in gameplay is the actual
intelligence of my adversaries.

325
00:14:22,326 --> 00:14:26,386 A:middle
a big piece of that
intelligence is going

326
00:14:26,386 --> 00:14:30,876 A:middle
to be what I can
actually do in that space?

327
00:14:31,876 --> 00:14:34,866 A:middle
As we saw earlier in the demo,
if I'm a good Bot I'm moving

328
00:14:34,866 --> 00:14:36,866 A:middle
around the level,
patrolling circuits,

329
00:14:36,906 --> 00:14:37,936 A:middle
keepings things moving.

330
00:14:38,986 --> 00:14:42,556 A:middle
If I'm bad, I may want
to attack the PlayerBot.

331
00:14:42,786 --> 00:14:45,096 A:middle
Got him that time.

332
00:14:46,766 --> 00:14:51,016 A:middle
I may also wasn't to turn other
TaskBots bad so I have help

333
00:14:51,636 --> 00:14:53,026 A:middle
when it comes to
getting the player Bot.

334
00:14:53,526 --> 00:14:54,296 A:middle
Got that one too.

335
00:14:55,816 --> 00:15:01,956 A:middle
Finally, I may move around the
level opposite direction messing

336

337
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

338
00:14:55,816 --> 00:15:01,956 A:middle
Finally, I may move around the
level opposite direction messing

339
00:15:01,956 --> 00:15:05,586 A:middle
with induction, currents in
the circuits, causing problems.

340
00:15:06,926 --> 00:15:09,056 A:middle
Not as interesting, but now

341
00:15:09,466 --> 00:15:13,986 A:middle
that we know what we can do
the question becomes how do we

342
00:15:13,986 --> 00:15:16,746 A:middle
decide what we are going to do.

343
00:15:17,826 --> 00:15:19,576 A:middle
In DemoBots we chose

344
00:15:19,576 --> 00:15:24,826 A:middle
to implement a fuzzy logic
system with GKRuleSystem.

345
00:15:25,026 --> 00:15:29,466 A:middle
The advantages of this were
we could still take in a lot

346
00:15:29,466 --> 00:15:31,556 A:middle
of information about the
current state of the level,

347
00:15:32,036 --> 00:15:35,686 A:middle
what was going on, and
have our characters react

348
00:15:35,686 --> 00:15:36,616 A:middle
to that information.

349
00:15:37,466 --> 00:15:41,076 A:middle
We could do that without
having if else trees that went

350
00:15:41,076 --> 00:15:42,946 A:middle
on for hundreds of
lines of code.

351
00:15:43,276 --> 00:15:47,516 A:middle
We have simple rules and rely
on the simple rules to interact

352
00:15:47,516 --> 00:15:49,426 A:middle
with each other and
allow complex

353
00:15:49,426 --> 00:15:51,276 A:middle
and interesting behaviors
to emerge.

354
00:15:52,466 --> 00:15:57,496 A:middle
So if you're unfamiliar with
fuzzy Logic, I'll give you a bit

355
00:15:57,496 --> 00:15:59,716 A:middle
of an idea of what we're
talking about here.

356

357
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

358
00:16:00,246 --> 00:16:04,386 A:middle
The fuzzy that we're referring
to is actually the fact

359
00:16:04,386 --> 00:16:07,866 A:middle
that everything is not black
and white, true and false.

360
00:16:08,246 --> 00:16:10,346 A:middle
Our rules aren't
mutually exclusive.

361
00:16:11,016 --> 00:16:17,286 A:middle
We modeled our rules on natural
concepts and tried to think

362
00:16:17,286 --> 00:16:20,216 A:middle
of them like sentences that
you would say to a colleague.

363
00:16:20,766 --> 00:16:22,486 A:middle
The PlayerBot is nearby.

364
00:16:23,926 --> 00:16:28,176 A:middle
. These are implemented in
the fuzzy TaskBots rule class.

365
00:16:29,086 --> 00:16:30,696 A:middle
It is a subclass of GKRule.

366
00:16:30,696 --> 00:16:37,156 A:middle
We have actually tied the fact
of the rule to the grade here.

367
00:16:38,176 --> 00:16:41,266 A:middle
Only we assert the fact if the
grade is greater than zero.

368
00:16:42,886 --> 00:16:46,286 A:middle
This is interesting because
we made grade a function

369
00:16:46,286 --> 00:16:51,766 A:middle
of the actual state information
available in the level rather

370
00:16:51,766 --> 00:16:53,946 A:middle
than it being something that
you set up at the moment

371
00:16:53,946 --> 00:16:56,866 A:middle
that you create the GKRule.

372
00:16:56,866 --> 00:17:04,396 A:middle
Let's look at what those -- what
that proximity rule looks like.

373

374
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

375
00:16:56,866 --> 00:17:04,396 A:middle
Let's look at what those -- what
that proximity rule looks like.

376
00:17:04,636 --> 00:17:07,836 A:middle
Thinking about being
near or far,

377
00:17:08,415 --> 00:17:11,526 A:middle
and let's actually use a
graph to take a look at this

378
00:17:11,665 --> 00:17:13,256 A:middle
and see how these
functions work.

379
00:17:14,006 --> 00:17:17,445 A:middle
Up here near the origin you can
see that we have a PlayerBot

380
00:17:18,016 --> 00:17:19,306 A:middle
and out about as far away

381
00:17:19,306 --> 00:17:21,215 A:middle
as we can get them
you have the TaskBot,

382
00:17:21,806 --> 00:17:24,516 A:middle
if I bring in a graphical
representation

383
00:17:24,646 --> 00:17:29,796 A:middle
of the far rule it is pretty
simple to see that the grade

384
00:17:29,836 --> 00:17:31,936 A:middle
for the far rule is going
to be one in this case.

385
00:17:32,486 --> 00:17:35,476 A:middle
If I pull in the
medium and near rules,

386
00:17:35,846 --> 00:17:37,266 A:middle
it is clear that they're going

387
00:17:37,266 --> 00:17:39,806 A:middle
to have a zero grade
in this situation.

388
00:17:40,486 --> 00:17:43,546 A:middle
Now that doesn't lineup
seeming all that interesting,

389
00:17:43,546 --> 00:17:47,606 A:middle
it does kindof seem black and
white and a bit true/false.

390
00:17:47,606 --> 00:17:54,466 A:middle
If we move our task Bot closer
you can see what I'm talking

391
00:17:54,466 --> 00:17:55,616 A:middle
about clearly.

392
00:17:55,866 --> 00:17:58,226 A:middle
Here the grade for
the far rule is.

393
00:17:58,226 --> 00:18:02,656 A:middle
75 and for the medium
rule, about.

394

395
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

396
00:17:58,226 --> 00:18:02,656 A:middle
75 and for the medium
rule, about.

397
00:18:02,656 --> 00:18:08,186 A:middle
25. If we move him still
closer, things switch

398
00:18:08,256 --> 00:18:11,476 A:middle
and we have membership in both
the near and medium rules.

399
00:18:11,476 --> 00:18:16,136 A:middle
>> Now that you have
seen how the functions

400
00:18:16,356 --> 00:18:18,696 A:middle
that we have calculate
our grades,

401
00:18:19,966 --> 00:18:24,496 A:middle
let's look at how we actually
make decisions once we have

402
00:18:24,496 --> 00:18:27,416 A:middle
calculated those grades
for each of our rules.

403
00:18:27,856 --> 00:18:30,886 A:middle
So here are the rules that
we actually have in DemoBots.

404
00:18:31,716 --> 00:18:34,826 A:middle
Our first step, like I
said, is to go ahead,

405
00:18:34,886 --> 00:18:36,996 A:middle
evaluate them, calculate
the values.

406
00:18:37,976 --> 00:18:41,936 A:middle
The next thing we're going to
do is combine a few of them

407
00:18:42,686 --> 00:18:48,246 A:middle
to decide these are contributing
factors that we would want

408
00:18:48,246 --> 00:18:50,996 A:middle
to pay attention to when
hunting the PlayerBot.

409
00:18:51,666 --> 00:18:54,836 A:middle
Read like a sentence, you
can tell how this is working

410
00:18:54,836 --> 00:18:56,556 A:middle
like a telling of a story.

411
00:18:57,496 --> 00:19:00,246 A:middle
If a percentage of
bad TaskBots is high

412

413
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

414
00:18:57,496 --> 00:19:00,246 A:middle
If a percentage of
bad TaskBots is high

415
00:19:00,866 --> 00:19:03,376 A:middle
and the PlayerBot is
a medium distance away

416
00:19:04,056 --> 00:19:07,616 A:middle
and the good TaskBot is
also a medium distance away,

417
00:19:07,746 --> 00:19:11,456 A:middle
I want to hunt the PlayerBot.

418
00:19:12,586 --> 00:19:14,726 A:middle
The reason I would want
to do that in this case,

419
00:19:14,916 --> 00:19:18,746 A:middle
the way I think about it,
is there already are a lot

420
00:19:18,746 --> 00:19:22,166 A:middle
of bad TaskBots on this level,
I don't need to turn them,

421
00:19:22,466 --> 00:19:24,086 A:middle
I may as well hunt the player

422
00:19:24,086 --> 00:19:30,306 A:middle
at this point.The trouble I have
is I have 3 different grades

423
00:19:30,686 --> 00:19:34,726 A:middle
to represent this idea of
hunting the PlayerBot now.

424
00:19:35,066 --> 00:19:39,176 A:middle
So we're going to use
GKRuleSystems minimum grade

425
00:19:39,176 --> 00:19:44,906 A:middle
for facts to grab the minimum
grade for each of the facts

426
00:19:44,906 --> 00:19:47,236 A:middle
that we want to combine.

427
00:19:47,356 --> 00:19:53,026 A:middle
Now, the reason why we pick
the minimum is our mandate

428
00:19:53,346 --> 00:19:56,596 A:middle
for hunting the PlayerBot based
on that information is only

429
00:19:56,596 --> 00:20:02,496 A:middle
as strong as the weakest
fact contributing to it.

430

431
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

432
00:19:56,596 --> 00:20:02,496 A:middle
as strong as the weakest
fact contributing to it.

433
00:20:02,666 --> 00:20:06,806 A:middle
We could combine those
rules in any number of ways

434
00:20:06,896 --> 00:20:10,866 A:middle
and get several different
indicators saying

435
00:20:10,866 --> 00:20:13,786 A:middle
to hunt the PlayerBot
or to hunt TaskBots.

436
00:20:14,826 --> 00:20:17,746 A:middle
This is the stage
where we get to needing

437
00:20:17,746 --> 00:20:22,886 A:middle
to actually defuzz-ify the
rules to get one simple number

438
00:20:23,286 --> 00:20:26,646 A:middle
to really represent the idea
of hunting the PlayerBot.

439
00:20:27,716 --> 00:20:30,126 A:middle
In this case we just
take our facts,

440
00:20:30,816 --> 00:20:32,806 A:middle
we use the reduce
function in Swift

441
00:20:33,006 --> 00:20:36,036 A:middle
and the max function
to combine things.

442
00:20:36,426 --> 00:20:40,436 A:middle
In this case we actually --
we want hunting the PlayerBot

443
00:20:40,436 --> 00:20:42,326 A:middle
or hunting the TaskBots
to be represented

444
00:20:42,326 --> 00:20:46,396 A:middle
by the strongest grade
available of the ones we have.

445
00:20:47,166 --> 00:20:48,276 A:middle
Looking at these numbers,

446
00:20:48,276 --> 00:20:50,866 A:middle
it is pretty obvious
we'll hunt the PlayerBot.

447
00:20:50,866 --> 00:21:02,896 A:middle
Now that we know we want to hunt
the PlayerBot the first problem

448

449
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

450
00:20:50,866 --> 00:21:02,896 A:middle
Now that we know we want to hunt
the PlayerBot the first problem

451
00:21:02,896 --> 00:21:07,756 A:middle
we've got is how do I
actually get to the PlayerBot.

452
00:21:08,216 --> 00:21:10,036 A:middle
Often that's pretty
straightforward,

453
00:21:11,196 --> 00:21:16,006 A:middle
just move in a straight line
and you'll eventually get there.

454
00:21:16,366 --> 00:21:18,596 A:middle
Obstacles present a challenge,

455
00:21:18,736 --> 00:21:21,816 A:middle
here you see the FlyingBot
getting hung up there.

456
00:21:21,946 --> 00:21:26,396 A:middle
You remember from a sample from
a couple years ago, Adventure,

457
00:21:26,766 --> 00:21:31,016 A:middle
the goblins in that sample, were
really fond of this behavior.

458
00:21:32,306 --> 00:21:34,956 A:middle
We decided to do
something about that,

459
00:21:34,956 --> 00:21:39,616 A:middle
and in GameplayKit we have
made it really easy for you

460
00:21:39,616 --> 00:21:43,906 A:middle
to take advantage of pathfinding
in a world and get your Bots

461
00:21:44,416 --> 00:21:47,296 A:middle
or your enemies moving
easily like this.

462
00:21:47,676 --> 00:21:50,496 A:middle
It has great conveniences
for working with things

463
00:21:50,616 --> 00:21:54,376 A:middle
when you're using SpriteKit for
a game and it is really easy

464
00:21:54,816 --> 00:21:56,166 A:middle
to get things up and running.

465
00:21:56,956 --> 00:21:58,826 A:middle
Only a few lines of code.

466
00:21:59,006 --> 00:22:02,146 A:middle
Let's take a look at what
those lines look like.

467

468
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

469
00:21:59,006 --> 00:22:02,146 A:middle
Let's take a look at what
those lines look like.

470
00:22:04,136 --> 00:22:05,516 A:middle
So the first thing you're going

471
00:22:05,516 --> 00:22:11,096 A:middle
to do is actually get the
polygon obstacles making

472
00:22:11,096 --> 00:22:11,796 A:middle
up the level.

473
00:22:12,106 --> 00:22:18,256 A:middle
In our case we'll first search
for our nodes within our Scene.

474
00:22:18,306 --> 00:22:20,086 A:middle
They have all been
named obstacles.

475
00:22:20,176 --> 00:22:23,236 A:middle
When we have an array of
those nodes we'll pass it

476
00:22:23,436 --> 00:22:27,336 A:middle
to a convenience function
that SKNodes has in iOS 9,

477
00:22:27,786 --> 00:22:29,516 A:middle
obstacles for node
physics bodies

478
00:22:30,416 --> 00:22:34,796 A:middle
to take the actual physics
body you defined to use

479
00:22:34,796 --> 00:22:37,156 A:middle
that to define the obstacle.

480
00:22:38,076 --> 00:22:42,016 A:middle
When those obstacles, when we
have the obstacles we're going

481
00:22:42,016 --> 00:22:45,396 A:middle
to construct an obstacle
graph using them,

482
00:22:45,856 --> 00:22:47,996 A:middle
and also a buffer
radius parameter.

483
00:22:48,596 --> 00:22:52,936 A:middle
This parameter is a
little bit of extra spacing

484
00:22:53,296 --> 00:22:55,166 A:middle
around the actual obstacle.

485
00:22:55,886 --> 00:22:58,286 A:middle
A good way for you to
think about it might be

486
00:22:58,866 --> 00:23:01,716 A:middle
as you're walking towards a
doorway and you're walking

487

488
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

489
00:22:58,866 --> 00:23:01,716 A:middle
as you're walking towards a
doorway and you're walking

490
00:23:01,716 --> 00:23:04,346 A:middle
through the doorway you're
not actually going to walk

491
00:23:04,346 --> 00:23:06,696 A:middle
at one corner or the
other of the door frame.

492
00:23:07,226 --> 00:23:10,166 A:middle
You're going to aim for a point
in the middle of the doorway

493
00:23:10,416 --> 00:23:12,086 A:middle
where no part of your
body is actually going

494
00:23:12,086 --> 00:23:14,496 A:middle
to contact the door when
you walk through it.

495
00:23:14,726 --> 00:23:19,466 A:middle
This radius helps set that
spacing around the obstacles.

496
00:23:20,266 --> 00:23:26,176 A:middle
Next we'll take the TaskBot
and PlayerBot positions

497
00:23:26,686 --> 00:23:28,236 A:middle
and connect them to the graph.

498
00:23:29,516 --> 00:23:35,146 A:middle
Finally we will ask the
graph to give us a path

499
00:23:35,886 --> 00:23:37,486 A:middle
from the start node
to the end node.

500
00:23:38,126 --> 00:23:40,896 A:middle
We'll get back in array
of the individual nodes

501
00:23:41,306 --> 00:23:44,646 A:middle
that are necessary to get
from point A to point B

502
00:23:45,396 --> 00:23:49,326 A:middle
and it really is that simple
to turn things from walking

503
00:23:49,326 --> 00:23:53,836 A:middle
into memory chips and along them
to actually walking around them.

504
00:23:55,126 --> 00:23:57,716 A:middle
We have a path, we have points,

505
00:23:58,066 --> 00:23:59,806 A:middle
but how am I actually
going to get there?

506

507
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

508
00:24:00,276 --> 00:24:03,096 A:middle
How do I actually get there
and make it look nice?

509
00:24:04,076 --> 00:24:07,976 A:middle
Well, GameplayKit has
an answer for us again.

510
00:24:07,976 --> 00:24:11,396 A:middle
This time it is GKAgent 2D.

511
00:24:11,676 --> 00:24:15,696 A:middle
This is one of my favorite
classes in GameplayKit.

512
00:24:16,576 --> 00:24:20,066 A:middle
This is a GKComponent,
so it works very nicely

513
00:24:20,066 --> 00:24:22,836 A:middle
with the Entity/Component system
that Dave talked about earlier.

514
00:24:24,326 --> 00:24:27,666 A:middle
It is very easy to
get things set up.

515
00:24:28,276 --> 00:24:30,676 A:middle
You have a GKBehavior
that describes what it is

516
00:24:30,676 --> 00:24:32,116 A:middle
that you want this agent to do,

517
00:24:32,246 --> 00:24:35,316 A:middle
it is kind of a container
for GKGoals.

518
00:24:35,986 --> 00:24:40,806 A:middle
GKGoal, lucky for us in this
case actually has a couple

519
00:24:40,806 --> 00:24:46,566 A:middle
of different constructions that
allow us to work with paths.

520
00:24:47,016 --> 00:24:49,006 A:middle
Because the agent
world and the world

521
00:24:49,006 --> 00:24:50,906 A:middle
of GameplayKit is
different from the world

522
00:24:50,906 --> 00:24:55,746 A:middle
of SpriteKit the delegate
here makes it very simple

523
00:24:56,036 --> 00:24:58,926 A:middle
to integrate the two of them.

524
00:24:59,206 --> 00:25:01,536 A:middle
Let's take a look at
what it actually --

525

526
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

527
00:24:59,206 --> 00:25:01,536 A:middle
Let's take a look at
what it actually --

528
00:25:01,536 --> 00:25:03,206 A:middle
you know, what the
code looks like.

529
00:25:04,286 --> 00:25:11,286 A:middle
We'll take that array of path
nodes that we had from before.

530
00:25:11,286 --> 00:25:13,046 A:middle
We're going to initialize them.

531
00:25:13,046 --> 00:25:19,006 A:middle
We're going to pass them to an
initializer to create our path.

532
00:25:19,866 --> 00:25:22,836 A:middle
There is another parameter
here and that is the radius.

533
00:25:22,836 --> 00:25:23,556 A:middle
What I want you to think

534
00:25:23,556 --> 00:25:26,946 A:middle
about here is how do
you want this path

535
00:25:26,976 --> 00:25:28,546 A:middle
to be defined for your agent.

536
00:25:28,906 --> 00:25:30,716 A:middle
Very small values will result

537
00:25:30,716 --> 00:25:33,356 A:middle
in your agent treating your
path like a tight rope.

538
00:25:34,096 --> 00:25:38,036 A:middle
Larger values, you know,
could have them treating it

539
00:25:38,036 --> 00:25:40,776 A:middle
like an 8-lane highway,
moving all over the place.

540
00:25:41,276 --> 00:25:42,516 A:middle
You'll want to fine tune

541
00:25:42,516 --> 00:25:44,396 A:middle
that for what works
best for your game.

542
00:25:46,376 --> 00:25:47,966 A:middle
Next we'll create a behavior.

543
00:25:48,546 --> 00:25:50,346 A:middle
Here it is just an
empty behavior,

544
00:25:50,346 --> 00:25:53,066 A:middle
nothing really going on yet.

545
00:25:53,066 --> 00:25:55,956 A:middle
Then we'll add goals to it.

546
00:25:55,956 --> 00:25:58,276 A:middle
These are the two
path-related goals I was talking

547
00:25:58,276 --> 00:25:59,076 A:middle
about from before.

548
00:25:59,716 --> 00:26:05,546 A:middle
The first one on the screen,
our goal to follow path is going

549

550
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

551
00:25:59,716 --> 00:26:05,546 A:middle
The first one on the screen,
our goal to follow path is going

552
00:26:05,546 --> 00:26:09,136 A:middle
to establish the direction in
which we'll travel our array.

553
00:26:09,526 --> 00:26:11,566 A:middle
In this case we'll move
forward in a forward direction

554
00:26:11,726 --> 00:26:16,006 A:middle
from the start position, our
TaskBots to the end position,

555
00:26:16,166 --> 00:26:17,086 A:middle
which was our PlayerBot.

556
00:26:18,106 --> 00:26:23,646 A:middle
The stay on path goal is
there to motivate our agent,

557
00:26:23,976 --> 00:26:28,866 A:middle
to actually remain within
the bounds of the path

558
00:26:29,146 --> 00:26:30,626 A:middle
that we defined earlier.

559
00:26:31,186 --> 00:26:35,756 A:middle
Now that we have a working
behavior we assign it

560
00:26:35,756 --> 00:26:39,366 A:middle
to our agent to get him moving.

561
00:26:39,726 --> 00:26:43,946 A:middle
the agent works like many

562
00:26:43,946 --> 00:26:46,716 A:middle
of the other components
within GameplayKit.

563
00:26:46,716 --> 00:26:48,756 A:middle
It is updated on a cycle.

564
00:26:49,416 --> 00:26:55,756 A:middle
When you've added it into your
update loop it will notify you

565
00:26:55,756 --> 00:26:57,816 A:middle
before and after changes,

566
00:26:57,866 --> 00:27:00,216 A:middle
and this delegate
notification before

567

568
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

569
00:26:57,866 --> 00:27:00,216 A:middle
and this delegate
notification before

570
00:27:00,216 --> 00:27:02,226 A:middle
and after changes
is the ideal place

571
00:27:02,226 --> 00:27:07,406 A:middle
to actually get things working
and hooked up with SpriteKit.

572
00:27:07,876 --> 00:27:12,306 A:middle
In WillUpdate, this is
a position that you want

573
00:27:12,306 --> 00:27:17,556 A:middle
to take the information
from your SpriteKit node

574
00:27:17,726 --> 00:27:21,326 A:middle
that represents your
agent in Scene and pull

575
00:27:21,326 --> 00:27:24,296 A:middle
that information back
over and update the agent

576
00:27:25,266 --> 00:27:27,496 A:middle
because we're doing
this at the front

577
00:27:28,226 --> 00:27:31,546 A:middle
of the SpriteKit
update loop and the end

578
00:27:31,906 --> 00:27:34,786 A:middle
of the last SpriteKit update
loop would have involved

579
00:27:35,026 --> 00:27:38,626 A:middle
simulating physics, applying
constraints to your node

580
00:27:38,866 --> 00:27:40,866 A:middle
which may have caused
its position to move

581
00:27:40,966 --> 00:27:44,056 A:middle
from where the agent thought it
was at the last time through.

582
00:27:44,676 --> 00:27:50,306 A:middle
In AgentDidUpdate, we'll take
the information from the agent,

583
00:27:51,296 --> 00:27:54,146 A:middle
its position, its rotation,
things of that nature

584
00:27:54,996 --> 00:27:58,636 A:middle
and pull those back over into
the SpriteKit world updating our

585
00:27:58,636 --> 00:28:01,946 A:middle
node before it goes
into physics simulation

586

587
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

588
00:27:58,636 --> 00:28:01,946 A:middle
node before it goes
into physics simulation

589
00:28:02,336 --> 00:28:08,036 A:middle
and constraint application
this time around.

590
00:28:08,036 --> 00:28:14,396 A:middle
Really, that is what got us
to this point with DemoBots

591
00:28:15,116 --> 00:28:18,256 A:middle
and an intelligence that
works nicely, moving readily

592
00:28:18,256 --> 00:28:23,746 A:middle
around the screen, smoothly
interacting with you.

593
00:28:23,746 --> 00:28:27,256 A:middle
This is something extra I
guess, we left debug drawing

594
00:28:27,956 --> 00:28:30,196 A:middle
in the sample that
you can download.

595
00:28:30,996 --> 00:28:33,936 A:middle
You can enable it by
hitting the slash key.

596
00:28:35,076 --> 00:28:38,466 A:middle
The nice thing about this,
it helps you visualize some

597
00:28:38,466 --> 00:28:40,066 A:middle
of the parameters we
talked about earlier.

598
00:28:40,406 --> 00:28:44,896 A:middle
The orange boxes are buffer
radius around the obstacles

599
00:28:46,386 --> 00:28:51,786 A:middle
and the thick lines that you can
see emanating from the player,

600
00:28:51,786 --> 00:28:56,616 A:middle
the task Bots are a
representation of that path

601
00:28:57,536 --> 00:29:01,506 A:middle
that we talked about, the
path radius that was there.

602

603
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

604
00:28:57,536 --> 00:29:01,506 A:middle
that we talked about, the
path radius that was there.

605
00:29:01,506 --> 00:29:04,326 A:middle
Now that we have a game, I would

606
00:29:04,326 --> 00:29:07,056 A:middle
like to invite my colleague
Michael up on stage.

607
00:29:07,426 --> 00:29:09,506 A:middle
He's going to discuss
with you how

608
00:29:09,506 --> 00:29:12,466 A:middle
to get your users playing
your game that much faster.

609
00:29:13,086 --> 00:29:13,346 A:middle
Michael.

610
00:29:14,516 --> 00:29:18,846 A:middle
[Applause]

611
00:29:19,346 --> 00:29:20,056 A:middle
>> MICHAEL DEWITT:
Thank you very much.

612
00:29:20,056 --> 00:29:23,826 A:middle
We'll talk about
taking a fun game

613
00:29:23,826 --> 00:29:27,336 A:middle
and making a great overall
experience for your users.

614
00:29:27,336 --> 00:29:29,896 A:middle
I'll boil it down to
one phrase and that is,

615
00:29:29,896 --> 00:29:31,466 A:middle
of course, time to fun.

616
00:29:31,846 --> 00:29:33,836 A:middle
How long does it
take for your users

617
00:29:33,836 --> 00:29:35,456 A:middle
to start really enjoying
your game?

618
00:29:36,386 --> 00:29:39,566 A:middle
The first barrier to entry there
is really the initial download.

619
00:29:40,026 --> 00:29:44,036 A:middle
If you're shipping an app that's
too big some users won't be able

620
00:29:44,036 --> 00:29:45,746 A:middle
to download it over
cellular connection

621
00:29:46,096 --> 00:29:47,796 A:middle
and it can take a
while even on Wi-Fi.

622
00:29:48,646 --> 00:29:50,616 A:middle
This is the biggest latency

623
00:29:50,926 --> 00:29:53,256 A:middle
between your user finding
the app on the App Store

624
00:29:53,346 --> 00:29:56,426 A:middle
and deciding to get into it.

625
00:29:56,426 --> 00:30:00,056 A:middle
But we know this 100 mega
download limit is hard

626

627
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

628
00:29:56,426 --> 00:30:00,056 A:middle
But we know this 100 mega
download limit is hard

629
00:30:00,056 --> 00:30:01,356 A:middle
for games to stay under.

630
00:30:01,736 --> 00:30:03,906 A:middle
We'll go back to DemoBots
and see how we handle this.

631
00:30:04,486 --> 00:30:09,126 A:middle
If you focus on the PlayerBot
you notice we're not looking

632
00:30:09,126 --> 00:30:10,776 A:middle
strictly top-down
on the character.

633
00:30:11,386 --> 00:30:14,276 A:middle
It is not a 2D game but
an isometric feel here.

634
00:30:14,936 --> 00:30:17,406 A:middle
We pulled that off by
giving this character

635
00:30:17,406 --> 00:30:18,836 A:middle
multiple orientations.

636
00:30:19,566 --> 00:30:22,256 A:middle
As you move the character
around the map,

637
00:30:22,786 --> 00:30:25,486 A:middle
we'll swap out the texture
representing the character

638
00:30:25,716 --> 00:30:27,426 A:middle
to get this perspective.

639
00:30:28,316 --> 00:30:32,446 A:middle
When you add all of the extra
frames in there, it takes space.

640
00:30:32,506 --> 00:30:34,976 A:middle
It is only 6 megabytes,
that's small for a game.

641
00:30:34,976 --> 00:30:38,146 A:middle
When you consider it is 6
megabytes times the three bots

642
00:30:38,146 --> 00:30:41,586 A:middle
we have times the different
actions they can perform,

643
00:30:41,886 --> 00:30:45,476 A:middle
we need the orientation frames
for the Player Bot when idling,

644
00:30:45,476 --> 00:30:50,216 A:middle
hit, walking around, so
this starts to add up.

645
00:30:50,436 --> 00:30:54,226 A:middle
Traditionally, that means that
all of the assets plus the 1X,

646
00:30:54,226 --> 00:30:58,136 A:middle
2X, 3X versions, they're
bundled in the app.

647
00:30:58,386 --> 00:31:00,306 A:middle
We have a better
story for this now.

648

649
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

650
00:30:58,386 --> 00:31:00,306 A:middle
We have a better
story for this now.

651
00:31:00,686 --> 00:31:02,196 A:middle
You may have heard about
it earlier this week.

652
00:31:02,746 --> 00:31:06,456 A:middle
If you use asset catalogs
you will take advantage

653
00:31:06,456 --> 00:31:07,916 A:middle
of a new feature
called app slicing.

654
00:31:08,386 --> 00:31:12,296 A:middle
What app slicing will do
is breakdown the 1X, 2X,

655
00:31:12,336 --> 00:31:16,486 A:middle
3X for the actual device
that they're used on.

656
00:31:17,226 --> 00:31:20,436 A:middle
This is going to save us a ton
of space right off the bat just

657
00:31:20,436 --> 00:31:21,896 A:middle
by using the asset catalogs

658
00:31:21,946 --> 00:31:24,076 A:middle
and letting the App
Store slice it for us.

659
00:31:24,296 --> 00:31:26,776 A:middle
It is not only that we
now save a bunch of space,

660
00:31:26,776 --> 00:31:29,006 A:middle
it is what can we do with
the extra room on our app.

661
00:31:29,006 --> 00:31:30,926 A:middle
I'm looking at the
graph and it is empty.

662
00:31:31,446 --> 00:31:34,966 A:middle
In DemoBots, it has
practical implications.

663
00:31:36,586 --> 00:31:40,306 A:middle
We started with 8 orientations
and I'll show you a video here.

664
00:31:40,306 --> 00:31:41,156 A:middle
Watch closely.

665
00:31:41,156 --> 00:31:44,096 A:middle
The PlayerBot, it looks like
it is facing directly forward,

666
00:31:44,096 --> 00:31:46,646 A:middle
you will notice, watch
the movement closely,

667
00:31:46,646 --> 00:31:58,696 A:middle
see if you notice something.

668
00:31:58,796 --> 00:32:01,526 A:middle
So especially when the character
is moving back towards the top

669

670
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

671
00:31:58,796 --> 00:32:01,526 A:middle
So especially when the character
is moving back towards the top

672
00:32:01,526 --> 00:32:04,596 A:middle
of the map there, we
term that skating.

673
00:32:05,026 --> 00:32:07,096 A:middle
While we only have
the eight orientations

674
00:32:07,096 --> 00:32:08,866 A:middle
to represent the
characters movement,

675
00:32:09,016 --> 00:32:13,236 A:middle
the player is supplying 360°
of input, we can be slightly off

676
00:32:13,306 --> 00:32:17,256 A:middle
of that orientation while
not triggering the next

677
00:32:17,256 --> 00:32:19,136 A:middle
and you get the strafing
behavior.

678
00:32:19,976 --> 00:32:24,146 A:middle
More frustrating than that
though was using the eight

679
00:32:24,146 --> 00:32:27,176 A:middle
orientations means you could
end up in a situation like this

680
00:32:27,336 --> 00:32:29,496 A:middle
where the PlayerBot is
facing directly forward,

681
00:32:29,706 --> 00:32:33,076 A:middle
looks like it should be easily
hitting that TaskBot but isn't

682
00:32:33,076 --> 00:32:36,516 A:middle
because of the debug drawing,
you see the player is aiming

683
00:32:36,596 --> 00:32:39,546 A:middle
to the side and the user
has no way to see this.

684
00:32:40,236 --> 00:32:42,026 A:middle
With that extra space we got

685
00:32:42,026 --> 00:32:43,736 A:middle
from app slicing we
bumped it up a notch.

686
00:32:44,196 --> 00:32:46,016 A:middle
We went to 16 orientations,

687
00:32:46,496 --> 00:32:49,616 A:middle
that makes movement feel a lot
smoother throughout the game

688
00:32:50,636 --> 00:32:53,776 A:middle
so you can see we have many
more animation frames here

689
00:32:53,776 --> 00:32:55,146 A:middle
to represent that.

690
00:32:56,456 --> 00:33:00,186 A:middle
Then when it comes to aiming,
now it is much more granular.

691

692
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

693
00:32:56,456 --> 00:33:00,186 A:middle
Then when it comes to aiming,
now it is much more granular.

694
00:33:00,396 --> 00:33:02,766 A:middle
The direction where the
character faces almost

695
00:33:02,766 --> 00:33:05,036 A:middle
corresponds exactly with
where the beam's going to hit.

696
00:33:05,036 --> 00:33:09,786 A:middle
You click through there,
it is easier for the user

697
00:33:09,786 --> 00:33:12,526 A:middle
to know what's going
on with the game.

698
00:33:12,716 --> 00:33:15,556 A:middle
That's app slicing, we use
that in DemoBots simply

699
00:33:15,556 --> 00:33:18,246 A:middle
by putting our texture
atlases within Asset Catalogs,

700
00:33:18,636 --> 00:33:21,566 A:middle
it helps us to greatly decrease
the size of the app overall,

701
00:33:21,566 --> 00:33:23,146 A:middle
but it's more than that,

702
00:33:23,216 --> 00:33:25,436 A:middle
we can actually improve
the gameplay now

703
00:33:25,436 --> 00:33:28,276 A:middle
because we have the extra space.

704
00:33:28,276 --> 00:33:30,826 A:middle
This feature works super
well for assets that you need

705
00:33:30,826 --> 00:33:32,606 A:middle
in your game all the time.

706
00:33:32,666 --> 00:33:34,786 A:middle
DemoBots is not much of
a game unless we keep the

707
00:33:34,786 --> 00:33:35,746 A:middle
PlayerBot around.

708
00:33:36,686 --> 00:33:39,926 A:middle
But there are other assets
we don't necessarily need all

709
00:33:39,926 --> 00:33:40,426 A:middle
the time.

710
00:33:40,516 --> 00:33:42,636 A:middle
For that we have
another technology

711
00:33:42,636 --> 00:33:43,246 A:middle
that you may have heard

712
00:33:43,246 --> 00:33:45,746 A:middle
about earlier this week,
on demand resources.

713
00:33:46,176 --> 00:33:49,376 A:middle
The mild overview of this, it
lets you tag resources just

714
00:33:49,376 --> 00:33:51,516 A:middle
with a simple string
for download later on.

715
00:33:51,516 --> 00:33:54,116 A:middle
I'll talk about how we
use this in DemoBots.

716
00:33:54,556 --> 00:33:56,236 A:middle
The first place,
maybe it is obvious,

717
00:33:56,236 --> 00:33:59,396 A:middle
we have multiple levels.We
can tag those level 1,

718
00:33:59,396 --> 00:34:00,696 A:middle
level 2, and level 3 .

719

720
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

721
00:33:59,396 --> 00:34:00,696 A:middle
level 2, and level 3 .

722
00:34:01,236 --> 00:34:04,536 A:middle
The advantage here, it is
now that we have tagged these

723
00:34:04,536 --> 00:34:06,936 A:middle
with ODR we can actually say

724
00:34:06,936 --> 00:34:09,966 A:middle
if the user initially downloads
the game, we know they'll go

725
00:34:09,966 --> 00:34:11,996 A:middle
to level 1, there is no reason

726
00:34:11,996 --> 00:34:13,585 A:middle
to include the other
two levels there.

727
00:34:14,826 --> 00:34:18,156 A:middle
It gets even more interesting
as the game progresses,

728
00:34:18,696 --> 00:34:21,726 A:middle
because we can predict
with this linear flow

729
00:34:21,726 --> 00:34:24,076 A:middle
that the user will
proceed on to level 3

730
00:34:24,426 --> 00:34:28,196 A:middle
so we'll start downloading that
level early and it is unlikely

731
00:34:28,196 --> 00:34:30,106 A:middle
that they'll replay level 1

732
00:34:30,466 --> 00:34:32,545 A:middle
to we can recycle some
of those resources.

733
00:34:32,946 --> 00:34:35,676 A:middle
Let's take it a step further.

734
00:34:36,315 --> 00:34:40,176 A:middle
If we look closely at
level 2 and you will notice

735
00:34:40,176 --> 00:34:42,335 A:middle
from the demo and from
this small picture

736
00:34:42,335 --> 00:34:44,896 A:middle
that only the FlyingBot
shows up in this level

737
00:34:45,045 --> 00:34:46,556 A:middle
and shows up again in level 3.

738
00:34:47,275 --> 00:34:51,416 A:middle
Contrast that with a GroundBot
who is in levels 1 and 3.

739
00:34:52,726 --> 00:34:55,536 A:middle
When we tag the characters
individually it allows us

740
00:34:55,536 --> 00:34:57,636 A:middle
to breakdown our
resources even further.

741
00:34:57,756 --> 00:34:59,616 A:middle
If we know the user
is downloading the app

742
00:34:59,616 --> 00:35:02,816 A:middle
for the first time we only ship
with the GroundBot in level 1

743

744
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

745
00:34:59,616 --> 00:35:02,816 A:middle
for the first time we only ship
with the GroundBot in level 1

746
00:35:02,996 --> 00:35:04,876 A:middle
and we can do the
FlyingBot later on.

747
00:35:05,606 --> 00:35:07,586 A:middle
And if you're on a device
that's tight for storage,

748
00:35:07,586 --> 00:35:10,206 A:middle
maybe when the user's playing
level 2 you can purge the

749
00:35:10,206 --> 00:35:13,166 A:middle
GroundBot and then bring
them both back for level 3.

750
00:35:14,036 --> 00:35:16,116 A:middle
You can see how we
laid out the tags

751
00:35:16,456 --> 00:35:19,466 A:middle
in the Project Navigator
under resource tags.

752
00:35:20,296 --> 00:35:22,996 A:middle
You will see that the assets
for level 1 are tagged

753
00:35:22,996 --> 00:35:25,756 A:middle
as prefetched, those
are coming down shortly

754
00:35:25,756 --> 00:35:28,616 A:middle
after the app has been
installed, but not included

755
00:35:28,616 --> 00:35:31,826 A:middle
in the bundle size, whereas the
other resources can be tagged

756
00:35:31,826 --> 00:35:33,356 A:middle
for download when
we request them.

757
00:35:34,636 --> 00:35:36,606 A:middle
That's on-demand resources.

758
00:35:36,836 --> 00:35:40,626 A:middle
We used it in DemoBots to tag
the resources for later download

759
00:35:40,726 --> 00:35:43,156 A:middle
which gives us a faster
initial download time.

760
00:35:43,156 --> 00:35:45,606 A:middle
We can cut a bunch of stuff out
that we don't need immediately.

761
00:35:46,186 --> 00:35:49,096 A:middle
Overall it helps us keep the
storage footprint small too.

762
00:35:49,356 --> 00:35:50,676 A:middle
That's the bigger message here.

763
00:35:50,676 --> 00:35:54,536 A:middle
You can make a more rich game
and have many more assets

764
00:35:54,856 --> 00:35:57,276 A:middle
because you are still keeping
the same footprint on device

765
00:35:57,496 --> 00:36:01,436 A:middle
but accessing everything
else on demand.

766

767
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

768
00:35:57,496 --> 00:36:01,436 A:middle
but accessing everything
else on demand.

769
00:36:01,706 --> 00:36:04,186 A:middle
We recognize this
does add complication.

770
00:36:05,006 --> 00:36:09,066 A:middle
When you talk about presenting
the next Scene traditionally you

771
00:36:09,066 --> 00:36:12,316 A:middle
know it is in local storage,
you can prepare those resources,

772
00:36:12,316 --> 00:36:14,246 A:middle
and when the user requests
it, you can present.

773
00:36:15,326 --> 00:36:17,236 A:middle
Now we're adding an
extra complication.

774
00:36:17,236 --> 00:36:20,556 A:middle
Maybe you need to download
those resources, and of course

775
00:36:20,556 --> 00:36:23,446 A:middle
with network connection
that download can fail.

776
00:36:24,556 --> 00:36:26,496 A:middle
If you want to get the
space savings, you will have

777
00:36:26,496 --> 00:36:29,606 A:middle
to purge the resources
at some point and rinse

778
00:36:29,606 --> 00:36:30,676 A:middle
and repeat that whole cycle.

779
00:36:31,566 --> 00:36:35,166 A:middle
This can get complicated
and I want to focus

780
00:36:35,166 --> 00:36:36,726 A:middle
on how we solved it in DemoBots.

781
00:36:37,156 --> 00:36:39,916 A:middle
Specifically going back to a
technology that Dave mentioned

782
00:36:39,916 --> 00:36:42,176 A:middle
at the top of the talk,
the GKStateMachine.

783
00:36:42,966 --> 00:36:46,906 A:middle
If we use that to model this,
we call it our SceneLoader

784
00:36:46,906 --> 00:36:48,856 A:middle
and it has six associated
states.

785
00:36:49,516 --> 00:36:51,116 A:middle
You will notice that
only two of the states,

786
00:36:51,116 --> 00:36:53,436 A:middle
the downloading resources
and download failed state,

787
00:36:53,436 --> 00:36:55,116 A:middle
they're actually
associated with ODR

788
00:36:55,206 --> 00:36:58,126 A:middle
because this is a full pipeline
to model bringing your resources

789
00:36:58,126 --> 00:37:00,976 A:middle
into memory whether they're
from local storage or need

790

791
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

792
00:36:58,126 --> 00:37:00,976 A:middle
into memory whether they're
from local storage or need

793
00:37:00,976 --> 00:37:02,156 A:middle
to be downloaded first.

794
00:37:02,926 --> 00:37:04,486 A:middle
the real advantage we're getting

795
00:37:04,486 --> 00:37:07,576 A:middle
from using the state machine
is how we model the transition

796
00:37:07,576 --> 00:37:08,436 A:middle
from states.

797
00:37:08,646 --> 00:37:09,646 A:middle
If we look closely

798
00:37:09,646 --> 00:37:14,646 A:middle
at the preparing resources state
we can enforce what are the

799
00:37:14,646 --> 00:37:18,276 A:middle
valid next states by
overriding IsValidNextState

800
00:37:18,276 --> 00:37:20,316 A:middle
in our GKState subclass

801
00:37:21,186 --> 00:37:24,226 A:middle
and we can say the state
machine can only move

802
00:37:24,226 --> 00:37:27,416 A:middle
on to the ready state if
the Scene is indeed loaded,

803
00:37:28,266 --> 00:37:30,296 A:middle
or we can move back
to the available state

804
00:37:30,296 --> 00:37:32,036 A:middle
if the user's canceled
this request.

805
00:37:32,336 --> 00:37:34,466 A:middle
We're not going to go back
to downloading while trying

806
00:37:34,466 --> 00:37:37,356 A:middle
to prepare our resources
because we're able to enforce it

807
00:37:37,356 --> 00:37:39,406 A:middle
with this IsValidNextState
and so it leads

808
00:37:39,406 --> 00:37:41,086 A:middle
to much more determininistic
behavior.

809
00:37:42,716 --> 00:37:44,256 A:middle
Alright, so to wrap things up,

810
00:37:44,256 --> 00:37:48,316 A:middle
I'll share a final few tips we
learned developing this game.

811
00:37:48,876 --> 00:37:51,196 A:middle
the first, if you're
using on-demand resources,

812
00:37:51,196 --> 00:37:53,296 A:middle
put that download
request in early.

813
00:37:53,636 --> 00:37:56,396 A:middle
If you have a predictable
progression in the game,

814
00:37:56,626 --> 00:37:58,456 A:middle
you can start downloading
level 2 as soon

815
00:37:58,456 --> 00:38:01,036 A:middle
as the player begins level 1.

816

817
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

818
00:37:58,456 --> 00:38:01,036 A:middle
as the player begins level 1.

819
00:38:02,516 --> 00:38:06,196 A:middle
Don't forget about the tools
for ODR that are within Xcode.

820
00:38:06,506 --> 00:38:09,826 A:middle
You can look at the disk
report tool and specifically

821
00:38:09,826 --> 00:38:11,296 A:middle
under the on-demand
resources see

822
00:38:11,296 --> 00:38:14,186 A:middle
if your tags have been
downloaded or are currently

823
00:38:14,186 --> 00:38:16,206 A:middle
in use or have already
been purged.

824
00:38:16,206 --> 00:38:17,086 A:middle
This is really useful.

825
00:38:18,896 --> 00:38:21,856 A:middle
Additionally, if the player
is coming up to a junction

826
00:38:22,406 --> 00:38:24,446 A:middle
when they'll need
additional resources

827
00:38:24,446 --> 00:38:26,346 A:middle
and you haven't downloaded
to prepare them yet.

828
00:38:26,616 --> 00:38:28,736 A:middle
You can modify the
priority of your request.

829
00:38:29,446 --> 00:38:31,606 A:middle
This means that you can
bump up the loading priority

830
00:38:31,606 --> 00:38:35,346 A:middle
on the bundle resource request,
it is a scale between 0 and 1

831
00:38:35,346 --> 00:38:38,476 A:middle
and there is even a constant for
urgent if the user is blocked

832
00:38:38,476 --> 00:38:39,626 A:middle
and you're trying to download.

833
00:38:40,246 --> 00:38:44,076 A:middle
We modeled preparing with an
NSOperation queue you can bump

834
00:38:44,076 --> 00:38:48,116 A:middle
up quality of service there.

835
00:38:48,366 --> 00:38:51,986 A:middle
Overall in DemoBots we
wanted to do a ton of things,

836
00:38:51,986 --> 00:38:55,276 A:middle
we really wanted to ship a
sample that showcased a bunch

837
00:38:55,276 --> 00:38:57,296 A:middle
of different aspects
of developing games

838
00:38:57,296 --> 00:38:58,906 A:middle
that we thought you would
all be interested in.

839
00:38:59,316 --> 00:39:02,946 A:middle
So Dave spoke to you initially
about fine tuning your assets

840

841
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

842
00:38:59,316 --> 00:39:02,946 A:middle
So Dave spoke to you initially
about fine tuning your assets

843
00:39:02,946 --> 00:39:06,696 A:middle
for every device, including
special assets for the Mac.

844
00:39:06,696 --> 00:39:08,576 A:middle
We talked about elegant
character navigation,

845
00:39:08,576 --> 00:39:10,796 A:middle
without having to write a
ton of movement code yourself

846
00:39:11,236 --> 00:39:14,976 A:middle
and finally adding additional
assets to improve gameplay

847
00:39:14,976 --> 00:39:17,776 A:middle
because now we're
slimming down our app.

848
00:39:17,776 --> 00:39:21,156 A:middle
I'm excited to say GamePlayKit
has ton of great features

849
00:39:21,156 --> 00:39:23,626 A:middle
and iOS 9 in general to
help you do these things.

850
00:39:24,526 --> 00:39:25,686 A:middle
To check out how they're used,

851
00:39:26,046 --> 00:39:29,856 A:middle
you can download the sample
right now from this link,

852
00:39:29,856 --> 00:39:31,336 A:middle
I encourage you to do so.

853
00:39:32,676 --> 00:39:35,666 A:middle
Here are additional
links for documentation,

854
00:39:35,666 --> 00:39:37,476 A:middle
you can contact our
evangelist Allan.

855
00:39:38,076 --> 00:39:42,076 A:middle
The related sessions we
mentioned throughout this talk,

856
00:39:42,076 --> 00:39:44,856 A:middle
they have already happened,
you can catch them online.

857
00:39:46,876 --> 00:39:47,666 A:middle
Thank you all so much.

858
00:39:48,516 --> 00:39:51,500 A:middle
[Applause]

859
