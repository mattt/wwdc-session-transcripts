X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:26,516 --> 00:00:33,896 A:middle
[ Applause ]

2
00:00:34,396 --> 00:00:36,676 A:middle
>> CONRAD SHULTZ: Hi,
my name is Conrad Shultz

3
00:00:36,676 --> 00:00:39,096 A:middle
and I'm an engineer on
the Safari and WebKit team

4
00:00:39,306 --> 00:00:44,216 A:middle
and this is Session 509,
Seamless Linking to Your App.

5
00:00:44,746 --> 00:00:48,716 A:middle
So, if you're here at WWDC, you
almost certainly have an app

6
00:00:48,976 --> 00:00:51,776 A:middle
and odds are you have
a website for that app.

7
00:00:52,106 --> 00:00:55,116 A:middle
So a quick show of hands, how
many of you have a website

8
00:00:55,116 --> 00:00:58,926 A:middle
that allows users to access
some of the same content

9
00:00:58,926 --> 00:01:01,726 A:middle
or functionality as in your app?

10

11
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

12
00:00:58,926 --> 00:01:01,726 A:middle
or functionality as in your app?

13
00:01:02,066 --> 00:01:04,186 A:middle
Great. This talk is for you.

14
00:01:06,766 --> 00:01:11,986 A:middle
So we are going to talk about
how we can tear down the walls

15
00:01:12,356 --> 00:01:14,326 A:middle
between your app
and your website

16
00:01:14,686 --> 00:01:17,346 A:middle
and create a tight
association between them.

17
00:01:17,596 --> 00:01:20,406 A:middle
As an example of what we
are going to talk about,

18
00:01:20,706 --> 00:01:23,876 A:middle
I would like to begin
with a demo of an app

19
00:01:23,916 --> 00:01:26,126 A:middle
that you probably have
installed on your iPhone

20
00:01:26,126 --> 00:01:29,486 A:middle
or iPad right now, the WWDC app.

21
00:01:33,076 --> 00:01:36,136 A:middle
So here I have a message
from my colleague, Jonathan,

22
00:01:36,586 --> 00:01:38,456 A:middle
telling me to check
out a keynote.

23
00:01:38,866 --> 00:01:40,266 A:middle
And that sounds like
a good idea,

24
00:01:40,266 --> 00:01:44,886 A:middle
and I have the WWDC app
installed on this iPad.

25
00:01:45,496 --> 00:01:47,746 A:middle
And I see this is a web link

26
00:01:47,746 --> 00:01:50,006 A:middle
so it will probably
still open in Safari.

27
00:01:50,086 --> 00:01:52,336 A:middle
Let's go ahead and tap on it.

28
00:01:52,336 --> 00:01:56,816 A:middle
And, huh, that's pretty cool, it
took me right to the WWDC app.

29
00:01:57,466 --> 00:01:58,176 A:middle
Maybe you missed that.

30
00:01:58,176 --> 00:01:58,926 A:middle
Let's do that again.

31
00:01:58,926 --> 00:02:02,896 A:middle
I will go ahead and tap on back
to messages in the upper left.

32

33
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

34
00:01:58,926 --> 00:02:02,896 A:middle
I will go ahead and tap on back
to messages in the upper left.

35
00:02:02,896 --> 00:02:06,556 A:middle
I see this is just a
regular HTTPS link going

36
00:02:06,556 --> 00:02:11,186 A:middle
to Developer.Apple.com,
and I tap on it, and, boom!

37
00:02:11,426 --> 00:02:14,166 A:middle
Right to the WWDC app,
right to the keynote.

38
00:02:14,416 --> 00:02:16,026 A:middle
No ping ponging through Safari.

39
00:02:16,536 --> 00:02:17,316 A:middle
It's magic!

40
00:02:18,516 --> 00:02:24,936 A:middle
[ Applause ]

41
00:02:25,436 --> 00:02:28,326 A:middle
So we are going to talk
about three cool technologies

42
00:02:28,546 --> 00:02:30,296 A:middle
to help you tear
down those walls

43
00:02:30,296 --> 00:02:31,776 A:middle
between your app
and your website.

44
00:02:33,006 --> 00:02:36,106 A:middle
First, the magic you
just saw in the demo,

45
00:02:36,356 --> 00:02:39,176 A:middle
where the WWDC app
opened to the right place

46
00:02:39,346 --> 00:02:43,586 A:middle
when a regular link was tapped.

47
00:02:43,956 --> 00:02:47,936 A:middle
Next, we are going to talk
about Smart App Banners,

48
00:02:48,196 --> 00:02:50,536 A:middle
which allow users
to discover your app

49
00:02:50,676 --> 00:02:51,806 A:middle
when they visit your website.

50
00:02:53,616 --> 00:02:57,326 A:middle
Finally, shared web credentials,
which allows your app

51
00:02:57,466 --> 00:03:01,396 A:middle
to access Safari-saved passwords
and, therefore, make logging

52

53
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

54
00:02:57,466 --> 00:03:01,396 A:middle
to access Safari-saved passwords
and, therefore, make logging

55
00:03:01,396 --> 00:03:03,636 A:middle
into your app a breeze
for your users.

56
00:03:04,326 --> 00:03:06,296 A:middle
To start us off, I would
like to invite my colleague,

57
00:03:06,296 --> 00:03:09,706 A:middle
Jonathan to the stage to talk
to us about linking to your app.

58
00:03:11,516 --> 00:03:16,756 A:middle
[ Applause ]

59
00:03:17,256 --> 00:03:17,976 A:middle
>> JONATHAN GRYNSPAN:
Thank you, Conrad.

60
00:03:18,736 --> 00:03:20,756 A:middle
Hello everyone, my name
is Jonathan Grynspan

61
00:03:20,756 --> 00:03:23,636 A:middle
and I'm a Core Services
Software Engineer here at Apple.

62
00:03:24,376 --> 00:03:26,966 A:middle
Today I would like to take
a moment to talk to you

63
00:03:27,056 --> 00:03:29,006 A:middle
about your app's
place in the universe.

64
00:03:29,556 --> 00:03:36,316 A:middle
I saw a lot of hands go up
when Conrad asked how many

65
00:03:36,316 --> 00:03:38,366 A:middle
of you have both an
app and a website.

66
00:03:38,656 --> 00:03:39,836 A:middle
And it's not surprising.

67
00:03:40,356 --> 00:03:45,206 A:middle
Many modern apps are more than
just what the user downloads.

68
00:03:46,006 --> 00:03:51,426 A:middle
They also have a
strong web presence.

69
00:03:51,546 --> 00:03:55,216 A:middle
Often web content
mirrors app content.

70
00:03:55,216 --> 00:03:57,926 A:middle
Many of you have a great website
with great functionality,

71
00:03:57,926 --> 00:04:01,696 A:middle
and we like how your users are
able to reach that functionality

72

73
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

74
00:03:57,926 --> 00:04:01,696 A:middle
and we like how your users are
able to reach that functionality

75
00:04:01,696 --> 00:04:03,406 A:middle
without even having
to install an app.

76
00:04:04,456 --> 00:04:06,306 A:middle
We also like when your
apps work together.

77
00:04:06,996 --> 00:04:11,056 A:middle
An app exists as
part of an ecosystem.

78
00:04:11,746 --> 00:04:14,986 A:middle
If your app, or website, needs
to access content provided

79
00:04:14,986 --> 00:04:16,266 A:middle
by another app, or website,

80
00:04:16,516 --> 00:04:18,185 A:middle
it needs to communicate
with it somehow.

81
00:04:19,026 --> 00:04:22,906 A:middle
For example, if you have an app
for foodies and you want to link

82
00:04:22,906 --> 00:04:24,796 A:middle
to a recipe, you might
want to use an app

83
00:04:24,796 --> 00:04:28,976 A:middle
or service, such as Yumly.

84
00:04:29,626 --> 00:04:33,206 A:middle
So how does your
app get to Yumly,

85
00:04:33,206 --> 00:04:36,756 A:middle
and how does it provide Yumly's
content correctly and quickly?

86
00:04:37,426 --> 00:04:42,906 A:middle
On iOS we usually
use URLs to send data

87
00:04:42,906 --> 00:04:43,816 A:middle
from one app to another.

88
00:04:44,806 --> 00:04:49,806 A:middle
So let's take a look at
how we do that today.

89
00:04:49,996 --> 00:04:53,356 A:middle
Many iOS apps implement what's
called a custom URL scheme.

90
00:04:54,306 --> 00:04:56,066 A:middle
These are a very effective tool,

91
00:04:56,136 --> 00:04:58,146 A:middle
because they let apps
communicate with each other

92
00:04:58,306 --> 00:05:00,486 A:middle
but they do have a few pitfalls.

93

94
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

95
00:04:58,306 --> 00:05:00,486 A:middle
but they do have a few pitfalls.

96
00:05:01,386 --> 00:05:04,106 A:middle
First off, they don't
always map to the right app,

97
00:05:05,096 --> 00:05:06,986 A:middle
because there is no app
that truly owns them.

98
00:05:08,316 --> 00:05:10,286 A:middle
Two apps can claim
the same URL scheme

99
00:05:10,826 --> 00:05:12,436 A:middle
and users don't really
have a good way

100
00:05:12,436 --> 00:05:14,616 A:middle
to say which app they mean.

101
00:05:16,196 --> 00:05:19,576 A:middle
Second off, if your app is
not installed, they fall flat.

102
00:05:20,236 --> 00:05:24,616 A:middle
The URL doesn't open and the
app needs custom code in order

103
00:05:24,616 --> 00:05:26,326 A:middle
to handle this fairly
common situation.

104
00:05:27,046 --> 00:05:30,366 A:middle
And finally, they
make protecting user's

105
00:05:30,366 --> 00:05:31,326 A:middle
privacy difficult.

106
00:05:32,006 --> 00:05:35,036 A:middle
Apps need to be able to detect
if other apps are installed

107
00:05:35,036 --> 00:05:37,506 A:middle
on a device, in order to
use custom URL schemes.

108
00:05:37,796 --> 00:05:41,126 A:middle
This means that they can sniff
out if a user has a dating app,

109
00:05:41,126 --> 00:05:42,176 A:middle
or a banking app,

110
00:05:42,176 --> 00:05:44,446 A:middle
or a politically-charged
app installed.

111
00:05:44,826 --> 00:05:46,536 A:middle
This is personal information,

112
00:05:46,536 --> 00:05:48,266 A:middle
and users do not
want to share it.

113
00:05:48,816 --> 00:05:51,766 A:middle
So, there has to be a
better way, but what does

114
00:05:51,766 --> 00:05:52,906 A:middle
that better way look like?

115
00:05:53,916 --> 00:05:57,636 A:middle
Well, obviously, it needs
to be just as easy to use

116
00:05:57,636 --> 00:05:59,966 A:middle
as custom URL schemes,
so we are still talking

117
00:05:59,966 --> 00:06:01,686 A:middle
about a kind of URL.

118

119
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

120
00:05:59,966 --> 00:06:01,686 A:middle
about a kind of URL.

121
00:06:02,406 --> 00:06:04,956 A:middle
It must have verifiable
ownership,

122
00:06:05,406 --> 00:06:07,356 A:middle
URLs should always
open in the right app.

123
00:06:08,516 --> 00:06:11,076 A:middle
There should be a strong
two-way association

124
00:06:11,076 --> 00:06:13,156 A:middle
between your app and your URLs.

125
00:06:13,696 --> 00:06:17,916 A:middle
It must have the ability
to fall back gracefully,

126
00:06:17,916 --> 00:06:19,396 A:middle
if your app is not installed.

127
00:06:19,786 --> 00:06:22,676 A:middle
The URL should still work
when a user taps on it.

128
00:06:22,676 --> 00:06:25,946 A:middle
Safari, and web browsers
in general, are a great way

129
00:06:25,946 --> 00:06:28,466 A:middle
to display rich content,
and are present

130
00:06:28,466 --> 00:06:30,956 A:middle
on nearly every platform,
so we'll make sure

131
00:06:30,956 --> 00:06:33,226 A:middle
that these links can
open in a web browser.

132
00:06:37,286 --> 00:06:41,086 A:middle
And it absolutely must
protect a user's privacy.

133
00:06:42,006 --> 00:06:45,106 A:middle
When I run an app on my
device, it has no right to know

134
00:06:45,106 --> 00:06:47,066 A:middle
that I also have
your app installed.

135
00:06:47,686 --> 00:06:49,926 A:middle
And, of course, the
links that, the --

136
00:06:49,926 --> 00:06:52,886 A:middle
excuse me, and, of course,
the links that you tap are

137
00:06:52,886 --> 00:06:54,426 A:middle
between you and your device.

138
00:06:54,426 --> 00:06:56,876 A:middle
There is no need for a
third party to be involved.

139
00:06:57,646 --> 00:07:01,216 A:middle
As Conrad showed you, web
URLs are the ideal solution

140

141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

142
00:06:57,646 --> 00:07:01,216 A:middle
As Conrad showed you, web
URLs are the ideal solution

143
00:07:01,386 --> 00:07:02,996 A:middle
that fit all of these criteria.

144
00:07:03,716 --> 00:07:05,966 A:middle
You know when they
are going to open,

145
00:07:05,966 --> 00:07:09,206 A:middle
they work nearly everywhere,
and no third party needs

146
00:07:09,206 --> 00:07:10,556 A:middle
to be involved when you tap one.

147
00:07:11,266 --> 00:07:15,876 A:middle
Now that we have
identified web URLs

148
00:07:16,126 --> 00:07:17,926 A:middle
as our solution,
let's break one down.

149
00:07:18,386 --> 00:07:21,156 A:middle
I know you have all seen a URL
before, but if we take a look

150
00:07:21,156 --> 00:07:23,776 A:middle
at the components of a URL,
we'll have a better idea

151
00:07:23,956 --> 00:07:25,576 A:middle
of how these links
are going to work.

152
00:07:25,926 --> 00:07:29,886 A:middle
Here is a perfectly
normal web URL.

153
00:07:30,256 --> 00:07:31,586 A:middle
If you are curious, this links

154
00:07:31,586 --> 00:07:34,006 A:middle
to last year's WWDC
keynote video.

155
00:07:34,856 --> 00:07:37,726 A:middle
This is not a new URL that
we had to generate just

156
00:07:37,726 --> 00:07:39,246 A:middle
for this purpose, or
just for this app.

157
00:07:39,586 --> 00:07:41,666 A:middle
It already existed,
and you can visit it

158
00:07:41,666 --> 00:07:45,586 A:middle
on the Apple Developer
Connection website today.

159
00:07:45,866 --> 00:07:49,616 A:middle
If I open it in Safari, I expect
to see exactly the content

160
00:07:49,616 --> 00:07:53,606 A:middle
that you would expect, the
video and information about it.

161
00:07:53,606 --> 00:07:57,306 A:middle
If I - uh, I also expect to see
the same content if I open this

162
00:07:57,306 --> 00:08:00,346 A:middle
on a Mac, or on another platform
entirely, they are universal.

163

164
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

165
00:07:57,306 --> 00:08:00,346 A:middle
on a Mac, or on another platform
entirely, they are universal.

166
00:08:01,066 --> 00:08:04,486 A:middle
And thanks to universal
links, this link will open

167
00:08:04,486 --> 00:08:07,776 A:middle
in our WWDC app without a
web browser getting involved.

168
00:08:07,856 --> 00:08:09,826 A:middle
So, in order for that to work,

169
00:08:09,826 --> 00:08:11,596 A:middle
iOS needs to look
for a few things.

170
00:08:12,776 --> 00:08:14,496 A:middle
The first thing we
look at is the scheme.

171
00:08:14,816 --> 00:08:18,416 A:middle
We support HTTPS and HTTP URLs.

172
00:08:18,866 --> 00:08:21,826 A:middle
Next up is the domain,
or host name.

173
00:08:22,466 --> 00:08:25,066 A:middle
The domain is securely
associated with your app,

174
00:08:25,566 --> 00:08:29,046 A:middle
by using an SSL certificate
to sign a file that is stored

175
00:08:29,046 --> 00:08:30,236 A:middle
on your secure web server.

176
00:08:30,236 --> 00:08:34,696 A:middle
I will have more info on
that in just a moment.

177
00:08:34,696 --> 00:08:37,265 A:middle
After we have analyzed
the scheme and the domain,

178
00:08:37,265 --> 00:08:38,265 A:middle
we take a look at the path.

179
00:08:39,436 --> 00:08:41,456 A:middle
The path can either
match exactly,

180
00:08:41,756 --> 00:08:43,426 A:middle
or it can match with a prefix.

181
00:08:43,926 --> 00:08:47,946 A:middle
In both cases, you specify
the matches, uh, sorry,

182
00:08:47,946 --> 00:08:51,136 A:middle
you specify the matches and you
are in control of the situation.

183
00:08:51,766 --> 00:08:56,716 A:middle
This is useful if you have
content that is on your website

184
00:08:56,716 --> 00:08:58,496 A:middle
but is not representable
in your app yet.

185
00:08:59,116 --> 00:09:04,666 A:middle
If a URL does not match,
it opens in Safari just

186

187
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

188
00:08:59,116 --> 00:09:04,666 A:middle
If a URL does not match,
it opens in Safari just

189
00:09:04,666 --> 00:09:06,066 A:middle
like any other link would.

190
00:09:06,656 --> 00:09:12,386 A:middle
If we do match a URL and we need
to - sorry, if we do match a URL

191
00:09:12,386 --> 00:09:15,166 A:middle
and send it to you, you
can use NS URL components

192
00:09:15,166 --> 00:09:17,076 A:middle
to break it down, and to
get at the information

193
00:09:17,076 --> 00:09:18,586 A:middle
in the URL that's useful to you.

194
00:09:19,376 --> 00:09:22,066 A:middle
I particularly like
using NS URL Query Item

195
00:09:22,336 --> 00:09:25,426 A:middle
because it makes
accessing the components

196
00:09:25,426 --> 00:09:26,826 A:middle
of the query super simple.

197
00:09:29,516 --> 00:09:33,746 A:middle
Universal links mean having your
app, not Safari, handle links

198
00:09:33,746 --> 00:09:37,926 A:middle
to your website, but in order to
get-- in order to open your app,

199
00:09:38,086 --> 00:09:41,316 A:middle
when a user taps a link to
your website, iOS needs to know

200
00:09:41,496 --> 00:09:43,006 A:middle
that your app should
open that link.

201
00:09:43,976 --> 00:09:46,956 A:middle
Your app must claim that it can
handle links from your website.

202
00:09:46,956 --> 00:09:50,586 A:middle
And iOS then contacts
your website, and confirms

203
00:09:50,626 --> 00:09:53,266 A:middle
that your site knows about
your app, and is willing

204
00:09:53,266 --> 00:09:55,126 A:middle
to be represented by it.

205
00:09:56,076 --> 00:09:57,526 A:middle
So let's get your server ready.

206
00:09:58,136 --> 00:09:59,626 A:middle
There are four steps
in this process.

207

208
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

209
00:10:00,156 --> 00:10:04,086 A:middle
The first step is to create
a special file called the

210
00:10:04,146 --> 00:10:06,046 A:middle
Apple-app-site-association file

211
00:10:06,316 --> 00:10:08,376 A:middle
that iOS downloads
from your web server.

212
00:10:08,926 --> 00:10:12,466 A:middle
This file contains specially
structured JSON data.

213
00:10:13,986 --> 00:10:16,056 A:middle
If you adopted Handoff
from the Web

214
00:10:16,116 --> 00:10:19,036 A:middle
or Shared Web Credentials last
year, this should look familiar.

215
00:10:20,076 --> 00:10:22,496 A:middle
The top level key here is
applinks, which is sibling

216
00:10:22,496 --> 00:10:26,046 A:middle
to web credentials or
activity continuation

217
00:10:26,046 --> 00:10:28,966 A:middle
if you already have
either of them.

218
00:10:28,966 --> 00:10:31,646 A:middle
The apps key is important
and should be present

219
00:10:31,646 --> 00:10:33,576 A:middle
with an empty array
as its value.

220
00:10:34,126 --> 00:10:37,876 A:middle
Under the new details key,
you will see the dictionary.

221
00:10:38,586 --> 00:10:41,476 A:middle
The keys for this dictionary are
your application identifiers,

222
00:10:41,736 --> 00:10:43,946 A:middle
which consist of your
team ID, which you can get

223
00:10:43,946 --> 00:10:46,236 A:middle
from the Developer portal,
followed by a period,

224
00:10:46,576 --> 00:10:48,296 A:middle
followed by your
bundle identifier.

225
00:10:48,856 --> 00:10:51,506 A:middle
If you have more than one
app, you can specify each

226
00:10:51,506 --> 00:10:52,686 A:middle
of them under a separate key.

227
00:10:53,246 --> 00:10:57,056 A:middle
The paths array tells
us what parts

228
00:10:57,056 --> 00:10:59,016 A:middle
of the website are
supported by your app.

229
00:10:59,886 --> 00:11:02,386 A:middle
If you can support your
entire website in your app,

230

231
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

232
00:10:59,886 --> 00:11:02,386 A:middle
If you can support your
entire website in your app,

233
00:11:02,676 --> 00:11:04,906 A:middle
you only need to
include a single asterisk

234
00:11:04,906 --> 00:11:08,746 A:middle
like you see here, but on
day one, it's quite possible

235
00:11:08,746 --> 00:11:11,016 A:middle
that your app won't
support every single page

236
00:11:11,016 --> 00:11:11,666 A:middle
on your website.

237
00:11:12,406 --> 00:11:14,586 A:middle
So we have given you
the ability to specify

238
00:11:14,586 --> 00:11:16,056 A:middle
which pages it can handle.

239
00:11:17,116 --> 00:11:19,806 A:middle
As you can see, I have now
added two paths to the array.

240
00:11:20,166 --> 00:11:21,526 A:middle
The first is an exact match.

241
00:11:21,966 --> 00:11:24,446 A:middle
If a user taps a link that
goes to exactly that path,

242
00:11:24,636 --> 00:11:26,466 A:middle
it will open in this app.

243
00:11:26,986 --> 00:11:29,846 A:middle
If an entire section of
your website is supported

244
00:11:29,846 --> 00:11:34,266 A:middle
by your app, you can use a path
prefix, such as the second entry

245
00:11:34,266 --> 00:11:36,346 A:middle
in this array, to specify

246
00:11:36,346 --> 00:11:37,926 A:middle
that that section
will open in your app.

247
00:11:38,316 --> 00:11:40,596 A:middle
Notice the asterisk at
the end, which tells us

248
00:11:40,596 --> 00:11:41,876 A:middle
that this is a path prefix.

249
00:11:42,726 --> 00:11:45,266 A:middle
It's important to note that
these paths are case sensitive

250
00:11:45,566 --> 00:11:48,046 A:middle
and that other URL
components, such as the query

251
00:11:48,046 --> 00:11:51,036 A:middle
or the fragment,
are not supported.

252
00:11:51,656 --> 00:11:55,836 A:middle
The second step is to
procure an SSL certificate

253
00:11:55,956 --> 00:11:57,756 A:middle
from a recognized
certificate authority.

254
00:11:58,316 --> 00:12:01,036 A:middle
This is not the same certificate
that you use to sign your app

255

256
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

257
00:11:58,316 --> 00:12:01,036 A:middle
This is not the same certificate
that you use to sign your app

258
00:12:01,186 --> 00:12:05,056 A:middle
for the App Store it's
not generated by Apple.

259
00:12:05,276 --> 00:12:07,896 A:middle
We suggest that you use the
same certificate that you use

260
00:12:07,896 --> 00:12:10,616 A:middle
for your HTTPS server,
but it's not required.

261
00:12:11,316 --> 00:12:13,676 A:middle
If you have more than one domain
that you need to represent

262
00:12:13,676 --> 00:12:16,096 A:middle
in your app, we suggest you
consider getting what's called a

263
00:12:16,096 --> 00:12:17,186 A:middle
wild card certificate.

264
00:12:17,796 --> 00:12:19,896 A:middle
For more information on
certificate generation,

265
00:12:20,106 --> 00:12:21,986 A:middle
please contact your
certificate authority.

266
00:12:22,536 --> 00:12:28,256 A:middle
Step 3 is to sign the JSON file
you just created using your

267
00:12:28,256 --> 00:12:29,126 A:middle
SSL certificate.

268
00:12:29,126 --> 00:12:32,486 A:middle
In order to do this,
you will need

269
00:12:32,486 --> 00:12:36,306 A:middle
to use the openssl smime
command in terminal

270
00:12:36,306 --> 00:12:38,056 A:middle
on your development Mac.

271
00:12:38,676 --> 00:12:40,136 A:middle
These two file names
are important.

272
00:12:40,566 --> 00:12:43,096 A:middle
The first one is the name of
the file that you just created,

273
00:12:43,516 --> 00:12:46,626 A:middle
the unsigned JSON file that's
on your development Mac.

274
00:12:46,686 --> 00:12:49,356 A:middle
The second must match
exactly what you see here,

275
00:12:49,676 --> 00:12:52,946 A:middle
apple-app-site-association.

276
00:12:53,476 --> 00:12:56,316 A:middle
These are your private key,

277
00:12:56,786 --> 00:12:58,946 A:middle
which you generated during
certificate generation,

278
00:12:59,666 --> 00:13:01,566 A:middle
and the certificate
that was given to you

279

280
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

281
00:12:59,666 --> 00:13:01,566 A:middle
and the certificate
that was given to you

282
00:13:01,566 --> 00:13:02,906 A:middle
by your certificate authority.

283
00:13:03,076 --> 00:13:05,176 A:middle
Once again, this is
not a certificate given

284
00:13:05,176 --> 00:13:05,846 A:middle
to you by Apple.

285
00:13:05,846 --> 00:13:07,696 A:middle
It's neither your App
Store certificate,

286
00:13:07,696 --> 00:13:09,206 A:middle
nor your developer
ID certificate.

287
00:13:09,766 --> 00:13:11,826 A:middle
There is one last
note to make here,

288
00:13:11,826 --> 00:13:14,046 A:middle
if you have an intermediate
certificate that was given

289
00:13:14,046 --> 00:13:16,676 A:middle
to you by your certificate
authority, you will need

290
00:13:16,676 --> 00:13:18,066 A:middle
to include during signing.

291
00:13:20,356 --> 00:13:21,726 A:middle
The fourth and final step,

292
00:13:22,246 --> 00:13:23,676 A:middle
now that you have
a signed JSON file,

293
00:13:23,766 --> 00:13:25,286 A:middle
is to upload it to
your web server.

294
00:13:25,786 --> 00:13:27,366 A:middle
This goes at the
root of your server.

295
00:13:27,366 --> 00:13:33,566 A:middle
For example, www.example.com
/ apple-app -site-association.

296
00:13:34,686 --> 00:13:36,296 A:middle
It's important to
note that each app

297
00:13:36,296 --> 00:13:39,626 A:middle
that your domain supports may
need a separate JSON file that's

298
00:13:39,626 --> 00:13:41,356 A:middle
signed appropriately
for that domain.

299
00:13:41,986 --> 00:13:46,916 A:middle
For example, example.com and
www.example.com are distinct.

300
00:13:48,336 --> 00:13:51,236 A:middle
We introduced this
functionality in iOS 8,

301
00:13:51,466 --> 00:13:53,946 A:middle
in support of two features:
Handoff from the Web

302
00:13:53,946 --> 00:13:55,406 A:middle
and Shared Web Credentials.

303
00:13:56,436 --> 00:13:59,436 A:middle
In iOS 9, we are adding
support for universal links,

304
00:13:59,716 --> 00:14:02,046 A:middle
and we want to make it as
easy as possible for you

305

306
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

307
00:13:59,716 --> 00:14:02,046 A:middle
and we want to make it as
easy as possible for you

308
00:14:02,046 --> 00:14:05,466 A:middle
to adopt universal links in
your app as soon as possible.

309
00:14:06,256 --> 00:14:10,926 A:middle
So-sorry, starting
in seed 2 of iOS 9,

310
00:14:11,666 --> 00:14:13,046 A:middle
we will no longer require you

311
00:14:13,196 --> 00:14:15,726 A:middle
to sign your
apple-app-site-association file.

312
00:14:16,146 --> 00:14:18,436 A:middle
Simply upload the unsigned
JSON -- thank you [applause].

313
00:14:22,326 --> 00:14:22,636 A:middle
Thank you.

314
00:14:23,586 --> 00:14:27,226 A:middle
Simply upload the unsigned JSON
file with the same file name,

315
00:14:27,226 --> 00:14:31,606 A:middle
apple-app site-association,
to your HTTPS server,

316
00:14:32,166 --> 00:14:33,936 A:middle
and iOS will take
care of the rest.

317
00:14:34,666 --> 00:14:37,016 A:middle
Note that the signing
requirement remains in effect,

318
00:14:37,086 --> 00:14:39,856 A:middle
if you need to support iOS 8
for backwards compatibility.

319
00:14:39,896 --> 00:14:41,506 A:middle
If you are starting with iOS 9,

320
00:14:41,776 --> 00:14:43,216 A:middle
you do not need to
fine the file.

321
00:14:43,216 --> 00:14:48,396 A:middle
Now, let's talk about adoption
within your application.

322
00:14:48,896 --> 00:14:50,876 A:middle
You will need to modify
your application delegate,

323
00:14:50,876 --> 00:14:52,836 A:middle
and you will need to
adopt an entitlement.

324
00:14:52,836 --> 00:14:56,386 A:middle
I will show you how to do both.

325
00:14:56,576 --> 00:14:58,536 A:middle
First off is the
application delegate.

326
00:14:59,136 --> 00:15:01,626 A:middle
If you adopted Handoff last
year, this should look familiar.

327

328
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

329
00:14:59,136 --> 00:15:01,626 A:middle
If you adopted Handoff last
year, this should look familiar.

330
00:15:03,166 --> 00:15:05,246 A:middle
This method is sent to
your application delegate,

331
00:15:05,586 --> 00:15:08,226 A:middle
when a user activity is
delivered to your application.

332
00:15:08,736 --> 00:15:12,496 A:middle
User activity objects
- excuse me -

333
00:15:12,496 --> 00:15:15,996 A:middle
user activity objects have a
web page URL property that,

334
00:15:15,996 --> 00:15:20,806 A:middle
in the case of this feature,
is always an HTTPS or HTTP URL,

335
00:15:21,246 --> 00:15:23,386 A:middle
it's never nil for this feature.

336
00:15:23,956 --> 00:15:28,266 A:middle
The activity type, in the
case of universal links,

337
00:15:28,336 --> 00:15:32,086 A:middle
is always NS User
Activity Type Browsing Web.

338
00:15:33,156 --> 00:15:35,626 A:middle
Once you have confirmed that the
activity type matches what you

339
00:15:35,626 --> 00:15:38,756 A:middle
are expecting, you
can break down the URL

340
00:15:39,236 --> 00:15:43,176 A:middle
from the web page URL using
the NSURLComponents class.

341
00:15:44,306 --> 00:15:46,776 A:middle
Just like with custom URL
schemes, it's possible

342
00:15:46,776 --> 00:15:49,626 A:middle
that the URL doesn't
represent anything in your app,

343
00:15:49,626 --> 00:15:53,196 A:middle
or it represents outdated
or malformed content.

344
00:15:53,786 --> 00:15:56,946 A:middle
If that occurs, you should
detect it and fail gracefully.

345
00:15:57,046 --> 00:15:59,906 A:middle
Now, gracefully here,
is app specific.

346

347
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

348
00:16:00,316 --> 00:16:03,006 A:middle
It may be appropriate for you
to present an alert to the use,

349
00:16:03,376 --> 00:16:06,346 A:middle
explaining what went wrong,
or it may be a better choice

350
00:16:06,486 --> 00:16:09,066 A:middle
for you to open the link
in Safari, which you can do

351
00:16:09,066 --> 00:16:12,406 A:middle
from your app, by calling
UI Application Open URL.

352
00:16:12,936 --> 00:16:14,776 A:middle
The most important thing
to take away from this,

353
00:16:14,976 --> 00:16:16,816 A:middle
is that users are
not left staring

354
00:16:16,886 --> 00:16:18,076 A:middle
at a blank View Controller.

355
00:16:20,856 --> 00:16:24,146 A:middle
Once your application delegate
has been updated, you will need

356
00:16:24,146 --> 00:16:25,526 A:middle
to update your app's
entitlements.

357
00:16:26,166 --> 00:16:27,556 A:middle
This is easy with XCode.

358
00:16:28,086 --> 00:16:30,076 A:middle
Navigate to your
projects settings,

359
00:16:30,186 --> 00:16:31,676 A:middle
and to the configurations,
sorry,

360
00:16:31,676 --> 00:16:35,646 A:middle
the capabilities tab there,
and select associated domains.

361
00:16:37,106 --> 00:16:39,256 A:middle
You will want to add an
entry for each domain

362
00:16:39,256 --> 00:16:42,406 A:middle
that your app supports: app
links, followed by a colon,

363
00:16:42,726 --> 00:16:43,886 A:middle
followed by the domain name.

364
00:16:44,226 --> 00:16:45,876 A:middle
Once again, every domain

365
00:16:45,876 --> 00:16:47,966 A:middle
that your app supports
needs a separate entry here,

366
00:16:47,966 --> 00:16:48,766 A:middle
they are distinct.

367
00:16:49,206 --> 00:16:53,386 A:middle
Example.com and www.example.com
need separate entries,

368
00:16:53,386 --> 00:16:56,456 A:middle
as you see here.

369
00:16:56,596 --> 00:16:57,816 A:middle
I will show you how
this all comes

370
00:16:57,816 --> 00:16:58,866 A:middle
to together in just a moment.

371
00:16:59,146 --> 00:17:01,756 A:middle
But first I would like to review
a couple of best practices.

372

373
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

374
00:16:59,146 --> 00:17:01,756 A:middle
But first I would like to review
a couple of best practices.

375
00:17:02,276 --> 00:17:05,496 A:middle
As with all content coming
from outside your app,

376
00:17:05,886 --> 00:17:09,066 A:middle
data may be malformed and
you may need to validate it.

377
00:17:09,695 --> 00:17:12,195 A:middle
If it is, that doesn't mean
that you have made a mistake,

378
00:17:12,606 --> 00:17:14,226 A:middle
but it does mean
that you will want

379
00:17:14,226 --> 00:17:17,746 A:middle
to fail gracefully
when it occurs.

380
00:17:17,965 --> 00:17:20,856 A:middle
Once you have a URL to
process, you should keep in mind

381
00:17:20,896 --> 00:17:25,906 A:middle
that HTTP has caveats on iOS 9
for the sake of user security

382
00:17:26,066 --> 00:17:29,556 A:middle
and privacy, if you transport
data using, for instance,

383
00:17:29,556 --> 00:17:34,026 A:middle
NSURLSession, you should
always be using HTTPS.

384
00:17:35,116 --> 00:17:37,826 A:middle
If you need to use
unencrypted HTTP in your app,

385
00:17:38,526 --> 00:17:42,916 A:middle
you should review Session 711,
Networking with NSURLSession,

386
00:17:43,026 --> 00:17:45,996 A:middle
which covers an important new
networking technology called App

387
00:17:46,276 --> 00:17:47,326 A:middle
Transport Security.

388
00:17:47,406 --> 00:17:52,436 A:middle
Now, let's take a look at how
this all fits together in XCode.

389
00:17:52,436 --> 00:17:53,936 A:middle
I will be showing you code

390
00:17:53,936 --> 00:18:01,186 A:middle
from the WWDC app that's
available on the App Store.

391

392
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

393
00:17:53,936 --> 00:18:01,186 A:middle
from the WWDC app that's
available on the App Store.

394
00:18:01,406 --> 00:18:05,026 A:middle
So I have here the WWDC project,

395
00:18:05,026 --> 00:18:07,136 A:middle
and I have created a new
extension that's going

396
00:18:07,136 --> 00:18:08,946 A:middle
to house the code we
are looking at today.

397
00:18:09,326 --> 00:18:11,476 A:middle
This extension is on my
application delegate class

398
00:18:11,476 --> 00:18:12,446 A:middle
and the first thing I'm going

399
00:18:12,446 --> 00:18:15,026 A:middle
to do is add the
application delegate method

400
00:18:15,026 --> 00:18:15,806 A:middle
that we discussed.

401
00:18:16,506 --> 00:18:20,246 A:middle
Now, again, if you adopted
Handoff last year this is the

402
00:18:20,246 --> 00:18:21,256 A:middle
same delegate method.

403
00:18:21,766 --> 00:18:24,476 A:middle
You'll just need to extend it to
support this new functionality.

404
00:18:25,366 --> 00:18:27,796 A:middle
The parameter we
are interested in,

405
00:18:27,796 --> 00:18:31,026 A:middle
is the user activity parameter,
which contains information

406
00:18:31,086 --> 00:18:32,426 A:middle
on what the user is doing,

407
00:18:32,426 --> 00:18:35,206 A:middle
which in this case is
navigating from a website.

408
00:18:37,716 --> 00:18:38,926 A:middle
We are interested

409
00:18:38,926 --> 00:18:41,426 A:middle
in the activity type
and the web page URL.

410
00:18:42,306 --> 00:18:45,506 A:middle
For our purposes, the activity
type is always NSUser activity

411
00:18:45,506 --> 00:18:46,466 A:middle
type BrowsingWeb.

412
00:18:46,996 --> 00:18:49,806 A:middle
However, if your app supports
user activities coming

413
00:18:49,806 --> 00:18:53,076 A:middle
from other sources, such as
Handoff, then you will need

414
00:18:53,076 --> 00:18:54,966 A:middle
to check the activity
type as I have done here.

415
00:18:56,216 --> 00:18:58,366 A:middle
Because it's NSUser
activity type BrowsingWeb,

416
00:18:58,366 --> 00:19:00,716 A:middle
I know there is a web page
URL and that it's not nil,

417

418
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

419
00:18:58,366 --> 00:19:00,716 A:middle
I know there is a web page
URL and that it's not nil,

420
00:19:00,976 --> 00:19:03,946 A:middle
so I have used an
explicit unwrap

421
00:19:04,126 --> 00:19:07,896 A:middle
of the web page zero property
to get the URL from it.

422
00:19:07,896 --> 00:19:10,686 A:middle
I then send it to this
function, present URL,

423
00:19:11,016 --> 00:19:13,616 A:middle
which is responsible for
breaking down the URL

424
00:19:14,086 --> 00:19:16,836 A:middle
and delivering it to
the user interface

425
00:19:16,836 --> 00:19:18,956 A:middle
so that the user can see it.

426
00:19:20,196 --> 00:19:22,196 A:middle
The signature of this function
is fairly straight forward.

427
00:19:22,196 --> 00:19:25,186 A:middle
It takes a single URL as
input, and returns a Boolean,

428
00:19:25,186 --> 00:19:27,816 A:middle
saying whether or not we
were able to handle the URL.

429
00:19:27,816 --> 00:19:30,916 A:middle
Now, the body of the method
is a little bit more complex,

430
00:19:30,916 --> 00:19:32,636 A:middle
but I will walk you
through it line by line.

431
00:19:33,526 --> 00:19:36,946 A:middle
The first thing we do is create
an instance of NSURL Components.

432
00:19:37,576 --> 00:19:40,896 A:middle
This class, as I said before,
breaks down the URL for you

433
00:19:41,006 --> 00:19:44,736 A:middle
and allows you to access
the individual parts of it,

434
00:19:44,736 --> 00:19:46,476 A:middle
without you having to
build your own parser.

435
00:19:47,966 --> 00:19:51,036 A:middle
Once we have that object, we
extract a few components from it

436
00:19:51,076 --> 00:19:52,176 A:middle
that we are interested in here.

437
00:19:52,966 --> 00:19:55,946 A:middle
For the WWDC app, we are
interested in the host

438
00:19:56,316 --> 00:19:57,446 A:middle
and the path components.

439
00:19:58,456 --> 00:20:02,216 A:middle
Now, the WWDC app can
handle URLs coming from more

440

441
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

442
00:19:58,456 --> 00:20:02,216 A:middle
Now, the WWDC app can
handle URLs coming from more

443
00:20:02,216 --> 00:20:05,426 A:middle
than one domain, so I want to
check the domain to make sure

444
00:20:05,426 --> 00:20:06,476 A:middle
that it's what I'm expecting,

445
00:20:07,096 --> 00:20:08,536 A:middle
so I have got a switch
statement here,

446
00:20:09,146 --> 00:20:11,166 A:middle
with a case of
developer.apple.com,

447
00:20:11,296 --> 00:20:14,176 A:middle
which is the URL that Conrad
showed you earlier, or sorry,

448
00:20:14,176 --> 00:20:15,266 A:middle
the host name for that URL.

449
00:20:16,606 --> 00:20:18,816 A:middle
Once I have matched that,
I want to match the path,

450
00:20:19,946 --> 00:20:22,626 A:middle
and I use a switch statement,
which is very powerful in Swift,

451
00:20:22,956 --> 00:20:25,256 A:middle
to gather all of the components
at once, and compare them

452
00:20:25,256 --> 00:20:29,236 A:middle
in a single line,
s/videos,/WWDC,

453
00:20:29,476 --> 00:20:30,986 A:middle
something that may
or may not be a year.

454
00:20:32,436 --> 00:20:34,446 A:middle
I want to take a
look at that value,

455
00:20:34,446 --> 00:20:36,536 A:middle
which is a string right now,
and turn it into an Int.

456
00:20:36,536 --> 00:20:42,086 A:middle
So I cast it with the Int
initializer, excuse me,

457
00:20:42,946 --> 00:20:44,536 A:middle
and I also gather
the session number,

458
00:20:44,626 --> 00:20:46,686 A:middle
which in this case
would be Session 509.

459
00:20:46,686 --> 00:20:48,506 A:middle
In the case of the
example Conrad showed you,

460
00:20:48,506 --> 00:20:51,006 A:middle
it was Session 101.

461
00:20:51,006 --> 00:20:53,256 A:middle
Now, this Find Session method I
will show you in just a second.

462
00:20:54,686 --> 00:20:56,076 A:middle
If those components
have matched,

463
00:20:56,356 --> 00:20:58,026 A:middle
then I want to present
it to the user,

464
00:20:58,106 --> 00:21:01,616 A:middle
but I need to validate the input
first because it's possible,

465

466
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

467
00:20:58,106 --> 00:21:01,616 A:middle
but I need to validate the input
first because it's possible,

468
00:21:02,956 --> 00:21:07,316 A:middle
it's possible that it isn't in
a range that makes any sense.

469
00:21:07,316 --> 00:21:09,566 A:middle
For instance, a year
before Apple was founded

470
00:21:09,616 --> 00:21:11,086 A:middle
or a session number
in the millions.

471
00:21:12,196 --> 00:21:14,336 A:middle
So I take the year in
session, and compare them

472
00:21:14,336 --> 00:21:19,936 A:middle
against two ranges, 2011 to
2015 for the year, 100 to 10,000

473
00:21:19,936 --> 00:21:20,776 A:middle
for the session number.

474
00:21:20,776 --> 00:21:22,556 A:middle
And if it's in those
ranges, then it looks

475
00:21:22,556 --> 00:21:24,926 A:middle
like something that's valid
that we can present to the user.

476
00:21:25,366 --> 00:21:27,626 A:middle
So we proceed to present it.

477
00:21:29,016 --> 00:21:31,686 A:middle
Now, I mentioned this Find
Session method which I'm going

478
00:21:31,686 --> 00:21:32,356 A:middle
to show you right now.

479
00:21:33,406 --> 00:21:33,896 A:middle
There we are.

480
00:21:34,676 --> 00:21:37,106 A:middle
And this is specific to our app.

481
00:21:37,106 --> 00:21:39,246 A:middle
It's unlikely you will
have this exact same code,

482
00:21:39,246 --> 00:21:41,036 A:middle
so I'm not going to go
into too much detail here,

483
00:21:41,326 --> 00:21:44,446 A:middle
but the idea is that the data
that's coming in may come

484
00:21:44,446 --> 00:21:47,406 A:middle
from more than one source, so
we want to check all of them.

485
00:21:47,596 --> 00:21:50,096 A:middle
The first thing we look at is
the fragment, which in the case

486
00:21:50,096 --> 00:21:53,566 A:middle
of URLs from 2014 and before,
contained the session ID,

487
00:21:54,166 --> 00:21:57,856 A:middle
and then if that didn't contain
the session ID, we take a look

488
00:21:58,376 --> 00:22:00,746 A:middle
at the query which
we have broken apart

489

490
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

491
00:21:58,376 --> 00:22:00,746 A:middle
at the query which
we have broken apart

492
00:22:00,746 --> 00:22:02,376 A:middle
with NSURL query item.

493
00:22:02,806 --> 00:22:05,766 A:middle
In this case the query item's
property is already populated

494
00:22:05,766 --> 00:22:06,276 A:middle
for us.

495
00:22:07,406 --> 00:22:09,046 A:middle
We iterate over,
and we find the one

496
00:22:09,046 --> 00:22:11,006 A:middle
that either matches
ID, or instance.

497
00:22:11,006 --> 00:22:15,376 A:middle
Either one may contain
the session number for us.

498
00:22:16,336 --> 00:22:17,856 A:middle
Now, I'm almost done
with the code here,

499
00:22:17,986 --> 00:22:19,086 A:middle
but there is something missing.

500
00:22:19,676 --> 00:22:21,166 A:middle
There is a lot of
return falses here.

501
00:22:21,166 --> 00:22:24,296 A:middle
There is a lot of cases where we
weren't able to handle the URL.

502
00:22:25,236 --> 00:22:28,266 A:middle
And, again, that's okay
because we may get invalid input

503
00:22:28,266 --> 00:22:31,926 A:middle
from time to time, but up here
in my application delegate,

504
00:22:32,136 --> 00:22:33,896 A:middle
I'm not doing anything
with that return value,

505
00:22:34,326 --> 00:22:36,766 A:middle
and if I get a URL
that's clearly invalid,

506
00:22:36,766 --> 00:22:39,406 A:middle
the user is not going
to see anything.

507
00:22:39,406 --> 00:22:41,866 A:middle
The WWDC Apple opened,
and they will be presented

508
00:22:41,866 --> 00:22:43,056 A:middle
with a blank View Controller,

509
00:22:43,056 --> 00:22:45,226 A:middle
which is exactly what
we want to avoid.

510
00:22:45,776 --> 00:22:47,416 A:middle
So we are going to
fail gracefully

511
00:22:47,416 --> 00:22:49,136 A:middle
and it's very, very
easy to do that.

512
00:22:49,826 --> 00:22:52,556 A:middle
In this case, if present
URL returns false,

513
00:22:52,856 --> 00:22:54,976 A:middle
then I know that I didn't
present anything to the user,

514
00:22:55,316 --> 00:22:56,606 A:middle
and I pass the URL back

515
00:22:56,756 --> 00:22:59,566 A:middle
to Safari using UIApplication
openURL.

516

517
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

518
00:23:00,836 --> 00:23:02,986 A:middle
Those are all of the code
changes you need to adopt this.

519
00:23:03,206 --> 00:23:05,856 A:middle
If you have already got
code for custom URL schemes,

520
00:23:05,976 --> 00:23:07,806 A:middle
it's quite likely it
will look very similar

521
00:23:07,806 --> 00:23:08,666 A:middle
to what we have here.

522
00:23:09,736 --> 00:23:13,286 A:middle
Now, I'd like to show you what
this app looked like before

523
00:23:13,466 --> 00:23:15,786 A:middle
and after we added this
code, but before I do that,

524
00:23:16,116 --> 00:23:17,276 A:middle
I need to add an entitlement.

525
00:23:17,886 --> 00:23:22,386 A:middle
So I go to my Project Settings,
I select the Capabilities tab,

526
00:23:22,386 --> 00:23:24,056 A:middle
and I select Associated Domains.

527
00:23:24,596 --> 00:23:27,396 A:middle
I'm going to add a
single entry here,

528
00:23:27,536 --> 00:23:29,656 A:middle
because we are only working
with a single domain today,

529
00:23:30,006 --> 00:23:33,516 A:middle
but once again, if you have more
than one domain, example.com;

530
00:23:33,516 --> 00:23:36,916 A:middle
www.example.com, they
will need separate entries

531
00:23:36,916 --> 00:23:37,776 A:middle
in this entitlement.

532
00:23:38,356 --> 00:23:43,426 A:middle
In this case, I need
applinks:developer.apple.com.

533
00:23:44,446 --> 00:23:44,796 A:middle
That's it.

534
00:23:45,626 --> 00:23:47,066 A:middle
I'm ready to go on
my client side.

535
00:23:47,066 --> 00:23:49,046 A:middle
So I am going to show
you what the app looked

536
00:23:49,046 --> 00:23:50,306 A:middle
like before we added this.

537
00:23:51,156 --> 00:23:53,566 A:middle
So here I have got my
iPad, and this has a copy

538
00:23:53,566 --> 00:23:57,386 A:middle
of the WWDC app installed
before we added, sorry,

539
00:23:57,436 --> 00:24:00,216 A:middle
before we added universal
links to it.

540

541
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

542
00:23:57,436 --> 00:24:00,216 A:middle
before we added universal
links to it.

543
00:24:00,216 --> 00:24:03,176 A:middle
And I'm going to go to the
same text message, sorry,

544
00:24:03,176 --> 00:24:04,926 A:middle
the same iMessage I
sent Conrad earlier.

545
00:24:05,516 --> 00:24:08,986 A:middle
It's exactly the same
message, but when I tap it

546
00:24:09,596 --> 00:24:11,466 A:middle
because I haven't
adopted universal links,

547
00:24:12,216 --> 00:24:13,586 A:middle
it just opens in Safari.

548
00:24:14,516 --> 00:24:18,136 A:middle
Safari is a great app and it can
show me some fantastic content,

549
00:24:18,136 --> 00:24:20,926 A:middle
and in particular, it doesn't
give me all the options

550
00:24:20,926 --> 00:24:21,866 A:middle
that I can get from the app.

551
00:24:22,306 --> 00:24:25,536 A:middle
I can watch the video in
both the app and Safari, but,

552
00:24:25,536 --> 00:24:28,866 A:middle
I can also provide feedback from
the app, or, make it a favorite

553
00:24:28,926 --> 00:24:31,426 A:middle
to watch later, I can even
download it for offline viewing.

554
00:24:31,836 --> 00:24:35,066 A:middle
So, as I showed you, we
have this now in our app,

555
00:24:35,176 --> 00:24:37,256 A:middle
in the app you have in
your hands right now,

556
00:24:37,776 --> 00:24:39,826 A:middle
and that looks a
little bit like this.

557
00:24:40,506 --> 00:24:43,656 A:middle
So, once more, this is the URL
that I sent Conrad earlier,

558
00:24:43,656 --> 00:24:47,396 A:middle
and I tap it, and just as
before, it opens the keynote

559
00:24:47,776 --> 00:24:49,006 A:middle
and I can add it
to my favorites,

560
00:24:49,356 --> 00:24:51,546 A:middle
I can watch the video,
download it, and so forth.

561
00:24:52,356 --> 00:24:54,776 A:middle
And that is pretty
much everything we had

562
00:24:55,386 --> 00:24:56,336 A:middle
to do [applause].

563
00:24:58,356 --> 00:24:58,626 A:middle
Thank you.

564

565
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

566
00:25:04,066 --> 00:25:06,776 A:middle
So before I hand the
remote back to Conrad,

567
00:25:06,966 --> 00:25:09,766 A:middle
I would like to thank you for
coming, and I look forward

568
00:25:09,766 --> 00:25:11,416 A:middle
to seeing what all
of you are going

569
00:25:11,416 --> 00:25:13,706 A:middle
to create using universal
links in iOS 9.

570
00:25:13,926 --> 00:25:14,796 A:middle
Thank you.

571
00:25:15,516 --> 00:25:19,816 A:middle
[ Applause ]

572
00:25:20,316 --> 00:25:20,706 A:middle
>> CONRAD SHULTZ: Great.

573
00:25:22,026 --> 00:25:22,966 A:middle
Thank you Jonathan.

574
00:25:24,556 --> 00:25:29,316 A:middle
So by adopting universal
links you will give all

575
00:25:29,316 --> 00:25:32,776 A:middle
of your users the best
possible user experience.

576
00:25:33,926 --> 00:25:36,786 A:middle
For users who have your app
installed on your iPhone

577
00:25:36,786 --> 00:25:41,306 A:middle
or iPad, links to your
website will open immediately

578
00:25:41,306 --> 00:25:44,916 A:middle
in your app without
any distracting flashes

579
00:25:44,916 --> 00:25:45,696 A:middle
through Safari.

580
00:25:46,856 --> 00:25:51,046 A:middle
You no longer have to write
JavaScript on your website

581
00:25:51,446 --> 00:25:53,536 A:middle
to detect if your
app is installed,

582
00:25:53,536 --> 00:25:56,386 A:middle
or try to defect it it's
installed, and launch the app

583
00:25:56,386 --> 00:25:58,276 A:middle
on behalf of the user.

584
00:25:59,016 --> 00:26:03,016 A:middle
If a user does not have
your app installed,

585

586
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

587
00:25:59,016 --> 00:26:03,016 A:middle
If a user does not have
your app installed,

588
00:26:03,186 --> 00:26:05,476 A:middle
your links will still
seamlessly open in Safari.

589
00:26:05,476 --> 00:26:11,756 A:middle
And for the same reason, your
links will still just work

590
00:26:11,996 --> 00:26:14,576 A:middle
on the Mac or even
on other platforms.

591
00:26:16,326 --> 00:26:19,816 A:middle
Now, because this is all handled
locally on the user's device,

592
00:26:20,066 --> 00:26:22,306 A:middle
there are no wasteful
extra round trips

593
00:26:22,306 --> 00:26:25,856 A:middle
out to the user's web server
or out to your web server.

594
00:26:26,926 --> 00:26:31,366 A:middle
And, of course, this also means
the neither Apple nor any other

595
00:26:31,366 --> 00:26:36,006 A:middle
third party can track
what your users are doing.

596
00:26:37,426 --> 00:26:41,516 A:middle
So we have talked a
little, or, we have talked

597
00:26:41,516 --> 00:26:45,286 A:middle
about how these links will
take the user to your website

598
00:26:45,546 --> 00:26:46,906 A:middle
if they don't have
your app installed.

599
00:26:47,916 --> 00:26:50,136 A:middle
Once there, many of
you probably want

600
00:26:50,136 --> 00:26:53,316 A:middle
to help your user discover
and install your app.

601
00:26:53,696 --> 00:26:56,016 A:middle
And ILS has a technology
that can help

602
00:26:56,016 --> 00:26:58,896 A:middle
with that called
Smart App Banners.

603
00:26:59,456 --> 00:27:02,326 A:middle
Let's spend just a
couple of minutes talking

604

605
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

606
00:26:59,456 --> 00:27:02,326 A:middle
Let's spend just a
couple of minutes talking

607
00:27:02,326 --> 00:27:05,766 A:middle
about Smart App Banners which is
also about the time it will take

608
00:27:05,766 --> 00:27:07,216 A:middle
for you to adopt them.

609
00:27:07,996 --> 00:27:09,536 A:middle
So what are Smart App Banners?

610
00:27:10,286 --> 00:27:14,016 A:middle
They are unobtrusive UI
elements that help route users

611
00:27:14,016 --> 00:27:16,926 A:middle
to your app, and which are
presented automatically

612
00:27:16,926 --> 00:27:18,326 A:middle
by Safari on iOS.

613
00:27:19,176 --> 00:27:24,376 A:middle
If a user doesn't have your app
installed, the banner will offer

614
00:27:24,376 --> 00:27:28,286 A:middle
to launch the App Store so
that the user can download it.

615
00:27:28,286 --> 00:27:32,016 A:middle
If the user does have your app
installed, the banner will offer

616
00:27:32,016 --> 00:27:33,496 A:middle
to launch the app for the user.

617
00:27:34,726 --> 00:27:38,276 A:middle
Smart App Banners are trivial
to add to your website.

618
00:27:39,486 --> 00:27:43,686 A:middle
And new with iOS 9's
app search feature,

619
00:27:44,146 --> 00:27:48,066 A:middle
Smart App Banners will be used
by Apple to help index your app

620
00:27:48,066 --> 00:27:50,656 A:middle
and its content, which
increases the likelihood

621
00:27:50,936 --> 00:27:55,046 A:middle
of the user finding and
installing your app.

622
00:27:55,316 --> 00:27:58,526 A:middle
Now, some of you might
use custom URL schemes

623
00:27:58,826 --> 00:28:03,816 A:middle
to launch the user into
your app from your website.

624

625
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

626
00:27:58,826 --> 00:28:03,816 A:middle
to launch the user into
your app from your website.

627
00:28:04,896 --> 00:28:07,916 A:middle
This will still work,
but it's not recommended.

628
00:28:08,066 --> 00:28:11,636 A:middle
And there is no guarantee
that the user experience

629
00:28:11,636 --> 00:28:14,366 A:middle
with custom URL schemes will
remain the same in the future.

630
00:28:15,336 --> 00:28:18,166 A:middle
Smart App Banners afford the
preferred user experience.

631
00:28:19,776 --> 00:28:22,536 A:middle
So to adopt Smart App
Banners, all you need

632
00:28:22,536 --> 00:28:26,936 A:middle
to do is add one line of HTML
to your website's head section.

633
00:28:28,176 --> 00:28:32,466 A:middle
The apple-itunes-app meta tag
will tell Safari that you want

634
00:28:32,466 --> 00:28:35,126 A:middle
to install, or display,
a Smart App Banner.

635
00:28:36,036 --> 00:28:40,686 A:middle
The content attribute
must include your app ID,

636
00:28:41,206 --> 00:28:43,916 A:middle
which is used to route the
user to the correct app.

637
00:28:44,536 --> 00:28:47,686 A:middle
You can obtain your app ID
using the convenient iTunes

638
00:28:47,686 --> 00:28:48,296 A:middle
link maker.

639
00:28:48,876 --> 00:28:55,226 A:middle
The app argument should
include the URL of the page

640
00:28:55,226 --> 00:28:56,566 A:middle
that is currently
being displayed.

641
00:28:57,356 --> 00:28:58,516 A:middle
This is for a couple of reasons.

642
00:28:59,116 --> 00:29:02,736 A:middle
First, this allows you
to customize the view

643

644
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

645
00:28:59,116 --> 00:29:02,736 A:middle
First, this allows you
to customize the view

646
00:29:02,736 --> 00:29:04,246 A:middle
that you show to the user.

647
00:29:05,086 --> 00:29:09,316 A:middle
And it's passed to your
application open URL source

648
00:29:09,316 --> 00:29:10,886 A:middle
application annotation method.

649
00:29:12,126 --> 00:29:14,556 A:middle
Second, it is, it
helps make sure

650
00:29:14,556 --> 00:29:17,606 A:middle
that app search recognizes
your site as more

651
00:29:17,606 --> 00:29:18,806 A:middle
than just a landing page.

652
00:29:19,036 --> 00:29:21,736 A:middle
And for more information on
this point, I would refer you

653
00:29:21,736 --> 00:29:24,456 A:middle
to the Introducing
Search API session.

654
00:29:24,456 --> 00:29:26,806 A:middle
You can find the video of it.

655
00:29:26,806 --> 00:29:27,716 A:middle
It was held yesterday.

656
00:29:29,336 --> 00:29:32,386 A:middle
Finally, note the Smart
App Banners will not appear

657
00:29:32,386 --> 00:29:34,126 A:middle
in the iOS simulator, so be sure

658
00:29:34,126 --> 00:29:35,496 A:middle
that you test on
a physical device.

659
00:29:36,986 --> 00:29:39,416 A:middle
Once you have adopted
Smart App Banners,

660
00:29:40,096 --> 00:29:43,146 A:middle
and once your app can handle
links to your website,

661
00:29:43,626 --> 00:29:46,256 A:middle
you have a really
cool opportunity

662
00:29:46,546 --> 00:29:48,306 A:middle
to simplify your website.

663
00:29:49,286 --> 00:29:52,806 A:middle
It no longer needs to
be a promotional vehicle

664
00:29:52,926 --> 00:29:53,556 A:middle
for your app.

665
00:29:54,916 --> 00:29:58,126 A:middle
It can instead focus on
presenting your content

666
00:29:58,516 --> 00:30:00,176 A:middle
in the best manner possible.

667

668
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

669
00:29:58,516 --> 00:30:00,176 A:middle
in the best manner possible.

670
00:30:01,156 --> 00:30:06,106 A:middle
You no longer need to be in the
business of displaying banners

671
00:30:06,286 --> 00:30:09,036 A:middle
or splash screens,
or writing code

672
00:30:09,036 --> 00:30:10,726 A:middle
to handle custom URL schemes.

673
00:30:11,556 --> 00:30:16,416 A:middle
Your website can now be simpler
to use and simpler to write.

674
00:30:17,516 --> 00:30:21,956 A:middle
Okay. So we have talked
a fair bit about how

675
00:30:21,956 --> 00:30:24,096 A:middle
to get users into your app.

676
00:30:25,046 --> 00:30:29,206 A:middle
Once there, many of them
are going to have to log

677
00:30:29,206 --> 00:30:31,196 A:middle
in to your service,
for it to be useful.

678
00:30:31,196 --> 00:30:34,096 A:middle
If that happens, they
might see a screen

679
00:30:34,336 --> 00:30:36,646 A:middle
like this, a log-in form.

680
00:30:37,196 --> 00:30:40,516 A:middle
This is a frustrating
moment for your users.

681
00:30:40,916 --> 00:30:44,316 A:middle
They probably don't remember
their credentials even though

682
00:30:44,316 --> 00:30:47,766 A:middle
they might have logged into
your site many times in Safari.

683
00:30:48,686 --> 00:30:51,826 A:middle
They don't want, or don't know,
how to look their passwords up.

684
00:30:52,536 --> 00:30:54,116 A:middle
This is precisely the moment

685
00:30:54,476 --> 00:30:56,206 A:middle
when the user might
just abandon ship,

686
00:30:56,916 --> 00:30:59,086 A:middle
leave your app, maybe
even delete it.

687
00:30:59,086 --> 00:31:05,006 A:middle
But what if instead you could
present a list of credentials

688

689
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

690
00:30:59,086 --> 00:31:05,006 A:middle
But what if instead you could
present a list of credentials

691
00:31:05,236 --> 00:31:06,266 A:middle
for the user to select?

692
00:31:07,146 --> 00:31:10,056 A:middle
That would turn this into this.

693
00:31:10,926 --> 00:31:13,876 A:middle
A simple picker that
allows the user to choose

694
00:31:13,876 --> 00:31:16,786 A:middle
from passwords they have
previously saved in Safari.

695
00:31:17,676 --> 00:31:20,926 A:middle
Well, the technology to do
this was introduced in iOS 8

696
00:31:21,316 --> 00:31:23,686 A:middle
and it's called Shared
Web Credentials.

697
00:31:24,176 --> 00:31:28,346 A:middle
Shared Web Credentials
allow your app

698
00:31:28,626 --> 00:31:30,936 A:middle
to access Safari's
saved passwords

699
00:31:31,376 --> 00:31:34,586 A:middle
and thereby eliminate
the headache for users,

700
00:31:34,586 --> 00:31:36,426 A:middle
of r having to remember
their passwords

701
00:31:36,886 --> 00:31:38,976 A:middle
in different contexts
on different devices.

702
00:31:39,796 --> 00:31:41,766 A:middle
How does this work?

703
00:31:42,706 --> 00:31:48,816 A:middle
Well, when Safari on either iOS,
or OS X sees a user logging in,

704
00:31:48,816 --> 00:31:50,606 A:middle
or filling out an
account creation form,

705
00:31:50,866 --> 00:31:52,806 A:middle
it can help the user in
several different ways.

706
00:31:53,196 --> 00:31:56,816 A:middle
Specifically, Safari can
offer to save passwords

707
00:31:56,816 --> 00:31:58,376 A:middle
on the user's behalf
in the keychain.

708
00:31:59,546 --> 00:32:01,726 A:middle
It can sync those
passwords to all

709

710
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

711
00:31:59,546 --> 00:32:01,726 A:middle
It can sync those
passwords to all

712
00:32:01,726 --> 00:32:04,256 A:middle
of the users' devices
using iCloud Keychain,

713
00:32:04,256 --> 00:32:05,626 A:middle
so they are always available

714
00:32:05,726 --> 00:32:08,956 A:middle
on the user's iPhone,
iPad, and Macs.

715
00:32:09,196 --> 00:32:11,336 A:middle
It can suggest
cryptographically-strong

716
00:32:11,336 --> 00:32:15,236 A:middle
passwords for the
user, and of course,

717
00:32:15,496 --> 00:32:18,536 A:middle
it can autofill those
passwords on the user's behalf,

718
00:32:18,846 --> 00:32:20,916 A:middle
when the user goes to log in.

719
00:32:21,836 --> 00:32:24,406 A:middle
And with the Shared
Web Credentials API,

720
00:32:24,626 --> 00:32:27,726 A:middle
it can also prevent users
from being stuck on your app

721
00:32:27,796 --> 00:32:29,336 A:middle
when they go to log in.

722
00:32:30,036 --> 00:32:33,606 A:middle
To adopt Shared Web Credentials,
there are two parts.

723
00:32:34,786 --> 00:32:38,546 A:middle
First, you need to
establish a tight association

724
00:32:38,546 --> 00:32:41,926 A:middle
between your app and your
website just like we talked

725
00:32:41,926 --> 00:32:44,026 A:middle
about for universal links.

726
00:32:44,846 --> 00:32:48,026 A:middle
Second, you do need to adopt
a little API in your app,

727
00:32:48,116 --> 00:32:51,926 A:middle
to access the credentials
themselves.

728
00:32:51,926 --> 00:32:56,056 A:middle
So since shared web
credentials allows the user

729
00:32:56,056 --> 00:32:58,526 A:middle
to share their passwords,
we need to establish

730
00:32:58,566 --> 00:33:01,706 A:middle
that you control both
your app and your website.

731

732
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

733
00:32:58,566 --> 00:33:01,706 A:middle
that you control both
your app and your website.

734
00:33:03,156 --> 00:33:05,056 A:middle
Just like we did when
we allowed your app

735
00:33:05,266 --> 00:33:07,066 A:middle
to handle links to your website.

736
00:33:07,816 --> 00:33:13,676 A:middle
Your server tells us to trust
your app by a simple addition

737
00:33:13,826 --> 00:33:15,966 A:middle
to the
apple-app-site-association file

738
00:33:15,966 --> 00:33:17,006 A:middle
that Jonathan discussed.

739
00:33:17,906 --> 00:33:21,966 A:middle
Specifically, all you need to
do is add a top level dictionary

740
00:33:21,966 --> 00:33:28,836 A:middle
under the web credentials key,
with a key of apps, and an array

741
00:33:28,836 --> 00:33:31,096 A:middle
of app IDs, that your server,

742
00:33:31,096 --> 00:33:34,616 A:middle
your website trusts
to share credentials.

743
00:33:35,126 --> 00:33:39,556 A:middle
Your app also needs to tell
us to trust your website.

744
00:33:40,156 --> 00:33:42,336 A:middle
And this is accomplished
by adding, a,

745
00:33:42,336 --> 00:33:44,186 A:middle
one or more web credentials
entries

746
00:33:44,486 --> 00:33:46,636 A:middle
to the associated-domains
entitlement

747
00:33:47,166 --> 00:33:48,266 A:middle
that we talked about earlier.

748
00:33:48,876 --> 00:33:52,466 A:middle
And you can also do this using
XCode's project inspector

749
00:33:52,676 --> 00:33:55,536 A:middle
as Jonathan showed in the demo.

750
00:33:56,696 --> 00:34:01,436 A:middle
Okay. So now let's talk about
adopting the API in your app.

751

752
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

753
00:33:56,696 --> 00:34:01,436 A:middle
Okay. So now let's talk about
adopting the API in your app.

754
00:34:01,436 --> 00:34:05,296 A:middle
A typical flow in your app
might look something like this.

755
00:34:05,556 --> 00:34:09,666 A:middle
First your app will check to
see if it has credentials saved

756
00:34:09,666 --> 00:34:12,196 A:middle
in the keychain, and if
so, use them to log in.

757
00:34:12,795 --> 00:34:17,956 A:middle
If not, it will ask to
access any passwords

758
00:34:17,996 --> 00:34:19,295 A:middle
that Safari has saved.

759
00:34:19,295 --> 00:34:23,126 A:middle
If those are available,
it will use those,

760
00:34:23,126 --> 00:34:24,926 A:middle
it will save them
locally and then log in.

761
00:34:25,466 --> 00:34:29,366 A:middle
If none are available, it will
present its built-in log-in UI,

762
00:34:29,366 --> 00:34:32,366 A:middle
to ask for credentials and then
proceed in the usual manner.

763
00:34:33,795 --> 00:34:35,946 A:middle
So a basic implementation

764
00:34:36,226 --> 00:34:39,735 A:middle
of requesting Safari's passwords
might look something like this.

765
00:34:40,476 --> 00:34:43,866 A:middle
The key function is
SecRequestSharedWebCredential

766
00:34:45,106 --> 00:34:48,596 A:middle
which takes a completion
handler,

767
00:34:48,806 --> 00:34:51,666 A:middle
and optionally takes domain
and user name arguments.

768
00:34:52,196 --> 00:34:54,755 A:middle
In the completion handler,

769
00:34:54,946 --> 00:34:56,815 A:middle
we check whether we
got credentials back,

770
00:34:57,005 --> 00:35:00,496 A:middle
and if so, use them to log in.

771

772
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

773
00:34:57,005 --> 00:35:00,496 A:middle
and if so, use them to log in.

774
00:35:01,046 --> 00:35:03,196 A:middle
Otherwise, we will
present the log-in UI.

775
00:35:03,766 --> 00:35:07,206 A:middle
Note that in both cases we
dispatch to the main queue

776
00:35:07,206 --> 00:35:08,696 A:middle
because there is no guarantee

777
00:35:09,016 --> 00:35:13,846 A:middle
that the completion handler
is called on the main queue.

778
00:35:14,046 --> 00:35:17,406 A:middle
So if your app allows the
user to create an account

779
00:35:17,736 --> 00:35:19,136 A:middle
or change their password,

780
00:35:19,396 --> 00:35:21,956 A:middle
you really should
update Safari's keychain

781
00:35:22,146 --> 00:35:24,056 A:middle
so that the next time
the user goes to log

782
00:35:24,056 --> 00:35:26,006 A:middle
in to your website
on, say, their Mac,

783
00:35:26,736 --> 00:35:29,056 A:middle
the correct password is
available to be autofilled,

784
00:35:29,376 --> 00:35:32,606 A:middle
and you can do that using
the SecAddSharedWebCredential

785
00:35:32,606 --> 00:35:33,576 A:middle
function as shown here.

786
00:35:34,156 --> 00:35:40,456 A:middle
The Shared Web Credentials API
also lets you generate secure

787
00:35:40,456 --> 00:35:43,316 A:middle
passwords using the exact
same algorithm as Safari,

788
00:35:43,966 --> 00:35:47,176 A:middle
using the Sec Create Shared Web
Credential Password function,

789
00:35:47,556 --> 00:35:48,266 A:middle
as shown here.

790
00:35:48,996 --> 00:35:52,026 A:middle
There are some additional
advanced features of the API,

791
00:35:52,026 --> 00:35:54,316 A:middle
and if you are interested
in those, I will refer you

792
00:35:54,316 --> 00:35:57,296 A:middle
to last year's session, Your
App, Your Website, and Safari.

793

794
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

795
00:36:01,936 --> 00:36:04,696 A:middle
So we have talked
about some great tools

796
00:36:05,116 --> 00:36:08,476 A:middle
for giving your users
the best experience

797
00:36:08,476 --> 00:36:10,496 A:middle
in both your app
and your website.

798
00:36:11,246 --> 00:36:16,286 A:middle
First, on iOS 9 with just a
little bit of work on your part,

799
00:36:16,936 --> 00:36:21,206 A:middle
regular links to your website
can become universal links.

800
00:36:22,346 --> 00:36:25,896 A:middle
And can open your
app just as easily

801
00:36:25,896 --> 00:36:26,856 A:middle
as they open your website.

802
00:36:27,466 --> 00:36:31,476 A:middle
And iOS will insure that
your users are given the best

803
00:36:31,476 --> 00:36:34,146 A:middle
possible experience,
which may be your app,

804
00:36:34,516 --> 00:36:35,846 A:middle
or may be your website.

805
00:36:36,556 --> 00:36:40,946 A:middle
The days of using custom
URL schemes to route users

806
00:36:40,946 --> 00:36:42,886 A:middle
into your app are over.

807
00:36:43,906 --> 00:36:50,066 A:middle
Next, you can adopt Smart
App Banners, which will,

808
00:36:50,066 --> 00:36:52,266 A:middle
the first time your user
visits your website,

809
00:36:52,526 --> 00:36:53,916 A:middle
will help them discover
your app.

810
00:36:53,916 --> 00:36:55,796 A:middle
On a subsequent visits,

811
00:36:56,116 --> 00:36:59,326 A:middle
they will help redirect
users into your app.

812
00:36:59,326 --> 00:37:03,496 A:middle
And at all times, they will
help App Search index your app

813

814
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

815
00:36:59,326 --> 00:37:03,496 A:middle
And at all times, they will
help App Search index your app

816
00:37:03,496 --> 00:37:06,736 A:middle
and its content, so that it
is available to your users

817
00:37:06,736 --> 00:37:08,216 A:middle
in both Safari and Spotlight.

818
00:37:09,906 --> 00:37:12,736 A:middle
Finally, by adopting
shared web credentials,

819
00:37:13,226 --> 00:37:16,886 A:middle
you can give your app access
to Safari's saved passwords,

820
00:37:17,096 --> 00:37:20,176 A:middle
and make logging into your
app a breeze for your users.

821
00:37:20,566 --> 00:37:24,266 A:middle
For more information on what
we have talked about today,

822
00:37:24,456 --> 00:37:25,936 A:middle
you can check out
our documentation.

823
00:37:26,706 --> 00:37:28,556 A:middle
You can ask a question
on the Dev forums,

824
00:37:28,826 --> 00:37:30,766 A:middle
and of course reach out to DTS.

825
00:37:32,306 --> 00:37:35,746 A:middle
You can also contact John Davis,
our Web Technologies Evangelist

826
00:37:35,966 --> 00:37:38,436 A:middle
or Jake Behrens, the App
Frameworks Evangelist.

827
00:37:38,876 --> 00:37:41,036 A:middle
There are several related
sessions, both this year

828
00:37:41,036 --> 00:37:43,446 A:middle
and last, that go more
into detail on some

829
00:37:43,446 --> 00:37:44,686 A:middle
of the topics we discussed.

830
00:37:46,006 --> 00:37:47,686 A:middle
Thank you and have a great
rest of the conference.

831
00:37:49,516 --> 00:38:01,820 A:middle
[ Applause ]

832
