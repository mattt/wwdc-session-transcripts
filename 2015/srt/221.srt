X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:21,516 --> 00:00:23,546 A:middle
[ Applause ]

2
00:00:24,046 --> 00:00:24,176 A:middle
>> CORBIN DUNN: Hi.

3
00:00:25,386 --> 00:00:27,686 A:middle
Welcome to Improving the
Full-Screen Window Experience.

4
00:00:28,506 --> 00:00:29,436 A:middle
My name is Corbin Dunn.

5
00:00:29,486 --> 00:00:31,226 A:middle
I'm an AppKit Software Engineer.

6
00:00:31,376 --> 00:00:32,846 A:middle
And I'll be giving
this talk today

7
00:00:32,846 --> 00:00:34,186 A:middle
with my colleague, Taylor Kelly.

8
00:00:34,686 --> 00:00:36,056 A:middle
And let's jump right in to it.

9
00:00:36,726 --> 00:00:38,286 A:middle
So what are we going
to talk about today?

10
00:00:38,496 --> 00:00:40,616 A:middle
First I'm going to talk about
Full Screen, and I'm going

11
00:00:40,616 --> 00:00:42,146 A:middle
to cover three sections.

12
00:00:42,676 --> 00:00:44,766 A:middle
I'm going to talk about
adopting Full Screen

13
00:00:44,766 --> 00:00:45,966 A:middle
and how to properly adopt it.

14
00:00:45,966 --> 00:00:49,046 A:middle
I'm going to talk about Title
Bar Accessory View Controllers,

15
00:00:49,326 --> 00:00:50,846 A:middle
what they are and
how to use them.

16
00:00:50,846 --> 00:00:54,326 A:middle
Then I'm going to talk about
Full Screen Tiling API to see

17
00:00:54,326 --> 00:00:55,626 A:middle
and utilize some
of the new features

18
00:00:55,626 --> 00:00:57,496 A:middle
that you've seen
in Mac OS X v11.

19
00:00:58,326 --> 00:01:00,346 A:middle
Taylor's going to come up and
talk about flexible layout

20

21
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

22
00:00:58,326 --> 00:01:00,346 A:middle
Taylor's going to come up and
talk about flexible layout

23
00:01:00,346 --> 00:01:03,526 A:middle
within a Split View Controller,
Auto Layout, Stack View,

24
00:01:04,006 --> 00:01:06,026 A:middle
and finally some
Collection View things.

25
00:01:06,606 --> 00:01:09,016 A:middle
So Full Screen.

26
00:01:09,936 --> 00:01:11,216 A:middle
What is the purpose
of Full Screen?

27
00:01:11,216 --> 00:01:14,166 A:middle
It's to focus your user's
attention on a single task.

28
00:01:14,896 --> 00:01:16,956 A:middle
You can make the most of
your screen real estate.

29
00:01:17,316 --> 00:01:18,806 A:middle
Everything extra
is out of the way,

30
00:01:18,806 --> 00:01:22,356 A:middle
and you have one window
there to concentrate on.

31
00:01:23,146 --> 00:01:26,026 A:middle
So why did we make
it a system feature?

32
00:01:26,706 --> 00:01:28,046 A:middle
We have it as a system feature

33
00:01:28,046 --> 00:01:31,196 A:middle
because it's a very
consistent user experience.

34
00:01:31,656 --> 00:01:33,556 A:middle
The way you get into Full
Screen, the way you get

35
00:01:33,556 --> 00:01:35,466 A:middle
out of Full Screen,
it's all the same.

36
00:01:35,746 --> 00:01:37,796 A:middle
The way you navigate
across spaces, etcetera.

37
00:01:39,236 --> 00:01:42,636 A:middle
So what is a Full
Screen-capable window?

38
00:01:43,046 --> 00:01:45,076 A:middle
Here's an example of a
window such as Safari.

39
00:01:45,616 --> 00:01:48,536 A:middle
And I'm sure you're aware of
that you click the green button,

40
00:01:48,816 --> 00:01:50,096 A:middle
it'll take you into Full Screen.

41
00:01:51,376 --> 00:01:53,866 A:middle
Once you're into Full Screen,
you can mouse on up to the top

42
00:01:53,866 --> 00:01:56,716 A:middle
of the window, and the title
bar and toolbar will drop down.

43
00:01:57,246 --> 00:01:58,696 A:middle
And you can hit that
green button again,

44
00:01:58,786 --> 00:02:00,696 A:middle
and it can take you
back out of Full Screen.

45

46
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

47
00:01:58,786 --> 00:02:00,696 A:middle
and it can take you
back out of Full Screen.

48
00:02:01,286 --> 00:02:05,126 A:middle
So what are the things to
do to adopt Full Screen?

49
00:02:05,326 --> 00:02:06,806 A:middle
Hopefully you're
already aware of this,

50
00:02:07,076 --> 00:02:08,235 A:middle
but it's pretty easy to do.

51
00:02:08,526 --> 00:02:10,705 A:middle
You're going to specify
which windows you want

52
00:02:10,705 --> 00:02:11,776 A:middle
to be Full Screen-capable.

53
00:02:11,776 --> 00:02:14,026 A:middle
You're going to add
a menu item for it,

54
00:02:14,026 --> 00:02:16,566 A:middle
and you're probably going
to do some extra stuff.

55
00:02:16,566 --> 00:02:17,706 A:middle
The extra stuff that
you might want

56
00:02:17,706 --> 00:02:21,706 A:middle
to do is auto hide your
toolbar, modify your contents

57
00:02:21,836 --> 00:02:24,706 A:middle
to take more advantage
of the Full Screen space

58
00:02:24,706 --> 00:02:28,106 A:middle
that you now have, use the
new title bar accessory

59
00:02:28,106 --> 00:02:28,946 A:middle
view controllers.

60
00:02:28,946 --> 00:02:31,116 A:middle
And I'm going to talk about how
and why you're going to do that.

61
00:02:31,856 --> 00:02:33,976 A:middle
And of course, you want to work
well with Full Screen tiles.

62
00:02:34,246 --> 00:02:36,846 A:middle
So I'm going to discuss some
API that we have for that.

63
00:02:37,426 --> 00:02:41,106 A:middle
First of all, there are
two types of windows that,

64
00:02:41,556 --> 00:02:44,946 A:middle
or two options for windows
to be in Full Screen.

65
00:02:45,706 --> 00:02:47,406 A:middle
Normally when a window
is in Full Screen,

66
00:02:47,926 --> 00:02:49,146 A:middle
nothing else is allowed with it.

67
00:02:49,646 --> 00:02:52,286 A:middle
And that window is what we
call the primary window.

68
00:02:52,666 --> 00:02:55,366 A:middle
It's something such as
your main document window

69
00:02:55,366 --> 00:02:56,226 A:middle
for your application.

70
00:02:56,646 --> 00:02:58,596 A:middle
It's the thing that you can
go into Full Screen with.

71
00:02:59,866 --> 00:03:02,336 A:middle
However, there's also another
option if you've seen this.

72

73
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

74
00:02:59,866 --> 00:03:02,336 A:middle
However, there's also another
option if you've seen this.

75
00:03:02,576 --> 00:03:05,696 A:middle
It's an auxiliary window, and
usually you don't need this.

76
00:03:06,076 --> 00:03:09,256 A:middle
What its purpose is if you
have a window in an application

77
00:03:09,256 --> 00:03:11,836 A:middle
that wants to be on another
application's Full Screen space,

78
00:03:11,836 --> 00:03:13,046 A:middle
it allows you to do that.

79
00:03:13,046 --> 00:03:15,106 A:middle
And I'm not going
to talk about it.

80
00:03:15,696 --> 00:03:17,696 A:middle
And I encourage you to look
at the AppKit release notes

81
00:03:17,696 --> 00:03:20,786 A:middle
from a few years ago to
see some details on it.

82
00:03:21,356 --> 00:03:23,976 A:middle
So how do you adopt
Full Screen windows?

83
00:03:24,656 --> 00:03:26,976 A:middle
In Xcode and Interface
Builder, it's very simple.

84
00:03:27,416 --> 00:03:28,606 A:middle
You select your window.

85
00:03:28,606 --> 00:03:29,946 A:middle
There's a Full Screen section.

86
00:03:30,456 --> 00:03:31,676 A:middle
You drop down the menu item,

87
00:03:31,676 --> 00:03:33,876 A:middle
and you have either
primary or auxiliary.

88
00:03:33,876 --> 00:03:35,796 A:middle
So you're going to probably
want to set primary window

89
00:03:36,256 --> 00:03:37,586 A:middle
on your primary Full
Screen window.

90
00:03:38,186 --> 00:03:43,196 A:middle
Of course you can do it in code,
and the thing under the hood

91
00:03:43,196 --> 00:03:46,766 A:middle
of what that Interface Builder
option is doing is just changing

92
00:03:46,766 --> 00:03:49,406 A:middle
the window collection
behavior, and it's adding

93
00:03:49,406 --> 00:03:52,796 A:middle
in dot Full Screen primary
or dot Full Screen auxiliary

94
00:03:52,796 --> 00:03:55,616 A:middle
to the window to get those
options into that window

95
00:03:56,116 --> 00:03:57,386 A:middle
and make it Full Screen-capable.

96
00:03:59,226 --> 00:04:02,196 A:middle
Once you are in Full
Screen, you may need

97

98
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

99
00:03:59,226 --> 00:04:02,196 A:middle
Once you are in Full
Screen, you may need

100
00:04:02,196 --> 00:04:05,006 A:middle
to do different things based
on being in Full Screen.

101
00:04:05,506 --> 00:04:08,426 A:middle
And you can check that by
looking at the style mask.

102
00:04:09,036 --> 00:04:10,576 A:middle
It's when your window
goes into Full Screen,

103
00:04:10,926 --> 00:04:12,806 A:middle
we add the
NSFullScreenWindowMask

104
00:04:13,176 --> 00:04:14,456 A:middle
for you automatically.

105
00:04:14,456 --> 00:04:16,836 A:middle
And you can check that
in the style mask to see

106
00:04:16,836 --> 00:04:18,486 A:middle
if your window is in
Full Screen or not

107
00:04:18,916 --> 00:04:20,226 A:middle
and potentially do
different things.

108
00:04:20,356 --> 00:04:22,556 A:middle
Now let's talk

109
00:04:22,766 --> 00:04:25,976 A:middle
about automatically
hiding the toolbar.

110
00:04:26,426 --> 00:04:28,046 A:middle
Normally if you have a
toolbar in your window,

111
00:04:28,196 --> 00:04:29,766 A:middle
it's always visible, like
it's showing up here.

112
00:04:31,106 --> 00:04:33,466 A:middle
When you mouse on up to
the top of the window,

113
00:04:33,466 --> 00:04:34,706 A:middle
the menu bar drops down.

114
00:04:35,216 --> 00:04:36,706 A:middle
The title bar controls
drop down.

115
00:04:37,196 --> 00:04:38,956 A:middle
And the toolbar is revealed.

116
00:04:40,136 --> 00:04:41,076 A:middle
There's an option for you

117
00:04:41,076 --> 00:04:42,556 A:middle
to automatically have
the toolbar hidden.

118
00:04:42,916 --> 00:04:45,516 A:middle
So when you go to Full
Screen, nothing else is seen,

119
00:04:45,516 --> 00:04:47,596 A:middle
and you get the most use
of your screen real estate.

120
00:04:48,116 --> 00:04:50,466 A:middle
When you're mousing
up to the menu bar,

121
00:04:50,866 --> 00:04:54,286 A:middle
the toolbar is dropped down,
along with the menu bar

122
00:04:54,286 --> 00:04:55,446 A:middle
and the title bar
at the same time.

123
00:04:56,396 --> 00:04:57,766 A:middle
It's really easy to do this.

124
00:04:58,306 --> 00:04:59,566 A:middle
There's a window
delegate method,

125

126
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

127
00:05:00,006 --> 00:05:03,986 A:middle
Window Will Use Full
Screen Presentation Options,

128
00:05:04,686 --> 00:05:05,866 A:middle
with the proposed options.

129
00:05:06,486 --> 00:05:09,726 A:middle
You take those proposed options,
and you add Auto Hide Toolbar

130
00:05:09,726 --> 00:05:10,906 A:middle
to it and return that.

131
00:05:10,936 --> 00:05:12,946 A:middle
And the toolbar will
automatically be hidden.

132
00:05:13,386 --> 00:05:16,296 A:middle
So it's very easy to do.

133
00:05:16,556 --> 00:05:20,406 A:middle
So custom animations, you
can create a custom animation

134
00:05:20,406 --> 00:05:22,466 A:middle
to enter and exit
from Full Screen.

135
00:05:22,886 --> 00:05:24,426 A:middle
We have two delegate
methods to do it.

136
00:05:25,166 --> 00:05:27,146 A:middle
The custom windows to enter
Full Screen for a window

137
00:05:27,506 --> 00:05:30,486 A:middle
where you return an array of
windows that do your animation.

138
00:05:31,246 --> 00:05:33,226 A:middle
And then we call you
back and say, hey,

139
00:05:33,566 --> 00:05:35,456 A:middle
start your custom animation
to enter Full Screen

140
00:05:35,686 --> 00:05:36,846 A:middle
with a particular duration.

141
00:05:37,566 --> 00:05:40,776 A:middle
The thing to note about these
now with the way that we enter

142
00:05:40,776 --> 00:05:42,396 A:middle
into Full Screen
in Mac OS X v11,

143
00:05:42,766 --> 00:05:44,156 A:middle
you may not get these called.

144
00:05:44,546 --> 00:05:46,526 A:middle
So it's important
to not be dependent

145
00:05:46,526 --> 00:05:49,356 A:middle
on these always being called
and setting up state there.

146
00:05:49,726 --> 00:05:51,546 A:middle
Instead, there's better ways
to do that, which I'll talk

147
00:05:51,546 --> 00:05:55,166 A:middle
about in a little bit.

148
00:05:55,346 --> 00:05:57,196 A:middle
Okay, so that was
talking about Full Screen

149
00:05:57,286 --> 00:05:58,886 A:middle
and how to properly adopt it.

150
00:05:59,256 --> 00:06:01,416 A:middle
Let's move forward
and go about talking

151

152
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

153
00:05:59,256 --> 00:06:01,416 A:middle
Let's move forward
and go about talking

154
00:06:01,416 --> 00:06:03,336 A:middle
about Title Bar Accessory
View Controllers.

155
00:06:05,016 --> 00:06:08,336 A:middle
So before I talk about a title
bar accessory controller,

156
00:06:08,586 --> 00:06:11,326 A:middle
let's take a look at a window
in Full Screen, and I'm going

157
00:06:11,326 --> 00:06:13,346 A:middle
to highlight the area
that is the title bar

158
00:06:13,556 --> 00:06:14,386 A:middle
so you're aware of it.

159
00:06:14,926 --> 00:06:16,426 A:middle
So this is the title
bar in Full Screen.

160
00:06:17,136 --> 00:06:19,246 A:middle
Underneath the title
bar is the toolbar.

161
00:06:19,246 --> 00:06:23,086 A:middle
And underneath the toolbar
are what we have called the

162
00:06:23,086 --> 00:06:24,096 A:middle
accessory views.

163
00:06:24,596 --> 00:06:27,146 A:middle
And so you can add your own
title bar accessory view

164
00:06:27,146 --> 00:06:29,976 A:middle
controllers at this
location in the window.

165
00:06:30,356 --> 00:06:33,746 A:middle
And the nice thing is that
they can also be added

166
00:06:33,746 --> 00:06:35,336 A:middle
when your window
isn't in Full Screen.

167
00:06:35,846 --> 00:06:36,836 A:middle
So this is what they would look

168
00:06:36,836 --> 00:06:38,696 A:middle
for one that's not
in Full Screen.

169
00:06:39,026 --> 00:06:40,776 A:middle
And they're automatically
managed back and forth.

170
00:06:41,546 --> 00:06:44,226 A:middle
To understand why this
important, it's also good

171
00:06:44,226 --> 00:06:47,566 A:middle
to understand some of the
reasons that we have it.

172
00:06:47,666 --> 00:06:49,446 A:middle
So let's take a look
at your window.

173
00:06:50,146 --> 00:06:54,596 A:middle
And normally, the area under
the toolbar and title bar area,

174
00:06:54,596 --> 00:06:57,156 A:middle
that's where your
content is placed.

175
00:06:57,376 --> 00:06:58,716 A:middle
Your content's underneath it.

176
00:06:59,616 --> 00:07:06,886 A:middle
But as of Mac OS X v10, you can
actually utilize a full content

177

178
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

179
00:06:59,616 --> 00:07:06,886 A:middle
But as of Mac OS X v10, you can
actually utilize a full content

180
00:07:06,886 --> 00:07:11,166 A:middle
area that can extend underneath
the title bar toolbar.

181
00:07:11,496 --> 00:07:12,496 A:middle
And so your title bar

182
00:07:12,696 --> 00:07:15,896 A:middle
and toolbar will have a
blur automatically handled

183
00:07:15,896 --> 00:07:16,596 A:middle
for you behind it.

184
00:07:16,596 --> 00:07:18,846 A:middle
And you can have your
Full Screen accessory view

185
00:07:18,846 --> 00:07:21,456 A:middle
controllers for your
views in this location.

186
00:07:22,066 --> 00:07:25,906 A:middle
So how do you get
that Full Screen mask?

187
00:07:25,976 --> 00:07:26,966 A:middle
It's really easy.

188
00:07:26,966 --> 00:07:28,496 A:middle
You just add to the
window style mask

189
00:07:28,586 --> 00:07:30,456 A:middle
in its full size
content view window mask,

190
00:07:30,456 --> 00:07:35,066 A:middle
and that makes your content be
full size under the title bar.

191
00:07:35,716 --> 00:07:38,876 A:middle
The actual API for using
the title bar accessory view

192
00:07:38,876 --> 00:07:41,296 A:middle
dontrollers, they're
a very simple subclass

193
00:07:41,296 --> 00:07:42,356 A:middle
of NSViewController.

194
00:07:42,706 --> 00:07:44,836 A:middle
So all the standard view
controller stuff will come

195
00:07:44,836 --> 00:07:46,416 A:middle
into play with it
for how to load them.

196
00:07:46,416 --> 00:07:49,676 A:middle
And it adds two properties,
a layout attribute

197
00:07:49,676 --> 00:07:51,406 A:middle
and a Full Screen min height.

198
00:07:52,026 --> 00:07:53,646 A:middle
So I'm going to talk
about those in a minute.

199
00:07:54,426 --> 00:07:55,526 A:middle
But let's look at a few things

200
00:07:55,526 --> 00:07:58,266 A:middle
that the title bar accessory
view controllers do for you.

201
00:07:58,936 --> 00:08:00,196 A:middle
Well like I said before,

202

203
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

204
00:07:58,936 --> 00:08:00,196 A:middle
Well like I said before,

205
00:08:00,196 --> 00:08:04,556 A:middle
they will automatically blur
everything behind them for you.

206
00:08:04,556 --> 00:08:05,956 A:middle
You don't have to
do anything special.

207
00:08:06,686 --> 00:08:08,796 A:middle
It's automatically contained
in a visual effect for you,

208
00:08:08,996 --> 00:08:10,696 A:middle
which is what does
the actual blurring.

209
00:08:11,206 --> 00:08:13,226 A:middle
They automatically
work in Full Screen.

210
00:08:13,596 --> 00:08:15,796 A:middle
So when your window goes to Full
Screen and out of Full Screen,

211
00:08:15,796 --> 00:08:17,266 A:middle
they're placed in
the correct location.

212
00:08:17,956 --> 00:08:20,266 A:middle
And the size is kind of
managed for you automatically.

213
00:08:20,266 --> 00:08:24,276 A:middle
And we'll discuss a little bit
more about that in a minute.

214
00:08:24,446 --> 00:08:26,966 A:middle
So let's look at the first
property, the layout attribute.

215
00:08:29,436 --> 00:08:34,145 A:middle
So here is the layout attribute
when it's set to dot bottom.

216
00:08:34,876 --> 00:08:37,096 A:middle
Dot bottom means
your view is going

217
00:08:37,096 --> 00:08:39,606 A:middle
to be placed below
the title bar.

218
00:08:40,576 --> 00:08:42,765 A:middle
Its height is whatever height
you've actually specified

219
00:08:42,765 --> 00:08:45,296 A:middle
for that view in your nib
or however you specified it.

220
00:08:45,926 --> 00:08:47,816 A:middle
And the width is
automatically changed

221
00:08:47,816 --> 00:08:48,966 A:middle
as the window is resized.

222
00:08:51,056 --> 00:08:52,666 A:middle
Another option is dot right.

223
00:08:53,466 --> 00:08:55,276 A:middle
And this is an example
of Safari.

224
00:08:55,786 --> 00:08:57,616 A:middle
They're using the dot
right option in order

225
00:08:57,616 --> 00:09:01,126 A:middle
to add the plus button to the
Safari window when it's not

226

227
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

228
00:08:57,616 --> 00:09:01,126 A:middle
to add the plus button to the
Safari window when it's not

229
00:09:01,126 --> 00:09:02,536 A:middle
in Full Screen or
in Full Screen.

230
00:09:03,516 --> 00:09:06,206 A:middle
The width is whatever width
the view has specified.

231
00:09:06,596 --> 00:09:08,556 A:middle
And the height is
automatically set to the height

232
00:09:08,556 --> 00:09:11,626 A:middle
of the title bar or tool bar.

233
00:09:11,846 --> 00:09:16,436 A:middle
New to Mac OS X v11 is the
ability to specify a dot left.

234
00:09:17,176 --> 00:09:20,156 A:middle
And with that, you can put
the [inaudible] to the side

235
00:09:20,156 --> 00:09:21,876 A:middle
of the window buttons.

236
00:09:22,026 --> 00:09:25,076 A:middle
So you could add something
like a register button here

237
00:09:25,076 --> 00:09:27,726 A:middle
or some other notes that you
want to show to your user.

238
00:09:28,566 --> 00:09:34,076 A:middle
And it's another
new thing to X v11.

239
00:09:34,286 --> 00:09:36,896 A:middle
Next we have the Full
Screen min height.

240
00:09:38,146 --> 00:09:39,436 A:middle
Let's take a look
at that property.

241
00:09:40,366 --> 00:09:41,536 A:middle
So the Full Screen min height.

242
00:09:41,856 --> 00:09:42,756 A:middle
What does this mean?

243
00:09:43,056 --> 00:09:45,526 A:middle
Well this property
is only applicable

244
00:09:45,726 --> 00:09:47,736 A:middle
when you're actually
in Full Screen.

245
00:09:47,736 --> 00:09:50,676 A:middle
And this is the minimum
height that's visible

246
00:09:50,746 --> 00:09:52,126 A:middle
when you're in Full Screen.

247
00:09:53,116 --> 00:09:56,656 A:middle
Anything that's not shown
will automatically be shown

248
00:09:56,656 --> 00:09:58,066 A:middle
when you mouse up
to the toolbar.

249
00:09:58,066 --> 00:09:59,456 A:middle
And I'll show you
some screenshots

250
00:09:59,456 --> 00:10:00,376 A:middle
of that in just a second.

251

252
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

253
00:09:59,456 --> 00:10:00,376 A:middle
of that in just a second.

254
00:10:01,076 --> 00:10:02,536 A:middle
The default body is zero.

255
00:10:02,536 --> 00:10:05,186 A:middle
So let's take a look
at what that means.

256
00:10:06,256 --> 00:10:07,816 A:middle
So a Full Screen
minimum height of zero.

257
00:10:07,866 --> 00:10:12,446 A:middle
So here's a toolbar, and now
there is an accessory view

258
00:10:12,446 --> 00:10:13,976 A:middle
controller there,
but it's hidden

259
00:10:13,976 --> 00:10:15,126 A:middle
because the height is zero.

260
00:10:15,856 --> 00:10:17,156 A:middle
If the height was non-zero,

261
00:10:17,386 --> 00:10:20,656 A:middle
you would see whatever
value you set always there.

262
00:10:20,746 --> 00:10:24,276 A:middle
And the way it's revealed by the
user is you mouse up to the top

263
00:10:24,276 --> 00:10:27,126 A:middle
of that menu bar, and the
title bar is revealed.

264
00:10:27,606 --> 00:10:31,336 A:middle
And your Full Screen accessory
view is revealed automatically

265
00:10:31,336 --> 00:10:32,426 A:middle
with it.

266
00:10:33,536 --> 00:10:35,186 A:middle
So that's highlighting
that location.

267
00:10:37,156 --> 00:10:40,446 A:middle
Now if you've used NSToolbar,
you may already be familiar

268
00:10:40,446 --> 00:10:43,026 A:middle
with Full Screen
accessory view on NSToolbar.

269
00:10:43,466 --> 00:10:47,026 A:middle
And this new Title Bar Accessory
View Controller supersedes this

270
00:10:47,026 --> 00:10:47,556 A:middle
older API.

271
00:10:47,816 --> 00:10:50,046 A:middle
And so we're encouraging
you to not use it anymore.

272
00:10:50,676 --> 00:10:53,196 A:middle
But the min height and max
height properties work very

273
00:10:53,196 --> 00:10:56,116 A:middle
similar to what's in title
bar accessory view controller.

274
00:10:56,706 --> 00:11:00,516 A:middle
So how do you actually add them?

275

276
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

277
00:10:56,706 --> 00:11:00,516 A:middle
So how do you actually add them?

278
00:11:00,516 --> 00:11:02,496 A:middle
Well we have four
methods on NSWindow.

279
00:11:02,896 --> 00:11:06,256 A:middle
We have an array of title bar
accessory view controllers.

280
00:11:06,256 --> 00:11:08,076 A:middle
You can access what's
attached to the window.

281
00:11:09,046 --> 00:11:09,796 A:middle
You can add them.

282
00:11:10,876 --> 00:11:12,376 A:middle
You can insert them
at a particular index.

283
00:11:13,096 --> 00:11:14,996 A:middle
And you can remove them
at a particular index.

284
00:11:15,996 --> 00:11:18,476 A:middle
But it's really easy
to just add and remove.

285
00:11:18,476 --> 00:11:19,846 A:middle
And so here's what
you'll typically do.

286
00:11:20,236 --> 00:11:22,996 A:middle
You'll call Window Add Title
Bar Accessory View Controller,

287
00:11:23,736 --> 00:11:25,146 A:middle
pass in your accessory
view controller.

288
00:11:25,466 --> 00:11:27,046 A:middle
And when you want to remove it,

289
00:11:27,046 --> 00:11:29,536 A:middle
you'll use our default
NSViewController API,

290
00:11:30,056 --> 00:11:31,186 A:middle
remove from parent
view controller.

291
00:11:31,186 --> 00:11:32,666 A:middle
Which just automatically
figured it

292
00:11:32,666 --> 00:11:34,236 A:middle
out where it is and removes it.

293
00:11:34,826 --> 00:11:39,976 A:middle
So that was talking about Title
Bar Accessory View Controllers.

294
00:11:40,546 --> 00:11:41,966 A:middle
Let's talk about
Full Screen tiles

295
00:11:42,346 --> 00:11:46,136 A:middle
and some new things
in Mac OS X v11.

296
00:11:46,406 --> 00:11:49,256 A:middle
So Full Screen tiles,
what's the purpose of these?

297
00:11:49,576 --> 00:11:51,566 A:middle
They still allow you
to focus your attention

298
00:11:51,566 --> 00:11:53,286 A:middle
or user's attention
on a single task,

299
00:11:54,076 --> 00:11:55,796 A:middle
but it just might
involve multiple windows.

300
00:11:56,606 --> 00:11:58,566 A:middle
You get to use all that
screen real estate.

301
00:11:58,966 --> 00:12:01,956 A:middle
So in this screen shot we have
Safari, and we have reminders

302

303
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

304
00:11:58,966 --> 00:12:01,956 A:middle
So in this screen shot we have
Safari, and we have reminders

305
00:12:01,956 --> 00:12:07,296 A:middle
on the side to focus on a
couple tasks at the same time.

306
00:12:07,526 --> 00:12:09,276 A:middle
So let's take a look
at what happens

307
00:12:09,276 --> 00:12:10,926 A:middle
when you resize the splitter,

308
00:12:10,926 --> 00:12:12,366 A:middle
when you are actually
in this mode.

309
00:12:12,756 --> 00:12:16,646 A:middle
Notice that as I resize,
Safari's window hits a min size

310
00:12:17,196 --> 00:12:18,696 A:middle
and Reminders hits a min size.

311
00:12:18,696 --> 00:12:23,566 A:middle
And it doesn't let it shrink
too far for a given window.

312
00:12:23,736 --> 00:12:26,536 A:middle
So it has a minimum and
maximum that can hit.

313
00:12:27,916 --> 00:12:29,146 A:middle
So I'm going to talk
about how to do that

314
00:12:29,706 --> 00:12:30,706 A:middle
and what you need to do.

315
00:12:31,486 --> 00:12:35,066 A:middle
But first let's talk about,
well, what windows can be put

316
00:12:35,066 --> 00:12:36,316 A:middle
into a Full Screen tile?

317
00:12:37,726 --> 00:12:40,896 A:middle
We will implicitly allow
any window to be put

318
00:12:40,896 --> 00:12:46,046 A:middle
into a Full Screen tile if it's
resizable and it's not a panel.

319
00:12:46,206 --> 00:12:48,306 A:middle
So that means your
window doesn't have

320
00:12:48,366 --> 00:12:49,916 A:middle
to be Full Screen-capable.

321
00:12:50,286 --> 00:12:52,426 A:middle
But it could still
be added as a tile

322
00:12:52,666 --> 00:12:54,466 A:middle
to another Full Screen-capable
window.

323
00:12:55,016 --> 00:12:57,296 A:middle
The heuristics in
exactly what we do

324
00:12:57,296 --> 00:12:59,246 A:middle
and how we determine this
might change over time.

325

326
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

327
00:13:00,026 --> 00:13:02,436 A:middle
So you might want to
make it more explicit.

328
00:13:03,416 --> 00:13:06,596 A:middle
So let's say that you
have a nonresizable window

329
00:13:06,696 --> 00:13:09,266 A:middle
that can't be put into a tile,
and you want it to be able

330
00:13:09,306 --> 00:13:10,186 A:middle
to be put into a tile.

331
00:13:10,766 --> 00:13:11,686 A:middle
You can explicitly add

332
00:13:11,786 --> 00:13:14,786 A:middle
to the collection behavior
Full Screen Allows Tiling

333
00:13:15,236 --> 00:13:17,286 A:middle
to make it allow it
to be put into a tile.

334
00:13:18,466 --> 00:13:21,096 A:middle
Similarly, you might have
a window which you want

335
00:13:21,096 --> 00:13:22,656 A:middle
to never be put into a tile.

336
00:13:23,246 --> 00:13:26,316 A:middle
So we determine it -- it
could be put into a tile,

337
00:13:26,316 --> 00:13:27,276 A:middle
but you don't want it to be.

338
00:13:27,276 --> 00:13:30,046 A:middle
So you can make Full
Screen Disallows Tiling

339
00:13:30,206 --> 00:13:31,656 A:middle
to prevent that.

340
00:13:32,096 --> 00:13:35,216 A:middle
In addition, you might have a
window, you take it Full Screen,

341
00:13:35,216 --> 00:13:36,836 A:middle
and you want it to
always be alone.

342
00:13:37,356 --> 00:13:39,886 A:middle
You can set Full Screen
Disallows Tiling on that window

343
00:13:40,306 --> 00:13:44,766 A:middle
to have no other
windows be put with it.

344
00:13:45,026 --> 00:13:48,076 A:middle
So now you know if a
window can be allowed

345
00:13:48,076 --> 00:13:49,056 A:middle
to be put into a tile.

346
00:13:49,476 --> 00:13:50,856 A:middle
Let's talk about
some of the minimum,

347
00:13:50,856 --> 00:13:52,636 A:middle
maximum sizes for that window.

348
00:13:52,986 --> 00:13:55,846 A:middle
Well normally, when your
window is not in Full Screen,

349
00:13:56,126 --> 00:13:59,606 A:middle
you can resize it, and it's
automatically restricted

350
00:13:59,606 --> 00:14:00,656 A:middle
by its min and max size.

351

352
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

353
00:13:59,606 --> 00:14:00,656 A:middle
by its min and max size.

354
00:14:00,656 --> 00:14:04,846 A:middle
And that's usually determined
automatically by Auto Layout

355
00:14:04,846 --> 00:14:05,926 A:middle
when you're using Auto Layout.

356
00:14:06,996 --> 00:14:08,966 A:middle
If you're using, if you're
not using Auto Layout,

357
00:14:09,346 --> 00:14:12,496 A:middle
then the window's min size
and max size come into play.

358
00:14:12,556 --> 00:14:14,486 A:middle
And those are just
explicit properties

359
00:14:14,486 --> 00:14:15,506 A:middle
that you set in the window.

360
00:14:16,046 --> 00:14:17,926 A:middle
Or content min size
or content max size,

361
00:14:17,926 --> 00:14:18,866 A:middle
depending on what you're using.

362
00:14:20,006 --> 00:14:22,296 A:middle
Now if you're taking a window
and you're going to Full Screen

363
00:14:22,296 --> 00:14:26,126 A:middle
or you're going to a Full Screen
tile, those are the values

364
00:14:26,126 --> 00:14:27,556 A:middle
that you should just
normally use.

365
00:14:28,096 --> 00:14:29,886 A:middle
But there might be
exceptions to that rule,

366
00:14:29,886 --> 00:14:32,346 A:middle
and so we have some
more API to solve that.

367
00:14:33,076 --> 00:14:35,496 A:middle
First of all, let's talk about
an exception to that rule

368
00:14:35,496 --> 00:14:36,166 A:middle
and what you're doing.

369
00:14:36,386 --> 00:14:38,026 A:middle
So here's something
that might be a little

370
00:14:38,066 --> 00:14:39,126 A:middle
calculator application.

371
00:14:39,546 --> 00:14:41,206 A:middle
And its size is not resizable.

372
00:14:41,656 --> 00:14:44,426 A:middle
So this developer might say,
okay, we're going to allow this

373
00:14:44,426 --> 00:14:45,376 A:middle
to be put into a tile.

374
00:14:46,306 --> 00:14:49,746 A:middle
But when it's put into
a tile, as shown here,

375
00:14:50,116 --> 00:14:53,006 A:middle
that calculator's app
height is now a lot larger

376
00:14:53,006 --> 00:14:55,796 A:middle
than it was before, even
though it wasn't resizable.

377
00:14:56,196 --> 00:14:58,526 A:middle
And so it needs to handle
that and do something special.

378
00:14:59,326 --> 00:15:02,266 A:middle
You might also add extra views
there to show more information

379

380
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

381
00:14:59,326 --> 00:15:02,266 A:middle
You might also add extra views
there to show more information

382
00:15:02,266 --> 00:15:04,786 A:middle
to the user when it's
in a Full Screen tile.

383
00:15:05,356 --> 00:15:06,896 A:middle
So you can dynamically do this.

384
00:15:07,246 --> 00:15:08,956 A:middle
And you just use some
window delegate methods,

385
00:15:09,536 --> 00:15:11,166 A:middle
Window Will Enter Full Screen.

386
00:15:11,756 --> 00:15:14,236 A:middle
And in this particular case,
when we enter Full Screen,

387
00:15:14,606 --> 00:15:15,986 A:middle
we're unhiding some views,

388
00:15:16,466 --> 00:15:17,946 A:middle
changing some constraint
priorities,

389
00:15:18,026 --> 00:15:20,216 A:middle
which allow the window
to actually be resized

390
00:15:20,216 --> 00:15:21,696 A:middle
by the system when
it's in Full Screen.

391
00:15:22,016 --> 00:15:24,596 A:middle
And it just undoes that work
when it exits Full Screen.

392
00:15:24,596 --> 00:15:27,236 A:middle
It is important to know that
you might actually get these

393
00:15:27,236 --> 00:15:31,896 A:middle
delegate methods even if your
window does not normally make

394
00:15:31,896 --> 00:15:33,686 A:middle
itself a Full Screen
primary window.

395
00:15:34,166 --> 00:15:36,276 A:middle
So this might be called
for a tile window.

396
00:15:38,296 --> 00:15:42,636 A:middle
Now those windows had a
particular thick size before it

397
00:15:42,636 --> 00:15:43,466 A:middle
was in Full Screen.

398
00:15:44,026 --> 00:15:45,996 A:middle
But when it's in Full
Screen, it sizes different.

399
00:15:46,746 --> 00:15:49,776 A:middle
You will probably need to
tell the system those sizes

400
00:15:49,896 --> 00:15:51,366 A:middle
when it's going to
be in Full Screen.

401
00:15:51,856 --> 00:15:53,826 A:middle
So we have explicit
API to do that.

402
00:15:54,366 --> 00:15:56,206 A:middle
We have a min Full
Screen content size

403
00:15:56,366 --> 00:15:58,506 A:middle
and a max Full Screen
content size to do that.

404
00:15:59,796 --> 00:16:02,166 A:middle
You need to set these
early, because if you played

405

406
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

407
00:15:59,796 --> 00:16:02,166 A:middle
You need to set these
early, because if you played

408
00:16:02,166 --> 00:16:04,916 A:middle
around with Mac OS X v11,
you may notice when you click

409
00:16:04,916 --> 00:16:07,646 A:middle
and hold in the green button,
you're provided with a selection

410
00:16:07,646 --> 00:16:09,626 A:middle
of other candidate
windows that can fit

411
00:16:09,626 --> 00:16:10,786 A:middle
into that available space.

412
00:16:11,546 --> 00:16:14,816 A:middle
So you as the developer need
to set these min sizes early

413
00:16:15,416 --> 00:16:16,536 A:middle
so the system can figure

414
00:16:16,536 --> 00:16:18,886 A:middle
out what is a potential
candidate for that area.

415
00:16:20,016 --> 00:16:22,046 A:middle
Like I said before, normally
you don't need to use these.

416
00:16:22,346 --> 00:16:23,376 A:middle
They're pretty much automatic

417
00:16:23,526 --> 00:16:25,466 A:middle
when your window is
just normally resizable.

418
00:16:26,066 --> 00:16:28,546 A:middle
So that presents a dilemma.

419
00:16:28,706 --> 00:16:32,356 A:middle
What happens if your window
has a min size that's something

420
00:16:32,356 --> 00:16:36,586 A:middle
like 1200, and there is
another window, a window B,

421
00:16:36,636 --> 00:16:38,696 A:middle
that says hey, my size is 1300?

422
00:16:40,096 --> 00:16:41,276 A:middle
Well, the system is going

423
00:16:41,276 --> 00:16:44,126 A:middle
to not allow these two
windows to be together.

424
00:16:44,536 --> 00:16:48,116 A:middle
Their min Full Screen
content size is just too large

425
00:16:48,356 --> 00:16:49,396 A:middle
to actually make it work out.

426
00:16:50,516 --> 00:16:52,996 A:middle
So what do you need
to do as a developer?

427
00:16:54,526 --> 00:16:57,006 A:middle
And for that, I'm going to bring
up my colleague, Taylor Kelly,

428
00:16:57,006 --> 00:16:59,326 A:middle
and he's going to discuss
how to handle that by talking

429
00:16:59,326 --> 00:17:00,156 A:middle
about flexible layout.

430

431
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

432
00:16:59,326 --> 00:17:00,156 A:middle
about flexible layout.

433
00:17:01,136 --> 00:17:01,376 A:middle
Thank you.

434
00:17:02,516 --> 00:17:13,675 A:middle
[ Applause ]

435
00:17:14,175 --> 00:17:14,776 A:middle
>> TAYLOR KELLY: Hello.

436
00:17:15,116 --> 00:17:16,656 A:middle
In this half we're
going to talk about how

437
00:17:16,656 --> 00:17:19,175 A:middle
to make your layouts more
flexible, especially in terms

438
00:17:19,175 --> 00:17:21,586 A:middle
of how narrow they can be made
while in a new split view.

439
00:17:21,586 --> 00:17:26,776 A:middle
On the Mac platform, we have a
wide variety of display sizes

440
00:17:26,776 --> 00:17:28,016 A:middle
that your application
can run on.

441
00:17:28,016 --> 00:17:31,256 A:middle
And with Full Screen, users
are able to immerse themselves,

442
00:17:31,436 --> 00:17:32,686 A:middle
taking up the entire display.

443
00:17:33,836 --> 00:17:36,466 A:middle
With split view, users are now
able to bring another window

444
00:17:36,466 --> 00:17:39,326 A:middle
into this environment to
create a richer experience.

445
00:17:40,086 --> 00:17:43,156 A:middle
But this requires that both
windows are flexible in terms

446
00:17:43,256 --> 00:17:45,496 A:middle
of how small and large
they can be sized

447
00:17:45,966 --> 00:17:47,366 A:middle
to prevent the conflict
situations

448
00:17:47,406 --> 00:17:48,586 A:middle
that Corbin talked
about earlier.

449
00:17:49,806 --> 00:17:52,736 A:middle
This can be particularly tight
on the smaller display sizes

450
00:17:52,956 --> 00:17:54,236 A:middle
such as the new Retina MacBook.

451
00:17:55,006 --> 00:17:58,586 A:middle
This has a default resolution
of 1280 by 800 points.

452
00:17:59,426 --> 00:18:00,616 A:middle
Meaning that while
in split view,

453

454
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

455
00:17:59,426 --> 00:18:00,616 A:middle
Meaning that while
in split view,

456
00:18:01,086 --> 00:18:04,106 A:middle
each window is approximately
allocated 638 points

457
00:18:04,226 --> 00:18:05,046 A:middle
when divided equally.

458
00:18:05,996 --> 00:18:08,026 A:middle
If your application's minimum
width is currently larger

459
00:18:08,026 --> 00:18:10,866 A:middle
than this, users of these
display sizes are often not

460
00:18:10,866 --> 00:18:12,456 A:middle
going to be able to
tile your applications.

461
00:18:13,736 --> 00:18:17,016 A:middle
So I'm going to talk about four
techniques that you can use

462
00:18:17,086 --> 00:18:19,566 A:middle
to make sure your windows
behave nicely in Full Screen.

463
00:18:20,386 --> 00:18:22,636 A:middle
First, there's using Auto
Layout and priorities.

464
00:18:23,516 --> 00:18:26,296 A:middle
Second is the new sidebar
behavior with autocollapsing.

465
00:18:27,336 --> 00:18:30,186 A:middle
Then is using NSStackView
to easily build portions

466
00:18:30,186 --> 00:18:32,676 A:middle
of your interface with
flexibility built right in.

467
00:18:33,686 --> 00:18:35,926 A:middle
And finally, the
updated NSCollectionView

468
00:18:35,926 --> 00:18:37,606 A:middle
with its new powerful
layout support.

469
00:18:39,656 --> 00:18:43,296 A:middle
So Auto Layout is a
constraint-based layout system

470
00:18:43,296 --> 00:18:45,896 A:middle
we introduced in OS
X Lion and iOS 6.

471
00:18:46,336 --> 00:18:47,786 A:middle
It lets you declare
the relationships

472
00:18:47,786 --> 00:18:49,956 A:middle
between different UI
elements, such as the spacing

473
00:18:49,956 --> 00:18:51,386 A:middle
between them or their alignment.

474
00:18:51,386 --> 00:18:53,686 A:middle
And this is really powerful.

475
00:18:53,686 --> 00:18:55,366 A:middle
Windows views are
dynamically resized,

476
00:18:55,626 --> 00:18:56,766 A:middle
such as with localization.

477
00:18:57,826 --> 00:18:59,806 A:middle
You can establish priorities
between those constraints

478
00:18:59,806 --> 00:19:01,836 A:middle
so that stronger ones
can override weaker ones.

479

480
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

481
00:18:59,806 --> 00:19:01,836 A:middle
so that stronger ones
can override weaker ones.

482
00:19:02,026 --> 00:19:04,866 A:middle
I'm not going to go into
too many details about this.

483
00:19:04,866 --> 00:19:06,456 A:middle
There were two talks
earlier today,

484
00:19:06,456 --> 00:19:08,046 A:middle
Mysteries of Auto
Layout Part One and Two

485
00:19:08,366 --> 00:19:10,176 A:middle
that whether you're new or
experienced with Auto Layout,

486
00:19:10,176 --> 00:19:11,236 A:middle
had some really great content.

487
00:19:12,226 --> 00:19:13,806 A:middle
Instead, I want to
focus on priorities

488
00:19:14,116 --> 00:19:14,846 A:middle
through this example UI.

489
00:19:14,846 --> 00:19:18,956 A:middle
We have a label centered in
the middle with buttons pinned

490
00:19:18,956 --> 00:19:19,956 A:middle
to the left and right sides.

491
00:19:19,956 --> 00:19:21,786 A:middle
And these might be the
horizontal constraints

492
00:19:21,786 --> 00:19:22,866 A:middle
that you'd use to create that.

493
00:19:23,636 --> 00:19:26,316 A:middle
With just these constraints, if
the view is dynamically sized,

494
00:19:26,826 --> 00:19:27,936 A:middle
you could end up
with this overlap

495
00:19:27,936 --> 00:19:29,386 A:middle
between the label
and the wide button.

496
00:19:30,086 --> 00:19:31,246 A:middle
It's pretty easy to fix.

497
00:19:31,476 --> 00:19:32,906 A:middle
You'd add a minimum
spacing constraint

498
00:19:32,996 --> 00:19:34,106 A:middle
between that button
and the label.

499
00:19:34,756 --> 00:19:36,206 A:middle
And now when the
container's resized,

500
00:19:36,496 --> 00:19:38,696 A:middle
it can only resize far enough
to where it can satisfy both

501
00:19:38,696 --> 00:19:40,986 A:middle
that center alignment
and that minimum spacing.

502
00:19:40,986 --> 00:19:44,576 A:middle
This is a perfect layout,
except it'd be great

503
00:19:44,576 --> 00:19:46,286 A:middle
if this view can become
even more compact,

504
00:19:46,736 --> 00:19:47,806 A:middle
eliminating that white space

505
00:19:47,806 --> 00:19:49,476 A:middle
between the thin
button and the label.

506
00:19:50,966 --> 00:19:53,586 A:middle
Going back, we can make this
center alignment constraint be

507
00:19:53,586 --> 00:19:56,746 A:middle
optional, meaning it can be
broken by stronger constraints.

508
00:19:57,556 --> 00:19:59,676 A:middle
In addition, we'll add a minimum
spacing between the label

509
00:19:59,676 --> 00:20:02,666 A:middle
and the thin button to prevent
overlapping on that side.

510

511
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

512
00:19:59,676 --> 00:20:02,666 A:middle
and the thin button to prevent
overlapping on that side.

513
00:20:03,156 --> 00:20:05,646 A:middle
This time, the label is
centered as long as possible

514
00:20:05,966 --> 00:20:07,616 A:middle
up until it hits
that minimum padding.

515
00:20:07,616 --> 00:20:11,126 A:middle
And if we continue to resize
the container, we can break

516
00:20:11,126 --> 00:20:12,886 A:middle
that centering in order
to squeeze the most

517
00:20:12,886 --> 00:20:14,866 A:middle
out of our layout,
up to the point

518
00:20:14,866 --> 00:20:17,496 A:middle
to where we satisfy the
minimum padding on both sides.

519
00:20:18,966 --> 00:20:20,246 A:middle
You can get this
for your constraints

520
00:20:20,246 --> 00:20:21,516 A:middle
by just setting the
Priority property.

521
00:20:21,516 --> 00:20:24,186 A:middle
And this is also exposed
through Interface Builder.

522
00:20:25,736 --> 00:20:27,746 A:middle
By default, constraints
are required,

523
00:20:27,926 --> 00:20:29,166 A:middle
meaning they must be satisfied.

524
00:20:29,166 --> 00:20:32,136 A:middle
But anything lower than that and
the constraint becomes optional.

525
00:20:32,936 --> 00:20:35,076 A:middle
We have some key points to help
you decide what priority your

526
00:20:35,076 --> 00:20:35,916 A:middle
constraint should be.

527
00:20:36,746 --> 00:20:38,626 A:middle
There's Default Low,
which is a priority

528
00:20:38,626 --> 00:20:40,416 A:middle
at which your constraint
is typically weaker

529
00:20:40,416 --> 00:20:41,216 A:middle
than most others.

530
00:20:42,226 --> 00:20:43,756 A:middle
There's Drag That
Cannot Resize Window,

531
00:20:43,806 --> 00:20:45,166 A:middle
which is the specific priority

532
00:20:45,166 --> 00:20:47,386 A:middle
at which a split view
divider is dragged at.

533
00:20:47,726 --> 00:20:49,366 A:middle
If you want your constraint
to be more powerful

534
00:20:49,366 --> 00:20:51,346 A:middle
than this behavior, you'd
make your priority higher,

535
00:20:51,346 --> 00:20:52,646 A:middle
otherwise lower.

536
00:20:52,966 --> 00:20:54,996 A:middle
You'd typically never make
it this priority exactly.

537
00:20:56,306 --> 00:20:58,536 A:middle
There's also Windows Size Stay
Put, which is the priority

538
00:20:58,536 --> 00:21:00,156 A:middle
at which a window
holds its current size.

539

540
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

541
00:20:58,536 --> 00:21:00,156 A:middle
at which a window
holds its current size.

542
00:21:00,736 --> 00:21:03,796 A:middle
And finally, there's also
Drag That Can Resize Window,

543
00:21:03,796 --> 00:21:05,496 A:middle
which the priority at which
a window is dragged at.

544
00:21:05,496 --> 00:21:08,776 A:middle
But there's also Default High,
which is another general level

545
00:21:08,776 --> 00:21:10,566 A:middle
at which your constraint
is typically stronger

546
00:21:10,626 --> 00:21:11,976 A:middle
than most others.

547
00:21:12,536 --> 00:21:14,676 A:middle
So that's Auto Layout
priorities.

548
00:21:14,676 --> 00:21:17,046 A:middle
I'm going to refer back to
the concept of priorities

549
00:21:17,046 --> 00:21:18,086 A:middle
in a few later sections.

550
00:21:18,486 --> 00:21:20,336 A:middle
But next I'm going to talk
about NSSplitViewController.

551
00:21:21,346 --> 00:21:23,226 A:middle
This is a Container View
Controller class we introduced

552
00:21:23,226 --> 00:21:23,836 A:middle
in Yosemite.

553
00:21:24,866 --> 00:21:27,266 A:middle
It allows your children
view controllers

554
00:21:27,266 --> 00:21:28,976 A:middle
to be arranged inside
of an NSSplitView

555
00:21:29,396 --> 00:21:31,536 A:middle
and exposes the notion
of NSSplitView items,

556
00:21:31,676 --> 00:21:32,826 A:middle
which encapsulates state

557
00:21:32,826 --> 00:21:34,596 A:middle
about those children
while in the split view.

558
00:21:35,236 --> 00:21:36,706 A:middle
These are things like
the holding priority,

559
00:21:37,046 --> 00:21:39,466 A:middle
the collapse state, and it
allows a really easy way

560
00:21:39,466 --> 00:21:40,686 A:middle
to get animated collapses.

561
00:21:41,866 --> 00:21:44,576 A:middle
Last year's talk Storyboard and
Controllers on OS X talked more

562
00:21:44,576 --> 00:21:46,436 A:middle
about this and other
view controller features.

563
00:21:46,436 --> 00:21:49,176 A:middle
But I want to focus on
what's new in OS X v11.

564
00:21:50,146 --> 00:21:52,556 A:middle
First is the explicit
concept of sidebars

565
00:21:52,556 --> 00:21:54,266 A:middle
and the special behavior
that that comes with,

566
00:21:55,266 --> 00:21:57,236 A:middle
as well as spring loading,
which is the behavior

567
00:21:57,236 --> 00:22:00,066 A:middle
when an item is dragged within
a split view that can occur,

568

569
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

570
00:21:57,236 --> 00:22:00,066 A:middle
when an item is dragged within
a split view that can occur,

571
00:22:00,396 --> 00:22:02,156 A:middle
as well as several new metrics

572
00:22:02,156 --> 00:22:06,136 A:middle
which let you declare exactly
how your split view behaves

573
00:22:06,526 --> 00:22:07,376 A:middle
during resizes.

574
00:22:08,646 --> 00:22:11,206 A:middle
To go through an example,
here's the sidebar in Safari.

575
00:22:11,896 --> 00:22:14,896 A:middle
As the window is resized, once
it hits a point, there's a point

576
00:22:14,896 --> 00:22:16,436 A:middle
at which the sidebar
will autocollapse,

577
00:22:16,606 --> 00:22:19,366 A:middle
and if it's explicitly
reshown while in Full Screen,

578
00:22:19,366 --> 00:22:21,856 A:middle
it will overlay on top of
the other window content.

579
00:22:22,536 --> 00:22:25,006 A:middle
This is transient, similar to
popovers, so clicking outside

580
00:22:25,006 --> 00:22:26,906 A:middle
of it will autodismiss it.

581
00:22:27,456 --> 00:22:29,036 A:middle
This is really easy to get.

582
00:22:29,036 --> 00:22:31,416 A:middle
You just have to use the sidebar
with view controller constructor

583
00:22:31,616 --> 00:22:34,736 A:middle
on NSSplitViewItem, or
by sending the behavior

584
00:22:34,736 --> 00:22:36,296 A:middle
to sidebar in Interface Builder.

585
00:22:36,356 --> 00:22:39,146 A:middle
This will give you back a split
view item that you can then add

586
00:22:39,246 --> 00:22:40,246 A:middle
to your split view controller.

587
00:22:40,246 --> 00:22:42,046 A:middle
And it comes with
some special behaviors

588
00:22:42,546 --> 00:22:44,596 A:middle
such as the built-in
translucent material background

589
00:22:44,596 --> 00:22:47,186 A:middle
and vibrant divider that will
be introduced in Yosemite.

590
00:22:47,786 --> 00:22:48,736 A:middle
You no longer have to add

591
00:22:48,736 --> 00:22:50,636 A:middle
in your own visual effect
view to get this effect.

592
00:22:50,866 --> 00:22:53,306 A:middle
NSSplitViewItem will add
and manage that all for you.

593
00:22:54,636 --> 00:22:56,046 A:middle
There's also the autocollapse

594
00:22:56,046 --> 00:22:58,146 A:middle
and autouncollapse
behavior that you just saw.

595
00:22:58,286 --> 00:23:00,526 A:middle
And with that, the overlays
will in Full Screen.

596

597
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

598
00:22:58,286 --> 00:23:00,526 A:middle
And with that, the overlays
will in Full Screen.

599
00:23:01,916 --> 00:23:03,916 A:middle
In addition, a default several
of the other properties,

600
00:23:03,916 --> 00:23:05,336 A:middle
the standard value for sidebars.

601
00:23:05,696 --> 00:23:08,296 A:middle
So your sidebar behaved just
like the rest on the system.

602
00:23:09,706 --> 00:23:11,376 A:middle
With this there's also
a new action method

603
00:23:11,376 --> 00:23:13,476 A:middle
on split view controller,
toggle sidebar,

604
00:23:13,476 --> 00:23:15,636 A:middle
which will animatedly collapse

605
00:23:15,636 --> 00:23:17,576 A:middle
or uncollapse the first
sidebar it contains.

606
00:23:18,526 --> 00:23:20,746 A:middle
This way, writing no lines
of code, you can hook

607
00:23:20,746 --> 00:23:26,196 A:middle
to a menu item to have this
effect, or a toolbar button.

608
00:23:26,336 --> 00:23:28,226 A:middle
Another really cool
behavior is spring loading.

609
00:23:28,806 --> 00:23:31,196 A:middle
This happens when a user
has a collapsed pane on one

610
00:23:31,196 --> 00:23:32,286 A:middle
of the edges of your split view,

611
00:23:32,576 --> 00:23:34,796 A:middle
and they drag an item
over to that edge.

612
00:23:35,526 --> 00:23:38,146 A:middle
We'll translate, uncollapse
that sidebar and allow them

613
00:23:38,146 --> 00:23:40,456 A:middle
to interact with it and
then recollapse it once they

614
00:23:40,456 --> 00:23:40,966 A:middle
have finished.

615
00:23:41,446 --> 00:23:44,656 A:middle
You can get this by just
setting spring loaded to True

616
00:23:44,656 --> 00:23:46,916 A:middle
in your split view item, and
you'll get this behavior.

617
00:23:46,916 --> 00:23:49,816 A:middle
And this applies to both
sidebars and non-sidebars.

618
00:23:50,156 --> 00:23:50,656 A:middle
The difference being

619
00:23:50,656 --> 00:23:52,426 A:middle
that sidebars will
default this to True.

620
00:23:52,876 --> 00:23:54,626 A:middle
We believe that most sidebars
will want this behavior.

621
00:23:55,126 --> 00:23:58,586 A:middle
Next I want to talk about
several new metrics that we have

622
00:23:58,726 --> 00:24:00,436 A:middle
on NSSplitViewItem
and controller.

623

624
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

625
00:23:58,726 --> 00:24:00,436 A:middle
on NSSplitViewItem
and controller.

626
00:24:00,436 --> 00:24:02,116 A:middle
I'm going to go through
them a couple at a time.

627
00:24:03,686 --> 00:24:05,886 A:middle
First are minimum thickness
and maximum thickness.

628
00:24:06,246 --> 00:24:07,766 A:middle
These directly relate
to constraints

629
00:24:07,766 --> 00:24:09,726 A:middle
that the split view item
is managing on itself.

630
00:24:10,276 --> 00:24:13,276 A:middle
They describe how large or small
this item can actually get.

631
00:24:14,016 --> 00:24:15,976 A:middle
Sidebars will default
these to standard values.

632
00:24:16,276 --> 00:24:17,496 A:middle
But this is a really
convenient way

633
00:24:17,736 --> 00:24:20,626 A:middle
to set these constraints
up for yourself.

634
00:24:22,076 --> 00:24:25,156 A:middle
Holding priority is the only
non-new metric in OS X v11.

635
00:24:25,156 --> 00:24:26,976 A:middle
It describes the priority

636
00:24:26,976 --> 00:24:29,006 A:middle
at which a split view items
holds its current size.

637
00:24:29,636 --> 00:24:31,386 A:middle
In this example,
sidebar is default

638
00:24:31,386 --> 00:24:33,716 A:middle
to a slightly higher value, so
it means they're less likely

639
00:24:33,716 --> 00:24:35,386 A:middle
to resize than other items.

640
00:24:36,236 --> 00:24:38,206 A:middle
So as an example, when
it resizes this window,

641
00:24:38,316 --> 00:24:40,346 A:middle
all of that resize weight
goes to the content area,

642
00:24:40,346 --> 00:24:42,316 A:middle
and the sidebar stays
the same width.

643
00:24:43,876 --> 00:24:45,166 A:middle
Going back, you might
also set this

644
00:24:45,166 --> 00:24:46,806 A:middle
up to have equal
holding priorities

645
00:24:46,916 --> 00:24:48,016 A:middle
between the two items.

646
00:24:48,726 --> 00:24:50,756 A:middle
If you're familiar with Auto
Layout, you might recognize this

647
00:24:50,756 --> 00:24:51,976 A:middle
as an ambiguous situation.

648
00:24:52,486 --> 00:24:54,086 A:middle
But NSSplitView treats
this specially.

649
00:24:55,026 --> 00:24:55,996 A:middle
This time when you resize it,

650
00:24:56,446 --> 00:24:58,436 A:middle
the two views sized
proportionally according

651
00:24:58,436 --> 00:25:00,796 A:middle
to how large they were
before the resize.

652

653
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

654
00:24:58,436 --> 00:25:00,796 A:middle
to how large they were
before the resize.

655
00:25:01,066 --> 00:25:02,806 A:middle
So both views get sized
a little bit larger.

656
00:25:03,286 --> 00:25:05,326 A:middle
That's holding priority.

657
00:25:05,566 --> 00:25:08,466 A:middle
The next metric is
preferred thickness fraction.

658
00:25:08,926 --> 00:25:11,306 A:middle
This describes the ideal
percentage of the split view

659
00:25:11,306 --> 00:25:12,696 A:middle
that a split view
item wants to be in.

660
00:25:13,366 --> 00:25:15,596 A:middle
For instance, sidebars
will default to 15 percent.

661
00:25:16,386 --> 00:25:19,046 A:middle
When the user enters Full Screen
or double-clicks on the divider,

662
00:25:19,046 --> 00:25:21,716 A:middle
that item will snap to
that preferred thickness.

663
00:25:21,936 --> 00:25:23,286 A:middle
It's a really easy way
for them to get back

664
00:25:23,286 --> 00:25:24,106 A:middle
to that standard value.

665
00:25:25,446 --> 00:25:28,186 A:middle
Automatic maximum thickness
comes into play to act as a cap

666
00:25:28,266 --> 00:25:30,196 A:middle
for all of these
automatic sizing behaviors.

667
00:25:30,616 --> 00:25:32,926 A:middle
If that 15 percent was
going to correspond to 350,

668
00:25:32,926 --> 00:25:35,346 A:middle
it would instead
be capped at 280.

669
00:25:37,236 --> 00:25:39,396 A:middle
Those are all of the
NSSplitViewItem metrics.

670
00:25:39,746 --> 00:25:41,606 A:middle
There's one more metric
on NSSplitViewController,

671
00:25:41,916 --> 00:25:44,216 A:middle
which is minimum thickness
for inline sidebars.

672
00:25:44,986 --> 00:25:47,106 A:middle
This describes the width
at which the sidebars

673
00:25:47,106 --> 00:25:48,916 A:middle
in your split view
controller will autocollapse.

674
00:25:49,546 --> 00:25:51,436 A:middle
So sizing right up to that
will leave them inline.

675
00:25:51,436 --> 00:25:54,546 A:middle
And any further will
collapse your sidebar.

676
00:25:55,176 --> 00:25:57,116 A:middle
This also applies
while in Full Screen,

677
00:25:57,636 --> 00:25:59,646 A:middle
except the key difference
is that when in Full Screen

678
00:25:59,646 --> 00:26:02,176 A:middle
if it's explicitly reshown,
it shows as that overlay.

679

680
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

681
00:25:59,646 --> 00:26:02,176 A:middle
if it's explicitly reshown,
it shows as that overlay.

682
00:26:03,176 --> 00:26:05,146 A:middle
This illustrates an important
concept in Full Screen,

683
00:26:05,146 --> 00:26:07,546 A:middle
where we want to avoid
running the window

684
00:26:07,636 --> 00:26:09,286 A:middle
to prevent possible
conflicts with the neighbor.

685
00:26:09,916 --> 00:26:11,926 A:middle
It's always better to
try to rearrange contents

686
00:26:11,926 --> 00:26:14,506 A:middle
within your window
than growing it.

687
00:26:15,756 --> 00:26:17,486 A:middle
To support some of
these new features

688
00:26:17,676 --> 00:26:19,936 A:middle
in NSSplitViewController,
we've made some enhancements

689
00:26:19,936 --> 00:26:23,136 A:middle
to NSSplitView, specifically
with the arranged subviews.

690
00:26:24,356 --> 00:26:26,906 A:middle
Before El Capitan,
all the subviews

691
00:26:26,906 --> 00:26:28,716 A:middle
in a split view were
treated as split panes.

692
00:26:30,116 --> 00:26:30,836 A:middle
This meant that the API

693
00:26:30,836 --> 00:26:33,076 A:middle
to manage this was just
the subview API inherited

694
00:26:33,076 --> 00:26:33,726 A:middle
from NSView.

695
00:26:33,726 --> 00:26:36,996 A:middle
And this is convenient but came
with two really big problems.

696
00:26:37,816 --> 00:26:39,966 A:middle
One is that you're not
able to add subviews

697
00:26:40,036 --> 00:26:41,776 A:middle
that you don't want
treated as split panes.

698
00:26:42,436 --> 00:26:43,916 A:middle
For instance, dividers.

699
00:26:44,196 --> 00:26:45,456 A:middle
Dividers just couldn't
be represented

700
00:26:45,456 --> 00:26:46,326 A:middle
by views with this model.

701
00:26:47,306 --> 00:26:49,686 A:middle
In addition, you can't
separate the Z-order

702
00:26:49,976 --> 00:26:51,516 A:middle
from the arranged
order of the subviews.

703
00:26:51,856 --> 00:26:55,276 A:middle
So your zero index subview is
both the leadingmost and lowest

704
00:26:55,276 --> 00:26:57,636 A:middle
in Z order, and there's
no way to separate that.

705
00:26:58,756 --> 00:27:01,306 A:middle
So now in X v11 you can
designate certain subviews

706

707
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

708
00:26:58,756 --> 00:27:01,306 A:middle
So now in X v11 you can
designate certain subviews

709
00:27:01,306 --> 00:27:03,956 A:middle
as being arranged by the
split view using new API

710
00:27:03,956 --> 00:27:05,076 A:middle
on NSSplitView.

711
00:27:05,636 --> 00:27:09,046 A:middle
This API exactly matches that
on NSStackView and UIStackView

712
00:27:09,356 --> 00:27:11,116 A:middle
for managing their
arranged subviews.

713
00:27:12,266 --> 00:27:14,196 A:middle
There's also this property,
Arranges All Subviews,

714
00:27:14,646 --> 00:27:15,836 A:middle
which by default is True,

715
00:27:16,256 --> 00:27:18,246 A:middle
meaning that your subviews
is still always identical

716
00:27:18,246 --> 00:27:20,656 A:middle
to arrange subviews,
matching that legacy behavior.

717
00:27:21,726 --> 00:27:24,976 A:middle
But even when you set this to
False, NSSplitView still ensures

718
00:27:24,976 --> 00:27:27,066 A:middle
that your subviews, that
your arranged subviews,

719
00:27:27,106 --> 00:27:29,146 A:middle
are always a subset of subviews.

720
00:27:29,786 --> 00:27:32,186 A:middle
For instance, if you add an
arranged subview that's not

721
00:27:32,186 --> 00:27:35,256 A:middle
already a subview, it'll
be added as one for you.

722
00:27:35,846 --> 00:27:39,716 A:middle
And finally, we encourage you
to begin using arranged subviews

723
00:27:39,746 --> 00:27:41,446 A:middle
and setting Arranges
All Subviews to False,

724
00:27:41,876 --> 00:27:44,646 A:middle
because when you do, NSSplitView
is now able to use views

725
00:27:44,646 --> 00:27:47,206 A:middle
to represent its dividers,
allowing for things

726
00:27:47,206 --> 00:27:50,486 A:middle
like vibrancy and special
window-dragging behaviors.

727
00:27:51,586 --> 00:27:53,346 A:middle
You can also control this
through Interface Builder,

728
00:27:53,456 --> 00:27:55,296 A:middle
using this Arranges
All Subviews checkbox.

729
00:27:55,946 --> 00:27:57,396 A:middle
Upgraded nibs will
have this checked

730
00:27:57,756 --> 00:27:58,836 A:middle
at do not legacy behavior.

731
00:27:59,276 --> 00:28:00,166 A:middle
But new split views dragged

732

733
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

734
00:27:59,276 --> 00:28:00,166 A:middle
But new split views dragged

735
00:28:00,166 --> 00:28:02,206 A:middle
out from the object library
will have this unchecked,

736
00:28:02,636 --> 00:28:04,366 A:middle
which is the behavior we
encourage going forward.

737
00:28:06,776 --> 00:28:09,166 A:middle
To help investigate problems
that you may be having

738
00:28:09,166 --> 00:28:10,066 A:middle
with your split view or trying

739
00:28:10,066 --> 00:28:11,506 A:middle
to understand how your
split view is working,

740
00:28:11,886 --> 00:28:14,266 A:middle
we've enhanced the debug
description to tell you things

741
00:28:14,266 --> 00:28:17,216 A:middle
like how it's performing its
layout and what it's using

742
00:28:17,216 --> 00:28:18,236 A:middle
to represent its dividers.

743
00:28:18,236 --> 00:28:20,926 A:middle
For the layout, there
are few possibilities,

744
00:28:21,226 --> 00:28:22,376 A:middle
but we recommend making sure

745
00:28:22,376 --> 00:28:23,916 A:middle
that your split view
is using constraints.

746
00:28:24,636 --> 00:28:26,536 A:middle
This allows it to simply
describe the relationships

747
00:28:26,536 --> 00:28:28,286 A:middle
between its split
panes and interact

748
00:28:28,286 --> 00:28:29,806 A:middle
with other constraints
you have in your window.

749
00:28:30,376 --> 00:28:34,256 A:middle
In addition, it'll allow for
automatic right-to-left flipping

750
00:28:34,546 --> 00:28:35,456 A:middle
of your split view panes.

751
00:28:36,116 --> 00:28:39,586 A:middle
And with that, we also
recommend that dividers begin

752
00:28:39,586 --> 00:28:41,816 A:middle
to be represented using views

753
00:28:41,816 --> 00:28:45,546 A:middle
for the reasons I
mentioned before.

754
00:28:45,546 --> 00:28:48,526 A:middle
To help figure out why
your split view may

755
00:28:48,566 --> 00:28:50,956 A:middle
or not be using constraints,
we've added this Debug Reason

756
00:28:50,956 --> 00:28:53,516 A:middle
For Layout mode, which will give
you a human-readable description

757
00:28:53,936 --> 00:28:55,816 A:middle
for why it is or isn't
using constraints.

758
00:28:56,726 --> 00:28:57,586 A:middle
The most common reason is

759
00:28:57,586 --> 00:28:59,326 A:middle
that the delegate is
overriding certain methods

760
00:28:59,376 --> 00:29:00,686 A:middle
that are incompatible
with Auto Layout.

761

762
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

763
00:28:59,376 --> 00:29:00,686 A:middle
that are incompatible
with Auto Layout.

764
00:29:00,686 --> 00:29:02,966 A:middle
And it'll tell you exactly
which ones those are.

765
00:29:03,986 --> 00:29:05,846 A:middle
Whether or not it's in a window
that's using Auto Layout will

766
00:29:05,846 --> 00:29:08,026 A:middle
also determine whether
it can use constraints.

767
00:29:08,646 --> 00:29:11,466 A:middle
And finally, if it's being
used by NSSplitViewController,

768
00:29:11,966 --> 00:29:13,556 A:middle
it's required to
use constraints.

769
00:29:14,076 --> 00:29:18,186 A:middle
And if you've ever tried to
debug some layout problem

770
00:29:18,186 --> 00:29:20,136 A:middle
with your split view and
printed out the constraints,

771
00:29:20,136 --> 00:29:21,976 A:middle
it probably looks
something like this.

772
00:29:22,546 --> 00:29:23,756 A:middle
It's pretty difficult to parse.

773
00:29:23,756 --> 00:29:25,706 A:middle
If you really want to understand
you have to draw a picture.

774
00:29:26,156 --> 00:29:28,526 A:middle
You can't quite tell which
constraints your app has added

775
00:29:28,646 --> 00:29:30,986 A:middle
versus which constraints
the framework has added.

776
00:29:31,536 --> 00:29:35,396 A:middle
In OS X v11, NSSplitView
now gives identifiers to all

777
00:29:35,396 --> 00:29:36,356 A:middle
of the constraints it adds.

778
00:29:36,356 --> 00:29:38,726 A:middle
So you can not only tell
which constraints it's using,

779
00:29:38,726 --> 00:29:40,466 A:middle
but what it's trying to
do with that constraint.

780
00:29:41,536 --> 00:29:42,236 A:middle
You can quickly tell

781
00:29:42,236 --> 00:29:44,026 A:middle
which constraints your
application's added,

782
00:29:44,556 --> 00:29:46,166 A:middle
or if there's some
weird sizing behavior

783
00:29:46,166 --> 00:29:48,486 A:middle
that you're not sure what's
going on, you can quickly see

784
00:29:48,486 --> 00:29:51,976 A:middle
which constraints
likely deal with that.

785
00:29:51,976 --> 00:29:53,626 A:middle
NSStackView has similar
identifiers

786
00:29:53,956 --> 00:29:55,036 A:middle
for each of its constraints.

787
00:29:55,036 --> 00:29:58,056 A:middle
I want to talk about
NSStackView now.

788
00:29:58,766 --> 00:30:00,906 A:middle
So this is a class we
introduced in Mavericks

789

790
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

791
00:29:58,766 --> 00:30:00,906 A:middle
So this is a class we
introduced in Mavericks

792
00:30:00,946 --> 00:30:02,906 A:middle
that makes it really
easy to create horizontal

793
00:30:02,906 --> 00:30:06,946 A:middle
or vertical stacks of views,
all using Auto Layout.

794
00:30:07,046 --> 00:30:08,786 A:middle
It's completely compatible
with other constraints you have

795
00:30:08,786 --> 00:30:10,856 A:middle
in your window, but
it manages all

796
00:30:10,856 --> 00:30:13,086 A:middle
of the constraints it
uses to create its stack.

797
00:30:13,086 --> 00:30:15,176 A:middle
So you can add or remove
views and not have to worry

798
00:30:15,176 --> 00:30:16,576 A:middle
about updating those
constraints.

799
00:30:17,486 --> 00:30:20,046 A:middle
It has built-in notions of
alignment and distribution,

800
00:30:20,046 --> 00:30:22,256 A:middle
so you can control how
your views are positioned

801
00:30:22,256 --> 00:30:24,446 A:middle
within the stack view,
as well as clipping

802
00:30:24,446 --> 00:30:26,846 A:middle
and attaching behaviors so
you can control what happens

803
00:30:26,846 --> 00:30:28,366 A:middle
when the stack views
try to make smaller

804
00:30:28,366 --> 00:30:29,726 A:middle
than the views it contains.

805
00:30:31,046 --> 00:30:33,166 A:middle
In addition, in X v11
we've made a series

806
00:30:33,166 --> 00:30:35,036 A:middle
of performance improvements,
decreasing the number

807
00:30:35,036 --> 00:30:36,736 A:middle
of constraints it
uses and moving

808
00:30:36,736 --> 00:30:39,606 A:middle
from using private internal
views to using NS layout guides.

809
00:30:40,256 --> 00:30:42,466 A:middle
And we've seen some pretty
great performance improvements.

810
00:30:43,706 --> 00:30:45,656 A:middle
Mysteries of Auto Layout
Part One talks about this

811
00:30:45,656 --> 00:30:48,296 A:middle
and the new UIStackView
on iOS as well

812
00:30:48,296 --> 00:30:49,926 A:middle
as the awesome new
Interface Builder support

813
00:30:49,926 --> 00:30:51,426 A:middle
that we now have.

814
00:30:51,426 --> 00:30:54,706 A:middle
I do want to focus on
the new distributions,

815
00:30:54,996 --> 00:30:57,166 A:middle
which describe how the stack
views are arranged along the

816
00:30:57,166 --> 00:30:58,246 A:middle
stacking axis.

817
00:30:58,916 --> 00:31:01,096 A:middle
You can set this with
the Distribution property

818

819
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

820
00:30:58,916 --> 00:31:01,096 A:middle
You can set this with
the Distribution property

821
00:31:01,176 --> 00:31:02,036 A:middle
on NSStackView.

822
00:31:02,136 --> 00:31:03,736 A:middle
I'm going to go through
illustrations

823
00:31:03,736 --> 00:31:05,006 A:middle
on how each one of these work.

824
00:31:06,076 --> 00:31:08,376 A:middle
So Gravity Areas matches
the pre-X v11 behavior,

825
00:31:08,376 --> 00:31:10,536 A:middle
where you can designate
certain views as being attracted

826
00:31:10,566 --> 00:31:11,706 A:middle
to certain edges
of the split view.

827
00:31:12,216 --> 00:31:14,196 A:middle
For horizontal, that's
leading, center, and training.

828
00:31:14,586 --> 00:31:16,276 A:middle
For vertical that's
top, center, and bottom.

829
00:31:16,276 --> 00:31:18,456 A:middle
So in this case as we
grow the stack view,

830
00:31:18,896 --> 00:31:22,126 A:middle
those views will tend
towards those edges.

831
00:31:22,346 --> 00:31:25,106 A:middle
Fill is a new behavior
where the views are required

832
00:31:25,106 --> 00:31:26,436 A:middle
to completely fill
the stack view.

833
00:31:26,516 --> 00:31:30,016 A:middle
And using other constraints,
you can determine how they grow

834
00:31:30,016 --> 00:31:31,006 A:middle
or distribute that size.

835
00:31:31,876 --> 00:31:35,446 A:middle
In this example, tiny has set
to the lowest tugging priority,

836
00:31:36,096 --> 00:31:37,156 A:middle
so as we grow the stack view,

837
00:31:37,356 --> 00:31:39,016 A:middle
it receives all of
the resize weight.

838
00:31:40,316 --> 00:31:41,566 A:middle
Fill Equally is similar,

839
00:31:41,566 --> 00:31:43,686 A:middle
except now stack view
is adding constraints

840
00:31:43,756 --> 00:31:45,486 A:middle
that prefers the views
to be equally sized.

841
00:31:46,216 --> 00:31:48,286 A:middle
In this case we're adding
even stronger constraints

842
00:31:48,346 --> 00:31:49,506 A:middle
to squeeze the stack view down,

843
00:31:49,506 --> 00:31:52,056 A:middle
and it can override these
equal filling constraints.

844
00:31:52,726 --> 00:31:53,846 A:middle
But as we grow the stack view,

845
00:31:54,236 --> 00:31:56,226 A:middle
those views will tend
towards that equal sizing.

846
00:31:56,836 --> 00:32:01,246 A:middle
Fill Proportionally is
similar, except here they grow

847

848
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

849
00:31:56,836 --> 00:32:01,246 A:middle
Fill Proportionally is
similar, except here they grow

850
00:32:01,246 --> 00:32:03,756 A:middle
in proportion to how big their
intrinsic content sizes are.

851
00:32:04,336 --> 00:32:06,386 A:middle
So in this case, the larger
views grow even larger,

852
00:32:06,456 --> 00:32:10,736 A:middle
and the smaller views
not so much.

853
00:32:10,956 --> 00:32:13,306 A:middle
Equal Spacing is a distribution
where it's the not views

854
00:32:13,306 --> 00:32:15,296 A:middle
that receive the
additional size,

855
00:32:15,566 --> 00:32:17,116 A:middle
but it's the spacing
between the views.

856
00:32:17,906 --> 00:32:20,546 A:middle
In this case, as we grow,
the spacing between the edges

857
00:32:20,666 --> 00:32:22,556 A:middle
of each of the views
are all made equivalent.

858
00:32:24,236 --> 00:32:27,046 A:middle
Equal Centering is
similar, except here,

859
00:32:27,506 --> 00:32:30,416 A:middle
it's not the spacing between
the edges of the views

860
00:32:30,766 --> 00:32:32,546 A:middle
but between the centers
of the views.

861
00:32:33,066 --> 00:32:35,566 A:middle
With these new distribution
behaviors,

862
00:32:35,566 --> 00:32:38,266 A:middle
we think you can use stack view
in even more places of your UI

863
00:32:38,266 --> 00:32:40,826 A:middle
and really benefit from
the things it brings.

864
00:32:42,316 --> 00:32:45,826 A:middle
Another aspect of stack views
is the clipping behaviors.

865
00:32:46,206 --> 00:32:48,996 A:middle
So by default, stack views
can be made larger or up

866
00:32:48,996 --> 00:32:51,486 A:middle
to the minimum size necessary
to contain all of their items.

867
00:32:52,246 --> 00:32:54,316 A:middle
But you can also set the
clipping resistance priority

868
00:32:54,416 --> 00:32:57,286 A:middle
to allow it to begin clipping
its contents at that priority.

869
00:32:57,976 --> 00:32:58,956 A:middle
So now we can actually be made,

870
00:32:58,956 --> 00:33:03,506 A:middle
the stack view be made
smaller than its container.

871

872
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

873
00:32:58,956 --> 00:33:03,506 A:middle
the stack view be made
smaller than its container.

874
00:33:03,586 --> 00:33:05,736 A:middle
Often you don't want this
partial clipping of the views,

875
00:33:05,736 --> 00:33:06,906 A:middle
but it would be better
for the views

876
00:33:06,906 --> 00:33:08,186 A:middle
to entirely be dropped off.

877
00:33:08,916 --> 00:33:11,266 A:middle
You can control this by
setting the visibility priority

878
00:33:11,266 --> 00:33:12,336 A:middle
for the different views.

879
00:33:13,056 --> 00:33:14,976 A:middle
The view at the lowest
visibility priority will be

880
00:33:14,976 --> 00:33:17,266 A:middle
completely dropped once
the stack view starts

881
00:33:17,296 --> 00:33:18,116 A:middle
to clip its views.

882
00:33:19,026 --> 00:33:21,776 A:middle
In this case, we're going to set
it in descending order so that

883
00:33:21,776 --> 00:33:23,236 A:middle
as the stack view
starts to clip a view,

884
00:33:23,236 --> 00:33:25,696 A:middle
it'll just completely
temporarily detach off.

885
00:33:26,406 --> 00:33:29,356 A:middle
So in this case, the six
is not visible anymore.

886
00:33:29,906 --> 00:33:32,716 A:middle
If the stack view
grows larger again,

887
00:33:32,716 --> 00:33:35,566 A:middle
it'll reattach those views as
there's enough size to fit them.

888
00:33:36,376 --> 00:33:37,986 A:middle
In addition, you
can get callbacks

889
00:33:38,326 --> 00:33:40,606 A:middle
for when this detaching
or reattaching happens.

890
00:33:40,686 --> 00:33:43,186 A:middle
So you can perhaps make
adjustments to other portions

891
00:33:43,186 --> 00:33:45,226 A:middle
of your [inaudible], such
as adding an overflow menu.

892
00:33:45,766 --> 00:33:49,006 A:middle
Next, I want to give
a quick overview

893
00:33:49,006 --> 00:33:50,636 A:middle
of the new updated
collection view,

894
00:33:50,746 --> 00:33:53,576 A:middle
which now has feature parity
with the UI collection view.

895
00:33:54,256 --> 00:33:55,806 A:middle
This includes reusability
of items

896
00:33:55,856 --> 00:33:57,606 A:middle
so you can have really
scalable presentations

897
00:33:57,606 --> 00:34:00,346 A:middle
of large collections with
items with section support.

898

899
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

900
00:33:57,606 --> 00:34:00,346 A:middle
of large collections with
items with section support.

901
00:34:01,246 --> 00:34:03,326 A:middle
In addition, there's some
really powerful layout support,

902
00:34:03,326 --> 00:34:05,876 A:middle
so your collection view behaves
great no matter what the size.

903
00:34:06,836 --> 00:34:08,446 A:middle
This includes built-in
grid layout,

904
00:34:08,856 --> 00:34:11,906 A:middle
flow layout that matches
iOS, as well the ability

905
00:34:11,906 --> 00:34:13,146 A:middle
to create your own
custom layouts.

906
00:34:13,835 --> 00:34:15,946 A:middle
Troy has an awesome talk
about this later today,

907
00:34:15,946 --> 00:34:16,976 A:middle
What's New in Collection View.

908
00:34:17,416 --> 00:34:20,346 A:middle
I really recommend
checking that out.

909
00:34:20,616 --> 00:34:22,626 A:middle
With this talk we also have
Sample Code associated.

910
00:34:23,926 --> 00:34:27,275 A:middle
It's a photo-browsing app that
shows off various features, API,

911
00:34:27,275 --> 00:34:29,335 A:middle
and behaviors that
Corbin and I talked about.

912
00:34:30,056 --> 00:34:31,966 A:middle
For instance, it shows up
different Full Screen API,

913
00:34:32,356 --> 00:34:33,626 A:middle
specifically the new tiling API.

914
00:34:33,626 --> 00:34:36,505 A:middle
We have this little standalone
window that's normally required

915
00:34:36,505 --> 00:34:39,286 A:middle
to be aspect-ratio sized
and isn't Full Screenable.

916
00:34:39,835 --> 00:34:41,426 A:middle
However, we have
made it tileable

917
00:34:41,656 --> 00:34:43,585 A:middle
with a custom layout
once it's in that tile.

918
00:34:45,096 --> 00:34:47,005 A:middle
It also uses the new split
view controller features,

919
00:34:47,005 --> 00:34:49,646 A:middle
such as the autocollapsing
sidebar with the overlay,

920
00:34:50,726 --> 00:34:51,876 A:middle
as well as NSStackView.

921
00:34:52,396 --> 00:34:55,366 A:middle
It creates this bottom
toolbar using zero constraints,

922
00:34:55,706 --> 00:34:56,716 A:middle
which is really, really awesome.

923
00:34:57,526 --> 00:34:59,056 A:middle
It also uses that
detaching behavior

924
00:34:59,396 --> 00:35:01,596 A:middle
so that it can be made
smaller than those items

925

926
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

927
00:34:59,396 --> 00:35:01,596 A:middle
so that it can be made
smaller than those items

928
00:35:02,056 --> 00:35:03,586 A:middle
and shows this little
overflow menu

929
00:35:03,586 --> 00:35:07,126 A:middle
so the user still
has access to them.

930
00:35:07,346 --> 00:35:09,816 A:middle
It also uses the
updated NSCollectionView

931
00:35:09,816 --> 00:35:13,266 A:middle
for this little grid of photos
that behaves really responsibly.

932
00:35:16,456 --> 00:35:19,936 A:middle
So Corbin took us through
the aspects of Full Screen,

933
00:35:20,216 --> 00:35:22,656 A:middle
such as how to adopt Full
Screen into our applications.

934
00:35:22,996 --> 00:35:25,686 A:middle
And using title bar accessory
reviews, to have those bars

935
00:35:25,686 --> 00:35:27,656 A:middle
that live beneath the
toolbar behave really great

936
00:35:27,656 --> 00:35:28,406 A:middle
in Full Screen.

937
00:35:29,406 --> 00:35:31,566 A:middle
In addition, he showed us some
of the Full Screen Tiling API

938
00:35:31,566 --> 00:35:32,966 A:middle
so that we can make sure

939
00:35:32,966 --> 00:35:35,626 A:middle
that our special case
windows behave properly while

940
00:35:35,626 --> 00:35:36,176 A:middle
in Full Screen.

941
00:35:37,556 --> 00:35:39,186 A:middle
And finally, some of the ways

942
00:35:39,186 --> 00:35:41,006 A:middle
to make sure our layouts
are really flexible,

943
00:35:41,006 --> 00:35:42,566 A:middle
especially in this
narrow environment,

944
00:35:43,376 --> 00:35:45,906 A:middle
such as using the new sidebars
with Split View Controller.

945
00:35:46,726 --> 00:35:49,086 A:middle
Auto Layout and NSStackView
to build flexibility

946
00:35:49,086 --> 00:35:50,446 A:middle
into other portions your UI.

947
00:35:51,286 --> 00:35:54,466 A:middle
And NSCollectionView, with its
really awesome layout support.

948
00:35:54,466 --> 00:35:58,056 A:middle
If you have any questions,
you can contact Paul Marcos.

949
00:35:58,146 --> 00:35:59,226 A:middle
He loves getting emails.

950

951
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

952
00:36:00,436 --> 00:36:02,116 A:middle
In addition, we have
some related sessions

953
00:36:02,116 --> 00:36:02,956 A:middle
that I mentioned earlier.

954
00:36:02,956 --> 00:36:05,586 A:middle
They're all passed now, but
you can catch them on video.

955
00:36:05,586 --> 00:36:08,516 A:middle
In addition, we have some
labs that are later today,

956
00:36:08,516 --> 00:36:10,946 A:middle
well currently ongoing, and will
be later on today and tomorrow

957
00:36:11,416 --> 00:36:12,216 A:middle
if you have any questions.

958
00:36:13,516 --> 00:36:14,506 A:middle
Have a great WWDC.

959
00:36:14,646 --> 00:36:15,436 A:middle
Enjoy the bash.

960
00:36:16,046 --> 00:36:16,436 A:middle
See you later.

961
00:36:18,516 --> 00:36:32,150 A:middle
[ Applause ]

962
