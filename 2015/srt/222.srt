X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:24,516 --> 00:00:29,896 A:middle
[ Applause ]

2
00:00:30,396 --> 00:00:31,506 A:middle
>> SARA RADI: Good
afternoon, everyone!

3
00:00:31,506 --> 00:00:33,296 A:middle
Welcome to the new UIKit support

4
00:00:33,296 --> 00:00:35,506 A:middle
for international user
interfaces session,

5
00:00:35,566 --> 00:00:38,616 A:middle
my name is Sara Radi I'm a
international utilization

6
00:00:38,616 --> 00:00:41,276 A:middle
software engineer, and
I'm one of those people

7
00:00:41,276 --> 00:00:43,316 A:middle
who would really love
to use your amazing app

8
00:00:43,316 --> 00:00:47,046 A:middle
in my native language, but
I just can't find great apps

9
00:00:47,046 --> 00:00:48,536 A:middle
in the App Store localized.

10
00:00:49,356 --> 00:00:53,506 A:middle
My native language is Arabic.

11
00:00:53,506 --> 00:00:55,426 A:middle
And I grew up in a country,

12
00:00:55,426 --> 00:00:57,166 A:middle
where we didn't write
right from right to left.

13
00:00:57,886 --> 00:01:01,436 A:middle
And before Smart Phones became
so popular, we didn't have

14

15
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

16
00:00:57,886 --> 00:01:01,436 A:middle
And before Smart Phones became
so popular, we didn't have

17
00:01:01,496 --> 00:01:03,486 A:middle
to think about layout
in right to left.

18
00:01:03,936 --> 00:01:07,626 A:middle
So basically just
supporting the text rendering

19
00:01:07,936 --> 00:01:09,366 A:middle
and the font was enough.

20
00:01:10,196 --> 00:01:13,606 A:middle
However, today, with all of
these electronic devices,

21
00:01:14,026 --> 00:01:16,026 A:middle
people are using
more and more eBooks,

22
00:01:16,476 --> 00:01:19,106 A:middle
and they are interacting more
and more with their devices.

23
00:01:19,856 --> 00:01:23,276 A:middle
So supporting just the text
in your apps is not enough

24
00:01:23,446 --> 00:01:26,716 A:middle
and it becomes very important
to think about the layout

25
00:01:27,076 --> 00:01:30,706 A:middle
and the flow of your app when
supporting these localizations.

26
00:01:31,296 --> 00:01:36,886 A:middle
And just like me, there are
a million of users who wants

27
00:01:36,886 --> 00:01:38,846 A:middle
to use their apps in
their native language.

28
00:01:39,716 --> 00:01:43,376 A:middle
This is a huge opportunity
for you to grow your markets

29
00:01:43,376 --> 00:01:44,726 A:middle
in these areas of the world.

30
00:01:45,306 --> 00:01:49,676 A:middle
This is an example of an
Apple ad in Dubai in one

31
00:01:49,676 --> 00:01:51,876 A:middle
of the largest buildings
in the world,

32
00:01:52,406 --> 00:01:54,136 A:middle
and this gives you an idea

33
00:01:54,136 --> 00:01:56,726 A:middle
of Apple's presence
in the Middle East.

34
00:01:58,116 --> 00:02:00,586 A:middle
So what are we going
to talk about today?

35

36
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

37
00:01:58,116 --> 00:02:00,586 A:middle
So what are we going
to talk about today?

38
00:02:01,056 --> 00:02:07,366 A:middle
So mainly we are going
to focus -- I'm sorry.

39
00:02:07,366 --> 00:02:09,336 A:middle
Mainly we are going to focus

40
00:02:09,336 --> 00:02:11,946 A:middle
on right-to-left user
interface challenges,

41
00:02:11,946 --> 00:02:15,616 A:middle
and then we are going to
introduce the new UIKit support.

42
00:02:16,366 --> 00:02:18,226 A:middle
We added the native
UIKit support

43
00:02:18,226 --> 00:02:21,066 A:middle
for right-to-left languages so
we made it seize easy for you

44
00:02:21,066 --> 00:02:24,186 A:middle
to support right-to-left
with no effort.

45
00:02:24,186 --> 00:02:27,256 A:middle
And then we are going to
talk about your custom layout

46
00:02:27,256 --> 00:02:29,666 A:middle
and how can you add
right-to-left support

47
00:02:29,666 --> 00:02:32,896 A:middle
in your custom layout with auto
layout, and then we are going

48
00:02:32,896 --> 00:02:37,996 A:middle
to introduce new APIs that we
just added on iOS 9 and talk

49
00:02:37,996 --> 00:02:40,796 A:middle
about exception cases
and hopefully by the end

50
00:02:40,796 --> 00:02:44,886 A:middle
of the session, I want to see
more apps localized in Arabic

51
00:02:44,886 --> 00:02:46,466 A:middle
in the App Store, and Hebrew.

52
00:02:46,466 --> 00:02:47,016 A:middle
I'm sorry.

53
00:02:47,016 --> 00:02:51,686 A:middle
So let's get started
with an overview.

54
00:02:52,536 --> 00:02:55,546 A:middle
So when you are designing your
app in left-to-right languages

55
00:02:56,046 --> 00:02:59,106 A:middle
or in English, for
example, you always start

56
00:02:59,646 --> 00:03:02,836 A:middle
by placing the most
important elements

57

58
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

59
00:02:59,646 --> 00:03:02,836 A:middle
by placing the most
important elements

60
00:03:02,836 --> 00:03:04,346 A:middle
on the left side of the screen.

61
00:03:05,106 --> 00:03:07,066 A:middle
And then you if have,
like other elements,

62
00:03:07,176 --> 00:03:09,186 A:middle
so they would flow
naturally left to right.

63
00:03:09,496 --> 00:03:11,056 A:middle
And the reason why we do that,

64
00:03:11,056 --> 00:03:14,246 A:middle
is because the layout itself it
starts to, [follow] the reading

65
00:03:14,246 --> 00:03:16,176 A:middle
and the writing direction
of the script.

66
00:03:16,646 --> 00:03:20,076 A:middle
So it makes total sense if you
are designing your app in right

67
00:03:20,076 --> 00:03:23,786 A:middle
to left, to flip the layout and
this is because the scripts read

68
00:03:23,786 --> 00:03:25,046 A:middle
and write from right to left.

69
00:03:25,556 --> 00:03:30,936 A:middle
And the UI mirroring
concept does not only apply

70
00:03:30,936 --> 00:03:32,076 A:middle
to static UI.

71
00:03:32,266 --> 00:03:34,056 A:middle
It also applies to dynamic UI.

72
00:03:34,706 --> 00:03:36,136 A:middle
For example, in your app,

73
00:03:36,136 --> 00:03:39,196 A:middle
if you have navigation
gestures and animations.

74
00:03:39,486 --> 00:03:42,116 A:middle
For example, so here the
back button is always

75
00:03:42,176 --> 00:03:43,726 A:middle
on the left side of the screen.

76
00:03:44,076 --> 00:03:44,996 A:middle
So when writing

77
00:03:44,996 --> 00:03:47,886 A:middle
in a right-to-left environment
not only the back button should

78
00:03:47,886 --> 00:03:50,336 A:middle
be on the right side,
but also the gesture

79
00:03:50,336 --> 00:03:52,746 A:middle
and the animation
that comes with it.

80
00:03:54,896 --> 00:03:56,666 A:middle
So what's new in UIKit.

81
00:03:57,876 --> 00:04:02,256 A:middle
So on iOS 9 UIKit sender
controls fully support user

82

83
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

84
00:03:57,876 --> 00:04:02,256 A:middle
So on iOS 9 UIKit sender
controls fully support user

85
00:04:02,256 --> 00:04:03,426 A:middle
interface mirroring.

86
00:04:03,576 --> 00:04:05,426 A:middle
Which means when
your apps are running

87
00:04:05,546 --> 00:04:08,676 A:middle
in right-to-left localizations
they will flip automatically

88
00:04:08,676 --> 00:04:09,096 A:middle
for you.

89
00:04:09,316 --> 00:04:13,236 A:middle
Also the whole system and all
our native apps fully support

90
00:04:13,236 --> 00:04:16,606 A:middle
right-to-left UI so your
apps should be consistent.

91
00:04:17,755 --> 00:04:20,106 A:middle
So let's go through
some standard controls

92
00:04:20,366 --> 00:04:21,435 A:middle
in our native apps.

93
00:04:22,176 --> 00:04:24,276 A:middle
Let's start with UI table view.

94
00:04:25,476 --> 00:04:28,266 A:middle
So this is an example
from the Settings app,

95
00:04:28,336 --> 00:04:31,166 A:middle
where we are using a
stock UI table view.

96
00:04:31,376 --> 00:04:34,586 A:middle
As you can see here we are
running the device in English,

97
00:04:34,586 --> 00:04:37,666 A:middle
so the icons are on the
left side of the screen,

98
00:04:37,846 --> 00:04:41,146 A:middle
the labels are left aligned, and
the table view accessories are

99
00:04:41,146 --> 00:04:44,286 A:middle
on the right side, so
changing my language to Hebrew,

100
00:04:44,286 --> 00:04:48,706 A:middle
for example, will flip the table
view cells automatically for me

101
00:04:49,016 --> 00:04:51,496 A:middle
so all of the icons now
are on the right side.

102
00:04:51,746 --> 00:04:55,566 A:middle
The text labels are right
aligned on left of the icons,

103
00:04:55,566 --> 00:04:59,466 A:middle
and the table accessories
are on the left side.

104
00:04:59,676 --> 00:05:01,376 A:middle
Next navigation controller.

105

106
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

107
00:04:59,676 --> 00:05:01,376 A:middle
Next navigation controller.

108
00:05:01,376 --> 00:05:04,096 A:middle
And this is an example
from the phone app

109
00:05:04,376 --> 00:05:07,266 A:middle
where you can see the back
button now is on the right side

110
00:05:07,266 --> 00:05:09,666 A:middle
of the screen and also
the navigation gesture

111
00:05:09,666 --> 00:05:12,166 A:middle
and animation comes from the
right edge of the screen.

112
00:05:12,496 --> 00:05:15,176 A:middle
If you look closely,
also the UI table,

113
00:05:15,346 --> 00:05:18,196 A:middle
the UI tab at the
bottom also flips

114
00:05:18,366 --> 00:05:20,226 A:middle
so now favorite is
on the right side.

115
00:05:20,926 --> 00:05:25,336 A:middle
Next, tracking gestures,
this is another example

116
00:05:25,396 --> 00:05:29,666 A:middle
of a UI table view in the clock
app where you can see the slide,

117
00:05:29,976 --> 00:05:32,046 A:middle
the swipe to the lead
gesture is coming

118
00:05:32,046 --> 00:05:33,486 A:middle
from the left edge
of the screen.

119
00:05:34,426 --> 00:05:37,476 A:middle
If you use a stock UI table
view and enable the swipe

120
00:05:37,476 --> 00:05:39,156 A:middle
to the lead gesture --
that comes for free.

121
00:05:39,906 --> 00:05:43,946 A:middle
So, how can you enable
right-to-left support

122
00:05:43,946 --> 00:05:44,476 A:middle
in your apps?

123
00:05:44,996 --> 00:05:47,536 A:middle
If you already have this
localizations in your app,

124
00:05:48,026 --> 00:05:50,656 A:middle
all you need to do
is link against iOS 9

125
00:05:51,036 --> 00:05:52,696 A:middle
and test your apps, make sure

126
00:05:52,696 --> 00:05:55,266 A:middle
that your custom layout
works as expected.

127
00:05:56,946 --> 00:05:59,526 A:middle
However, if you are
adding this localizations

128
00:05:59,526 --> 00:06:01,516 A:middle
for the first time,
so we recommend

129

130
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

131
00:05:59,526 --> 00:06:01,516 A:middle
for the first time,
so we recommend

132
00:06:01,516 --> 00:06:04,866 A:middle
that you move your
storyboards to base approach

133
00:06:04,866 --> 00:06:08,216 A:middle
with auto layout and when
you add the localizations,

134
00:06:08,396 --> 00:06:12,456 A:middle
XCode with create basically
strings fast for you

135
00:06:12,566 --> 00:06:15,236 A:middle
so you can export them,
send them to translations.

136
00:06:15,426 --> 00:06:18,836 A:middle
When you get them back, you
can import them via XCode again

137
00:06:19,256 --> 00:06:22,426 A:middle
and when you run your app
at run time, you will see

138
00:06:22,426 --> 00:06:25,816 A:middle
that your translation is
integrated automatically as well

139
00:06:25,816 --> 00:06:27,726 A:middle
as your layout is flipped.

140
00:06:28,936 --> 00:06:31,046 A:middle
So now let's talk about testing.

141
00:06:31,626 --> 00:06:36,716 A:middle
So XCode makes it so easy for
you to test right-to-left layout

142
00:06:36,716 --> 00:06:39,006 A:middle
without even having
the localizations

143
00:06:39,006 --> 00:06:40,666 A:middle
or integrating the translations.

144
00:06:41,066 --> 00:06:42,816 A:middle
So if you go to XCode scheme

145
00:06:43,086 --> 00:06:46,236 A:middle
and you change your application
language from system language

146
00:06:46,236 --> 00:06:48,166 A:middle
to right-to-left to do language,

147
00:06:48,166 --> 00:06:50,506 A:middle
that will simulate a
right-to-left environment

148
00:06:50,506 --> 00:06:53,466 A:middle
for you and you will have
an idea if your app is ready

149
00:06:53,586 --> 00:06:55,816 A:middle
to ship or not with
right to left.

150
00:06:56,436 --> 00:06:59,096 A:middle
And to show you, all what
we just talked about now.

151
00:06:59,096 --> 00:07:01,736 A:middle
I am going to call my
colleague Aaltan Ahmad

152

153
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

154
00:06:59,096 --> 00:07:01,736 A:middle
I am going to call my
colleague Aaltan Ahmad

155
00:07:01,736 --> 00:07:03,056 A:middle
on stage to give you a demo.

156
00:07:15,506 --> 00:07:17,296 A:middle
>> AALTAN AHMAD:
Great, thank you, Sara.

157
00:07:17,456 --> 00:07:23,296 A:middle
I am going to show you an
example of an app that I wrote,

158
00:07:23,406 --> 00:07:26,106 A:middle
a simple recipes app
that I wrote that I want

159
00:07:26,106 --> 00:07:28,526 A:middle
to add a right-to-left
localization for

160
00:07:28,526 --> 00:07:30,556 A:middle
and I will show you
how easy that can be

161
00:07:31,216 --> 00:07:34,196 A:middle
with the new stuff we
have added to iOS 9.

162
00:07:34,286 --> 00:07:35,406 A:middle
Here is the app.

163
00:07:35,406 --> 00:07:37,436 A:middle
It's pretty straight forward.

164
00:07:37,506 --> 00:07:39,986 A:middle
There is a table view,
a tab bar at the bottom.

165
00:07:40,596 --> 00:07:43,136 A:middle
If we tap one of the
cells we get taken

166
00:07:43,136 --> 00:07:44,746 A:middle
to the details view
for the recipe.

167
00:07:45,026 --> 00:07:47,566 A:middle
Here we have some custom
labels and stuff like that laid

168
00:07:47,566 --> 00:07:51,046 A:middle
out using auto layout
and a collection view

169
00:07:51,046 --> 00:07:54,756 A:middle
to show off some pictures of
the recipe that the user is

170
00:07:54,756 --> 00:07:56,326 A:middle
about to make hopefully.

171
00:07:57,896 --> 00:08:04,546 A:middle
So now that we are ready to add
a right-to-left localization

172

173
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

174
00:07:57,896 --> 00:08:04,546 A:middle
So now that we are ready to add
a right-to-left localization

175
00:08:04,546 --> 00:08:06,926 A:middle
to our app we actually want to
see what it looks like first,

176
00:08:06,926 --> 00:08:10,046 A:middle
before even integrating any of
the translations, or doing any

177
00:08:10,046 --> 00:08:12,056 A:middle
of that work, we want to
see what our app looks

178
00:08:12,056 --> 00:08:14,006 A:middle
like with the new
changes we have added.

179
00:08:14,816 --> 00:08:17,866 A:middle
To do that as Sara mentioned I
will go to the edit screen menu

180
00:08:17,986 --> 00:08:22,766 A:middle
in XCode and from the
application language drop-down,

181
00:08:22,806 --> 00:08:25,236 A:middle
will select right-to-left
pseudolanguage.

182
00:08:25,876 --> 00:08:29,496 A:middle
This basically has the effect
of bringing in those UI changes

183
00:08:29,496 --> 00:08:31,206 A:middle
without loading any
of the translations.

184
00:08:31,656 --> 00:08:33,836 A:middle
And it has the added bonus

185
00:08:33,836 --> 00:08:36,716 A:middle
of if I'm not a native
right-to-left language speaker I

186
00:08:36,716 --> 00:08:39,706 A:middle
can see my app in English
with the right-to-left UI

187
00:08:39,706 --> 00:08:41,806 A:middle
and not need to learn
those languages

188
00:08:41,806 --> 00:08:45,486 A:middle
or have a native review
before I do any translations.

189
00:08:45,866 --> 00:08:50,526 A:middle
So I'm going to close that
and I will run the app again.

190
00:08:51,376 --> 00:08:51,786 A:middle
That's it.

191
00:08:51,786 --> 00:08:56,056 A:middle
So without writing a single line
of code, I have introduced all

192
00:08:56,056 --> 00:08:57,566 A:middle
of these changes into
my app and I can see

193
00:08:57,566 --> 00:08:58,886 A:middle
that things look great.

194
00:08:59,376 --> 00:09:04,096 A:middle
So let's go through our app
and see what changes we got.

195

196
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

197
00:08:59,376 --> 00:09:04,096 A:middle
So let's go through our app
and see what changes we got.

198
00:09:04,096 --> 00:09:07,006 A:middle
So because I was using a
standard table view cell type,

199
00:09:07,736 --> 00:09:11,116 A:middle
I, the text label is
over on the right side.

200
00:09:11,706 --> 00:09:14,506 A:middle
The Chevron is on the left
side and points to the left.

201
00:09:14,956 --> 00:09:16,706 A:middle
Even the tab bar at
the bottom is flipped.

202
00:09:16,706 --> 00:09:19,846 A:middle
So the first tab is now
on the right-most side

203
00:09:19,986 --> 00:09:21,496 A:middle
as a right-to-left
user would expect.

204
00:09:22,186 --> 00:09:26,056 A:middle
If you look at the navigation
bar, the navigation button

205
00:09:26,056 --> 00:09:27,766 A:middle
that was on the right side
is it now flipped over.

206
00:09:27,766 --> 00:09:29,896 A:middle
And if I tap on one
of the cells,

207
00:09:30,266 --> 00:09:32,226 A:middle
I can see that because
I was using auto layout,

208
00:09:32,226 --> 00:09:33,666 A:middle
with leading-to-trailing
constraints,

209
00:09:33,976 --> 00:09:37,136 A:middle
that entire UI is flipped
along with the text alignments.

210
00:09:37,806 --> 00:09:40,946 A:middle
The cool thing here to notice
is that the collection view --

211
00:09:40,946 --> 00:09:42,726 A:middle
because I was using a
stock collection view

212
00:09:42,726 --> 00:09:46,156 A:middle
with the default collection view
flow layout -- has also flipped.

213
00:09:46,156 --> 00:09:48,506 A:middle
So the first picture is
now on the right side

214
00:09:48,506 --> 00:09:52,706 A:middle
and the subsequent items
follow to the left.

215
00:09:53,136 --> 00:09:55,846 A:middle
As Sara pointed out, the
navigation is also reversed.

216
00:09:55,846 --> 00:09:59,096 A:middle
If I click this back button,
you can see it takes me,

217
00:09:59,416 --> 00:10:01,826 A:middle
the navigation comes over from
the right edge, and in fact,

218

219
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

220
00:09:59,416 --> 00:10:01,826 A:middle
the navigation comes over from
the right edge, and in fact,

221
00:10:02,206 --> 00:10:05,166 A:middle
if we try to swipe, we
see the same effect.

222
00:10:06,036 --> 00:10:06,916 A:middle
So, great.

223
00:10:06,916 --> 00:10:10,036 A:middle
I have checked out my app with
these new right-to-left changes

224
00:10:10,036 --> 00:10:12,026 A:middle
and I have seen it looks
great and I'm ready

225
00:10:12,026 --> 00:10:13,276 A:middle
to add the translations.

226
00:10:13,596 --> 00:10:15,316 A:middle
So let's add the translations

227
00:10:15,316 --> 00:10:17,386 A:middle
and see what the
process looks like.

228
00:10:17,386 --> 00:10:20,316 A:middle
So, I am going to
select my project,

229
00:10:20,316 --> 00:10:23,516 A:middle
in the project navigator, I
will head to the editor men,

230
00:10:23,516 --> 00:10:26,456 A:middle
and here you can see there
is a few localization-related

231
00:10:26,456 --> 00:10:29,176 A:middle
options, so I will go
to add localization

232
00:10:29,426 --> 00:10:30,496 A:middle
and I will pick Arabic.

233
00:10:31,606 --> 00:10:36,276 A:middle
So XCode presents me with a
dialogue and it does its thing.

234
00:10:36,276 --> 00:10:40,156 A:middle
This basically creates the
localizable resource files

235
00:10:40,156 --> 00:10:42,646 A:middle
that I need to have translated.

236
00:10:43,606 --> 00:10:47,796 A:middle
The next step is to
actually export the strings

237
00:10:47,796 --> 00:10:50,416 A:middle
from my project, so we go
back to the editor menu

238
00:10:50,416 --> 00:10:51,926 A:middle
and hit export for localization.

239
00:10:52,356 --> 00:10:54,206 A:middle
XCode asks me where
I want to do that.

240
00:10:54,206 --> 00:10:57,346 A:middle
I select the desk
top, and hit save.

241
00:10:58,196 --> 00:11:01,976 A:middle
XCode has now taken the all of
the strings from my project,

242

243
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

244
00:10:58,196 --> 00:11:01,976 A:middle
XCode has now taken the all of
the strings from my project,

245
00:11:02,306 --> 00:11:04,196 A:middle
packaged them up
into an XLIFF file

246
00:11:04,236 --> 00:11:07,376 A:middle
which is a common file format
for software translations,

247
00:11:07,656 --> 00:11:09,036 A:middle
and put that file on my desktop.

248
00:11:09,666 --> 00:11:14,236 A:middle
I can take that file and send
it to a translator, who will go

249
00:11:14,356 --> 00:11:16,716 A:middle
and make the correct
translations for me

250
00:11:16,716 --> 00:11:18,896 A:middle
and send me back a
translated XLIFF file.

251
00:11:20,046 --> 00:11:24,406 A:middle
So very sweet, the
translator, they do the work.

252
00:11:25,726 --> 00:11:27,246 A:middle
I'm ready to import
the localizations,

253
00:11:27,246 --> 00:11:29,886 A:middle
I go back to editor,
import localizations,

254
00:11:30,866 --> 00:11:34,286 A:middle
go to my translated XLIFF
folder, and here is my Arabic

255
00:11:34,286 --> 00:11:37,566 A:middle
or XLIFF with the
translations, hit Enter.

256
00:11:38,616 --> 00:11:42,776 A:middle
XCode goes and takes all
of those translations

257
00:11:42,776 --> 00:11:44,126 A:middle
and integrates them
into my project.

258
00:11:45,136 --> 00:11:49,806 A:middle
And now we have both the UI, and
the translations ready to go.

259
00:11:51,096 --> 00:11:55,006 A:middle
So final step, I'm going to go
back to the edit scheme menu,

260
00:11:55,006 --> 00:11:56,836 A:middle
and this time instead

261
00:11:56,836 --> 00:11:59,866 A:middle
of right-to-left pseudolanguage
I will select Arabic,

262

263
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

264
00:12:00,176 --> 00:12:02,136 A:middle
which shows up because I
wrote the localization.

265
00:12:04,616 --> 00:12:10,786 A:middle
Close. Run the app again.

266
00:12:10,946 --> 00:12:11,656 A:middle
So there you have it.

267
00:12:12,006 --> 00:12:13,906 A:middle
Now, I have my translated
strings,

268
00:12:13,906 --> 00:12:16,346 A:middle
my navigation controller
title is translated.

269
00:12:16,746 --> 00:12:20,516 A:middle
My tab bar items are also
translated into Arabic

270
00:12:20,516 --> 00:12:23,276 A:middle
as the user would
expect, and I'm able

271
00:12:23,276 --> 00:12:27,526 A:middle
to offer a complete
right-to-left user experience

272
00:12:27,526 --> 00:12:29,166 A:middle
for my Arabic-speaking
customers,

273
00:12:29,506 --> 00:12:31,306 A:middle
and in fact the bonus
item here is

274
00:12:31,306 --> 00:12:35,116 A:middle
because I was using date
component formatters

275
00:12:35,646 --> 00:12:38,976 A:middle
to format my prep time
and cook time durations,

276
00:12:39,146 --> 00:12:42,406 A:middle
I actually get localized
versions of those as well.

277
00:12:42,406 --> 00:12:46,236 A:middle
So shameless plug for using
number and date formatters.

278
00:12:46,696 --> 00:12:48,626 A:middle
And that's it.

279
00:12:48,626 --> 00:12:50,716 A:middle
That's how easy it can
be to bring your app,

280
00:12:50,716 --> 00:12:53,736 A:middle
your existing right-to-left--
, existing left-to-right apps

281
00:12:53,796 --> 00:12:55,196 A:middle
over to right-to-left.

282
00:12:55,326 --> 00:12:56,456 A:middle
To talk to you a little bit more

283
00:12:56,456 --> 00:12:58,936 A:middle
about how you can bring
your custom UI over,

284
00:12:59,296 --> 00:13:00,546 A:middle
I will hand it over to Paul.

285

286
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

287
00:12:59,296 --> 00:13:00,546 A:middle
I will hand it over to Paul.

288
00:13:01,516 --> 00:13:10,586 A:middle
[ Applause ]

289
00:13:11,086 --> 00:13:13,556 A:middle
>> PAUL BOROKHOV: So as you
just saw from Sara and Aaltan,

290
00:13:13,556 --> 00:13:17,086 A:middle
if you are using stock UIKit
controls it is very easy for you

291
00:13:17,086 --> 00:13:18,866 A:middle
to add a right-to-left
localization

292
00:13:18,866 --> 00:13:19,616 A:middle
to your application.

293
00:13:19,966 --> 00:13:22,546 A:middle
But what if you have something
a little bit more complex?

294
00:13:23,426 --> 00:13:26,616 A:middle
First, before we jump in, I just
want to go over some API changes

295
00:13:26,616 --> 00:13:29,176 A:middle
that we have made, if you
are customizing UI controls,

296
00:13:29,456 --> 00:13:30,666 A:middle
that make it easier for you

297
00:13:30,666 --> 00:13:32,136 A:middle
to support right-to-left
localizations.

298
00:13:32,746 --> 00:13:36,216 A:middle
If you are using UI text
fields, left view, right view,

299
00:13:36,316 --> 00:13:38,896 A:middle
left view mode and left view
mode are automatically mirrored

300
00:13:38,896 --> 00:13:40,886 A:middle
for you in right to left, so you
don't need to do anything else.

301
00:13:41,316 --> 00:13:44,056 A:middle
The only thing to be aware of
is that rect for bounds methods,

302
00:13:44,056 --> 00:13:44,966 A:middle
they'll stay unchanged.

303
00:13:46,576 --> 00:13:49,266 A:middle
For table views if you are
setting separatorInsets,

304
00:13:49,616 --> 00:13:51,666 A:middle
the left and right measurements
will automatically be flipped

305
00:13:51,666 --> 00:13:53,906 A:middle
for you, with no
additional work on your part.

306
00:13:55,316 --> 00:13:58,156 A:middle
If you are using a
slider, the minimum

307
00:13:58,156 --> 00:14:00,766 A:middle
and maximum value images are
automatically flipped for you,

308

309
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

310
00:13:58,156 --> 00:14:00,766 A:middle
and maximum value images are
automatically flipped for you,

311
00:14:00,766 --> 00:14:02,216 A:middle
because in a right-to-left
context,

312
00:14:02,216 --> 00:14:03,806 A:middle
the minimum of a
slider is on the right.

313
00:14:04,946 --> 00:14:07,946 A:middle
The only thing you need to
be aware of is that the rect

314
00:14:07,946 --> 00:14:09,906 A:middle
for bounds methods,
while they are flipped,

315
00:14:10,016 --> 00:14:13,086 A:middle
if you are customizing
the offsets on the x-axis,

316
00:14:13,086 --> 00:14:15,506 A:middle
you'll need to make sure
those are properly accounting

317
00:14:15,506 --> 00:14:17,926 A:middle
for right to left, if you
are running in that context.

318
00:14:18,806 --> 00:14:21,666 A:middle
And finally for a navigation
bar like you saw in the demo,

319
00:14:22,326 --> 00:14:25,866 A:middle
we are flipping left bar button
items and right bar button items

320
00:14:25,866 --> 00:14:29,586 A:middle
for you automatically, but if
you are adding subviews outside

321
00:14:29,586 --> 00:14:31,696 A:middle
of those APIs, you
will want to make sure

322
00:14:31,696 --> 00:14:33,016 A:middle
that those are properly
positioned,

323
00:14:33,016 --> 00:14:35,766 A:middle
as otherwise you are going
to have overlapping content.

324
00:14:36,576 --> 00:14:40,046 A:middle
So let's talk about some
different types of custom UI

325
00:14:40,046 --> 00:14:41,496 A:middle
that you might have on
your application and how

326
00:14:41,496 --> 00:14:42,446 A:middle
to handle those correctly.

327
00:14:42,966 --> 00:14:45,286 A:middle
So like you saw earlier,
standard cell types will flip

328
00:14:45,286 --> 00:14:47,246 A:middle
for you automatically with
no additional work needed.

329
00:14:47,856 --> 00:14:49,946 A:middle
What that means is that,
if you have custom layouts,

330
00:14:50,016 --> 00:14:51,746 A:middle
you will want to make sure
those are flipped as well,

331
00:14:52,096 --> 00:14:53,786 A:middle
to be consistent with
the rest of the OS,

332
00:14:54,096 --> 00:14:56,456 A:middle
as well as potentially,
other table view cell types

333
00:14:56,456 --> 00:14:57,496 A:middle
in your own application.

334
00:14:57,956 --> 00:15:01,326 A:middle
You can of course do this by
simply mirroring the frames

335

336
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

337
00:14:57,956 --> 00:15:01,326 A:middle
You can of course do this by
simply mirroring the frames

338
00:15:01,416 --> 00:15:04,086 A:middle
in your layout, but the
recommendation that we give is

339
00:15:04,086 --> 00:15:05,736 A:middle
that you simply use
auto layout with leading

340
00:15:05,736 --> 00:15:08,386 A:middle
and trailing constraints because
this requires no additional work

341
00:15:08,386 --> 00:15:11,066 A:middle
on your part, and you can
have the exact same interface

342
00:15:11,066 --> 00:15:14,066 A:middle
and code handling both left
to right and right to left.

343
00:15:14,836 --> 00:15:17,056 A:middle
The story is quite similar
for collection views.

344
00:15:17,476 --> 00:15:18,626 A:middle
So, like we saw in the demo,

345
00:15:18,626 --> 00:15:21,166 A:middle
collection vew flow layout
automatically supports right

346
00:15:21,166 --> 00:15:23,026 A:middle
to left and just
reorders the items

347
00:15:23,026 --> 00:15:24,046 A:middle
to flow from right to left.

348
00:15:24,776 --> 00:15:25,586 A:middle
What that means if that

349
00:15:25,586 --> 00:15:28,206 A:middle
if you are doing a custom
collection view layout you will

350
00:15:28,206 --> 00:15:30,926 A:middle
want to make sure it's properly
flipped on the x-axis as well.

351
00:15:31,596 --> 00:15:34,956 A:middle
Generally, what we recommend
today is you subclass collection

352
00:15:34,956 --> 00:15:36,106 A:middle
view flow layout instead

353
00:15:36,106 --> 00:15:38,486 A:middle
of writing your own
layout code from scratch.

354
00:15:39,256 --> 00:15:41,756 A:middle
And there is actually a session
that will happen tomorrow

355
00:15:41,756 --> 00:15:44,386 A:middle
in the afternoon that talks
about how to do this well,

356
00:15:44,386 --> 00:15:46,606 A:middle
as well as other
customizations you may want

357
00:15:46,606 --> 00:15:47,416 A:middle
to do in Cocoa Touch.

358
00:15:48,026 --> 00:15:51,996 A:middle
Now, we have said the
word auto layout a lot

359
00:15:51,996 --> 00:15:53,996 A:middle
of times already
throughout this presentation,

360
00:15:53,996 --> 00:15:55,806 A:middle
but maybe you are not
familiar with this technology.

361
00:15:56,436 --> 00:16:00,126 A:middle
So Auto Layout is a way to
position elements in your UI,

362

363
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

364
00:15:56,436 --> 00:16:00,126 A:middle
So Auto Layout is a way to
position elements in your UI,

365
00:16:00,376 --> 00:16:02,576 A:middle
instead of using frames,
using a set of constraints.

366
00:16:02,886 --> 00:16:06,966 A:middle
It's been available since iOS 6
it makes it much easier for you

367
00:16:06,966 --> 00:16:10,766 A:middle
to support different screen
sizes both iPhone and iPad,

368
00:16:10,886 --> 00:16:12,556 A:middle
as well as different
size classes.

369
00:16:13,046 --> 00:16:14,966 A:middle
With the new split-view
multitasking,

370
00:16:15,226 --> 00:16:18,606 A:middle
it makes it that much easier to
make your application compatible

371
00:16:18,606 --> 00:16:19,596 A:middle
with this new technology.

372
00:16:20,906 --> 00:16:22,896 A:middle
Finally, even before
right to left,

373
00:16:23,466 --> 00:16:25,136 A:middle
Auto Layout makes
it easier for you

374
00:16:25,226 --> 00:16:26,966 A:middle
to support additional
localizations

375
00:16:27,326 --> 00:16:29,266 A:middle
because once you have a
good set of constraints,

376
00:16:29,596 --> 00:16:31,556 A:middle
adding a new localization
is just a matter

377
00:16:31,556 --> 00:16:33,496 A:middle
of translating strings,
and you don't need

378
00:16:33,496 --> 00:16:35,836 A:middle
to write any special code to
properly handle the layout.

379
00:16:35,836 --> 00:16:38,836 A:middle
If these are the constraints
that I have in XCode,

380
00:16:39,596 --> 00:16:41,566 A:middle
it looks exactly the same
in English, of course.

381
00:16:42,226 --> 00:16:44,216 A:middle
When I'm running in Russian
is might look like this,

382
00:16:44,656 --> 00:16:46,846 A:middle
and if I go and decide
to add a localization

383
00:16:46,846 --> 00:16:49,316 A:middle
for a language that's double
the length of the English one,

384
00:16:49,566 --> 00:16:50,836 A:middle
I don't need to do
anything extra,

385
00:16:50,836 --> 00:16:52,426 A:middle
because the constraints
are handling all

386
00:16:52,426 --> 00:16:53,886 A:middle
of the positioning
of the UI for me.

387
00:16:54,506 --> 00:16:57,586 A:middle
Today there is one more
reason for right to left.

388
00:16:58,616 --> 00:17:03,166 A:middle
Now, your layout will also
just automatically flip,

389

390
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

391
00:16:58,616 --> 00:17:03,166 A:middle
Now, your layout will also
just automatically flip,

392
00:17:03,166 --> 00:17:04,705 A:middle
and you don't need
to do anything extra.

393
00:17:05,256 --> 00:17:07,896 A:middle
Now, you can use auto
layout both in storyboards,

394
00:17:08,236 --> 00:17:10,786 A:middle
as well as in code, as well
as a combination of the two.

395
00:17:10,976 --> 00:17:13,596 A:middle
So you can have outlets to your
constraints and storyboard,

396
00:17:13,906 --> 00:17:16,616 A:middle
and then manipulate them
programmatically when you need

397
00:17:16,616 --> 00:17:20,376 A:middle
to change your UI
for some reason.

398
00:17:20,556 --> 00:17:22,776 A:middle
So we have talked about
leading and trailing.

399
00:17:22,776 --> 00:17:24,715 A:middle
Again, maybe this is something
you are not familiar with.

400
00:17:25,425 --> 00:17:27,796 A:middle
Basically if you have
two labels side by side

401
00:17:28,185 --> 00:17:29,656 A:middle
and you have horizontal
constrains

402
00:17:29,656 --> 00:17:32,436 A:middle
between them you can specify
them either as left to right

403
00:17:32,746 --> 00:17:33,726 A:middle
or leading to trailing.

404
00:17:34,086 --> 00:17:36,066 A:middle
The difference is that
left to right stays left

405
00:17:36,066 --> 00:17:36,966 A:middle
to right all of the time.

406
00:17:37,576 --> 00:17:40,446 A:middle
Leading to trailing on the other
hand, looks like left to right

407
00:17:40,446 --> 00:17:41,766 A:middle
in a left to right localization,

408
00:17:42,006 --> 00:17:44,296 A:middle
but it will actually
mirror your UI and layout

409
00:17:44,516 --> 00:17:45,786 A:middle
in a right-to-left localization.

410
00:17:47,076 --> 00:17:49,056 A:middle
If you are creating
constraints in storyboards,

411
00:17:49,326 --> 00:17:51,686 A:middle
when you create horizontal
constraints by the default,

412
00:17:52,096 --> 00:17:54,156 A:middle
they will already be
leading to trailing

413
00:17:54,156 --> 00:17:55,446 A:middle
so you don't need
to do anything else.

414
00:17:56,836 --> 00:17:59,066 A:middle
Similarly if you are
creating constraints in code

415
00:17:59,066 --> 00:18:00,786 A:middle
and you are using the
visual format language,

416

417
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

418
00:17:59,066 --> 00:18:00,786 A:middle
and you are using the
visual format language,

419
00:18:01,196 --> 00:18:03,636 A:middle
there again the default for
horizontal constraints is going

420
00:18:03,636 --> 00:18:04,576 A:middle
to be leading to trailing.

421
00:18:05,046 --> 00:18:07,726 A:middle
However, if you are creating
constraints explicitly,

422
00:18:08,126 --> 00:18:10,826 A:middle
or using the new layout
anchors API in iOS 9,

423
00:18:11,406 --> 00:18:12,426 A:middle
there you will want to make sure

424
00:18:12,426 --> 00:18:14,336 A:middle
that you are selecting
the correct attribute

425
00:18:14,336 --> 00:18:18,196 A:middle
when you are creating
your constraints.

426
00:18:18,196 --> 00:18:21,696 A:middle
Animations, as you saw in the
demos, are flipped for all

427
00:18:21,696 --> 00:18:22,616 A:middle
of the stock controls.

428
00:18:22,966 --> 00:18:25,226 A:middle
What that means is that if
you have custom animation

429
00:18:25,226 --> 00:18:26,616 A:middle
in your UI, you will want

430
00:18:26,616 --> 00:18:28,276 A:middle
to make sure that's
properly flipped as well.

431
00:18:28,846 --> 00:18:30,976 A:middle
Again, of course, you can
use frames if you want,

432
00:18:31,466 --> 00:18:35,686 A:middle
but the recommendation that we
have is that you use Auto Layout

433
00:18:35,686 --> 00:18:37,286 A:middle
with leading and trailing
constraints instead,

434
00:18:37,286 --> 00:18:40,506 A:middle
and simply change the constant
value of those constraints,

435
00:18:40,726 --> 00:18:42,796 A:middle
which will automatically do
the right thing for both left

436
00:18:42,796 --> 00:18:43,726 A:middle
to right and right to left

437
00:18:44,016 --> 00:18:45,436 A:middle
without requiring
any additional code.

438
00:18:46,236 --> 00:18:47,926 A:middle
Here is an example of
how this would look.

439
00:18:48,466 --> 00:18:51,276 A:middle
Let's say I want to
change the constant value

440
00:18:51,276 --> 00:18:52,286 A:middle
of one of my constraints.

441
00:18:53,076 --> 00:18:54,156 A:middle
I have a duration here.

442
00:18:54,646 --> 00:18:56,746 A:middle
I will change the offset
to a different value.

443
00:18:57,676 --> 00:19:00,116 A:middle
Before doing the animation,
I call layoutIfNeeded,

444

445
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

446
00:18:57,676 --> 00:19:00,116 A:middle
Before doing the animation,
I call layoutIfNeeded,

447
00:19:00,116 --> 00:19:01,206 A:middle
to make sure that the frames are

448
00:19:01,206 --> 00:19:02,546 A:middle
in the correct position
to begin with.

449
00:19:03,406 --> 00:19:05,486 A:middle
Then I call an implicit
animation block,

450
00:19:05,486 --> 00:19:08,166 A:middle
inside which I change
the actual constant value

451
00:19:08,166 --> 00:19:10,886 A:middle
of the constraint, and
call layoutIfNeeded again.

452
00:19:10,886 --> 00:19:12,096 A:middle
This will update the frames

453
00:19:12,396 --> 00:19:14,626 A:middle
and because it's inside the
implicit animation block,

454
00:19:14,626 --> 00:19:16,026 A:middle
it will also animate
that change.

455
00:19:16,426 --> 00:19:19,286 A:middle
You will notice here that there
is no special casing for right

456
00:19:19,286 --> 00:19:22,486 A:middle
to left, or left to right,
it's just a single set of code

457
00:19:22,486 --> 00:19:24,346 A:middle
that works perfectly
in both contexts.

458
00:19:24,346 --> 00:19:27,526 A:middle
Now, let's talk about gestures.

459
00:19:27,566 --> 00:19:30,616 A:middle
Now, like you saw again for
table views and for navigation,

460
00:19:30,616 --> 00:19:31,976 A:middle
we flip the standard gestures.

461
00:19:32,406 --> 00:19:36,166 A:middle
However, the gesture recognizer
API itself remains unchanged.

462
00:19:36,396 --> 00:19:38,646 A:middle
The reason for that is
because gesture recognizers

463
00:19:38,646 --> 00:19:40,476 A:middle
on their own are
fairly abstract,

464
00:19:40,476 --> 00:19:42,596 A:middle
and at the framework
level, we have no way

465
00:19:42,596 --> 00:19:45,086 A:middle
of knowing what your using
the gesture recognizer for.

466
00:19:46,036 --> 00:19:49,876 A:middle
So what that means for you as a
developer, is that you just need

467
00:19:49,876 --> 00:19:52,086 A:middle
to be aware of when you are
using gesture recognizers,

468
00:19:52,086 --> 00:19:54,066 A:middle
and when you are
responding to gesture events,

469
00:19:54,786 --> 00:19:56,346 A:middle
what you are actually
using them for.

470
00:19:57,326 --> 00:19:59,486 A:middle
So, for example, if you are
using your gesture recognizer

471
00:19:59,776 --> 00:20:02,786 A:middle
to draw on the screen, you
will want to keep that as is

472

473
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

474
00:19:59,776 --> 00:20:02,786 A:middle
to draw on the screen, you
will want to keep that as is

475
00:20:02,856 --> 00:20:03,556 A:middle
because speakers

476
00:20:03,556 --> 00:20:05,406 A:middle
of right-to-left languages
don't draw backwards.

477
00:20:06,276 --> 00:20:08,966 A:middle
However, if you have a
custom gesture recognizer

478
00:20:08,966 --> 00:20:11,386 A:middle
for your table view cells,
for example, you will want

479
00:20:11,386 --> 00:20:12,876 A:middle
to make sure you flip
that because the layout

480
00:20:12,876 --> 00:20:16,366 A:middle
of the table view style
has been flipped as well.

481
00:20:16,606 --> 00:20:20,836 A:middle
Similarly if you are
using navigation gestures,

482
00:20:20,836 --> 00:20:22,946 A:middle
you will want to flip those,
since like we saw earlier,

483
00:20:22,946 --> 00:20:24,576 A:middle
back and forward are
actually reversed.

484
00:20:25,696 --> 00:20:27,006 A:middle
The main thing to
remember here is

485
00:20:27,006 --> 00:20:29,806 A:middle
that no matter what you are
doing you will want to make sure

486
00:20:29,806 --> 00:20:32,946 A:middle
that the gesture tracks the UI
that's under it appropriately,

487
00:20:33,196 --> 00:20:35,936 A:middle
and you don't get a situation
where you are swiping from left

488
00:20:35,936 --> 00:20:37,826 A:middle
to right but the UI
moves from right to left,

489
00:20:37,866 --> 00:20:39,086 A:middle
because that would
be very confusing.

490
00:20:39,756 --> 00:20:42,806 A:middle
If you use Auto Layout this
will make your job much easier.

491
00:20:42,806 --> 00:20:45,606 A:middle
I would like now to invite
Aaltan back up on stage

492
00:20:45,606 --> 00:20:47,566 A:middle
to give you a demo of the stuff
that we just talked about.

493
00:20:48,516 --> 00:20:53,986 A:middle
[ Applause ]

494
00:20:54,486 --> 00:20:54,936 A:middle
>> AALTAN AHMAD: Thanks, Paul.

495
00:20:56,736 --> 00:21:02,196 A:middle
So while Paul was talking,
I thought a little bit

496

497
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

498
00:20:56,736 --> 00:21:02,196 A:middle
So while Paul was talking,
I thought a little bit

499
00:21:02,196 --> 00:21:04,726 A:middle
about my app and I
decided that I wanted

500
00:21:05,866 --> 00:21:08,676 A:middle
to add some more custom UI.

501
00:21:09,266 --> 00:21:14,196 A:middle
So I went ahead and created
a cool custom table view cell

502
00:21:14,196 --> 00:21:16,236 A:middle
subclass that I laid
out using Auto Layout.

503
00:21:16,566 --> 00:21:17,536 A:middle
It's pretty straight forward.

504
00:21:17,536 --> 00:21:20,406 A:middle
There is some more informative
text labels in the row

505
00:21:20,716 --> 00:21:23,076 A:middle
and there's a nice image so
the user can see a picture

506
00:21:23,076 --> 00:21:24,146 A:middle
of what they are about to cook.

507
00:21:24,226 --> 00:21:29,336 A:middle
There is also this cool little
favorites view on the left side

508
00:21:29,336 --> 00:21:31,986 A:middle
that the user can drag out
by swiping across the cell,

509
00:21:32,316 --> 00:21:35,906 A:middle
similar to the stock
swipeToDelete gesture

510
00:21:35,906 --> 00:21:37,576 A:middle
that we have on table
view cells right now.

511
00:21:38,086 --> 00:21:41,676 A:middle
If they pull far enough, a
little star appears on top

512
00:21:41,676 --> 00:21:43,066 A:middle
of the image in order
to show them

513
00:21:43,066 --> 00:21:45,516 A:middle
that they favorited this recipe.

514
00:21:46,816 --> 00:21:49,406 A:middle
So let's look at what this looks

515
00:21:49,406 --> 00:21:52,566 A:middle
like in left to right,
in English.

516
00:21:53,126 --> 00:21:58,626 A:middle
So, great, my app looks
like lot more vibrant

517
00:21:58,626 --> 00:22:01,746 A:middle
and inviting right now,
so there is a picture,

518

519
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

520
00:21:58,626 --> 00:22:01,746 A:middle
and inviting right now,
so there is a picture,

521
00:22:02,136 --> 00:22:07,416 A:middle
there's some more text labels,
and in fact, if I pull the cell

522
00:22:07,416 --> 00:22:10,336 A:middle
out far enough, the
favorite view is revealed,

523
00:22:10,336 --> 00:22:14,146 A:middle
and if I complete the gesture,
the little star shows up.

524
00:22:14,376 --> 00:22:18,686 A:middle
Great. And while Paul was
also talking I had a chance

525
00:22:18,686 --> 00:22:21,536 A:middle
to learn the entire
Hebrew language

526
00:22:21,886 --> 00:22:24,496 A:middle
and add a Hebrew
localization to my app as well,

527
00:22:24,946 --> 00:22:27,606 A:middle
so for this demo we are
going to be running in Hebrew

528
00:22:27,876 --> 00:22:29,566 A:middle
as our right-to-left language.

529
00:22:29,906 --> 00:22:32,276 A:middle
So I will go back to
the edit scheme menu,

530
00:22:32,656 --> 00:22:39,546 A:middle
and this time select Hebrew,
hit enter and run the app.

531
00:22:39,806 --> 00:22:42,366 A:middle
Wow! It's because I was using
auto layout with leading

532
00:22:42,366 --> 00:22:44,776 A:middle
and trailing constraints,
everything just flips.

533
00:22:44,776 --> 00:22:47,086 A:middle
The image is now over
on the right side.

534
00:22:47,306 --> 00:22:48,786 A:middle
The text labels are
all right-aligned

535
00:22:48,786 --> 00:22:49,896 A:middle
in the correct position.

536
00:22:50,236 --> 00:22:53,686 A:middle
The Chevron, of course, is
stock so that stays where it is,

537
00:22:54,036 --> 00:22:57,786 A:middle
and again, formatters
plug, my durations

538
00:22:57,786 --> 00:23:00,836 A:middle
and numbers are correctly
localized for Hebrew.

539

540
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

541
00:22:57,786 --> 00:23:00,836 A:middle
and numbers are correctly
localized for Hebrew.

542
00:23:01,616 --> 00:23:03,376 A:middle
But we didn't look
at the custom gesture

543
00:23:03,376 --> 00:23:05,436 A:middle
yet so let's check that out.

544
00:23:05,726 --> 00:23:08,486 A:middle
Because the entire cell is
laid out from right to left,

545
00:23:08,826 --> 00:23:12,726 A:middle
the user is also expecting that
the swipe for favorites will be

546
00:23:12,726 --> 00:23:16,846 A:middle
in that direction as well,
and more so because the swipe

547
00:23:16,846 --> 00:23:18,816 A:middle
to delete gesture
system-wide, is flipped.

548
00:23:19,246 --> 00:23:20,926 A:middle
So they are going to
know that that comes

549
00:23:20,926 --> 00:23:21,786 A:middle
over from the left edge

550
00:23:21,786 --> 00:23:23,566 A:middle
and whatever your custom
gesture was they are going

551
00:23:23,566 --> 00:23:24,736 A:middle
to be expecting it
from the right.

552
00:23:25,436 --> 00:23:27,976 A:middle
So let's swipe in that
direction and see what happens

553
00:23:28,016 --> 00:23:31,186 A:middle
for a right-to-left
user in that case.

554
00:23:31,836 --> 00:23:34,416 A:middle
And you can see that things
don't work as expected.

555
00:23:34,656 --> 00:23:38,006 A:middle
I swiped, but instead
of revealing that view,

556
00:23:38,006 --> 00:23:39,906 A:middle
the table view cell
thought I was tapping on it,

557
00:23:40,326 --> 00:23:42,046 A:middle
and instead presented
the details view.

558
00:23:42,046 --> 00:23:43,426 A:middle
It doesn't make too much sense.

559
00:23:44,406 --> 00:23:46,366 A:middle
And the reason this
is happening is

560
00:23:46,366 --> 00:23:49,876 A:middle
because there is an implicit
assumption in my code,

561
00:23:50,226 --> 00:23:52,246 A:middle
off the directionality
of that swipe.

562
00:23:52,826 --> 00:23:55,696 A:middle
I'm expecting the swipe
to go from left to right.

563
00:23:56,126 --> 00:23:58,316 A:middle
Or, in other words, in
a positive X direction.

564
00:23:59,236 --> 00:24:02,306 A:middle
In fact, if I go and
swipe in that direction,

565

566
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

567
00:23:59,236 --> 00:24:02,306 A:middle
In fact, if I go and
swipe in that direction,

568
00:24:02,306 --> 00:24:04,296 A:middle
you can see that the
view does reveal itself.

569
00:24:04,586 --> 00:24:07,536 A:middle
However, it reveals itself
in the direction opposite

570
00:24:07,536 --> 00:24:09,676 A:middle
to the direction that
I'm dragging my finger,

571
00:24:10,056 --> 00:24:12,576 A:middle
and that doesn't really
make any sense to the user.

572
00:24:12,976 --> 00:24:16,106 A:middle
And you really want to
avoid situations like this.

573
00:24:16,856 --> 00:24:20,126 A:middle
So let's jump into the table
view cell subclass and see

574
00:24:20,126 --> 00:24:23,506 A:middle
if we can figure out
what's going on here.

575
00:24:24,366 --> 00:24:26,786 A:middle
So here you can see
I have two gesture

576
00:24:26,786 --> 00:24:28,236 A:middle
recognizer-related methods.

577
00:24:28,236 --> 00:24:30,786 A:middle
So the first is this gesture
recognizer should begin method.

578
00:24:31,416 --> 00:24:33,446 A:middle
And the reason I have
to implement this is

579
00:24:33,446 --> 00:24:35,426 A:middle
because like I said,
I want to support both

580
00:24:35,426 --> 00:24:38,096 A:middle
that custom gesture, as well
as a stock table view gesture.

581
00:24:38,646 --> 00:24:41,506 A:middle
What goes on here if the
user swipes in the direction

582
00:24:41,506 --> 00:24:44,826 A:middle
of my gesture, I allow my
gesture recognizer to begin,

583
00:24:45,136 --> 00:24:47,736 A:middle
and if they swipe in the
direction of the swipeToDelete,

584
00:24:47,736 --> 00:24:50,046 A:middle
I don't do anything and I let
table view handle that stuff.

585
00:24:50,916 --> 00:24:53,666 A:middle
So right here you can see
I have the X translation

586
00:24:53,966 --> 00:24:56,676 A:middle
of the gesture recognizer and
if that translation is greater

587
00:24:56,676 --> 00:24:59,586 A:middle
than zero, or left
to right, I go ahead

588
00:24:59,586 --> 00:25:00,996 A:middle
and begin my gesture recognizer.

589

590
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

591
00:24:59,586 --> 00:25:00,996 A:middle
and begin my gesture recognizer.

592
00:25:01,316 --> 00:25:03,716 A:middle
So what we really need to do
here, is check if we are running

593
00:25:03,716 --> 00:25:07,036 A:middle
in a right-to-left localization,
and if we are, we need to look

594
00:25:07,036 --> 00:25:10,126 A:middle
for translation in the
opposite direction.

595
00:25:10,376 --> 00:25:13,476 A:middle
In order to figure out whether
I'm running in a localization

596
00:25:13,476 --> 00:25:16,466 A:middle
in a right-to-left localization
or not, I will use new API

597
00:25:16,576 --> 00:25:19,086 A:middle
that we added in iOS that
Paul is actually going to talk

598
00:25:19,086 --> 00:25:21,936 A:middle
about shortly, but since it's
exactly what we need right now,

599
00:25:21,936 --> 00:25:23,016 A:middle
I will go ahead and use it.

600
00:25:23,066 --> 00:25:28,806 A:middle
So I will declare a new constant
called isLeftToRightLayout

601
00:25:30,316 --> 00:25:33,966 A:middle
And I'm going to use a new
user interface layout direction

602
00:25:33,966 --> 00:25:38,036 A:middle
for semantic content attribute,
API, that we added in iOS 9

603
00:25:38,306 --> 00:25:41,886 A:middle
and I am going to parse in my
view semantic content attribute.

604
00:25:42,146 --> 00:25:45,266 A:middle
This returns the resolved
layout direction, left to right

605
00:25:45,266 --> 00:25:50,096 A:middle
or right to left for this view,
and if that direction comes back

606
00:25:50,096 --> 00:25:51,906 A:middle
as left to right,
I know I'm running

607
00:25:51,906 --> 00:25:53,176 A:middle
in a left-to-right localization.

608
00:25:54,416 --> 00:25:57,916 A:middle
So next step before
checking that translation,

609
00:25:57,916 --> 00:26:00,466 A:middle
I will look at my
isLeftToRight variable.

610

611
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

612
00:25:57,916 --> 00:26:00,466 A:middle
I will look at my
isLeftToRight variable.

613
00:26:00,806 --> 00:26:03,346 A:middle
If it's left to right,
we continue as usual.

614
00:26:04,276 --> 00:26:07,416 A:middle
If it's right to left, we look
for a translation for less

615
00:26:07,416 --> 00:26:09,056 A:middle
than zero or in the negative X.

616
00:26:09,556 --> 00:26:14,716 A:middle
The second method here, is this
updateFavoriteButtonPosition

617
00:26:14,716 --> 00:26:15,066 A:middle
method.

618
00:26:15,986 --> 00:26:19,296 A:middle
So here is where we actually
manipulate the constants

619
00:26:19,296 --> 00:26:22,296 A:middle
of the constraints and
show that view on screen.

620
00:26:22,296 --> 00:26:25,246 A:middle
Here you can see against I have
should allow dragging favorite

621
00:26:25,246 --> 00:26:28,316 A:middle
button constant that allows--

622
00:26:28,356 --> 00:26:30,396 A:middle
that tells the following
code whether it should start

623
00:26:30,396 --> 00:26:33,666 A:middle
revealing that view, and, again,
similar thing, we are checking

624
00:26:33,666 --> 00:26:35,256 A:middle
for a positive X translation.

625
00:26:35,636 --> 00:26:38,206 A:middle
Solution is also similar, we
can just pick up this check,

626
00:26:39,536 --> 00:26:46,186 A:middle
bring it over here, and check
for the left to right layout,

627
00:26:46,186 --> 00:26:47,876 A:middle
and check for translation

628
00:26:47,876 --> 00:26:49,756 A:middle
in the opposite direction,
and right to left.

629
00:26:50,846 --> 00:26:53,986 A:middle
The last bit over here is
this distancePulled variable.

630
00:26:53,986 --> 00:26:58,476 A:middle
So the distancePulled
variable, or constant,

631
00:26:58,476 --> 00:27:02,666 A:middle
is telling the following code
how far the user has dragged

632

633
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

634
00:26:58,476 --> 00:27:02,666 A:middle
is telling the following code
how far the user has dragged

635
00:27:02,666 --> 00:27:03,946 A:middle
their finger across the cell.

636
00:27:04,346 --> 00:27:07,006 A:middle
Now that we can accept a
negative translation it doesn't

637
00:27:07,006 --> 00:27:10,056 A:middle
really make sense for the
distancePulled variable

638
00:27:10,056 --> 00:27:12,466 A:middle
to also be negative
because it's conveying sort

639
00:27:12,466 --> 00:27:15,736 A:middle
of an absolute value, so to
rectify that, we are going

640
00:27:15,736 --> 00:27:19,496 A:middle
to just take the absolute value
of the translation as well.

641
00:27:19,866 --> 00:27:21,406 A:middle
That solved that problem for us.

642
00:27:22,166 --> 00:27:25,066 A:middle
With those few changes
let's run the app again.

643
00:27:25,566 --> 00:27:29,486 A:middle
And see where that got us.

644
00:27:29,716 --> 00:27:31,956 A:middle
Okay. Things look
good here still.

645
00:27:32,266 --> 00:27:37,576 A:middle
Now, if I drag my finger
over, things work as a right

646
00:27:37,576 --> 00:27:38,696 A:middle
to left user would expect.

647
00:27:38,896 --> 00:27:40,406 A:middle
So really that's it,
you really just need

648
00:27:40,406 --> 00:27:42,746 A:middle
to make sure you are
watching out for these kinds

649
00:27:42,746 --> 00:27:45,466 A:middle
of assumptions in your code,
and really just accommodating

650
00:27:45,466 --> 00:27:47,756 A:middle
for the right-to-left keys,
which oftentimes turns

651
00:27:47,756 --> 00:27:50,106 A:middle
out to be something that's
really just that simple.

652
00:27:50,556 --> 00:27:55,666 A:middle
And that's all it takes to bring
your custom gestures and UI

653
00:27:55,666 --> 00:27:56,506 A:middle
over to right to left.

654
00:27:56,506 --> 00:27:59,216 A:middle
To talk to you a little bit
more about some exceptions

655
00:27:59,216 --> 00:28:01,416 A:middle
and best practices,
back over to Paul.

656

657
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

658
00:27:59,216 --> 00:28:01,416 A:middle
and best practices,
back over to Paul.

659
00:28:02,516 --> 00:28:07,686 A:middle
[ Applause ]

660
00:28:08,186 --> 00:28:11,366 A:middle
>> PAUL BOROKHOV:
Alright, Thanks Aaltan.

661
00:28:12,316 --> 00:28:14,276 A:middle
So let's talk about
some exceptions and some

662
00:28:14,276 --> 00:28:16,426 A:middle
of the new API that we
have introduced in iOS 9.

663
00:28:17,526 --> 00:28:18,856 A:middle
One of the things we saw

664
00:28:18,856 --> 00:28:21,926 A:middle
in Aaltan's demo was the
semantic content attribute API

665
00:28:22,056 --> 00:28:23,846 A:middle
so before we get
into that let's talk

666
00:28:23,846 --> 00:28:25,556 A:middle
about what semantic
content attributes are.

667
00:28:26,536 --> 00:28:29,576 A:middle
The semantic content attribute
is a new property on UI view,

668
00:28:30,306 --> 00:28:34,236 A:middle
and it's there to make sure that
all UI looks correct in right

669
00:28:34,236 --> 00:28:37,986 A:middle
to left and left to right
because in some cases not all

670
00:28:37,986 --> 00:28:40,106 A:middle
of the UI flips and
we need to make sure

671
00:28:40,106 --> 00:28:42,346 A:middle
that we have a way
to specify that.

672
00:28:42,786 --> 00:28:44,586 A:middle
Now, the default
semantic content attribute

673
00:28:44,586 --> 00:28:45,506 A:middle
is unspecified.

674
00:28:46,716 --> 00:28:49,316 A:middle
This will flip in a
right-to-left localization

675
00:28:49,316 --> 00:28:51,826 A:middle
and stay as is in a left
to right localization.

676
00:28:52,766 --> 00:28:55,366 A:middle
But we have some
additional attribute types

677
00:28:55,406 --> 00:28:57,626 A:middle
that you can set, that
will prevent the flipping

678
00:28:57,626 --> 00:29:01,046 A:middle
from happening, for a number of
historical and other reasons,

679

680
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

681
00:28:57,626 --> 00:29:01,046 A:middle
from happening, for a number of
historical and other reasons,

682
00:29:01,326 --> 00:29:03,536 A:middle
but they manage the expectations
of right-to-left users.

683
00:29:04,416 --> 00:29:06,736 A:middle
Finally, the resolution
of leading

684
00:29:06,736 --> 00:29:08,576 A:middle
and trailing constraints
is actually based

685
00:29:08,576 --> 00:29:10,046 A:middle
on the semantic content
attribute.

686
00:29:10,606 --> 00:29:12,476 A:middle
So that's just something
to keep in mind.

687
00:29:13,186 --> 00:29:15,056 A:middle
So the first one is playback.

688
00:29:15,606 --> 00:29:19,516 A:middle
The idea here is if you have
some sort of playback control,

689
00:29:19,786 --> 00:29:22,066 A:middle
you sub the semantic content
attribute of that control,

690
00:29:22,066 --> 00:29:24,076 A:middle
or that group of
controls, to be playback,

691
00:29:24,076 --> 00:29:25,666 A:middle
and that will keep
them left to right.

692
00:29:25,666 --> 00:29:28,806 A:middle
So you can see here
in the new music app,

693
00:29:28,806 --> 00:29:32,516 A:middle
we have the progress bar as
well as the playback controls,

694
00:29:32,516 --> 00:29:33,416 A:middle
they stay left to right.

695
00:29:33,416 --> 00:29:34,806 A:middle
They do not flip.

696
00:29:35,876 --> 00:29:37,466 A:middle
The next one is spatial.

697
00:29:37,956 --> 00:29:41,356 A:middle
This is for annotating controls
that correspond to some sort

698
00:29:41,356 --> 00:29:44,886 A:middle
of direct UI manipulation
where maybe you have a D pad

699
00:29:44,886 --> 00:29:47,636 A:middle
in your game and you
press up and it goes up.

700
00:29:47,636 --> 00:29:51,046 A:middle
You press left, it goes left,
or similarly for text alignment.

701
00:29:51,396 --> 00:29:54,896 A:middle
So here we have on the pages
app, a segmental control

702
00:29:54,896 --> 00:29:56,466 A:middle
that lets you set the
alignment of your text.

703
00:29:56,896 --> 00:29:59,346 A:middle
Left-aligned text will
still stay on the left side,

704
00:29:59,346 --> 00:30:01,306 A:middle
even when running in a
right-to-left localization,

705

706
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

707
00:29:59,346 --> 00:30:01,306 A:middle
even when running in a
right-to-left localization,

708
00:30:01,626 --> 00:30:04,286 A:middle
so we keep that as is.

709
00:30:04,686 --> 00:30:07,176 A:middle
Finally, for those of you
who want to be more explicit,

710
00:30:08,046 --> 00:30:09,506 A:middle
we have these forceLeftToRight

711
00:30:09,506 --> 00:30:12,166 A:middle
and -RightToLeftand
right-to-left attribute types,

712
00:30:12,166 --> 00:30:14,226 A:middle
and they just do what you
would expect from the name.

713
00:30:14,776 --> 00:30:16,706 A:middle
The forceRighToLeft one
will actually affect layout

714
00:30:16,706 --> 00:30:17,916 A:middle
in a left-to-right localization.

715
00:30:17,916 --> 00:30:19,526 A:middle
All the others only
have an impact

716
00:30:19,526 --> 00:30:20,616 A:middle
when you are running
in right to left.

717
00:30:20,616 --> 00:30:23,656 A:middle
And the only thing that I will
say about these is if you feel

718
00:30:23,656 --> 00:30:25,386 A:middle
like you want to use them,
please come talk to us

719
00:30:25,386 --> 00:30:27,016 A:middle
on the lab or post
on the dev forums

720
00:30:27,016 --> 00:30:29,916 A:middle
to just make sure you
are doing the right thing

721
00:30:29,916 --> 00:30:32,516 A:middle
and that the existing
API doesn't quite satisfy

722
00:30:32,516 --> 00:30:32,956 A:middle
your needs.

723
00:30:32,956 --> 00:30:35,166 A:middle
or maybe we are missing API,
there is another type we need

724
00:30:35,166 --> 00:30:37,766 A:middle
to add, and you can
tell us that.

725
00:30:39,156 --> 00:30:43,316 A:middle
I want to talk about some
best practices for UI and text

726
00:30:43,316 --> 00:30:45,436 A:middle
when you are supporting
right to left.

727
00:30:46,016 --> 00:30:48,576 A:middle
One of the things you want to
make sure you are doing all

728
00:30:48,576 --> 00:30:51,456 A:middle
of the time (and like we saw in
the demos) is to use formatters.

729
00:30:51,756 --> 00:30:53,666 A:middle
For Arabic this is
particularly important

730
00:30:53,666 --> 00:30:56,016 A:middle
because different Arabic
speaking countries will use

731
00:30:56,016 --> 00:30:59,266 A:middle
actually use different words
for the months of the year.

732
00:30:59,506 --> 00:31:01,696 A:middle
So you will want to make sure
that you display those correctly

733

734
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

735
00:30:59,506 --> 00:31:01,696 A:middle
So you will want to make sure
that you display those correctly

736
00:31:01,696 --> 00:31:03,536 A:middle
to all of your users,
no matter what region

737
00:31:03,536 --> 00:31:05,496 A:middle
or language they are using.

738
00:31:05,496 --> 00:31:06,856 A:middle
In fact, there is a What's New

739
00:31:06,856 --> 00:31:09,176 A:middle
in Internationalization talk
tomorrow, bright and early

740
00:31:09,176 --> 00:31:12,006 A:middle
at 9:00 in the morning, where
they will talk about all

741
00:31:12,006 --> 00:31:13,576 A:middle
of the existing formatters
as well as some

742
00:31:13,576 --> 00:31:18,466 A:middle
of the new formatter APIs
that are available in iOS 9.

743
00:31:18,666 --> 00:31:21,126 A:middle
However, you will want to make
sure that if you have some sort

744
00:31:21,346 --> 00:31:24,506 A:middle
of layout or logic
branching like we saw

745
00:31:24,506 --> 00:31:27,656 A:middle
for the gesture recognizer,
you never want to use NSLocale

746
00:31:27,656 --> 00:31:30,666 A:middle
or NSbundle or NSFormatter
for determining that.

747
00:31:31,776 --> 00:31:33,626 A:middle
So perhaps you have
seen code like this.

748
00:31:34,226 --> 00:31:35,276 A:middle
You want to figure
out if you are running

749
00:31:35,276 --> 00:31:36,576 A:middle
in a right-to-left localization.

750
00:31:36,576 --> 00:31:38,996 A:middle
You look up the preferred
languages, you pick the top one

751
00:31:39,486 --> 00:31:41,626 A:middle
and if its writing direction
is right to left, boom!

752
00:31:42,736 --> 00:31:44,576 A:middle
This is something that you
literally never want to do.

753
00:31:45,146 --> 00:31:47,366 A:middle
There is many ways
that this can break.

754
00:31:48,136 --> 00:31:50,296 A:middle
It's just not what
you want to be doing.

755
00:31:50,296 --> 00:31:52,466 A:middle
If you want to find out that
your application is running

756
00:31:52,466 --> 00:31:52,926 A:middle
right to left.

757
00:31:53,596 --> 00:31:56,326 A:middle
Instead, you'll want to use
this new API we saw in the demo.

758
00:31:56,716 --> 00:31:59,236 A:middle
User interface layout direction
for semantic content attribute,

759
00:31:59,816 --> 00:32:02,516 A:middle
and pass in the semantic
content attribute of the view

760

761
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

762
00:31:59,816 --> 00:32:02,516 A:middle
and pass in the semantic
content attribute of the view

763
00:32:02,516 --> 00:32:04,706 A:middle
that you are interested
in figuring

764
00:32:04,706 --> 00:32:05,886 A:middle
out how it's being laid out.

765
00:32:05,886 --> 00:32:09,646 A:middle
And that will give you either
left to right or right to left

766
00:32:09,646 --> 00:32:10,566 A:middle
as the UI layout direction.

767
00:32:11,116 --> 00:32:14,146 A:middle
Of course, the converse is that
you shouldn't be using this

768
00:32:14,146 --> 00:32:15,926 A:middle
for regional or format settings.

769
00:32:16,866 --> 00:32:20,356 A:middle
Now, here is a sample that
matches sort of the intent

770
00:32:20,356 --> 00:32:22,206 A:middle
of the previous slide
but is actually correct.

771
00:32:22,616 --> 00:32:24,596 A:middle
We get the semantic
attribute of the view,

772
00:32:25,186 --> 00:32:27,876 A:middle
we ask for the layout direction,
and if that happens to be right

773
00:32:27,876 --> 00:32:31,796 A:middle
to left, we do custom
logic, perhaps.

774
00:32:31,926 --> 00:32:34,176 A:middle
Now, when dealing with
text, what you will want

775
00:32:34,176 --> 00:32:36,716 A:middle
to do is just leave
alignment and directionalty

776
00:32:36,716 --> 00:32:38,546 A:middle
at their default
values most of the time.

777
00:32:39,056 --> 00:32:42,566 A:middle
So, new in iOS 9, natural
alignment is now the default

778
00:32:42,566 --> 00:32:44,896 A:middle
so you don't need to do
anything to have text

779
00:32:44,896 --> 00:32:47,386 A:middle
that is left-aligned in
left-to-right languages,

780
00:32:47,386 --> 00:32:49,046 A:middle
and right-aligned, in
right-to-left languages.

781
00:32:50,116 --> 00:32:52,626 A:middle
Similarly the base writing
direction is something you

782
00:32:52,626 --> 00:32:55,016 A:middle
should never have to touch
unless you are writing a

783
00:32:55,016 --> 00:32:55,626 A:middle
text editor.

784
00:32:56,016 --> 00:32:57,666 A:middle
That has been the
default since iOS 7.

785
00:32:57,986 --> 00:33:01,306 A:middle
For probably 99% of applications
there is no reason you should

786

787
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

788
00:32:57,986 --> 00:33:01,306 A:middle
For probably 99% of applications
there is no reason you should

789
00:33:01,306 --> 00:33:03,596 A:middle
ever need to touch this value
and change it from default.

790
00:33:04,526 --> 00:33:09,116 A:middle
Again, you don't want to use
these for layout code branching.

791
00:33:09,116 --> 00:33:11,756 A:middle
Instead use the API that we
saw in the previous slide.

792
00:33:13,636 --> 00:33:17,186 A:middle
Finally, I would like to talk
about images so we have new API

793
00:33:17,186 --> 00:33:19,486 A:middle
and UI image called
imageflipped for right

794
00:33:19,486 --> 00:33:20,496 A:middle
to left layout direction.

795
00:33:21,146 --> 00:33:23,736 A:middle
What this will do is this will
horizontally flip the image

796
00:33:23,736 --> 00:33:26,076 A:middle
automatically for you when you
are in a right-to-left context.

797
00:33:26,486 --> 00:33:28,006 A:middle
So an image flipped

798
00:33:28,006 --> 00:33:30,086 A:middle
for right-to-left layout
direction will stay as is

799
00:33:30,086 --> 00:33:32,066 A:middle
in left to right, and then
flip in right to left.

800
00:33:32,596 --> 00:33:34,616 A:middle
This also based on the
semantic content attribute

801
00:33:34,616 --> 00:33:36,616 A:middle
of the image view that
contains the image

802
00:33:37,066 --> 00:33:40,186 A:middle
and generally speaking, you
will want to use this only

803
00:33:40,186 --> 00:33:41,906 A:middle
for directional images
or something

804
00:33:41,906 --> 00:33:43,906 A:middle
that conveys some sort of UI.

805
00:33:44,086 --> 00:33:46,546 A:middle
So people who speak
right-to-left languages they

806
00:33:46,546 --> 00:33:48,106 A:middle
don't look at all their
photos in the mirror.

807
00:33:48,756 --> 00:33:52,466 A:middle
So if you see errors or
Chevrons in your application,

808
00:33:52,466 --> 00:33:55,216 A:middle
like for example, we have in
the Safari toolbar, for the back

809
00:33:55,216 --> 00:33:57,576 A:middle
and forward buttons, you want
to make sure that those flip,

810
00:33:57,826 --> 00:33:59,026 A:middle
because all

811
00:33:59,026 --> 00:34:02,826 A:middle
of the directionality concepts
have flipped from right to left.

812

813
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

814
00:33:59,026 --> 00:34:02,826 A:middle
of the directionality concepts
have flipped from right to left.

815
00:34:02,966 --> 00:34:05,826 A:middle
Similarly, if you have some
sort of icons that represent UI,

816
00:34:07,006 --> 00:34:10,156 A:middle
for example, a list,
so in the new maps app

817
00:34:10,156 --> 00:34:13,275 A:middle
in the transit feature,
we have this icon

818
00:34:13,275 --> 00:34:16,206 A:middle
that lets you see the list
of steps because that sort

819
00:34:16,206 --> 00:34:18,696 A:middle
of represents the table
view, and in the table view,

820
00:34:18,696 --> 00:34:19,966 A:middle
the icons are on the right side.

821
00:34:19,966 --> 00:34:21,545 A:middle
You can see the icon
has been flipped,

822
00:34:22,196 --> 00:34:24,406 A:middle
and more subtly we have
also flipped the person

823
00:34:24,606 --> 00:34:26,946 A:middle
for the walking directions
because if we didn't,

824
00:34:26,946 --> 00:34:29,096 A:middle
it would look like the person
was just walking off the edge

825
00:34:29,096 --> 00:34:30,916 A:middle
of the screen, and it
wouldn't really match the rest

826
00:34:30,916 --> 00:34:31,585 A:middle
of the layout file.

827
00:34:32,206 --> 00:34:35,906 A:middle
So I would like to invite
Aaltan back up on stage

828
00:34:35,906 --> 00:34:37,226 A:middle
to give you a quick
demo of that.

829
00:34:38,516 --> 00:34:43,545 A:middle
[ Applause ]

830
00:34:44,045 --> 00:34:47,696 A:middle
>> AALTAN AHMAD:
Last demo, I promise.

831
00:34:56,335 --> 00:34:56,946 A:middle
All right.

832
00:34:57,216 --> 00:34:58,696 A:middle
So, great!

833
00:34:58,806 --> 00:35:02,386 A:middle
I just learned a lot about the
new, cool new APIs we added

834

835
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

836
00:34:58,806 --> 00:35:02,386 A:middle
I just learned a lot about the
new, cool new APIs we added

837
00:35:02,386 --> 00:35:05,056 A:middle
and I decided to take
the customization

838
00:35:05,056 --> 00:35:08,016 A:middle
of my custom table view
cell to the next level,

839
00:35:08,376 --> 00:35:12,766 A:middle
by adding a custom Chevron
that is indeed a pizza slice,

840
00:35:13,696 --> 00:35:18,706 A:middle
so the pizza slice will be
directing our users to go

841
00:35:18,706 --> 00:35:19,716 A:middle
on to the next screen.

842
00:35:20,216 --> 00:35:23,186 A:middle
And since we are all really
familiar with the right to left

843
00:35:23,186 --> 00:35:26,066 A:middle
by now, let's run our
app directly in Arabic

844
00:35:26,766 --> 00:35:29,196 A:middle
without showing you what
it looks like in English,

845
00:35:29,196 --> 00:35:34,166 A:middle
since we are past that point.

846
00:35:34,326 --> 00:35:38,476 A:middle
Great. So because I put in that
image view with the pizza slice,

847
00:35:38,476 --> 00:35:40,546 A:middle
using auto layout and leading
to trailing constraints,

848
00:35:40,806 --> 00:35:42,516 A:middle
it actually is in
the correct position.

849
00:35:42,516 --> 00:35:45,336 A:middle
It's over on the left side of
the cell, where a user on right

850
00:35:45,336 --> 00:35:46,326 A:middle
to left would expect it.

851
00:35:46,646 --> 00:35:50,406 A:middle
However, clearly you can see
that the pizza slice is pointing

852
00:35:50,406 --> 00:35:51,476 A:middle
in the wrong direction.

853
00:35:52,096 --> 00:35:54,836 A:middle
And this is exactly the
kind of directional image

854
00:35:54,836 --> 00:35:56,316 A:middle
that Paul was talking
about earlier,

855
00:35:56,606 --> 00:35:58,576 A:middle
that we can use the
image flipping API

856
00:35:58,696 --> 00:36:00,116 A:middle
in order to rectify.

857

858
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

859
00:35:58,696 --> 00:36:00,116 A:middle
in order to rectify.

860
00:36:00,856 --> 00:36:03,756 A:middle
So let's go back to that
table view cell subclass.

861
00:36:04,296 --> 00:36:07,466 A:middle
And here you can see I have
my [unintelligible] method

862
00:36:07,466 --> 00:36:11,376 A:middle
where all of those outlets, all
of my outlets will be loaded

863
00:36:12,046 --> 00:36:14,416 A:middle
and ready to go, so the
first thing I'm going

864
00:36:14,416 --> 00:36:17,286 A:middle
to do is get a reference
to my custom Chevron image.

865
00:36:18,336 --> 00:36:21,106 A:middle
customChevronImageView.image.

866
00:36:21,606 --> 00:36:25,346 A:middle
Now that I have that,
I'm going to put it back

867
00:36:25,346 --> 00:36:30,196 A:middle
in the image view, except
with one small change,

868
00:36:30,196 --> 00:36:32,186 A:middle
which is I'm going to
call the image flip

869
00:36:32,186 --> 00:36:33,936 A:middle
for right-to-left
layout direction method

870
00:36:33,976 --> 00:36:35,376 A:middle
on the UI image itself.

871
00:36:36,386 --> 00:36:38,436 A:middle
And this basically
has the effect

872
00:36:38,436 --> 00:36:41,906 A:middle
of leaving your image alone in
a left to right localization,

873
00:36:42,276 --> 00:36:45,266 A:middle
but flipping it horizontally in
a right-to-left localization.

874
00:36:45,266 --> 00:36:46,616 A:middle
And the important
thing to note here,

875
00:36:46,906 --> 00:36:50,806 A:middle
is that because the method
does the right thing for you,

876
00:36:50,806 --> 00:36:53,826 A:middle
you don't need to worry about
gating it around, and is it left

877
00:36:53,826 --> 00:36:57,216 A:middle
to right or is it right to left
check, as I was doing earlier.

878
00:36:57,646 --> 00:36:59,826 A:middle
So you can do call this
method with confidence

879
00:36:59,826 --> 00:37:01,576 A:middle
in any localization,
and you can be sure

880

881
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

882
00:36:59,826 --> 00:37:01,576 A:middle
in any localization,
and you can be sure

883
00:37:01,576 --> 00:37:02,646 A:middle
that it will do the right thing.

884
00:37:03,666 --> 00:37:05,056 A:middle
And that's it, that's
all we need to do.

885
00:37:05,656 --> 00:37:07,586 A:middle
With that change, let's
run the app again.

886
00:37:10,836 --> 00:37:11,906 A:middle
Pizza perfection.

887
00:37:12,176 --> 00:37:14,616 A:middle
So our Chevron is
flipped [applause].

888
00:37:15,046 --> 00:37:15,816 A:middle
Thank you.

889
00:37:19,246 --> 00:37:21,016 A:middle
Our Chevron is flipped,
our app looks great,

890
00:37:21,066 --> 00:37:24,456 A:middle
we have the translations,
custom gesture looks beautiful,

891
00:37:24,636 --> 00:37:25,466 A:middle
and we are ready to go.

892
00:37:25,776 --> 00:37:28,786 A:middle
That's how easy it can be to
localize your apps right to left

893
00:37:29,106 --> 00:37:32,656 A:middle
and back to Sara to finish
up the session for you guys.

894
00:37:38,046 --> 00:37:39,726 A:middle
>> SARA RADI: Thank you
Aaltan for the great demo.

895
00:37:39,936 --> 00:37:42,306 A:middle
So just to let you know we
will be posting the demo

896
00:37:42,306 --> 00:37:45,276 A:middle
that Aaltan gave us
today online soon,

897
00:37:45,336 --> 00:37:47,796 A:middle
so if you missed anything during
the session, please feel free

898
00:37:47,796 --> 00:37:50,906 A:middle
to download the simple
code and look at it.

899
00:37:51,526 --> 00:37:56,376 A:middle
So to summarize before closing
the session, keep in mind

900
00:37:56,376 --> 00:37:58,786 A:middle
when you are designing your
app for right-to-left languages

901
00:37:58,786 --> 00:38:03,256 A:middle
that natives of these language
expect right-to-left UI,

902

903
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

904
00:37:58,786 --> 00:38:03,256 A:middle
that natives of these language
expect right-to-left UI,

905
00:38:03,256 --> 00:38:04,706 A:middle
and this is a perfect
opportunity

906
00:38:04,706 --> 00:38:08,046 A:middle
with the new native UIKit
support that we add it on iOS 9,

907
00:38:08,556 --> 00:38:11,576 A:middle
it's a great opportunity for
you to add this localizations.

908
00:38:11,576 --> 00:38:16,166 A:middle
It takes no effort, and we also
added new APIs that will make it

909
00:38:16,296 --> 00:38:21,026 A:middle
so easy not only for non-native-
the native developers,

910
00:38:21,026 --> 00:38:22,966 A:middle
but also for non-native
developers.

911
00:38:23,576 --> 00:38:26,416 A:middle
And also it's your
opportunity to reach millions

912
00:38:26,416 --> 00:38:27,876 A:middle
of users and new markets.

913
00:38:28,556 --> 00:38:34,136 A:middle
And for more information, please
visit our documentation website

914
00:38:34,136 --> 00:38:36,836 A:middle
at developer.Apple.com
we have documentation

915
00:38:36,836 --> 00:38:39,766 A:middle
for internationalization
and also for localization

916
00:38:40,026 --> 00:38:42,866 A:middle
and if you have questions, also
post them in the Dev forums.

917
00:38:44,586 --> 00:38:46,256 A:middle
We also recommend that you go

918
00:38:46,256 --> 00:38:47,716 A:middle
and watch these relates
sessions.

919
00:38:47,866 --> 00:38:49,356 A:middle
I highly recommend
the What's New

920
00:38:49,356 --> 00:38:52,386 A:middle
in Internationalization tomorrow
at 9:00 a.m. so thank you,

921
00:38:52,386 --> 00:38:56,016 A:middle
thank you so much for coming
and have a great afternoon!

922
00:38:56,206 --> 00:38:56,646 A:middle
Thanks!

923
00:38:58,516 --> 00:39:09,790 A:middle
[ Applause ]

924
