X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:23,516 --> 00:00:29,176 A:middle
[Applause]

2
00:00:29,676 --> 00:00:32,316 A:middle
>> TIM ORIOL: Hi and welcome
to What's New in SpriteKit.

3
00:00:32,906 --> 00:00:35,606 A:middle
We have a lot of great new
features and enhancements

4
00:00:35,606 --> 00:00:36,416 A:middle
to tell you about today.

5
00:00:36,416 --> 00:00:39,776 A:middle
I know that there's a few people
in the audience that are new

6
00:00:39,776 --> 00:00:43,136 A:middle
to SpriteKit and I just wanted
to take a few minutes first

7
00:00:43,546 --> 00:00:45,666 A:middle
to recap what we're all about.

8
00:00:48,846 --> 00:00:52,996 A:middle
So SpriteKit is Apple's 2D frame
work for games and graphics.

9
00:00:53,426 --> 00:00:56,306 A:middle
And we provide you tools
like integrated physics,

10
00:00:56,936 --> 00:00:58,896 A:middle
particle simulations, actions

11
00:00:58,896 --> 00:01:00,726 A:middle
and animations and,
of course, Sprite.

12

13
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

14
00:00:58,896 --> 00:01:00,726 A:middle
and animations and,
of course, Sprite.

15
00:01:01,706 --> 00:01:06,206 A:middle
We set out to design
SpriteKit to be both powerful

16
00:01:06,206 --> 00:01:08,926 A:middle
but also really,
really easy to use.

17
00:01:09,016 --> 00:01:11,896 A:middle
We wanted someone who's maybe
even has never written a game

18
00:01:11,896 --> 00:01:15,966 A:middle
before to be able to come to
our platform, pick up SpriteKit

19
00:01:16,426 --> 00:01:17,766 A:middle
and be up and running
in no time.

20
00:01:18,676 --> 00:01:22,176 A:middle
We really wanted to deliver
something that lets you focus

21
00:01:22,176 --> 00:01:25,306 A:middle
on what you do best and
that is making great games.

22
00:01:25,836 --> 00:01:33,246 A:middle
We designed SpriteKit to work
across iPhone iPad and Mac

23
00:01:33,246 --> 00:01:35,936 A:middle
and in addition to this media
you can deliver your app

24
00:01:35,936 --> 00:01:39,726 A:middle
to multiple platforms, it also
means that you can prototype

25
00:01:39,726 --> 00:01:41,906 A:middle
and test all of your
SpriteKit games directly

26
00:01:41,906 --> 00:01:47,416 A:middle
on the Mac before you
even put it on a device.

27
00:01:47,566 --> 00:01:50,626 A:middle
and with SpriteKit the framework
is really only half the story.

28
00:01:51,206 --> 00:01:54,626 A:middle
Since the beginning we spent
a lot of effort on our tools

29
00:01:54,796 --> 00:01:57,506 A:middle
and we have continued to
invest in that year after year

30
00:01:57,506 --> 00:02:02,036 A:middle
to allow you to edit your
particle affects as well

31

32
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

33
00:01:57,506 --> 00:02:02,036 A:middle
to allow you to edit your
particle affects as well

34
00:02:02,036 --> 00:02:06,396 A:middle
as entire scenes and new this
year actions and animations

35
00:02:06,396 --> 00:02:08,175 A:middle
as well, directly inside

36
00:02:08,175 --> 00:02:11,606 A:middle
of Xcode before you even
write a line of code.

37
00:02:13,516 --> 00:02:15,896 A:middle
So now lets talk about the new
additions to the framework.

38
00:02:16,716 --> 00:02:19,576 A:middle
The first one was requested
by developers quite a bit

39
00:02:20,226 --> 00:02:25,336 A:middle
and this has to do with the
Viewport and the Viewport is

40
00:02:25,336 --> 00:02:28,046 A:middle
when we're talking about which
portion of your scene is visible

41
00:02:28,046 --> 00:02:31,356 A:middle
in a SpriteKit view at any time.

42
00:02:31,356 --> 00:02:34,336 A:middle
The way this works now is if
you want to move your camera,

43
00:02:34,826 --> 00:02:38,426 A:middle
you would have to realign
every piece of geometry

44
00:02:38,426 --> 00:02:41,056 A:middle
within your game, or if you
wanted to follow along one

45
00:02:41,056 --> 00:02:42,826 A:middle
of your hero characters
through your game world,

46
00:02:43,196 --> 00:02:44,756 A:middle
you need to do those
calculations.

47
00:02:45,386 --> 00:02:48,376 A:middle
Now this works, but it is
not as intuitive as we'd like

48
00:02:49,316 --> 00:02:51,596 A:middle
and if you're also
running physics simulations

49
00:02:51,656 --> 00:02:54,806 A:middle
on those game entities while
you're changing their actual

50
00:02:54,806 --> 00:02:57,526 A:middle
position, you can get
artifacts from that.

51
00:02:58,716 --> 00:03:00,906 A:middle
We thought we could do
something a little bit better.

52

53
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

54
00:02:58,716 --> 00:03:00,906 A:middle
We thought we could do
something a little bit better.

55
00:03:01,986 --> 00:03:04,086 A:middle
We would like to
introduce SKCameraNode.

56
00:03:04,556 --> 00:03:10,576 A:middle
With the CameraNode we allow you
to simply specify which portion

57
00:03:10,576 --> 00:03:13,456 A:middle
of your view is going to be
visible and the camera does this

58
00:03:13,456 --> 00:03:14,626 A:middle
by representing the center

59
00:03:14,626 --> 00:03:16,016 A:middle
of the visible content
in your scene.

60
00:03:16,626 --> 00:03:19,816 A:middle
So now you can move the
CameraNode through your scene

61
00:03:20,246 --> 00:03:22,036 A:middle
with the same logic
that you move all

62
00:03:22,036 --> 00:03:23,736 A:middle
of your other game
entities through your scene.

63
00:03:24,716 --> 00:03:26,896 A:middle
We have a property on
SKScene that will allow you

64
00:03:26,896 --> 00:03:29,746 A:middle
to select the camera you'd
like to use so these scenes,

65
00:03:29,746 --> 00:03:31,806 A:middle
you can have multiple
cameras throughout your scene

66
00:03:32,126 --> 00:03:34,576 A:middle
and you can select the
active one via property.

67
00:03:35,976 --> 00:03:38,696 A:middle
If you leave the property
as its default value of nil,

68
00:03:39,156 --> 00:03:41,666 A:middle
we get the same experiences
you have today

69
00:03:41,666 --> 00:03:44,146 A:middle
and all the SpriteKit
rendering is as it was.

70
00:03:44,656 --> 00:03:47,716 A:middle
But the best feature of all

71
00:03:47,716 --> 00:03:50,906 A:middle
about SKCameraNode
is that it's a node.

72
00:03:51,626 --> 00:03:54,366 A:middle
And this means that you get
access to all the great features

73
00:03:54,366 --> 00:03:55,426 A:middle
in SpriteKit for nodes.

74
00:03:55,706 --> 00:03:57,846 A:middle
You have access to
our actions library

75
00:03:57,846 --> 00:03:59,706 A:middle
so you can now run
actions on the camera.

76

77
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

78
00:04:00,176 --> 00:04:02,076 A:middle
You have access to
our constraint system

79
00:04:02,076 --> 00:04:03,886 A:middle
so you can apply
constraints to the camera.

80
00:04:04,246 --> 00:04:06,356 A:middle
You can make it align
with game entities,

81
00:04:06,356 --> 00:04:08,766 A:middle
you can make it always stay
within a certain distance

82
00:04:08,766 --> 00:04:10,026 A:middle
of objects within your game.

83
00:04:10,616 --> 00:04:13,646 A:middle
Beyond just moving the camera
you now have access to rotation

84
00:04:13,646 --> 00:04:16,065 A:middle
and scale via those
properties on the node.

85
00:04:17,305 --> 00:04:21,726 A:middle
So for example, in a game like
this, I may start the camera off

86
00:04:21,726 --> 00:04:24,726 A:middle
to the side, and I might
apply a few move animations

87
00:04:24,766 --> 00:04:27,256 A:middle
to reveal the bad guys in
my scene before centering

88
00:04:27,256 --> 00:04:28,236 A:middle
on the hero character.

89
00:04:28,926 --> 00:04:31,166 A:middle
And then I can apply a
scale action if I want

90
00:04:31,166 --> 00:04:33,446 A:middle
to zoom the camera in or out.

91
00:04:33,446 --> 00:04:36,016 A:middle
I can even use our follow
path action if I want

92
00:04:36,016 --> 00:04:37,816 A:middle
to have the camera follow
a Bezier [Unintelligable]

93
00:04:37,816 --> 00:04:41,516 A:middle
and if I really want to make my
user sick I can spin the camera

94
00:04:41,516 --> 00:04:42,946 A:middle
around and throw it
around the scene.

95
00:04:43,766 --> 00:04:46,676 A:middle
So you really have full
control over what part

96
00:04:46,676 --> 00:04:48,836 A:middle
of your game is visible
now in SpriteKit

97
00:04:49,126 --> 00:04:49,806 A:middle
and I think this is going

98
00:04:49,806 --> 00:04:51,966 A:middle
to be a great addition
to your toolkit.

99
00:04:52,516 --> 00:04:57,216 A:middle
[Applause]

100
00:04:57,716 --> 00:04:59,346 A:middle
>> TIM ORIOL: In
addition to camera,

101
00:04:59,346 --> 00:05:00,856 A:middle
we've also done work with audio.

102

103
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

104
00:04:59,346 --> 00:05:00,856 A:middle
we've also done work with audio.

105
00:05:01,486 --> 00:05:05,876 A:middle
We're adding an SKAudioNode to
allow you to add positional,

106
00:05:06,026 --> 00:05:07,976 A:middle
environmental sound right
in your SpriteKit game.

107
00:05:08,516 --> 00:05:12,606 A:middle
[Applause]

108
00:05:13,106 --> 00:05:16,336 A:middle
>> TIM ORIOL: We're leveraging
Apple's powerful AV audio engine

109
00:05:16,386 --> 00:05:18,116 A:middle
framework that we
introduced last year.

110
00:05:18,526 --> 00:05:19,886 A:middle
If you're not familiar
with this,

111
00:05:19,936 --> 00:05:22,336 A:middle
it lets you specify
your tone soundscape

112
00:05:22,736 --> 00:05:24,886 A:middle
and play sound emitters
within that environment

113
00:05:25,266 --> 00:05:27,896 A:middle
and it will play them
back in correspondence

114
00:05:27,896 --> 00:05:29,566 A:middle
to a listener position
that you specify.

115
00:05:30,686 --> 00:05:33,596 A:middle
In SpriteKit we're going to
do all the wiring up for you.

116
00:05:34,356 --> 00:05:37,636 A:middle
All you have to do is specify
the sound asset that you want

117
00:05:37,636 --> 00:05:40,716 A:middle
to play back via
file name or URL

118
00:05:41,146 --> 00:05:44,526 A:middle
and we'll use the AudioNodes
position in your scene,

119
00:05:44,526 --> 00:05:46,826 A:middle
along with the listener
point that you specify,

120
00:05:46,826 --> 00:05:50,626 A:middle
to wire up the whole audiograph
and give you really easy access

121
00:05:50,896 --> 00:05:53,096 A:middle
to immersive, positional
audio in your game.

122
00:05:53,966 --> 00:05:56,556 A:middle
If you want to dig a little
deeper and get your hands-on,

123
00:05:56,976 --> 00:06:00,106 A:middle
you can access the
underlying AVAudioNode as well

124

125
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

126
00:05:56,976 --> 00:06:00,106 A:middle
you can access the
underlying AVAudioNode as well

127
00:06:00,426 --> 00:06:02,856 A:middle
from a property on the
node and go to town

128
00:06:02,856 --> 00:06:05,766 A:middle
and set any settings
you want on there.

129
00:06:05,966 --> 00:06:09,566 A:middle
To demonstrate the types of
affects you'd be able to add

130
00:06:09,686 --> 00:06:12,646 A:middle
to your SpriteKit game
using this new technology,

131
00:06:12,836 --> 00:06:14,436 A:middle
I'm going to have an
example scene here

132
00:06:14,766 --> 00:06:15,926 A:middle
where I've got my goblin.

133
00:06:15,926 --> 00:06:17,926 A:middle
I'm going to make
him my listener,

134
00:06:18,186 --> 00:06:20,036 A:middle
so I set my listener
position there.

135
00:06:21,076 --> 00:06:23,056 A:middle
I have added a fireball
to my scene.

136
00:06:23,276 --> 00:06:24,756 A:middle
This is going to
be my sound source,

137
00:06:24,756 --> 00:06:26,556 A:middle
so I've added it
as an SKAudioNode.

138
00:06:27,276 --> 00:06:31,416 A:middle
When I play this back
listen how the audio affects

139
00:06:31,416 --> 00:06:33,416 A:middle
as the fireball moves
around the scene.

140
00:06:33,416 --> 00:06:37,476 A:middle
You should notice it become
richer, more centered and louder

141
00:06:37,476 --> 00:06:41,196 A:middle
as it gets close to our listener
and more one-sided and distant

142
00:06:41,666 --> 00:06:42,816 A:middle
as it gets to the
side of the scene.

143
00:06:42,816 --> 00:06:43,976 A:middle
Let's take a listen.

144
00:06:44,516 --> 00:06:59,306 A:middle
[Sound effect]

145
00:06:59,806 --> 00:07:00,976 A:middle
>> TIM ORIOL: So that's
pretty cool, right?

146

147
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

148
00:06:59,806 --> 00:07:00,976 A:middle
>> TIM ORIOL: So that's
pretty cool, right?

149
00:07:01,516 --> 00:07:05,236 A:middle
[Applause]

150
00:07:05,736 --> 00:07:07,406 A:middle
>> TIM ORIOL: Beyond the
additional set up I have

151
00:07:07,406 --> 00:07:09,696 A:middle
to do nothing to update
these effects as they move

152
00:07:09,696 --> 00:07:11,686 A:middle
around the game world,
they're completely tied

153
00:07:12,066 --> 00:07:14,016 A:middle
to the game logic that's
driving my game already.

154
00:07:16,136 --> 00:07:20,766 A:middle
Also this year we focused on
referencing and instancing.

155
00:07:21,196 --> 00:07:25,496 A:middle
We know you spend a lot of time
designing high-quality content

156
00:07:25,756 --> 00:07:30,056 A:middle
and animations for your games
and we want you to let you reuse

157
00:07:30,056 --> 00:07:33,376 A:middle
that content anywhere
where you would like to.

158
00:07:33,376 --> 00:07:36,836 A:middle
We're allowing you to
create serialized data files

159
00:07:37,256 --> 00:07:42,296 A:middle
for your nodes and your
actions and then add them

160
00:07:42,366 --> 00:07:45,066 A:middle
as a reference instead of just
loading them into your scene.

161
00:07:45,066 --> 00:07:48,336 A:middle
This way, every time you make
a change to the source asset

162
00:07:48,656 --> 00:07:52,536 A:middle
that is automatically reflected
in the content of your game.

163
00:07:54,196 --> 00:07:55,916 A:middle
How do I do this for nodes?

164
00:07:56,736 --> 00:07:59,756 A:middle
For nodes I design
part of my scene,

165
00:07:59,756 --> 00:08:02,816 A:middle
maybe a background element,
or some scenery in our editor

166

167
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

168
00:07:59,756 --> 00:08:02,816 A:middle
maybe a background element,
or some scenery in our editor

169
00:08:02,816 --> 00:08:07,356 A:middle
with an Xcode and then I can
just drag-and-drop those files

170
00:08:07,736 --> 00:08:08,936 A:middle
into my main scene in Xcode

171
00:08:08,936 --> 00:08:10,616 A:middle
and it will automatically
create a reference

172
00:08:10,896 --> 00:08:12,036 A:middle
and it is all set up for you.

173
00:08:13,086 --> 00:08:15,216 A:middle
If you want to do this
in code you can as well,

174
00:08:15,676 --> 00:08:18,696 A:middle
you can manually construct
an SKReferenceNode,

175
00:08:19,066 --> 00:08:23,106 A:middle
assign it a file name
or even a URL and when

176
00:08:23,106 --> 00:08:26,046 A:middle
that content is first presented
in your game we'll load

177
00:08:26,046 --> 00:08:28,526 A:middle
in that content based
on the latest version

178
00:08:28,806 --> 00:08:29,986 A:middle
of the file that's
in your bundle.

179
00:08:30,616 --> 00:08:34,025 A:middle
We can also do the
same thing for actions.

180
00:08:34,525 --> 00:08:37,395 A:middle
With actions go check out
our great new action editor

181
00:08:37,976 --> 00:08:40,726 A:middle
and beyond creating and
composing the actions

182
00:08:40,726 --> 00:08:43,066 A:middle
in Xcode you can
give all them names.

183
00:08:43,746 --> 00:08:46,076 A:middle
These names are the key to
using them in your game.

184
00:08:46,716 --> 00:08:50,446 A:middle
We have added a selector to
SKAction called actionNamed.

185
00:08:51,016 --> 00:08:54,556 A:middle
This works just like it does
for SKTexture and textureNamed.

186
00:08:55,056 --> 00:08:56,766 A:middle
You pass in the name
of the action you want.

187
00:08:57,416 --> 00:09:00,996 A:middle
We're going to automatically
look inside of your app bundle

188

189
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

190
00:08:57,416 --> 00:09:00,996 A:middle
We're going to automatically
look inside of your app bundle

191
00:09:01,706 --> 00:09:04,336 A:middle
in all of the serialized
action files, find the one

192
00:09:04,336 --> 00:09:06,526 A:middle
with the appropriate
name and then surface

193
00:09:06,526 --> 00:09:07,546 A:middle
that to the application.

194
00:09:08,506 --> 00:09:11,276 A:middle
Please use this multiple
times within your game.

195
00:09:11,276 --> 00:09:14,966 A:middle
We have done all the work on
our side to take care of caching

196
00:09:15,356 --> 00:09:17,776 A:middle
and we guarantee that the same
action will never be loaded

197
00:09:17,776 --> 00:09:21,436 A:middle
from disk more than
once in your game.

198
00:09:21,666 --> 00:09:24,686 A:middle
Sometimes you have an action
that you would want to use more

199
00:09:24,686 --> 00:09:26,866 A:middle
than once but it will play
back faster or slower.

200
00:09:27,456 --> 00:09:29,616 A:middle
We have added an additional
selector that will allow you

201
00:09:29,616 --> 00:09:31,326 A:middle
to override the duration
of the action.

202
00:09:32,106 --> 00:09:34,006 A:middle
This is a smart scaling
of the time,

203
00:09:34,096 --> 00:09:37,336 A:middle
so even if you have a nested
action with nested groups

204
00:09:37,336 --> 00:09:39,806 A:middle
and sequences, it will
dynamically scale it

205
00:09:39,806 --> 00:09:43,576 A:middle
to the new duration so that each
component is the same fractional

206
00:09:43,606 --> 00:09:45,286 A:middle
size to the original duration.

207
00:09:46,646 --> 00:09:50,226 A:middle
Those are our utilities
for reusable components

208
00:09:50,596 --> 00:09:53,626 A:middle
that you can use in the
same scene in the same game

209
00:09:53,626 --> 00:09:54,826 A:middle
or across multiple games.

210
00:09:55,296 --> 00:09:59,046 A:middle
We have also added a couple
new actions to the framework.

211
00:09:59,046 --> 00:10:01,746 A:middle
So now that we have these
positional AudioNodes it would

212

213
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

214
00:09:59,046 --> 00:10:01,746 A:middle
So now that we have these
positional AudioNodes it would

215
00:10:01,746 --> 00:10:04,286 A:middle
be nice to be able to control
the playback via actions.

216
00:10:04,476 --> 00:10:10,026 A:middle
We have added play, pause, play
back rate as well as actions

217
00:10:10,096 --> 00:10:12,066 A:middle
for volume and stereo panning.

218
00:10:12,636 --> 00:10:17,786 A:middle
We also are doing a little bit
more with frame animations.

219
00:10:18,246 --> 00:10:21,486 A:middle
We have always had
frame-based animations

220
00:10:21,486 --> 00:10:24,526 A:middle
in SpriteKit via the
animate with textures action

221
00:10:25,546 --> 00:10:28,126 A:middle
but last year we introduced
lighting to SpriteKit.

222
00:10:28,126 --> 00:10:31,766 A:middle
With lighting you're able to
either automatically generate

223
00:10:32,226 --> 00:10:34,966 A:middle
or supply your own normal
textures for sprites

224
00:10:34,966 --> 00:10:37,926 A:middle
within your scene and then
we can light them dynamically

225
00:10:37,926 --> 00:10:40,196 A:middle
at run time by moving the
light nodes around your scene.

226
00:10:41,596 --> 00:10:43,936 A:middle
This works great for
elements that don't change,

227
00:10:43,936 --> 00:10:46,906 A:middle
but if I have a frame-based
animation like this guy here,

228
00:10:47,666 --> 00:10:49,876 A:middle
we want those highlights
and shadows to line

229
00:10:49,876 --> 00:10:50,806 A:middle
up with the current position.

230
00:10:50,806 --> 00:10:53,366 A:middle
We don't want a specular
highlight where the leg used

231
00:10:53,366 --> 00:10:56,126 A:middle
to be, so we're adding
an animate

232
00:10:56,126 --> 00:10:58,256 A:middle
with normal textures
action as well

233
00:10:58,506 --> 00:11:01,236 A:middle
so you can use this
alongside the normal animation

234

235
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

236
00:10:58,506 --> 00:11:01,236 A:middle
so you can use this
alongside the normal animation

237
00:11:01,726 --> 00:11:04,606 A:middle
and get both of them in
sync for every frame.

238
00:11:04,686 --> 00:11:08,836 A:middle
If I run that on our character
and add lighting to the scene,

239
00:11:09,126 --> 00:11:11,966 A:middle
you can see that all the
highlights, shadows are kept

240
00:11:11,966 --> 00:11:15,586 A:middle
in sync with every frame, no
matter how my character runs.

241
00:11:16,516 --> 00:11:24,406 A:middle
[Applause]

242
00:11:24,906 --> 00:11:27,456 A:middle
>> TIM ORIOL: So those are
additional features we added

243
00:11:27,456 --> 00:11:29,476 A:middle
to the framework, we've
also done a lot of work

244
00:11:29,816 --> 00:11:33,046 A:middle
to integrate well with the rest
of the system and take advantage

245
00:11:33,046 --> 00:11:35,256 A:middle
of new hardware and frameworks

246
00:11:35,306 --> 00:11:36,806 A:middle
that have been added
to our platform.

247
00:11:37,906 --> 00:11:40,126 A:middle
First I want to talk
about Metal.

248
00:11:40,756 --> 00:11:43,516 A:middle
We're making SpriteKit and
we're moving it directly on top

249
00:11:43,516 --> 00:11:48,026 A:middle
of Metal on iOS and Mac
and it will be Metal backed

250
00:11:48,836 --> 00:11:51,366 A:middle
on any device that
supports it and any device

251
00:11:51,366 --> 00:11:53,636 A:middle
that doesn't will automatically
fall back to OpenGL.

252
00:11:54,816 --> 00:11:58,286 A:middle
This means that you get
lower CPU utilization,

253
00:11:58,576 --> 00:12:00,526 A:middle
it means you get better
draw call performance

254

255
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

256
00:11:58,576 --> 00:12:00,526 A:middle
it means you get better
draw call performance

257
00:12:00,526 --> 00:12:03,416 A:middle
and better battery life
with zero action required

258
00:12:03,416 --> 00:12:04,646 A:middle
to you as a developer.

259
00:12:05,516 --> 00:12:10,016 A:middle
[Applause]

260
00:12:10,516 --> 00:12:11,036 A:middle
>> TIM ORIOL: We're going

261
00:12:11,036 --> 00:12:13,796 A:middle
to upgrade all SpriteKit apps
automatically, you don't have

262
00:12:13,796 --> 00:12:15,256 A:middle
to recompile or resubmit.

263
00:12:15,686 --> 00:12:18,746 A:middle
If it supports Metal
we're going to run it.

264
00:12:18,746 --> 00:12:19,756 A:middle
For those of you
that are wondering

265
00:12:19,756 --> 00:12:22,456 A:middle
about your custom shaders, we've
taken care of that as well.

266
00:12:23,006 --> 00:12:25,636 A:middle
If you have a custom shader
in your game, we're supporting

267
00:12:25,636 --> 00:12:28,316 A:middle
to upgrade almost all of
those to a Metal variant

268
00:12:28,516 --> 00:12:30,976 A:middle
and that will run just fine
on Metal devices as well.

269
00:12:31,516 --> 00:12:35,966 A:middle
[Applause]

270
00:12:36,466 --> 00:12:37,396 A:middle
>> TIM ORIOL: Next up is Swift.

271
00:12:38,176 --> 00:12:39,976 A:middle
We have gone through
the entire API

272
00:12:40,136 --> 00:12:42,366 A:middle
and we've applied
nullability qualifiers

273
00:12:42,666 --> 00:12:45,866 A:middle
and we've adopted Objective-C
generics on any array types

274
00:12:45,936 --> 00:12:47,716 A:middle
that are used for
paramaters or return types

275
00:12:48,366 --> 00:12:50,576 A:middle
and this will allow you
to access the full power

276
00:12:50,576 --> 00:12:53,376 A:middle
of SpriteKit from Swift
without any hassle.

277
00:12:54,396 --> 00:12:56,226 A:middle
This will also give you
enhanced type safety

278
00:12:56,226 --> 00:12:58,326 A:middle
within your application
whether you're using Swift

279
00:12:59,166 --> 00:12:59,926 A:middle
or Objective C.

280

281
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

282
00:13:00,506 --> 00:13:04,086 A:middle
Now I would like to talk
a bit about SceneKit.

283
00:13:04,086 --> 00:13:06,906 A:middle
With SceneKit in case you
don't know, we allow you

284
00:13:06,906 --> 00:13:09,106 A:middle
to render SpriteKit
content in SceneKit

285
00:13:09,106 --> 00:13:10,666 A:middle
and SceneKit content
in SpriteKit.

286
00:13:11,326 --> 00:13:13,966 A:middle
This year we're allowing you
to go a little bit further

287
00:13:13,966 --> 00:13:16,536 A:middle
and use all the SpriteKit
transitions that you know

288
00:13:16,536 --> 00:13:19,936 A:middle
and love directly in
your SceneKits games

289
00:13:19,936 --> 00:13:22,756 A:middle
and you don't even have to
be using SpriteKit to do it.

290
00:13:22,756 --> 00:13:26,726 A:middle
You can use transitions like
the doorway one here, clip,

291
00:13:27,026 --> 00:13:29,706 A:middle
or even the core image
based transition effects

292
00:13:30,166 --> 00:13:33,166 A:middle
for your SceneKit game
and that all works fine.

293
00:13:34,296 --> 00:13:35,816 A:middle
SceneKit has also done work

294
00:13:35,876 --> 00:13:38,196 A:middle
to support Metal backed
context for this release.

295
00:13:38,886 --> 00:13:41,456 A:middle
We take care of automatically
matching that.

296
00:13:41,456 --> 00:13:43,616 A:middle
If you have a SceneKit game
that's running Metal backed

297
00:13:44,246 --> 00:13:45,496 A:middle
and you have SpriteKit content

298
00:13:45,496 --> 00:13:46,956 A:middle
in there we'll render
using Metal.

299
00:13:47,176 --> 00:13:49,096 A:middle
If you have a SceneKit
game that's GL backed

300
00:13:49,526 --> 00:13:51,806 A:middle
and you have SpriteKit in there,
we'll render using OpenGL.

301
00:13:52,256 --> 00:13:54,756 A:middle
You never have additional
overhead for us

302
00:13:54,786 --> 00:14:00,356 A:middle
to translate between
the two APIs.

303

304
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

305
00:13:54,786 --> 00:14:00,356 A:middle
to translate between
the two APIs.

306
00:14:00,356 --> 00:14:03,396 A:middle
This year we've also
announced a brand-new framework

307
00:14:03,606 --> 00:14:04,646 A:middle
called GameplayKit.

308
00:14:05,116 --> 00:14:09,736 A:middle
This is really cool, it provides
you the building blocks you need

309
00:14:09,976 --> 00:14:14,326 A:middle
to build your game Logic like
Entity/Component systems as well

310
00:14:14,536 --> 00:14:18,266 A:middle
as state machines and also
provides great utilities

311
00:14:18,396 --> 00:14:21,516 A:middle
like AI opponents and
deterministic random sources.

312
00:14:22,456 --> 00:14:24,566 A:middle
One of my favorite ones
here, is its ability

313
00:14:24,566 --> 00:14:26,806 A:middle
to provide a pathfinding
solution for your game.

314
00:14:26,976 --> 00:14:28,506 A:middle
I think a lot of SpriteKit
developers are going

315
00:14:28,506 --> 00:14:29,186 A:middle
to be interested in this.

316
00:14:30,466 --> 00:14:31,916 A:middle
The way Pathfinding works

317
00:14:31,916 --> 00:14:34,726 A:middle
in GameplayKit is you would
specify a navigation graph

318
00:14:35,416 --> 00:14:37,646 A:middle
of the traversable areas
within your game world.

319
00:14:38,196 --> 00:14:41,436 A:middle
Then you would make
connections between those nodes

320
00:14:41,786 --> 00:14:43,356 A:middle
and give them an
associated cost.

321
00:14:44,626 --> 00:14:46,016 A:middle
Once you have this graph,

322
00:14:46,576 --> 00:14:48,696 A:middle
GameplayKit will then
calculate the optimal path

323
00:14:48,816 --> 00:14:50,086 A:middle
between any two points
in the graph.

324
00:14:50,986 --> 00:14:52,756 A:middle
How would I set one of
these up for a game?

325
00:14:53,986 --> 00:14:56,336 A:middle
If I have this SpriteKit game
here, and I've got my hero

326
00:14:56,336 --> 00:14:58,156 A:middle
in the lower corner, I have --

327
00:14:58,616 --> 00:15:01,676 A:middle
maybe I want him to move
to a certain destination.

328

329
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

330
00:14:58,616 --> 00:15:01,676 A:middle
maybe I want him to move
to a certain destination.

331
00:15:02,216 --> 00:15:05,856 A:middle
I'll then specify a couple
of obstacles in my scene

332
00:15:05,856 --> 00:15:07,426 A:middle
that are non-traversable
regions.

333
00:15:07,856 --> 00:15:12,076 A:middle
Giving just this to
GameplayKit and a buffer radius

334
00:15:12,106 --> 00:15:14,716 A:middle
around my character that
I want it to pass through,

335
00:15:15,056 --> 00:15:17,746 A:middle
GameplayKit will take that
buffer radius into account,

336
00:15:17,746 --> 00:15:20,496 A:middle
automatically expand all of
the obstacles so we never get

337
00:15:20,496 --> 00:15:22,556 A:middle
within that radius of
any of the obstacles

338
00:15:23,246 --> 00:15:25,436 A:middle
and then create the
valid connections

339
00:15:25,436 --> 00:15:27,686 A:middle
and only the valid
connections within that graph,

340
00:15:27,856 --> 00:15:29,876 A:middle
so you're never traversing
through the obstacles.

341
00:15:30,436 --> 00:15:33,566 A:middle
You can then use this to perform
any pathfinding operations

342
00:15:33,956 --> 00:15:35,046 A:middle
within your game.

343
00:15:35,596 --> 00:15:37,286 A:middle
It is not specific to SpriteKit,

344
00:15:37,356 --> 00:15:40,636 A:middle
so you can use GameplayKits
features with SceneKit,

345
00:15:40,636 --> 00:15:45,506 A:middle
SpriteKit, OpenGL, Metal, any
kind of game scenario you want.

346
00:15:45,506 --> 00:15:47,426 A:middle
If you are doing it with
SpriteKit we made it easier.

347
00:15:47,426 --> 00:15:49,316 A:middle
You don't even need to
create the obstacles.

348
00:15:50,036 --> 00:15:53,696 A:middle
You can create the obstacles
directly from a sprite's bounds,

349
00:15:54,296 --> 00:15:57,746 A:middle
you can create the
obstacles from a physics body

350
00:15:57,746 --> 00:16:01,316 A:middle
that you may have set
on the sprite or even

351

352
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

353
00:15:57,746 --> 00:16:01,316 A:middle
that you may have set
on the sprite or even

354
00:16:01,316 --> 00:16:03,376 A:middle
from the alpha transparency
information

355
00:16:03,596 --> 00:16:05,986 A:middle
in the texture that's associated
with that sprite in your game.

356
00:16:06,286 --> 00:16:09,206 A:middle
This gives you really easy
access to harness the power

357
00:16:09,456 --> 00:16:11,976 A:middle
of GameplayKits pathfinding
from your SpriteKit app.

358
00:16:12,516 --> 00:16:17,856 A:middle
[Applause]

359
00:16:18,356 --> 00:16:19,826 A:middle
>> TIM ORIOL: As I said before,

360
00:16:20,136 --> 00:16:22,186 A:middle
the framework really
is only half the story.

361
00:16:22,646 --> 00:16:25,126 A:middle
We have a number of
really cool enhancements

362
00:16:25,196 --> 00:16:27,916 A:middle
to our tools this year and I'd
like to turn it over to Norman

363
00:16:27,916 --> 00:16:28,976 A:middle
to tell you all about it.

364
00:16:29,516 --> 00:16:34,276 A:middle
[Applause]

365
00:16:34,776 --> 00:16:35,956 A:middle
>> NORMAN WANG: Thanks, Tim.

366
00:16:37,376 --> 00:16:40,456 A:middle
Building games is a complex
and iteration process.

367
00:16:40,946 --> 00:16:44,286 A:middle
Various parts of the game needs
to be iterated like game play,

368
00:16:44,886 --> 00:16:47,476 A:middle
making sure a game
is fun, animation,

369
00:16:48,066 --> 00:16:50,236 A:middle
making sure the character
movement is fluid,

370
00:16:50,826 --> 00:16:53,286 A:middle
or art assets, making
sure that the pixels

371
00:16:53,286 --> 00:16:56,046 A:middle
on the screen really pop.

372
00:16:56,246 --> 00:16:58,756 A:middle
In addition to the
iteration problem you also,

373
00:16:58,756 --> 00:17:01,536 A:middle
as a game developer, face
the scalability problem.

374

375
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

376
00:16:58,756 --> 00:17:01,536 A:middle
as a game developer, face
the scalability problem.

377
00:17:01,906 --> 00:17:05,386 A:middle
How do I replicate a current
design across multiple levels.

378
00:17:05,386 --> 00:17:07,776 A:middle
At Apple when we first set

379
00:17:07,776 --> 00:17:11,496 A:middle
out to design SpriteKit we
wanted not only to provide you

380
00:17:11,496 --> 00:17:16,886 A:middle
with a high performance and easy
to use API but also the tools

381
00:17:17,066 --> 00:17:20,425 A:middle
to help you with scalability and
iteration so that we can focus

382
00:17:20,425 --> 00:17:21,586 A:middle
on just building the game.

383
00:17:22,556 --> 00:17:24,006 A:middle
Ever since day one release

384
00:17:24,006 --> 00:17:26,636 A:middle
of the SpriteKit
framework we have created

385
00:17:26,836 --> 00:17:30,596 A:middle
and continuously added
multiple tools as part of Xcode.

386
00:17:31,066 --> 00:17:34,536 A:middle
Let me give you a quick tour
of what are the tools available

387
00:17:34,676 --> 00:17:36,396 A:middle
for you as a SpriteKit user.

388
00:17:37,306 --> 00:17:40,156 A:middle
The first thing I want to
talk about is texture atlas.

389
00:17:41,166 --> 00:17:42,236 A:middle
One of the main benefits

390
00:17:42,236 --> 00:17:45,806 A:middle
of using texture atlas is
performance improvement.

391
00:17:46,776 --> 00:17:49,806 A:middle
SpriteKit uses texture
atlas to minimize the amount

392
00:17:49,806 --> 00:17:53,096 A:middle
of draw calls sent out to the
GPU to optimize the efficiency.

393
00:17:53,756 --> 00:17:57,816 A:middle
We don't want to force our
users to adopt a manual process

394
00:17:58,136 --> 00:18:01,826 A:middle
by manually building these
texture atlas, [unintelligible]

395

396
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

397
00:17:58,136 --> 00:18:01,826 A:middle
by manually building these
texture atlas, [unintelligible]

398
00:18:02,546 --> 00:18:05,006 A:middle
and every time when the
source acts as a change,

399
00:18:05,106 --> 00:18:07,476 A:middle
this manual process will
have to be kickedoff again.

400
00:18:08,196 --> 00:18:11,346 A:middle
Therefore it builds an automatic
texture atlas generator right

401
00:18:11,346 --> 00:18:12,166 A:middle
inside the Xcode.

402
00:18:12,796 --> 00:18:15,276 A:middle
To build one of these
atlas is as simple

403
00:18:15,276 --> 00:18:17,796 A:middle
as dragging a folder
into your workspace.

404
00:18:18,686 --> 00:18:22,526 A:middle
And we'll do something like this
automatically at build time.

405
00:18:22,526 --> 00:18:25,216 A:middle
Each of the source images
is automatically going

406
00:18:25,216 --> 00:18:27,336 A:middle
through a complex
post processing stage.

407
00:18:27,736 --> 00:18:31,916 A:middle
For example, we trim the alpha
transparent pixels for the image

408
00:18:32,466 --> 00:18:34,366 A:middle
that doesn't really contribute
anything to the screen.

409
00:18:34,906 --> 00:18:38,836 A:middle
We rotate the image up to 90°
if they result a tighter fit

410
00:18:39,366 --> 00:18:41,206 A:middle
or result a smaller
texture atlas.

411
00:18:41,986 --> 00:18:46,046 A:middle
For each of the source
images, we also introspect each

412
00:18:46,046 --> 00:18:47,466 A:middle
of the edges on the image

413
00:18:47,886 --> 00:18:50,856 A:middle
and if they're fully opaque
we'll perform extrusion

414
00:18:50,856 --> 00:18:51,436 A:middle
on the edge.

415
00:18:51,476 --> 00:18:54,276 A:middle
So when you tile these
images on your scene,

416
00:18:54,376 --> 00:18:57,066 A:middle
you will not see any seams,

417
00:18:57,246 --> 00:18:59,456 A:middle
that's automatic
texture atlas generation.

418

419
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

420
00:19:00,446 --> 00:19:02,536 A:middle
This year we have
made that even better.

421
00:19:03,286 --> 00:19:07,146 A:middle
Now you can generate texture
atlas instead of asset catalog.

422
00:19:07,686 --> 00:19:09,186 A:middle
There are two major benefits

423
00:19:09,186 --> 00:19:11,906 A:middle
of generating texture
atlas using asset catalog.

424
00:19:12,276 --> 00:19:16,006 A:middle
Number one, you have
precise control

425
00:19:16,006 --> 00:19:18,826 A:middle
of the targeted device
resolutions matching

426
00:19:18,826 --> 00:19:19,856 A:middle
with your image names.

427
00:19:20,426 --> 00:19:25,256 A:middle
You have freedom to not follow
the post-fix in your image names

428
00:19:25,256 --> 00:19:28,506 A:middle
like add 2X or add
2X to the iPhone,

429
00:19:29,196 --> 00:19:31,196 A:middle
all of that can be
designed right in the UI.

430
00:19:32,356 --> 00:19:36,876 A:middle
The second benefit is we support
[unintelligible] now inside the

431
00:19:36,876 --> 00:19:37,606 A:middle
asset catalog.

432
00:19:38,236 --> 00:19:41,236 A:middle
Each group of the target
resolution are going

433
00:19:41,236 --> 00:19:43,836 A:middle
to be generated by their
device independent textures.

434
00:19:44,346 --> 00:19:45,836 A:middle
When the user goes
to the App Store

435
00:19:45,836 --> 00:19:48,086 A:middle
and downloads your
SpriteKit enabled games,

436
00:19:48,846 --> 00:19:51,776 A:middle
only the texture atlas
that's relevant to his

437
00:19:51,776 --> 00:19:53,396 A:middle
or her device will
get downloaded,

438
00:19:54,056 --> 00:19:57,686 A:middle
not only does this minimize
the amount of bandwidth as well

439
00:19:57,746 --> 00:20:01,056 A:middle
as install time for the app
to get on the users phone

440

441
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

442
00:19:57,746 --> 00:20:01,056 A:middle
as install time for the app
to get on the users phone

443
00:20:01,416 --> 00:20:06,986 A:middle
but also minimizes the amount
of storage overhead on the app.

444
00:20:07,256 --> 00:20:10,436 A:middle
In addition, texture atlas
supports on-demand resources.

445
00:20:10,916 --> 00:20:14,776 A:middle
On-demand resources is a
brand-new API that enables you

446
00:20:14,776 --> 00:20:18,246 A:middle
to stream in art assets over
the network in the background

447
00:20:18,316 --> 00:20:19,206 A:middle
when the game is running.

448
00:20:20,046 --> 00:20:22,096 A:middle
SpriteKit builds that
support right in.

449
00:20:22,486 --> 00:20:24,886 A:middle
These assets are
identified by tags.

450
00:20:25,266 --> 00:20:28,356 A:middle
Here, for example, my
background elements in Xcode

451
00:20:28,356 --> 00:20:32,446 A:middle
in Inspector I can specify what
are the tags associated with it.

452
00:20:33,016 --> 00:20:35,536 A:middle
I'm calling it level
1 and background.

453
00:20:35,656 --> 00:20:38,516 A:middle
These are the tags, you can
use either of these tags

454
00:20:38,576 --> 00:20:42,226 A:middle
to retrieve this asset and
start background streaming

455
00:20:42,486 --> 00:20:44,566 A:middle
when your application
requests it.

456
00:20:46,536 --> 00:20:51,426 A:middle
Particle effects really help
you set up the game right.

457
00:20:52,176 --> 00:20:56,846 A:middle
We provide SKEmitterNode as a
very powerful and flexible APIs

458
00:20:57,066 --> 00:20:58,696 A:middle
in the framework for you to use.

459
00:20:59,596 --> 00:21:02,856 A:middle
The downside of being
powerful and flexible is

460

461
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

462
00:20:59,596 --> 00:21:02,856 A:middle
The downside of being
powerful and flexible is

463
00:21:02,856 --> 00:21:05,836 A:middle
that it also comes with 49
properties for you to set.

464
00:21:07,136 --> 00:21:09,136 A:middle
To set a combination
of permutations

465
00:21:09,136 --> 00:21:12,806 A:middle
of these 49 properties to
match with the look and feel

466
00:21:12,806 --> 00:21:15,456 A:middle
that you're going after
is time consuming.

467
00:21:16,106 --> 00:21:20,316 A:middle
Therefore we build a particle
editor right inside of Xcode

468
00:21:20,746 --> 00:21:23,076 A:middle
that uses the same
SpriteKit rendering engine

469
00:21:23,406 --> 00:21:27,186 A:middle
that gives you the visual look
right inside of your work space

470
00:21:27,186 --> 00:21:31,126 A:middle
so that you can tweak and change
any of these 49 properties

471
00:21:31,496 --> 00:21:33,296 A:middle
without ever having
to write any lines

472
00:21:33,296 --> 00:21:35,076 A:middle
of code or rebuild your game.

473
00:21:35,076 --> 00:21:37,946 A:middle
These particles are
going to be exported

474
00:21:37,946 --> 00:21:41,936 A:middle
as a really small data file that
can be serialized and deployed

475
00:21:41,936 --> 00:21:44,676 A:middle
across multiple levels or
across multiple projects.

476
00:21:47,556 --> 00:21:50,576 A:middle
SpriteKit also supports
Quick Look.

477
00:21:50,576 --> 00:21:53,176 A:middle
Here for example I'm trying
to learn the new Swift.

478
00:21:53,696 --> 00:21:57,576 A:middle
I create a brand-new
playground and try to play

479
00:21:57,576 --> 00:22:00,746 A:middle
around with the SpriteKit
API using the new Swift

480

481
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

482
00:21:57,576 --> 00:22:00,746 A:middle
around with the SpriteKit
API using the new Swift

483
00:22:00,746 --> 00:22:01,686 A:middle
2.0 language.

484
00:22:02,266 --> 00:22:06,596 A:middle
What I'm doing here is I'm
creating a bad guy character,

485
00:22:07,266 --> 00:22:09,156 A:middle
called bad guy, which
is a sprite node,

486
00:22:09,316 --> 00:22:12,226 A:middle
it copied a single texture
called the car hood,

487
00:22:13,186 --> 00:22:16,956 A:middle
and in addition I create two
children node that appear

488
00:22:16,956 --> 00:22:21,166 A:middle
under this bad guy, one has
the texture of the roof,

489
00:22:21,686 --> 00:22:23,626 A:middle
the other one has the
texture of the trunk.

490
00:22:24,726 --> 00:22:29,326 A:middle
What's happening here, SpriteKit
will do a partial off-screen

491
00:22:29,326 --> 00:22:31,216 A:middle
rendering of this
subterrain when you try

492
00:22:31,216 --> 00:22:32,646 A:middle
to introspect the sprite node

493
00:22:32,886 --> 00:22:36,336 A:middle
and it will provide the result
right inside of the playground

494
00:22:36,336 --> 00:22:39,546 A:middle
for you so that every step
along the way when you try

495
00:22:39,546 --> 00:22:42,406 A:middle
to learn a new language or
make changes to the object,

496
00:22:42,786 --> 00:22:45,586 A:middle
you will see the live changes
right inside of the playground.

497
00:22:47,176 --> 00:22:50,796 A:middle
In addition the Quicklook
in SpriteKit also supported

498
00:22:50,796 --> 00:22:54,086 A:middle
when you debug your applications
whether they're in Swift,

499
00:22:54,846 --> 00:22:57,966 A:middle
Objective-C, whether they
are running on iOS devices

500
00:22:58,266 --> 00:22:59,586 A:middle
or running on Mac OS X.

501

502
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

503
00:23:00,456 --> 00:23:03,946 A:middle
So here I'm trying to debug an
application that I have written,

504
00:23:05,036 --> 00:23:06,356 A:middle
I trigger a break point,

505
00:23:06,416 --> 00:23:10,126 A:middle
the target process is actually
paused, but we're still able

506
00:23:10,126 --> 00:23:14,086 A:middle
to wrap the partial screen
rendering of the current texture

507
00:23:14,706 --> 00:23:15,926 A:middle
and show that in the debugger.

508
00:23:16,366 --> 00:23:20,826 A:middle
So you know exactly what that
texture is before I go ahead

509
00:23:20,826 --> 00:23:23,416 A:middle
and grab it to assign
to an SKSpriteNode.

510
00:23:23,926 --> 00:23:29,826 A:middle
Last year in iOS 8 we
announced a visual scene editor

511
00:23:29,826 --> 00:23:32,896 A:middle
which will allow you to set up a
full scene layout without having

512
00:23:32,896 --> 00:23:36,306 A:middle
to write any lines of code.

513
00:23:36,516 --> 00:23:41,666 A:middle
Not only you can set up the
position, rotation and scale

514
00:23:41,666 --> 00:23:44,006 A:middle
on each of the available
nodes that are in the scene,

515
00:23:44,396 --> 00:23:47,816 A:middle
but you can also define its
physics properties like setting

516
00:23:47,816 --> 00:23:51,506 A:middle
up a graphic, gravities,
mass, frictions,

517
00:23:52,036 --> 00:23:55,756 A:middle
you can also perform
live simulations

518
00:23:56,196 --> 00:23:59,126 A:middle
of these physics
simulations without having

519
00:23:59,126 --> 00:24:01,626 A:middle
to launch your game or
rebuild the application.

520

521
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

522
00:23:59,126 --> 00:24:01,626 A:middle
to launch your game or
rebuild the application.

523
00:24:03,116 --> 00:24:06,946 A:middle
SpriteKit will support some
advanced rendering techniques

524
00:24:06,946 --> 00:24:08,066 A:middle
like custom shaders.

525
00:24:08,766 --> 00:24:12,906 A:middle
Here in my level the waterfall
in the background and the fog

526
00:24:12,906 --> 00:24:15,316 A:middle
on the bottom I actually
implement using two

527
00:24:15,396 --> 00:24:16,256 A:middle
custom shaders.

528
00:24:16,726 --> 00:24:20,056 A:middle
To add the shaders,
it is a matter of --

529
00:24:20,556 --> 00:24:22,846 A:middle
it is as simple as opening
up the assist editor,

530
00:24:22,956 --> 00:24:25,076 A:middle
it automatically shows
you the current scene

531
00:24:25,636 --> 00:24:27,656 A:middle
with the shader that's
being rendering

532
00:24:27,656 --> 00:24:30,136 A:middle
and it will show you
the assistant editor

533
00:24:30,136 --> 00:24:31,146 A:middle
with the shader source code.

534
00:24:31,536 --> 00:24:33,356 A:middle
Any live changes you make

535
00:24:33,356 --> 00:24:35,976 A:middle
in the assistant editor will
automatically recompile the

536
00:24:35,976 --> 00:24:39,406 A:middle
shader, open up to OpenGL
or Metal and provide you

537
00:24:39,406 --> 00:24:42,846 A:middle
with a real realtime
preview rather than having

538
00:24:42,846 --> 00:24:46,086 A:middle
to build a game, go
through the level,

539
00:24:46,596 --> 00:24:48,586 A:middle
go through the certain
spots and trigger the event

540
00:24:48,896 --> 00:24:52,626 A:middle
to see whether I'm sending
this stream to OpenGL or Metal,

541
00:24:52,626 --> 00:24:54,296 A:middle
whether it compiles
successfully or not.

542
00:24:54,656 --> 00:24:56,386 A:middle
It saves a lot of
iteration time.

543
00:24:58,116 --> 00:25:00,956 A:middle
This year we have made
a lot of enhancements

544

545
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

546
00:24:58,116 --> 00:25:00,956 A:middle
This year we have made
a lot of enhancements

547
00:25:00,956 --> 00:25:02,066 A:middle
to the visual scene editor.

548
00:25:02,066 --> 00:25:05,246 A:middle
The number one requested
feature is custom classes.

549
00:25:06,266 --> 00:25:11,556 A:middle
Now in the level my hero
character I can specify its

550
00:25:11,596 --> 00:25:16,156 A:middle
class is called main
character class.

551
00:25:16,156 --> 00:25:18,666 A:middle
When the scene is
de-serialized at runtime,

552
00:25:19,006 --> 00:25:21,526 A:middle
whether your application
is written in Objective-C

553
00:25:21,526 --> 00:25:28,306 A:middle
or Swift the correct class will
be instantiated and created

554
00:25:28,306 --> 00:25:33,336 A:middle
when the scene is running
and loaded on the scene.

555
00:25:33,336 --> 00:25:38,576 A:middle
In addition we have been
very busy adding the support

556
00:25:38,576 --> 00:25:41,156 A:middle
from day one of the
brand-new SKNodes.

557
00:25:41,566 --> 00:25:44,766 A:middle
Now you can design your
scene with the Camera nodes,

558
00:25:45,356 --> 00:25:47,486 A:middle
position AudioNode and as well

559
00:25:47,486 --> 00:25:50,146 A:middle
as the ReferenceNode right
inside of the editor.

560
00:25:50,486 --> 00:25:53,646 A:middle
It is really cool to be able
to see the camera sending

561
00:25:53,646 --> 00:25:56,546 A:middle
up the correct scale,
the zoom factor as well

562
00:25:56,546 --> 00:25:58,976 A:middle
as run actions right inside
of the scene editor rather

563
00:25:58,976 --> 00:26:01,516 A:middle
than having to rebuild
your game.

564

565
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

566
00:25:58,976 --> 00:26:01,516 A:middle
than having to rebuild
your game.

567
00:26:02,106 --> 00:26:06,206 A:middle
You can also set up the
position of the SKAudioNode,

568
00:26:06,686 --> 00:26:11,866 A:middle
move them around and hear the
actual sound change to make sure

569
00:26:11,866 --> 00:26:14,186 A:middle
that your effect is set up
correctly on your scene.

570
00:26:14,786 --> 00:26:18,706 A:middle
Now this year, one of the
most exciting features

571
00:26:18,706 --> 00:26:21,406 A:middle
on the tools front is
to have the ability

572
00:26:21,406 --> 00:26:23,086 A:middle
to design complex actions.

573
00:26:23,956 --> 00:26:26,646 A:middle
You can design a
really complex action

574
00:26:27,046 --> 00:26:28,846 A:middle
by using the fundamental
building blocks

575
00:26:28,846 --> 00:26:32,186 A:middle
that we've provided as part
of SpriteKit action runtime.

576
00:26:32,756 --> 00:26:38,766 A:middle
It is timeline based, also just
like any other editors we have

577
00:26:38,766 --> 00:26:42,366 A:middle
in Xcode it provides
live visualization.

578
00:26:43,356 --> 00:26:47,096 A:middle
You can use not only
to create 2D actions,

579
00:26:47,816 --> 00:26:50,126 A:middle
you can also create
3D animations

580
00:26:50,276 --> 00:26:52,706 A:middle
for SceneKit, it's
the same editor.

581
00:26:53,826 --> 00:26:56,206 A:middle
You can also create
cinematic animations

582
00:26:56,746 --> 00:26:59,606 A:middle
which will be the animations
saved out as part of scene

583
00:26:59,606 --> 00:27:02,676 A:middle
when the scene is loaded
that automatically gets run

584

585
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

586
00:26:59,606 --> 00:27:02,676 A:middle
when the scene is loaded
that automatically gets run

587
00:27:02,676 --> 00:27:05,326 A:middle
for any node that has
action in a scene.

588
00:27:06,636 --> 00:27:11,356 A:middle
You can also create interactive
animations like running cycle

589
00:27:11,706 --> 00:27:14,266 A:middle
or jump animations,
falling off from a ledge

590
00:27:14,266 --> 00:27:19,006 A:middle
and trigger these animations
with one or two lines of code

591
00:27:19,946 --> 00:27:21,366 A:middle
at different game
play scenarios.

592
00:27:25,216 --> 00:27:28,976 A:middle
Here I have a scene, I designed
to move the camera around,

593
00:27:28,976 --> 00:27:30,436 A:middle
I focus on the main character,

594
00:27:30,436 --> 00:27:32,126 A:middle
the main character
starts animating,

595
00:27:32,126 --> 00:27:34,086 A:middle
running the walk cycle, and walk

596
00:27:34,086 --> 00:27:35,676 A:middle
across the scene,
that's my opening.

597
00:27:35,736 --> 00:27:42,326 A:middle
You can do that in less
than 5 minutes of your time.

598
00:27:42,516 --> 00:27:45,486 A:middle
Now another major focus
this year on the tools front

599
00:27:45,486 --> 00:27:48,106 A:middle
for both 2D and 3D is
to have the ability

600
00:27:48,106 --> 00:27:50,546 A:middle
of doing referencing
and instancing.

601
00:27:50,956 --> 00:27:56,666 A:middle
On SpriteKit side with support
references on the actions

602
00:27:56,716 --> 00:28:00,336 A:middle
as well as references on the
node which is your art assets

603

604
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

605
00:27:56,716 --> 00:28:00,336 A:middle
as well as references on the
node which is your art assets

606
00:28:00,336 --> 00:28:03,056 A:middle
in your scene, these
are reusable components

607
00:28:03,146 --> 00:28:05,386 A:middle
and they are data files
that can be shared

608
00:28:05,666 --> 00:28:07,626 A:middle
across multiple projects,

609
00:28:07,886 --> 00:28:10,066 A:middle
multiple persons
or multiple levels.

610
00:28:10,936 --> 00:28:12,436 A:middle
To use these reference files,

611
00:28:12,436 --> 00:28:14,136 A:middle
you don't have to
write any code.

612
00:28:14,746 --> 00:28:19,386 A:middle
To create the reference
animation is really easy,

613
00:28:19,736 --> 00:28:24,236 A:middle
we provide a brand new SK
action file template in Xcode 7

614
00:28:24,236 --> 00:28:27,066 A:middle
and you can a pure
animation file,

615
00:28:27,466 --> 00:28:31,156 A:middle
in there design all your complex
animation, give it out a name,

616
00:28:31,486 --> 00:28:34,846 A:middle
each of these actions can be
retrieved with the SKAction,

617
00:28:34,846 --> 00:28:38,246 A:middle
actionNamed selector to
create the right instance

618
00:28:38,246 --> 00:28:39,256 A:middle
and to add it to your scene.

619
00:28:40,006 --> 00:28:44,306 A:middle
Any of the referenced actions,
automatically will be picked out

620
00:28:44,306 --> 00:28:46,216 A:middle
and reside in object library.

621
00:28:46,346 --> 00:28:48,686 A:middle
If you want to have
the actions reused

622
00:28:48,686 --> 00:28:50,986 A:middle
across multiple intro scenes

623
00:28:50,986 --> 00:28:54,086 A:middle
in different levels it is just
a matter of drag-n-drop these

624
00:28:54,086 --> 00:28:55,176 A:middle
from the object library.

625
00:28:56,756 --> 00:28:59,396 A:middle
Creating reference
nodes is also easier.

626

627
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

628
00:29:00,806 --> 00:29:04,266 A:middle
It is just as simple as
dragging another SKS file

629
00:29:04,266 --> 00:29:06,696 A:middle
from your work space
to your scene.

630
00:29:07,546 --> 00:29:09,866 A:middle
These references,
we automatically

631
00:29:09,866 --> 00:29:12,486 A:middle
in the editor create
SKReferenceNode instances

632
00:29:12,776 --> 00:29:14,606 A:middle
and set up correct URL for you.

633
00:29:15,096 --> 00:29:19,896 A:middle
You can also use it, the API
to build a custom collection

634
00:29:20,406 --> 00:29:23,616 A:middle
of the nodes, for example, if I
have a bird house that I'm going

635
00:29:23,616 --> 00:29:25,396 A:middle
to be using as a level prop

636
00:29:25,396 --> 00:29:29,056 A:middle
across multiple levels I
can just build that and have

637
00:29:29,056 --> 00:29:32,696 A:middle
that instance in multiple
levels and any changes

638
00:29:32,696 --> 00:29:33,936 A:middle
to the original design

639
00:29:33,996 --> 00:29:36,506 A:middle
of the bird house will
automatically get reflected

640
00:29:36,506 --> 00:29:39,146 A:middle
in each of the instances
that use the reference.

641
00:29:41,816 --> 00:29:45,686 A:middle
Here you can also
manually change

642
00:29:45,686 --> 00:29:48,596 A:middle
and update the reference
file in the editor as well.

643
00:29:48,596 --> 00:29:54,916 A:middle
Next, I like to invite Tyler on
stage to give you a quick demo

644
00:29:55,056 --> 00:29:56,976 A:middle
of these great new
features in Xcode.

645
00:29:57,516 --> 00:30:02,496 A:middle
[Applause]

646

647
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

648
00:29:57,516 --> 00:30:02,496 A:middle
[Applause]

649
00:30:02,996 --> 00:30:03,816 A:middle
>> TYLER CASELLA:
Thank you Norman.

650
00:30:03,996 --> 00:30:06,996 A:middle
As you see, we have a lot of
great new additions to SpriteKit

651
00:30:06,996 --> 00:30:09,596 A:middle
and Xcode 7, and I'd like to
show you how they'll integrate

652
00:30:09,596 --> 00:30:12,166 A:middle
in your development workflow
by showing you a quick demo

653
00:30:12,166 --> 00:30:15,246 A:middle
of creating a simple level,
adding a cut scene to it,

654
00:30:15,576 --> 00:30:17,336 A:middle
and then creating some
interactive game play.

655
00:30:22,176 --> 00:30:25,526 A:middle
Well see here, I just
started a game project

656
00:30:25,526 --> 00:30:28,596 A:middle
and I've started a level
within this project.

657
00:30:28,596 --> 00:30:31,576 A:middle
I've got a player sprite
as well as some platforms.

658
00:30:32,056 --> 00:30:35,656 A:middle
The first thing I want to do is
to create the environment in it

659
00:30:35,916 --> 00:30:39,076 A:middle
by adding a background and
some foreground elements.

660
00:30:39,636 --> 00:30:42,466 A:middle
Previously I would do this
directly into the scene

661
00:30:42,466 --> 00:30:45,496 A:middle
and then create copies for
each instance that I needed.

662
00:30:45,896 --> 00:30:48,686 A:middle
This quickly becomes cumbersome
if I need to make changes

663
00:30:48,686 --> 00:30:51,016 A:middle
because I need to make the
change in many different spots.

664
00:30:51,306 --> 00:30:53,076 A:middle
It is not easy to reuse.

665
00:30:53,076 --> 00:30:55,516 A:middle
We have addressed that
with the ReferenceNode.

666
00:30:56,196 --> 00:30:58,726 A:middle
So see here in a separate
file I've created all

667
00:30:58,726 --> 00:31:00,856 A:middle
of my elements for
our environment.

668

669
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

670
00:30:58,726 --> 00:31:00,856 A:middle
of my elements for
our environment.

671
00:31:01,096 --> 00:31:03,646 A:middle
I've got a nice background
with the waterfall as well

672
00:31:03,646 --> 00:31:05,646 A:middle
as a nice foreground fog effect.

673
00:31:06,396 --> 00:31:08,146 A:middle
What I can do to
reference the contents

674
00:31:08,176 --> 00:31:10,826 A:middle
of this file is simply
drag it into our level.

675
00:31:11,246 --> 00:31:13,376 A:middle
Now we've automatically
created a ReferenceNode

676
00:31:13,576 --> 00:31:14,776 A:middle
with all those elements.

677
00:31:14,856 --> 00:31:18,816 A:middle
You will notice even the
foreground Z value is preserved

678
00:31:18,816 --> 00:31:20,356 A:middle
as we add it into our scene.

679
00:31:21,226 --> 00:31:23,746 A:middle
So go ahead and create a
few copies of these to fill

680
00:31:23,746 --> 00:31:26,716 A:middle
out our level and you'll
notice that I'm creating copies

681
00:31:26,716 --> 00:31:28,326 A:middle
of the ReferenceNode itself

682
00:31:28,586 --> 00:31:31,206 A:middle
and not the actual
individual elements

683
00:31:31,326 --> 00:31:33,276 A:middle
within our reference scene.

684
00:31:33,896 --> 00:31:37,296 A:middle
What's great about that is,
later on in my project when I,

685
00:31:37,606 --> 00:31:39,966 A:middle
for example, want to change
the background texture

686
00:31:39,966 --> 00:31:41,246 A:middle
because it doesn't quite match

687
00:31:41,246 --> 00:31:43,736 A:middle
with the platforms I've got
here, I don't have to make

688
00:31:43,736 --> 00:31:45,786 A:middle
that change on the
three instances I have.

689
00:31:46,146 --> 00:31:48,136 A:middle
Instead I can go to
our single source

690
00:31:48,486 --> 00:31:53,486 A:middle
and make this change only once
and that change is echoed to all

691
00:31:53,486 --> 00:31:55,906 A:middle
of our instances
within our level.

692
00:31:56,516 --> 00:32:00,646 A:middle
[Applause]

693

694
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

695
00:31:56,516 --> 00:32:00,646 A:middle
[Applause]

696
00:32:01,146 --> 00:32:01,726 A:middle
>> TYLER CASELLA: Next I'd

697
00:32:01,726 --> 00:32:03,846 A:middle
like to create a cut
scene within our level.

698
00:32:03,846 --> 00:32:07,066 A:middle
I'll do that by using
our new action editor

699
00:32:07,266 --> 00:32:08,096 A:middle
that we've introduced.

700
00:32:08,556 --> 00:32:10,836 A:middle
Previously you could only
create actions in code

701
00:32:10,836 --> 00:32:13,536 A:middle
which is very difficult
to visualize so we wanted

702
00:32:13,536 --> 00:32:16,696 A:middle
to create an editor that was
easy to create complex actions

703
00:32:16,696 --> 00:32:19,146 A:middle
from and give you
realtime previews

704
00:32:19,146 --> 00:32:19,996 A:middle
of what you're creating.

705
00:32:20,786 --> 00:32:22,376 A:middle
To access the action editor,

706
00:32:22,376 --> 00:32:23,996 A:middle
you just click the
disclosure button here

707
00:32:23,996 --> 00:32:26,326 A:middle
in the bottom-left corner and
you'll see you're presented

708
00:32:26,326 --> 00:32:29,136 A:middle
with all of the nodes in your
scene as well as the timeline

709
00:32:29,136 --> 00:32:30,876 A:middle
of all of the actions
they contain.

710
00:32:31,266 --> 00:32:33,416 A:middle
We'll see here our player
has one action on it,

711
00:32:33,416 --> 00:32:35,136 A:middle
which is an animate
with textures action,

712
00:32:35,536 --> 00:32:37,366 A:middle
and we've got our
idle frames within it.

713
00:32:37,486 --> 00:32:38,756 A:middle
So now when I click animate,

714
00:32:39,036 --> 00:32:41,856 A:middle
we'll see that our player is
running this animate action

715
00:32:42,146 --> 00:32:42,826 A:middle
within our scene.

716
00:32:43,216 --> 00:32:46,376 A:middle
Let's go ahead and make a
cut scene within our level,

717
00:32:46,376 --> 00:32:49,266 A:middle
we're going to make the
player run across the level.

718
00:32:50,106 --> 00:32:52,016 A:middle
To do that, I'll
start by filtering

719
00:32:52,016 --> 00:32:54,186 A:middle
down to just our player
interaction editor

720
00:32:54,986 --> 00:32:57,506 A:middle
and to just the actions
within our object library.

721
00:32:57,696 --> 00:33:01,276 A:middle
We provide you a set of
building block actions to use

722

723
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

724
00:32:57,696 --> 00:33:01,276 A:middle
We provide you a set of
building block actions to use

725
00:33:01,276 --> 00:33:03,056 A:middle
to create your more
complex actions

726
00:33:03,056 --> 00:33:04,656 A:middle
which is exactly
what I'm going to do.

727
00:33:05,056 --> 00:33:08,216 A:middle
We'll start by adding a move
action into our cut scene.

728
00:33:08,216 --> 00:33:09,206 A:middle
All I have to do is drag it

729
00:33:09,206 --> 00:33:10,966 A:middle
from the object library
into our timeline.

730
00:33:11,186 --> 00:33:16,256 A:middle
Now for this movement I'll go
850 units in the X direction

731
00:33:16,256 --> 00:33:18,246 A:middle
and we're going to ease in
for more natural motion.

732
00:33:18,246 --> 00:33:20,086 A:middle
Now when I click
animate we'll see

733
00:33:20,086 --> 00:33:22,226 A:middle
that the player is
running that action.

734
00:33:22,566 --> 00:33:24,656 A:middle
That was a bit quick, so
let's change the duration

735
00:33:24,656 --> 00:33:27,436 A:middle
by just dragging out the
action to about 2 seconds.

736
00:33:27,756 --> 00:33:30,626 A:middle
I'm going to adjust the
scale so now when we run,

737
00:33:30,836 --> 00:33:32,576 A:middle
the movement has a
much better velocity.

738
00:33:32,576 --> 00:33:36,216 A:middle
Now I'm going to also make
the player run as he moves

739
00:33:36,216 --> 00:33:39,596 A:middle
across the screen so I'll add in
an animate with textures action.

740
00:33:40,336 --> 00:33:42,836 A:middle
To define what animation
we're going to be playing,

741
00:33:43,006 --> 00:33:45,426 A:middle
I can just go into the
media library and filter

742
00:33:45,426 --> 00:33:46,746 A:middle
down to our run frames.

743
00:33:47,336 --> 00:33:49,896 A:middle
I can select them and simply
drag them into our action.

744
00:33:50,386 --> 00:33:55,006 A:middle
Now when we run we'll see that
the player plays that animation.

745
00:33:55,406 --> 00:33:58,056 A:middle
But of course we're only
playing it once so we're going

746
00:33:58,056 --> 00:34:00,476 A:middle
to add a loop so that we
can span the whole time

747

748
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

749
00:33:58,056 --> 00:34:00,476 A:middle
to add a loop so that we
can span the whole time

750
00:34:00,476 --> 00:34:01,546 A:middle
of our movement.

751
00:34:01,546 --> 00:34:03,916 A:middle
I can create a loop by
clicking this loop button here

752
00:34:03,916 --> 00:34:05,276 A:middle
in the corner and I'm presented

753
00:34:05,276 --> 00:34:06,636 A:middle
with all the controls
for looping.

754
00:34:06,956 --> 00:34:10,426 A:middle
I can increase the number of
iterations, I can decrease

755
00:34:10,426 --> 00:34:11,636 A:middle
or I can loop indefinitely.

756
00:34:12,196 --> 00:34:14,516 A:middle
In our case I'm going to
only want to loop twice

757
00:34:14,516 --> 00:34:16,676 A:middle
and then I'll adjust the
duration to match our movement.

758
00:34:17,025 --> 00:34:19,106 A:middle
Now we have the player
running across the scene.

759
00:34:20,346 --> 00:34:22,926 A:middle
Next we've got two
gaps within the level

760
00:34:22,926 --> 00:34:24,616 A:middle
so let's make the
player jump over them.

761
00:34:24,616 --> 00:34:30,085 A:middle
In the action editor we're
able to scrub to specific times

762
00:34:30,085 --> 00:34:33,815 A:middle
within our action so I can scrub
to just before we reach the gap

763
00:34:33,936 --> 00:34:35,886 A:middle
and we'll add another
movement action.

764
00:34:36,335 --> 00:34:38,045 A:middle
We'll snap right to
where we're scrubbed.

765
00:34:39,616 --> 00:34:43,985 A:middle
For this movement we'll move
in the Y direction 100 units

766
00:34:44,176 --> 00:34:46,496 A:middle
and I'll ease out so that
we slow down as we get

767
00:34:46,496 --> 00:34:47,496 A:middle
to the top of our jump.

768
00:34:48,416 --> 00:34:51,306 A:middle
Then I'll scrub once again
towards the middle of our gap

769
00:34:51,306 --> 00:34:53,436 A:middle
and I'll adjust the duration
so that we reach the top

770
00:34:53,436 --> 00:34:56,076 A:middle
of our jump right there
in the center of the gap.

771
00:34:56,786 --> 00:35:00,736 A:middle
Then I'll copy the first part of
our action and simply reverse it

772

773
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

774
00:34:56,786 --> 00:35:00,736 A:middle
Then I'll copy the first part of
our action and simply reverse it

775
00:35:00,886 --> 00:35:02,896 A:middle
to get our full motion
of the jump.

776
00:35:03,886 --> 00:35:05,486 A:middle
That last step for
our jump is I'm going

777
00:35:05,486 --> 00:35:07,806 A:middle
to create one more
animation which is going

778
00:35:07,806 --> 00:35:11,086 A:middle
to have our jump frames so I'll
follow the same process going

779
00:35:11,086 --> 00:35:14,066 A:middle
to our media library, filter
down to our jump frames

780
00:35:14,146 --> 00:35:15,266 A:middle
and add them to our action

781
00:35:16,306 --> 00:35:18,906 A:middle
and now we've got the player
jumping over that first gap.

782
00:35:19,466 --> 00:35:23,336 A:middle
Of course we have one more
gap so one option I have is

783
00:35:23,336 --> 00:35:25,876 A:middle
to simply copy these
actions I have just added

784
00:35:25,876 --> 00:35:28,696 A:middle
and displace them, but then we
run into the same issue we had

785
00:35:28,696 --> 00:35:31,096 A:middle
with the background where if
I want it make changes to it,

786
00:35:31,096 --> 00:35:33,756 A:middle
I'm going to have to do it to
every instance I have copied.

787
00:35:34,096 --> 00:35:37,116 A:middle
It very likely I'm going to
want to reuse these actions

788
00:35:37,116 --> 00:35:37,976 A:middle
in different levels

789
00:35:37,976 --> 00:35:39,756 A:middle
or potentially even
a different project.

790
00:35:40,366 --> 00:35:41,546 A:middle
We've addressed this
the same way

791
00:35:41,546 --> 00:35:44,076 A:middle
with the background allowing
you to reference actions.

792
00:35:44,416 --> 00:35:46,636 A:middle
To do that we've introduced
a new file in Xcode

793
00:35:46,826 --> 00:35:48,526 A:middle
which is the SpriteKit
action file.

794
00:35:49,276 --> 00:35:51,966 A:middle
This is a file where you can
place these actions with a name

795
00:35:51,966 --> 00:35:54,096 A:middle
that you can then
reference across scenes,

796
00:35:54,296 --> 00:35:55,826 A:middle
projects, and in code.

797
00:35:56,296 --> 00:35:57,816 A:middle
Let's go ahead, make
one of those files

798
00:35:58,226 --> 00:36:00,676 A:middle
by right clicking our selected
actions and we're going

799

800
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

801
00:35:58,226 --> 00:36:00,676 A:middle
by right clicking our selected
actions and we're going

802
00:36:00,676 --> 00:36:01,756 A:middle
to convert it to a reference.

803
00:36:02,176 --> 00:36:04,806 A:middle
I'm prompted to give it a
name, so I'll name it jump

804
00:36:05,216 --> 00:36:07,426 A:middle
and we can select an
action file to put this in,

805
00:36:07,426 --> 00:36:09,346 A:middle
and in our case we'll
create the new file.

806
00:36:10,866 --> 00:36:13,736 A:middle
So I'll name this file player
actions because I'm going

807
00:36:13,736 --> 00:36:16,366 A:middle
to put all the actions related
to the player into this file.

808
00:36:17,896 --> 00:36:19,466 A:middle
The file is added to our project

809
00:36:19,556 --> 00:36:22,056 A:middle
and you will see now those
actions that we created

810
00:36:22,056 --> 00:36:24,426 A:middle
for the jump are within our
file under the name jump

811
00:36:24,806 --> 00:36:27,836 A:middle
and within our scene
we're simply referencing

812
00:36:27,906 --> 00:36:28,616 A:middle
those actions.

813
00:36:29,696 --> 00:36:31,036 A:middle
So now all the actions
that you put

814
00:36:31,036 --> 00:36:33,426 A:middle
into this file are completely
independent of any scene

815
00:36:33,426 --> 00:36:35,256 A:middle
or project but you're going
to often want to edit them

816
00:36:35,256 --> 00:36:36,906 A:middle
in the context of some scene.

817
00:36:37,416 --> 00:36:40,116 A:middle
We allow you to set a preview
screen that you can assign any

818
00:36:40,116 --> 00:36:42,546 A:middle
of the actions in your file on
any of the nodes in your scene.

819
00:36:42,546 --> 00:36:45,376 A:middle
So for example, I can preview my
jump on any node in this scene

820
00:36:45,576 --> 00:36:46,866 A:middle
or I can set up my own scene

821
00:36:46,946 --> 00:36:48,696 A:middle
with different orientations
of the player.

822
00:36:48,966 --> 00:36:52,046 A:middle
For example, I can preview
what this jump action will look

823
00:36:52,046 --> 00:36:55,106 A:middle
like on the left and right
orientations of my player.

824
00:36:55,656 --> 00:36:59,186 A:middle
So now on our level I'll
go ahead and scrub back

825
00:36:59,186 --> 00:37:02,686 A:middle
to our next gap and in our
object library we automatically

826

827
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

828
00:36:59,186 --> 00:37:02,686 A:middle
to our next gap and in our
object library we automatically

829
00:37:02,686 --> 00:37:04,446 A:middle
populate it with
all of the actions

830
00:37:04,446 --> 00:37:05,776 A:middle
that are available to reference.

831
00:37:05,886 --> 00:37:08,956 A:middle
So that jump action that I
just created is automatically

832
00:37:09,006 --> 00:37:12,036 A:middle
in our object library and
I can just drag it in.

833
00:37:12,036 --> 00:37:13,366 A:middle
So now we've got our
finished cut scene.

834
00:37:13,406 --> 00:37:14,526 A:middle
Let's take a look.

835
00:37:16,656 --> 00:37:17,556 A:middle
That looks great.

836
00:37:18,356 --> 00:37:20,666 A:middle
Now I want to show you how
you can use these actions

837
00:37:20,666 --> 00:37:23,156 A:middle
within code itself instead
of just a cut scene.

838
00:37:23,846 --> 00:37:26,516 A:middle
What I want to do is create a
named action for every state

839
00:37:26,516 --> 00:37:29,996 A:middle
that the player can be in and
then reference those in code.

840
00:37:30,256 --> 00:37:35,366 A:middle
I will create a reference, a
referencable action called run

841
00:37:35,486 --> 00:37:38,976 A:middle
that has our animation and
I'll do the same for our idle.

842
00:37:39,596 --> 00:37:42,186 A:middle
I'll go ahead and delete these

843
00:37:42,186 --> 00:37:44,356 A:middle
because we'll do this
interactively now

844
00:37:44,706 --> 00:37:48,166 A:middle
and you can see in our action
file we now have the three

845
00:37:48,166 --> 00:37:50,256 A:middle
states present within this file.

846
00:37:50,666 --> 00:37:52,626 A:middle
Now to use these
within code all you have

847
00:37:52,626 --> 00:37:54,626 A:middle
to do is use the new
selectors we have introduced,

848
00:37:54,986 --> 00:37:57,066 A:middle
the action name selectors
providing them

849
00:37:57,066 --> 00:37:58,956 A:middle
with the names we have just
created the actions with,

850
00:37:59,276 --> 00:38:00,966 A:middle
idle, run, and jump.

851

852
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

853
00:37:59,276 --> 00:38:00,966 A:middle
idle, run, and jump.

854
00:38:01,666 --> 00:38:04,516 A:middle
Now when I run our game
you can see the actions

855
00:38:04,516 --> 00:38:07,356 A:middle
that I have just created are
being used in the game itself.

856
00:38:08,176 --> 00:38:08,876 A:middle
Interactively.

857
00:38:09,866 --> 00:38:11,856 A:middle
The real power of this
comes when you want

858
00:38:11,856 --> 00:38:12,986 A:middle
to make a change
to your actions.

859
00:38:13,016 --> 00:38:15,006 A:middle
I can go in my action
file and let's

860
00:38:15,006 --> 00:38:18,116 A:middle
for example make the player
do a flip when we jump.

861
00:38:18,116 --> 00:38:22,636 A:middle
I can go in here and I can add
a rotate action to the jump,

862
00:38:23,336 --> 00:38:27,786 A:middle
give it a value of negative
360, ease in and out

863
00:38:27,786 --> 00:38:30,156 A:middle
and now I run the game without
even recompiling our game,

864
00:38:30,556 --> 00:38:31,436 A:middle
we can see the changes

865
00:38:31,436 --> 00:38:33,976 A:middle
that I have made are now
applied to our player.

866
00:38:34,516 --> 00:38:39,686 A:middle
[Applause]

867
00:38:40,186 --> 00:38:42,316 A:middle
>> TYLER CASELLA: So now
the level looks pretty good

868
00:38:42,316 --> 00:38:43,106 A:middle
so the last thing I want

869
00:38:43,106 --> 00:38:45,186 A:middle
to do is create a
nice cinematic opening

870
00:38:45,186 --> 00:38:47,046 A:middle
to really introduce the
player to the level.

871
00:38:47,496 --> 00:38:51,686 A:middle
I can do that by creating an
SKCameraNode and into our scene.

872
00:38:52,196 --> 00:38:54,956 A:middle
The camera node let's us
define a Viewport within it

873
00:38:55,126 --> 00:38:57,116 A:middle
and we can go ahead
and assign our scene

874
00:38:57,316 --> 00:38:59,316 A:middle
to use the camera
I've just added.

875

876
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

877
00:39:00,186 --> 00:39:02,696 A:middle
For our cinematic opening
I'm going to start us off

878
00:39:02,696 --> 00:39:05,526 A:middle
in the corner here and I'll
have the camera zoomed in.

879
00:39:09,776 --> 00:39:12,246 A:middle
I'm going to zoom in
on the fog over here.

880
00:39:12,726 --> 00:39:15,446 A:middle
What's great is, because it
is just an SKNode I can apply

881
00:39:15,446 --> 00:39:16,526 A:middle
actions to the camera.

882
00:39:17,206 --> 00:39:19,166 A:middle
I'll filter down
to just our camera

883
00:39:19,866 --> 00:39:21,936 A:middle
and then I'll add
a move 2 action.

884
00:39:22,246 --> 00:39:24,776 A:middle
What I'm going to do for our
cinematic opening is pan the

885
00:39:24,776 --> 00:39:26,426 A:middle
camera over to the
center of our level

886
00:39:26,606 --> 00:39:27,986 A:middle
and zoom out at the same time.

887
00:39:28,296 --> 00:39:32,746 A:middle
For our move 2 I'll use this
platforms X value as our center,

888
00:39:32,806 --> 00:39:36,826 A:middle
507, and I'll also want
to center it in the Y

889
00:39:37,036 --> 00:39:39,596 A:middle
which is 384 units
and we're going

890
00:39:39,596 --> 00:39:40,866 A:middle
to want this to ease in and out.

891
00:39:41,796 --> 00:39:44,256 A:middle
I'm going to move our action
to start about half a second

892
00:39:44,256 --> 00:39:46,086 A:middle
after we begin our
scene and I'm going

893
00:39:46,086 --> 00:39:48,456 A:middle
to have it take three
seconds to pan over.

894
00:39:48,916 --> 00:39:52,906 A:middle
I'll also add a scale 2 action
and give it a half second offset

895
00:39:52,946 --> 00:39:57,636 A:middle
from our move and have it end at
the same time as our movement.

896
00:39:58,036 --> 00:39:59,386 A:middle
Now within that short amount

897
00:39:59,386 --> 00:40:00,986 A:middle
of time we have created
the cinematic opening,

898

899
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

900
00:39:59,386 --> 00:40:00,986 A:middle
of time we have created
the cinematic opening,

901
00:40:01,146 --> 00:40:02,176 A:middle
and we have finished our level,

902
00:40:02,396 --> 00:40:04,326 A:middle
so let's take a look
at how it looks.

903
00:40:11,876 --> 00:40:14,486 A:middle
So that's just a taste
of what you're able to do

904
00:40:14,596 --> 00:40:16,916 A:middle
with SpriteKit and Xcode 7 now.

905
00:40:17,516 --> 00:40:23,156 A:middle
[Applause]

906
00:40:23,656 --> 00:40:25,276 A:middle
>> TYLER CASELLA: And with that,
I would like to hand it off back

907
00:40:25,406 --> 00:40:27,946 A:middle
to Tim to summarize for you.

908
00:40:29,406 --> 00:40:30,566 A:middle
>> TIM ORIOL: Thanks, Tyler.

909
00:40:30,676 --> 00:40:32,346 A:middle
That is really, really
cool stuff.

910
00:40:32,346 --> 00:40:35,396 A:middle
I think as you all can see,

911
00:40:35,396 --> 00:40:37,306 A:middle
it is going to be an
extremely exciting year

912
00:40:37,306 --> 00:40:38,466 A:middle
for SpriteKit developers.

913
00:40:38,706 --> 00:40:41,106 A:middle
We've added the AudioNode,
we've added the CameraNode,

914
00:40:41,106 --> 00:40:43,046 A:middle
we have reference
actions and nodes,

915
00:40:43,506 --> 00:40:46,446 A:middle
we have a brand-new timeline
based action editor built right

916
00:40:46,446 --> 00:40:47,106 A:middle
into Xcode.

917
00:40:47,436 --> 00:40:50,926 A:middle
We have integrated our texture
atlases with the Asset Catalog

918
00:40:50,926 --> 00:40:52,626 A:middle
to give you access
to new features

919
00:40:52,866 --> 00:40:55,086 A:middle
like On-Demand Resources
and app thinning

920
00:40:55,646 --> 00:40:59,096 A:middle
and we have also made SpriteKit
Metal backed on every device

921
00:40:59,126 --> 00:41:01,976 A:middle
that supports it and
provides you easy access

922

923
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

924
00:40:59,126 --> 00:41:01,976 A:middle
that supports it and
provides you easy access

925
00:41:02,086 --> 00:41:03,836 A:middle
to the new GamePlayKit
framework.

926
00:41:04,286 --> 00:41:08,166 A:middle
If you need any more
information, please check

927
00:41:08,166 --> 00:41:11,146 A:middle
out our great developer site
or for general inquiries,

928
00:41:11,276 --> 00:41:15,856 A:middle
contact our graphics evangelist
Allan Schaffer, there's a couple

929
00:41:15,856 --> 00:41:17,896 A:middle
of related sessions if
you want to find out more

930
00:41:17,896 --> 00:41:19,596 A:middle
about GamePlayKit or SceneKit.

931
00:41:21,016 --> 00:41:22,766 A:middle
We also have a few labs,

932
00:41:22,836 --> 00:41:24,506 A:middle
the first of which
is the SpriteKit lab

933
00:41:24,506 --> 00:41:25,646 A:middle
which is starting right now.

934
00:41:26,056 --> 00:41:28,756 A:middle
So, feel free to follow us
downstairs and we'd be happy

935
00:41:28,756 --> 00:41:30,396 A:middle
to answer any questions
you may have.

936
00:41:31,076 --> 00:41:31,906 A:middle
Thank you very much.

937
00:41:31,906 --> 00:41:32,976 A:middle
Please enjoy your conference.

938
00:41:33,516 --> 00:41:37,500 A:middle
[Applause]

939
