1
00:00:07,350 --> 00:00:08,010
>> Ken Kocienda: Hello!

1
2
00:00:08,010 --> 00:00:15,410
Welcome! [applause] How are you all doing?

2
3
00:00:15,410 --> 00:00:17,390
Are you enjoying the conference so far?

3
4
00:00:17,390 --> 00:00:20,570
[applause] Okay, good, good, good.

4
5
00:00:20,570 --> 00:00:21,200
Well, welcome.

5
6
00:00:21,200 --> 00:00:28,950
Today, we're going to be talking about Model-View-Controller
for iPhone OS, or iOS, as it's now called,

6
7
00:00:28,950 --> 00:00:33,830
writing Essential Design Pattern
for Making Flexible Software.

7
8
00:00:33,830 --> 00:00:37,600
And I'm Ken Kocienda, and I work on iPhone software.

8
9
00:00:37,600 --> 00:00:41,320
Well, today, as you might be able to
tell, from the name of the presentation,

9
10
00:00:41,320 --> 00:00:44,370
this talk is going to be about design patterns.

10
11
00:00:44,370 --> 00:00:45,720
Well, what are design patterns?

11
12
00:00:45,720 --> 00:00:48,620
Well, there's a number of them up there on the slide.

12
13
00:00:48,620 --> 00:00:53,070
These are good solutions for common
problems in software development.

13
14
00:00:53,070 --> 00:00:54,030
You're probably familiar with them.

14
15
00:00:54,030 --> 00:00:57,060
Well, I'm going to pick out one of
them today, Model-View-Controller,

15
16
00:00:57,060 --> 00:01:02,220
and that's going to be the main subject of the talk.

16
17
00:01:03,280 --> 00:01:04,910
So, why should you care?

17
18
00:01:04,910 --> 00:01:06,340
Right? Why is this a big deal?

18
19
00:01:06,340 --> 00:01:07,630
Why are you here?

19
20
00:01:07,630 --> 00:01:10,280
Well, I'm going to try to answer that question for you.

20
21
00:01:10,280 --> 00:01:14,910
Because, well, probably you want to make great apps, right?

21
22
00:01:14,910 --> 00:01:18,490
Yeah! Okay, so, now, how can this all help?

22
23
00:01:18,490 --> 00:01:25,340
Well, going back to the beginning of iPhone
development, right, you had a small screen.

23
24
00:01:25,340 --> 00:01:31,530
We have some great documentation in APIs and, you know,
things are a lot simpler than maybe they used to be,

24
25
00:01:31,530 --> 00:01:37,770
if you're familiar with Desktop application development, and
it was really pretty simple to come up with an organization

25
26
00:01:37,770 --> 00:01:41,200
to just manage your one screen of content at a time.

26
27
00:01:41,200 --> 00:01:46,170
Well, then, along comes the iPad,
where the screen is bigger.

27
28
00:01:46,170 --> 00:01:52,660
You can fit more widgetry on the screen, more
content presented to your users at one time.

28
29
00:01:52,660 --> 00:01:56,540
Things get a little bit more complex.

29
30
00:01:56,540 --> 00:02:02,880
And then maybe you want to come up with an application that
will work on both the iPhone and the iPad at the same time,

30
31
00:02:02,880 --> 00:02:05,610
and it can seem like you're serving
two masters at the same time.

31
32
00:02:05,610 --> 00:02:12,760
Well, and that can be a little bit complicated, and so what
this talk is about is how Model-View-Controller can help you

32
33
00:02:12,760 --> 00:02:18,240
to tackle that problem and come up with some good solutions.

33
34
00:02:18,240 --> 00:02:23,600
Okay, so, now, if we sort of look at things formally,
if some of you studied Computer Science in school,

34
35
00:02:23,600 --> 00:02:26,780
you're probably familiar with a drawing like this.

35
36
00:02:26,780 --> 00:02:29,340
Yeah, there'll be a test on Friday, right?

36
37
00:02:29,340 --> 00:02:30,130
So, study up.

37
38
00:02:30,130 --> 00:02:31,850
Maybe, right?

38
39
00:02:31,850 --> 00:02:38,970
And we're going to be talking about this diagram
quite a bit, as we go along, but, really,

39
40
00:02:38,970 --> 00:02:46,020
what I'm going to try to do is tie that diagram and sort
of the concepts there back to the real world, right?

40
41
00:02:46,020 --> 00:02:51,240
Because, again, what you want is to make great apps, and
you want your software to stay flexible, easy to change

41
42
00:02:51,240 --> 00:02:54,720
and whatever, so I'm really going to
try to tie this back to the real world.

42
43
00:02:54,720 --> 00:02:58,320
And so I was trying to think of, like,
well, how could I present this all to you?

43
44
00:02:58,320 --> 00:03:02,300
So, when I think about the real world, I think
of like maybe a supermarket tabloid, right?

44
45
00:03:02,300 --> 00:03:04,580
You go down there, and you see these things all the time.

45
46
00:03:04,580 --> 00:03:07,520
"The 10 Best Celebrity Weight Loss Tips Ever."

46
47
00:03:07,520 --> 00:03:11,410
Right? You see these kinds of things all the time.

47
48
00:03:11,410 --> 00:03:17,850
I agonized on the copy, so I'll leave it on the screen
there for a second, so maybe you can see that there, right?

48
49
00:03:17,850 --> 00:03:24,320
Okay, so, I figured what I would do is
try to talk about Model-View-Controller

49
50
00:03:24,320 --> 00:03:28,540
and give you "The 10 Best MVC Tips Ever."

50
51
00:03:28,540 --> 00:03:31,460
Okay? Again, tie this back to the real world.

51
52
00:03:31,460 --> 00:03:34,950
And, again, the goal here is to give you some tips

52
53
00:03:34,950 --> 00:03:40,770
that will help you make your software
flexible and keep it easy to change.

53
54
00:03:40,770 --> 00:03:45,260
And, again, the goal being for you to
develop great apps, as you have been.

54
55
00:03:45,260 --> 00:03:49,380
And, of course, we'd like to see more
and more great apps, as time goes by.

55
56
00:03:49,380 --> 00:03:51,390
Okay, so let's jump right in.

56
57
00:03:51,390 --> 00:03:58,580
So, #1, the #1 tip is to Learn
Model-View-Controller for iPhone OS, or iOS.

57
58
00:03:58,580 --> 00:04:01,340
Old habits are going to die hard, so forgive me for that.

58
59
00:04:01,340 --> 00:04:06,250
So, learn Model-View-Controller for iOS.

59
60
00:04:06,250 --> 00:04:15,620
And this is all about learning the common conventions, as
they are applied in iOS, and learn about how they're built

60
61
00:04:15,620 --> 00:04:21,420
up from other design patterns, which, again,
are very, very common throughout the OS.

61
62
00:04:21,420 --> 00:04:25,360
And so, first of all, I'd like to focus
on the connections between the objects.

62
63
00:04:25,360 --> 00:04:30,230
So, going back to this diagram, you'll see that,
right, you're going to focus just on those connections,

63
64
00:04:30,230 --> 00:04:36,380
how things move around, how the updates and changes
circulate around this Model-View-Controller system.

64
65
00:04:36,380 --> 00:04:40,640
Okay? And the conventions that are used in iOS for that.

65
66
00:04:40,640 --> 00:04:47,990
And there are several, but, primarily, I'm going to call out
three of them: Target-Action, Notification, and Delegation.

66
67
00:04:47,990 --> 00:04:49,050
Okay, so what are these?

67
68
00:04:49,050 --> 00:04:50,050
Target-Action.

68
69
00:04:50,050 --> 00:04:55,910
Now, a lot of these are to promote
loose coupling among software elements,

69
70
00:04:55,910 --> 00:05:02,680
to allow you to tap into the functionality made available
by the OS classes in the APIs or that subclassing.

70
71
00:05:02,680 --> 00:05:04,550
Here is a concrete example.

71
72
00:05:04,550 --> 00:05:07,260
So, if you have a button in your application, you don't need

72
73
00:05:07,260 --> 00:05:11,530
to subclass the button to get custom
button-clicking behavior.

73
74
00:05:11,530 --> 00:05:17,760
You can set a target that implements a method, and basically
that target tells it, "But, hey, when you're tapped,

74
75
00:05:17,760 --> 00:05:26,520
call on me, and I'll go and take care of that custom
button-clicking behavior action afterwards stuff."

75
76
00:05:26,520 --> 00:05:30,870
Okay? So, again target-action, something that's very common.

76
77
00:05:30,870 --> 00:05:34,620
Another thing that's common is the notification.

77
78
00:05:34,620 --> 00:05:35,610
This is using the keyboard.

78
79
00:05:35,610 --> 00:05:39,680
When the keyboard comes up onto the screen,
of course, you don't have control over that.

79
80
00:05:39,680 --> 00:05:46,420
That just happens when the system detects that text
entry is going to happen, and so the keyboard sends

80
81
00:05:46,420 --> 00:05:51,060
out this notification, so that you can do
things like, perhaps, resize some views

81
82
00:05:51,060 --> 00:05:56,810
or perhaps initialize some objects, which
might validate some text, things like that.

82
83
00:05:56,810 --> 00:06:04,870
And so notification is, again, kind of this one-to-many type
communication between objects in the system and your code,

83
84
00:06:04,870 --> 00:06:09,900
and, primarily, that's NSNotificationCenter
takes care of that.

84
85
00:06:09,900 --> 00:06:14,440
Okay, I'd like to spend a little bit
of extra time talking about delegation,

85
86
00:06:14,440 --> 00:06:17,440
because it's going to come out
many, many more times in the talk.

86
87
00:06:17,440 --> 00:06:23,440
So, let's talk about delegation, another common
pattern which is used throughout the system.

87
88
00:06:23,440 --> 00:06:29,480
So, when a user taps on the return key
in a text field, the text field goes over

88
89
00:06:29,480 --> 00:06:32,370
and asks the delegate, "Should I end editing?"

89
90
00:06:32,370 --> 00:06:37,610
Should I actually, right, take the insertion point
out of the text field and make the keyboard go away?

90
91
00:06:37,610 --> 00:06:40,410
And the delegate, in this case, says, "Yes."

91
92
00:06:40,410 --> 00:06:50,520
And this way to link your custom object up to a text
field in the system is done through a UITextFieldDelegate.

92
93
00:06:50,520 --> 00:06:58,000
Well, many, many classes in UIKit
implemented Delegate to do work of this kind.

93
94
00:06:58,000 --> 00:07:02,250
Okay? And there's a really good way that you
can detect, even when you're reading code.

94
95
00:07:02,250 --> 00:07:06,120
Maybe you've downloaded some sample code,
and you're trying to understand how it works,

95
96
00:07:06,120 --> 00:07:09,750
so that you can sort of implement some of
that same functionality in your program.

96
97
00:07:09,750 --> 00:07:18,380
These will/did/should methods are sure signs
that you're looking at some delegation going on.

97
98
00:07:18,380 --> 00:07:19,230
So, an example.

98
99
00:07:19,230 --> 00:07:27,220
In the UIApplicationDelegate, the application says,
"Oh, I'm about to resign," and it will call out to some

99
100
00:07:27,220 --> 00:07:31,580
of your custom code, if you implemented
applicationWillResignActive.

100
101
00:07:31,580 --> 00:07:33,720
Right? The next one is a scroll view.

101
102
00:07:33,720 --> 00:07:39,860
When it zooms, when you pinch onto a scroll view to
zoom, you'll get a call back on your code, if you wish,

102
103
00:07:39,860 --> 00:07:43,430
if you implemented this method, scrollViewDidZoom.

103
104
00:07:43,430 --> 00:07:50,970
And another example, you click on a clear button
in a text field, right, you'll get a call out just

104
105
00:07:50,970 --> 00:07:55,090
to determine whether or not the text
field should actually clear its contents.

105
106
00:07:55,090 --> 00:08:05,450
So, again, these will/did/should methods are used really,
really quite a bit throughout UIKit and the UIKit classes.

106
107
00:08:05,450 --> 00:08:10,300
And, again, the idea for this is to keep
your code flexible and easy to change.

107
108
00:08:10,300 --> 00:08:16,170
Keep things from getting all balled up into one big
class that does everything, but keep things parceled

108
109
00:08:16,170 --> 00:08:19,960
out among different classes, so
that you can keep your code flexible

109
110
00:08:19,960 --> 00:08:26,260
and easy to change This will be a theme I'll be
returning to several more times during the talk.

110
111
00:08:26,260 --> 00:08:35,090
So, okay. So, a little bit of a look at how these
classes link up with their updates and changes.

111
112
00:08:36,100 --> 00:08:41,580
Right. So, learn MVC for the iPhone OS.

112
113
00:08:41,580 --> 00:08:50,620
Of course, there's a lot of great documentation
about those subjects in the iPhone Dev Center online.

113
114
00:08:50,620 --> 00:08:56,600
So, if you want to learn more, that's the place to do it.

114
115
00:08:56,600 --> 00:09:02,880
Okay. So, #2, so now Use MVC to Divide Your Work Up.

115
116
00:09:02,880 --> 00:09:09,710
And so, you know, a lot of times, when you
have your application, you've got a big idea,

116
117
00:09:09,710 --> 00:09:13,820
and perhaps it's even too big for
you to work on by yourself.

117
118
00:09:13,820 --> 00:09:19,830
So, you have to sort of divide up the work
and figure out how to make manageable pieces

118
119
00:09:19,830 --> 00:09:23,340
that will all communicate together to
implement this big idea that you have.

119
120
00:09:23,340 --> 00:09:26,010
Well, how does MVC help you do this?

120
121
00:09:26,010 --> 00:09:29,300
And I like to think of it as it
gives you a set of useful buckets.

121
122
00:09:29,300 --> 00:09:36,250
Right? So, going back to this diagram, again, we'll focus
in on the big boxes, the actual Model-View-Controller.

122
123
00:09:36,250 --> 00:09:42,260
Right? So, a Model, I like to think of Model as being not
just about data, which is sort of the most traditional way

123
124
00:09:42,260 --> 00:09:46,940
of thinking about what a model is, but also
algorithms and perhaps also networking,

124
125
00:09:46,940 --> 00:09:51,540
things that are beneath the level of the user interface.

125
126
00:09:51,540 --> 00:09:54,160
I like to think of all of that as the Model.

126
127
00:09:54,160 --> 00:09:59,920
View is all about display event capture,
not event processing, but event capture--

127
128
00:09:59,920 --> 00:10:05,170
I'll return to that again later-- and also
visual appeal, making your application beautiful,

128
129
00:10:05,170 --> 00:10:08,640
so that people love to look at it, love to use it,

129
130
00:10:08,640 --> 00:10:12,410
and they'll tell their friends, and
they'll go download it, as well.

130
131
00:10:12,410 --> 00:10:17,610
So, that's what the View is really, primarily,
focused on doing, and then the Controller is, again,

131
132
00:10:17,610 --> 00:10:21,740
all about coordination, things like delegation and odd jobs.

132
133
00:10:21,740 --> 00:10:26,410
So, let's look at a bit of an example,
at sort of a concrete example

133
134
00:10:26,410 --> 00:10:29,530
of how these things might actually fit into a real program.

134
135
00:10:29,530 --> 00:10:34,840
Let's just say that I want to make a
codebreaking machine, take some ciphers in

135
136
00:10:34,840 --> 00:10:36,800
and try to figure out what the plaintext says.

136
137
00:10:36,800 --> 00:10:41,940
So, you might imagine that my model would
have features and functionality for dealing

137
138
00:10:41,940 --> 00:10:44,770
with ciphertext, with plaintext, and cryptography.

138
139
00:10:44,770 --> 00:10:51,300
And a lot of times, the custom work of your
application, the real app-specific stuff that's going

139
140
00:10:51,300 --> 00:10:56,450
to differentiate your app from other
applications, is focused in on the model.

140
141
00:10:56,450 --> 00:11:02,060
That's where a lot of your custom
wonderfulness is going to get added, right?

141
142
00:11:02,060 --> 00:11:07,000
Now, when you go to the view, you might, you know,
imagine that such an application might show you a bunch

142
143
00:11:07,000 --> 00:11:10,610
of ciphertexts in a view, might
give you progress indications,

143
144
00:11:10,610 --> 00:11:14,540
things like that, add and delete buttons, and what all.

144
145
00:11:14,540 --> 00:11:20,680
Now, in a lot of cases, you don't want to
necessarily focus a lot of your work here.

145
146
00:11:20,680 --> 00:11:27,110
Instead, what you want to do is lean on UIKit as
much as you can, particularly a program like this.

146
147
00:11:27,110 --> 00:11:34,890
You probably want to focus in more on that model,
on that crypto behavior and less on how things look.

147
148
00:11:34,890 --> 00:11:39,630
You probably want your application to
look standard, so people are familiar,

148
149
00:11:39,630 --> 00:11:41,700
by just looking at it, about how it might work.

149
150
00:11:41,700 --> 00:11:49,600
So, again, lean on UIKit as much as you
can for common view-related behaviors.

150
151
00:11:49,600 --> 00:11:55,950
And in your controller, well, your controller does, again,
several different jobs, thinks like startup and shutdown,

151
152
00:11:55,950 --> 00:12:00,630
if it's an iPhone application, managing the
navigation from one screen to the next, and,

152
153
00:12:00,630 --> 00:12:03,890
as we've already talked about,
mediating between models and views.

153
154
00:12:03,890 --> 00:12:12,710
And so your job here is to match the right controllers to
the right job, and I'll talk about that some more later.

154
155
00:12:12,710 --> 00:12:19,000
Okay. So, trying to think about your application, use
Model-View-Controller to think about your application,

155
156
00:12:19,000 --> 00:12:27,860
divide out the pieces, so that you can
just manage the big idea that you have.

156
157
00:12:27,860 --> 00:12:33,500
Okay. So, use MVC to divide your
work, to implement that big idea.

157
158
00:12:35,390 --> 00:12:39,220
Okay. #3, Don't Fight the Framework.

158
159
00:12:39,220 --> 00:12:41,870
So, color inside the lines.

159
160
00:12:41,870 --> 00:12:47,600
I was always bad at coloring inside the
lines, as a kid, even when I wanted to.

160
161
00:12:47,600 --> 00:12:51,460
But the idea is, you know, to make
the framework work for you.

161
162
00:12:51,460 --> 00:12:58,650
So much time and effort has gone into making these
frameworks, hopefully, easy to use and feature rich.

162
163
00:12:58,650 --> 00:13:01,390
So, really try to make that framework work for you.

163
164
00:13:01,390 --> 00:13:01,940
Leverage it.

164
165
00:13:01,940 --> 00:13:06,530
And so let's kind of start with the don'ts first, okay?

165
166
00:13:06,530 --> 00:13:07,970
Don't fight the framework.

166
167
00:13:07,970 --> 00:13:09,710
Don't misuse framework classes.

167
168
00:13:09,710 --> 00:13:13,250
Now, one of the most common patterns that you'll see

168
169
00:13:13,250 --> 00:13:18,430
in iPhone development is the use of
UIViewControllers to manage a screen.

169
170
00:13:18,430 --> 00:13:24,240
Well, that UIViewController manages
a view, so don't take that view out.

170
171
00:13:24,240 --> 00:13:28,190
Stick it someplace else in your application and
just sort of forget about the UIViewController.

171
172
00:13:28,190 --> 00:13:30,370
That's not the way that it's intended to be used.

172
173
00:13:30,370 --> 00:13:31,190
Keep these.

173
174
00:13:31,190 --> 00:13:36,040
Let the UIViewController help you
manage the lifecycle of that view.

174
175
00:13:36,040 --> 00:13:39,490
Right? Don't decouple these and
just use one and forget the other.

175
176
00:13:39,490 --> 00:13:41,600
Right? Don't misuse the framework classes.

176
177
00:13:41,600 --> 00:13:47,320
Try to learn how they can help you, and then let them.

177
178
00:13:47,320 --> 00:13:50,360
Right? Don't re-implement framework classes.

178
179
00:13:50,360 --> 00:13:54,760
If you need a split view, use UISplitViewController.

179
180
00:13:54,760 --> 00:13:57,830
If you need a scroll view, use UIScrollView.

180
181
00:13:57,830 --> 00:14:01,840
Some of these classes can be really,
really tricky to implement,

181
182
00:14:01,840 --> 00:14:04,050
and you don't want to be spending your time doing that.

182
183
00:14:04,050 --> 00:14:09,820
You should really be spending your time making your
application differentiated from everybody else's out there.

183
184
00:14:09,820 --> 00:14:10,520
Make it wonderful.

184
185
00:14:10,520 --> 00:14:15,340
Don't spend time doing work that we've already done.

185
186
00:14:15,340 --> 00:14:19,250
And this can sometimes be difficult when
you go and you download an application,

186
187
00:14:19,250 --> 00:14:24,940
and you see a feature that you like, and you're
not necessarily sure how it was implemented.

187
188
00:14:24,940 --> 00:14:31,600
If you find yourself spending a whole lot of time
implementing what seems like a core piece of user interface,

188
189
00:14:31,600 --> 00:14:39,300
a core widget, step back and ask yourself, "Boy, is there
some way that I can lean on UIKit to get this functionality

189
190
00:14:39,300 --> 00:14:42,570
without doing the work to make it happen?"

190
191
00:14:42,570 --> 00:14:48,330
So, don't re-implement framework classes,
and don't make trivial UIKit classes.

191
192
00:14:48,330 --> 00:14:53,390
Use delegates and notifications to try to
learn how you can couple up a piece, you know,

192
193
00:14:53,390 --> 00:14:58,810
to match up a piece of your custom
code to the classes already in UIKit.

193
194
00:14:58,810 --> 00:15:04,780
Yes, there are times when you need to
subclass a UIKit class to override a method,

194
195
00:15:04,780 --> 00:15:11,450
but be careful that you don't cut off the core
functionality by perhaps not calling super and just sort

195
196
00:15:11,450 --> 00:15:19,730
of taking the work onto yourself to really
make the class work, as it was intended.

196
197
00:15:19,730 --> 00:15:26,600
And so don't just, again, subclass to make
a trivial subclass, when you can avoid it.

197
198
00:15:26,600 --> 00:15:29,940
Okay. Again, the idea is to make the framework work for you.

198
199
00:15:29,940 --> 00:15:32,190
So, what are some positive examples of that?

199
200
00:15:32,190 --> 00:15:35,750
So, going back to this codebreaker
example, if you've got a model,

200
201
00:15:35,750 --> 00:15:39,020
and you need to deal with pieces
of text, well, use NSString.

201
202
00:15:39,020 --> 00:15:44,360
Right? That's what it's there-- I mean, it's
a completely full-featured string class.

202
203
00:15:44,360 --> 00:15:45,690
Don't re-implement your own.

203
204
00:15:45,690 --> 00:15:50,880
Don't try to go out and make some kind of special
implementation, because you think you need one.

204
205
00:15:50,880 --> 00:15:52,820
You probably don't.

205
206
00:15:52,820 --> 00:15:55,470
In terms of crypto, don't invent your own crypto!

206
207
00:15:55,470 --> 00:15:57,630
Right? Use the Security framework.

207
208
00:15:57,630 --> 00:16:03,520
Learn what the framework, learn what the
whole OS and the set of APIs give you, again,

208
209
00:16:03,520 --> 00:16:10,110
so that you're not spending a lot of time implementing
complicated functionality that already exists.

209
210
00:16:10,110 --> 00:16:17,620
In terms of the view, I mean, again, you can imagine
use table views to show lists, and use UIViewController,

210
211
00:16:17,620 --> 00:16:20,290
as the documentation suggests that you should.

211
212
00:16:20,290 --> 00:16:21,430
Again, don't re-implement.

212
213
00:16:21,430 --> 00:16:22,780
Don't make custom buttons.

213
214
00:16:22,780 --> 00:16:28,500
Try to use what the framework gives
you to do those common interface jobs.

214
215
00:16:28,500 --> 00:16:33,280
And in terms of controllers, for startup and shutdown,

215
216
00:16:33,280 --> 00:16:36,610
we kind of have this AppController
design pattern, you might say.

216
217
00:16:36,610 --> 00:16:41,030
I'll talk about that a little bit more later, in
terms of starting up and shutting down your app.

217
218
00:16:41,030 --> 00:16:44,760
Again, for navigations and transitions,
use NavigationController.

218
219
00:16:44,760 --> 00:16:51,450
And for mediating between a model and view, really try to
figure out how you can hook your custom controller behavior

219
220
00:16:51,450 --> 00:16:56,950
in at the right place, calling the right delegate
methods to really mediate between models and views.

220
221
00:16:56,950 --> 00:17:01,620
And, again, later, I'll talk about that a little bit more.

221
222
00:17:01,620 --> 00:17:03,730
Okay, so don't fight the framework.

222
223
00:17:03,730 --> 00:17:06,130
Really lean on it.

223
224
00:17:06,130 --> 00:17:13,170
Be aware, when you feel yourself starting to invest
a lot of time in a place that isn't really specific

224
225
00:17:13,170 --> 00:17:16,320
about what makes your application special.

225
226
00:17:16,320 --> 00:17:22,610
So, Don't Abuse Views, #4.

226
227
00:17:22,610 --> 00:17:26,230
Views don't own data.

227
228
00:17:26,230 --> 00:17:29,000
Views are about data display and event capture.

228
229
00:17:29,000 --> 00:17:34,070
So, this is the time in the talk that, if you're just
a little bit early, maybe you were out, you know,

229
230
00:17:34,070 --> 00:17:36,180
late last night, and your buddy's falling asleep.

230
231
00:17:36,180 --> 00:17:38,340
So, you know, give him an elbow.

231
232
00:17:38,340 --> 00:17:44,160
You know, wake him up, because if you remember one
thing about the talk, it's that views don't own data.

232
233
00:17:44,160 --> 00:17:51,560
I gave us the double Family Feud strikeout here, for those
of you who are old enough to remember what that might mean.

233
234
00:17:51,560 --> 00:17:54,380
I'm not going to be kissing anybody,
though, so don't worry about that.

234
235
00:17:54,380 --> 00:17:58,780
So, but, okay, so you say, okay, views don't own data.

235
236
00:17:58,780 --> 00:18:00,110
What do I mean by this?

236
237
00:18:00,110 --> 00:18:04,050
Well, what you might be thinking is that,
well, views display data, don't they?

237
238
00:18:04,050 --> 00:18:07,050
So, what is this point all about?

238
239
00:18:07,050 --> 00:18:12,110
Well, the point is that the views don't own the data.

239
240
00:18:12,110 --> 00:18:17,830
They're not the place that-- the views aren't the
objects that are really responsible, ultimately,

240
241
00:18:17,830 --> 00:18:20,140
for owning a piece of data in your system.

241
242
00:18:20,140 --> 00:18:23,690
And so here's the case against-- here's why not.

242
243
00:18:23,690 --> 00:18:26,240
So, I think it's a slippery slope.

243
244
00:18:26,240 --> 00:18:32,710
If you put views really in charge of owning a piece
of data, then you might be tempted to put a little bit

244
245
00:18:32,710 --> 00:18:36,960
of data change methods into that
view, and now you're really--

245
246
00:18:36,960 --> 00:18:40,160
now your view is also sort of acting
like a controller for that view.

246
247
00:18:40,160 --> 00:18:43,480
Maybe it's doing a little data
validation, and it's a slippery slope.

247
248
00:18:43,480 --> 00:18:47,050
I mean, you know, you'll wind up like a drunk on the street.

248
249
00:18:47,050 --> 00:18:48,170
You know, it's like, "Oh, poor guy.

249
250
00:18:48,170 --> 00:18:48,750
What happened to him?"

250
251
00:18:48,750 --> 00:18:53,740
"Well, he put data in his view, and
it was all downhill from there!"

251
252
00:18:53,740 --> 00:18:55,860
Right? [laughter] Okay.

252
253
00:18:55,860 --> 00:19:00,560
So, but, you know, the other thing that it does, one of
the things is it locks you into a view implementation.

253
254
00:19:00,560 --> 00:19:07,680
Sometimes, you might realize that the best way to take
your iPhone app, your iPhone and iPod touch app and move it

254
255
00:19:07,680 --> 00:19:12,530
to the iPad is to make a different
view that does a similar job.

255
256
00:19:12,530 --> 00:19:15,890
Well, what if you've got the data owned in this view?

256
257
00:19:15,890 --> 00:19:18,590
The iPad, do you make a copy of that data?

257
258
00:19:18,590 --> 00:19:20,960
How do you keep those copies in sync?

258
259
00:19:20,960 --> 00:19:27,860
It can really, really lock you in and force you to make
some difficult decisions that you don't want to make.

259
260
00:19:27,860 --> 00:19:33,530
So, keep that ownership of data out of the view,
because, again, it gives you this tight coupling

260
261
00:19:33,530 --> 00:19:36,290
between data and display, which you want to avoid.

261
262
00:19:36,290 --> 00:19:40,020
And, again, you want to have models and controllers really,

262
263
00:19:40,020 --> 00:19:43,500
really acting appropriately in
their roles in your applications.

263
264
00:19:43,500 --> 00:19:44,400
So, where do they fit in?

264
265
00:19:44,400 --> 00:19:51,400
Well, they don't fit in anywhere, if your
views are in charge of owning the data.

265
266
00:19:51,400 --> 00:19:56,930
Another great thing that you can do-- just,
you know, kind of giving some positive advice--

266
267
00:19:56,930 --> 00:20:03,520
if your views don't own the data, it becomes easier to
implement inspectors, which, of course, is now becoming,

267
268
00:20:03,520 --> 00:20:06,340
you know, common and really possible on the iPad.

268
269
00:20:06,340 --> 00:20:09,370
You'll see here that I've got a
piece of text selected and up.

269
270
00:20:09,370 --> 00:20:14,870
There's a Toolbar, which is telling me the style
of the text, and then there's also a popover view,

270
271
00:20:14,870 --> 00:20:18,210
an inspector showing me that same piece of information,

271
272
00:20:18,210 --> 00:20:22,270
the same piece of information three
different places in the application.

272
273
00:20:22,270 --> 00:20:26,060
This piece of information, this style
information is owned in a model object,

273
274
00:20:26,060 --> 00:20:32,110
and these views are just getting a little piece
of it to customize their display appropriately.

274
275
00:20:32,110 --> 00:20:36,510
And, again, you can vary the data
display much, much more easily,

275
276
00:20:36,510 --> 00:20:40,370
if you're just dealing with a common
reference of that data that lives elsewhere.

276
277
00:20:40,370 --> 00:20:44,270
You can also vary behavior when the state of a view changes.

277
278
00:20:44,270 --> 00:20:46,730
Okay, this really talks about this idea of event capture.

278
279
00:20:46,730 --> 00:20:53,370
When the state of your application changes,
your view captures the event in the same way,

279
280
00:20:53,370 --> 00:20:59,640
but then it might be passing off the processing of
those captured events to, say, like a GestureRecognizer

280
281
00:20:59,640 --> 00:21:03,710
to have different behavior when the
state of the view changes, in this case,

281
282
00:21:03,710 --> 00:21:09,360
from a read-only to an editing mode for a particular view.

282
283
00:21:09,360 --> 00:21:15,670
Event processing of the view doesn't change, but it's
just the way that the hooked-up GestureRecognizer changes

283
284
00:21:15,670 --> 00:21:17,840
when the state of the application changes.

284
285
00:21:17,840 --> 00:21:22,780
So, you can much more easily vary
behavior by just changing an object,

285
286
00:21:22,780 --> 00:21:27,900
and the view is none the wiser, and it promotes reusability.

286
287
00:21:27,900 --> 00:21:34,520
I mean, it would be sort of silly to have each one of
those text fields be some trivial, you know, subclass.

287
288
00:21:34,520 --> 00:21:37,420
Oh, I've got a first name text view, a last name text view.

288
289
00:21:37,420 --> 00:21:40,440
That's just not the way, really, to do it.

289
290
00:21:40,440 --> 00:21:47,270
So, it helps to promote reusability, if you
don't have this data hooked up in your view,

290
291
00:21:47,270 --> 00:21:49,320
when it comes time to maybe add another field.

291
292
00:21:49,320 --> 00:21:53,960
Because, you know, your marketing department or your
management says you need one, you don't need to then sort

292
293
00:21:53,960 --> 00:22:01,060
of loading up this view with all of these different pieces
of data that could possibly be represented in the view.

293
294
00:22:01,060 --> 00:22:05,790
Okay, so keeping the data out of your
view helps to promote reusability.

294
295
00:22:05,790 --> 00:22:09,020
Okay, so don't abuse views.

295
296
00:22:09,020 --> 00:22:15,150
It's really about data display and
event capture, not data ownership.

296
297
00:22:15,150 --> 00:22:21,300
So, #5, Plan for iPhone and iPad.

297
298
00:22:21,300 --> 00:22:31,090
So, this is about dividing your code out into modules,
and it's really taking kind of this MVC organization,

298
299
00:22:31,090 --> 00:22:34,230
MVC architecture and kind of kicking
it up to a higher level.

299
300
00:22:34,230 --> 00:22:36,220
I'll show you what I mean.

300
301
00:22:36,220 --> 00:22:39,870
Well, let's consider Mail on iPhone.

301
302
00:22:39,870 --> 00:22:44,780
Of course, this application shipped in
1.0, nice, full-featured Mail application.

302
303
00:22:44,780 --> 00:22:47,300
It's really, really, you know, great.

303
304
00:22:47,300 --> 00:22:51,780
Full-featured Mail application you carry around
with you all the time in your pocket, right?

304
305
00:22:51,780 --> 00:22:59,550
But what we realized pretty soon after we started developing
the system was that there would be other applications

305
306
00:22:59,550 --> 00:23:03,520
which we also wanted to be able to send mail.

306
307
00:23:03,520 --> 00:23:06,360
Notes and Photos are an example.

307
308
00:23:06,360 --> 00:23:14,040
So, each of them have a little button there, which
allows you to send the note or send the photo by email.

308
309
00:23:14,040 --> 00:23:14,800
So, how do we do this?

309
310
00:23:14,800 --> 00:23:20,020
Well, we factored out the common
pieces, and here's how we did it.

310
311
00:23:20,020 --> 00:23:23,910
We divided things up into three basic layers.

311
312
00:23:23,910 --> 00:23:30,750
Down at the bottom, we have a message framework, which is
all about things beneath the level of the user interface,

312
313
00:23:30,750 --> 00:23:37,320
beneath the UI, things about networking, and
protocols, and basic mail, objects like messages,

313
314
00:23:37,320 --> 00:23:40,740
and subjects, and "To:" and "From:," things like that.

314
315
00:23:40,740 --> 00:23:45,360
Okay? So, all the non-UI elements down at the bottom level.

315
316
00:23:45,360 --> 00:23:54,430
At the middle level, we have UI elements, things
like Compose, Views, and lists of messages,

316
317
00:23:54,430 --> 00:23:59,570
and controllers for mediating between
the views and the model objects.

317
318
00:23:59,570 --> 00:24:04,430
And then all the way up at the top, we've got
the Mail, full-featured Mail application itself.

318
319
00:24:04,430 --> 00:24:06,160
Now, so, I think you know where this is going.

319
320
00:24:06,160 --> 00:24:16,130
We could just then extend out those two bottom layers and
implement the Notes and the Photo application up at the top,

320
321
00:24:16,130 --> 00:24:22,260
right, just having the custom parts in that top
level, which are specific to those applications,

321
322
00:24:22,260 --> 00:24:29,100
sharing as much as we could at the bottom two levels.

322
323
00:24:29,100 --> 00:24:30,610
Along comes the iPad.

323
324
00:24:30,610 --> 00:24:32,730
So, what to do?

324
325
00:24:32,730 --> 00:24:38,570
Well, the decision was made to make great
new versions of these existing applications.

325
326
00:24:38,570 --> 00:24:47,590
They're really not re-implementations or sort of a
resizing of the versions that we have on the iPhone.

326
327
00:24:47,590 --> 00:24:55,450
We really rethought how these applications should
work and how they might work best, given the iPad

327
328
00:24:55,450 --> 00:24:59,110
and the iPad hardware, and the bigger screen.

328
329
00:24:59,110 --> 00:25:06,740
And so we also realized that there
were parts that we could really reuse.

329
330
00:25:06,740 --> 00:25:10,850
There were elements that we could pull out and reuse.

330
331
00:25:10,850 --> 00:25:17,670
This is, you know, a prime example of real world code
reuse, whereas, you know, you look at that Compose,

331
332
00:25:17,670 --> 00:25:21,570
and you can really see that it is
the same, only a little bit larger

332
333
00:25:21,570 --> 00:25:25,870
and shown in a popover, instead
of taking over the full screen.

333
334
00:25:25,870 --> 00:25:35,850
Okay. So, now, taking this iPhone architecture,
moving it to the iPad, well, what we did was this.

334
335
00:25:35,850 --> 00:25:37,970
All right, so I'll kind of do that again.

335
336
00:25:37,970 --> 00:25:39,030
So, we have the saints.

336
337
00:25:39,030 --> 00:25:41,990
Look at those two bottom layers.

337
338
00:25:41,990 --> 00:25:46,980
The bottom level, the message framework,
stays absolutely the same!

338
339
00:25:46,980 --> 00:25:50,730
It's not involved in anything that
would need to change for the iPad.

339
340
00:25:50,730 --> 00:25:53,270
Mail protocols don't change.

340
341
00:25:53,270 --> 00:25:58,760
Right? We still need mail messages, and
message bodies, and things like that.

341
342
00:25:58,760 --> 00:26:03,260
Stepping up to the second level, you'll see that,
yeah, there needed to be some iPad additions.

342
343
00:26:03,260 --> 00:26:08,020
We had a couple of new user interface elements,
a couple of different kinds of interactions.

343
344
00:26:08,020 --> 00:26:14,760
So, yeah, we did need to make some additions there
for the iPad, but most of it stayed the same.

344
345
00:26:14,760 --> 00:26:17,050
Again, like the Compose view is a great example of that.

345
346
00:26:17,050 --> 00:26:18,250
That didn't change.

346
347
00:26:18,250 --> 00:26:19,760
That class didn't need to change.

347
348
00:26:19,760 --> 00:26:23,210
It needed to be resized, but it didn't need to change.

348
349
00:26:23,210 --> 00:26:29,530
And then, of course, at the top, we re-implemented
full new versions of these applications for the iPad.

349
350
00:26:29,530 --> 00:26:33,280
And so, if you're thinking about doing this,
if you've got an iPhone application now,

350
351
00:26:33,280 --> 00:26:37,010
and you're trying to ask yourself,
"Well, how can I move this to the iPad?"

351
352
00:26:37,010 --> 00:26:43,200
or you're planning a new application, and you want to
target both of these form factors, iPhone and iPod touch

352
353
00:26:43,200 --> 00:26:49,110
and the iPad, this is a pretty good way to start
thinking about how you might structure your code.

353
354
00:26:49,110 --> 00:26:50,900
Again, this is real world advice.

354
355
00:26:50,900 --> 00:26:56,330
This is how we did it, and it took
some back and forth to really come

355
356
00:26:56,330 --> 00:27:02,530
up with this architecture, and it
really wound up working for us.

356
357
00:27:02,530 --> 00:27:04,890
So, now, you may be asking yourself, "Real world?

357
358
00:27:04,890 --> 00:27:06,630
I want to make a framework."

358
359
00:27:06,630 --> 00:27:09,370
Well, there are no third party frameworks.

359
360
00:27:09,370 --> 00:27:11,430
You can't make your own frameworks.

360
361
00:27:11,430 --> 00:27:19,660
Right? Well, there are still ways to sort of
implement this same model, this same concept,

361
362
00:27:19,660 --> 00:27:24,060
but you would just simply have to come up
with an implementation strategy that works--

362
363
00:27:24,060 --> 00:27:26,930
static libraries and some very simple code sharing.

363
364
00:27:26,930 --> 00:27:29,100
By code sharing, I don't really mean a copy.

364
365
00:27:29,100 --> 00:27:35,540
I mean, it's just really sort of an Xcode reference
to the same code file in two different targets.

365
366
00:27:35,540 --> 00:27:41,120
Okay? So, if that's total gibberish to you, I'll even just
say right now that I'm going be down in the lab session

366
367
00:27:41,120 --> 00:27:48,390
after this session ends, and we can talk about how
you might actually do this, if you're interested.

367
368
00:27:48,390 --> 00:27:57,880
Okay? All right, so, planning for iPhone and iPad, dividing
your code up and coming up with this higher-level design

368
369
00:27:57,880 --> 00:28:02,620
that will help you keep things parceled out in a good way.

369
370
00:28:02,620 --> 00:28:07,350
So, #6, Strive for Loose Coupling.

370
371
00:28:07,350 --> 00:28:15,050
And, again, this is all about keeping your code
flexible and minimizing mutual dependencies.

371
372
00:28:15,050 --> 00:28:19,240
In some way, you know, I'm kind of
standing up here now thinking about it.

372
373
00:28:19,240 --> 00:28:24,720
I mean, really, if I had to choose out what would be the
second most important thing, this really might be it.

373
374
00:28:24,720 --> 00:28:29,720
I'm constantly, constantly worried about
keeping the code flexible and easy to change.

374
375
00:28:29,720 --> 00:28:33,780
If I think of one thing I think about more
than anything else, when I'm writing code,

375
376
00:28:33,780 --> 00:28:39,550
it's how can I keep it flexible,
so that it remains easy to change?

376
377
00:28:39,550 --> 00:28:44,460
Okay, so now, what is this loose coupling all about?

377
378
00:28:44,460 --> 00:28:49,300
Okay, so if you look at this architecture, sort of
a little reimagining of the architecture diagram

378
379
00:28:49,300 --> 00:28:52,050
from before-- and, of course, this is in concept.

379
380
00:28:52,050 --> 00:28:56,680
Now, if we were to take, like, a real application,
and sketch out what all the pieces might look like,

380
381
00:28:56,680 --> 00:28:59,480
it would wind up looking somewhat more like this, right?

381
382
00:28:59,480 --> 00:29:01,820
It's pretty complicated, right?

382
383
00:29:01,820 --> 00:29:06,160
Now, just think about if you wanted to pick
out a box, pick out which box looks, you know,

383
384
00:29:06,160 --> 00:29:10,890
like the nicest one to you, and
think about changing that box.

384
385
00:29:10,890 --> 00:29:16,860
Every arrow that's going into or out of that box
might need to be looked at, if you're going to change

385
386
00:29:16,860 --> 00:29:20,600
that object to perhaps add a feature or fix a bug.

386
387
00:29:20,600 --> 00:29:21,820
There's lots of implications.

387
388
00:29:21,820 --> 00:29:27,400
The more arrows coming in and out of
the box, the more difficult that box,

388
389
00:29:27,400 --> 00:29:31,410
the object represented by that
box, is going to be to change.

389
390
00:29:31,410 --> 00:29:40,330
Okay, so here's some strategies for taming all
of those arrows, so, striving for loose coupling.

390
391
00:29:40,330 --> 00:29:42,760
First of all, don't skip layers.

391
392
00:29:42,760 --> 00:29:50,520
Use controllers to coordinate messages from models to views.

392
393
00:29:50,520 --> 00:29:56,420
Right? That's one way to tame things, one
way to keep things more manageable, again,

393
394
00:29:56,420 --> 00:29:59,620
using features like delegation, notifications, and so forth.

394
395
00:29:59,620 --> 00:30:03,360
Don't message directly from the
top level to the bottom level.

395
396
00:30:03,360 --> 00:30:05,670
Don't mix MVC roles in one object.

396
397
00:30:05,670 --> 00:30:09,050
Again, this is primarily about views don't own data.

397
398
00:30:09,050 --> 00:30:11,600
That's where you might be most sorely tempted to do it.

398
399
00:30:11,600 --> 00:30:14,400
Avoid gathering too much work in one place.

399
400
00:30:14,400 --> 00:30:20,450
I mean, in some ways, if you think about it, if the work
is inside of all one box, you wouldn't have any arrows!

400
401
00:30:20,450 --> 00:30:22,930
But that wouldn't be really a good idea either,

401
402
00:30:22,930 --> 00:30:27,110
because then changing that one object
becomes all that much more complicated.

402
403
00:30:27,110 --> 00:30:32,160
That's almost sort of like hidden complexity
that you would need to worry about.

403
404
00:30:32,160 --> 00:30:34,360
That doesn't show up on such a diagram.

404
405
00:30:34,360 --> 00:30:37,060
And, finally, you know, don't declare
model data in your view classes.

405
406
00:30:37,060 --> 00:30:40,190
I think, yeah, I think we've been over that, right?

406
407
00:30:40,190 --> 00:30:45,880
Okay. So, some strategies for taming this.

407
408
00:30:45,880 --> 00:30:47,630
Here's an idea I like to think about a lot.

408
409
00:30:47,630 --> 00:30:52,830
I mean, if we focus in just on sort of a piece of your
model that may need to communicate with another piece

409
410
00:30:52,830 --> 00:30:58,440
of your model, I like to avoid this bidirectional messaging.

410
411
00:30:58,440 --> 00:31:04,460
A lot of times, I try to think about
a model object as being the one sort

411
412
00:31:04,460 --> 00:31:07,760
of in charge of talking to another model object.

412
413
00:31:07,760 --> 00:31:10,660
So, this model object might push data over.

413
414
00:31:10,660 --> 00:31:17,660
It might call, this object might
call a set method on this one.

414
415
00:31:17,660 --> 00:31:21,080
And if data needs to get from this
object over to this object,

415
416
00:31:21,080 --> 00:31:26,540
I'll have this one call a get accessor and pull it over.

416
417
00:31:26,540 --> 00:31:31,300
Again, so now, if I want to change
this object, and put another one in,

417
418
00:31:31,300 --> 00:31:33,790
I sort of know where all the touch points are.

418
419
00:31:33,790 --> 00:31:37,470
I know that this object is going
to need to be the one to change.

419
420
00:31:37,470 --> 00:31:44,590
Right? If I want to then maybe change a different object,
I know that probably this one doesn't need to change,

420
421
00:31:44,590 --> 00:31:47,690
because it's just having methods called on it.

421
422
00:31:47,690 --> 00:31:50,230
I don't have to worry about it, if this one goes away.

422
423
00:31:50,230 --> 00:31:51,800
Does that make sense?

423
424
00:31:51,800 --> 00:31:54,690
I hope so.

424
425
00:31:54,690 --> 00:31:56,290
So, avoid bidirectional messaging.

425
426
00:31:56,290 --> 00:32:02,500
Something else you may need to
do is support multiple updates.

426
427
00:32:02,500 --> 00:32:10,170
Like, if you think back to that inspector example, right,
a single change to a piece of model data might need

427
428
00:32:10,170 --> 00:32:17,130
to be reflected in several places in the user interface,
and key-value observing (KVO) is a great way to do that.

428
429
00:32:17,130 --> 00:32:23,590
I could talk for a whole hour on KVO,
but, of course, there's not time for that.

429
430
00:32:23,590 --> 00:32:31,940
But, basically, what this does is it sort of breaks these
connections and makes a little transmitter and receiver.

430
431
00:32:31,940 --> 00:32:38,060
Again, so, now, this direct connection is
broken, and now you have a much looser coupling.

431
432
00:32:38,060 --> 00:32:43,240
Right? Where removing one won't
necessarily mean that you need to worry

432
433
00:32:43,240 --> 00:32:47,880
about that connection being fully broken for everybody.

433
434
00:32:47,880 --> 00:32:52,100
Next, look at view and controller.

434
435
00:32:52,100 --> 00:32:56,370
Lean on delegates and target-action,
as I've already talked about, right?

435
436
00:32:56,370 --> 00:33:01,960
A good example of this is that if you have a view
that's a control, you'll get a didChange method

436
437
00:33:01,960 --> 00:33:06,900
or perhaps a UIControlEventValueChanged notification.

437
438
00:33:06,900 --> 00:33:10,920
And, really, what that will help you to do-- I mean, this is
going to be kind of a small change to the slide, but that,

438
439
00:33:10,920 --> 00:33:17,350
really, that blue arrow from the view to
the controller really sort of goes away,

439
440
00:33:17,350 --> 00:33:21,750
because it really then becomes more sort of system managed.

440
441
00:33:21,750 --> 00:33:30,680
It's not a piece, not a kind of communication now that you
really need to worry about, kind of in a first class way;

441
442
00:33:30,680 --> 00:33:34,070
again, sort of lessening the burden that you have in trying

442
443
00:33:34,070 --> 00:33:39,270
to keep this entire message graph
managed and sort of in your head.

443
444
00:33:39,270 --> 00:33:51,630
Okay, and the last one in this little section is sort of
limiting the number of connections to and from controllers.

444
445
00:33:51,630 --> 00:33:58,570
Again, I'm urging you to use controllers to keep things
all managed, but you really kind of want to try, also,

445
446
00:33:58,570 --> 00:34:05,070
at the same time, to limit the number
of connections to a specific controller.

446
447
00:34:05,070 --> 00:34:09,660
And the big challenge here is to decompose
controller work into the right number of controllers

447
448
00:34:09,660 --> 00:34:14,530
and types of controllers, and I'll talk
to you about that a little bit later.

448
449
00:34:14,530 --> 00:34:20,190
So, now, if you employ some of these strategies
that I just talked about, you could take a graph,

449
450
00:34:20,190 --> 00:34:27,160
with all of these arrows flying around here, and make
it something like this, which is more manageable,

450
451
00:34:27,160 --> 00:34:32,560
easier to change, more flexible, more loosely coupled.

451
452
00:34:35,100 --> 00:34:37,940
So strive for loose coupling in your program.

452
453
00:34:37,940 --> 00:34:42,470
Lean on delegates, KVO, technologies like KVO.

453
454
00:34:42,470 --> 00:34:49,150
Avoid this bidirectional messaging, and try to limit
the number of mutual dependencies between objects.

454
455
00:34:49,150 --> 00:34:53,870
And so that's #6.

455
456
00:34:53,870 --> 00:34:56,270
#7, Choose the Right Data Model.

456
457
00:34:56,270 --> 00:35:06,590
And so the iPhone,OS, iOS, gives you many, many options,
and so your job is to really find the right fit.

457
458
00:35:06,590 --> 00:35:13,330
Find the right way to represent your data in your programs.

458
459
00:35:13,330 --> 00:35:18,090
And so I'll just give you a minute to read that over.

459
460
00:35:21,630 --> 00:35:25,140
That's a lot of text for a slide, isn't it?

460
461
00:35:25,140 --> 00:35:26,930
Okay, I mean, that's kind of important, right?

461
462
00:35:26,930 --> 00:35:33,250
I mean, if you're, certainly, if you're into the deep
data, but I mean, is it really sixth normal form?

462
463
00:35:33,250 --> 00:35:36,450
Really? I mean, is that something that
you're all going to be worried about?

463
464
00:35:36,450 --> 00:35:44,480
I mean, again, some part of the real world, you know, is
interested in modeling data and all of the theory behind it,

464
465
00:35:44,480 --> 00:35:52,410
but, really, mostly, I think, what you're going to be
worried about is taking your collection of objects,

465
466
00:35:52,410 --> 00:35:58,090
not really worrying about sixth normal form quite so much,
worrying, instead, about how you got this graph of objects

466
467
00:35:58,090 --> 00:36:04,390
at runtime, how you're going to get them saved out, and then
how you're going to get them back into your program later,

467
468
00:36:04,390 --> 00:36:10,980
if your user launches your program again,
or the device restarts, what have you.

468
469
00:36:10,980 --> 00:36:16,050
So, this is what you're really worried about, I think,
probably, in kind of the real world sort of way.

469
470
00:36:16,050 --> 00:36:20,930
So, let's talk about the different data model concerns,
the different things that you may need to think about,

470
471
00:36:20,930 --> 00:36:26,010
while you're trying to balance these
tradeoffs between the different kinds

471
472
00:36:26,010 --> 00:36:29,450
of the different choices that you
have for modeling your data.

472
473
00:36:29,450 --> 00:36:31,060
Well, there are lots of them!

473
474
00:36:31,060 --> 00:36:33,560
Things like, maybe, if are there modeling tools available?

474
475
00:36:33,560 --> 00:36:35,140
Am I going to be using SQL?

475
476
00:36:35,140 --> 00:36:40,110
Do I need transactions for complicated
model transformations?

476
477
00:36:40,110 --> 00:36:41,580
What about versioning?

477
478
00:36:41,580 --> 00:36:42,690
Maybe you already know.

478
479
00:36:42,690 --> 00:36:45,790
You're trying to maybe get an application
out there, a quick 1.0 version,

479
480
00:36:45,790 --> 00:36:49,420
but you already know what's going to be in the 2.0 version.

480
481
00:36:49,420 --> 00:36:52,960
So, think about how to transform that
data from one version to the next.

481
482
00:36:52,960 --> 00:36:56,410
Perhaps you're bringing a program
over from a different platform,

482
483
00:36:56,410 --> 00:37:01,260
so perhaps you might have a large
collection of legacy data already.

483
484
00:37:01,260 --> 00:37:06,360
And there's speed, and I/O, and
scaling, and all kinds of concerns.

484
485
00:37:06,360 --> 00:37:13,460
So, I'm going to try to help you, give you some
tips for sifting through the options that the APIs

485
486
00:37:13,460 --> 00:37:18,210
and the OS gives you to find the best choice for you.

486
487
00:37:18,210 --> 00:37:21,380
So, here are six different options.

487
488
00:37:21,380 --> 00:37:27,650
Property lists, archives, custom files,
using Server/Cloud, SQLite, and CoreData.

488
489
00:37:27,650 --> 00:37:34,280
These are all, depending on your situation, any one of
these or some combination might be the right choice.

489
490
00:37:34,280 --> 00:37:43,250
But I'll tell you what is not the right choice,
most times, is using defaults or preferences.

490
491
00:37:43,250 --> 00:37:45,520
It's almost always the wrong tool for the job.

491
492
00:37:45,520 --> 00:37:47,110
Well, when is it the right tool?

492
493
00:37:47,110 --> 00:37:54,950
Well, if you can think about it, say, look at the Settings
Panel test, if you've got a piece of data in your program

493
494
00:37:54,950 --> 00:38:04,240
that you think the best place to expose that piece of
data is in settings, if you have an advanced on/off,

494
495
00:38:04,240 --> 00:38:08,700
if you have some feature that might be
on or off, then probably user defaults

495
496
00:38:08,700 --> 00:38:11,570
and preferences is the right place for it.

496
497
00:38:11,570 --> 00:38:15,440
If you can't put that piece of data in
your settings panel, then user defaults

497
498
00:38:15,440 --> 00:38:20,800
and preferences is almost certainly the wrong choice.

498
499
00:38:20,800 --> 00:38:22,560
So, what are some of the right choices?

499
500
00:38:22,560 --> 00:38:24,080
Property lists.

500
501
00:38:24,080 --> 00:38:26,240
Property lists might be the right choice.

501
502
00:38:26,240 --> 00:38:35,060
One of their great virtues is that they're really,
really simple to use, particularly if you've got--

502
503
00:38:35,060 --> 00:38:42,960
if your data is expressed in strings, numbers,
arrays, dictionaries, the small number of core classes

503
504
00:38:42,960 --> 00:38:46,420
and data types that can be written
out directly to a property list.

504
505
00:38:46,420 --> 00:38:51,290
If this is what you have, then property
lists might be a great choice for you.

505
506
00:38:51,290 --> 00:38:56,680
I mean, just thinking, like, if you had a Twitter client,
for instance, sort of user name, you know, server,

506
507
00:38:56,680 --> 00:38:58,110
perhaps the people that you're following.

507
508
00:38:58,110 --> 00:39:04,770
Yeah, all of that data can be expressed pretty
directly using strings, numbers, arrays, dictionaries,

508
509
00:39:04,770 --> 00:39:09,440
so forth, and they're very, very simple to use.

509
510
00:39:09,440 --> 00:39:12,030
Archives are also very, very simple to use.

510
511
00:39:12,030 --> 00:39:17,400
Let's say you have a custom object,
and it's, maybe it's a collection.

511
512
00:39:17,400 --> 00:39:21,370
It's a composition of several different data types.

512
513
00:39:21,370 --> 00:39:24,170
Maybe some of them are custom.

513
514
00:39:24,170 --> 00:39:25,110
Some of them aren't.

514
515
00:39:25,110 --> 00:39:28,780
Perhaps it's your object is the head
of a more complicated object graph,

515
516
00:39:28,780 --> 00:39:31,270
and you just want to get that object written out to disc.

516
517
00:39:31,270 --> 00:39:32,820
Well, archives is a great way to do it.

517
518
00:39:32,820 --> 00:39:38,710
You implement these two methods, and you can
read that object out, and read it back in.

518
519
00:39:38,710 --> 00:39:44,660
One of the great advantages of using
archives is that it supports versioning.

519
520
00:39:44,660 --> 00:39:51,260
So, if you already know that you need to add a
feature later, you need to add a data element later,

520
521
00:39:51,260 --> 00:39:57,990
archives can help you support that and
have your data be sort of both forward

521
522
00:39:57,990 --> 00:40:02,640
and backwards compatible, and it
also supports transient data.

522
523
00:40:02,640 --> 00:40:10,170
So, if you have data in a particular object that doesn't
need to be saved out, you also have control over that.

523
524
00:40:10,170 --> 00:40:11,190
Custom files.

524
525
00:40:11,190 --> 00:40:16,930
Of course, writing applications for iOS,
you get a little slice of disc space

525
526
00:40:16,930 --> 00:40:22,210
where you can write your application
data, so you could just open up that file.

526
527
00:40:22,210 --> 00:40:27,340
And perhaps if you already have some legacy code
or data, again, if you're bringing an application

527
528
00:40:27,340 --> 00:40:31,520
over from another platform, you might have
already done most or all of this work.

528
529
00:40:31,520 --> 00:40:36,440
This is really probably-- custom files
are really almost best when that's true,

529
530
00:40:36,440 --> 00:40:40,060
when you're just going to be tapping
into work that you've already done.

530
531
00:40:40,060 --> 00:40:48,400
And so your job in bringing that code over to the iOS
is probably going to be building an NSObject-based graph

531
532
00:40:48,400 --> 00:40:57,400
out of those objects, which may, perhaps it might be
easier, if it's a Mac application that you're bringing over.

532
533
00:40:57,400 --> 00:41:04,000
But, if not, again, that's going to be your main
challenge there, building up that NSObject-based graph.

533
534
00:41:04,000 --> 00:41:07,750
So, you could also use the Server/Cloud.

534
535
00:41:07,750 --> 00:41:10,830
I think a really good example of this
is if you're implementing a game,

535
536
00:41:10,830 --> 00:41:13,930
and you've got a high score list that you want to save.

536
537
00:41:13,930 --> 00:41:22,300
A great example of using Server/Cloud--
we do give you some help to implement this

537
538
00:41:22,300 --> 00:41:26,390
with NSURL classes, other lower-level networking classes.

538
539
00:41:26,390 --> 00:41:27,750
Of course, the server is up to you.

539
540
00:41:27,750 --> 00:41:30,350
There's not going to be much we can do.

540
541
00:41:30,350 --> 00:41:37,310
Even if you come to the lab later, you can plead with me,
but I don't know how much we're going to be able to help,

541
542
00:41:37,310 --> 00:41:44,850
when it comes time to implement the
other side of this data model strategy.

542
543
00:41:44,850 --> 00:41:51,030
Okay, so, coming back onto the
platform fully, SQLite is a really,

543
544
00:41:51,030 --> 00:41:53,560
really great library that we've got available for you.

544
545
00:41:53,560 --> 00:41:57,810
And it's really great, if you're familiar
with SQL, you can just go in there

545
546
00:41:57,810 --> 00:42:01,160
and start using the features available in this engine.

546
547
00:42:01,160 --> 00:42:06,340
Your challenge almost certainly is going to be coming up
with a strategy for doing an object/relational mapping.

547
548
00:42:06,340 --> 00:42:09,240
Now, I'll have to admit, yes, my name
is Ken Kocienda, and I have a problem.

548
549
00:42:09,240 --> 00:42:14,090
I've implemented my own object/relational
mapping strategies.

549
550
00:42:14,090 --> 00:42:17,850
I've written languages to do it, and I've used-- right.

550
551
00:42:17,850 --> 00:42:19,010
I mean, I'm sorry.

551
552
00:42:19,010 --> 00:42:22,300
I mean, it's like the first step in the 12-step program.

552
553
00:42:22,300 --> 00:42:25,440
I don't know how many of you out there have done that, too.

553
554
00:42:25,440 --> 00:42:26,860
And this can be tricky.

554
555
00:42:26,860 --> 00:42:30,260
You can wind up spending a lot of time doing this.

555
556
00:42:30,260 --> 00:42:32,110
It can wind up working great.

556
557
00:42:32,110 --> 00:42:38,400
You can come up with custom caching
strategies, custom object fault strategies.

557
558
00:42:38,400 --> 00:42:45,260
You can do all sorts of really, really neat things, if you
invest the time and effort to write this mapping layer.

558
559
00:42:45,260 --> 00:42:47,920
Moving on to CoreData.

559
560
00:42:47,920 --> 00:42:59,240
CoreData is great, because it gives you this wealth of
features, and you can use SQLite as the backend data store

560
561
00:42:59,240 --> 00:43:08,470
for CoreData, and it really does solve this problem
of making an object/relational mapping strategy.

561
562
00:43:08,470 --> 00:43:10,560
The work is already done for you.

562
563
00:43:10,560 --> 00:43:17,770
Now, the thing about using CoreData is it's going to take a
little bit of investment to learn how to use it and to find

563
564
00:43:17,770 --> 00:43:20,200
out about all the great features that there are.

564
565
00:43:20,200 --> 00:43:27,780
But even so, I strongly consider that you invest this
time, particularly, perhaps, if you're already familiar

565
566
00:43:27,780 --> 00:43:32,850
with the platform and, perhaps, you're looking for a
way to maybe bring, you know, take your next application

566
567
00:43:32,850 --> 00:43:38,990
to the next level, or you already know that your
next application is going to be using a lot of data.

567
568
00:43:38,990 --> 00:43:43,170
I really, really strongly urge you to consider CoreData.

568
569
00:43:43,170 --> 00:43:46,490
So, why? What are some of these features?

569
570
00:43:46,490 --> 00:43:49,850
There's modeling tools and very,
very simple saving/restoring.

570
571
00:43:49,850 --> 00:43:55,900
You could query to get portions of
your object graph returned to you.

571
572
00:43:55,900 --> 00:43:59,540
There's support for undo, which is
really, really terrific to support.

572
573
00:43:59,540 --> 00:44:04,330
Again, for the partial object graphs,
reading in a portion of an object.

573
574
00:44:04,330 --> 00:44:07,440
Perhaps you had a blob object that refers to a large image.

574
575
00:44:07,440 --> 00:44:08,870
You want to show a list of images.

575
576
00:44:08,870 --> 00:44:12,350
Well, you don't need to read in all
of the large data for the image.

576
577
00:44:12,350 --> 00:44:23,150
You can just read in the image, metadata and only fault
in the large image, when it comes time to display it.

577
578
00:44:23,150 --> 00:44:31,210
So, there's many, many wonderful features
available in CoreData, if you learn how to use them.

578
579
00:44:31,210 --> 00:44:37,540
So, again, I hope that gave you some
idea about the choices available.

579
580
00:44:37,540 --> 00:44:43,800
And, again, if you have more questions, based on this, I'll
be in the lab afterward to answer any questions you may have

580
581
00:44:43,800 --> 00:44:48,390
about choosing the right data model and all of the options.

581
582
00:44:48,390 --> 00:44:55,870
Okay, so, #8, Decompose Controller Work.

582
583
00:44:55,870 --> 00:45:02,090
This is all about coming up with the right number of
controllers for your system and learning something

583
584
00:45:02,090 --> 00:45:07,520
about the special iPhone OS or iOS-- again,
old habits die hard-- iOS controllers.

584
585
00:45:07,520 --> 00:45:09,950
So, again, going back to this graphic.

585
586
00:45:09,950 --> 00:45:11,630
But now look at what's happening.

586
587
00:45:11,630 --> 00:45:22,700
So, now this really ties into that typical iPhone type
navigation from one screen to the next and then back again.

587
588
00:45:22,700 --> 00:45:29,270
Now, a lot of times, I mean, the easiest way to
implement that is having one UIViewController per screen.

588
589
00:45:29,270 --> 00:45:35,690
You have kind of like this little sandwich with a view
on the top that's being managed by a UIViewController,

589
590
00:45:35,690 --> 00:45:39,330
and then the model data to support the
data that's being shown in that view,

590
591
00:45:39,330 --> 00:45:41,290
and that you have one of those per screen.

591
592
00:45:41,290 --> 00:45:48,690
Now, if you think about taking that over to the iPad,
you might be tempted to make just one controller,

592
593
00:45:48,690 --> 00:45:53,180
because now all those views can
fit on the screen at the same time!

593
594
00:45:53,180 --> 00:45:56,780
And I think you know where I'm going with this.

594
595
00:45:56,780 --> 00:45:57,860
Don't do that!

595
596
00:45:57,860 --> 00:46:02,480
Avoid making an everything controller!

596
597
00:46:02,480 --> 00:46:04,320
Right? You know, super.

597
598
00:46:04,320 --> 00:46:06,360
You know it's like when you start thinking of a name.

598
599
00:46:06,360 --> 00:46:07,210
What am I going to call this?

599
600
00:46:07,210 --> 00:46:09,690
A super king daddy everything controller!

600
601
00:46:09,690 --> 00:46:10,930
No. [laughter] Right?

601
602
00:46:10,930 --> 00:46:12,520
That's a bad, bad idea.

602
603
00:46:12,520 --> 00:46:14,140
That's a sign.

603
604
00:46:14,140 --> 00:46:21,140
Right? When you can't think of a name for the thing,
and it starts getting into this manager, super manager,

604
605
00:46:21,140 --> 00:46:28,580
that's a sign that you're coupling things too tightly,
gathering too much functionality into one place.

605
606
00:46:28,580 --> 00:46:30,660
So, let's look at a concrete example.

606
607
00:46:30,660 --> 00:46:33,900
There's a real world implication
of what that might be to kind

607
608
00:46:33,900 --> 00:46:36,520
of start gathering all of this
work into a single controller.

608
609
00:46:36,520 --> 00:46:40,870
So, let's see, we've got these two views, and
they're both pointing to the same controller.

609
610
00:46:40,870 --> 00:46:46,520
So, now I'm going to change the views
to actually specific view types.

610
611
00:46:46,520 --> 00:46:50,060
One of them is the scroll view,
and one of them is a table view.

611
612
00:46:50,060 --> 00:46:52,520
Now, table view is a scroll view.

612
613
00:46:52,520 --> 00:47:00,910
Table view is a subclass of scroll view, so now,
if you had a scrollViewDidScroll method implemented

613
614
00:47:00,910 --> 00:47:07,450
in this one controller, you would probably
need to write a line of code like this.

614
615
00:47:07,450 --> 00:47:08,430
Okay, well, all right.

615
616
00:47:08,430 --> 00:47:13,480
So, if the scroll view is the table view, then I need
to do the table stuff, and if it's the scroll view,

616
617
00:47:13,480 --> 00:47:15,840
then I need to do the scroll stuff, scroll view stuff.

617
618
00:47:15,840 --> 00:47:19,240
Basically, I mean, I almost think that
we should, like, have a certain, like,

618
619
00:47:19,240 --> 00:47:22,690
a special feature of the OS, maybe a new Xcode feature.

619
620
00:47:22,690 --> 00:47:24,530
There's all these wonderful new features in Xcode.

620
621
00:47:24,530 --> 00:47:26,380
Maybe I'll write about for the next version.

621
622
00:47:26,380 --> 00:47:32,080
It's like when you type this kind of question, there'd be
like a little shock coming back from the keyboard, right?

622
623
00:47:32,080 --> 00:47:36,100
[laughter] This kind of class is
almost never the right choice, right?

623
624
00:47:36,100 --> 00:47:40,140
It should probably complete autocomplete
in red or something like that.

624
625
00:47:40,140 --> 00:47:41,200
I don't know.

625
626
00:47:41,200 --> 00:47:45,850
So, when you do this, don't have
class checks in your delegate methods.

626
627
00:47:45,850 --> 00:47:51,990
Another variation of this is that if you have two table
views, you might actually be checking the identity

627
628
00:47:51,990 --> 00:47:57,020
of the view that was passed in, while if
it's the foo view, do the, table view,

628
629
00:47:57,020 --> 00:47:59,470
do this; if it's the bar table view, do that.

629
630
00:47:59,470 --> 00:48:04,910
Again, that's perhaps too tight of a coupling.

630
631
00:48:04,910 --> 00:48:09,960
You might want to make two different
controllers, one per table view.

631
632
00:48:09,960 --> 00:48:14,910
And absolutely avoid class checks in your delegate methods.

632
633
00:48:14,910 --> 00:48:19,910
Obviously, if you were to add another table view,
this would probably fail, and you'd need another layer

633
634
00:48:19,910 --> 00:48:22,630
of "if" statements inside of that first block.

634
635
00:48:22,630 --> 00:48:26,890
Again, that's almost never the
right way to structure your code.

635
636
00:48:26,890 --> 00:48:31,020
Keep your work parceled out, again, like this, even on iPad,

636
637
00:48:31,020 --> 00:48:37,780
even if there's enough room on the
screen to fit all of your views.

637
638
00:48:37,780 --> 00:48:43,360
But now there's controllers play other roles in the system.

638
639
00:48:43,360 --> 00:48:47,900
I mean, kind of to show you, going back to this, I'm
talking a whole lot about how the controller sits

639
640
00:48:47,900 --> 00:48:52,700
between a view and a model and the relationships there.

640
641
00:48:52,700 --> 00:48:55,680
But, again, these controllers,
they also play different roles.

641
642
00:48:55,680 --> 00:48:56,510
So let's take a look here.

642
643
00:48:56,510 --> 00:48:58,490
This is my coolest slide, so watch this one.

643
644
00:48:58,490 --> 00:49:00,440
Isn't that cool?

644
645
00:49:00,440 --> 00:49:03,220
I want to do that again, because I like it.

645
646
00:49:03,220 --> 00:49:05,360
So, here's how you've got the application controller.

646
647
00:49:05,360 --> 00:49:11,480
So now focusing in, seriously, what's going on
here is if you create a new project in Xcode,

647
648
00:49:11,480 --> 00:49:21,710
and if you use one of the custom templates-- excuse me--
one of the default templates for an iPhone or iPad project,

648
649
00:49:21,710 --> 00:49:25,740
you're going to get, as part of
the template, one of these objects.

649
650
00:49:25,740 --> 00:49:33,790
The name of this project is Bugspray, so I get a
BugsprayAppDelegate class given to me by the template.

650
651
00:49:33,790 --> 00:49:35,780
And so this is the application controller.

651
652
00:49:35,780 --> 00:49:38,530
And so what is the job of this object?

652
653
00:49:38,530 --> 00:49:46,110
Well, it's the delegate of the UIApplication, because,
most likely, you don't need a subclass of UIApplication.

653
654
00:49:46,110 --> 00:49:54,070
You can tie into the delegate methods that UIApplication
will call on its delegate to do important work,

654
655
00:49:54,070 --> 00:49:56,700
like starting up and shutting down your application.

655
656
00:49:56,700 --> 00:50:03,190
You might also think about it as the app controller
is the root object in your entire object graph.

656
657
00:50:03,190 --> 00:50:10,250
If you were to follow the parent link, starting from
any object in your system and follow who's the parent,

657
658
00:50:10,250 --> 00:50:15,220
who's the parent, who's the parent, who's the
parent, most likely, you're going to get back

658
659
00:50:15,220 --> 00:50:19,790
to the application controller as
the root object in your system.

659
660
00:50:19,790 --> 00:50:26,720
And so its job is to basically get things kicked off
and to turn over control to the appropriate controller,

660
661
00:50:26,720 --> 00:50:31,560
perhaps like if you have a view on your iPhone
application, it's probably going to turn over control

661
662
00:50:31,560 --> 00:50:40,320
to a navigation controller and a UIViewController, something
like that, that's a very common pattern, very typical.

662
663
00:50:40,320 --> 00:50:44,800
So, again, this application controller
has this special role in your system.

663
664
00:50:44,800 --> 00:50:52,830
It's not really hooked up in a one-to-one way
to a single model and a single view, although,

664
665
00:50:52,830 --> 00:50:59,680
now here's one thing that it sort of might be hooked
up to through an object like NSManagedObjectContext.

665
666
00:50:59,680 --> 00:51:06,050
If you do decide to use CoreData, if you follow
my advice, if you already are using CoreData,

666
667
00:51:06,050 --> 00:51:14,430
you're familiar with this object, NSManagedObjectContext,
and it's responsible for saving objects out to storage

667
668
00:51:14,430 --> 00:51:18,760
to write fetches, to retrieve objects, and
create and delete objects, and so forth.

668
669
00:51:18,760 --> 00:51:23,790
And so, again, it's a controller
that really just manages a model.

669
670
00:51:23,790 --> 00:51:26,310
It doesn't have a connection to a view.

670
671
00:51:26,310 --> 00:51:32,330
I'll have to make a little digression here.

671
672
00:51:32,330 --> 00:51:34,620
I noticed there's a typo in the slide.

672
673
00:51:34,620 --> 00:51:39,510
The joke is that this a model for a nuclear
power plant, and I misspelled electricity.

673
674
00:51:39,510 --> 00:51:41,640
I hope that light doesn't cause a
meltdown or something like that.

674
675
00:51:41,640 --> 00:51:43,980
I tell you, I hope not.

675
676
00:51:46,000 --> 00:51:49,410
Probably want to keep me as far
away from nuclear power as possible.

676
677
00:51:49,410 --> 00:51:52,200
Okay. So, #8, Decompose Controller Work.

677
678
00:51:52,200 --> 00:51:54,710
Again, this is about coming up with
the right number of controllers.--

678
679
00:51:54,710 --> 00:52:02,310
don't gather too much work into too few controllers--
and to learn about these special iPhone OS controllers

679
680
00:52:02,310 --> 00:52:06,070
to help you tap into specialized functionality.

680
681
00:52:06,070 --> 00:52:14,580
Okay, #9, Taking Charge-- Take Charge of Your Object Graph.

681
682
00:52:14,580 --> 00:52:15,250
This one's real simple.

682
683
00:52:15,250 --> 00:52:19,830
It's about ownership and lifecycle of your objects.

683
684
00:52:19,830 --> 00:52:26,240
And so what I do, when I write
applications, is I come up with a set of rules

684
685
00:52:26,240 --> 00:52:30,200
that seem appropriate for the app that I'm writing.

685
686
00:52:30,200 --> 00:52:31,900
I'll give you an example of what a rule might be.

686
687
00:52:31,900 --> 00:52:36,860
Well, if an object creates another,
if this object creates this object,

687
688
00:52:36,860 --> 00:52:40,880
well then it's this object's responsibility to release it.

688
689
00:52:40,880 --> 00:52:43,890
Very simple rule.

689
690
00:52:43,890 --> 00:52:47,850
Another rule is children don't outlive their parents.

690
691
00:52:47,850 --> 00:52:52,070
Sort of odd, if you were to match that up to the real
world, but inside programs, it makes perfect sense, right?

691
692
00:52:52,070 --> 00:52:55,850
So, this object creates this one.

692
693
00:52:55,850 --> 00:53:01,180
This object isn't going to go away,
while this one is still around, right?

693
694
00:53:01,180 --> 00:53:02,080
This object is the parent.

694
695
00:53:02,080 --> 00:53:04,570
This one is the child.

695
696
00:53:04,570 --> 00:53:08,140
Right? This one is going to have
to go away at the same time.

696
697
00:53:08,140 --> 00:53:10,170
Factory objects transfer ownership.

697
698
00:53:10,170 --> 00:53:15,480
Sometimes you might have an object which is
responsible for building or creating objects, perhaps,

698
699
00:53:15,480 --> 00:53:18,610
as a result of maybe some networking
that's gone on or whatever.

699
700
00:53:18,610 --> 00:53:25,600
But it's probably a good idea to transfer the
ownership of those objects to a different one,

700
701
00:53:25,600 --> 00:53:30,800
which in some ways is an exception to the first rule
that I just said, or actually the first two rules.

701
702
00:53:30,800 --> 00:53:33,660
But, again, that's another rule that I might make.

702
703
00:53:33,660 --> 00:53:37,720
But for those Perl programmers out there--
how many Perl programmers out there?

703
704
00:53:37,720 --> 00:53:41,740
So, this should just give you a little
warm feeling in your heart, right?

704
705
00:53:41,740 --> 00:53:42,520
TMTOWTDI, right?

705
706
00:53:42,520 --> 00:53:43,780
There's more than one way to do it.

706
707
00:53:43,780 --> 00:53:49,600
My set of rules for my application may not be
the same that you would use in your application.

707
708
00:53:49,600 --> 00:53:55,180
Again, it's sort of part of your job is to understand
what makes sense for the app that you're writing.

708
709
00:53:55,180 --> 00:54:00,740
And so here's kind of a closer
look at one of those sample rules.

709
710
00:54:00,740 --> 00:54:08,310
Again, this idea that the model might create a
controller, and then the model owns that controller.

710
711
00:54:08,310 --> 00:54:14,650
And so then, if it comes time for the model to go away,
well then they both need to go away at the same time.

711
712
00:54:14,650 --> 00:54:19,860
That controller is not going to be around,
perhaps, with dangling pointers back to the model.

712
713
00:54:19,860 --> 00:54:20,800
All right?

713
714
00:54:20,800 --> 00:54:25,160
If the model is to go away, right, everything goes away.

714
715
00:54:26,380 --> 00:54:29,140
So now expanding out that rule a little bit further.

715
716
00:54:29,140 --> 00:54:31,220
So model creates a controller.

716
717
00:54:31,220 --> 00:54:32,750
The controller might make the view.

717
718
00:54:32,750 --> 00:54:35,350
The view might have some subviews.

718
719
00:54:35,350 --> 00:54:41,240
Another rule that I might have is that models never
own views directly, except through controllers,

719
720
00:54:41,240 --> 00:54:44,010
and that views never own model or controllers.

720
721
00:54:44,010 --> 00:54:50,340
It's always that direction which is going from the
model to the view, that sort of ownership direction goes

721
722
00:54:50,340 --> 00:54:53,020
from one side to the other and never back.

722
723
00:54:53,020 --> 00:54:57,160
And, again, that might make sense for my application.

723
724
00:54:57,160 --> 00:55:04,410
So, now, here's a kind of an interesting
question for a little bit of detail.

724
725
00:55:04,410 --> 00:55:06,180
Delegates are unretained.

725
726
00:55:06,180 --> 00:55:10,300
I mean, if you go and, particularly, if you're new to
the platform, and you discover this, and you see this,

726
727
00:55:10,300 --> 00:55:12,170
you might say, "Well, isn't this a problem?"

727
728
00:55:12,170 --> 00:55:15,960
I mean, maybe I'm going to have crashes in my system,

728
729
00:55:15,960 --> 00:55:21,710
when these unretained pointers get
used after the objects go away.

729
730
00:55:21,710 --> 00:55:23,590
Well, here's the strategy for dealing with that.

730
731
00:55:23,590 --> 00:55:25,480
Here's why that's not a problem.

731
732
00:55:25,480 --> 00:55:28,480
Because the owner is in charge.

732
733
00:55:28,480 --> 00:55:30,760
The owner object is in charge.

733
734
00:55:30,760 --> 00:55:36,850
So, now, if we go back to this object, and we say
that the controller is the delegate for that view,

734
735
00:55:36,850 --> 00:55:45,720
if the controller says, "I'm your delegate," so now
the view, its delegate points back to the controller.

735
736
00:55:45,720 --> 00:55:46,780
It's unretained.

736
737
00:55:46,780 --> 00:55:47,400
What did you just do?

737
738
00:55:47,400 --> 00:55:50,120
Well, you just avoided making a reference cycle, right?

738
739
00:55:50,120 --> 00:55:57,230
And this is not a problem, because that view is
not going to live longer than the controller.

739
740
00:55:57,230 --> 00:56:03,240
The controller is going to be around for the lifetime of
that view, so there's never going to be an opportunity

740
741
00:56:03,240 --> 00:56:07,260
for the view to use that delegate
pointer after its gone stale.

741
742
00:56:07,260 --> 00:56:11,630
Right? It's not a problem.

742
743
00:56:11,630 --> 00:56:15,500
If you come up with these set of rules,
then think through their implications.

743
744
00:56:15,500 --> 00:56:19,480
So, what if you have Nibs?

744
745
00:56:19,480 --> 00:56:21,780
Again, the advice here is don't fight the framework.

745
746
00:56:21,780 --> 00:56:25,280
So, some rules might UIView controllers own their views.

746
747
00:56:25,280 --> 00:56:33,980
Split views own their master and
detail controller, view controllers.

747
748
00:56:33,980 --> 00:56:36,710
Views own their subviews.

748
749
00:56:36,710 --> 00:56:39,340
And UITextViews do not own their text.

749
750
00:56:39,340 --> 00:56:45,200
I know that UITextView has a property on
it, but that's not where the text lives.

750
751
00:56:45,200 --> 00:56:49,820
Make sure that that text lives in some model
object somewhere and that the text view,

751
752
00:56:49,820 --> 00:56:54,020
when it's holding onto that text, is just displaying it.

752
753
00:56:54,020 --> 00:56:58,100
So, a set of rules for taking charge of your object graph.

753
754
00:56:58,100 --> 00:57:01,450
Again, you might need to think about sort of custom ways,

754
755
00:57:01,450 --> 00:57:08,380
custom rules that make the most
sense for how your application works.

755
756
00:57:08,380 --> 00:57:12,240
#10, Coordinate State Changes.

756
757
00:57:12,240 --> 00:57:17,850
So, this is all about updating model after user
actions and updating views after models change.

757
758
00:57:17,850 --> 00:57:21,250
Again, sort of, kind of going back through
this diagram that I referred to before.

758
759
00:57:21,250 --> 00:57:30,270
Oops. So, going back to this diagram and focusing in on
those arrows, how those updates and changes-- wait a minute.

759
760
00:57:30,270 --> 00:57:31,350
There we go.

760
761
00:57:31,350 --> 00:57:32,960
Oh, it's just jumping straight to the next one.

761
762
00:57:32,960 --> 00:57:36,180
Okay, well, focusing in on those arrows.

762
763
00:57:36,180 --> 00:57:38,370
Well, of course, now the thing that you don't want

763
764
00:57:38,370 --> 00:57:42,700
to do is have those arrows go directly
between the model and the view.

764
765
00:57:42,700 --> 00:57:44,420
That's the wrong way.

765
766
00:57:44,420 --> 00:57:47,210
Do not cut out the controller.

766
767
00:57:47,210 --> 00:57:49,400
Well, why not?

767
768
00:57:49,400 --> 00:57:52,930
Well, because your controller might
actually do some important work there.

768
769
00:57:52,930 --> 00:57:54,130
A change might come in.

769
770
00:57:54,130 --> 00:58:00,400
A user might interact with a view and create
a change that would go into your controller.

770
771
00:58:00,400 --> 00:58:08,150
The controller might have some code, custom code to
reject, or delay, or validate a particular change.

771
772
00:58:08,150 --> 00:58:09,060
Here's an example.

772
773
00:58:09,060 --> 00:58:13,620
If you look at the Stocks application, that
text view, I just typed Apple in there.

773
774
00:58:13,620 --> 00:58:19,680
The text view has no knowledge about what's going to
happen next, that there's going to be some network access,

774
775
00:58:19,680 --> 00:58:25,860
that a table is going to be populated with a set of multiple
choices, and that the user is going to choose one of them.

775
776
00:58:25,860 --> 00:58:31,890
That's going to be the responsibility of the
controller to then turn around and take that change

776
777
00:58:31,890 --> 00:58:34,690
and commit it back to the model, as shown here.

777
778
00:58:34,690 --> 00:58:40,110
It's the controller's job to take that change
and then go and tell the model about it,

778
779
00:58:40,110 --> 00:58:42,130
that the user has actually made a choice.

779
780
00:58:42,130 --> 00:58:46,030
So, that's handling changes the right way.

780
781
00:58:46,030 --> 00:58:47,370
So, now, going the other way.

781
782
00:58:47,370 --> 00:58:51,720
Let's say that-- let's go a different way.

782
783
00:58:51,720 --> 00:58:56,140
This is all about, now, handling multiple changes.

783
784
00:58:56,140 --> 00:59:02,570
Individual data element change, is there now maybe more
than one aspect of the user interface needs to be updated?

784
785
00:59:02,570 --> 00:59:07,250
Again, KVO is a great way to actually make this work.

785
786
00:59:07,250 --> 00:59:12,560
And KVC, key-value coding and key-value observing.

786
787
00:59:12,560 --> 00:59:18,520
If you have more questions about this, we'll find
people who can give you some answers and some pointers.

787
788
00:59:18,520 --> 00:59:26,240
Basically, this is all about using strings, rather
than direct method calls to go and change your model,

788
789
00:59:26,240 --> 00:59:32,100
and you can imagine how those strings can be
varied at runtime programmatically, right?

789
790
00:59:32,100 --> 00:59:34,340
That's sort of the basis of this technology.

790
791
00:59:34,340 --> 00:59:39,960
But now, kind of showing a real
example, going back to this complex view.

791
792
00:59:39,960 --> 00:59:41,690
So, I've got this Body 2, everywhere.

792
793
00:59:41,690 --> 00:59:48,080
Let's go and say that I change this to
Heading 2, and now those other two places,

793
794
00:59:48,080 --> 00:59:51,900
after that change, need to be updated appropriately.

794
795
00:59:51,900 --> 00:59:55,560
Again, so this might start in the
inspector, flow into one controller.

795
796
00:59:55,560 --> 00:59:57,460
That controller is going to tell the model.

796
797
00:59:57,460 --> 01:00:02,820
It's going to then percolate these changes around, and
that controller at the top is actually going to know,

797
798
01:00:02,820 --> 01:00:06,820
once the model told it, that it's going to change, it's
like, "No, no, I'm the one who originated the change,

798
799
01:00:06,820 --> 01:00:12,590
so I'm not going to actually now start this infinite loop
of changes going all around," which can be a problem.

799
800
01:00:12,590 --> 01:00:16,060
I mean, look, I've had bugs like that in my programs, too.

800
801
01:00:17,180 --> 01:00:25,060
So, this is a way to sort of master that and prevent
this unintended set of consequences from happening.

801
802
01:00:25,060 --> 01:00:31,070
So, MVC is the way to go to manage that.

802
803
01:00:31,070 --> 01:00:36,040
So, coordinate state changes, updating
things as changes occur.

803
804
01:00:36,040 --> 01:00:37,230
And so there we go.

804
805
01:00:37,230 --> 01:00:39,580
There are the 10 best tips ever.

805
806
01:00:39,580 --> 01:00:46,780
And so going over them again, learn MVC, use it to divide
your work, don't fight the framework, don't abuse views--

806
807
01:00:46,780 --> 01:00:56,280
I'll know, right-- and plan for iPhone and iPad,
loose coupling, choosing the right data model,

807
808
01:00:56,280 --> 01:00:59,150
controllers and object graphs, and state changes.

808
809
01:00:59,150 --> 01:01:05,910
And it's all about keeping your code flexible and easy
to change, because we want you to make great apps.

809
810
01:01:07,350 --> 01:01:10,790
So, here, there's a whole set of related sessions.

810
811
01:01:10,790 --> 01:01:15,650
Fortunately, only two of them would
require you to time travel at this point.

811
812
01:01:15,650 --> 01:01:23,840
So, which is nice, a couple of nice sessions on
CoreData and understanding Foundation later today.

812
813
01:01:23,840 --> 01:01:28,700
And this session will actually be repeated.

813
814
01:01:28,700 --> 01:01:33,630
If you liked it, or you want to tell your friends
about it, I'm going to be doing the same show again.

814
815
01:01:33,630 --> 01:01:40,870
My devil twin will be on hand to give the repeat
performance tomorrow at 2:00 p.m. in this room.

815
816
01:01:40,870 --> 01:01:41,080
That's all.

816
817
01:01:41,080 --> 01:01:41,750
Thank you all for coming.

817
818
01:01:41,750 --> 01:01:52,980
[applause]

818
