1
00:00:06,290 --> 00:00:07,380
>> Madhuwanti Vaidya: Hello and welcome everybody.

1
2
00:00:07,380 --> 00:00:11,200
And we're here to help you understand
crash reports on the iPhone OS.

2
3
00:00:11,200 --> 00:00:17,700
As a short introduction, we welcome the iPhone Data
Analysis team, and we're are responsible to collect,

3
4
00:00:17,700 --> 00:00:19,900
process, and analyze customer crash logs.

4
5
00:00:19,900 --> 00:00:25,780
So when a customer is using your device--
using our device, and they see a crash,

5
6
00:00:25,780 --> 00:00:29,170
and then they agree to send this
diagnostic information to Apple,

6
7
00:00:29,170 --> 00:00:32,200
we are responsible for collection
the crash logs and analyzing them.

7
8
00:00:32,200 --> 00:00:38,780
And in this process, we've learned a lot about crash
logs, and we want to share this information with you.

8
9
00:00:38,780 --> 00:00:45,870
Let me begin by saying that nobody or
no customer likes an app that crashes.

9
10
00:00:45,870 --> 00:00:48,810
Let's look at some customer reviews on the iTunes Store.

10
11
00:00:48,810 --> 00:00:56,530
Here's one that says that this app would have been 4
or 5 stars, but it's not because it's very unstable.

11
12
00:00:56,530 --> 00:01:02,630
Here's another one that says this is the only
application which is unstable on the iPhone.

12
13
00:01:02,630 --> 00:01:07,990
Here's one that says keep your buggy garbage.

13
14
00:01:07,990 --> 00:01:20,740
Here's another one, and another one, another one,
and another one that says the app will not launch.

14
15
00:01:20,740 --> 00:01:26,810
So you, as app developers, will dread to see such
kind of reviews for your application on the store,

15
16
00:01:26,810 --> 00:01:33,220
because we know that one bad review leads to another bad
review which leads to lower sales for your application.

16
17
00:01:33,220 --> 00:01:37,840
So more customer-- more crashes leads to
bad customer reviews lead to lower sales.

17
18
00:01:37,840 --> 00:01:43,150
And we're to help to help you kind of avoid
these situations, so they look more like this.

18
19
00:01:43,150 --> 00:01:47,790
Which is fewer crashers, better customer
reviews, and higher sales for your application.

19
20
00:01:47,790 --> 00:01:53,750
As a short outline of what I'm going
to be talking about today, first,

20
21
00:01:53,750 --> 00:01:57,920
I'll tell you about what crash
reports are and how they look.

21
22
00:01:57,920 --> 00:02:02,600
Then I'll talk about the different types
of crash reports we see on the iPhone OS.

22
23
00:02:02,600 --> 00:02:07,140
Then I'll tell you how to get this crash report
from your device, from your friends' devices

23
24
00:02:07,140 --> 00:02:10,190
and customer devices onto your host machines.

24
25
00:02:10,190 --> 00:02:19,100
Sorry. Next, I'll tell you about how to symbolicate these
crash reports so that you can understand them better.

25
26
00:02:19,100 --> 00:02:25,370
And finally, I'll talk about the common crashes that
we've see when we've analyzed customer crash logs.

26
27
00:02:26,970 --> 00:02:29,970
So what are crash reports?

27
28
00:02:29,970 --> 00:02:35,030
How many here have actually seen a crash report?

28
29
00:02:35,030 --> 00:02:36,880
Wow, that's a fair number of people.

29
30
00:02:36,880 --> 00:02:40,930
So I'm not the only one who writes code with bugs in it.

30
31
00:02:40,930 --> 00:02:41,960
So what happens?

31
32
00:02:41,960 --> 00:02:49,750
So when an application crashes, the iPhone OS writes this
crash report which contains some diagnostic information

32
33
00:02:49,750 --> 00:02:54,990
that will help you debug your application, rather than
trying to make a guess as to what could have gone wrong.

33
34
00:02:54,990 --> 00:02:59,970
It will find you to the exact line in your
code that could have caused the crash.

34
35
00:02:59,970 --> 00:03:02,080
Let's look at an example crash report.

35
36
00:03:02,080 --> 00:03:05,480
This is what a crash report looks like.

36
37
00:03:05,480 --> 00:03:08,890
I'll go through this section by section,
and within each section, line by line.

37
38
00:03:08,890 --> 00:03:13,490
Let's look at the first section of a crash report.

38
39
00:03:13,490 --> 00:03:16,310
This will give you some basic information about the crash.

39
40
00:03:16,310 --> 00:03:20,000
The first line is the Incident Identifier.

40
41
00:03:20,000 --> 00:03:21,810
This is unique for each crash report.

41
42
00:03:21,810 --> 00:03:26,910
The next line is the CrashReporter Key.

42
43
00:03:26,910 --> 00:03:29,960
This uniquely identifies a device.

43
44
00:03:29,960 --> 00:03:34,360
But remember that when we see this, we cannot
exactly pinpoint, oh, this came from your device.

44
45
00:03:34,360 --> 00:03:36,110
It's anonymized.

45
46
00:03:36,110 --> 00:03:42,740
The way we use this information is that if we see a
thousand crashes all coming from a single CrashReporter Key,

46
47
00:03:42,740 --> 00:03:47,450
then we know that this problem is not really
widespread, and it's contained to this single device.

47
48
00:03:47,450 --> 00:03:51,710
So the way you can use this information
is normalize your data.

48
49
00:03:51,710 --> 00:03:56,970
If you see a hundred crash reports from customers
all coming from only one or two CrashReporter Keys,

49
50
00:03:56,970 --> 00:04:02,450
which is one or two devices, you can kind
of make a guess that it's not as widespread.

50
51
00:04:02,450 --> 00:04:04,670
It's only limited to these two devices.

51
52
00:04:04,670 --> 00:04:07,500
Whereas, if it came from hundred
different CrashReporter Keys,

52
53
00:04:07,500 --> 00:04:10,920
then you know you crash is like,
affecting a hundred different users.

53
54
00:04:10,920 --> 00:04:15,580
Let's go to the next line which is the Hardware Model.

54
55
00:04:15,580 --> 00:04:20,200
This can be any of the iPhones,
the iPod touches or the iPad.

55
56
00:04:20,200 --> 00:04:25,660
Again, the way to use this information is if you
see all your crashes coming only from the iPad,

56
57
00:04:25,660 --> 00:04:29,630
then you'll know it narrows down your
search space to iPad specific code.

57
58
00:04:29,630 --> 00:04:34,520
You can look at only that code and see what
could have caused the crash only on iPads.

58
59
00:04:34,520 --> 00:04:36,610
In this case, it's iPod 3,1.

59
60
00:04:36,610 --> 00:04:44,260
The next line will tell you the Process, which in
your case will be the name of your application.

60
61
00:04:44,260 --> 00:04:50,080
And the number in square brackets is the process
ID of the process at the time of the crash.

61
62
00:04:50,080 --> 00:04:55,800
The next four to five lines, you don't have to worry about
as much because they'll be consistent across crash reports.

62
63
00:04:55,800 --> 00:05:01,290
Let's look at the next section of the crash report.

63
64
00:05:01,290 --> 00:05:03,890
This gives you some basic information about the crash.

64
65
00:05:03,890 --> 00:05:09,830
It will tell you the Date and the Time of the
crash, and it will tell you the OS Version

65
66
00:05:09,830 --> 00:05:13,770
that the device was running at the time of the crash.

66
67
00:05:13,770 --> 00:05:22,620
So the way to use this information is if you'll see a lot
of crashes coming from iPhone 3.1.2, and none from 3.1.1,

67
68
00:05:22,620 --> 00:05:26,820
you can make a guess as to there could have been
some change in the API or the way the code--

68
69
00:05:26,820 --> 00:05:30,680
your code interacts with these new
API's, which is causing this crash.

69
70
00:05:30,680 --> 00:05:35,950
Let's look at the next section which is the
most important section of a crash report.

70
71
00:05:35,950 --> 00:05:39,180
This is the Exception section of the crash report.

71
72
00:05:39,180 --> 00:05:43,870
It will tell you the Exception Type,
which in this case is EXC_BAD_ACCESS.

72
73
00:05:43,870 --> 00:05:48,150
This means that your program or your
application was trying to access memory,

73
74
00:05:48,150 --> 00:05:54,000
which wasn't available-- sorry--
available to it at that time.

74
75
00:05:54,000 --> 00:06:00,540
It will tell you the Exception Code and it will tell you
the Crashed Thread, which in this case, is thread number 6.

75
76
00:06:00,540 --> 00:06:03,570
The iPhone OS is a multithreaded platform.

76
77
00:06:03,570 --> 00:06:07,160
So there is more than one thread running at a given time.

77
78
00:06:07,160 --> 00:06:13,210
So in this case, if you see that the crash thread is
thread number 6, you look at the backtrace of that thread.

78
79
00:06:13,210 --> 00:06:14,980
The backtrace is in the next section.

79
80
00:06:14,980 --> 00:06:21,100
So you concentrate on the backtrace of the crash thread
and debug your application using Thread Backtrace,

80
81
00:06:21,100 --> 00:06:23,820
and concentrate only on the crash thread section.

81
82
00:06:23,820 --> 00:06:29,800
So let's actually go to thread
number 6 and look at its backtrace.

82
83
00:06:29,800 --> 00:06:31,520
What is a backtrace?

83
84
00:06:31,520 --> 00:06:35,600
A backtrace lists all the active
frames at the point of the crash.

84
85
00:06:35,600 --> 00:06:41,440
So it will give you a necessary list of function
calls that we'll meet when this crash occurred.

85
86
00:06:41,440 --> 00:06:44,340
It is divided into four columns.

86
87
00:06:44,340 --> 00:06:47,730
The first column will give you the frame number.

87
88
00:06:47,730 --> 00:06:52,250
The second column will give the name of
the binary, in this case, its Foundation.

88
89
00:06:52,250 --> 00:06:58,740
The third column will give you the
address of the function that was called.

89
90
00:06:58,740 --> 00:07:03,040
The fourth column divides this
address into a base and an offset.

90
91
00:07:03,040 --> 00:07:09,210
Later on in the talk, I'll tell you how to convert these
addresses into symbol names which are essentially file names

91
92
00:07:09,210 --> 00:07:14,920
and line numbers, so that they point exactly to the
line in your code which could have caused this crash.

92
93
00:07:14,920 --> 00:07:18,500
Let's go to the next section.

93
94
00:07:18,500 --> 00:07:23,120
This section will give the values and
the registers at the time of the crash.

94
95
00:07:23,120 --> 00:07:26,090
Don't worry about the section too
much, because in most cases,

95
96
00:07:26,090 --> 00:07:29,930
the backtrace gives you all the information
you need to debug your application.

96
97
00:07:29,930 --> 00:07:41,750
Finally, the last section which just lists out all the
binaries that were loaded at the time of the crash.

97
98
00:07:41,750 --> 00:07:43,920
So I showed you an example crash report.

98
99
00:07:43,920 --> 00:07:50,230
Let's talk about the different types
of crashes that we see on iPhone OS.

99
100
00:07:50,230 --> 00:07:57,690
We make sure that we have a high quality of user
experience for the user when they interact with our device.

100
101
00:07:57,690 --> 00:08:00,520
To do this, we need to ensure certain policies.

101
102
00:08:00,520 --> 00:08:05,130
And these policies can terminate your applications
if your application doesn't respect them.

102
103
00:08:05,130 --> 00:08:09,360
And because of this termination,
the crash report is written out.

103
104
00:08:09,360 --> 00:08:13,270
The first kind of crash report is
a Watchdog timeout crash report.

104
105
00:08:13,270 --> 00:08:19,780
This happens when your application fails to launch,
resume, suspend, or quit in a given timeframe.

105
106
00:08:19,780 --> 00:08:27,040
So if the user is interacting with your device, and the
application doesn't launch within a given timeframe,

106
107
00:08:27,040 --> 00:08:31,690
the application will be terminated
and a crash report is written out.

107
108
00:08:31,690 --> 00:08:35,980
The second type of crash reports
we see are User force-quite.

108
109
00:08:35,980 --> 00:08:40,440
A user will force-quit your application if
your application is not responsive enough,

109
110
00:08:40,440 --> 00:08:42,300
and this will cause the crash report to be written out.

110
111
00:08:42,300 --> 00:08:47,920
So the third type of crash reports we see
are the Low Memory termination crash reports.

111
112
00:08:47,920 --> 00:08:54,250
The iPhone OS is not exactly like the Desktop OS, because
it has only a limited amount of memory to play with.

112
113
00:08:54,250 --> 00:09:00,640
And if the OS realizes that it doesn't have enough
memory to continue with interaction with the user,

113
114
00:09:00,640 --> 00:09:04,190
it will send out this low memory
notification to applications.

114
115
00:09:04,190 --> 00:09:08,710
If your application respects this low memory
notifications, and it freeze up memory,

115
116
00:09:08,710 --> 00:09:16,140
and the OS realizes that it's gotten enough memory
to continue running smoothly, things will run fine.

116
117
00:09:16,140 --> 00:09:19,970
But if there isn't enough memory and if
the application doesn't free up memory,

117
118
00:09:19,970 --> 00:09:24,760
then your application will be terminated,
and a low memory log will be written out.

118
119
00:09:24,760 --> 00:09:29,750
Finally, the fourth type of logs that we see
are Application crashes due to bugs in the code.

119
120
00:09:29,750 --> 00:09:32,430
Let's look at each of these types of crash logs.

120
121
00:09:32,430 --> 00:09:37,710
Here is an example of a Watchdog timeout crash log.

121
122
00:09:37,710 --> 00:09:42,600
Remember, I said that the exception section
is the most important section of a crash log.

122
123
00:09:42,600 --> 00:09:49,700
So if you concentrate on this section, in this case,
you will see that the Exception Code is 0x8badf00d.

123
124
00:09:49,700 --> 00:09:58,700
If you see this as an exception code, you should immediately
realize that this is a crash log from a Watchdog timeout.

124
125
00:09:58,700 --> 00:10:03,610
The next section will tell you what your
application was trying to do at the time.

125
126
00:10:03,610 --> 00:10:08,060
In this case, it says that your
application failed to resume in time.

126
127
00:10:08,060 --> 00:10:12,050
And the number one cause of these crash supports
that we seen is when your application is trying

127
128
00:10:12,050 --> 00:10:15,710
to make a synchronous request to a URL to get data.

128
129
00:10:15,710 --> 00:10:19,720
There are API's to do asynchronous
request, and try to use those.

129
130
00:10:19,720 --> 00:10:23,380
And don't block the main thread
for more time than necessary.

130
131
00:10:23,380 --> 00:10:29,140
Bill will actually show you a demo of a how--
of a crash report, or a Watchdog crash report.

131
132
00:10:29,140 --> 00:10:32,500
>> Bill Dirks: So one thing San Francisco
is famous for is having earthquakes.

132
133
00:10:32,500 --> 00:10:37,940
So for our demo today, we've decided to
use an app called SeismicXML which isn't--

133
134
00:10:37,940 --> 00:10:43,960
which I downloaded from the developer website,
and so can you, and it's an earthquake themed app.

134
135
00:10:43,960 --> 00:10:50,840
What this app does is it makes a URL request
to the United States Geological Survey website,

135
136
00:10:50,840 --> 00:10:54,830
pulls down data about earthquakes, and then
displays it to the user in a table view.

136
137
00:10:54,830 --> 00:10:58,510
So I'm just going to show you the
app working properly at first.

137
138
00:10:58,510 --> 00:11:06,270
[ Pause ]

138
139
00:11:06,270 --> 00:11:10,460
So I'm just going to launch the app, and if I can--

139
140
00:11:10,460 --> 00:11:17,380
the network connection works, then we'll see this
table view being populated with earthquake data.

140
141
00:11:17,380 --> 00:11:23,060
So if it doesn't work, then we'll
see a Watchdog timeout right now.

141
142
00:11:23,060 --> 00:11:23,510
So--

142
143
00:11:23,510 --> 00:11:25,710
[ Laughter ]

143
144
00:11:25,710 --> 00:11:27,660
So either way, it will be good.

144
145
00:11:27,660 --> 00:11:29,680
OK. Alright.

145
146
00:11:32,050 --> 00:11:41,760
We're just going to give it one more second, and then--
so that basically, this is exactly why you don't want

146
147
00:11:41,760 --> 00:11:49,190
to be calling synchronous requests on the main thread,
because like right now, at least you see the title bar

147
148
00:11:49,190 --> 00:11:53,330
and the table view is responsive,
even though there's nothing in it.

148
149
00:11:53,330 --> 00:11:56,990
But if you were doing this in your
application, you're calling on the main thread

149
150
00:11:56,990 --> 00:12:01,260
that blocks all the user interaction with your application.

150
151
00:12:01,260 --> 00:12:04,420
So your not going to-- so the user's going to
launch your app, and then they're not going

151
152
00:12:04,420 --> 00:12:07,220
to be having a very good time, because
they like, "Oh, what's going on here?

152
153
00:12:07,220 --> 00:12:08,500
It's not doing anything."

153
154
00:12:08,500 --> 00:12:10,840
And here, they can just blame the network.

154
155
00:12:10,840 --> 00:12:15,640
But if your app just totally-- and
this was not on the main thread.

155
156
00:12:15,640 --> 00:12:17,590
So it didn't Watchdog.

156
157
00:12:17,590 --> 00:12:20,450
But I have a version that will Watchdog.

157
158
00:12:20,450 --> 00:12:26,540
Because SeismicXML is written to call-- to
ask for the URL asynchronously, which is good.

158
159
00:12:26,540 --> 00:12:30,770
So therefore, the app didn't die, and
it gave me a meaningful warning message.

159
160
00:12:30,770 --> 00:12:38,890
But like, Siesmicdog app, which is a version of the
SeismicXML app, is one where I'm just-- I changed the code.

160
161
00:12:38,890 --> 00:12:43,270
So I'm just requesting the URL in the main thread.

161
162
00:12:43,270 --> 00:12:48,790
And so, I'm going to switch to-- this is just
going to hang here for a while like it did before.

162
163
00:12:48,790 --> 00:12:50,170
But in this case, it's just going to die.

163
164
00:12:50,170 --> 00:12:55,800
So the user would not-- you don't see title bar,
you can't interact with the page, and it just dies.

164
165
00:12:55,800 --> 00:13:00,690
So now that we've seen what a crash looks
like, I'm going to show you how to debug

165
166
00:13:00,690 --> 00:13:03,570
that crash and get information using Xcode.

166
167
00:13:03,570 --> 00:13:09,300
If you have such a crash on your device, you
can debug it immediately by plugging your device

167
168
00:13:09,300 --> 00:13:12,480
into your host, and then opening up Xcode.

168
169
00:13:12,480 --> 00:13:17,020
From Xcode, you can open up the organizer
which is in the window pull down menu.

169
170
00:13:17,020 --> 00:13:18,740
And-- alright.

170
171
00:13:22,290 --> 00:13:30,780
So once you open up the organizer,
you can click on your device,

171
172
00:13:30,780 --> 00:13:34,300
which is on the left side here, and
then click on the device logs tab.

172
173
00:13:34,300 --> 00:13:40,520
Clicking on the device logs tab will make Xcode pull your
device and pull down any crash logs that are on the device.

173
174
00:13:40,520 --> 00:13:44,510
And here, we see the Seismicdog-- maybe I should zoom in.

174
175
00:13:44,510 --> 00:13:54,050
[ Pause ]

175
176
00:13:54,050 --> 00:13:58,820
The Seismicdog app that we just generated at 9:14.

176
177
00:13:58,820 --> 00:14:04,220
So as Madhu mentioned, the first thing
you-- one of the most important sections

177
178
00:14:04,220 --> 00:14:06,230
of a crash report is the exception section.

178
179
00:14:06,230 --> 00:14:07,930
So we'll go there first.

179
180
00:14:07,930 --> 00:14:15,420
And here, we are at the exception section.

180
181
00:14:15,420 --> 00:14:22,710
We see these 0x8badf00d exception code, and this
means that the Watchdog timeout came in to play.

181
182
00:14:22,710 --> 00:14:29,330
So the Watchdog timeout comes in to play when you have
failed to launch, resume, suspend, or quit an app in time,

182
183
00:14:29,330 --> 00:14:32,100
and this is to ensure a good user experience.

183
184
00:14:32,100 --> 00:14:38,300
So the two other things to notice here are-- the
highlighted thread is 0, which is the main thread,

184
185
00:14:38,300 --> 00:14:43,820
and that if you look at the applications
specific section immediately below,

185
186
00:14:43,820 --> 00:14:46,080
it's says Seismicdog failed to launch in time.

186
187
00:14:46,080 --> 00:14:53,190
So this already gives us a clue on what went wrong
with our app and where we should go look to debug it.

187
188
00:14:53,190 --> 00:14:58,310
So now that we see highlighted thread is
0, we can go and look at that backtrace.

188
189
00:15:02,110 --> 00:15:05,530
So how you read a backtrace is you
can start at the bottom, or it's--

189
190
00:15:05,530 --> 00:15:09,590
in this case, it says start, and
that's the application starting up,

190
191
00:15:09,590 --> 00:15:12,160
and then you see it called the main UIApplication.

191
192
00:15:12,160 --> 00:15:16,230
So you just read from the bottom up and
that's the recursive list of function calls.

192
193
00:15:16,230 --> 00:15:19,460
Eventually, you'll see calls made by your application.

193
194
00:15:19,460 --> 00:15:25,030
And the one you want to look at is the highest
one in the stack trace, which in this is stacks--

194
195
00:15:25,030 --> 00:15:32,880
stack frame 3, we see it's from Seismicdog, and
then we're going to look at the symbol information.

195
196
00:15:32,880 --> 00:15:37,610
So we know that application died,
in applicationDidFinishLaunching

196
197
00:15:37,610 --> 00:15:41,330
in the file SeismicXMLAppDelegate.m line 133.

197
198
00:15:41,330 --> 00:15:45,970
So from there, it gives you actual information
where you can go look at the crash log and then,

198
199
00:15:45,970 --> 00:15:48,930
"Oh, that's where the bug is in my code."

199
200
00:15:48,930 --> 00:15:51,460
So we can look there now.

200
201
00:15:51,460 --> 00:15:56,630
You can also look higher up in the stack
frame stack to see what's going on.

201
202
00:15:56,630 --> 00:16:03,650
In this case, there's-- I actually had it sleep in that
function because you can't control the network connection,

202
203
00:16:03,650 --> 00:16:07,210
so I want to make sure that this one would die.

203
204
00:16:07,210 --> 00:16:21,050
So now, I'm going to open up our
code in Xcode and go to line 133.

204
205
00:16:25,290 --> 00:16:30,930
And here, I have a # define
that says make synchronous URL request.

205
206
00:16:30,930 --> 00:16:35,120
And I just want to remind everyone that as Madhu said,

206
207
00:16:35,120 --> 00:16:41,390
the number one cause of Watchdog timeout is making
a synchronous URL request on the main thread.

207
208
00:16:41,390 --> 00:16:46,350
And we have appropriate API's that you can call
to prevent this from ever happening to your app.

208
209
00:16:46,350 --> 00:16:47,980
So I encourage you to use them.

209
210
00:16:47,980 --> 00:16:49,140
Thank you.

210
211
00:16:49,140 --> 00:16:50,490
>> Madhuwanti Vaidya,: So just a summary.

211
212
00:16:50,490 --> 00:16:56,760
If you see this exception code 0x8badf00d,
immediately know that it's a Watchdog timeout.

212
213
00:16:56,760 --> 00:17:03,560
When this happens, try not to block the main thread, perform
task which take longer than required on a background thread,

213
214
00:17:03,560 --> 00:17:06,500
and make-- and use these API's for asynchronous URL request.

214
215
00:17:06,500 --> 00:17:13,090
There were these two sessions, Network Apps for
iPhone OS part one and part two, on Wednesday.

215
216
00:17:13,090 --> 00:17:16,100
I would recommend that you go back and watch these videos.

216
217
00:17:16,100 --> 00:17:19,820
They talk more in detail about how to use
these API's for asynchronous URL request.

217
218
00:17:19,820 --> 00:17:27,750
Alright. Let's look at the next section-- next type of
crash report which are user force-quit crash reports.

218
219
00:17:27,750 --> 00:17:30,490
Again, concentrate on the exception section.

219
220
00:17:30,490 --> 00:17:36,450
In this case, it's 0xdeadfall, and
it tells you that highlighted thread.

220
221
00:17:36,450 --> 00:17:40,560
So if you look at the highlighted thread, you will
find out what your application was trying to do

221
222
00:17:40,560 --> 00:17:43,050
which caused the user to force-quit your application.

222
223
00:17:43,050 --> 00:17:45,720
In most cases, your application become unresponsive

223
224
00:17:45,720 --> 00:17:50,420
which is why the user will use this force-quit
action, and this crash log will be written out.

224
225
00:17:50,420 --> 00:17:56,490
Let's look at the third type of crash
logs which are low Mmemory crash logs.

225
226
00:17:56,490 --> 00:18:01,290
These look a little different from the other types that
we've seen because they need to tell you more information

226
227
00:18:01,290 --> 00:18:05,040
about the memory situation of the
device at the time of the crash.

227
228
00:18:05,040 --> 00:18:06,780
So let's look at this section by section.

228
229
00:18:06,780 --> 00:18:09,240
The first section is similar.

229
230
00:18:09,240 --> 00:18:14,610
It will tell you the Incident Identifier,
the CrashReporter Key, the Hardware Model,

230
231
00:18:14,610 --> 00:18:18,370
the OS Version, and the Date and time of the crash.

231
232
00:18:18,370 --> 00:18:21,550
The next section is more specific to low memory logs.

232
233
00:18:21,550 --> 00:18:25,450
It will tell you how many free pages
there were at the time of the crash.

233
234
00:18:25,450 --> 00:18:26,970
One page is 4 kilobytes.

234
235
00:18:26,970 --> 00:18:32,270
So in this case there were 581
pages free, which is around 2 MB3.

235
236
00:18:32,270 --> 00:18:38,070
The next line will tell you how many pages
were wired, how many of them were purgeable,

236
237
00:18:38,070 --> 00:18:41,200
and what was the largest process in terms of memory.

237
238
00:18:41,200 --> 00:18:45,890
In our case, it's SeismicXML memory, which
is the application that Bill is demoing.

238
239
00:18:47,190 --> 00:18:52,990
The next section will tell you-- will give you a list of all
the processes and how much memory each of them was using.

239
240
00:18:52,990 --> 00:18:59,120
It will tell you the name of the process, the unique
identifier of the process, and the number of pages

240
241
00:18:59,120 --> 00:19:02,340
that that process was using at the time of the crash.

241
242
00:19:02,340 --> 00:19:09,530
As you can see here, the first line, which is SeismicXML,
was using 38,000 pages, which is a lot of pages.

242
243
00:19:09,530 --> 00:19:14,310
So if you see this type of crashes, what you need
to figure out is why your application is using

243
244
00:19:14,310 --> 00:19:18,730
so much memory, and free up memory when required.

244
245
00:19:18,730 --> 00:19:23,590
This crash log also tells you which
processes were jettisoned or terminated,

245
246
00:19:23,590 --> 00:19:26,680
and it tells you which process was active.

246
247
00:19:26,680 --> 00:19:30,880
In this case, SeismicXML was a
front-most app, and it was active.

247
248
00:19:30,880 --> 00:19:35,730
So the user was actually interacting with
your application, and the application crashed.

248
249
00:19:35,730 --> 00:19:39,470
The iPhone OS, when it reaches its low memory situation,

249
250
00:19:39,470 --> 00:19:42,600
first tries to terminate applications
which are in the background.

250
251
00:19:42,600 --> 00:19:48,900
As you can see here, MobileSafari is
jettisoned, MobileMusicPlayer is jettisoned.

251
252
00:19:48,900 --> 00:19:53,610
So it will try to free up memory and terminate
applications which are in the background.

252
253
00:19:53,610 --> 00:19:59,740
If it still does not get enough memory, it will
terminate the front-most application, which is active.

253
254
00:19:59,740 --> 00:20:03,250
You can see that third last line,
which is SpringBoard, is also active.

254
255
00:20:03,250 --> 00:20:08,040
These are the processes that interacts with the
user, and it will always be active in these reports.

255
256
00:20:08,040 --> 00:20:11,800
So don't get confused when you
see that as the after process.

256
257
00:20:11,800 --> 00:20:15,050
Bill will show you a demo of a low memory log.

257
258
00:20:15,050 --> 00:20:16,360
>> Bill Dirks: Hi again.

258
259
00:20:16,360 --> 00:20:20,720
So since we don't have good-- I don't have a good network
connection here, I'm not going to show you the app crashing,

259
260
00:20:20,720 --> 00:20:24,770
but it looks exactly like it did
before, comes up and then it dies.

260
261
00:20:24,770 --> 00:20:27,730
But the really interesting thing
is to look at the crash log itself,

261
262
00:20:27,730 --> 00:20:32,170
and see how we can use that to help debug our applications.

262
263
00:20:36,770 --> 00:20:43,710
So once again, if you get-- if you're using any device and
it crashes, or you-- or you've got some crash logs somehow,

263
264
00:20:43,710 --> 00:20:51,850
but let's say your device has crashed, you plug it
into your host and then open up Xcode, and once again,

264
265
00:20:51,850 --> 00:20:54,090
go to the window pull down and open up the organizer.

265
266
00:20:54,090 --> 00:20:59,590
If you don't see your crash log immediately pop
up here, you might need to, as I did earlier,

266
267
00:20:59,590 --> 00:21:07,390
toggle between tabs to get Xcode to poll your
device and pull down the appropriate crash log.

267
268
00:21:07,390 --> 00:21:19,160
So in this view, the low memory crash logs say,
low memory in type, and they often have more

268
269
00:21:19,160 --> 00:21:22,400
than one application in in the application section.

269
270
00:21:22,400 --> 00:21:25,970
This is because many applications
can be jettisoned at one time.

270
271
00:21:25,970 --> 00:21:33,320
So what can you get from looking at a low memory crash log?

271
272
00:21:33,320 --> 00:21:44,440
Unlike the other crash logs, there's not actual information
as in oh this is the line number that I need to go look at.

272
273
00:21:44,440 --> 00:21:50,660
What you need to look at here is, one,
you're getting them, and so, that's no good.

273
274
00:21:50,660 --> 00:21:59,110
And-- because the iOS tries really hard not to jettison
the front most app-- so the user that's using your app,

274
275
00:21:59,110 --> 00:22:04,870
we try as hard as we can not to jettison it,
because that's what the user wants to do.

275
276
00:22:04,870 --> 00:22:11,190
But sometimes, if the application does use
a lot of memory, it will be jettisoned.

276
277
00:22:11,190 --> 00:22:15,280
But before the iOS jettisons the
application, it will send a low memory warning.

277
278
00:22:15,280 --> 00:22:23,070
So as Madhu mentioned, if you listen for this notifications
and respond by bringing up any available memory

278
279
00:22:23,070 --> 00:22:27,880
that you can, this will prevent-- help prevent
your application from being jettisoned.

279
280
00:22:27,880 --> 00:22:31,520
In the-- and then the other thing to notice,
which goes along with that is that in this case,

280
281
00:22:31,520 --> 00:22:33,910
our app was the active app, and it was the jettisoned app.

281
282
00:22:33,910 --> 00:22:36,260
That means the user was actively using your app.

282
283
00:22:36,260 --> 00:22:38,620
So that's a situation that you want to avoid.

283
284
00:22:38,620 --> 00:22:46,640
Other things you can do in terms of-- you can do beforehand
to try to prevent these crash logs from happening,

284
285
00:22:46,640 --> 00:22:51,810
is there's some tools and instruments such as the leaks
tool and the alloc tool which there's other sessions

285
286
00:22:51,810 --> 00:22:55,860
that Madhu will point out, that
you can watch the videos for.

286
287
00:22:55,860 --> 00:23:04,230
And also, you can use-- you can build and analyze
to help you try to find any memory leaks also.

287
288
00:23:04,230 --> 00:23:12,580
So in summary, you basically-- there isn't
direct actual information in these logs,

288
289
00:23:12,580 --> 00:23:17,320
but these logs mean that the user is having
not a good experience with your application.

289
290
00:23:17,320 --> 00:23:19,370
So you should try to work on fixing this.

290
291
00:23:19,370 --> 00:23:20,570
Thanks.

291
292
00:23:20,570 --> 00:23:26,040
>> Madhuwanti Vaidya: Just to summarize again, so iOS
will send out low memory notification when it realizes

292
293
00:23:26,040 --> 00:23:31,100
that there isn't enough memory to run smoothly,
respect these low memory notifications.

293
294
00:23:31,100 --> 00:23:36,260
When you get this notification in your application,
release objects that can be reconstructed.

294
295
00:23:36,260 --> 00:23:42,660
Also, release objects that are cached so that the
iOS does not have to terminate your application.

295
296
00:23:42,660 --> 00:23:47,470
There are at least two sessions that had been
mentioned, Advanced Memory Analysis with Instruments,

296
297
00:23:47,470 --> 00:23:51,370
that was yesterday, and Performance Optimization
on iPhone OS, which is again, yesterday.

297
298
00:23:51,370 --> 00:23:54,240
So go back and watch these videos.

298
299
00:23:56,950 --> 00:24:01,340
Alright. So I talked about the different types
of crash reports that you'll see on the iOS.

299
300
00:24:01,340 --> 00:24:06,010
How do go about actually getting this crash
reports from your device onto your host machine?

300
301
00:24:06,010 --> 00:24:13,210
First thing is, you want to build and
test your application on a device.

301
302
00:24:13,210 --> 00:24:18,720
So-- because the iPhone simulator simulates
most aspects of the iOS, but not all of them.

302
303
00:24:18,720 --> 00:24:22,370
So, low memory situation, Watchdog time
out, are not simulated by the simulator.

303
304
00:24:22,370 --> 00:24:25,850
So build and test your application on your device.

304
305
00:24:25,850 --> 00:24:31,710
If you see crashes on your device, as Bill showed you,
just sync up your device to your host and open up Xcode,

305
306
00:24:31,710 --> 00:24:36,760
Xcode will automatically pull the crash logs
from the device on to your host machine.

306
307
00:24:36,760 --> 00:24:44,140
And if you go back to the organizer window in the device log
section, you will see a list of all crashes on your device.

307
308
00:24:44,140 --> 00:24:49,950
The next stage in building and testing your application is
when you build your application, and if you give it to a few

308
309
00:24:49,950 --> 00:24:55,370
of your friends who are willing to test it out for you,
what do they do when they see crashes on their devices.

309
310
00:24:55,370 --> 00:25:02,120
Again, they sync up their device to their host machine,
and depending on the OS that their host is running,

310
311
00:25:02,120 --> 00:25:06,400
the crash logs will be copied to these
three different-- to this location.

311
312
00:25:06,400 --> 00:25:11,050
They need to go to this location
and e-mail the crash logs to you.

312
313
00:25:11,050 --> 00:25:17,280
Finally, when your application is live on the App Store,
we also provide you a way of getting customer crash logs.

313
314
00:25:17,280 --> 00:25:23,930
So if you log into your iTunes Connect account, there is
this section which is crash reports, if you click on that,

314
315
00:25:23,930 --> 00:25:27,370
it will show you this nice-- not nice--
it'll show you this list of crash report--

315
316
00:25:27,370 --> 00:25:27,780
[ Laughter ]

316
317
00:25:27,780 --> 00:25:32,160
divided it into those four different
types that we spoke about.

317
318
00:25:32,160 --> 00:25:37,550
So it will show you crashes due to bugs in your application,

318
319
00:25:37,550 --> 00:25:41,670
it'll show you these timeout reports,
and these low memory logs.

319
320
00:25:41,670 --> 00:25:47,830
So go look at them, understand them, and try to fix bugs
in your application which is causing these crash logs.

320
321
00:25:47,830 --> 00:25:53,920
There is a session which talks more in detail about
iTunes Connect-- Publishing with iTunes Connect.

321
322
00:25:53,920 --> 00:25:58,380
It happened yesterday, so go back
and watch the videos for that.

322
323
00:25:59,730 --> 00:26:05,210
The example crash log that I showed
had addresses in the thread backtrace.

323
324
00:26:05,210 --> 00:26:08,410
So you need to be able to go from this
address information to symbol names,

324
325
00:26:08,410 --> 00:26:13,420
so that we can understand these crash logs better, and
then we can actually go and look in the code of a--

325
326
00:26:13,420 --> 00:26:16,010
in the line of code that caused this crash.

326
327
00:26:16,010 --> 00:26:20,660
This process is called symbolication, and I'll
tell you how to symbolicate these crash logs.

327
328
00:26:20,660 --> 00:26:25,630
So here's a nonsymbolicated-- unsymbolicated crash log.

328
329
00:26:25,630 --> 00:26:28,990
As you can see, there are addresses in the thread backtrace.

329
330
00:26:28,990 --> 00:26:32,730
We don't know what to do with these
addresses, since we're not computers.

330
331
00:26:32,730 --> 00:26:37,350
Here's a symbolicated back log-- symbolicated crash log.

331
332
00:26:37,350 --> 00:26:40,530
Let's look at one line.

332
333
00:26:45,170 --> 00:26:49,370
So this address is actually now
converted to this function name

333
334
00:26:49,370 --> 00:26:55,530
with this applicationDidFinishLaunching,
and the file name and line number.

334
335
00:26:55,530 --> 00:26:56,420
So how do you do this?

335
336
00:26:56,420 --> 00:26:59,260
How do you go from address to symbol information?

336
337
00:26:59,260 --> 00:27:00,630
Well, Xcode does it for you.

337
338
00:27:00,630 --> 00:27:06,200
So if you drag and drop your crash logs into the
Xcode organizer window in the device log section,

338
339
00:27:06,200 --> 00:27:11,910
it'll automatically symbolicate your log for you,
so that you can see this file name and line number.

339
340
00:27:11,910 --> 00:27:15,070
In order to be able to do this, Xcode needs to have access--

340
341
00:27:15,070 --> 00:27:19,290
or Spotlight needs to have access to the
binary and .dSYM for your application.

341
342
00:27:19,290 --> 00:27:23,240
And remember, you need to store your
binary and .dSYM for each version

342
343
00:27:23,240 --> 00:27:26,010
of your application that you upload to the App Store.

343
344
00:27:26,010 --> 00:27:30,760
You can not go back and rebuild your application,
and hope the crash logs will be symbolicated.

344
345
00:27:30,760 --> 00:27:39,290
So, Xcode 3.2.2 or later, will actually have this option
of Build and Archive which builds your application

345
346
00:27:39,290 --> 00:27:45,540
and stores the binary and .dSYM in a safe location so that
you can symbolicate crash logs, because not all crash logs

346
347
00:27:45,540 --> 00:27:49,080
that you get from customers will be symbolicated.

347
348
00:27:49,080 --> 00:27:51,790
And you need to do this for each
version of your application.

348
349
00:27:51,790 --> 00:27:55,620
I cannot stress the fact more now.

349
350
00:27:55,620 --> 00:28:01,140
Finally, let's talk about the most common crashes that
we've seen when we've analyzed customer crash logs.

350
351
00:28:01,140 --> 00:28:08,380
These are the three most common crashes
that we've seen from customer crash logs.

351
352
00:28:08,380 --> 00:28:12,390
All of them relate to memory management on the iPhone OS.

352
353
00:28:12,390 --> 00:28:15,470
Memory management in-- on Objective-C requires you

353
354
00:28:15,470 --> 00:28:18,720
to understand the Retain/Release Model
model that Objective-C works with.

354
355
00:28:18,720 --> 00:28:22,790
And you need to understand this and
apply it consistently across all code.

355
356
00:28:22,790 --> 00:28:28,540
The first most common crash that we've is
seen is crashes due to over-released objects.

356
357
00:28:28,540 --> 00:28:30,990
The second is due to null pointer dereferences.

357
358
00:28:30,990 --> 00:28:36,860
And the third is when you try to insert a
nil object into an array or a dictionary.

358
359
00:28:36,860 --> 00:28:42,240
If you try to do that, your application will hang or
it will crash, and a crash report will be written out.

359
360
00:28:42,240 --> 00:28:45,250
Bill will show you a demo of these types of crashes.

360
361
00:28:45,250 --> 00:28:48,250
I think Bill is the only person on stage
who wants that application to crash.

361
362
00:28:48,250 --> 00:28:50,030
>> Bill Dirks: Thanks, Madhu.

362
363
00:28:50,030 --> 00:28:56,490
Yes, I'm going to walk through crash logs from each of these
three types of crashes, so you can look at the backtrace

363
364
00:28:56,490 --> 00:29:00,910
and use that information to help you debug your application.

364
365
00:29:00,910 --> 00:29:06,530
I think crash logs that point to bugs in your code
are actually the most compelling type of crash log

365
366
00:29:06,530 --> 00:29:12,130
because that gives you information, and you can use that
information to find real bugs in your code that's live

366
367
00:29:12,130 --> 00:29:16,280
in the real world, fix it, and then the user
will have a better experience in the future.

367
368
00:29:16,280 --> 00:29:20,730
So first, I'm going to show you
an over released object crash log.

368
369
00:29:20,730 --> 00:29:36,370
So once again, you can open up your organizer window
which is in the window pull down, and here it is.

369
370
00:29:36,370 --> 00:29:43,940
And before the session this morning, I launched
my app and crashed it in every way I could.

370
371
00:29:43,940 --> 00:29:46,830
So I-- there's a version of the
application called SeismicOR,

371
372
00:29:46,830 --> 00:29:51,840
or Seismic Over Release, which
has an over release error in it.

372
373
00:29:53,000 --> 00:29:55,930
And let me zoom in.

373
374
00:29:58,130 --> 00:30:03,970
So once again, when you get a crash log, one of the first
sections you want to go look at is the exception section.

374
375
00:30:03,970 --> 00:30:09,040
And here, we see the exception type is EXC_BAD_ACCESS.

375
376
00:30:09,040 --> 00:30:14,520
And what EXC_BAD_ACCESS means is that you're
trying to access memory that you don't own.

376
377
00:30:14,520 --> 00:30:19,630
So you already know from looking at that,
that this is some type of memory issue.

377
378
00:30:19,630 --> 00:30:24,170
It also shows that the crashed thread is thread number 7.

378
379
00:30:24,170 --> 00:30:28,360
So now, we go look at thread number 7 in the backtrace.

379
380
00:30:32,170 --> 00:30:37,000
And once again, you can start at the bottom, you see the
thread spinning up, but the line that you're most interested

380
381
00:30:37,000 --> 00:30:45,240
in is the line where you see your app
name that's highest up in the call stack.

381
382
00:30:45,240 --> 00:30:52,710
And here, we see it was in the SeismicXML app
delegate parse earthquake data function, and--

382
383
00:30:52,710 --> 00:30:56,950
which is in SeismicXMLAppDelegate.m line 234.

383
384
00:30:56,950 --> 00:31:01,660
So right there, we already know where we can
start to look for the bug in the-- in this code.

384
385
00:31:01,660 --> 00:31:13,520
And we can look at-- we all look at this code.

385
386
00:31:13,520 --> 00:31:18,510
So I'm going to go open up SeismicXMLAppDelegate line 234.

386
387
00:31:18,510 --> 00:31:30,040
[ Pause ]

387
388
00:31:30,040 --> 00:31:33,690
And here, we see pool release.

388
389
00:31:33,690 --> 00:31:37,720
So, this-- and pool here is our Autorelease pool.

389
390
00:31:37,720 --> 00:31:42,610
So right now, we know that we're
releasing some object and we shouldn't be.

390
391
00:31:42,610 --> 00:31:44,880
And so, that-- that's the cause of our bug.

391
392
00:31:44,880 --> 00:31:55,510
In fact, if you looked at the crash log, just point it up--
which I didn't point out earlier, and you look at the line

392
393
00:31:55,510 --> 00:31:57,950
above where your application has crashed.

393
394
00:31:57,950 --> 00:32:02,420
This shows you that there's an
NSAutoreleasePool release is the next frame up.

394
395
00:32:02,420 --> 00:32:06,720
So from the crash log itself, you
know that it's some Autorelease error.

395
396
00:32:06,720 --> 00:32:13,180
So this gives you a starting point
to look for your bug, and here,

396
397
00:32:13,180 --> 00:32:17,490
since I made the bug, it's pretty
easy for me to discover it.

397
398
00:32:17,490 --> 00:32:25,240
But we instantiate this parser object which we added to
the AutoreleasePool, and then we used it to parse the data

398
399
00:32:25,240 --> 00:32:30,460
that came from the website, and then
we're done with this, so we released it.

399
400
00:32:30,460 --> 00:32:33,840
But since it was in the pool, it got
released again when we did a pool release.

400
401
00:32:33,840 --> 00:32:41,230
So that's the type of process that you'd go through when you
get a crash log and they're hunting down bugs in your code.

401
402
00:32:41,230 --> 00:32:51,600
OK. Next, I'm going to show you a crash log from our second
most common type of crash, which is dereferencing null.

402
403
00:32:51,600 --> 00:32:59,620
So this crash log is very similar, and you use
the same process to the over release crash.

403
404
00:32:59,620 --> 00:33:06,830
After your app crashes, you can open up the
device that log in Xcode and have it symbolicated,

404
405
00:33:06,830 --> 00:33:14,350
you look at the exception section, again,
EXC_BAD_ACCESS, so we know it's a memory-related issue.

405
406
00:33:14,350 --> 00:33:16,510
Here, the crashing thread is 0.

406
407
00:33:16,510 --> 00:33:28,040
[ Pause ]

407
408
00:33:28,040 --> 00:33:38,750
So we can look at the backtrace of the crashing thread and
we find that the highest frame that our app is making--

408
409
00:33:38,750 --> 00:33:43,690
that appears in this thread is
the-- in RootViewController line 76.

409
410
00:33:43,690 --> 00:33:50,120
Now, the like-- next line up here isn't quite as
useful because it's an obviously message send,

410
411
00:33:50,120 --> 00:33:54,270
which is a little more opaque for us as the developer.

411
412
00:33:54,270 --> 00:34:04,520
But we do have the line of code that we can go look for.

412
413
00:34:05,540 --> 00:34:09,510
So I'm going to open up this piece of code also.

413
414
00:34:09,510 --> 00:34:24,340
[ Pause ]

414
415
00:34:24,340 --> 00:34:28,720
So this is just a classic dereferencing null error.

415
416
00:34:28,720 --> 00:34:32,280
But-- and your code will be much more complicated than this.

416
417
00:34:32,280 --> 00:34:40,190
I just wanted to show you that it gives me a starting
point in this case right here, to go debug my application,

417
418
00:34:40,190 --> 00:34:47,090
and then you can go, I'm dereferencing row
height, so what could be the problem there?

418
419
00:34:47,090 --> 00:34:51,220
And then you'd have to look at what-- you
thought row height existed, but no longer exists.

419
420
00:34:51,220 --> 00:34:58,070
Or in this case, it never existed because I declared it but
never malloced any memory for it, and then I'm using it.

420
421
00:34:58,070 --> 00:35:02,000
So that's the second most common type of error we see.

421
422
00:35:02,000 --> 00:35:05,930
And now, the third most common type of error,
and this one is a little trickier to debug,

422
423
00:35:05,930 --> 00:35:10,500
but the process is very similar to the
other two, and that's inserting nil

423
424
00:35:10,500 --> 00:35:13,850
into a collection, such as in array or dictionary.

424
425
00:35:13,850 --> 00:35:21,670
Once again, if your app crashes,
open up Xcode, go to the organizer.

425
426
00:35:21,670 --> 00:35:24,310
That's the first thing you do.

426
427
00:35:25,770 --> 00:35:30,220
In here, I made a version called Seismic
Insert, which I crashed this morning.

427
428
00:35:30,220 --> 00:35:36,410
So I have the log.

428
429
00:35:36,410 --> 00:35:44,080
Alright. So the exception type here is this
SIGABRT as opposed to the SIGSEGV we saw earlier.

429
430
00:35:44,080 --> 00:35:47,760
So SIGABRT's are a little bit--
of a different type of exception.

430
431
00:35:47,760 --> 00:35:53,670
Because here, what's going on is your
application has asked the kernel to kill it,

431
432
00:35:53,670 --> 00:35:56,110
and then the kernel comes back and kills your app.

432
433
00:35:56,110 --> 00:36:01,820
And this happens when something like you
thrown an exception and it gets caught,

433
434
00:36:01,820 --> 00:36:05,870
and the kernel comes in and kills your app.

434
435
00:36:05,870 --> 00:36:13,220
So it says here that the crashing thread is
0, but if we look at thread 0, things look OK.

435
436
00:36:13,220 --> 00:36:20,770
So that's why this type of error
is a little bit trickier to debug.

436
437
00:36:20,770 --> 00:36:25,850
Because here, we-- on this thread, we
just see Seismic Insert, it's starting,

437
438
00:36:25,850 --> 00:36:30,570
it launches main, the run is being setup, and it looks OK.

438
439
00:36:30,570 --> 00:36:34,420
But with the SIGABRT, what you have to do is you--
then you have to start looking at the other threads.

439
440
00:36:34,420 --> 00:36:39,870
If you don't see the error, in the thread that it is
blamed, you have to start looking at the other threads.

440
441
00:36:39,870 --> 00:36:45,930
And with SIGABRT, you want to look for
an abort being called in the thread.

441
442
00:36:45,930 --> 00:36:52,910
So if we look through all these threads and go to
thread 6, we see this line that says abort in it.

442
443
00:36:52,910 --> 00:36:55,920
And this is actually the backtrace of interest.

443
444
00:36:55,920 --> 00:37:00,080
This is the backtrace that will show
you where the offending code is.

444
445
00:37:00,080 --> 00:37:05,840
And here, it was-- because of this
Objective-C exception being thrown.

445
446
00:37:05,840 --> 00:37:11,940
So that's-- this is a common scenario where the
blame thread isn't the correct blame thread,

446
447
00:37:11,940 --> 00:37:13,460
and you have to go looking at other threads.

447
448
00:37:13,460 --> 00:37:22,800
So you want to look for the abort line, and then
often it's because of an exception being thrown.

448
449
00:37:22,800 --> 00:37:27,150
So-- but once you find this thread,
there's a lot of things bad in this thread.

449
450
00:37:27,150 --> 00:37:30,950
It says kill, terminate, not good words.

450
451
00:37:30,950 --> 00:37:35,110
You want to do the same thing you did before.

451
452
00:37:35,110 --> 00:37:42,150
Go look for the highest frame, that's your app,
in this case-- this app is called Seismic Insert,

452
453
00:37:42,150 --> 00:37:49,510
and look at the line of code, which is
in the AppDelegate.m again, line 234.

453
454
00:37:49,510 --> 00:38:01,090
[ Pause ]

454
455
00:38:01,090 --> 00:38:02,510
There we go.

455
456
00:38:02,510 --> 00:38:12,050
[ Pause ]

456
457
00:38:12,050 --> 00:38:22,300
Alright. So on line 234, we're going to see that I'm
adding this new earthquake to the earthquake list.

457
458
00:38:22,300 --> 00:38:25,270
But in fact, it was nil.

458
459
00:38:25,270 --> 00:38:29,030
And you know, your code of course, again,
will be more complicated than this.

459
460
00:38:29,030 --> 00:38:34,230
But this shows you the starting point to look at, and
for some reason, some object that has not existed,

460
461
00:38:34,230 --> 00:38:40,580
no longer exists, so then you have to hunt down and figure
out why did it go away and how do I go about fixing this?

461
462
00:38:40,580 --> 00:38:47,820
But the crash logs contain information of crashes that
are happening in the real world that you can go then use

462
463
00:38:47,820 --> 00:38:54,560
to debug your application and make a better
user experience and hopefully, some more apps.

463
464
00:38:54,560 --> 00:38:55,900
Thanks.

464
465
00:38:55,900 --> 00:39:00,020
>> Madhuwanti Vaidya: So just in short,
understand the Retain/Release model

465
466
00:39:00,020 --> 00:39:03,080
and apply it consistently across all your code.

466
467
00:39:03,080 --> 00:39:06,960
There is a session which is right after
this, at 11:30, Advanced Objective-C

467
468
00:39:06,960 --> 00:39:10,030
and Garbage Collection, which talks
more in detail about this.

468
469
00:39:10,030 --> 00:39:13,710
There was also a session on Wednesday
which you can go back and watch videos for.

469
470
00:39:13,710 --> 00:39:20,500
Just to summarize, nobody likes an app that crashes.

470
471
00:39:20,500 --> 00:39:23,890
And most of all, people at the App Store don't like it.

471
472
00:39:23,890 --> 00:39:29,610
If you got-- if you got a chance to watch the Keynote,
Steve mentioned that the third most common reason

472
473
00:39:29,610 --> 00:39:33,970
that apps are rejected from the App
Store is because the app crashes.

473
474
00:39:33,970 --> 00:39:39,440
So you need to build and test your application on
devices that you want your application to run on.

474
475
00:39:39,440 --> 00:39:43,040
I talked about the different types of crash reports.

475
476
00:39:43,040 --> 00:39:48,880
I told you about how to get these crash reports from your
device, from your friend's devices on to your host machine.

476
477
00:39:48,880 --> 00:39:54,130
We also provide you a way of getting customer
crash reports through iTunes Connect.

477
478
00:39:54,130 --> 00:39:58,930
Remember to store the binary and .dSYM
for each version of your application.

478
479
00:39:58,930 --> 00:40:01,840
Xcode Build and Archive does this for you.

479
480
00:40:01,840 --> 00:40:06,810
And finally, we showed you the three most
common crashes that we've seen from customers.

480
481
00:40:06,810 --> 00:40:13,050
So try to avoid these common mistakes, and hopefully,
your application will have a better user experience.

481
482
00:40:13,050 --> 00:40:14,940
Thank you for attending this session.

482
483
00:40:14,940 --> 00:40:16,690
Here are the related sessions.

483
484
00:40:16,690 --> 00:40:24,240
And for more information, please
feel free to contact Michael.

484
