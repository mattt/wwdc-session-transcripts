1
00:00:06,030 --> 00:00:10,850
>> Marc Verstaen: So good morning Moscone.

1
2
00:00:10,850 --> 00:00:15,540
It is my pleasure to welcome you here this
morning and to take you through the second part

2
3
00:00:15,540 --> 00:00:19,160
of our journey that we started yesterday with Todd.

3
4
00:00:19,160 --> 00:00:25,630
We want to take you to a way to
master iPhone development with Xcode.

4
5
00:00:25,630 --> 00:00:32,410
It will be a journey that will be in three parts.

5
6
00:00:34,970 --> 00:00:43,360
That's interesting, I like that slide,
but, okay and so yesterday you went

6
7
00:00:43,360 --> 00:00:49,060
through developing, building, provisioning and distributing.

7
8
00:00:49,060 --> 00:00:51,900
Today you will go through project structure.

8
9
00:00:51,900 --> 00:00:55,900
It is very important to start with
the right foundation on your project.

9
10
00:00:55,900 --> 00:01:05,480
Then you will learn how to target older devices while
still benefiting from the features of newer versions.

10
11
00:01:05,480 --> 00:01:10,930
You will then go through device provisioning, I know it's
a very easy thing, but we can revisit it once in awhile.

11
12
00:01:10,930 --> 00:01:16,590
And then you will be taken to application life cycle.

12
13
00:01:16,590 --> 00:01:22,400
So I will first introduce Jacob who will
drive you through project structure.

13
14
00:01:22,400 --> 00:01:23,710
Thank you.

14
15
00:01:23,710 --> 00:01:29,230
[ Applause ]

15
16
00:01:29,230 --> 00:01:31,060
>> Jacob Xiao: Thanks Marc.

16
17
00:01:31,060 --> 00:01:34,820
I'd like to talk to you today about
how to set up your iPhone Apps project.

17
18
00:01:34,820 --> 00:01:38,630
I'm going to be talking about two things.

18
19
00:01:38,630 --> 00:01:44,620
One is, some important project setting that you like
to set up, that you should set up in your app project

19
20
00:01:44,620 --> 00:01:49,950
and the other is how to bring your
app to the iPhone and iPad.

20
21
00:01:49,950 --> 00:01:56,170
There's a lot of settings in Xcode and I know it can seem
kind of intimidating at first, but really there's only a few

21
22
00:01:56,170 --> 00:02:00,270
that you actually need to care about and I'm
going to show you how to set those up today

22
23
00:02:00,270 --> 00:02:04,970
so you can get down to the real programming work.

23
24
00:02:04,970 --> 00:02:07,580
First off is the Base SDK.

24
25
00:02:07,580 --> 00:02:12,230
The Base SDK determines which version of
the OS is used to build your application.

25
26
00:02:12,230 --> 00:02:17,230
And this is not the same as which
version of the OS your app can run on.

26
27
00:02:17,230 --> 00:02:19,880
I'll talk about that in just a minute.

27
28
00:02:19,880 --> 00:02:26,060
You should always set this to the latest
version of the SDK, so currently that's 4.0.

28
29
00:02:26,060 --> 00:02:34,720
Now the Deployment Target is the setting that
determines which versions of the OS your app can run on.

29
30
00:02:34,720 --> 00:02:39,950
So you just set this to the oldest
OS version that you want to support.

30
31
00:02:39,950 --> 00:02:45,810
So, if you like to run on 3.1 and
later, you just set it to 3.1.

31
32
00:02:45,810 --> 00:02:51,610
And this determines whether symbols that you
use in frameworks are strongly or weakly linked.

32
33
00:02:51,610 --> 00:02:56,730
And we'll talk in a little bit about how to safely
use those new features while still being able

33
34
00:02:56,730 --> 00:02:59,230
to support older OS versions.

34
35
00:02:59,230 --> 00:03:04,100
The Architecture setting is another
important, another important setting

35
36
00:03:04,100 --> 00:03:06,790
in your project, but this one's really easy.

36
37
00:03:06,790 --> 00:03:10,940
You can just set it to Standard and you'll
be able to run optimally on all devices.

37
38
00:03:10,940 --> 00:03:19,170
And this will go for armv6 and armv7 and
it's the default for newly created projects.

38
39
00:03:20,290 --> 00:03:24,160
Finally, there's the Targeted Device Family setting.

39
40
00:03:24,160 --> 00:03:28,560
And this determines which types
of devices your app can run on.

40
41
00:03:28,560 --> 00:03:32,530
You can set it to iPhone, iPad or both.

41
42
00:03:32,530 --> 00:03:36,630
And what you set this to is totally up to you.

42
43
00:03:36,630 --> 00:03:38,660
So let's have an example.

43
44
00:03:38,660 --> 00:03:43,680
Let's say you're setting up your app
and you want to set the Base SDK first.

44
45
00:03:43,680 --> 00:03:49,190
Since the latest version of the OS is
4.0, what should you set the Base SDK to?

45
46
00:03:49,190 --> 00:03:49,540
Anyone?

46
47
00:03:49,540 --> 00:03:50,870
>> 4.0.

47
48
00:03:50,870 --> 00:03:53,730
>> Jacob Xiao: 4.0, that's right.

48
49
00:03:53,730 --> 00:04:01,390
Then you should set the Deployment Target to
3.1 if you want to support OS 3.1 and forward.

49
50
00:04:01,390 --> 00:04:07,410
The Architectures, you should set to standard in all cases
and if you want a universal app, you can just set it,

50
51
00:04:07,410 --> 00:04:10,750
the Targeted Device Family to iPhone/iPad.

51
52
00:04:10,750 --> 00:04:18,100
Then you'll be able to use all of the new features
up to OS 4.0 and support all the way back to OS 3.1.

52
53
00:04:18,100 --> 00:04:23,700
And it's important to make sure you always test
on all of the OS versions that you support.

53
54
00:04:23,700 --> 00:04:30,570
Next, I'd like to talk about how to
bring your app to the iPhone and iPad.

54
55
00:04:30,570 --> 00:04:34,220
Universal apps are one way to do this and with this method,

55
56
00:04:34,220 --> 00:04:38,990
you have a single application that
runs on both device types.

56
57
00:04:38,990 --> 00:04:42,920
The alternative to this is multiple apps.

57
58
00:04:42,920 --> 00:04:47,940
Here you have two applications, one
for the iPhone and one for iPad.

58
59
00:04:47,940 --> 00:04:56,260
And when you're done, if you have an older
iPhone only project, you can actually use Xcode

59
60
00:04:56,260 --> 00:04:59,920
to automatically upgrade your project to run for iPad.

60
61
00:04:59,920 --> 00:05:07,100
Just click on, just select the iPhone
App Target in the Groups and Files table

61
62
00:05:07,100 --> 00:05:12,720
and then select the Upgrade Current
Target for iPad menu item.

62
63
00:05:12,720 --> 00:05:20,890
And this will give you the option of either upgrading
to a single Universal App or to Multiple separate apps.

63
64
00:05:20,890 --> 00:05:24,040
So what's the difference between these two approaches?

64
65
00:05:24,040 --> 00:05:31,030
With the single universal app you have 1 target
that builds 1 application that runs on both devices.

65
66
00:05:31,030 --> 00:05:37,780
Where as with multiple apps you have 2 targets that
create 2 applications, one for iPhone, one for iPad.

66
67
00:05:37,780 --> 00:05:41,240
And which one you choose is really more
of a marketing decision about how you want

67
68
00:05:41,240 --> 00:05:43,050
to deliver your product to your customers.

68
69
00:05:43,050 --> 00:05:47,140
So now I'd like to show you some of that.

69
70
00:05:47,140 --> 00:05:49,810
Okay, now let's get started.

70
71
00:05:49,810 --> 00:05:56,250
I'm going to open up this older project that
I created and for iPh, an iPhone application.

71
72
00:05:56,250 --> 00:06:04,140
Now, first off I'm going to build and run to see how
it looks, but unfortunately I'm getting an error now.

72
73
00:06:04,140 --> 00:06:11,590
It's not finding the SDK that's set as the Base SDK,
the iPhone 3.13 and this is probably a common error

73
74
00:06:11,590 --> 00:06:15,120
that you'll run into as you're
updating to newer SDK versions.

74
75
00:06:15,120 --> 00:06:20,450
The problem is, the Base SDK that's set is no
longer included in this version of the tools.

75
76
00:06:20,450 --> 00:06:22,230
Luckily, this is easy to fix.

76
77
00:06:22,230 --> 00:06:31,190
I'll just open up the project and go here to the
Base SDK and we'll set it to 4.0, the latest version.

77
78
00:06:31,190 --> 00:06:40,070
While I'm here, I'm also going to go down to the Deployment
section and change the Deployment Target to be 3.1

78
79
00:06:40,070 --> 00:06:44,990
and now I'll be able to run on anything back to OS 3.1.

79
80
00:06:44,990 --> 00:06:48,510
Okay, now let's try to Build and Run again in the simulator.

80
81
00:06:48,510 --> 00:06:57,310
[ Background noise ]

81
82
00:06:57,310 --> 00:07:00,430
Great. Now it's building and here's our application.

82
83
00:07:00,430 --> 00:07:05,860
I'm also going to see how it looks on the iPad simulator.

83
84
00:07:09,970 --> 00:07:15,130
Since this project hasn't been upgraded to run for iPad yet,

84
85
00:07:15,130 --> 00:07:20,440
it's just going to run in the iPhone compatibility
mode and that's not a great user experience.

85
86
00:07:20,440 --> 00:07:27,880
So let's go back, find our iPhone App
Target and then once that's selected,

86
87
00:07:27,880 --> 00:07:33,890
choose the Upgrade Current Target for iPad menu item.

87
88
00:07:33,890 --> 00:07:38,480
As you can see we get the option for
a Universal app or 2 separate apps.

88
89
00:07:38,480 --> 00:07:43,670
I'm going to go with the Universal app, though.

89
90
00:07:43,670 --> 00:07:46,880
And now you can see, it's created this resources group

90
91
00:07:46,880 --> 00:07:53,260
which contains an iPad version of
one of my original iPhone resources.

91
92
00:07:53,260 --> 00:08:04,560
It's also made some changes to the target, the most
important one is setting the targeted device version

92
93
00:08:04,560 --> 00:08:09,350
to iPhone/iPad, so that now it's a Universal app.

93
94
00:08:09,350 --> 00:08:14,680
And you can also see that the Architectures
is set to standard.

94
95
00:08:14,680 --> 00:08:17,660
Okay, let's run again for the iPad simulator.

95
96
00:08:17,660 --> 00:08:22,170
Great, now we have the full iPad experience.

96
97
00:08:22,170 --> 00:08:32,630
Okay, now to summarize what we just saw,
you should always use the latest Base SDK,

97
98
00:08:32,630 --> 00:08:37,910
you should set the Deployment Target to the earliest OS
version that you want to support and you should test on all

98
99
00:08:37,910 --> 00:08:40,350
of those versions that you are supporting.

99
100
00:08:40,350 --> 00:08:46,500
You should use the Standard Option for Architectures and
you should choose whether to bring your app to the iPhone

100
101
00:08:46,500 --> 00:08:51,200
and iPad either with Universal apps, a
Universal app or Multiple apps and you can do

101
102
00:08:51,200 --> 00:08:53,760
that with the Targeted Device Family setting.

102
103
00:08:53,760 --> 00:09:00,510
Now I would like to hand it over to Clark Cox to
talk about targeting multiple iPhone OS versions.

103
104
00:09:00,510 --> 00:09:05,180
[ Applause ]

104
105
00:09:05,180 --> 00:09:06,440
>> Clark Cox: Thank you Jacob.

105
106
00:09:06,440 --> 00:09:10,840
Now Jacob's already shown you how to
structure a project to take advantage

106
107
00:09:10,840 --> 00:09:14,520
of the ability to run on earlier device versions.

107
108
00:09:14,520 --> 00:09:19,170
Well, there's one thing left, your code.

108
109
00:09:19,170 --> 00:09:25,560
Every last major update we've provided has added
new functionality and new APIs, new classes,

109
110
00:09:25,560 --> 00:09:29,970
functions, symbols, to take advantage of that.

110
111
00:09:29,970 --> 00:09:34,420
Say for instance I wanted to use a
class that was newly introduced in 4.0.

111
112
00:09:34,420 --> 00:09:37,790
If I were only writing for 4.0 this is what I would do.

112
113
00:09:37,790 --> 00:09:40,980
I would just use the class directly as you would any other.

113
114
00:09:40,980 --> 00:09:46,600
However, this class doesn't exist before
4.0, so I need to test that first.

114
115
00:09:46,600 --> 00:09:53,050
I do that by calling NSClassFromString passing in the
class name, this will either return the class object

115
116
00:09:53,050 --> 00:09:56,170
that exists or it will return nil if it doesn't.

116
117
00:09:56,170 --> 00:10:01,010
If it's not nil, I can go ahead and use that variable
as I would, I would've used the class to begin with.

117
118
00:10:01,010 --> 00:10:04,910
Here, allocating and initializing an instance.

118
119
00:10:06,170 --> 00:10:12,150
Functionality is also added by, by adding
new methods to already existing classes.

119
120
00:10:12,150 --> 00:10:16,310
For instance, if you want to support
multitasking it's good, it's a good idea to test

120
121
00:10:16,310 --> 00:10:18,860
if the device you're on actually supports it.

121
122
00:10:18,860 --> 00:10:24,630
However, prior to 4.0, this method didn't exist.

122
123
00:10:24,630 --> 00:10:26,450
That's easy enough to remedy.

123
124
00:10:26,450 --> 00:10:32,210
We can test whether or not a particular object implements
a method by using the responds to selector method,

124
125
00:10:32,210 --> 00:10:34,630
passing in the selector of the method we want to call.

125
126
00:10:34,630 --> 00:10:37,900
In this case, is multitasking supported?

126
127
00:10:37,900 --> 00:10:43,830
If that returns yes, we can go
ahead and call it as we were before.

127
128
00:10:43,830 --> 00:10:48,500
Slightly less often, but it still happens,
functionality is added by adding a new function.

128
129
00:10:48,500 --> 00:10:55,940
In this case, this is a function that was added in
OS 3.2 for writing graphics directly to a PDF file.

129
130
00:10:55,940 --> 00:11:02,150
Now again, if I want to run on something prior
to 3.2, this function won't exist at run time.

130
131
00:11:02,150 --> 00:11:07,420
To get around that, I can just test that
the function's address is not equal to NULL.

131
132
00:11:07,420 --> 00:11:12,430
If it's not NULL, the function exists and I can call it.

132
133
00:11:12,430 --> 00:11:18,000
Similarly, there are also constant objects
such as string constants that are often used

133
134
00:11:18,000 --> 00:11:23,310
as notification names, keys in
the dictionaries and other uses.

134
135
00:11:23,310 --> 00:11:29,300
Again, just like with functions, I can test
that the address of this symbol is not null,

135
136
00:11:29,300 --> 00:11:32,440
if it's not null, I can use it just as before.

136
137
00:11:32,440 --> 00:11:40,320
It's very important, even though the simulator on the
device have gotten much closer in the, in these respects,

137
138
00:11:40,320 --> 00:11:42,830
to always test your code on an actual device.

138
139
00:11:42,830 --> 00:11:48,770
Now to do that we'll have to talk about device provisioning.

139
140
00:11:54,060 --> 00:12:00,090
There were new features added in in
4.0 for Automatic Device Provisioning.

140
141
00:12:00,090 --> 00:12:06,980
I'm going to tell you about how, how you can use that,
when it's appropriate to use that, when you can't use that.

141
142
00:12:06,980 --> 00:12:10,320
These include situations such as
Custom Provisioning Profiles

142
143
00:12:10,320 --> 00:12:14,510
that require custom app IDs and distribution profiles.

143
144
00:12:14,510 --> 00:12:20,370
I'll also talk to you about the Developer
Profile which was introduced in 3.2.

144
145
00:12:20,370 --> 00:12:27,460
The Automatic Provisioning feature added in 4.0, quite
simply, when you add a new device or you tell Xcode

145
146
00:12:27,460 --> 00:12:32,770
to synchronize with the portal, it will check
if you, if you have a Development Certificate,

146
147
00:12:32,770 --> 00:12:35,620
if you don't, it will submit the CSR for you.

147
148
00:12:35,620 --> 00:12:41,520
You don't have to go to Keychain Access, you don't have
to go to the portal, it does it all from within Xcode.

148
149
00:12:41,520 --> 00:12:48,950
Additionally, if you are an agent or an admin or a
single person on an individual team, it will go ahead

149
150
00:12:48,950 --> 00:12:51,090
and approve that CSR for you immediately.

150
151
00:12:51,090 --> 00:12:54,340
So, the certificate is ready for downloading.

151
152
00:12:54,340 --> 00:12:59,790
Additionally, when you add a device, we will
create what we call a Team Provisioning Profile.

152
153
00:12:59,790 --> 00:13:05,800
This is a profile that includes all of the devices on
your team, all of the signing certificates on your team

153
154
00:13:05,800 --> 00:13:09,760
and has a wild card app ID, so it
can be used by anyone on your team,

154
155
00:13:09,760 --> 00:13:14,450
for any of the devices with any bundle identifier.

155
156
00:13:14,450 --> 00:13:19,610
Finally, we download all of the provision
profiles for which you have a certificate,

156
157
00:13:19,610 --> 00:13:22,900
including the uni, the team provisioning profile.

157
158
00:13:22,900 --> 00:13:32,210
This automatic provision this automatic provisioning,
despite the fact that Xcode will download all

158
159
00:13:32,210 --> 00:13:38,540
of these profiles, cannot be used to create custom profiles,
for this you'll still need to go to the Program Portal.

159
160
00:13:38,540 --> 00:13:44,210
These include situations such as in app purchase, post
notifications, Game Center and keychain data sharing.

160
161
00:13:44,210 --> 00:13:49,380
All things where you need a specific, explicit
app ID, however, after they are created,

161
162
00:13:49,380 --> 00:13:51,910
they will still be downloaded automatically by Xcode.

162
163
00:13:51,910 --> 00:13:59,050
In 3.2, we introduced a new feature
we're calling the Developer Profile.

163
164
00:13:59,050 --> 00:14:03,100
This is a single file that includes
all of your certificates,

164
165
00:14:03,100 --> 00:14:07,890
all of your provision profiles,
packaged up by Xcode in a single file.

165
166
00:14:07,890 --> 00:14:13,960
You can then, after exporting this from one
working machine, you can then take it and import it

166
167
00:14:13,960 --> 00:14:17,200
on another machine to get set up immediately.

167
168
00:14:17,200 --> 00:14:20,680
This will copy all of your certificates,
including the private keys,

168
169
00:14:20,680 --> 00:14:23,050
all of your profiles and get you up and running.

169
170
00:14:23,050 --> 00:14:28,510
Now I'm going to show you a little of what's
involved in the Automatic Profile feature.

170
171
00:14:28,510 --> 00:14:37,070
[ Background noise ]

171
172
00:14:37,070 --> 00:14:43,680
Okay, I'm going to start by going to the Organizer, you see
I've got a device here, it's got no Provisioning profiles,

172
173
00:14:43,680 --> 00:14:49,650
got no profiles on my Mac and I have no certificates.

173
174
00:14:49,650 --> 00:14:57,780
I'm going to start by right clicking on this device
or Ctrl clicking on this device and I'm going

174
175
00:14:57,780 --> 00:14:59,590
to add the device to my Provisioning Portal.

175
176
00:14:59,590 --> 00:15:01,510
It's going to ask me for login

176
177
00:15:01,510 --> 00:15:08,480
[ logging in ]

177
178
00:15:08,480 --> 00:15:09,520
Okay, it's fetching information.

178
179
00:15:09,520 --> 00:15:12,580
It's found that I don't have a Signing Certificate yet.

179
180
00:15:12,580 --> 00:15:16,410
So I'm going to tell it Yes, submit the request.

180
181
00:15:16,410 --> 00:15:23,370
Since this is an individual team and I'm automatically an
admin or agent on it, it approved the request immediately

181
182
00:15:23,370 --> 00:15:30,630
and downloaded the certificates to my keychain as well
as downloading and installing the Team Profile as well

182
183
00:15:30,630 --> 00:15:34,490
as other profiles that had already been created.

183
184
00:15:35,980 --> 00:15:37,360
There's nothing else to do.

184
185
00:15:37,360 --> 00:15:40,760
That sets you up for building and running on a device.

185
186
00:15:40,760 --> 00:15:47,080
[ Applause ]

186
187
00:15:47,080 --> 00:15:53,560
And with that, I'll hand it off to Chris Skogen
to talk to you about Application Life Cycle.

187
188
00:15:57,330 --> 00:15:58,960
>> Chris Skogen: Thanks Clark.

188
189
00:16:01,370 --> 00:16:07,060
I'm going to talk to you guys about the last
piece of development for the iPhone and iPad.

189
190
00:16:07,060 --> 00:16:12,510
Typically in the past Xcode has kind of left
you out to dry after you've built your product.

190
191
00:16:12,510 --> 00:16:19,390
Once you've tested it, built it, debug it, you're left
to handle what to do with the product that you built.

191
192
00:16:19,390 --> 00:16:20,560
How do I submit it to the store?

192
193
00:16:20,560 --> 00:16:22,280
Well you would go to the Portal and submit it.

193
194
00:16:22,280 --> 00:16:23,650
How do I Beta test with it?

194
195
00:16:23,650 --> 00:16:29,380
Well you would have to maintain a directory of all the
different builds that you have and you'd have to make sure

195
196
00:16:29,380 --> 00:16:32,140
that you knew which ones were going out for Beta testing.

196
197
00:16:32,140 --> 00:16:36,560
Well, we're going to talk about some of the
new things that Xcode and the SDK can do

197
198
00:16:36,560 --> 00:16:40,700
to helps you manage building and distributing your product.

198
199
00:16:40,700 --> 00:16:45,080
The first one of these features is Build Time Validation.

199
200
00:16:45,080 --> 00:16:52,590
We've built in Xcode the capability to do offline validation
of your app before you even submit it to the store.

200
201
00:16:52,590 --> 00:16:58,540
You can actually do this as a Build setting
so you go into the project, click a check box,

201
202
00:16:58,540 --> 00:17:04,930
turn it on as a Build setting and every time you build, your
app will be checked for things that can be checked offline.

202
203
00:17:04,930 --> 00:17:10,470
This includes icons and proper Plists and things like that.

203
204
00:17:10,470 --> 00:17:14,820
The second feature we're going to
discuss will be Build and Archive.

204
205
00:17:14,820 --> 00:17:20,240
Build and Archive is a facility to save all of
your projects off to a little archive format

205
206
00:17:20,240 --> 00:17:26,430
where you can have the application that you've built and
the DSIM that was created when the application was built.

206
207
00:17:26,430 --> 00:17:28,700
It will maintain that going forward in time.

207
208
00:17:28,700 --> 00:17:35,680
Whenever you hit Build and Archive it will add another
archived application to that list and you can continue

208
209
00:17:35,680 --> 00:17:39,910
to distribute those and you have a history going back.

209
210
00:17:39,910 --> 00:17:43,460
The third thing that we're going to
discuss will be Online Validation.

210
211
00:17:43,460 --> 00:17:48,580
Instead of just submitting to the store to see what
will happen with your application on the store,

211
212
00:17:48,580 --> 00:17:52,980
you can actually submit for Validation from Xcode.

212
213
00:17:52,980 --> 00:17:56,770
Xcode will take your app, sign it, send it to the store.

213
214
00:17:56,770 --> 00:18:03,130
The store will do all of the automated validation that
the store will do, but your app will not be submitted.

214
215
00:18:03,130 --> 00:18:10,040
That way you can get regular feedback on you know, the
likelihood of success for your app by getting validation.

215
216
00:18:10,040 --> 00:18:14,940
Last, the fourth thing we're going to
talk about is submitting to the store.

216
217
00:18:14,940 --> 00:18:20,620
Xcode can now submit directly to the store, so
you don't have to do that through iTunes Connect.

217
218
00:18:20,620 --> 00:18:27,450
And we're going to discuss using Crash Logs after
you've distributed your app to your customers.

218
219
00:18:27,450 --> 00:18:30,130
Let's start with Build Time Validation.

219
220
00:18:30,130 --> 00:18:32,170
Like I said earlier, it is a Build setting.

220
221
00:18:32,170 --> 00:18:35,890
You can see it here, Validate Build Product.

221
222
00:18:35,890 --> 00:18:44,020
You turn it on and every time you build for a
device in Xcode, your app will be validated offline.

222
223
00:18:44,020 --> 00:18:49,010
It's not all of the tests that the store does but
it's everything that can be done on your machine.

223
224
00:18:49,010 --> 00:18:53,870
We recommend that you do this often,
early, as much as you can.

224
225
00:18:53,870 --> 00:19:04,710
Turn on the Build setting every time you build,
catch errors before you try to submit to the store.

225
226
00:19:04,710 --> 00:19:09,050
Build Time Validation will check icons,
it will check your plist structure

226
227
00:19:09,050 --> 00:19:16,840
and it will also check bundle ID amongst other things.

227
228
00:19:16,840 --> 00:19:22,170
Archived applications is a great feature
that we're pretty happy to have done.

228
229
00:19:22,170 --> 00:19:26,570
It will actually, like I said earlier,
will save all of the builds that you make,

229
230
00:19:26,570 --> 00:19:31,200
that you might want to distribute
either to Beta test or to the store.

230
231
00:19:31,200 --> 00:19:39,160
So, if you have a process of doing builds for Beta
testing or builds for your, your employees to try out,

231
232
00:19:39,160 --> 00:19:43,180
this is a great way to save them and
you can have an archive going back.

232
233
00:19:43,180 --> 00:19:48,560
This actually beats, beats just having
the SCM version or just the source code,

233
234
00:19:48,560 --> 00:19:51,080
because again, built products are always different.

234
235
00:19:51,080 --> 00:19:55,320
If you build the product, you get the
DSIM with it, you archive it, it's saved.

235
236
00:19:55,320 --> 00:19:58,320
You can always go back to that
exact build and that exact DSIM

236
237
00:19:58,320 --> 00:20:01,930
and that will be very important
later when we get to Crash Logs.

237
238
00:20:01,930 --> 00:20:05,720
It's a simple menu item.

238
239
00:20:05,720 --> 00:20:09,570
It's next to Build, it's Build and Archive.

239
240
00:20:09,570 --> 00:20:17,490
It preserves the out build exactly like it was, puts it in
a library so you can find it and you can keep it forever.

240
241
00:20:20,790 --> 00:20:25,150
Online Validation, the third piece of this puzzle.

241
242
00:20:25,150 --> 00:20:31,150
Online Validation is similar to submitting to the
store, it just does not actually submit to the store.

242
243
00:20:31,150 --> 00:20:37,040
When you choose Online Validation, you will need your
application to be already registered with iTunes Connect,

243
244
00:20:37,040 --> 00:20:40,380
the distribution profile will be
required, you'll have to choose that

244
245
00:20:40,380 --> 00:20:48,300
and it will run all the automated
app store review validation tests.

245
246
00:20:48,300 --> 00:20:50,970
Online Validation can detect some other errors.

246
247
00:20:50,970 --> 00:20:57,790
The Bundle version needs to be increased,
missing icon sizes, code signing and entitlements

247
248
00:20:57,790 --> 00:21:00,860
and we will suggest those fixes
after the process is complete.

248
249
00:21:00,860 --> 00:21:08,170
So when it comes back and says your code signing is
wrong or you're missing an icon, it will tell you,

249
250
00:21:08,170 --> 00:21:12,900
point you in the direction of how to fix it.

250
251
00:21:12,900 --> 00:21:17,150
Once you've done all that and you're getting
ready to actually upload it to the store,

251
252
00:21:17,150 --> 00:21:22,450
that submission in Xcode is almost exactly the
same as actually submitting for online validation.

252
253
00:21:22,450 --> 00:21:27,940
You just choose a bun, an archived application
from Xcode and you press Submit To Store.

253
254
00:21:27,940 --> 00:21:32,770
All of your marketing materials will still
have to be submitted via iTunes Connect

254
255
00:21:32,770 --> 00:21:38,790
but at least Xcode can handle the actual
application and everything that's needed for that.

255
256
00:21:38,790 --> 00:21:42,870
So now you've got your application
in the store, people are using it,

256
257
00:21:42,870 --> 00:21:46,310
you're starting to get reports that you have crashes.

257
258
00:21:46,310 --> 00:21:52,180
We actually are gathering crash reports from your
customer if they've opted in, in iTunes to have that done.

258
259
00:21:52,180 --> 00:21:57,110
Those crash reports will go up to the store and
they'll be available on your iTune Connect account

259
260
00:21:57,110 --> 00:22:00,620
so you can go get customers crash reports.

260
261
00:22:00,620 --> 00:22:04,930
It's not all of them but it is kind of an
aggregation of everything that will come in.

261
262
00:22:04,930 --> 00:22:08,260
You can also get crash reports directly from your users.

262
263
00:22:08,260 --> 00:22:12,230
The crash reports are captured by
iTunes and put on their local drive.

263
264
00:22:12,230 --> 00:22:19,390
Many of you probably have seen them, the user can
get those and mail them to you and you can use them.

264
265
00:22:19,390 --> 00:22:26,550
Now if you did build and archive and have the built
application with the DSIMs and you have a crash report

265
266
00:22:26,550 --> 00:22:33,330
in Xcode, you can symbolicate your, that crash
to the built version that the customer had.

266
267
00:22:33,330 --> 00:22:39,930
So ultimately the crash will come up and you can
see exactly in your source where it went down.

267
268
00:22:39,930 --> 00:22:42,510
So let's take a look at some of
these things and see how they look.

268
269
00:22:42,510 --> 00:22:50,100
[ Background noise ]

269
270
00:22:50,100 --> 00:22:54,400
I'm going to start up Xcode here.

270
271
00:22:54,400 --> 00:22:57,990
I've got my Picture Viewer application
that I've been working on.

271
272
00:23:01,350 --> 00:23:05,210
And we're going to be actually building it for a device.

272
273
00:23:05,210 --> 00:23:09,480
Now, first thing I want to do is I want to
do the Build Time Validation on this project.

273
274
00:23:09,480 --> 00:23:17,690
So, let's go into the Project Settings,
I'm going to type Validate,

274
275
00:23:17,690 --> 00:23:22,060
filter it down so I don't have to
look for it, Validate Built Product.

275
276
00:23:22,060 --> 00:23:31,330
Great. Save that, I'm going to clean
this project and go ahead and build.

276
277
00:23:31,330 --> 00:23:36,660
We'll see it going through its Build process and when it's
done, you'll see a couple of quick signs, like code signing

277
278
00:23:36,660 --> 00:23:38,900
and Validate Built Product there at the end.

278
279
00:23:38,900 --> 00:23:41,230
Now what I see is I see a warning.

279
280
00:23:41,230 --> 00:23:46,580
icon PNG, icon dimensions 57 x 57
don't meet the size requirements.

280
281
00:23:46,580 --> 00:23:49,840
Well, that's an easy fix, I still have the icon here.

281
282
00:23:49,840 --> 00:23:57,510
Let's check the plist, no entry for that icon on the
plist, well, alright, let's go ahead and fix that.

282
283
00:23:57,510 --> 00:24:05,430
[ Background noise ]

283
284
00:24:05,430 --> 00:24:10,670
Done. We'll save, now we'll go ahead and build.

284
285
00:24:10,670 --> 00:24:12,850
Complete, the warning's gone.

285
286
00:24:12,850 --> 00:24:16,130
That will find other things, but
again that's the Offline Validation.

286
287
00:24:16,130 --> 00:24:21,500
Does not contact the store and we
want you to do that early and often.

287
288
00:24:21,500 --> 00:24:26,170
So now we've gotten that far, so let's go
ahead and get ready for a Beta test run.

288
289
00:24:26,170 --> 00:24:29,040
I'm going to go ahead and hit Build and Archive.

289
290
00:24:29,040 --> 00:24:36,520
And it already built so at this point it takes the built
product in the DSIM and it creates an archive and you'll see

290
291
00:24:36,520 --> 00:24:42,640
in the organizer, there's a source item for Archived
Applications and I will see My Application Photo view.

291
292
00:24:42,640 --> 00:24:47,180
I can expand that and I can see the one I did right now.

292
293
00:24:47,180 --> 00:24:50,480
Let's go take a look at what this thing
actually looks like while we're here.

293
294
00:24:50,480 --> 00:24:59,010
I can reveal the archived application in
Finder and you'll see what is being done.

294
295
00:24:59,010 --> 00:25:05,280
Archived applications, we've got a little unique
identifier, followed by the Built application,

295
296
00:25:05,280 --> 00:25:11,660
the DSIM for that application and this plist is
just information for Xcode to identify the archives

296
297
00:25:11,660 --> 00:25:13,220
and display them for you in the organizer.

297
298
00:25:13,220 --> 00:25:16,280
So now we have our built product.

298
299
00:25:16,280 --> 00:25:20,830
I want to send that out to Beta testers, great.

299
300
00:25:20,830 --> 00:25:23,760
So I choose the Built Product, I go down to the bottom here,

300
301
00:25:23,760 --> 00:25:26,780
we have three buttons for the things
we've been talking about.

301
302
00:25:26,780 --> 00:25:28,890
One of them is Share Application.

302
303
00:25:28,890 --> 00:25:36,890
I'll push Share Application and at that point I'm prompted
to choose a Distribution Certificate signing identity.

303
304
00:25:36,890 --> 00:25:39,950
Like we said, I'm going to do this for Beta testers.

304
305
00:25:39,950 --> 00:25:43,580
So I'm going to choose my Ad Hoc Distribution Certificate.

305
306
00:25:46,230 --> 00:25:50,310
Once I've got that I can go ahead an email the application.

306
307
00:25:50,310 --> 00:25:56,670
Now Xcode will take my archived application and re-sign
it for the distribution certificate I just chose

307
308
00:25:56,670 --> 00:26:01,120
and in this case I hit Share Via Email
so it's going to put it in an email.

308
309
00:26:01,120 --> 00:26:05,960
Now, my Beta testers are also going to need the
provisioning profile for that so I'm just going to go ahead

309
310
00:26:05,960 --> 00:26:10,100
and drag that in there too and
sign this out to Beta testers.

310
311
00:26:10,100 --> 00:26:14,700
Now when your Beta tester gets that,
they install the Provisioning Profile

311
312
00:26:14,700 --> 00:26:19,410
and the app and they are up and running.

312
313
00:26:19,410 --> 00:26:24,510
So now we've sent that out to our Beta
testers and we got some feedback, oops,

313
314
00:26:24,510 --> 00:26:27,280
we got some feedback that there was some bugs in it.

314
315
00:26:27,280 --> 00:26:33,410
And let's imagine for the moment that in the process
of fixing the bugs, I also broke this icon again.

315
316
00:26:33,410 --> 00:26:39,060
SCM error, I screwed up a merge, I
lost that change, whatever happened.

316
317
00:26:39,060 --> 00:26:44,800
So I fixed my other bug in Xcode
that the Beta testers had found.

317
318
00:26:44,800 --> 00:26:55,060
And let's say I just went ahead and did
Build An Archive and I ignored this warning.

318
319
00:26:55,060 --> 00:26:59,400
I do have another archive here because it built
successfully, it was just a validation warning.

319
320
00:26:59,400 --> 00:27:08,760
4345 that's the one I just did, okay, so now I'm gong to
submit this application for Online Validation at the store.

320
321
00:27:08,760 --> 00:27:14,150
We're getting closer, we're done with our Beta test, the
bugs have been fixed, now let's see what the store says.

321
322
00:27:14,150 --> 00:27:26,520
So I'll put in my password, user name, again,
it's similar to what we saw for exporting

322
323
00:27:26,520 --> 00:27:29,060
or sharing an application with Beta testers.

323
324
00:27:29,060 --> 00:27:34,310
I'm prompted for a certificate to use, now when I'm
doing the store, either submitting or validating,

324
325
00:27:34,310 --> 00:27:39,530
I'm going to need to choose my iPhone distribution profile.

325
326
00:27:39,530 --> 00:27:42,320
And this application is the application that's on the store.

326
327
00:27:42,320 --> 00:27:47,730
The one that you registered with iTunes Connect, so
I'm going to tell it that I'm submitting an application

327
328
00:27:47,730 --> 00:27:53,250
for validation that is Picture Viewer and I'll validate it.

328
329
00:27:53,250 --> 00:27:57,310
And it's done and it comes back and Xcode tells me

329
330
00:27:57,310 --> 00:28:01,130
that Photo View has failed the
validation because of the following issue.

330
331
00:28:01,130 --> 00:28:03,070
You're missing the icon again.

331
332
00:28:03,070 --> 00:28:07,210
Okay, well that's an easy fix, we know how
to fix it, we'll go back through our process,

332
333
00:28:07,210 --> 00:28:12,010
add it to our info Plist and get it done.

333
334
00:28:12,010 --> 00:28:14,200
So let's do this one more time.

334
335
00:28:14,200 --> 00:28:21,660
Now we're going to take a look at another new feature
in sharing which is Enterprise App Deployment.

335
336
00:28:21,660 --> 00:28:23,510
Let me add this back in.

336
337
00:28:23,510 --> 00:28:31,130
[ Background noise ]

337
338
00:28:31,130 --> 00:28:36,080
Alright. So we've built our app successfully,
let's build an archive once again.

338
339
00:28:36,080 --> 00:28:43,160
So now you can see the value in this organizer as we're
going through builds that we're going to do things with.

339
340
00:28:43,160 --> 00:28:49,700
I'm actually saving them out and I can keep them for
a long time and go back and see which build I sent

340
341
00:28:49,700 --> 00:28:53,070
to the store, which build I sent out for Beta test.

341
342
00:28:53,070 --> 00:28:58,930
So let's choose the latest one and I'm going
to share the application and I'm going to do,

342
343
00:28:58,930 --> 00:29:04,790
I'm going to do my AdHoc distribution and I'm
going to distribute it for the Enterprise.

343
344
00:29:04,790 --> 00:29:09,930
Now, what it's going to ask me for is
a bunch of information that's needed

344
345
00:29:09,930 --> 00:29:12,440
for the manifest file to put on the web server.

345
346
00:29:12,440 --> 00:29:22,510
So this is the URL where it's going to, where's
it's going to be downloaded from and a title

346
347
00:29:22,510 --> 00:29:31,130
[ Background noise ]

347
348
00:29:31,130 --> 00:29:32,930
It's an awesome app.

348
349
00:29:32,930 --> 00:29:39,580
Then also the URL to the large image for
the app and a URL for the small image.

349
350
00:29:39,580 --> 00:29:45,400
And it's going to ask me where to put this
and I'm going to say put it on my desktop.

350
351
00:29:45,400 --> 00:29:54,110
Now this is everything you need
for Enterprise App Deployment.

351
352
00:29:54,110 --> 00:30:00,040
At this point, it builds it, it takes your built
application, again, signs it, puts it in a IPA

352
353
00:30:00,040 --> 00:30:04,730
and builds the Plist or the manifest file
that's used for Enterprise App Deployment.

353
354
00:30:04,730 --> 00:30:11,190
We can get rid of that.

354
355
00:30:11,190 --> 00:30:14,790
So that's kind of it for our quick tour of the features.

355
356
00:30:16,730 --> 00:30:22,970
I hope you guys all appreciate and see the value in some of
the Build and Archive features that we've put into the end

356
357
00:30:22,970 --> 00:30:28,150
of Xcode and we hope it helps you guys manage
your builds as you prepare them for the store

357
358
00:30:28,150 --> 00:30:35,580
and help you do good Beta testing and
in the end, get a fine selling product.

358
359
00:30:35,580 --> 00:30:37,900
So that's it for me, I'm going to give it back to Mark.

359
360
00:30:37,900 --> 00:30:38,970
Thanks a lot.

360
361
00:30:38,970 --> 00:30:44,540
[ Applause ]

361
362
00:30:44,540 --> 00:30:45,540
>> Marc Verstaen: Thank you Chris.

362
363
00:30:45,540 --> 00:30:54,190
So, I hope it's much clearer now and you are all ready
to ship and you know how to take advantage of Xcode

363
364
00:30:54,190 --> 00:30:59,040
to structure your project, to test
your app and to manage your life cycle.

364
365
00:30:59,040 --> 00:31:05,050
We do welcome your feedback so we intend
to have a Q & A session right now.

365
366
00:31:05,050 --> 00:31:09,000
Before we go to that I want to provide
you with a little bit more information,

366
367
00:31:09,000 --> 00:31:12,820
if you have any questions, contact
Michael, who is right there.

367
368
00:31:12,820 --> 00:31:18,650
You can go to the iPhone Dev Center, we have Developer
Forum that are very active and we do monitor all of them.

368
369
00:31:18,650 --> 00:31:19,790
Please go there.

369
370
00:31:19,790 --> 00:31:26,180
Apple developer forum, also of course,
we have a lot of really neat sessions.

370
371
00:31:26,180 --> 00:31:29,540
One is already done of course,
it's the part 1 of this thing.

371
372
00:31:29,540 --> 00:31:36,950
You can also attend sometime this afternoon,
How to Automate Your User Interface.

372
373
00:31:36,950 --> 00:31:38,660
I do encourage you to look into that.

373
374
00:31:38,660 --> 00:31:44,010
It's very important, it's very interesting, it's a
great feature to do automatic testing of your apps.

374
375
00:31:44,010 --> 00:31:50,810
You can also learn how to better use Interface
builder, great tool and of course the Introduction

375
376
00:31:50,810 --> 00:31:54,350
to Xcode 4 before you go to Acquisition With iTunes Connect.

376
