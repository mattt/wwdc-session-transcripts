
1
00:00:08,726 --> 00:00:12,537
Good morning everyone.

2
00:00:12,537 --> 00:00:15,104
Thank you for coming.

3
00:00:15,104 --> 00:00:17,840
So. This is session 212. Basics + Habits.

4
00:00:17,840 --> 00:00:22,285
Building your software projects to last.

5
00:00:22,285 --> 00:00:26,484
I am Ken Kocienda and again, thank you for coming.

6
00:00:26,484 --> 00:00:30,680
So, I think, right, when you think about building a

7
00:00:30,680 --> 00:00:32,404
great project, I mean, it means for us,

8
00:00:32,404 --> 00:00:35,692
for this audience, it means building a great application.

9
00:00:35,692 --> 00:00:37,165
Right? That's why you're at WWDC.

10
00:00:37,165 --> 00:00:42,748
You're an app developer and you want to make great apps.

11
00:00:42,748 --> 00:00:45,476
And if you are successful in making an app

12
00:00:45,476 --> 00:00:47,336
it means that your app is probably going

13
00:00:47,336 --> 00:00:49,664
to change. You're gonna be shipping updates

14
00:00:49,664 --> 00:00:52,890
to app as new features, new OS releases

15
00:00:52,890 --> 00:00:53,672
come out

16
00:00:53,672 --> 00:00:56,760
There gonna be bugfixes, updates, you know,

17
00:00:56,760 --> 00:00:57,969
all of these kinds of things.

18
00:00:57,969 --> 00:01:02,504
So success means, your software is going to change.

19
00:01:02,504 --> 00:01:03,520
And you probably know that

20
00:01:03,520 --> 00:01:05,104
radical changes rarely work.

21
00:01:05,104 --> 00:01:08,120
If you take the example from biology

22
00:01:08,120 --> 00:01:10,604
there only in evolution, most mutations

23
00:01:10,604 --> 00:01:12,377
kill the organism right, you have

24
00:01:12,377 --> 00:01:15,397
a radical change, it doesn't work.

25
00:01:15,397 --> 00:01:18,692
The same holds true for software

26
00:01:18,692 --> 00:01:21,472
So, incremental change is better.

27
00:01:21,472 --> 00:01:23,220
Last year, how many of you saw

28
00:01:23,220 --> 00:01:25,370
my "Easy-to-change code" talk,

29
00:01:25,370 --> 00:01:26,365
last year perhaps?

30
00:01:26,365 --> 00:01:27,327
Oh, there are a couple of hands...

31
00:01:27,327 --> 00:01:28,965
Security, those are the people.

32
00:01:28,965 --> 00:01:30,229
You probably wanna leave.

33
00:01:30,229 --> 00:01:31,185
They're crazy enough to come to my

34
00:01:31,185 --> 00:01:32,545
talk to years in a row.

35
00:01:32,545 --> 00:01:35,785
But no, thank you, thank you for coming again.

36
00:01:35,785 --> 00:01:37,608
But for those of you who weren't here

37
00:01:37,608 --> 00:01:40,288
last year with the easy-to-change code talk,

38
00:01:40,288 --> 00:01:45,288
I talked about this mental change idea last year,

39
00:01:45,288 --> 00:01:49,448
but in getting some of your feedback

40
00:01:49,448 --> 00:01:52,296
I realized there were some problems with some

41
00:01:52,296 --> 00:01:54,201
of the things that I said.

42
00:01:54,201 --> 00:01:58,152
Like: I talked about notifications.

43
00:01:58,152 --> 00:02:00,705
I said in one part of the talk: "Notifications are

44
00:02:00,705 --> 00:02:03,317
good, because the promoto loose coupling.

45
00:02:03,317 --> 00:02:06,349
between different parts of your system and

46
00:02:06,349 --> 00:02:07,684
that's a good thing.

47
00:02:07,684 --> 00:02:10,325
But in another part of the talk I said, half jokingly

48
00:02:10,325 --> 00:02:14,476
that notifications are bad, because they're just

49
00:02:14,476 --> 00:02:16,532
glorified GOTOstatements. So kind of

50
00:02:16,532 --> 00:02:19,685
seems that both of these can't be right.

51
00:02:19,685 --> 00:02:21,925
But hang on, there's more, right?

52
00:02:21,925 --> 00:02:24,929
I also talked in my session about hygiene, alright?

53
00:02:24,929 --> 00:02:28,500
The best writing is rewriting, quoting there

54
00:02:28,500 --> 00:02:32,128
E.B. White, a great writer. But then also said

55
00:02:32,128 --> 00:02:34,986
don't trhow away old code, right? You just want to

56
00:02:34,986 --> 00:02:38,472
incrementally change software to sort of bring new

57
00:02:38,472 --> 00:02:40,833
features to it or change it, and this kind of seems again

58
00:02:40,833 --> 00:02:44,824
both of those cant be right. It's paradox

59
00:02:44,824 --> 00:02:46,484
you wind up with this: Too many cooks

60
00:02:46,484 --> 00:02:48,509
spoil the broth, but many hands make

61
00:02:48,509 --> 00:02:49,645
light work.

62
00:02:49,645 --> 00:02:52,628
Right? Again: Things don't seem to make sense

63
00:02:52,628 --> 00:02:56,360
when you say them both at the same time.

64
00:02:56,360 --> 00:02:58,621
But, of course, they do I think in all of these

65
00:02:58,621 --> 00:03:02,840
cases, if you say one of these things in the right

66
00:03:02,840 --> 00:03:03,804
context, right?

67
00:03:03,804 --> 00:03:05,649
Those tatements don't exist in a vacuum

68
00:03:05,649 --> 00:03:07,396
When they, do, yeah, you can wind up with

69
00:03:07,396 --> 00:03:10,206
nonsense. But if you've got the context

70
00:03:10,206 --> 00:03:13,464
if you know how to match one of these things

71
00:03:13,464 --> 00:03:15,400
it can make sense.

72
00:03:15,400 --> 00:03:23,109
and so this talk is really the context, i think, for that

73
00:03:23,109 --> 00:03:24,929
incremental change that I talked about last

74
00:03:24,929 --> 00:03:28,496
year, fills in more of the detail. you can kind of

75
00:03:28,496 --> 00:03:30,628
understand, perhaps even go out on iTunes and look

76
00:03:30,628 --> 00:03:32,616
at last years talk this year and sort of have

77
00:03:32,616 --> 00:03:35,492
our own little time travel.

78
00:03:35,492 --> 00:03:37,804
Right, it's the context of incremental change.

79
00:03:37,804 --> 00:03:39,901
Basics + Habits. What does that mean?

80
00:03:39,901 --> 00:03:42,621
Basics: When I basics, it's the fundamental

81
00:03:42,621 --> 00:03:47,741
choices that you make at the start of a project.

82
00:03:47,741 --> 00:03:50,352
You kind of make this whole serie

83
00:03:50,352 --> 00:03:52,684
of choices about what your project's gonna

84
00:03:52,684 --> 00:03:55,212
what your idea is, what software to use, all

85
00:03:55,212 --> 00:03:57,200
of these kinds of things. All those mental choices

86
00:03:57,200 --> 00:03:59,409
you make at the beginning of a project.

87
00:03:59,409 --> 00:04:01,784
And then Habits are the things that you do

88
00:04:01,784 --> 00:04:04,608
every day after that.

89
00:04:04,608 --> 00:04:06,782
Building on the basics and then you actually

90
00:04:06,782 --> 00:04:08,681
go and do all the work, invest all of the

91
00:04:08,681 --> 00:04:10,657
time and effort to actually make the projec

92
00:04:10,657 --> 00:04:13,936
come to life.

93
00:04:13,936 --> 00:04:17,864
And so basics plus habits, hopefully, you;ll see

94
00:04:17,864 --> 00:04:20,821
I've got some ideas today about how this

95
00:04:20,821 --> 00:04:24,760
will create this context that then you can add

96
00:04:24,760 --> 00:04:26,300
in your incremental change, some of your ideas from

97
00:04:26,300 --> 00:04:28,730
last years talk.

98
00:04:28,730 --> 00:04:32,770
And eventyally, riught, wind up with a framework

99
00:04:32,770 --> 00:04:33,809
that will help you to make your software

100
00:04:33,809 --> 00:04:37,933
project successful and last a long time.

101
00:04:37,933 --> 00:04:42,241
I've got 6 basics that i'd like to talk about today

102
00:04:42,241 --> 00:04:44,736
i;ll go through them, the first one being

103
00:04:44,736 --> 00:04:48,617
define you physics and chemistry

104
00:04:48,617 --> 00:04:53,330
so physics and chemistry, i like this little analogy.

105
00:04:53,330 --> 00:04:56,330
you think about this in terms of software, again,

106
00:04:56,330 --> 00:04:58,760
it's an analogy, it's physics are the fundamental

107
00:04:58,760 --> 00:05:01,730
laws of your project of your software world that

108
00:05:01,730 --> 00:05:03,169
you create in your software.

109
00:05:03,169 --> 00:05:05,645
and then chemistry are the way that things can

110
00:05:05,645 --> 00:05:09,445
mix together. i'll be using this analogy quite a bit.

111
00:05:09,445 --> 00:05:12,800
and here's the first example. when I think about

112
00:05:12,800 --> 00:05:16,157
kind of a very basic, kind of block diagram, a generic

113
00:05:16,157 --> 00:05:18,949
one, physics are the blue boxes.

114
00:05:18,949 --> 00:05:21,781
they're kind of the basic, kind of elements of your system.

115
00:05:21,781 --> 00:05:24,357
particularly when you look at them from the outside

116
00:05:24,357 --> 00:05:27,977
its the basic phyics, the real sort of unchangable

117
00:05:27,977 --> 00:05:30,330
nuggets in your system. at least the fundamental;

118
00:05:30,330 --> 00:05:31,531
nuggest.

119
00:05:31,531 --> 00:05:33,900
and then the arrows are the chemistry, or the

120
00:05:33,900 --> 00:05:34,329
way these things combine, in this case like the

121
00:05:34,329 --> 00:05:38,505
Model-view-controller example, they combine

122
00:05:38,505 --> 00:05:45,410
in ways that ... in keeping that MVC pattern.

123
00:05:45,410 --> 00:05:48,181
they combine in well-defined ways, right,

124
00:05:48,181 --> 00:05:51,101
to mae your software work in the way that it does.

125
00:05:51,101 --> 00:05:53,269
so: the physics and the chemistry.

126
00:05:53,269 --> 00:05:57,493
now, i mean this is such a basic idea, such a fundamental

127
00:05:57,493 --> 00:06:00,301
idea, about how software works, that i think there

128
00:06:00,301 --> 00:06:03,850
are other analogies that people use oftentimes.

129
00:06:03,850 --> 00:06:06,297
like: nouns and verbs, where nouns are the abstractions

130
00:06:06,297 --> 00:06:08,781
and verbs are the way the things combine with each

131
00:06:08,781 --> 00:06:12,760
other. another, obviously very popular one, is objects

132
00:06:12,760 --> 00:06:15,771
and interfaces, it's the encapsulated bits and the

133
00:06:15,771 --> 00:06:18,845
exposed bits and the interfaces that you have to

134
00:06:18,845 --> 00:06:21,833
get at these exposed bits.

135
00:06:21,833 --> 00:06:25,900
i still think that physics and chemistry though is the

136
00:06:25,900 --> 00:06:28,361
best analogy, and again, i'll be returning to this quite

137
00:06:28,361 --> 00:06:32,425
a few times during the rest of the talk.

138
00:06:32,425 --> 00:06:35,293
and i do think that ultimately most coding

139
00:06:35,293 --> 00:06:39,257
is chemistry. you;re most often kind of

140
00:06:39,257 --> 00:06:41,693
using the interfaces that you create. i mean you

141
00:06:41,693 --> 00:06:45,620
create interfaces much less often than you use them.

142
00:06:45,620 --> 00:06:47,721
and of courtse this chemistry is expressed in terms

143
00:06:47,721 --> 00:06:52,565
of those interfaces, in terms of those physics.

144
00:06:52,565 --> 00:06:55,589
and so here now if we go back and look at a

145
00:06:55,589 --> 00:06:59,117
more concrete example of that diagram that i had

146
00:06:59,117 --> 00:07:03,181
before: this basically, very basically, describes

147
00:07:03,181 --> 00:07:08,393
the design for the ios keyboard text entry system, that

148
00:07:08,393 --> 00:07:11,804
I do a lot of work for. this was my design for the

149
00:07:11,804 --> 00:07:14,217
1.0 keyboard. as you can see at the top i've got a

150
00:07:14,217 --> 00:07:18,264
keyboard controller, over then on the input manager

151
00:07:18,264 --> 00:07:21,632
side right that's where ive got the model and then there

152
00:07:21,632 --> 00:07:23,457
on this side i;ve got the user interface, keyboard

153
00:07:23,457 --> 00:07:28,708
layout, textfield... really it is kind of an mvc type pattern.

154
00:07:28,708 --> 00:07:32,237
now, if i go in and add the arrows, i'd like you to look

155
00:07:32,237 --> 00:07:35,421
closely or perhaps if you can't see i'll describe the

156
00:07:35,421 --> 00:07:40,694
view side, the arrows are bidirectional. they go both

157
00:07:40,694 --> 00:07:42,582
ways.

158
00:07:42,582 --> 00:07:47,357
yet on the model side, the arrows only go one way.

159
00:07:47,357 --> 00:07:50,729
and this actually is kind of an important design idea.

160
00:07:50,729 --> 00:07:54,937
again, at the beginning a basic decision about how the

161
00:07:54,937 --> 00:07:58,730
software system was going to work. i didnt want

162
00:07:58,730 --> 00:08:01,625
the dictionary to be calling back up to the controller.

163
00:08:01,625 --> 00:08:05,900
nonono, the dictionary, the input manager system was

164
00:08:05,900 --> 00:08:09,781
called and returned a value. that's all that it did. it

165
00:08:09,781 --> 00:08:12,909
only came into the system when it was called, whereas,

166
00:08:12,909 --> 00:08:16,461
of course, the view system needed to respond to user

167
00:08:16,461 --> 00:08:19,229
touches, and of course needed to be updated

168
00:08:19,229 --> 00:08:23,549
as appropriate maybe when an autocorrection suggestion

169
00:08:23,549 --> 00:08:29,333
came in. and again here, the point is that this fundamental

170
00:08:29,333 --> 00:08:31,541
design was a basic decision that i made at the

171
00:08:31,541 --> 00:08:36,133
beginning of the project. and that i carried through

172
00:08:36,133 --> 00:08:40,363
through the rest of system. it wasnt liek this.

173
00:08:40,363 --> 00:08:43,336
very specifically it wasnt like that where anything could

174
00:08:43,336 --> 00:08:45,657
call anything else.

175
00:08:45,657 --> 00:08:47,913
of course it wouldn't be a show if it didnt have

176
00:08:47,913 --> 00:08:53,700
flames. so this is a much more kind of sensible

177
00:08:53,700 --> 00:08:59,257
basic design for an mvc system.

178
00:08:59,257 --> 00:09:00,537
ok.

179
00:09:00,537 --> 00:09:03,757
So the idea is I think, too, is I think you wanna strive

180
00:09:03,757 --> 00:09:06,956
for solid physics, again for those last example those

181
00:09:06,956 --> 00:09:11,655
big blue boxes, they were senisble. sensible design.

182
00:09:11,655 --> 00:09:17,765
sensible big ideas for compoentns of the system

183
00:09:17,765 --> 00:09:20,956
and so you wanna strive for that solid physics at

184
00:09:20,956 --> 00:09:22,901
the beginning of your project and you don;t wan to

185
00:09:22,901 --> 00:09:25,841
be redefining the rules of your universe very lightly.

186
00:09:25,841 --> 00:09:27,973
of course you can;t change gravity and the

187
00:09:27,973 --> 00:09:29,960
conservation of energy and these are the physics

188
00:09:29,960 --> 00:09:33,937
of the natural world are decided for us, but in your

189
00:09:33,937 --> 00:09:36,968
software you can change this just about as want.

190
00:09:36,968 --> 00:09:43,730
But dont! with great power comes great resposibilyt, right?

191
00:09:43,730 --> 00:09:45,257
You wanna kind of get your physics right at the start

192
00:09:45,257 --> 00:09:47,296
of your project if you can.

193
00:09:47,296 --> 00:09:49,409
and perhaps maybe even the final way of talking

194
00:09:49,409 --> 00:09:52,132
about this is maybe a little bit more playful.

195
00:09:52,132 --> 00:09:54,821
maybe something that makes writing softeware so

196
00:09:54,821 --> 00:09:56,709
attractive to all of us is that you can make it a

197
00:09:56,709 --> 00:10:01,925
sandbox that then you go and play with. again it is

198
00:10:01,925 --> 00:10:03,997
sort of like you have that good feeling about a god

199
00:10:03,997 --> 00:10:07,469
successful project which you have made light and

200
00:10:07,469 --> 00:10:09,837
and you enjoy improving it, making it better, and

201
00:10:09,837 --> 00:10:11,727
then of course, all of you are going to make great apps.

202
00:10:11,727 --> 00:10:13,913
that go out to customers and you get great feedback

203
00:10:13,913 --> 00:10:16,305
from them. it feels good if you have a successful

204
00:10:16,305 --> 00:10:19,249
project like that.

205
00:10:19,249 --> 00:10:26,857
So again: defining phsycs and chemistry, the first basic decision you need to make.

206
00:10:26,857 --> 00:10:29,537
second: choosing the right technology.

207
00:10:29,537 --> 00:10:31,593
make a technology choice for how you;re going to

208
00:10:31,593 --> 00:10:33,889
make your project work right at the beginning.

209
00:10:33,889 --> 00:10:36,957
now, of cours,e in choosing technology: you're here

210
00:10:36,957 --> 00:10:40,743
at WWDC, it is kind of preaching to the choir. You already

211
00:10:40,743 --> 00:10:42,973
have chosen great technology: you've chosen Apple,

212
00:10:42,973 --> 00:10:48,685
you;ve chosen macos and ios, so congratulations, you're all awesame.

213
00:10:48,685 --> 00:10:53,381
give yourself a round of applause.

214
00:10:53,381 --> 00:10:56,110
you have also chosen this talk this morning, so

215
00:10:56,110 --> 00:10:59,309
thank you for that.

216
00:10:59,309 --> 00:11:05,105
but now: more to the point, if you think about

217
00:11:05,105 --> 00:11:09,529
tools when you maybe gonna build a house, sometimes

218
00:11:09,529 --> 00:11:11,160
you need to go and grab a hammer, and that is

219
00:11:11,160 --> 00:11:12,740
an appropriate tool, and then you grab a wrench

220
00:11:12,740 --> 00:11:15,113
and that's an appropriate tool. but they;re not appropriate

221
00:11:15,113 --> 00:11:19,737
for all tasks; pretty obvious. the same is true for software.

222
00:11:19,737 --> 00:11:24,801
we have got some great software on our paltforms.

223
00:11:24,801 --> 00:11:28,317
coredata is a good example. it is a great piece of software

224
00:11:28,317 --> 00:11:31,701
for if you;re developing and app and you got some

225
00:11:31,701 --> 00:11:35,600
objects in your system. at runtime you maybe wanna

226
00:11:35,600 --> 00:11:37,853
save the state of some of these objects, you m aybe

227
00:11:37,853 --> 00:11:40,149
wanna save the objects themselves. use coredata, sace

228
00:11:40,149 --> 00:11:44,713
them to a database, it is a great technology. it does

229
00:11:44,713 --> 00:11:46,684
that object relational mapping system. how many people

230
00:11:46,684 --> 00:11:49,553
are "yes, my name is xxx and i have made my own object

231
00:11:49,553 --> 00:11:53,320
mapping system. i have a problem". i have done that problem

232
00:11:53,320 --> 00:11:57,256
many times. coredata solves that problem. you dont have

233
00:11:57,256 --> 00:11:59,784
to do that yourself. it is a great technology choice

234
00:11:59,784 --> 00:12:03,240
if you're an app developer. But if you're building a web

235
00:12:03,240 --> 00:12:06,476
search engine and you're building a big server farm

236
00:12:06,476 --> 00:12:10,357
ithen probably core data is not the best choice, even

237
00:12:10,357 --> 00:12:12,912
though it is a great technology.

238
00:12:12,912 --> 00:12:16,236
it;s not the great best choice for that particular task.

239
00:12:16,236 --> 00:12:21,588
so i think the message here, aprticularly at WWDC

240
00:12:21,588 --> 00:12:25,620
is that if you;re new to our platforms, kind of new to

241
00:12:25,620 --> 00:12:29,749
ios, new to macos development: learn our frameworks!

242
00:12:29,749 --> 00:12:31,837
know what;s available. go to the labs. find an apple

243
00:12:31,837 --> 00:12:34,213
engineer. if you;ve got an idea, see if we've got

244
00:12:34,213 --> 00:12:39,105
software already there for you to take advantage of.

245
00:12:39,105 --> 00:12:43,184
learn our framework. know what's available and figure

246
00:12:43,184 --> 00:12:46,417
out how to best match what you need to do to the task

247
00:12:46,417 --> 00:12:49,193
you want to accomplish.

248
00:12:49,193 --> 00:12:52,769
now sometimes even after you do that you find out

249
00:12:52,769 --> 00:12:55,185
everything that's avaialbe, everything that we've got,

250
00:12:55,185 --> 00:12:57,705
and it doesn't quite match what you want to do,

251
00:12:57,705 --> 00:13:01,701
sometimes then, but only from knowledge, you need to

252
00:13:01,701 --> 00:13:03,198
go outside the box.

253
00:13:03,198 --> 00:13:06,509
and again, there is an example that I would like to tell

254
00:13:06,509 --> 00:13:11,428
you about: it's NSString in Foundation. Of course it's great

255
00:13:11,428 --> 00:13:17,509
for general purpose programming, but is it great for high-performance string handlign?

256
00:13:17,509 --> 00:13:22,330
High performance when I need to do substrings lots na lots of comparisons, like

257
00:13:22,330 --> 00:13:26,217
again the example was the iphone keybaord.

258
00:13:26,217 --> 00:13:29,864
when i was making the original autocorrection algorithm

259
00:13:29,864 --> 00:13:33,784
the first few tries that i made was basically brute-force.

260
00:13:33,784 --> 00:13:38,738
searching the entire dictionary every time you typed a key.

261
00:13:38,738 --> 00:13:42,187
logically, that's what is was doing, but it could do that,

262
00:13:42,187 --> 00:13:46,724
so i needed some kind of high performance string routines to

263
00:13:46,724 --> 00:13:50,290
make that actually perform well. and so what I wound up

264
00:13:50,290 --> 00:13:54,366
doing was developing my own custom c++ string class

265
00:13:54,366 --> 00:13:56,928
using a lot of stack-allocation, using the shrot string

266
00:13:56,928 --> 00:13:59,740
optimization, yeah, get a little bit of c++ geekness

267
00:13:59,740 --> 00:14:01,253
into every show.

268
00:14:01,253 --> 00:14:05,370
not only that, yes, this shortstring optimization is now

269
00:14:05,370 --> 00:14:09,872
in libc++. the new c++ library that we're developong

270
00:14:09,872 --> 00:14:12,377
and making available as part of llvm which

271
00:14:12,377 --> 00:14:16,650
is really nice. we didnt have that back in 2005.

272
00:14:16,650 --> 99:59:59,999
so: should you do this? probably not!

273
99:59:59,999 --> 99:59:59,999
Only, you only make a choice to go outside of the box

274
99:59:59,999 --> 99:59:59,999
when you have determined that you really need to.

275
99:59:59,999 --> 99:59:59,999
Because, again, what we are providing to you as part of

276
99:59:59,999 --> 99:59:59,999
our frameworks don't quite fit the bill.

277
99:59:59,999 --> 99:59:59,999
Now, I will say, interestingly, that even though this seems like

278
99:59:59,999 --> 99:59:59,999
a sort of a low level optimization, was that premature optimization?

279
99:59:59,999 --> 99:59:59,999
And I don't really think that it is. Again, I think because this is

280
99:59:59,999 --> 99:59:59,999
an optimization that has to do with physics, I could have

281
99:59:59,999 --> 99:59:59,999
changed the class out for another one with the same

282
99:59:59,999 --> 99:59:59,999
interface and it would have been alright.

283
99:59:59,999 --> 99:59:59,999
I didn't really paint myself into a corner.

284
99:59:59,999 --> 99:59:59,999
In other words, this was an optimization that was a

285
99:59:59,999 --> 99:59:59,999
technology choice, not an activity, not making sort of

286
99:59:59,999 --> 99:59:59,999
very very complicated algorithms that had a lot of

287
99:59:59,999 --> 99:59:59,999
interdependencies with each other - which then are much

288
99:59:59,999 --> 99:59:59,999
more difficult to undo if you decide it doesn't really

289
99:59:59,999 --> 99:59:59,999
quite work, or that you need to change them.

290
99:59:59,999 --> 99:59:59,999
It was kind of optimization in terms of physics. It sometimes

291
99:59:59,999 --> 99:59:59,999
can be a little bit safer than optimizations in chemistry.

292
99:59:59,999 --> 99:59:59,999
Again, the real share in this section is: Learn our frameworks.

293
99:59:59,999 --> 99:59:59,999
Come to our labs, after the show, go to our

294
99:59:59,999 --> 99:59:59,999
developer forums, find an Apple engineer, learn what

295
99:59:59,999 --> 99:59:59,999
we have available.

296
99:59:59,999 --> 99:59:59,999
So that's basic number 2.

297
99:59:59,999 --> 99:59:59,999
Basic number 3 is "Build solid abstractions".

298
99:59:59,999 --> 99:59:59,999
When you're thinking about your project upfront you

299
99:59:59,999 --> 99:59:59,999
kind of think about, again, maybe even basic chemistry

300
99:59:59,999 --> 99:59:59,999
building blocks that you want to use for your code.

301
99:59:59,999 --> 99:59:59,999
And so I got an example. Here is a declaration of the

302
99:59:59,999 --> 99:59:59,999
dispatch_async call, aprt of the dispatch framework.

303
99:59:59,999 --> 99:59:59,999
Of course, this is a really, really great part of our frameworks,

304
99:59:59,999 --> 99:59:59,999
because as it says "schedule the block for concurrent

305
99:59:59,999 --> 99:59:59,999
execution with the dispatch framework"

306
99:59:59,999 --> 99:59:59,999
Really neat technology. It makes writing concurrent code

307
99:59:59,999 --> 99:59:59,999
much easier to do.

308
99:59:59,999 --> 99:59:59,999
So. Now that you know this... Right? You've read the

309
99:59:59,999 --> 99:59:59,999
man page, you;ve read the developer documentation...

310
99:59:59,999 --> 99:59:59,999
And now you've got a piece of code like this where

311
99:59:59,999 --> 99:59:59,999
you've got a loop and you need to do expensive work

312
99:59:59,999 --> 99:59:59,999
with every object in an array and - ugh - you go and

313
99:59:59,999 --> 99:59:59,999
you profile and it's slow.

314
99:59:59,999 --> 99:59:59,999
So you figure "I've got a couple of cores on this system

315
99:59:59,999 --> 99:59:59,999
I'll just go and fix it like that, right?

316
99:59:59,999 --> 99:59:59,999
I'll do dispatch_async and do all this work on the background

317
99:59:59,999 --> 99:59:59,999
thread and it's just like "Wahoo!", right?

318
99:59:59,999 --> 99:59:59,999
Ermm... No. Not "Wahoo!". Why is that not the right answer?

319
99:59:59,999 --> 99:59:59,999
Now, I think, that what you've done, what that piece of

320
99:59:59,999 --> 99:59:59,999
code has done, is that gives you chemistry without physics.

321
99:59:59,999 --> 99:59:59,999
You just sprinkle in a little dispatch_async... It's probably

322
99:59:59,999 --> 99:59:59,999
not the right thing to do. And again, this is why

323
99:59:59,999 --> 99:59:59,999
it is not the right thing to do: You've got chemistry without

324
99:59:59,999 --> 99:59:59,999
physics. Concurrent code is complex and I think when you

325
99:59:59,999 --> 99:59:59,999
introduce that into your program, you need suitable

326
99:59:59,999 --> 99:59:59,999
abstractions to build on, to make it come out right.

327
99:59:59,999 --> 99:59:59,999
So. I think the way to do that is in terms of objects

328
99:59:59,999 --> 99:59:59,999
and interfaces. Define your work in terms of the job that

329
99:59:59,999 --> 99:59:59,999
you want done.

330
99:59:59,999 --> 99:59:59,999
So here is this little trivial example. Let's maybe use a

331
99:59:59,999 --> 99:59:59,999
different example that's a little more real world, which is

332
99:59:59,999 --> 99:59:59,999
maybe a piece of an image app that generates thumbnails

333
99:59:59,999 --> 99:59:59,999
for larger images.

334
99:59:59,999 --> 99:59:59,999
You see here, I've got a ThumbnailMaker interface that says make a thumbnail.

335
99:59:59,999 --> 99:59:59,999
Then an Observer which gives me a hook to call back

336
99:59:59,999 --> 99:59:59,999
after a thumbnail is finished being made.

337
99:59:59,999 --> 99:59:59,999
Here's a piece of code to do this:

338
99:59:59,999 --> 99:59:59,999
I've got my photo program which is itself a ThumbnailMakerObserver

339
99:59:59,999 --> 99:59:59,999
Maybe I've got this interface that perhaps some other part

340
99:59:59,999 --> 99:59:59,999
of my software calls.

341
99:59:59,999 --> 99:59:59,999
to say "ok, i've got an image and I need a thumbnail for it".

342
99:59:59,999 --> 99:59:59,999
I dispatch_async onto a background queue to the

343
99:59:59,999 --> 99:59:59,999
ThumbnailMaker object, which is, of course, defined on

344
99:59:59,999 --> 99:59:59,999
the bottom of the screen, to make a thumbnail and I

345
99:59:59,999 --> 99:59:59,999
pass myself in as the observer, right?

346
99:59:59,999 --> 99:59:59,999
Now, of course, that code goes and runs. It makes the

347
99:59:59,999 --> 99:59:59,999
thumbnail - churn, churn, churn - does the work, makes

348
99:59:59,999 --> 99:59:59,999
the thumbnail, dispatches async back to the observer,

349
99:59:59,999 --> 99:59:59,999
back to the main program, says it is done. Ok.

350
99:59:59,999 --> 99:59:59,999
Thumbnail available now, go and update the user interace.

351
99:59:59,999 --> 99:59:59,999
Take the gray box and replace it with the thumbnail.

352
99:59:59,999 --> 99:59:59,999
Very very simple.

353
99:59:59,999 --> 99:59:59,999
But, I think you can see, that this is chemistry with physics.

354
99:59:59,999 --> 99:59:59,999
There is design.

355
99:59:59,999 --> 99:59:59,999
dispatch_async is an implementation detail of this larger picture.

356
99:59:59,999 --> 99:59:59,999
which you could sketch on a board. You've have your big

357
99:59:59,999 --> 99:59:59,999
boxes now.

358
99:59:59,999 --> 99:59:59,999
It's better. That's a much much better way to approach

359
99:59:59,999 --> 99:59:59,999
the problem. Again - kind of a trivial example - but I think

360
99:59:59,999 --> 99:59:59,999
it gets across a really important point.

361
99:59:59,999 --> 99:59:59,999
Because, now, you're thinking about the software not

362
99:59:59,999 --> 99:59:59,999
in terms of thumbnails, not in terms of just dispatching

363
99:59:59,999 --> 99:59:59,999
as part of a loop... You've got sort of structure, a framework

364
99:59:59,999 --> 99:59:59,999
for your thinking.

365
99:59:59,999 --> 99:59:59,999
You've got an interface that will hopefully stand the test

366
99:59:59,999 --> 99:59:59,999
of time.

367
99:59:59,999 --> 99:59:59,999
And additionally, if you have to change your implementation,

368
99:59:59,999 --> 99:59:59,999
sometime in the future, to maybe server-generated

369
99:59:59,999 --> 99:59:59,999
thumbnails that are now shipping as images over a

370
99:59:59,999 --> 99:59:59,999
network. The thumbnail generated and then come back.

371
99:59:59,999 --> 99:59:59,999
Probably that interface, that might actually work,

372
99:59:59,999 --> 99:59:59,999
Instead of dispatch_async, well, send the raw image, the

373
99:59:59,999 --> 99:59:59,999
full resolution image over the network and have a thumbnail

374
99:59:59,999 --> 99:59:59,999
generated for you.

375
99:59:59,999 --> 99:59:59,999
I think that's a much much more solid abstraction.

376
99:59:59,999 --> 99:59:59,999
Again, defining your work in terms of the job

377
99:59:59,999 --> 99:59:59,999
that you want done.

378
99:59:59,999 --> 99:59:59,999
And I think that's basic number 3.

379
99:59:59,999 --> 99:59:59,999
Number 4: Optimize for humans

380
99:59:59,999 --> 99:59:59,999
And I think this is something that is a good idea

381
99:59:59,999 --> 99:59:59,999
to always keep in mind as you're designing your project.

382
99:59:59,999 --> 99:59:59,999
Particularly, if it is going to have a long life, that you're

383
99:59:59,999 --> 99:59:59,999
gonna be maintaining it. And you want to be kind to

384
99:59:59,999 --> 99:59:59,999
your future self today. So here is an example of

385
99:59:59,999 --> 99:59:59,999
that: A lot of times we use these data and wire formats

386
99:59:59,999 --> 99:59:59,999
in our programs... XML, JSON, plists, Google Protocol Buffers, what have you.

387
99:59:59,999 --> 99:59:59,999
Here is an example of a little JSON structure that I might

388
99:59:59,999 --> 99:59:59,999
be getting. It is a coupon. It has an expiration date, a name

389
99:59:59,999 --> 99:59:59,999
and - hey - it's got a pitch, too: Get 25% off on your

390
99:59:59,999 --> 99:59:59,999
next purchase.

391
99:59:59,999 --> 99:59:59,999
Now, you might that, well, I am gonna be receiving

392
99:59:59,999 --> 99:59:59,999
this over the network from some service or partner,

393
99:59:59,999 --> 99:59:59,999
perhaps I'm making the next great coupon app.

394
99:59:59,999 --> 99:59:59,999
I might think that in my program then I receive that

395
99:59:59,999 --> 99:59:59,999
JSON over the network and that I'm gonna need some

396
99:59:59,999 --> 99:59:59,999
Objective-C code to deal with that coupon, and I'll

397
99:59:59,999 --> 99:59:59,999
just write it like this: I'll just have a getProperty, setProperty

398
99:59:59,999 --> 99:59:59,999
interface for the coupon, and that's how I'll pick apart

399
99:59:59,999 --> 99:59:59,999
the details.

400
99:59:59,999 --> 99:59:59,999
I think, that's a bad idea.

401
99:59:59,999 --> 99:59:59,999
Now you have chemistry trumping your physics.

402
99:59:59,999 --> 99:59:59,999
Now you've got the fact that you are using JSON or

403
99:59:59,999 --> 99:59:59,999
one of these other wire formats making decisions about

404
99:59:59,999 --> 99:59:59,999
how your software is designed. You're not designing

405
99:59:59,999 --> 99:59:59,999
for yourself, you're designing it for this wire format.

406
99:59:59,999 --> 99:59:59,999
And you wind up with a weird universe like that.

407
99:59:59,999 --> 99:59:59,999
Instead of something like this

408
99:59:59,999 --> 99:59:59,999
you wind up with something like this!

409
99:59:59,999 --> 99:59:59,999
You have over-emphasized how data is traveling from

410
99:59:59,999 --> 99:59:59,999
one place to another, rather than how you need

411
99:59:59,999 --> 99:59:59,999
to deal with it when it gets to your program.

412
99:59:59,999 --> 99:59:59,999
And I think this is bad, because brain power is your

413
99:59:59,999 --> 99:59:59,999
scarcest resource. If you try to remember what property

414
99:59:59,999 --> 99:59:59,999
name was pitch inside of a dictionary? You don't

415
99:59:59,999 --> 99:59:59,999
don't want to be worried about that.

416
99:59:59,999 --> 99:59:59,999
It's not CPU power or network bandwidth that is or will

417
99:59:59,999 --> 99:59:59,999
be the limiting factor in making your sofware.

418
99:59:59,999 --> 99:59:59,999
It's brain power. You want to conserve that

419
99:59:59,999 --> 99:59:59,999
as much as you can

420
99:59:59,999 --> 99:59:59,999
So what can you do about this?

421
99:59:59,999 --> 99:59:59,999
Instead of having an interface - a weak object interface - getProperty, setProperty...

422
99:59:59,999 --> 99:59:59,999
I think you could do something like this:

423
99:59:59,999 --> 99:59:59,999
Instead where you've got methods that take JSON data

424
99:59:59,999 --> 99:59:59,999
in, create your object, can also vend the JSON data back

425
99:59:59,999 --> 99:59:59,999
out in case you need to send it back out to the network

426
99:59:59,999 --> 99:59:59,999
even after modifying it, and then give yourself a nice

427
99:59:59,999 --> 99:59:59,999
good strong object interface to work with.

428
99:59:59,999 --> 99:59:59,999
Now you don't need to remember "is the pitch inside of

429
99:59:59,999 --> 99:59:59,999
some kind of dictionary?"

430
99:59:59,999 --> 99:59:59,999
If it is or is not does not matter, you will have taken care

431
99:59:59,999 --> 99:59:59,999
of that - presumably - in the init method.

432
99:59:59,999 --> 99:59:59,999
And now that property is just available for you

433
99:59:59,999 --> 99:59:59,999
to go to and use.

434
99:59:59,999 --> 99:59:59,999
Now you can go and see - maybe you've gone away from this code for a few months - you can look at

435
99:59:59,999 --> 99:59:59,999
the header and see "what's a coupon?"

436
99:59:59,999 --> 99:59:59,999
You don't need to kind of go "Do I have an example

437
99:59:59,999 --> 99:59:59,999
of this kind of coupon JSON data somewhere on disk?

438
99:59:59,999 --> 99:59:59,999
You don't need to worry about that.

439
99:59:59,999 --> 99:59:59,999
You've done the work to give yourself a good strong

440
99:59:59,999 --> 99:59:59,999
object interface. You've optimized for yourself. Not

441
99:59:59,999 --> 99:59:59,999
for serialization or the networking protocol.

442
99:59:59,999 --> 99:59:59,999
And again, that's something that you bake into your project

443
99:59:59,999 --> 99:59:59,999
at the beginning, when you're making your fundamental

444
99:59:59,999 --> 99:59:59,999
interfaces and designing how your system works.

445
99:59:59,999 --> 99:59:59,999
Optimize for yourself!

446
99:59:59,999 --> 99:59:59,999
Next: Basic number 5.

447
99:59:59,999 --> 99:59:59,999
Focus your development effort.

448
99:59:59,999 --> 99:59:59,999
I think at the beginning of a project it is a good idea

449
99:59:59,999 --> 99:59:59,999
to ask yourself what you are trying to be great at

450
99:59:59,999 --> 99:59:59,999
You should have a good answer for that question.

451
99:59:59,999 --> 99:59:59,999
Who is your audience? Who else in the world, once

452
99:59:59,999 --> 99:59:59,999
they find my app, is going to think "this is great"?

453
99:59:59,999 --> 99:59:59,999
and why are they gonna think that it is great?

454
99:59:59,999 --> 99:59:59,999
You wanna make sure you have answers for these questions.

455
99:59:59,999 --> 99:59:59,999
And you wanna make sure that you're building that!

456
99:59:59,999 --> 99:59:59,999
That you are actually delivering on that greatness that

457
99:59:59,999 --> 99:59:59,999
you are trying to achieve.

458
99:59:59,999 --> 99:59:59,999
And I think that, of course, iOS and OS X give you

459
99:59:59,999 --> 99:59:59,999
great foundation to stand on, literally and figuratively,

460
99:59:59,999 --> 99:59:59,999
you know, Foundation, Framework, right?

461
99:59:59,999 --> 99:59:59,999
Stand on our shoulders, build your great software, using

462
99:59:59,999 --> 99:59:59,999
our frameworks. Learn them.

463
99:59:59,999 --> 99:59:59,999
Again. I am sounding like broken record, for those of

464
99:59:59,999 --> 99:59:59,999
you who are old enough to know what that is...

465
99:59:59,999 --> 99:59:59,999
And it is kind of interesting, too. I mean it's a little

466
99:59:59,999 --> 99:59:59,999
digression. We wind up with a little recursive physics

467
99:59:59,999 --> 99:59:59,999
and chemistry. There are people, obviously, in Apple

468
99:59:59,999 --> 99:59:59,999
where UIKit is there little chemistry set. They're going

469
99:59:59,999 --> 99:59:59,999
to be developing UIKit deciding on what the chemistry

470
99:59:59,999 --> 99:59:59,999
and chemistry is.

471
99:59:59,999 --> 99:59:59,999
For you that's just physics. UIKit is what it is.

472
99:59:59,999 --> 99:59:59,999
It's not changeable by you. It's just part of the physical

473
99:59:59,999 --> 99:59:59,999
reality, the unchangable law of your universe if you are

474
99:59:59,999 --> 99:59:59,999
working on iOS.

475
99:59:59,999 --> 99:59:59,999
And that is kind of interesting, too. You might want to

476
99:59:59,999 --> 99:59:59,999
do that in your own software.

477
99:59:59,999 --> 99:59:59,999
Develop libraries that are then unchangeable by

478
99:59:59,999 --> 99:59:59,999
higher levels of code.

479
99:59:59,999 --> 99:59:59,999
You might even want to do this for models - the model

480
99:59:59,999 --> 99:59:59,999
of your program - and then have user interface level

481
99:59:59,999 --> 99:59:59,999
level: One for iPhone, one for iPad, that treats that layer

482
99:59:59,999 --> 99:59:59,999
as sort of an unchangable physics. Kind of an interesting

483
99:59:59,999 --> 99:59:59,999
little idea.

484
99:59:59,999 --> 99:59:59,999
Ok, now more concrete examples.

485
99:59:59,999 --> 99:59:59,999
Which is sort of getting to the idea of that you want

486
99:59:59,999 --> 99:59:59,999
to focus on what makes your software novel and interesting,.

487
99:59:59,999 --> 99:59:59,999
An example is: if you love the way that iOS device auto

488
99:59:59,999 --> 99:59:59,999
rotation works, don't spend time implementing that yourself.

489
99:59:59,999 --> 99:59:59,999
You need to learn our frameworks and find out that UIViewController provides that for you.

490
99:59:59,999 --> 99:59:59,999
Similarly, if you need database interaction, you want to

491
99:59:59,999 --> 99:59:59,999
save some of your app's runtime data in a database, learn

492
99:59:59,999 --> 99:59:59,999
about CoreData. Don't go invent your own object-relational

493
99:59:59,999 --> 99:59:59,999
mapping software.

494
99:59:59,999 --> 99:59:59,999
If you need animation, learn CoreAnimation. It's the same

495
99:59:59,999 --> 99:59:59,999
thing.

496
99:59:59,999 --> 99:59:59,999
If you need X, then you maybe not even quite sure, what that is.

497
99:59:59,999 --> 99:59:59,999
What name to call it, because you don't if we have that in our frameworks, ask in the labs. That's

498
99:59:59,999 --> 99:59:59,999
why you're here this week; or the developer forums

499
99:59:59,999 --> 99:59:59,999
after. This week, since you're here, find an Apple

500
99:59:59,999 --> 99:59:59,999
engineer and ask your question.

501
99:59:59,999 --> 99:59:59,999
Because in the end you want to be working on the thing

502
99:59:59,999 --> 99:59:59,999
that's gonna make or break your application.

503
99:59:59,999 --> 99:59:59,999
That's what you want to be working on. That's where you want to be spending your time.

504
99:59:59,999 --> 99:59:59,999
So focus your development effort right from the start.

505
99:59:59,999 --> 99:59:59,999
And then lastly: You always want to be looking to the horizon a little bit.

506
99:59:59,999 --> 99:59:59,999
What if you're successful? What if your app works?

507
99:59:59,999 --> 99:59:59,999
And people love it? They're downloading it!

508
99:59:59,999 --> 99:59:59,999
What if maybe you've got a little service that's attached

509
99:59:59,999 --> 99:59:59,999
to it where people can upload content, download content... Can you handle it?

510
99:59:59,999 --> 99:59:59,999
What about performance? How much headroom do you have in your software for things like performance,

511
99:59:59,999 --> 99:59:59,999
or perhaps even for future features which you may be able to get in your 1.0,

512
99:59:59,999 --> 99:59:59,999
but you definitely want to get to for your 2.0.

513
99:59:59,999 --> 99:59:59,999
So you really want to be building in a little bit of

514
99:59:59,999 --> 99:59:59,999
headroom, if you can, into your application.

515
99:59:59,999 --> 99:59:59,999
But how to do that?

516
99:59:59,999 --> 99:59:59,999
Another area to think about if you saw Andre's talk

517
99:59:59,999 --> 99:59:59,999
on Monday about Internationalization:

518
99:59:59,999 --> 99:59:59,999
There is a huge opportunity out there for you to ship

519
99:59:59,999 --> 99:59:59,999
your app all around the world.

520
99:59:59,999 --> 99:59:59,999
If you localize it into the language spoken by those

521
99:59:59,999 --> 99:59:59,999
people in other countries.

522
99:59:59,999 --> 99:59:59,999
We've got great support for internationalizing, localizing

523
99:59:59,999 --> 99:59:59,999
your application. Strings, dates, times, addresses, names, whatever...

524
99:59:59,999 --> 99:59:59,999
You want to be thinking about using our software

525
99:59:59,999 --> 99:59:59,999
right from the beginning, so then when it comes

526
99:59:59,999 --> 99:59:59,999
to localize your kind of on the road.

527
99:59:59,999 --> 99:59:59,999
You can kind of take advantage of our great localization

528
99:59:59,999 --> 99:59:59,999
features to ship your app all over the world. I really

529
99:59:59,999 --> 99:59:59,999
urge you to do that, it is a huge opportunity for you.

530
99:59:59,999 --> 99:59:59,999
And kind of getting back to that idea - I said, you might

531
99:59:59,999 --> 99:59:59,999
have an idea about a 2.0 of your program - or maybe

532
99:59:59,999 --> 99:59:59,999
you think of a great new feature after you've got
