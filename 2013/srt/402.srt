X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:09,516 A:middle
[ Silence ]

2
00:00:10,016 --> 00:00:10,083 A:middle
[Applause]

3
00:00:11,016 --> 00:00:13,316 A:middle
>> Thank you.

4
00:00:15,046 --> 00:00:15,886 A:middle
[applause] Good afternoon!

5
00:00:16,776 --> 00:00:19,796 A:middle
Welcome to "What's New
in the LLVM Compiler?"

6
00:00:20,506 --> 00:00:21,806 A:middle
My name is Evan.

7
00:00:22,036 --> 00:00:23,146 A:middle
Let's-- shall we start?

8
00:00:24,436 --> 00:00:25,656 A:middle
What's our mission?

9
00:00:26,726 --> 00:00:29,906 A:middle
We want to provide the
Best-in-Class tools for you,

10
00:00:29,906 --> 00:00:33,176 A:middle
for the developers, the
lifelines of our platforms.

11
00:00:33,666 --> 00:00:36,046 A:middle
We want to make sure
you have the best tools

12
00:00:36,206 --> 00:00:37,446 A:middle
to build your awesome apps.

13
00:00:38,846 --> 00:00:40,736 A:middle
We want to support the best--

14
00:00:40,836 --> 00:00:44,276 A:middle
the latest hardware,
be Macs, iOS devices.

15
00:00:44,276 --> 00:00:47,736 A:middle
We want to make sure we can
build your codes so they run

16
00:00:47,816 --> 00:00:50,206 A:middle
as fast as they can
on the unit--

17
00:00:50,486 --> 00:00:53,816 A:middle
latest iPhone, the
iPads and the Macs.

18
00:00:54,076 --> 00:00:56,686 A:middle
I want to make sure the
performance is great.

19
00:00:57,296 --> 00:01:00,756 A:middle
We're not satisfied if we
cannot squeeze every ounce

20
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

21
00:01:00,756 --> 00:01:02,966 A:middle
of performance in
audio applications.

22
00:01:03,516 --> 00:01:06,306 A:middle
And we want to make sure you
have the great productivity.

23
00:01:06,886 --> 00:01:10,546 A:middle
We want our tools to run fast
and we want to provide you

24
00:01:10,546 --> 00:01:12,096 A:middle
with the best diagnoses.

25
00:01:12,266 --> 00:01:14,316 A:middle
We want to give you as
much information we can

26
00:01:14,576 --> 00:01:15,796 A:middle
to make your job easy.

27
00:01:16,976 --> 00:01:21,386 A:middle
So let's take a look at what
have we done in different areas.

28
00:01:21,896 --> 00:01:24,166 A:middle
First, let's talk
about the support

29
00:01:24,166 --> 00:01:29,086 A:middle
for the latest hardware,
armv7s architecture.

30
00:01:29,356 --> 00:01:31,176 A:middle
This is something
you may have seen.

31
00:01:31,636 --> 00:01:33,846 A:middle
This is not new in Xcode 5

32
00:01:33,846 --> 00:01:35,846 A:middle
but there's something new
happened during the last year.

33
00:01:35,846 --> 00:01:41,386 A:middle
The iPhone 5-- for the iPhone
5, we have the Apple A6 chip,

34
00:01:41,866 --> 00:01:44,166 A:middle
that's something Apple
built and very proud of it.

35
00:01:44,406 --> 00:01:46,646 A:middle
We worked very closely
with our team

36
00:01:46,886 --> 00:01:49,256 A:middle
to make sure the compiler
generate the best code words.

37
00:01:49,416 --> 00:01:52,916 A:middle
If you care about performance
on your app on the latest iPhone

38
00:01:53,806 --> 00:01:58,186 A:middle
and the latest iPads, you
want to build your application

39
00:01:58,186 --> 00:01:59,206 A:middle
for this architecture.

40
00:01:59,766 --> 00:02:04,396 A:middle
This is simple because
this is already a part

41
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

42
00:02:04,396 --> 00:02:08,205 A:middle
of the standard architecture for
iOS apps so we encourage you,

43
00:02:08,446 --> 00:02:10,936 A:middle
just go with it,
don't pick and choose,

44
00:02:11,116 --> 00:02:12,846 A:middle
just use the standard
architecture

45
00:02:13,096 --> 00:02:16,896 A:middle
and you'd get the best
performance for your apps.

46
00:02:17,126 --> 00:02:20,046 A:middle
Next, let's talk
about Intel AVX.

47
00:02:20,556 --> 00:02:23,346 A:middle
AVX stands for Advanced
Vector Extension.

48
00:02:23,786 --> 00:02:26,356 A:middle
Anything with the word
"Advanced" sounds great there.

49
00:02:26,956 --> 00:02:28,776 A:middle
It must be good,
you should use it.

50
00:02:29,376 --> 00:02:31,366 A:middle
So Intel AVX is not new.

51
00:02:31,366 --> 00:02:34,416 A:middle
It's been around for a couple of
years, but this year you have--

52
00:02:34,416 --> 00:02:38,586 A:middle
you have heard, we have just
announced Haswell-Based Macs,

53
00:02:38,766 --> 00:02:41,886 A:middle
they have Intel AVX2,
so AVX was all

54
00:02:41,886 --> 00:02:45,486 A:middle
about getting the best
performance with your loop

55
00:02:45,486 --> 00:02:46,826 A:middle
with a lot of parallels in,

56
00:02:46,826 --> 00:02:48,726 A:middle
a lot of floating
point computation code.

57
00:02:49,216 --> 00:02:52,966 A:middle
AVX2 takes a little step further
and bring the same kind of power

58
00:02:53,176 --> 00:02:54,416 A:middle
to the-- your integer code.

59
00:02:55,066 --> 00:02:58,726 A:middle
It had a few more other kind
of instructions to make it easy

60
00:02:58,726 --> 00:03:01,736 A:middle
to vectorize your code
so you definitely want

61
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

62
00:03:01,736 --> 00:03:06,136 A:middle
to take advantage of AVX2.

63
00:03:06,286 --> 00:03:13,276 A:middle
So using AVX2 is easy but it's
not quite, kind of, work-free.

64
00:03:13,736 --> 00:03:17,216 A:middle
You do want to make sure
your app does runtime checks

65
00:03:17,216 --> 00:03:20,726 A:middle
to make the hardware you're
running the code support AVX2.

66
00:03:21,406 --> 00:03:23,276 A:middle
So you may want to
partition your code

67
00:03:23,276 --> 00:03:27,466 A:middle
to have a special version that
only run on AVX2 and compile

68
00:03:27,466 --> 00:03:33,676 A:middle
with the -mavx2 instruction,
I mean, -2avx2, -mavx2 option.

69
00:03:34,716 --> 00:03:36,946 A:middle
If you have any questions
about this,

70
00:03:37,096 --> 00:03:38,986 A:middle
feel free to come
by to our labs.

71
00:03:39,546 --> 00:03:41,246 A:middle
We'll be happy to
talk to you about it

72
00:03:42,006 --> 00:03:45,096 A:middle
and also we'll be talking
a lot more about AVX2

73
00:03:45,096 --> 00:03:47,846 A:middle
and many other things
we talked about today

74
00:03:48,366 --> 00:03:50,216 A:middle
in tomorrow's session, that's--

75
00:03:51,186 --> 00:03:52,466 A:middle
we're we going to focus

76
00:03:52,466 --> 00:03:54,896 A:middle
on how you can using
the LLVM technology

77
00:03:54,896 --> 00:03:56,456 A:middle
to fully optimize your code.

78
00:03:57,396 --> 00:04:01,396 A:middle
So if you use AVX2 in Xcode
5, it's pretty simple,

79
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

80
00:04:01,586 --> 00:04:03,116 A:middle
go to the Build Configuration

81
00:04:03,356 --> 00:04:06,706 A:middle
and just enable Additional
Vector Extension, choose AVX2.

82
00:04:07,576 --> 00:04:10,906 A:middle
This is going to be important to
get your code to performance--

83
00:04:10,906 --> 00:04:16,755 A:middle
to the best you can on
the Haswell-Based Macs.

84
00:04:16,926 --> 00:04:19,336 A:middle
Next, let's focus
on performance.

85
00:04:19,676 --> 00:04:21,546 A:middle
We've done a lot of
work in this area.

86
00:04:21,786 --> 00:04:23,336 A:middle
We have many new features,

87
00:04:23,616 --> 00:04:25,476 A:middle
a lot of work we're
very, very proud of.

88
00:04:26,146 --> 00:04:28,566 A:middle
We're so proud of, in
fact, we've made a video,

89
00:04:28,776 --> 00:04:30,396 A:middle
I'd like to show you today.

90
00:04:31,306 --> 00:04:32,346 A:middle
I'm just kidding.

91
00:04:32,346 --> 00:04:34,016 A:middle
[Laughter]

92
00:04:34,016 --> 00:04:38,000 A:middle
[ Laughter & Applause ]

93
00:04:38,796 --> 00:04:40,226 A:middle
They will be editing the video

94
00:04:40,226 --> 00:04:43,126 A:middle
for a long time before
I can show you anything.

95
00:04:43,496 --> 00:04:45,776 A:middle
But let's take a quick look
what we have done for you.

96
00:04:46,906 --> 00:04:48,866 A:middle
So the compiler has
definitely improved a lot.

97
00:04:49,336 --> 00:04:51,186 A:middle
The performance has
gotten better every year.

98
00:04:51,586 --> 00:04:54,246 A:middle
This past year as you've
seen, just a quick chart--

99
00:04:54,246 --> 00:04:56,596 A:middle
a few examples, we're
getting quite a bit

100
00:04:56,596 --> 00:04:58,156 A:middle
of performance of your code.

101
00:04:58,806 --> 00:05:01,596 A:middle
So if you're just
building your application

102
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

103
00:05:01,596 --> 00:05:05,716 A:middle
with the new LLVM compiler
in Xcode 5, you're going

104
00:05:05,716 --> 00:05:07,826 A:middle
to get some significant
improvement for your code.

105
00:05:08,366 --> 00:05:11,046 A:middle
So it ranges differently
depends on what kind

106
00:05:11,046 --> 00:05:11,726 A:middle
of code you're writing.

107
00:05:13,296 --> 00:05:16,796 A:middle
If your iOS app, you're
going to see the same kind

108
00:05:16,796 --> 00:05:18,826 A:middle
of performance but a bit more.

109
00:05:19,056 --> 00:05:21,576 A:middle
We've been really,
really focused on this

110
00:05:21,866 --> 00:05:24,476 A:middle
and we're working really
closely with our team

111
00:05:24,716 --> 00:05:28,446 A:middle
to bring you the best compiler
technology in this area.

112
00:05:29,456 --> 00:05:33,426 A:middle
So here you can see across
the board teams of 20,

113
00:05:33,516 --> 00:05:36,336 A:middle
30 percent performance
gains just by switching

114
00:05:36,336 --> 00:05:38,616 A:middle
to the latest Xcode
5 and using--

115
00:05:38,616 --> 00:05:41,136 A:middle
latest Apple LLVM compiler.

116
00:05:41,136 --> 00:05:47,246 A:middle
One other thing I want to talk
to you very briefly about,

117
00:05:47,736 --> 00:05:50,946 A:middle
Strict Aliasing, this is
technology we introduced

118
00:05:50,946 --> 00:05:55,146 A:middle
in Xcode and Apple LLVM
compiler about a year or so ago.

119
00:05:55,876 --> 00:05:58,796 A:middle
The only difference here is,
you know, during the past year,

120
00:05:58,796 --> 00:06:02,486 A:middle
we have enabled by
default in 4.-- Xcode 4.6.

121
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

122
00:06:03,026 --> 00:06:06,066 A:middle
I just want to bring
this to your attention,

123
00:06:06,286 --> 00:06:07,516 A:middle
in case you have some any kind

124
00:06:07,516 --> 00:06:10,706 A:middle
of legacy code that's
still building and shipping

125
00:06:10,706 --> 00:06:13,516 A:middle
with the older Xcode,
you might be--

126
00:06:13,516 --> 00:06:15,056 A:middle
want to be aware of this change.

127
00:06:15,496 --> 00:06:17,376 A:middle
So I'm not going to go
into a lot of details

128
00:06:17,776 --> 00:06:21,756 A:middle
but strict aliasing is basically
using the type of informations

129
00:06:21,756 --> 00:06:23,926 A:middle
to do more advanced
than pointer analysis.

130
00:06:24,666 --> 00:06:26,946 A:middle
The reason we turn on
strict aliasing is simple,

131
00:06:27,206 --> 00:06:28,216 A:middle
its performance.

132
00:06:28,906 --> 00:06:32,246 A:middle
It's a-- few percentage is here
and there, but in some cases,

133
00:06:32,246 --> 00:06:36,136 A:middle
we see significant wins such
as 20 percent improvement

134
00:06:36,136 --> 00:06:37,836 A:middle
for some simulation benchmarks.

135
00:06:40,256 --> 00:06:43,606 A:middle
So again, just want to remind
you, if you are legacy code,

136
00:06:43,866 --> 00:06:48,056 A:middle
they might be using some illegal
scenes such as typecasting

137
00:06:48,286 --> 00:06:50,866 A:middle
from one type to another
that's not compatible

138
00:06:51,126 --> 00:06:53,646 A:middle
from floating point to
integer or vice-versa.

139
00:06:54,676 --> 00:06:57,356 A:middle
If you want it, you have code
that does this, please switch

140
00:06:57,356 --> 00:07:02,266 A:middle
to a well understood [inaudible]
such as-- unions to do the cut--

141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

142
00:07:02,266 --> 00:07:04,076 A:middle
type conversion and
you'd be home free.

143
00:07:04,396 --> 00:07:05,946 A:middle
Chances are, since we've been--

144
00:07:05,946 --> 00:07:09,186 A:middle
you've been shipping your
application with Xcode 4.6,

145
00:07:09,386 --> 00:07:12,126 A:middle
this is working perfectly for
you, there's absolutely nothing

146
00:07:12,126 --> 00:07:12,876 A:middle
for you to worry about.

147
00:07:12,876 --> 00:07:16,476 A:middle
One other thing I
wanted to bring

148
00:07:16,476 --> 00:07:18,686 A:middle
to your attention is
Link-time Optimization.

149
00:07:19,036 --> 00:07:20,746 A:middle
Again, this is not
a new feature.

150
00:07:21,686 --> 00:07:24,286 A:middle
What's new is we've
put so much effort

151
00:07:24,286 --> 00:07:26,486 A:middle
into Link-time Optimization
during last year

152
00:07:26,896 --> 00:07:28,586 A:middle
and we feel so great about it.

153
00:07:28,786 --> 00:07:30,616 A:middle
We have enabled it using it

154
00:07:30,616 --> 00:07:32,806 A:middle
to build some key
Apple technologies

155
00:07:33,286 --> 00:07:35,176 A:middle
in the Mac and iOS release.

156
00:07:37,456 --> 00:07:41,746 A:middle
So some examples such as Apple
LLVM compiler itself is built

157
00:07:41,746 --> 00:07:42,426 A:middle
with LTO.

158
00:07:43,116 --> 00:07:46,396 A:middle
This can have the benefit
of compiling your code

159
00:07:46,396 --> 00:07:48,376 A:middle
up to 6-- 6 percent faster.

160
00:07:49,666 --> 00:07:52,516 A:middle
The iOS Kernel, that's
important application,

161
00:07:52,996 --> 00:07:57,206 A:middle
can do some of the-- IO--
performance can be up to 20--

162
00:07:57,486 --> 00:08:01,176 A:middle
20 percent faster and in
addition to performance,

163
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

164
00:08:01,356 --> 00:08:05,946 A:middle
sometimes you have [inaudible]
benefit such as iOS iMovie app

165
00:08:06,296 --> 00:08:09,846 A:middle
that got 25 percent smaller
just by building with LTO.

166
00:08:10,986 --> 00:08:12,726 A:middle
So we think LTO is great.

167
00:08:12,956 --> 00:08:15,786 A:middle
You definitely want
to try it out.

168
00:08:16,046 --> 00:08:18,926 A:middle
But in case you have a
really massive application,

169
00:08:19,526 --> 00:08:23,586 A:middle
this could have impact on
the build time because LTO is

170
00:08:23,586 --> 00:08:27,906 A:middle
about bringing everything about
your application into last stage

171
00:08:27,906 --> 00:08:30,806 A:middle
and do the all the optimization,
compilation at that time.

172
00:08:31,316 --> 00:08:33,976 A:middle
So if you find you
were building with LTO

173
00:08:33,976 --> 00:08:37,946 A:middle
and that's taking too much time
and maybe and you're running

174
00:08:37,946 --> 00:08:41,046 A:middle
out of memory, you consider
dropping the debugging full

175
00:08:41,046 --> 00:08:42,816 A:middle
level to a Line table only,

176
00:08:42,816 --> 00:08:50,166 A:middle
that can have a significant
improvement to the real time.

177
00:08:50,366 --> 00:08:54,286 A:middle
Something new in Xcode 5,
here's the Auto Vectorizer.

178
00:08:54,386 --> 00:08:57,786 A:middle
We talked about this in
"What's New in Xcode?"

179
00:08:57,786 --> 00:08:58,336 A:middle
this morning.

180
00:08:59,116 --> 00:09:01,296 A:middle
This is something that
we built from the grown

181
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

182
00:09:01,296 --> 00:09:02,546 A:middle
up during the past year.

183
00:09:03,436 --> 00:09:05,496 A:middle
This is already showing
amazing results.

184
00:09:05,846 --> 00:09:08,486 A:middle
This is certainly some really
computation intensive code

185
00:09:09,336 --> 00:09:14,876 A:middle
and can have 2 to 5 to 8
times the benefit for you--

186
00:09:14,986 --> 00:09:18,086 A:middle
for your computation
intensive loop.

187
00:09:18,206 --> 00:09:22,796 A:middle
And this works great for both
iOS and OS X applications

188
00:09:23,066 --> 00:09:25,966 A:middle
so you can have portable code
that you write simple code

189
00:09:25,966 --> 00:09:30,556 A:middle
that works perfectly for all
the-- for both platforms.

190
00:09:31,106 --> 00:09:32,766 A:middle
So previously, if
you are familiar

191
00:09:32,766 --> 00:09:35,406 A:middle
with ARM NEON intrinsics,
you may be using--

192
00:09:35,406 --> 00:09:39,086 A:middle
intrinsics to kind of get the
best performance on your loop.

193
00:09:39,656 --> 00:09:41,656 A:middle
And now we're saying,
all you have

194
00:09:41,656 --> 00:09:43,796 A:middle
to do is you just write
simple scalar code

195
00:09:44,316 --> 00:09:46,006 A:middle
and let the compiler
do the rest for you.

196
00:09:46,666 --> 00:09:48,816 A:middle
It's that simple,
it's that powerful,

197
00:09:49,136 --> 00:09:51,036 A:middle
you definitely want to try it.

198
00:09:52,216 --> 00:09:52,536 A:middle
[applause] Thank you.

199
00:09:53,036 --> 00:09:55,556 A:middle
[Applause]

200
00:09:56,056 --> 00:09:59,106 A:middle
So the auto-vectorizer,
again, is new in Xcode 5,

201
00:09:59,376 --> 00:10:02,296 A:middle
go to the Build Setting
and choose vectorize loops,

202
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

203
00:10:02,726 --> 00:10:05,826 A:middle
and let us know, we're really
proud of this technology

204
00:10:06,196 --> 00:10:09,466 A:middle
and we think we-- you'll get
a lot of benefit from it.

205
00:10:11,596 --> 00:10:13,506 A:middle
Again, this is something
we're going to go

206
00:10:13,506 --> 00:10:15,736 A:middle
into a lot more details
in tomorrow's session.

207
00:10:16,306 --> 00:10:17,396 A:middle
What we're going to talk about,

208
00:10:17,396 --> 00:10:20,006 A:middle
how to optimize your
code using the LLVM.

209
00:10:23,716 --> 00:10:26,566 A:middle
The last thing, if you've been
playing with the new Xcode 5,

210
00:10:26,566 --> 00:10:30,316 A:middle
you may-- may have noticed a
new optimization level, -Ofast.

211
00:10:30,416 --> 00:10:33,196 A:middle
What is this?

212
00:10:34,016 --> 00:10:37,246 A:middle
Well, think about it as
if it's a turbo button

213
00:10:37,246 --> 00:10:38,096 A:middle
for your application.

214
00:10:38,676 --> 00:10:42,606 A:middle
You press it and you
go-- your code goes fast.

215
00:10:43,796 --> 00:10:47,756 A:middle
So through -Ofast, it turn
out all the -03 optimizations,

216
00:10:47,986 --> 00:10:50,836 A:middle
squeezing as much performance
out of your code as possible.

217
00:10:51,316 --> 00:10:53,226 A:middle
It turn on the vectorization,

218
00:10:53,436 --> 00:10:56,026 A:middle
it turn on the -ffast-math
optimization.

219
00:10:56,396 --> 00:10:57,956 A:middle
For floating point code,

220
00:10:57,956 --> 00:11:00,876 A:middle
that can have a significant
performance benefits.

221
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

222
00:11:03,206 --> 00:11:06,386 A:middle
So what do you want to do
is for your release build,

223
00:11:06,476 --> 00:11:10,696 A:middle
choose -Ofast, not with Debug
Build, only the Release Build.

224
00:11:11,226 --> 00:11:15,076 A:middle
So a quick disclaimer, there's
a few things you should be aware

225
00:11:15,076 --> 00:11:19,226 A:middle
about -Ofast, particularly,
because you used -ffast-math.

226
00:11:20,206 --> 00:11:22,626 A:middle
You can do aggressive
optimization

227
00:11:22,626 --> 00:11:25,996 A:middle
such as re-association of your
floating-point expressions

228
00:11:26,166 --> 00:11:30,456 A:middle
and many other things can
have subtle impact precisions

229
00:11:30,456 --> 00:11:30,986 A:middle
of your code.

230
00:11:31,236 --> 00:11:35,356 A:middle
So if your application has to be
incongruous precise as using--

231
00:11:35,356 --> 00:11:38,156 A:middle
floating point, test carefully.

232
00:11:38,566 --> 00:11:40,186 A:middle
We believe for the
majority of the code,

233
00:11:40,186 --> 00:11:43,616 A:middle
this will just work
fine but please test

234
00:11:44,166 --> 00:11:45,516 A:middle
and let us know how it works.

235
00:11:46,256 --> 00:11:49,526 A:middle
And one other thing is,
this doesn't turn on LTO

236
00:11:49,526 --> 00:11:50,916 A:middle
for you automatically.

237
00:11:51,346 --> 00:11:52,296 A:middle
We want to control

238
00:11:52,296 --> 00:11:56,256 A:middle
that separately becomes
the compile to impact.

239
00:11:56,356 --> 00:11:59,086 A:middle
So that's all I want to talk
about-- about performance.

240
00:11:59,596 --> 00:12:02,316 A:middle
Next up, I would like to
ask, Bob Wilson to come up,

241
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

242
00:12:02,676 --> 00:12:05,706 A:middle
about all the work we have done
to improve your productivities.

243
00:12:05,706 --> 00:12:05,886 A:middle
Thank you.

244
00:12:06,516 --> 00:12:13,336 A:middle
[ Applause ]

245
00:12:13,836 --> 00:12:14,636 A:middle
>> Thanks Evan.

246
00:12:15,396 --> 00:12:18,906 A:middle
So the Apple LLVM Compiler can
help your apps to run faster.

247
00:12:19,476 --> 00:12:21,486 A:middle
It can also improve
your productivity

248
00:12:21,866 --> 00:12:24,916 A:middle
and help you develop higher
quality apps with fewer bugs.

249
00:12:25,636 --> 00:12:28,776 A:middle
So in the rest of the
session, we're going to go

250
00:12:28,776 --> 00:12:29,926 A:middle
through a number
of different ways

251
00:12:29,926 --> 00:12:32,446 A:middle
that the compiler
can help with that.

252
00:12:32,776 --> 00:12:35,366 A:middle
By updating the compiler
and some of the other tools,

253
00:12:35,836 --> 00:12:37,886 A:middle
we give you a more
consistent experience

254
00:12:38,456 --> 00:12:41,056 A:middle
with an easier installation
and update process.

255
00:12:41,666 --> 00:12:44,676 A:middle
We've got some new C++
features that make it easier

256
00:12:44,676 --> 00:12:46,626 A:middle
to express the code
that you want

257
00:12:47,716 --> 00:12:50,836 A:middle
and we've improved the compiler
warnings and the static analyzer

258
00:12:50,836 --> 00:12:54,176 A:middle
to help you catch bugs before
you have to go and spend a lot

259
00:12:54,176 --> 00:12:55,796 A:middle
of time debugging your app.

260
00:12:55,796 --> 00:12:59,476 A:middle
And finally, we've got a great
new feature that makes it easier

261
00:12:59,476 --> 00:13:02,396 A:middle
to document your code
right in the comments.

262
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

263
00:13:03,396 --> 00:13:05,486 A:middle
So let's dive into
these starting

264
00:13:05,486 --> 00:13:10,686 A:middle
with the compiler
and tool updates.

265
00:13:10,876 --> 00:13:13,956 A:middle
So Apple has been using
the gnu gcc compiler

266
00:13:13,956 --> 00:13:17,306 A:middle
for quite a few years
but a few years back,

267
00:13:17,306 --> 00:13:20,256 A:middle
we decided we really
wanted a better compiler.

268
00:13:20,456 --> 00:13:23,806 A:middle
We wanted better performance,
we wanted tighter integration

269
00:13:23,806 --> 00:13:27,516 A:middle
in the Xcode, we wanted more
helpful diagnostic messages

270
00:13:27,586 --> 00:13:30,396 A:middle
that really explain to you when
there's a problem in your code

271
00:13:30,396 --> 00:13:31,716 A:middle
in a way that makes sense

272
00:13:31,716 --> 00:13:34,006 A:middle
and you could easily
see how to fix it.

273
00:13:34,556 --> 00:13:40,786 A:middle
So we began to invest in the
llvm compiler and for a number

274
00:13:40,786 --> 00:13:45,096 A:middle
of years now, we've shipped both
gcc and the llvm compiler side

275
00:13:45,096 --> 00:13:49,606 A:middle
by side, as well as the
hybrid llvm-gcc to ease

276
00:13:49,606 --> 00:13:53,556 A:middle
that transition away from
gcc to the llvm compiler.

277
00:13:54,786 --> 00:13:57,106 A:middle
And I'm really pleased
to say that this year,

278
00:13:57,106 --> 00:13:59,966 A:middle
in Xcode 5, the gnu is gone.

279
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

280
00:14:00,786 --> 00:14:02,696 A:middle
We only have the llvm compiler.

281
00:14:03,516 --> 00:14:07,876 A:middle
[ Applause ]

282
00:14:08,376 --> 00:14:10,066 A:middle
Yeah, as I said, that
makes me happy too.

283
00:14:10,476 --> 00:14:12,666 A:middle
The good news for you
is this gives you a

284
00:14:12,666 --> 00:14:14,046 A:middle
consistent experience.

285
00:14:14,596 --> 00:14:18,026 A:middle
And in the past, if you've
been building with gcc,

286
00:14:18,066 --> 00:14:22,906 A:middle
you'd see inconsistencies
between the diagnostics reported

287
00:14:22,906 --> 00:14:25,606 A:middle
to you in Xcode while you're
editing, which are coming

288
00:14:25,606 --> 00:14:29,366 A:middle
from LLVM and the messages,
the problems you'd see

289
00:14:29,576 --> 00:14:30,966 A:middle
at build time using gcc.

290
00:14:31,056 --> 00:14:33,366 A:middle
And all of that mess
has gone now.

291
00:14:33,426 --> 00:14:35,866 A:middle
There's just one compiler
and everything is consistent.

292
00:14:37,126 --> 00:14:38,316 A:middle
It's also really good news

293
00:14:38,346 --> 00:14:40,386 A:middle
because it means we
can focus our efforts

294
00:14:40,736 --> 00:14:44,476 A:middle
on adding new features in just
one compiler and move forward

295
00:14:44,476 --> 00:14:45,696 A:middle
at an even faster rate.

296
00:14:47,006 --> 00:14:48,966 A:middle
So I'm going to come
back and talk about some

297
00:14:48,966 --> 00:14:51,126 A:middle
of those advances in
LLVM in just a minute

298
00:14:51,186 --> 00:14:54,486 A:middle
but before I do that, I want
to go over a related topic

299
00:14:54,816 --> 00:14:56,216 A:middle
which is the command line tools.

300
00:14:57,436 --> 00:15:00,006 A:middle
If you're not already familiar
with the command line tools,

301
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

302
00:15:00,526 --> 00:15:03,596 A:middle
this is a package that we
provide separately from Xcode

303
00:15:04,156 --> 00:15:06,776 A:middle
that is useful for
building open source

304
00:15:06,776 --> 00:15:09,246 A:middle
and other common Unix
software on the Mac.

305
00:15:09,916 --> 00:15:14,016 A:middle
And it consists of two basic
components, there's a set

306
00:15:14,016 --> 00:15:17,276 A:middle
of tools such as the
compiler that install

307
00:15:17,276 --> 00:15:20,826 A:middle
in the /usr/bin directory and
then there's the Mac OS X SDK,

308
00:15:20,976 --> 00:15:25,496 A:middle
with headers and /usr/include,
libraries and user lib,

309
00:15:25,496 --> 00:15:27,596 A:middle
and also in System
Library/Frameworks.

310
00:15:28,666 --> 00:15:31,136 A:middle
This is what the
command line tools look

311
00:15:31,136 --> 00:15:32,946 A:middle
like on Mountain Lion.

312
00:15:33,306 --> 00:15:36,176 A:middle
Now if you're an Xcode
developer, you've got Xcode

313
00:15:36,176 --> 00:15:39,486 A:middle
but you just want to go and
build some open source code,

314
00:15:40,116 --> 00:15:41,696 A:middle
you may find yourself
still needing

315
00:15:41,696 --> 00:15:44,546 A:middle
to install the command line
tools even though you already

316
00:15:44,546 --> 00:15:45,216 A:middle
got Xcode.

317
00:15:45,216 --> 00:15:48,776 A:middle
And the reason for that is that
the standard Unix convention is

318
00:15:48,776 --> 00:15:52,616 A:middle
that the compiler and the
other tools live in /usr/bin

319
00:15:52,786 --> 00:15:56,076 A:middle
and that's not where
Xcode puts them.

320
00:15:56,286 --> 00:16:00,196 A:middle
So new in Mavericks,
we have the inspiration

321
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

322
00:16:00,196 --> 00:16:03,126 A:middle
that Xcode already has
all of those same tools,

323
00:16:03,436 --> 00:16:07,776 A:middle
it already has the OS X SDK so
there's no reason to make you go

324
00:16:07,776 --> 00:16:10,136 A:middle
and download this
separate package just

325
00:16:10,136 --> 00:16:10,956 A:middle
to get those same things.

326
00:16:10,956 --> 00:16:15,686 A:middle
And the way this works is
that the Mavericks OS comes

327
00:16:16,146 --> 00:16:19,616 A:middle
with a set of shims
installed in /usr/bin.

328
00:16:19,776 --> 00:16:21,846 A:middle
These shims are just
really small,

329
00:16:21,926 --> 00:16:25,806 A:middle
simple wrapper executables
that know where to find Xcode

330
00:16:25,806 --> 00:16:28,606 A:middle
and where to find the
corresponding tools inside

331
00:16:28,606 --> 00:16:29,166 A:middle
of Xcode.

332
00:16:29,166 --> 00:16:33,346 A:middle
So if you run the compiler from
/usr/bin via one of these shims,

333
00:16:34,006 --> 00:16:36,446 A:middle
it just reinvokes the
compiler from Xcode

334
00:16:36,446 --> 00:16:37,756 A:middle
for you automatically.

335
00:16:40,016 --> 00:16:44,396 A:middle
So the summary of this is
if you have Xcode and you're

336
00:16:44,396 --> 00:16:46,746 A:middle
on Mavericks, there's
no longer any need

337
00:16:46,746 --> 00:16:48,936 A:middle
to ever download the
command line tools.

338
00:16:49,476 --> 00:16:57,066 A:middle
[applause] So what if
you don't have Xcode?

339
00:16:57,106 --> 00:16:57,846 A:middle
What then?

340
00:16:58,256 --> 00:17:01,036 A:middle
Well, if you-- say you've got
a brand new Mac and you try

341
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

342
00:17:01,036 --> 00:17:02,736 A:middle
to run the compiler
from /usr/bin,

343
00:17:02,736 --> 00:17:05,715 A:middle
you'll get this message telling
you, "Hey, you need some tools,"

344
00:17:06,415 --> 00:17:07,435 A:middle
and it's giving you choice.

345
00:17:08,046 --> 00:17:11,165 A:middle
You can click on that Get
Xcode button, it'll bring you

346
00:17:11,165 --> 00:17:13,296 A:middle
to the apps store and you
can install Xcode just

347
00:17:13,296 --> 00:17:14,286 A:middle
as in the normal way.

348
00:17:15,296 --> 00:17:17,506 A:middle
You can also choose Install

349
00:17:17,546 --> 00:17:21,016 A:middle
which will install a standalone
set of command line tools.

350
00:17:21,806 --> 00:17:23,846 A:middle
Let's take a closer look
at what that looks like.

351
00:17:25,205 --> 00:17:28,526 A:middle
This is about the Mavericks
version of command line tools.

352
00:17:28,636 --> 00:17:31,616 A:middle
We have the same
shims in /usr/bin

353
00:17:32,166 --> 00:17:33,736 A:middle
and the tools now install

354
00:17:33,736 --> 00:17:37,876 A:middle
into library developer command
line tools and the shims forward

355
00:17:37,876 --> 00:17:40,126 A:middle
to that location
automatically in the same way

356
00:17:40,126 --> 00:17:42,966 A:middle
that they would forward
to Xcode.

357
00:17:43,106 --> 00:17:45,386 A:middle
My favorite feature
about this is it's hooked

358
00:17:45,386 --> 00:17:46,736 A:middle
up to software update.

359
00:17:47,176 --> 00:17:49,946 A:middle
On Mountain Lion,
if you've got--

360
00:17:49,946 --> 00:17:52,056 A:middle
if a new version of command
line tools was released,

361
00:17:52,056 --> 00:17:56,086 A:middle
it's up to you to remember that
you need to go and install it.

362
00:17:56,526 --> 00:17:58,976 A:middle
With Mavericks, you'll get a
notification in the apps store

363
00:17:58,976 --> 00:18:01,556 A:middle
to tell you that an update is
available and you just go in it

364
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

365
00:18:01,556 --> 00:18:02,756 A:middle
and install it in the same way.

366
00:18:03,326 --> 00:18:07,306 A:middle
So that update process
is so much smoother now.

367
00:18:09,466 --> 00:18:11,696 A:middle
It's also easier to
remove the tools.

368
00:18:12,466 --> 00:18:15,516 A:middle
Say that you had installed the
command line tools separately.

369
00:18:16,036 --> 00:18:18,166 A:middle
Maybe, you were in a coffee
shop or something and you--

370
00:18:18,166 --> 00:18:20,076 A:middle
you needed to download
a compiler quickly,

371
00:18:20,076 --> 00:18:21,846 A:middle
with a low bandwidth connection,

372
00:18:22,266 --> 00:18:24,006 A:middle
the command line tools
are much smaller,

373
00:18:24,006 --> 00:18:26,796 A:middle
but then when you get home,
you got more bandwidth,

374
00:18:26,796 --> 00:18:29,406 A:middle
you probably want to install
Xcode, now you're left

375
00:18:29,406 --> 00:18:32,476 A:middle
with these tools, you
don't need them anymore.

376
00:18:32,996 --> 00:18:34,746 A:middle
On Mountain Lion,
it was really hard

377
00:18:34,746 --> 00:18:36,386 A:middle
to ever remove the
command line tools

378
00:18:36,386 --> 00:18:38,036 A:middle
because they were scattered
throughout your root

379
00:18:38,036 --> 00:18:38,716 A:middle
file system.

380
00:18:39,206 --> 00:18:40,396 A:middle
Now, they're all in one place,

381
00:18:40,766 --> 00:18:42,486 A:middle
Library/Developer/
CommandLineTools.

382
00:18:42,986 --> 00:18:45,706 A:middle
And if you've got Xcode, you
can just blow that folder away

383
00:18:45,706 --> 00:18:46,996 A:middle
and everything will
continue working.

384
00:18:46,996 --> 00:18:50,186 A:middle
So again, just to summarize,

385
00:18:50,286 --> 00:18:54,306 A:middle
the command line tools make
it really easy to install

386
00:18:54,306 --> 00:18:56,786 A:middle
and update and even
remove in a way

387
00:18:56,786 --> 00:18:58,086 A:middle
that Mountain Lion
didn't provide.

388
00:18:58,086 --> 00:19:00,866 A:middle
But before we get back to
the compiler, there's--

389
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

390
00:19:00,866 --> 00:19:02,636 A:middle
there's one issue I want
to let you know about.

391
00:19:03,166 --> 00:19:05,336 A:middle
Notice that we've only
talked about one part

392
00:19:05,336 --> 00:19:06,296 A:middle
of the command line tools

393
00:19:06,296 --> 00:19:09,206 A:middle
which is the tools
themselves in /usr/bin.

394
00:19:09,526 --> 00:19:13,566 A:middle
Remember, there's
that SO 10 SDK?

395
00:19:13,806 --> 00:19:14,546 A:middle
And it's moved.

396
00:19:15,246 --> 00:19:18,136 A:middle
It's no longer installed
in the /directory.

397
00:19:18,606 --> 00:19:21,626 A:middle
This is the problem
for the compiler

398
00:19:21,626 --> 00:19:25,036 A:middle
because the compiler knows
where that SDK is installed.

399
00:19:25,586 --> 00:19:29,026 A:middle
But if you've got, make files
or scripts or anything else

400
00:19:29,026 --> 00:19:32,676 A:middle
that refers to files in
usr/include, usr/lib,

401
00:19:33,156 --> 00:19:34,546 A:middle
or System/Library/Frameworks

402
00:19:34,796 --> 00:19:37,226 A:middle
with hard coded paths
then you're going to need

403
00:19:37,226 --> 00:19:39,386 A:middle
to fix those things
up so that they know

404
00:19:39,386 --> 00:19:43,216 A:middle
where to find that Mac OS X SDK.

405
00:19:43,216 --> 00:19:43,716 A:middle
How do you know?

406
00:19:43,776 --> 00:19:44,816 A:middle
Where is it installed?

407
00:19:45,596 --> 00:19:47,086 A:middle
We do have something
to help with that.

408
00:19:48,066 --> 00:19:50,416 A:middle
xcrun is a tool you
may be familiar with.

409
00:19:50,416 --> 00:19:52,656 A:middle
It's been included with
Xcode for a long time.

410
00:19:53,456 --> 00:19:55,346 A:middle
Like those shims,
it's just a wrapper,

411
00:19:55,806 --> 00:19:57,746 A:middle
it knows where to
find tools in Xcode

412
00:19:57,746 --> 00:20:01,086 A:middle
and you can use it to run them.

413
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

414
00:20:01,286 --> 00:20:03,196 A:middle
It's now included with
a command line tools

415
00:20:03,196 --> 00:20:04,256 A:middle
and it has a new option.

416
00:20:05,076 --> 00:20:09,196 A:middle
If you run xcrun
-- show-sdk-path --

417
00:20:09,196 --> 00:20:13,176 A:middle
sdk and a short name like
macosx, it will print

418
00:20:13,176 --> 00:20:15,956 A:middle
out the full path to the
SDK and you can use this

419
00:20:15,956 --> 00:20:18,956 A:middle
to programmatically update
make files or scripts

420
00:20:19,696 --> 00:20:22,126 A:middle
with the full path to the SDK.

421
00:20:23,436 --> 00:20:27,696 A:middle
And related feature, since
xcrun knows where the SDK is,

422
00:20:28,206 --> 00:20:31,436 A:middle
you can also use this to tell
the compiler where the SDK is.

423
00:20:31,436 --> 00:20:35,576 A:middle
In the past, you'd have to
use the -isys root option

424
00:20:35,576 --> 00:20:38,956 A:middle
to the compiler and give it the
full paths to the SDK you want

425
00:20:38,956 --> 00:20:41,956 A:middle
to use and those full
paths are often quite long.

426
00:20:41,956 --> 00:20:43,846 A:middle
If you're on the command
line, it's a lot to type.

427
00:20:44,536 --> 00:20:47,946 A:middle
Well now, you can use
xcrun, give it a short name,

428
00:20:47,946 --> 00:20:52,046 A:middle
like iPhone OS or Mac OS X and
it will communicate that through

429
00:20:52,046 --> 00:20:56,116 A:middle
to the compiler so you don't
have to type the whole path.

430
00:20:56,326 --> 00:20:59,046 A:middle
You can also set the
SDKROOT environment variable

431
00:20:59,386 --> 00:21:01,476 A:middle
and xcrun will notice
and pick that up

432
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

433
00:21:01,476 --> 00:21:05,786 A:middle
and use that to set the SDK.

434
00:21:05,986 --> 00:21:09,156 A:middle
So try out the new command line
tools, I hope you like them,

435
00:21:09,156 --> 00:21:14,066 A:middle
and now let's get back to the
compiler, starting with C++.

436
00:21:14,456 --> 00:21:19,896 A:middle
C++11 is a major update
to the C++ language.

437
00:21:20,446 --> 00:21:22,216 A:middle
This is something that we've
been working on rolling

438
00:21:22,216 --> 00:21:23,986 A:middle
out in Xcode for a while now.

439
00:21:25,426 --> 00:21:29,626 A:middle
This year, in Apple LLVM version
5.0, we have complete support

440
00:21:29,626 --> 00:21:33,406 A:middle
for everything in C++11
with the sole exception

441
00:21:33,406 --> 00:21:34,726 A:middle
of thread local storage.

442
00:21:37,056 --> 00:21:39,936 A:middle
Here's a list of some of the
major features we've added

443
00:21:39,936 --> 00:21:43,246 A:middle
in the last year and I don't
have time to go into all

444
00:21:43,246 --> 00:21:44,456 A:middle
of these in any detail.

445
00:21:45,276 --> 00:21:47,806 A:middle
So I just-- to give you a taste
if I wanted to single out one

446
00:21:47,806 --> 00:21:49,726 A:middle
of them to look at a
little more closely,

447
00:21:50,556 --> 00:21:54,376 A:middle
which is Inheriting
Constructors, and let's look

448
00:21:54,376 --> 00:21:55,676 A:middle
at this with an example.

449
00:21:56,246 --> 00:21:58,776 A:middle
I've got here a simple class.

450
00:21:59,036 --> 00:22:02,686 A:middle
It's got an integer A field
and a float B field and a set

451
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

452
00:22:02,686 --> 00:22:05,576 A:middle
of constructors that let you
specify the initial values

453
00:22:05,766 --> 00:22:07,126 A:middle
for various combinations

454
00:22:07,126 --> 00:22:09,176 A:middle
of those fields using
default values

455
00:22:09,176 --> 00:22:10,616 A:middle
for the things you
didn't specify.

456
00:22:10,616 --> 00:22:15,096 A:middle
Now I want to make
a derive class Y

457
00:22:15,536 --> 00:22:17,056 A:middle
with those same constructors.

458
00:22:17,266 --> 00:22:19,556 A:middle
And I just want to pass
the same values along

459
00:22:19,556 --> 00:22:20,976 A:middle
to the base class constructors.

460
00:22:21,836 --> 00:22:23,736 A:middle
There's a lot of
boiler-plate code here

461
00:22:24,296 --> 00:22:26,136 A:middle
and it's also error
prone to maintain.

462
00:22:26,136 --> 00:22:28,706 A:middle
If you make a change in the
base class, you've got to go

463
00:22:28,706 --> 00:22:31,816 A:middle
and update all the drive
classes in ways that match.

464
00:22:32,736 --> 00:22:36,846 A:middle
And C++11 inheriting
constructors let you replace all

465
00:22:36,846 --> 00:22:39,536 A:middle
that boiler plate
which just using X::X.

466
00:22:39,536 --> 00:22:43,576 A:middle
And all this does is
tell the compiler if--

467
00:22:43,726 --> 00:22:45,896 A:middle
if I see a use of one
of these constructors

468
00:22:45,896 --> 00:22:48,226 A:middle
that matches the signature
from the base class,

469
00:22:48,736 --> 00:22:50,296 A:middle
just implicitly declare that,

470
00:22:50,716 --> 00:22:53,366 A:middle
and it will invoke
the constructor

471
00:22:53,366 --> 00:22:54,966 A:middle
from the base class
as you'd expect.

472
00:22:56,286 --> 00:23:00,046 A:middle
Notice though, I've added an
int c field in the derive class.

473
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

474
00:23:00,216 --> 00:23:01,406 A:middle
How do we initialize that?

475
00:23:02,456 --> 00:23:04,726 A:middle
Well, there-- there's a lot of
different ways you could do it

476
00:23:05,096 --> 00:23:08,476 A:middle
and C++11 has a number of
features that help with this.

477
00:23:09,166 --> 00:23:11,076 A:middle
I want to-- since it fits
nicely in this example,

478
00:23:11,076 --> 00:23:13,096 A:middle
I wanted to talk about
one way to do that.

479
00:23:13,096 --> 00:23:14,656 A:middle
This is not a new
feature this year

480
00:23:14,656 --> 00:23:17,716 A:middle
but it's something that's
been around for a while

481
00:23:17,716 --> 00:23:20,466 A:middle
which is non-static data
member initializers.

482
00:23:21,116 --> 00:23:24,156 A:middle
You can now set the initial
value right in the class

483
00:23:25,096 --> 00:23:29,196 A:middle
and this tells the compiler if I
don't have some other values set

484
00:23:29,196 --> 00:23:32,496 A:middle
in the constructor to use
that as a default value.

485
00:23:33,026 --> 00:23:37,526 A:middle
Notice we can use the same
thing in the base class X

486
00:23:38,176 --> 00:23:43,086 A:middle
to set the values of fields A
and B, and then remove a lot

487
00:23:43,086 --> 00:23:45,306 A:middle
of the complexity from
the constructors there.

488
00:23:46,396 --> 00:23:48,796 A:middle
So together, inheriting
constructors,

489
00:23:48,996 --> 00:23:50,986 A:middle
a non-static data
member initializers,

490
00:23:51,416 --> 00:23:54,056 A:middle
take the simple example and
make it a lot more clear

491
00:23:54,056 --> 00:23:56,006 A:middle
and concise and easy
to maintain.

492
00:23:56,796 --> 00:23:59,656 A:middle
While we're on the topic of C++,

493
00:23:59,766 --> 00:24:01,176 A:middle
there's one other
important piece

494
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

495
00:24:01,336 --> 00:24:02,716 A:middle
which is the Runtime Library.

496
00:24:03,896 --> 00:24:05,416 A:middle
We've been going
through a transition

497
00:24:05,496 --> 00:24:08,936 A:middle
from the older GNU lib
standard C++ library

498
00:24:09,256 --> 00:24:11,676 A:middle
to the new LLVM libc++.

499
00:24:11,806 --> 00:24:15,756 A:middle
And if you want to use a lot
of those features from C++11,

500
00:24:16,186 --> 00:24:18,726 A:middle
you really need libc++
to support them.

501
00:24:19,506 --> 00:24:21,406 A:middle
It supports the number
of the language features

502
00:24:21,406 --> 00:24:23,056 A:middle
and it also has a number

503
00:24:23,056 --> 00:24:28,576 A:middle
of new library components
that come with C++11.

504
00:24:28,706 --> 00:24:30,846 A:middle
One thing that is
new this year is

505
00:24:30,846 --> 00:24:32,956 A:middle
that we've made this
the compiler default

506
00:24:32,956 --> 00:24:36,036 A:middle
if you're deploying to
iOS 7 or OS X Mavericks.

507
00:24:37,426 --> 00:24:41,156 A:middle
If you want to deploy back
as far as iOS 5 or OS X Lion,

508
00:24:41,506 --> 00:24:43,976 A:middle
you can still choose
to use libc++ by going

509
00:24:43,976 --> 00:24:45,286 A:middle
to the Xcode build settings,

510
00:24:45,936 --> 00:24:50,276 A:middle
look for C++ standard
library and choose libc++.

511
00:24:51,386 --> 00:24:54,776 A:middle
So again, C++11 is a huge
change to the language.

512
00:24:54,776 --> 00:24:57,796 A:middle
If you're a C++ programmer,
I strongly encourage you

513
00:24:57,796 --> 00:25:00,886 A:middle
to check it out and there's a
lot of great new features there

514
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

515
00:25:00,886 --> 00:25:02,206 A:middle
that can make you
more productive.

516
00:25:02,206 --> 00:25:07,826 A:middle
Our next topic is about
Compiler Warnings.

517
00:25:08,626 --> 00:25:13,906 A:middle
So as you're writing your code
and building, the compiler is--

518
00:25:13,946 --> 00:25:17,706 A:middle
is looking closely at that
code and in the process,

519
00:25:18,046 --> 00:25:19,816 A:middle
we can catch errors or--

520
00:25:19,816 --> 00:25:23,476 A:middle
and warn you about them so
that you can fix them quickly

521
00:25:23,476 --> 00:25:25,846 A:middle
without having to spend
a lot of time debugging.

522
00:25:27,166 --> 00:25:29,746 A:middle
So there's three different
categories of changes

523
00:25:29,746 --> 00:25:32,256 A:middle
that I want to talk about
related to compiler warnings.

524
00:25:32,256 --> 00:25:34,256 A:middle
First, we have some
new compiler warnings.

525
00:25:35,286 --> 00:25:38,376 A:middle
We have a number of warnings
that have been around for awhile

526
00:25:38,456 --> 00:25:41,066 A:middle
but we've identified them
as being really important

527
00:25:41,206 --> 00:25:44,446 A:middle
and we're going to now enable
them by default in new projects.

528
00:25:45,086 --> 00:25:46,536 A:middle
And finally, there's
a few warnings

529
00:25:47,136 --> 00:25:49,846 A:middle
that are really serious,
it cause serious problems

530
00:25:49,846 --> 00:25:52,636 A:middle
and we're now going to treat
them as errors by default.

531
00:25:53,396 --> 00:25:56,196 A:middle
So let's-- dive into
this starting

532
00:25:56,196 --> 00:25:57,576 A:middle
with the new compiler warnings.

533
00:25:59,036 --> 00:26:01,206 A:middle
The first one is
unsequenced modification.

534
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

535
00:26:01,356 --> 00:26:03,606 A:middle
This is a warning about
non-portable code.

536
00:26:04,526 --> 00:26:08,616 A:middle
C-based languages don't define
the order of some operations

537
00:26:08,616 --> 00:26:10,186 A:middle
and I'll give you an
example in just a minute,

538
00:26:10,846 --> 00:26:12,686 A:middle
but if you have some
code working

539
00:26:12,686 --> 00:26:15,696 A:middle
with a different compiler
from a different platform or--

540
00:26:15,696 --> 00:26:19,686 A:middle
or wherever and you move
to using the LLVM compiler,

541
00:26:20,036 --> 00:26:23,276 A:middle
it may behave differently
in a way that causes a bug.

542
00:26:23,796 --> 00:26:25,196 A:middle
Let's look at an example.

543
00:26:25,586 --> 00:26:29,076 A:middle
This simple function is supposed
to just increment a value

544
00:26:29,216 --> 00:26:31,746 A:middle
and return it but
there's a problem.

545
00:26:32,006 --> 00:26:34,646 A:middle
There's actually two
assignments to the value X here,

546
00:26:35,146 --> 00:26:38,936 A:middle
the equal operator does an
assignment, the plus, plus,

547
00:26:38,936 --> 00:26:41,756 A:middle
post increment operator
does a separate assignment

548
00:26:42,066 --> 00:26:45,466 A:middle
and the order between those two
is not defined by the language.

549
00:26:45,726 --> 00:26:47,436 A:middle
Some compilers may
do them in one order,

550
00:26:47,436 --> 00:26:48,776 A:middle
some may do it in
the other order.

551
00:26:49,596 --> 00:26:52,376 A:middle
So the LLVM compiler now gives
you a warning about this.

552
00:26:53,666 --> 00:26:55,946 A:middle
It's an indication to you,
you need to look at your code

553
00:26:55,946 --> 00:26:57,516 A:middle
and figure out how
to rewrite that so

554
00:26:57,516 --> 00:26:58,966 A:middle
that the ordering
is well-defined.

555
00:26:59,506 --> 00:27:03,146 A:middle
Let's go on to the next
new warning which is

556
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

557
00:27:03,146 --> 00:27:04,466 A:middle
about integer overflow.

558
00:27:05,146 --> 00:27:07,346 A:middle
In some cases, the
compiler can determine

559
00:27:07,876 --> 00:27:11,106 A:middle
that an integer operation
is going to overflow.

560
00:27:11,856 --> 00:27:14,646 A:middle
This is almost certain
to cause a bug at runtime

561
00:27:15,226 --> 00:27:16,926 A:middle
so we now warn about that.

562
00:27:17,706 --> 00:27:19,616 A:middle
For example, if we're
multiplying two constants,

563
00:27:19,646 --> 00:27:21,396 A:middle
they're big numbers,
not that big,

564
00:27:21,396 --> 00:27:24,136 A:middle
but when you multiply them
the product is too big

565
00:27:24,136 --> 00:27:25,946 A:middle
to even fit in a 32-bit integer.

566
00:27:26,406 --> 00:27:28,736 A:middle
So the LLVM compiler
will now warn about this

567
00:27:29,096 --> 00:27:30,526 A:middle
and tell you, this doesn't fit.

568
00:27:31,366 --> 00:27:33,386 A:middle
The obvious solution in
a case like this would be

569
00:27:33,386 --> 00:27:35,846 A:middle
to use a larger size
integer such as long longs.

570
00:27:36,686 --> 00:27:40,026 A:middle
You can use long long constants
and a long long return value

571
00:27:40,126 --> 00:27:41,306 A:middle
and the warning goes away.

572
00:27:42,646 --> 00:27:44,276 A:middle
So those are two new warnings.

573
00:27:44,976 --> 00:27:46,506 A:middle
Let's talk about
some of the warnings

574
00:27:46,506 --> 00:27:48,686 A:middle
that we're now going
to enable by default.

575
00:27:49,116 --> 00:27:51,886 A:middle
Unused functions,
this is an easy one.

576
00:27:52,426 --> 00:27:55,056 A:middle
While you're editing your
project, it's not that uncommon

577
00:27:55,386 --> 00:27:58,236 A:middle
to leave behind some pieces of
code that are no longer used.

578
00:27:58,756 --> 00:28:02,596 A:middle
And if those are in static
functions either in declarations

579
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

580
00:28:02,596 --> 00:28:04,596 A:middle
or actual definitions
with the function body

581
00:28:04,596 --> 00:28:07,746 A:middle
like I've shown here, the
compiler can detect this

582
00:28:07,826 --> 00:28:11,246 A:middle
and warn you, and this is just
an opportunity for you to clean

583
00:28:11,246 --> 00:28:13,956 A:middle
up your code, remove
some of that unused craft

584
00:28:13,956 --> 00:28:15,496 A:middle
and make it easier to maintain.

585
00:28:16,336 --> 00:28:18,926 A:middle
We're going to now enable this
by default in new projects.

586
00:28:20,556 --> 00:28:23,476 A:middle
Implicit Boolean
conversions is another warning

587
00:28:23,476 --> 00:28:25,346 A:middle
like that, enabled by default.

588
00:28:25,796 --> 00:28:29,816 A:middle
This is especially helpful in
C++, and let's see an example.

589
00:28:30,536 --> 00:28:33,656 A:middle
Here, I've got a helper function
that I've declared and I want

590
00:28:33,656 --> 00:28:35,726 A:middle
to check and see if the
helper is available,

591
00:28:35,726 --> 00:28:37,366 A:middle
I'm going to call it.

592
00:28:37,976 --> 00:28:40,966 A:middle
The compiler warns and says,
"If you take the address

593
00:28:40,966 --> 00:28:43,406 A:middle
of the function, it will
always evaluate to true."

594
00:28:43,406 --> 00:28:46,166 A:middle
So the conditional here
isn't doing what we expect.

595
00:28:46,596 --> 00:28:49,856 A:middle
In a case like this,
you probably meant

596
00:28:49,856 --> 00:28:51,076 A:middle
to make that a weak import.

597
00:28:51,576 --> 00:28:54,526 A:middle
And you just need to
add the weak attribute

598
00:28:54,626 --> 00:28:56,866 A:middle
on that function declaration
to tell the compiler

599
00:28:57,236 --> 00:28:59,516 A:middle
that this value, this
function pointer maybe zero

600
00:28:59,616 --> 00:29:01,106 A:middle
and without the warning
goes away.

601
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

602
00:29:01,636 --> 00:29:05,086 A:middle
So this again is a serious
problem enabled by default,

603
00:29:05,296 --> 00:29:06,756 A:middle
the warning is enabled
by default.

604
00:29:07,306 --> 00:29:11,176 A:middle
A similar issue is
with Enum conversions.

605
00:29:11,726 --> 00:29:13,766 A:middle
Here's an example of that.

606
00:29:13,766 --> 00:29:17,026 A:middle
I've got two Enums, a set of
shapes and a set of circles

607
00:29:17,256 --> 00:29:19,956 A:middle
and I want to-- I have a draw
function that can draw that

608
00:29:19,956 --> 00:29:24,676 A:middle
and I try to draw a blue circle
but I-- I got the order wrong.

609
00:29:24,676 --> 00:29:26,386 A:middle
It's supposed to be
Draw Circle Blue,

610
00:29:26,386 --> 00:29:27,756 A:middle
instead of Draw Blue Circle.

611
00:29:29,106 --> 00:29:32,296 A:middle
The implicit Enum conversion
warning detects that.

612
00:29:32,296 --> 00:29:34,576 A:middle
It would actually warn
twice here, ones for each

613
00:29:34,576 --> 00:29:36,666 A:middle
of the arguments, because
they're both in the wrong order.

614
00:29:37,126 --> 00:29:40,626 A:middle
Again, this is something
that's trivial to fix.

615
00:29:41,036 --> 00:29:43,366 A:middle
If you have a problem
like this, you really want

616
00:29:43,366 --> 00:29:44,296 A:middle
to fix it right away

617
00:29:44,296 --> 00:29:46,636 A:middle
and so we're now enabling
this warning by default.

618
00:29:49,156 --> 00:29:53,356 A:middle
Undeclared selectors,
let's look at an example.

619
00:29:53,356 --> 00:29:58,696 A:middle
I want to make a timer, an NS
timer to go off in 60 seconds

620
00:29:58,696 --> 00:30:01,916 A:middle
and when that timer goes off, I
want to send the close message

621
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

622
00:30:02,176 --> 00:30:04,856 A:middle
to the current object,
but I've got a typo.

623
00:30:04,976 --> 00:30:07,286 A:middle
Instead of close with an
"S" I wrote close with a "Z"

624
00:30:07,646 --> 00:30:10,976 A:middle
and the undeclared selector
warning will catch this.

625
00:30:11,956 --> 00:30:14,596 A:middle
The last category of
warnings that I want to talk

626
00:30:14,596 --> 00:30:17,296 A:middle
about are two issues
that are so serious,

627
00:30:17,296 --> 00:30:19,386 A:middle
we're going to treat them
as errors by default.

628
00:30:21,146 --> 00:30:22,856 A:middle
Mismatched Return Types, this is

629
00:30:22,856 --> 00:30:24,866 A:middle
where you're simply
missing a return value

630
00:30:24,926 --> 00:30:27,136 A:middle
and here's an example of that.

631
00:30:27,726 --> 00:30:31,996 A:middle
I had intended to make a safe
square root function based

632
00:30:31,996 --> 00:30:34,546 A:middle
on the realization you can't
compute the square root

633
00:30:34,546 --> 00:30:38,186 A:middle
of a negative value so I'm
checking if the input is less

634
00:30:38,186 --> 00:30:40,016 A:middle
than zero, I'll just return.

635
00:30:40,826 --> 00:30:43,276 A:middle
But I didn't think about the
fact that the function needs

636
00:30:43,276 --> 00:30:45,766 A:middle
to return something, is
declared to return a float.

637
00:30:46,676 --> 00:30:48,826 A:middle
The compiler catches
this of course says,

638
00:30:49,016 --> 00:30:50,276 A:middle
"You're missing a return value."

639
00:30:50,846 --> 00:30:54,086 A:middle
A problem like this is really
serious because it's going

640
00:30:54,326 --> 00:30:58,266 A:middle
to lead to undefined behavior
and your program is going

641
00:30:58,266 --> 00:31:00,716 A:middle
to crash or it's just going
to do something really wrong.

642
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

643
00:31:01,446 --> 00:31:03,406 A:middle
So this is now going to
be treated as an error

644
00:31:03,406 --> 00:31:05,296 A:middle
by default in new projects.

645
00:31:06,696 --> 00:31:08,576 A:middle
Another very serious problem

646
00:31:08,576 --> 00:31:10,826 A:middle
like that is Unintentional
Root Classes.

647
00:31:11,546 --> 00:31:13,466 A:middle
This is more of a
typo kind of problem.

648
00:31:13,466 --> 00:31:16,786 A:middle
I'm declaring a new interface,
my class, and I just forgot

649
00:31:16,786 --> 00:31:18,326 A:middle
to specify the base class.

650
00:31:20,096 --> 00:31:23,886 A:middle
The compiler again
catches this and suggest

651
00:31:24,436 --> 00:31:26,906 A:middle
that you declare an NS
object base class or--

652
00:31:26,906 --> 00:31:28,226 A:middle
or maybe some other base class

653
00:31:28,226 --> 00:31:30,566 A:middle
that would be more
appropriate in your code.

654
00:31:31,976 --> 00:31:34,716 A:middle
This, too, we are going to
treat as an error by default.

655
00:31:35,456 --> 00:31:38,646 A:middle
Now, if you really did intend
for that to be a root class,

656
00:31:39,196 --> 00:31:42,016 A:middle
you can add NS root class
before the add interface just

657
00:31:42,016 --> 00:31:44,356 A:middle
to tell the compiler, "Yeah,
this is really what I meant."

658
00:31:44,896 --> 00:31:49,406 A:middle
So to summarize all
these warning changes,

659
00:31:49,716 --> 00:31:51,096 A:middle
we have two new warnings:

660
00:31:51,266 --> 00:31:54,706 A:middle
unsequenced modifications
and integer overflow.

661
00:31:55,576 --> 00:31:58,346 A:middle
We have four warnings that
are now going to be enabled

662
00:31:58,346 --> 00:32:00,996 A:middle
by default in new
projects, unused functions,

663
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

664
00:32:01,236 --> 00:32:03,446 A:middle
implicit Boolean
and Enum conversions

665
00:32:03,806 --> 00:32:07,166 A:middle
and undeclared selectors,
and finally, two warnings

666
00:32:07,166 --> 00:32:09,466 A:middle
that are really serious:
mismatch return types

667
00:32:09,586 --> 00:32:12,086 A:middle
and unintentional root classes
that we're going to treat

668
00:32:12,086 --> 00:32:14,226 A:middle
as errors by default
in new projects.

669
00:32:16,636 --> 00:32:20,416 A:middle
So just as the warnings
can help you catch bugs,

670
00:32:21,066 --> 00:32:24,036 A:middle
the LLVM compiler provides
a really powerful feature

671
00:32:24,406 --> 00:32:26,426 A:middle
to go deeper in analyzing
your code

672
00:32:26,426 --> 00:32:29,536 A:middle
and finding more subtle issues
and so to talk about that,

673
00:32:29,536 --> 00:32:32,516 A:middle
I'd like to invite
up Anna Zaks to talk

674
00:32:32,516 --> 00:32:34,386 A:middle
about the Static
Analyzer and finish

675
00:32:34,386 --> 00:32:34,976 A:middle
up the rest of the session.

676
00:32:35,516 --> 00:32:41,066 A:middle
[ Applause ]

677
00:32:41,566 --> 00:32:42,136 A:middle
>> Thank you, Bob.

678
00:32:42,796 --> 00:32:44,406 A:middle
First, I'm going to
talk about the new

679
00:32:44,406 --> 00:32:45,856 A:middle
and exciting features
we've added

680
00:32:45,856 --> 00:32:47,966 A:middle
to the static analyzer
over the past year.

681
00:32:48,516 --> 00:32:51,066 A:middle
And for those of you who had
never used the static analyzer,

682
00:32:51,356 --> 00:32:54,416 A:middle
you'll get to learn it-- learn
about what it is all about

683
00:32:54,416 --> 00:32:57,166 A:middle
and how it can help you
in your development cycle.

684
00:32:58,166 --> 00:33:00,986 A:middle
So everyone agrees
that bugs are bad

685
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

686
00:33:00,986 --> 00:33:02,796 A:middle
and as Bob has just mentioned,

687
00:33:02,866 --> 00:33:06,516 A:middle
compiler warnings might pinpoint
some of those bugs to you.

688
00:33:07,336 --> 00:33:10,836 A:middle
So how the analyzer issues are
different from compiler warnings

689
00:33:11,246 --> 00:33:13,366 A:middle
and why should you use
the static analyzer?

690
00:33:14,326 --> 00:33:17,506 A:middle
Well, the static analyzer
performs much deeper analysis

691
00:33:17,506 --> 00:33:18,226 A:middle
of your program.

692
00:33:18,726 --> 00:33:21,696 A:middle
It systematically explores
every paths for your program

693
00:33:21,976 --> 00:33:23,786 A:middle
which allows it to
find those hard

694
00:33:23,786 --> 00:33:25,496 A:middle
to reproduce edge case bugs.

695
00:33:25,566 --> 00:33:28,416 A:middle
The static analyzer that ships

696
00:33:28,416 --> 00:33:31,296 A:middle
to this Xcode 5 finds
new kinds of bugs.

697
00:33:31,956 --> 00:33:34,476 A:middle
It performs deeper
record analysis especially

698
00:33:34,476 --> 00:33:38,896 A:middle
for objective-C and C++ and
it also exposes new workflows

699
00:33:39,146 --> 00:33:41,856 A:middle
that will allow you to
tailor analysis power

700
00:33:42,126 --> 00:33:43,576 A:middle
to your specific setting.

701
00:33:44,366 --> 00:33:46,136 A:middle
So let's first talk
about the new kinds

702
00:33:46,136 --> 00:33:47,676 A:middle
of bugs analyzer can find.

703
00:33:48,056 --> 00:33:51,736 A:middle
Most of you are familiar
with NSDictionary

704
00:33:52,026 --> 00:33:56,776 A:middle
and NSMutableDictionary APIs
that this code snippet is using.

705
00:33:56,856 --> 00:34:00,646 A:middle
However, let's bring here
the Apple documentation site

706
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

707
00:34:00,886 --> 00:34:03,356 A:middle
that will tell us exactly
what this method does.

708
00:34:04,216 --> 00:34:05,956 A:middle
So the Apple documentation
tells us

709
00:34:05,956 --> 00:34:07,926 A:middle
that this method
creates a dictionary

710
00:34:07,926 --> 00:34:09,556 A:middle
with a given key and value pair.

711
00:34:10,456 --> 00:34:12,056 A:middle
However, look at the fine print.

712
00:34:12,616 --> 00:34:15,326 A:middle
Here in the parameter
section, it also tells us

713
00:34:15,786 --> 00:34:17,446 A:middle
that if the value is nil,

714
00:34:17,476 --> 00:34:19,856 A:middle
then an exception will
be thrown at runtime.

715
00:34:20,346 --> 00:34:23,786 A:middle
And the runtime exception is
not something any of us want

716
00:34:23,786 --> 00:34:25,846 A:middle
to happen on the user's iPad

717
00:34:25,846 --> 00:34:29,096 A:middle
or an iPhone while our
application is being run there.

718
00:34:29,916 --> 00:34:31,755 A:middle
So how can the static
analyzer help?

719
00:34:32,706 --> 00:34:35,216 A:middle
Well, let's go back to our
code snippet and suppose here

720
00:34:35,216 --> 00:34:36,755 A:middle
that the default object was set

721
00:34:36,755 --> 00:34:39,266 A:middle
to nil earlier along
the execution path.

722
00:34:40,016 --> 00:34:42,286 A:middle
So if the analyzer
knows this, it can--

723
00:34:42,286 --> 00:34:44,916 A:middle
it will warn you and
it will remind you

724
00:34:45,206 --> 00:34:47,815 A:middle
that this API should
not be used in this way.

725
00:34:48,835 --> 00:34:51,476 A:middle
And of course if you've switched
to the new literal syntax,

726
00:34:51,476 --> 00:34:52,565 A:middle
they're also going to warn

727
00:34:52,565 --> 00:34:54,505 A:middle
but with a slightly
different error message.

728
00:34:54,996 --> 00:34:58,606 A:middle
Well, mostly you will say,
"This code is too simple.

729
00:34:58,606 --> 00:34:59,956 A:middle
I don't try code like that.

730
00:34:59,956 --> 00:35:02,856 A:middle
I don't set an object to nil and
immediately create an array."

731
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

732
00:35:03,376 --> 00:35:07,136 A:middle
Well, we've run the analyzer
with this warning turned on,

733
00:35:07,136 --> 00:35:11,116 A:middle
on several large Objective-C
code bases and it found issues

734
00:35:11,116 --> 00:35:13,616 A:middle
in every single one of them.

735
00:35:13,926 --> 00:35:16,766 A:middle
Here's an example from a
large Objective-C code base

736
00:35:16,766 --> 00:35:18,046 A:middle
where the analyzer warns.

737
00:35:18,696 --> 00:35:23,086 A:middle
Here it tells you that the
object inModifiedKeys is--

738
00:35:23,436 --> 00:35:26,466 A:middle
could be nil and it is
used to create a dictionary

739
00:35:27,796 --> 00:35:29,886 A:middle
so when the analyzer
reports an issue to you,

740
00:35:29,886 --> 00:35:32,336 A:middle
not only does it point
to the line number

741
00:35:32,336 --> 00:35:35,206 A:middle
where the issue occurred
but it also explains

742
00:35:35,206 --> 00:35:37,096 A:middle
to you why this problem
has happened.

743
00:35:37,936 --> 00:35:40,646 A:middle
And the analyzer explains
issues by showing you a path

744
00:35:41,386 --> 00:35:44,386 A:middle
through your program on which
the-- the problem occurs.

745
00:35:44,866 --> 00:35:47,066 A:middle
So in just-- in order to
see the path, you just click

746
00:35:47,066 --> 00:35:49,526 A:middle
on the issue and the
path gets displayed.

747
00:35:50,376 --> 00:35:52,446 A:middle
And notice at the top
of the editor window,

748
00:35:52,446 --> 00:35:55,886 A:middle
you'll also see analyzer
issue navigation bar

749
00:35:55,886 --> 00:35:58,086 A:middle
that will allow you to
step through this task

750
00:35:58,206 --> 00:36:00,196 A:middle
and examine each
step along the way.

751
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

752
00:36:01,136 --> 00:36:03,086 A:middle
So let's see what
actually happens here.

753
00:36:03,086 --> 00:36:05,116 A:middle
Why the analyzer thinks
there is a problem?

754
00:36:05,796 --> 00:36:08,796 A:middle
Well, first, we call
postNotificationName method.

755
00:36:09,286 --> 00:36:13,126 A:middle
And here we-- in-- the
creator's third argument

756
00:36:13,156 --> 00:36:15,456 A:middle
for this method call,
the special case,

757
00:36:15,456 --> 00:36:17,966 A:middle
the case when inModifiedKeys
object is nil.

758
00:36:17,966 --> 00:36:20,956 A:middle
So we say, "If inModifiedKeys
object is not nil,

759
00:36:21,336 --> 00:36:24,856 A:middle
create a dictionary, otherwise,
just pass a nil and use

760
00:36:24,856 --> 00:36:26,356 A:middle
that as a third argument."

761
00:36:26,836 --> 00:36:30,746 A:middle
This program keeps running
along the same paths and later

762
00:36:30,746 --> 00:36:34,966 A:middle
on the same API is gone
and called again and here,

763
00:36:34,966 --> 00:36:38,076 A:middle
the programmer just
forgot to check for--

764
00:36:38,376 --> 00:36:40,566 A:middle
they don't check if
inModifiedKeys is nil.

765
00:36:40,566 --> 00:36:44,426 A:middle
They just-- just called it--
they just create a dictionary

766
00:36:44,426 --> 00:36:45,846 A:middle
and use it at the
third argument.

767
00:36:46,156 --> 00:36:48,256 A:middle
So clearly there is
an inconsistency here

768
00:36:48,256 --> 00:36:50,276 A:middle
and this is what
the analyzer notices

769
00:36:50,546 --> 00:36:52,386 A:middle
and this is why it
reports the issue.

770
00:36:52,936 --> 00:36:57,106 A:middle
So we've-- we've also
stand a lot of time

771
00:36:57,106 --> 00:37:00,316 A:middle
and we've greatly
improved our C++ support.

772
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

773
00:37:00,726 --> 00:37:03,086 A:middle
So here's another
example of a new--

774
00:37:03,086 --> 00:37:05,556 A:middle
of warning that we've
added to C++.

775
00:37:06,076 --> 00:37:09,236 A:middle
Here, we-- we allocate an
object and later on be freed.

776
00:37:09,236 --> 00:37:11,956 A:middle
So, of course, the
problem here is

777
00:37:11,956 --> 00:37:15,346 A:middle
that object allocators was
new, should be the allocated

778
00:37:15,346 --> 00:37:20,016 A:middle
with delete, because calling a
free function will not call the

779
00:37:20,016 --> 00:37:22,986 A:middle
distractor of the object so
this might result in memory

780
00:37:22,986 --> 00:37:26,396 A:middle
or resource leaks which are
hard to find at runtime.

781
00:37:26,886 --> 00:37:30,796 A:middle
So we've added several new
warnings over the past year.

782
00:37:30,796 --> 00:37:34,646 A:middle
We are going to warn if you're
trying to add a nil element

783
00:37:34,646 --> 00:37:39,066 A:middle
to NSMutableArray or nil key or
value to NSMutableDictionary.

784
00:37:39,446 --> 00:37:43,506 A:middle
We also warn on use-after-free
in C++, mismatched deallocators

785
00:37:43,566 --> 00:37:46,196 A:middle
and creation references
to null in C++.

786
00:37:46,716 --> 00:37:50,986 A:middle
And of course these new
warnings just add on top

787
00:37:50,986 --> 00:37:53,486 A:middle
of the growing body
of the analyzer issues

788
00:37:53,486 --> 00:37:55,806 A:middle
that we've added over the years.

789
00:37:56,696 --> 00:38:00,686 A:middle
And know that both old and
new issues greatly benefit

790
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

791
00:38:00,686 --> 00:38:04,426 A:middle
from the power of the
analysis because again a factor

792
00:38:04,426 --> 00:38:08,576 A:middle
to finding bugs in your programs
is actually understanding what

793
00:38:08,576 --> 00:38:09,406 A:middle
your program does.

794
00:38:09,506 --> 00:38:12,436 A:middle
For example, when you call
a method, what happens?

795
00:38:13,876 --> 00:38:15,616 A:middle
Some of you might
remember that last year,

796
00:38:15,616 --> 00:38:18,816 A:middle
we've added cross function
reasoning for C functions.

797
00:38:19,356 --> 00:38:22,556 A:middle
Well, this year, we've extended
it to objective-C and C++.

798
00:38:23,856 --> 00:38:27,196 A:middle
And we found that this greatly
benefit the power of analysis

799
00:38:27,196 --> 00:38:30,746 A:middle
because it's so natural for
people to split their cord

800
00:38:30,746 --> 00:38:32,986 A:middle
into subfunctions or submethods.

801
00:38:33,956 --> 00:38:36,976 A:middle
I'm going to explain
to you how this works

802
00:38:36,976 --> 00:38:38,216 A:middle
and why this important

803
00:38:38,476 --> 00:38:41,676 A:middle
by showing you how the analyzer
operates behind the scenes,

804
00:38:42,216 --> 00:38:44,326 A:middle
on this code snippet.

805
00:38:44,326 --> 00:38:48,386 A:middle
So as I mentioned earlier, the
analyzer analyzes your program

806
00:38:48,386 --> 00:38:51,886 A:middle
by systemically exploring every
paths through your program.

807
00:38:52,606 --> 00:38:56,196 A:middle
And it has to be statically
without running your program.

808
00:38:57,046 --> 00:38:59,826 A:middle
And in order to do that,
it extracts away the values

809
00:38:59,826 --> 00:39:03,156 A:middle
of your variables and
constructs a draft

810
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

811
00:39:03,396 --> 00:39:06,296 A:middle
from extract system states--
of extract system states

812
00:39:06,296 --> 00:39:07,596 A:middle
and transitions between them.

813
00:39:08,076 --> 00:39:10,436 A:middle
So let's construct such a
draft for this code snippet.

814
00:39:11,296 --> 00:39:14,366 A:middle
The analyzer starts with
the initial state and then

815
00:39:14,366 --> 00:39:16,746 A:middle
as it evaluates the
statement in your program,

816
00:39:16,986 --> 00:39:21,266 A:middle
it construct a second
state, so here we create,

817
00:39:21,266 --> 00:39:23,666 A:middle
allocate an object,
localized its name.

818
00:39:24,276 --> 00:39:26,946 A:middle
Notice here how the
analyzer splits the path

819
00:39:27,446 --> 00:39:31,546 A:middle
to capture the fact that L could
be nil and from now on is going

820
00:39:31,546 --> 00:39:34,106 A:middle
to explore both of these paths.

821
00:39:34,736 --> 00:39:38,076 A:middle
So now let's go back and see
what happened when the analyzed

822
00:39:38,186 --> 00:39:40,676 A:middle
or when the simulated
this last method call.

823
00:39:41,506 --> 00:39:43,326 A:middle
So previously the analyzer had

824
00:39:43,366 --> 00:39:45,426 A:middle
to use the most pessimistic
assumptions

825
00:39:45,426 --> 00:39:47,166 A:middle
about what a method
call could do.

826
00:39:48,036 --> 00:39:49,046 A:middle
However, it's silly.

827
00:39:49,266 --> 00:39:51,076 A:middle
If the method implementation
is available

828
00:39:51,076 --> 00:39:52,326 A:middle
to us, we should use that.

829
00:39:52,966 --> 00:39:56,176 A:middle
So let's go back and replay
how this will work now.

830
00:39:56,756 --> 00:40:00,046 A:middle
So in this case, the
analyzer knows that the type

831
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

832
00:40:00,046 --> 00:40:03,706 A:middle
of object A is asset and
given the object type

833
00:40:03,706 --> 00:40:07,256 A:middle
and the method name, we can
just very high assurance detect

834
00:40:07,566 --> 00:40:09,766 A:middle
which method will be
called at runtime.

835
00:40:10,836 --> 00:40:12,886 A:middle
And this-- if this
method's implementation is

836
00:40:12,886 --> 00:40:16,136 A:middle
in the same source file or
one of the included headers,

837
00:40:16,566 --> 00:40:18,906 A:middle
then we can bring the
method implementation

838
00:40:19,156 --> 00:40:21,696 A:middle
and use it while we
simulate this method call.

839
00:40:22,386 --> 00:40:23,546 A:middle
So here what will happen,

840
00:40:23,546 --> 00:40:27,226 A:middle
the analyzer will simulate a
method call, add localized name

841
00:40:27,226 --> 00:40:30,546 A:middle
to the properties
map, add regular name

842
00:40:30,546 --> 00:40:32,116 A:middle
through the properties
map and return.

843
00:40:32,846 --> 00:40:34,076 A:middle
Now, let's see what happens on--

844
00:40:34,076 --> 00:40:36,276 A:middle
along the path on
which L is nil.

845
00:40:37,006 --> 00:40:38,876 A:middle
Again, we simulate a method call

846
00:40:38,876 --> 00:40:42,026 A:middle
and next we add nil
to the dictionary.

847
00:40:42,856 --> 00:40:45,996 A:middle
And here the analyzer notice
that this is a problem,

848
00:40:45,996 --> 00:40:48,346 A:middle
adding a nil to
NSMutableDictionary is

849
00:40:48,346 --> 00:40:50,906 A:middle
against the rules so
it's going to warn you.

850
00:40:51,936 --> 00:40:55,736 A:middle
So if you were going to run this
code through Xcode right now,

851
00:40:55,736 --> 00:40:59,236 A:middle
this is what you would see, you
would see a path through both--

852
00:40:59,476 --> 00:41:03,866 A:middle
both of the methods that shows
you how the problem could

853
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

854
00:41:03,916 --> 00:41:04,496 A:middle
have occurred.

855
00:41:05,096 --> 00:41:08,056 A:middle
As I mentioned previously,

856
00:41:08,056 --> 00:41:11,146 A:middle
we've also extended this
cross method reasoning to C++

857
00:41:11,526 --> 00:41:13,906 A:middle
so here's another
example, C++ example.

858
00:41:14,516 --> 00:41:18,186 A:middle
Here, we allocate a buffer and
we use autopointer to yield

859
00:41:18,336 --> 00:41:20,456 A:middle
with memory management for us.

860
00:41:21,316 --> 00:41:24,456 A:middle
So if you were to run this
code through the analyzer,

861
00:41:24,456 --> 00:41:27,116 A:middle
the analyzer is actually
going to report a bug.

862
00:41:28,576 --> 00:41:32,096 A:middle
It's going to tell us that
here the memory is allocated

863
00:41:32,096 --> 00:41:34,836 A:middle
with operator array new
or news square bracket

864
00:41:35,206 --> 00:41:38,596 A:middle
and it should be deallocator
as operator array delete,

865
00:41:38,916 --> 00:41:39,856 A:middle
however it tells us

866
00:41:39,856 --> 00:41:42,156 A:middle
that deallocators
was operator delete.

867
00:41:43,576 --> 00:41:45,316 A:middle
Notice here that
we don't see the--

868
00:41:45,316 --> 00:41:49,876 A:middle
the allocation side so what
happens actually if we click

869
00:41:49,876 --> 00:41:52,216 A:middle
on this warning to extend it,

870
00:41:52,216 --> 00:41:57,106 A:middle
we'll see that the analyzer sees
the distractor of autopointer

871
00:41:57,386 --> 00:42:00,326 A:middle
and it sees which the
allocation method it uses there

872
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

873
00:42:00,746 --> 00:42:03,586 A:middle
and this is what's required
to report this problem.

874
00:42:04,116 --> 00:42:08,706 A:middle
So this just highlights how
important the cross method

875
00:42:08,706 --> 00:42:12,876 A:middle
reasoning is for C++ since so
much implementation detail is

876
00:42:12,876 --> 00:42:17,556 A:middle
hidden in the headers.

877
00:42:17,706 --> 00:42:20,996 A:middle
OK, so to summarize,
what made this possible?

878
00:42:21,216 --> 00:42:23,976 A:middle
If you do path specific
tracking of object types,

879
00:42:24,686 --> 00:42:28,416 A:middle
we reason about constructors
and destructors in C++.

880
00:42:29,176 --> 00:42:32,076 A:middle
Also, if your method
implementation is either

881
00:42:32,076 --> 00:42:35,526 A:middle
in the given source file or in
one of the included headers,

882
00:42:35,836 --> 00:42:37,316 A:middle
the analyzer will be able

883
00:42:37,316 --> 00:42:40,496 A:middle
to use it while it's
simulating a method call.

884
00:42:40,496 --> 00:42:43,766 A:middle
However, like the compiler,
the analyzer only reasons

885
00:42:43,766 --> 00:42:45,576 A:middle
about one source file at a time.

886
00:42:45,576 --> 00:42:48,816 A:middle
So if your method implementation
is in another source file,

887
00:42:48,816 --> 00:42:52,026 A:middle
it will not be able to see the
[inaudible] during the analysis.

888
00:42:54,586 --> 00:42:59,616 A:middle
So now, I'm sure you're all
excited about going to have

889
00:42:59,616 --> 00:43:01,566 A:middle
and running the analyzer
on your code

890
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

891
00:43:01,566 --> 00:43:04,516 A:middle
and the only question you
have is how do I do that?

892
00:43:04,516 --> 00:43:06,806 A:middle
How do I trigger
analysis of my project?

893
00:43:07,946 --> 00:43:09,376 A:middle
Well, there are several
ways of doing that.

894
00:43:09,786 --> 00:43:13,736 A:middle
So first, we can go to Xcode
and choose product analyze

895
00:43:13,736 --> 00:43:17,016 A:middle
and that is going to trigger
analysis of your whole project

896
00:43:17,386 --> 00:43:20,336 A:middle
that minute or that
second from within Xcode.

897
00:43:21,386 --> 00:43:23,336 A:middle
However, often what
you've done--

898
00:43:23,336 --> 00:43:25,416 A:middle
do is you've analyzed
the project before

899
00:43:25,716 --> 00:43:28,596 A:middle
and you've changed one or
two files and you just want

900
00:43:28,596 --> 00:43:30,006 A:middle
to reanalyze those files.

901
00:43:30,836 --> 00:43:33,336 A:middle
So we've added a new
feature in Xcode 5,

902
00:43:33,416 --> 00:43:36,156 A:middle
you can go to product
perform action and choose

903
00:43:36,156 --> 00:43:40,786 A:middle
to analyze a single
file, that's much faster.

904
00:43:40,866 --> 00:43:44,116 A:middle
Well, some of you might want
to have continuous feedback

905
00:43:44,116 --> 00:43:46,676 A:middle
from the analyzer as part
of your active development.

906
00:43:47,416 --> 00:43:51,706 A:middle
You can go to build settings
for Xcode and you can choose

907
00:43:52,066 --> 00:43:53,546 A:middle
to analyze during build.

908
00:43:53,996 --> 00:43:57,966 A:middle
What that will do is it will
trigger analysis every time you

909
00:43:57,966 --> 00:43:59,036 A:middle
build your project.

910
00:43:59,626 --> 00:44:02,366 A:middle
If you have a project that
analyzer warning is free,

911
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

912
00:44:02,456 --> 00:44:05,826 A:middle
then we highly recommend that
you use aesthetic analysis

913
00:44:05,826 --> 00:44:08,176 A:middle
as part of your continuous
integration.

914
00:44:08,776 --> 00:44:11,736 A:middle
You can do that by just
adding Xcode build analyze

915
00:44:12,116 --> 00:44:15,656 A:middle
to your integration-- continuous
integration script of choice

916
00:44:16,386 --> 00:44:19,506 A:middle
or you can set up a bot
through Xcode by going

917
00:44:19,506 --> 00:44:20,766 A:middle
to product create bot.

918
00:44:21,486 --> 00:44:23,706 A:middle
And for more information
about creating a bot

919
00:44:24,276 --> 00:44:28,046 A:middle
that rruns the aesthetic
analyzer and other stuff,

920
00:44:28,566 --> 00:44:31,276 A:middle
please attend the session
that will happen right

921
00:44:31,276 --> 00:44:32,666 A:middle
after this session in Presidio,

922
00:44:32,666 --> 00:44:34,596 A:middle
"Continuous Integration
with Xcode 5."

923
00:44:34,686 --> 00:44:39,616 A:middle
Now, I've told you how to choose
which code to analyze and when

924
00:44:39,616 --> 00:44:40,696 A:middle
to trigger the analysis.

925
00:44:40,776 --> 00:44:44,706 A:middle
However, what you also can
control is the analysis power.

926
00:44:45,586 --> 00:44:48,216 A:middle
There are two analysis
mode, there is Shallow,

927
00:44:48,856 --> 00:44:52,116 A:middle
shallow for quick
analysis, and there is Deep

928
00:44:52,326 --> 00:44:55,326 A:middle
for more thorough analysis
that might find more issues

929
00:44:55,696 --> 00:44:57,706 A:middle
but might take significantly
longer.

930
00:44:58,756 --> 00:45:01,146 A:middle
And here are the defaults
that you can change by going

931
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

932
00:45:01,146 --> 00:45:02,686 A:middle
to the Xcode build settings.

933
00:45:03,506 --> 00:45:06,306 A:middle
So the default for--
mode for analysis with--

934
00:45:06,306 --> 00:45:08,306 A:middle
during analyze action is deep

935
00:45:08,646 --> 00:45:11,166 A:middle
and the analyze action is
what's gets used when you go

936
00:45:11,166 --> 00:45:15,536 A:middle
to product-- product menu
choose analyze or what gets used

937
00:45:15,536 --> 00:45:18,406 A:middle
when you use analyzer as part
of your continuous integration.

938
00:45:19,136 --> 00:45:22,986 A:middle
The default mode of analysis
during build is shallow

939
00:45:23,686 --> 00:45:26,736 A:middle
because this is when you
want a very fast turnaround.

940
00:45:26,736 --> 00:45:30,676 A:middle
Now, if there is one
thing to remember,

941
00:45:30,866 --> 00:45:35,496 A:middle
that is we suggest you
always analyze your project

942
00:45:35,496 --> 00:45:37,866 A:middle
in deep mode as part
of your qualifications.

943
00:45:38,186 --> 00:45:43,946 A:middle
Now, last but not least, let's
talk about your comments.

944
00:45:45,376 --> 00:45:48,176 A:middle
So most of you had heard
this question before,

945
00:45:48,706 --> 00:45:52,166 A:middle
where is the documentation,
or maybe some

946
00:45:52,166 --> 00:45:54,216 A:middle
of you always write the
documentation then you've

947
00:45:54,346 --> 00:45:56,486 A:middle
probably asked this
question before.

948
00:45:57,596 --> 00:46:00,336 A:middle
And a very handy way of
writing the documentation is

949
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

950
00:46:00,336 --> 00:46:02,986 A:middle
to use structured
comments such as Doxygen.

951
00:46:03,526 --> 00:46:06,176 A:middle
This is very useful because
the documentation stays--

952
00:46:06,176 --> 00:46:08,316 A:middle
has more chance of
staying up-to-date,

953
00:46:08,726 --> 00:46:12,096 A:middle
it's easier to write, it
stays with your code, however,

954
00:46:12,096 --> 00:46:13,416 A:middle
up to now, the compiler

955
00:46:13,416 --> 00:46:16,686 A:middle
and Xcode only pays special
attention to your code

956
00:46:17,146 --> 00:46:18,546 A:middle
but skips your comments.

957
00:46:19,816 --> 00:46:23,936 A:middle
Well, in Xcode 5, the
Xcode 5 pays attention

958
00:46:23,936 --> 00:46:26,776 A:middle
to everything you wrote
including your comments

959
00:46:27,486 --> 00:46:31,056 A:middle
and this allows us to provide
a great user experience

960
00:46:31,056 --> 00:46:32,336 A:middle
and developer experience.

961
00:46:32,626 --> 00:46:33,956 A:middle
Let's see what that means.

962
00:46:34,766 --> 00:46:38,656 A:middle
So previously, if you went
to Xcode and option clicked

963
00:46:38,656 --> 00:46:42,166 A:middle
on a method to see what it does,
if the method was not declared

964
00:46:42,166 --> 00:46:44,726 A:middle
in the system header,
this is all you would see,

965
00:46:45,216 --> 00:46:47,126 A:middle
it will just tell
you, the header--

966
00:46:47,126 --> 00:46:49,546 A:middle
which just tell you the header
where this method was declared

967
00:46:49,976 --> 00:46:51,936 A:middle
which is useful but
not so useful.

968
00:46:52,676 --> 00:46:56,936 A:middle
Well, now, what will happen is
we will generate and display

969
00:46:56,936 --> 00:47:01,776 A:middle
to you the documentation that
is based on your comment.

970
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

971
00:47:02,086 --> 00:47:04,776 A:middle
Another way of viewing
quick help is

972
00:47:04,856 --> 00:47:06,636 A:middle
through quick help inspector.

973
00:47:06,936 --> 00:47:08,996 A:middle
You can configure
Xcode to display it

974
00:47:08,996 --> 00:47:11,416 A:middle
on the right-hand side
of the Xcode window.

975
00:47:12,016 --> 00:47:14,406 A:middle
And then whenever you
hover your cursor over--

976
00:47:15,126 --> 00:47:16,506 A:middle
over a given method name,

977
00:47:16,556 --> 00:47:18,556 A:middle
that documentation will
be displayed there.

978
00:47:19,086 --> 00:47:21,906 A:middle
No-- no need to option click.

979
00:47:22,596 --> 00:47:27,806 A:middle
Now, another way of using your
comments is code completion

980
00:47:27,856 --> 00:47:32,016 A:middle
so whenever a user-- someone
who's using your API types the

981
00:47:32,016 --> 00:47:33,996 A:middle
name of the method,
not only will--

982
00:47:33,996 --> 00:47:36,856 A:middle
will it display its
full signature

983
00:47:36,856 --> 00:47:40,726 A:middle
but will also display the
comment that is based on your--

984
00:47:40,726 --> 00:47:43,706 A:middle
the connotation that's
based on your comment

985
00:47:43,856 --> 00:47:45,316 A:middle
or the brief section
of your comment.

986
00:47:45,986 --> 00:47:48,976 A:middle
Now, let's talk about
how this feature works.

987
00:47:49,336 --> 00:47:51,406 A:middle
This feature is powered
by the compiler.

988
00:47:51,926 --> 00:47:55,606 A:middle
The compiler parses your
comments along with your code

989
00:47:55,946 --> 00:48:00,886 A:middle
and attaches comments to the
declarations and this allows us

990
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

991
00:48:00,886 --> 00:48:03,426 A:middle
to create a very
precise representation

992
00:48:03,696 --> 00:48:07,206 A:middle
of your whole program that
includes your comments

993
00:48:07,616 --> 00:48:10,846 A:middle
and this precise representation,
not only allows us

994
00:48:10,846 --> 00:48:12,316 A:middle
to show you your comments back

995
00:48:12,736 --> 00:48:17,056 A:middle
but also give you active
feedback about them.

996
00:48:17,256 --> 00:48:20,706 A:middle
So we've also added a
new warning that's called

997
00:48:20,706 --> 00:48:24,716 A:middle
Wdocumentation and you can turn
it on by going to build settings

998
00:48:24,716 --> 00:48:29,446 A:middle
and choosing-- turning
documentation comments to--

999
00:48:29,446 --> 00:48:30,446 A:middle
from no to yes.

1000
00:48:31,406 --> 00:48:33,776 A:middle
What this warning does
is it tries to make sure

1001
00:48:34,036 --> 00:48:35,706 A:middle
that your comments
stay up-to-date

1002
00:48:35,706 --> 00:48:38,306 A:middle
and don't have some
simple errors

1003
00:48:38,306 --> 00:48:41,866 A:middle
that the analyzer can find--
that the compiler can find.

1004
00:48:42,106 --> 00:48:43,626 A:middle
I'll give you some examples.

1005
00:48:43,716 --> 00:48:45,926 A:middle
So here is the first example,

1006
00:48:45,926 --> 00:48:49,356 A:middle
here we have a method
whose signature changed.

1007
00:48:49,416 --> 00:48:52,826 A:middle
This method used to return
an error code, however,

1008
00:48:52,826 --> 00:48:54,146 A:middle
now it returns a void.

1009
00:48:55,146 --> 00:48:57,526 A:middle
Notice here that
the comment is stale

1010
00:48:58,096 --> 00:49:01,586 A:middle
and the compiler notices
this and it tells you

1011
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1012
00:49:01,586 --> 00:49:03,926 A:middle
that you should probably
change the stale comment,

1013
00:49:03,926 --> 00:49:06,156 A:middle
this method does not
return anything anymore.

1014
00:49:06,696 --> 00:49:09,166 A:middle
Here is yet another example.

1015
00:49:09,166 --> 00:49:12,136 A:middle
Here we have-- started
writing this documentation

1016
00:49:12,136 --> 00:49:14,386 A:middle
and probably we got
distracted because we forgot

1017
00:49:14,386 --> 00:49:15,766 A:middle
to fill in the brief section.

1018
00:49:16,576 --> 00:49:19,946 A:middle
Again the compiler is going
to warn us-- warn and tell us,

1019
00:49:20,216 --> 00:49:22,936 A:middle
"Hey, you definitely
meant to fill this

1020
00:49:22,936 --> 00:49:24,086 A:middle
in but you just forgot."

1021
00:49:24,956 --> 00:49:26,356 A:middle
Here is yet another example.

1022
00:49:26,996 --> 00:49:27,946 A:middle
Here, we have a method

1023
00:49:27,946 --> 00:49:30,806 A:middle
that takes two arguments:
name and bundle.

1024
00:49:31,626 --> 00:49:34,266 A:middle
However, we've mistyped
bundle and instead

1025
00:49:34,266 --> 00:49:35,946 A:middle
of writing bundle,
we wrote bungle.

1026
00:49:36,836 --> 00:49:40,036 A:middle
Not-- not only the
compiler notices this

1027
00:49:40,866 --> 00:49:43,356 A:middle
but it's also a little
bit psychic.

1028
00:49:44,426 --> 00:49:46,886 A:middle
It's going to issue a
Fix-it and it will tell you,

1029
00:49:46,886 --> 00:49:49,626 A:middle
"didn't you mean
bungle-- bundle?"

1030
00:49:50,676 --> 00:49:54,036 A:middle
And the only action necessary
for you to fix this problem is

1031
00:49:54,036 --> 00:49:58,746 A:middle
to just click enter and your
code will be-- all header.

1032
00:49:59,516 --> 00:50:04,736 A:middle
[ Applause ]

1033
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1034
00:50:05,236 --> 00:50:08,246 A:middle
So we've added support
to structured comments

1035
00:50:08,246 --> 00:50:10,016 A:middle
such as Doxygen and HeaderDoc

1036
00:50:10,376 --> 00:50:14,056 A:middle
and HeaderDoc is
Apple-structured comment format.

1037
00:50:14,096 --> 00:50:15,976 A:middle
For more information
about this structured--

1038
00:50:15,976 --> 00:50:19,416 A:middle
comment format, please visit
the website that I've listed

1039
00:50:19,416 --> 00:50:20,526 A:middle
at the bottom of the slide.

1040
00:50:21,496 --> 00:50:24,226 A:middle
We highly encourage you to
write your documentation

1041
00:50:24,496 --> 00:50:28,926 A:middle
and using structured comments
and instantly see them appear

1042
00:50:28,926 --> 00:50:31,146 A:middle
in quick help and
code completion.

1043
00:50:31,886 --> 00:50:34,596 A:middle
If you'd like to hear
feedback about your comments

1044
00:50:34,596 --> 00:50:36,796 A:middle
from the compiler,
don't forget to turn

1045
00:50:36,796 --> 00:50:40,436 A:middle
on the connotation comments
warning, it's all wired up,

1046
00:50:40,586 --> 00:50:41,976 A:middle
ready for your comments.

1047
00:50:42,396 --> 00:50:46,996 A:middle
So to summarize, we've
covered a lot of topics today.

1048
00:50:46,996 --> 00:50:50,126 A:middle
Now, the LLVM compiler
is stronger than ever.

1049
00:50:50,726 --> 00:50:53,516 A:middle
It produces faster apps
by providing support

1050
00:50:53,516 --> 00:50:55,966 A:middle
for latest hardware and having--

1051
00:50:56,346 --> 00:51:00,046 A:middle
enabling new, aggressive
optimizations, it also--

1052
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1053
00:51:00,126 --> 00:51:02,226 A:middle
we also want to make
sure that you can focus

1054
00:51:02,226 --> 00:51:03,516 A:middle
on writing your features

1055
00:51:03,876 --> 00:51:06,246 A:middle
so we streamlined the
development process

1056
00:51:06,596 --> 00:51:08,836 A:middle
by making the tools
installation easier,

1057
00:51:09,086 --> 00:51:11,896 A:middle
providing almost
complete C++11 support,

1058
00:51:12,436 --> 00:51:15,136 A:middle
providing stricter
warnings, deeper analyzing--

1059
00:51:15,406 --> 00:51:19,016 A:middle
analysis and taking full use
of your comments in the ID

1060
00:51:19,016 --> 00:51:21,986 A:middle
to make it easier for
you to concentrate

1061
00:51:21,986 --> 00:51:24,406 A:middle
and focus on the code.

1062
00:51:24,576 --> 00:51:25,496 A:middle
For more information,

1063
00:51:25,496 --> 00:51:28,056 A:middle
please contact our
Developers Tools Evangelist

1064
00:51:28,056 --> 00:51:29,716 A:middle
and visit these websites.

1065
00:51:30,106 --> 00:51:34,576 A:middle
If you want to learn more
about the new optimizations

1066
00:51:34,576 --> 00:51:35,796 A:middle
that Evan talked about,

1067
00:51:36,016 --> 00:51:40,176 A:middle
please visit Optimize Your Code
Using LLVM Session tomorrow.

1068
00:51:40,706 --> 00:51:43,186 A:middle
There will be also two
related sessions today:

1069
00:51:43,556 --> 00:51:48,296 A:middle
Advances in Objective-C at
4:30 and Continuous Integration

1070
00:51:48,296 --> 00:51:52,156 A:middle
with Xcode 5 right after this
session at 3:15 in Presidio.

1071
00:51:53,326 --> 00:51:55,976 A:middle
Thank you all for coming and
enjoy the rest of your day.

1072
00:51:56,516 --> 00:51:59,516 A:middle
[ Applause ]

1073
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1074
00:52:00,016 --> 00:52:09,886 A:middle
[ Silence ]

1075
