X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:09,986 --> 00:00:11,466 A:middle
>> Thank you, thank you.

2
00:00:11,576 --> 00:00:14,026 A:middle
Welcome to this morning's
session

3
00:00:14,026 --> 00:00:15,366 A:middle
for what's new in Cocoa Touch.

4
00:00:15,366 --> 00:00:18,286 A:middle
If you were here for the
Building User Interfaces

5
00:00:18,286 --> 00:00:21,376 A:middle
for iOS 7 talk with Jason
Beaver and Andy Matuschak,

6
00:00:21,706 --> 00:00:23,326 A:middle
they had a lot of
really pretty pictures.

7
00:00:23,656 --> 00:00:25,546 A:middle
They went into some
fantastic detail

8
00:00:25,546 --> 00:00:29,126 A:middle
about the design
aspects of iOS 7.

9
00:00:29,716 --> 00:00:32,726 A:middle
And I'm going to spend a lot
of time on the actual API

10
00:00:32,726 --> 00:00:34,966 A:middle
that you're going to be using
in order to implement a lot

11
00:00:34,966 --> 00:00:36,076 A:middle
of the stuff that
they talked about.

12
00:00:36,116 --> 00:00:37,936 A:middle
So if you weren't able
to get into the room,

13
00:00:38,556 --> 00:00:41,786 A:middle
if you're listening to this
on the tape, you probably want

14
00:00:41,786 --> 00:00:43,786 A:middle
to go back and watch
that talk on video first

15
00:00:43,886 --> 00:00:45,046 A:middle
and then start in here.

16
00:00:45,446 --> 00:00:48,096 A:middle
So, let's get started.

17
00:00:48,206 --> 00:00:51,416 A:middle
One of the things that
you'll notice, of course,

18
00:00:51,416 --> 00:00:53,786 A:middle
is that stuff used
to look like this.

19
00:00:55,136 --> 00:00:56,436 A:middle
This wouldn't be a
presentation of mine

20
00:00:56,436 --> 00:00:57,546 A:middle
without a picture of my dog.

21
00:00:58,566 --> 00:01:02,846 A:middle
But now, it has a little
bit different look.

22
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

23
00:01:02,846 --> 00:01:05,476 A:middle
And again, they spent a lot of
time talking about how this--

24
00:01:05,666 --> 00:01:07,826 A:middle
you know, the reasons behind
this and how this works

25
00:01:08,486 --> 00:01:10,906 A:middle
in the previous talk, so please
make sure you go see that.

26
00:01:11,046 --> 00:01:12,846 A:middle
I'm going to spend,
again, a lot more time

27
00:01:12,846 --> 00:01:15,516 A:middle
on the really low
level details here.

28
00:01:15,516 --> 00:01:18,096 A:middle
So first, we'd like to talk
about adaptive multitasking.

29
00:01:18,886 --> 00:01:21,586 A:middle
So in iOS 6, if you
were a multitasking app,

30
00:01:21,986 --> 00:01:24,246 A:middle
you fell into one of
the void categories

31
00:01:24,246 --> 00:01:26,276 A:middle
or the audio categories
and things like that.

32
00:01:26,666 --> 00:01:29,026 A:middle
So we're adding new
mechanisms for you to be able

33
00:01:29,026 --> 00:01:32,346 A:middle
to keep your content fresh and
to be able to keep the illusion

34
00:01:32,346 --> 00:01:35,806 A:middle
as if your application is
running all the time in iOS 7.

35
00:01:35,806 --> 00:01:38,506 A:middle
And that involves three new
things, background fetching,

36
00:01:38,936 --> 00:01:41,806 A:middle
remote notifications,
and background transfers.

37
00:01:42,476 --> 00:01:43,806 A:middle
So for background fetching,

38
00:01:44,566 --> 00:01:47,566 A:middle
what you'll do is you'll
add this new fetch category

39
00:01:47,566 --> 00:01:51,846 A:middle
to your background mode in
your application's Info.plist.

40
00:01:52,506 --> 00:01:53,996 A:middle
At that point, your
application will be

41
00:01:53,996 --> 00:01:55,246 A:middle
launched opportunistically.

42
00:01:55,246 --> 00:01:58,076 A:middle
So what we're doing here is
watching the user's patterns

43
00:01:58,076 --> 00:02:00,196 A:middle
for how they use
your application.

44
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

45
00:02:00,966 --> 00:02:02,746 A:middle
And if we notice that, for
instance, they're firing

46
00:02:02,746 --> 00:02:07,966 A:middle
that application up every day
at 7:55, we might fire you up at

47
00:02:07,966 --> 00:02:12,936 A:middle
about 7:50 and say, "OK, go
ahead and do this fetch,"

48
00:02:13,696 --> 00:02:16,076 A:middle
you'll get a new delegate
method on UIApplication,

49
00:02:16,076 --> 00:02:18,566 A:middle
application performFetchWith
CompletionHandler.

50
00:02:19,716 --> 00:02:24,076 A:middle
And the idea here is you'll get
called back at this point, say,

51
00:02:24,076 --> 00:02:26,766 A:middle
we fired you up, you go off
and do your network traffic.

52
00:02:27,506 --> 00:02:29,246 A:middle
And then at the end of that,

53
00:02:29,246 --> 00:02:32,306 A:middle
you're handed a completion
handler that you have to call.

54
00:02:32,756 --> 00:02:35,506 A:middle
That's how you tell us when
you're done with your transfer.

55
00:02:36,056 --> 00:02:40,226 A:middle
The background fetching
interval is controlled

56
00:02:40,226 --> 00:02:42,406 A:middle
by this method on UIApplication.

57
00:02:42,476 --> 00:02:45,156 A:middle
It's setMinimumBackground
FetchInterval.

58
00:02:45,596 --> 00:02:48,876 A:middle
You can use one of these two
constants, UIBackground--

59
00:02:48,876 --> 00:02:50,856 A:middle
UIApplicationBackground
FetchIntervalMinimum

60
00:02:51,406 --> 00:02:56,066 A:middle
which is the slowest callback
interval that you can give us.

61
00:02:56,206 --> 00:02:59,476 A:middle
ApplicationBackground
FetchIntervalNever is please

62
00:02:59,476 --> 00:03:00,256 A:middle
don't call me at all.

63
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

64
00:03:00,606 --> 00:03:03,346 A:middle
You'll have to call
this method at launch.

65
00:03:03,816 --> 00:03:05,036 A:middle
Make sure that you get set

66
00:03:05,036 --> 00:03:06,896 A:middle
or you can turn yourself
off during your run.

67
00:03:07,496 --> 00:03:10,826 A:middle
And your own values above
minimum will work as well.

68
00:03:11,856 --> 00:03:15,856 A:middle
So, for the remote notifications
mechanism, if you're using--

69
00:03:15,856 --> 00:03:18,286 A:middle
if your app uses a server
and the server knows

70
00:03:18,286 --> 00:03:21,106 A:middle
that it has new information
for one of your applications,

71
00:03:21,956 --> 00:03:24,386 A:middle
you'll be able to get a push
notification from the server

72
00:03:24,616 --> 00:03:25,616 A:middle
and you'll get called back

73
00:03:26,046 --> 00:03:28,206 A:middle
on this delegate
method application

74
00:03:28,206 --> 00:03:30,976 A:middle
didReceiveRemoteNotification
FetchCompletionHandler.

75
00:03:31,226 --> 00:03:34,086 A:middle
And you'll also add that remote
notification background mode

76
00:03:34,086 --> 00:03:35,526 A:middle
to your Info.plist.

77
00:03:36,196 --> 00:03:39,836 A:middle
The handler here is, again,
your opportunity to go out

78
00:03:39,836 --> 00:03:42,946 A:middle
and do a bunch of work 'cause
the userInfo dictionary is the

79
00:03:42,946 --> 00:03:44,806 A:middle
push notification userInfo
dictionary you've been

80
00:03:44,806 --> 00:03:45,626 A:middle
getting before.

81
00:03:45,966 --> 00:03:47,866 A:middle
And again, when you go
out and complete that,

82
00:03:48,226 --> 00:03:50,106 A:middle
you'll call the completion
handler

83
00:03:50,106 --> 00:03:51,786 A:middle
with a UIBackgroundFetchResult.

84
00:03:52,686 --> 00:03:55,066 A:middle
And you don't have a lot of time
to be able to do these things.

85
00:03:55,066 --> 00:03:56,526 A:middle
You've got a certain
fixed amount of time.

86
00:03:56,976 --> 00:03:59,806 A:middle
If you don't call that
completion handler in time,

87
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

88
00:04:00,356 --> 00:04:03,196 A:middle
we may not actually fire
you up the next time

89
00:04:03,196 --> 00:04:05,976 A:middle
for either an opportunistic
fetch or for a remote fetch.

90
00:04:05,976 --> 00:04:07,686 A:middle
So you need to make sure that
you're getting your work done

91
00:04:07,926 --> 00:04:09,546 A:middle
in a very short amount of time.

92
00:04:10,636 --> 00:04:11,776 A:middle
The UIBackgroundFetchResult,

93
00:04:11,906 --> 00:04:13,706 A:middle
this is the completion
handler signature.

94
00:04:14,126 --> 00:04:16,136 A:middle
When you call the completion
handler, you're going to pass

95
00:04:16,136 --> 00:04:19,136 A:middle
in one of these three
values, ResultNewData,

96
00:04:19,136 --> 00:04:21,196 A:middle
ResultNoData, or ResultFailed.

97
00:04:21,196 --> 00:04:23,436 A:middle
And this is how you tell
us exactly what happened

98
00:04:23,436 --> 00:04:25,566 A:middle
so that we know "Well,
if the result failed,

99
00:04:25,566 --> 00:04:27,426 A:middle
maybe we'll call you back
again in a few minutes

100
00:04:27,426 --> 00:04:28,586 A:middle
and maybe it will succeed then."

101
00:04:28,586 --> 00:04:32,366 A:middle
Or if you had no data, then we
know that "Well, maybe every day

102
00:04:32,366 --> 00:04:34,266 A:middle
at 7:50, there isn't any data

103
00:04:34,266 --> 00:04:35,796 A:middle
and we don't actually
need to fire you up."

104
00:04:35,796 --> 00:04:38,416 A:middle
All right, so that gives
us some ability to be able

105
00:04:38,416 --> 00:04:42,076 A:middle
to tune the behavior of the
system to your user's behavior

106
00:04:42,076 --> 00:04:43,696 A:middle
and your app's behavior as well.

107
00:04:45,256 --> 00:04:49,746 A:middle
So the new multitasking
also has new Foundation API

108
00:04:49,746 --> 00:04:51,126 A:middle
and NSURLSession.

109
00:04:51,426 --> 00:04:54,476 A:middle
So this is really a replacement
system for NSURLConnection.

110
00:04:54,836 --> 00:04:57,176 A:middle
It handles data, upload
and download tasks.

111
00:04:57,556 --> 00:04:59,886 A:middle
Sessions have identifiers,
so you can actually restore

112
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

113
00:05:00,186 --> 00:05:03,796 A:middle
from an identifier much the
same way you can create things

114
00:05:03,796 --> 00:05:04,726 A:middle
from state restoration.

115
00:05:05,156 --> 00:05:07,346 A:middle
There's a new delegate on
UIApplication that gets called.

116
00:05:07,346 --> 00:05:08,636 A:middle
So if we know that
you've got one

117
00:05:08,636 --> 00:05:10,926 A:middle
of this background transfers
going, you may have to fire

118
00:05:10,926 --> 00:05:11,966 A:middle
up in order to handle things

119
00:05:11,966 --> 00:05:16,356 A:middle
like authentication
or transfer of data.

120
00:05:17,016 --> 00:05:19,876 A:middle
So application handleEventsFor
BackgroundURLSessio:

121
00:05:19,876 --> 00:05:22,016 A:middle
completionHandler gets called.

122
00:05:22,016 --> 00:05:23,276 A:middle
You get the session identifier.

123
00:05:23,276 --> 00:05:25,226 A:middle
We instate the session
identifier--

124
00:05:25,226 --> 00:05:26,936 A:middle
the URLSession from
the identifier

125
00:05:27,346 --> 00:05:28,356 A:middle
and then do your behaviors.

126
00:05:28,356 --> 00:05:29,856 A:middle
So-- and again, here
you're going

127
00:05:29,856 --> 00:05:30,986 A:middle
to call the completion handler

128
00:05:31,336 --> 00:05:33,026 A:middle
when you're done
handling the callbacks.

129
00:05:33,026 --> 00:05:34,156 A:middle
And this completion
handler just is--

130
00:05:34,156 --> 00:05:36,276 A:middle
is a void void, so you can
just call it immediately.

131
00:05:37,306 --> 00:05:39,706 A:middle
There is a talk on What's
New in Foundation Networking

132
00:05:39,706 --> 00:05:41,736 A:middle
in the Mission, Wednesday
at 9:00.

133
00:05:41,736 --> 00:05:44,856 A:middle
If you're doing any this
kind of downloading or work

134
00:05:44,856 --> 00:05:47,856 A:middle
with connections or sessions,
you're definitely going

135
00:05:47,856 --> 00:05:50,756 A:middle
to want to go see that talk.

136
00:05:50,936 --> 00:05:57,436 A:middle
So, you saw in the previous
talk about all the changes

137
00:05:57,436 --> 00:05:59,436 A:middle
that we've made for rendering
and things like that,

138
00:05:59,436 --> 00:06:01,966 A:middle
so let's talk about views
and images a little bit.

139
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

140
00:06:04,676 --> 00:06:09,796 A:middle
We have some new image
rendering modes in UIKit to deal

141
00:06:09,936 --> 00:06:13,626 A:middle
with the way that you might
actually display an image.

142
00:06:13,626 --> 00:06:18,206 A:middle
So, if you are working with
template images before,

143
00:06:18,356 --> 00:06:20,996 A:middle
you are probably going
out to UIImage imageNamed,

144
00:06:21,346 --> 00:06:25,056 A:middle
pulling an image off of disk,
calling rendering context

145
00:06:25,056 --> 00:06:26,646 A:middle
with a bunch of color
and stuff like that

146
00:06:26,646 --> 00:06:28,196 A:middle
and then slamming that color in.

147
00:06:28,196 --> 00:06:29,806 A:middle
So you actually do a
bunch of work to be able

148
00:06:29,806 --> 00:06:31,416 A:middle
to colorize a template of image.

149
00:06:31,886 --> 00:06:33,426 A:middle
This actually takes
care that for you.

150
00:06:33,426 --> 00:06:35,276 A:middle
So once you have an image
in hand, you're going

151
00:06:35,276 --> 00:06:37,516 A:middle
to call UIImage
imageWithRenderingMode.

152
00:06:38,026 --> 00:06:40,346 A:middle
And that rendering
mode has three options.

153
00:06:40,456 --> 00:06:42,826 A:middle
Automatic means that
we will do something

154
00:06:42,826 --> 00:06:44,776 A:middle
with this image in
a given context.

155
00:06:44,986 --> 00:06:46,036 A:middle
I'll talk about that
in a second.

156
00:06:47,126 --> 00:06:51,686 A:middle
ImageRenderingModeAlwaysOriginal
means always use the pixels

157
00:06:51,686 --> 00:06:53,186 A:middle
as they came off of disks.

158
00:06:53,186 --> 00:06:55,976 A:middle
So if you've got a non-template
image and you want to make sure

159
00:06:55,976 --> 00:06:57,976 A:middle
that it doesn't get
changed when it's put

160
00:06:57,976 --> 00:07:00,606 A:middle
into a different context,
you'll be able to use this.

161
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

162
00:07:01,296 --> 00:07:04,476 A:middle
Template means go
ahead and colorize it

163
00:07:04,476 --> 00:07:08,666 A:middle
or apply the template the way
that the context defines it.

164
00:07:08,696 --> 00:07:09,796 A:middle
So what's the context?

165
00:07:09,796 --> 00:07:13,406 A:middle
The context is defined
by a new UIView property

166
00:07:13,456 --> 00:07:14,666 A:middle
called tintColor.

167
00:07:15,916 --> 00:07:17,476 A:middle
So, Andy talked about the fact

168
00:07:17,476 --> 00:07:19,266 A:middle
that we've taken the
tintColor concept

169
00:07:19,266 --> 00:07:22,616 A:middle
and hoisted it all the
way up to UIView, right.

170
00:07:23,106 --> 00:07:25,866 A:middle
So UIView now has this
top level tintColor idea.

171
00:07:26,686 --> 00:07:27,556 A:middle
It's hierarchical.

172
00:07:28,546 --> 00:07:30,036 A:middle
You can set it on your window

173
00:07:30,146 --> 00:07:31,506 A:middle
which will push the
tintColor all the way

174
00:07:31,506 --> 00:07:33,886 A:middle
through your application
and things like controls

175
00:07:33,986 --> 00:07:36,016 A:middle
and images will respond to that.

176
00:07:36,716 --> 00:07:40,536 A:middle
And you can also pull from that.

177
00:07:40,536 --> 00:07:43,016 A:middle
So, if somebody set
it on a higher view

178
00:07:43,016 --> 00:07:45,696 A:middle
in your view hierarchy and then
you go down to a much lower view

179
00:07:45,696 --> 00:07:48,446 A:middle
and call tintColor, you'll
find out what the tintColor is.

180
00:07:48,796 --> 00:07:51,266 A:middle
You can render in context with
that tintColor if you like

181
00:07:51,266 --> 00:07:53,826 A:middle
or just find-- you know, use
it for your own purposes.

182
00:07:54,886 --> 00:07:55,856 A:middle
What does this look like?

183
00:07:55,856 --> 00:07:58,986 A:middle
So, the default tintColor
is this blue that you use.

184
00:07:59,066 --> 00:08:02,826 A:middle
What I've got here is
a top level UIView.

185
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

186
00:08:03,196 --> 00:08:05,796 A:middle
There's a UIImage view there
which has the little chevron

187
00:08:06,116 --> 00:08:08,566 A:middle
and that's a UIButton
that says "Onward."

188
00:08:09,226 --> 00:08:12,776 A:middle
And if you call, for
instance, set tintColor red,

189
00:08:13,536 --> 00:08:15,746 A:middle
the only thing I've done here
is that image has the previous

190
00:08:15,746 --> 00:08:17,676 A:middle
on image rendering
mode set to template.

191
00:08:18,936 --> 00:08:22,016 A:middle
So if I call set tintColor
red, everything that's

192
00:08:22,016 --> 00:08:24,456 A:middle
in that view hierarchy
inherits that tintColor.

193
00:08:25,266 --> 00:08:27,276 A:middle
So you don't have to do any of
the rendering context anymore

194
00:08:27,586 --> 00:08:29,426 A:middle
and all of our controls
will take care of this.

195
00:08:29,426 --> 00:08:31,396 A:middle
This is a really good way
to be able to apply, say,

196
00:08:31,396 --> 00:08:33,836 A:middle
a theme color or a signature
color to your application.

197
00:08:35,535 --> 00:08:37,616 A:middle
We also have this thing
called the TintAdjustmentMode.

198
00:08:38,586 --> 00:08:41,135 A:middle
And when we present
popovers on the pad

199
00:08:41,135 --> 00:08:44,816 A:middle
or when present alert
sheets on the phone,

200
00:08:44,816 --> 00:08:46,336 A:middle
when we cover the content,

201
00:08:46,336 --> 00:08:48,186 A:middle
we're going to put a
dimming view over that.

202
00:08:48,186 --> 00:08:49,456 A:middle
And one of the things
that we'd like to be able

203
00:08:49,456 --> 00:08:51,206 A:middle
to do is indicate that things

204
00:08:51,206 --> 00:08:53,956 A:middle
with a signature tintColor
are no longer inter-actable.

205
00:08:54,906 --> 00:08:57,036 A:middle
And so, the TintAdjustmentMode
allows us to say, "OK,

206
00:08:57,036 --> 00:09:01,336 A:middle
this is a gray automatically
desaturation.

207
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

208
00:09:01,566 --> 00:09:02,996 A:middle
If you don't want that behavior,

209
00:09:02,996 --> 00:09:04,836 A:middle
you can change the
TintAdjustmentMode

210
00:09:05,246 --> 00:09:06,926 A:middle
so that it doesn't
desaturate, OK."

211
00:09:06,926 --> 00:09:09,076 A:middle
So this is what it looks
like with it's desaturated.

212
00:09:09,546 --> 00:09:11,416 A:middle
You can tweak that if you
do actually want that--

213
00:09:11,476 --> 00:09:14,186 A:middle
those elements to
not get changed.

214
00:09:14,666 --> 00:09:17,066 A:middle
When you find out about
changes to the tintColor,

215
00:09:17,816 --> 00:09:18,796 A:middle
frequently this kind

216
00:09:18,796 --> 00:09:21,226 A:middle
of tintColor changes don't
require layout changes.

217
00:09:21,226 --> 00:09:22,466 A:middle
You don't have to
go back through

218
00:09:22,686 --> 00:09:23,776 A:middle
and re-layout all your views.

219
00:09:23,776 --> 00:09:25,696 A:middle
You just need to change
the colors, right.

220
00:09:26,056 --> 00:09:28,706 A:middle
If you implement
tintColorDidChange

221
00:09:28,706 --> 00:09:32,286 A:middle
on your UIView subclass,
you'll get called and told

222
00:09:32,286 --> 00:09:34,736 A:middle
when either somebody changes the
tintColor up at the top level

223
00:09:34,736 --> 00:09:36,416 A:middle
or the view hierarchy
which you inherit,

224
00:09:36,896 --> 00:09:40,136 A:middle
or when somebody calls
set tintColor explicitly,

225
00:09:40,136 --> 00:09:41,806 A:middle
or when any of these
TintAdjustmentMode

226
00:09:41,806 --> 00:09:43,106 A:middle
changes occur.

227
00:09:43,696 --> 00:09:46,896 A:middle
So that's your opportunity to do
things like call the tintColor

228
00:09:46,896 --> 00:09:49,756 A:middle
from high in the hierarchy,
do a rendering context,

229
00:09:50,186 --> 00:09:52,146 A:middle
and get the look with your
tintColor that you want.

230
00:09:52,656 --> 00:09:55,766 A:middle
So View Animations can
be a little tricky.

231
00:09:55,766 --> 00:09:56,936 A:middle
And we've introduced
a new method

232
00:09:57,606 --> 00:09:59,086 A:middle
called performWithoutAnimation.

233
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

234
00:10:00,146 --> 00:10:01,616 A:middle
And by introduce, I
mean, we discovered

235
00:10:01,616 --> 00:10:02,626 A:middle
that we were needing this a lot

236
00:10:02,626 --> 00:10:04,766 A:middle
and we probably figured you
guys needed it a lot too.

237
00:10:05,096 --> 00:10:07,326 A:middle
It's very easy to get
caught up in either some

238
00:10:07,326 --> 00:10:12,656 A:middle
of UIKit's default animation
block or some animation block

239
00:10:12,656 --> 00:10:13,846 A:middle
that you've created elsewhere.

240
00:10:14,086 --> 00:10:16,666 A:middle
And you can even do some layout
changes or some behaviors

241
00:10:16,666 --> 00:10:20,946 A:middle
that really require fixed layout
that goes into a view hierarchy

242
00:10:20,946 --> 00:10:22,606 A:middle
so that it doesn't get
accidentally animated

243
00:10:22,606 --> 00:10:23,376 A:middle
if these things happen.

244
00:10:23,376 --> 00:10:25,996 A:middle
So you can call
UIViewperformWithoutAnimation.

245
00:10:25,996 --> 00:10:26,986 A:middle
This is a class method.

246
00:10:27,846 --> 00:10:30,856 A:middle
And anything you put in that
block will happen instantly

247
00:10:31,016 --> 00:10:33,406 A:middle
so it won't get animated when
it gets into a view hierarchy

248
00:10:33,406 --> 00:10:33,966 A:middle
or anything like that.

249
00:10:33,966 --> 00:10:36,266 A:middle
So this avoids a little effects
where you created something,

250
00:10:36,266 --> 00:10:39,376 A:middle
for instance, with CGRectZero
and then suddenly it expands

251
00:10:39,376 --> 00:10:41,496 A:middle
out during an implicit
animation block.

252
00:10:42,516 --> 00:10:45,886 A:middle
The other thing that we've
done is we've also added new

253
00:10:45,886 --> 00:10:48,766 A:middle
UIViewAnimation level
KeyframeAnimation API.

254
00:10:48,766 --> 00:10:52,186 A:middle
So you don't have to drop down
the CAKEyframeAnimation anymore.

255
00:10:52,826 --> 00:10:55,456 A:middle
You can use
animateKeyframesWithDuration

256
00:10:55,456 --> 00:10:57,666 A:middle
delay options animations
completion.

257
00:10:57,666 --> 00:10:58,946 A:middle
So this looks very similar

258
00:10:58,946 --> 00:11:01,156 A:middle
to the UIViewAnimation
API you already have.

259
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

260
00:11:01,936 --> 00:11:03,926 A:middle
Once you've got that
you can also put

261
00:11:03,926 --> 00:11:06,056 A:middle
in
addKeyframeWithRelativeStartTime

262
00:11:06,056 --> 00:11:07,726 A:middle
relativeDuration animations.

263
00:11:07,966 --> 00:11:08,836 A:middle
And you can compose this

264
00:11:08,836 --> 00:11:10,816 A:middle
with the UIViewAnimation
blocks as well.

265
00:11:10,816 --> 00:11:12,856 A:middle
So what's you're getting here
is the ability to do things

266
00:11:12,856 --> 00:11:15,926 A:middle
like start animations
consistently at relative times,

267
00:11:16,216 --> 00:11:18,936 A:middle
have those animations
run a proportional value

268
00:11:18,936 --> 00:11:20,296 A:middle
of the containing animation.

269
00:11:20,746 --> 00:11:23,006 A:middle
And there are a ton
of options for this.

270
00:11:23,006 --> 00:11:24,026 A:middle
Some of them are familiar

271
00:11:24,026 --> 00:11:27,136 A:middle
if you've been using the UIView
Animation mechanism before.

272
00:11:27,786 --> 00:11:30,956 A:middle
So UIViewKeyframeAnimation
options, layoutSubviews,

273
00:11:31,136 --> 00:11:33,196 A:middle
AllowUserInteraction,
all of those are the same

274
00:11:33,196 --> 00:11:36,166 A:middle
as the UIViewAnimation
API you're already using.

275
00:11:38,836 --> 00:11:39,586 A:middle
There are few, OK.

276
00:11:40,716 --> 00:11:42,946 A:middle
And there are new timing methods

277
00:11:42,946 --> 00:11:47,226 A:middle
for calculating how those
relative values will run

278
00:11:47,226 --> 00:11:48,096 A:middle
through the animation.

279
00:11:48,186 --> 00:11:51,206 A:middle
So this should be a
really easy way to be able

280
00:11:51,206 --> 00:11:54,696 A:middle
to do the really subtle, really
timed animations that you'd had

281
00:11:54,696 --> 00:11:57,296 A:middle
to dropdown to KeyframeAnimation
for.

282
00:11:57,296 --> 00:11:59,676 A:middle
So, you can stay up at
the UIView level here now.

283
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

284
00:12:00,966 --> 00:12:01,776 A:middle
Andy talked a little bit

285
00:12:01,776 --> 00:12:03,896 A:middle
about motion effects
in the previous talk.

286
00:12:03,996 --> 00:12:05,926 A:middle
Motion effects are the
things where when you pick

287
00:12:05,926 --> 00:12:08,736 A:middle
up the device and
you start moving it,

288
00:12:09,466 --> 00:12:12,176 A:middle
that you get those effects
like things are floating above

289
00:12:12,176 --> 00:12:16,306 A:middle
or below various
aspects of the interface.

290
00:12:17,016 --> 00:12:20,186 A:middle
Motion effects apply relative
values to key paths of a view.

291
00:12:20,186 --> 00:12:23,056 A:middle
So what you'll do is specify
which key paths you want,

292
00:12:23,556 --> 00:12:24,946 A:middle
those things will get
applied to the view.

293
00:12:24,946 --> 00:12:28,106 A:middle
And it applies the animatable
properties of the view.

294
00:12:28,106 --> 00:12:30,756 A:middle
So if it's a CA animatable
property, you'll be able

295
00:12:30,756 --> 00:12:32,246 A:middle
to use it with motions effects.

296
00:12:32,626 --> 00:12:33,956 A:middle
And the idea is that
you're going

297
00:12:33,956 --> 00:12:38,836 A:middle
to produce a very subtle effect
that really intrigues your user

298
00:12:38,836 --> 00:12:40,616 A:middle
and really indicates the content

299
00:12:40,726 --> 00:12:43,896 A:middle
or the focus of your
application.

300
00:12:43,896 --> 00:12:44,916 A:middle
So the motion effects--

301
00:12:45,416 --> 00:12:48,056 A:middle
the easiest motion effect to
use is a canned one that we have

302
00:12:48,056 --> 00:12:50,556 A:middle
in UIKit called
UIInterpolatingMotionEffect.

303
00:12:51,756 --> 00:12:54,236 A:middle
There's one initializer
and it was KeyPath type.

304
00:12:54,236 --> 00:12:58,136 A:middle
And the KeyPath is the property
on the view that you want

305
00:12:58,136 --> 00:13:00,826 A:middle
to effect, and the type is
one of these two things.

306
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

307
00:13:00,826 --> 00:13:04,856 A:middle
It's either along the horizontal
axis or along the vertical axis.

308
00:13:05,716 --> 00:13:08,176 A:middle
And so, you'll specify, if you
want to do something in both,

309
00:13:08,176 --> 00:13:10,946 A:middle
you'll have to create two of
these and decide with KeyPath

310
00:13:10,946 --> 00:13:12,496 A:middle
and which type you're
going to be affecting.

311
00:13:12,856 --> 00:13:15,676 A:middle
It interpolates between
the minimumRelativeValue

312
00:13:15,676 --> 00:13:18,226 A:middle
and the maximumRelativeValue,
right.

313
00:13:18,926 --> 00:13:21,086 A:middle
So you'll be able
attach these to a view.

314
00:13:22,126 --> 00:13:23,876 A:middle
And having it attach
to those views

315
00:13:23,876 --> 00:13:27,086 A:middle
as the device moves
will take care

316
00:13:27,086 --> 00:13:30,116 A:middle
of doing all the application
of that effect to the view.

317
00:13:30,116 --> 00:13:32,746 A:middle
So you can do things like change
the center, change the size,

318
00:13:32,746 --> 00:13:33,966 A:middle
change the offset, you know,

319
00:13:33,966 --> 00:13:35,596 A:middle
all of the various
animatable properties,

320
00:13:35,596 --> 00:13:37,626 A:middle
you can change the
frame as well.

321
00:13:38,976 --> 00:13:40,776 A:middle
If you want to write your
own, you can do that.

322
00:13:41,726 --> 00:13:45,656 A:middle
You can use the UIMotionEffect
Abstract superclass.

323
00:13:45,656 --> 00:13:47,226 A:middle
There's one method on it,

324
00:13:47,826 --> 00:13:51,856 A:middle
keyPathsAndRelative
valuesForViewsOffset--

325
00:13:52,466 --> 00:13:54,386 A:middle
ViewerOffset, there we go.

326
00:13:54,386 --> 00:13:57,246 A:middle
The ViewerOffset is expressed--
we don't use UIOffset very much

327
00:13:57,246 --> 00:13:59,336 A:middle
in our API if you've seen
but just as a reminder,

328
00:13:59,336 --> 00:14:01,146 A:middle
that's a horizontal
and vertical offset.

329
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

330
00:14:01,146 --> 00:14:03,726 A:middle
So horizontal is obviously
that the axis that we're using

331
00:14:03,726 --> 00:14:06,266 A:middle
for the interpolating motion
effect as well as the vertical.

332
00:14:06,966 --> 00:14:09,596 A:middle
You'll overwrite this and
provide-- you'll get a--

333
00:14:09,596 --> 00:14:13,126 A:middle
you know, provide a dictionary
of the key paths that you want

334
00:14:13,266 --> 00:14:16,906 A:middle
and what values given the
inputs of that UIOffset.

335
00:14:16,906 --> 00:14:18,086 A:middle
So this is how you can write all

336
00:14:18,086 --> 00:14:22,616 A:middle
of your own more
complicated motion effect.

337
00:14:22,756 --> 00:14:25,576 A:middle
You'll add or move them to the
view with just addMotionEffect

338
00:14:25,576 --> 00:14:26,606 A:middle
and removeMotionEffect.

339
00:14:26,666 --> 00:14:28,896 A:middle
And if you need find out
what affects are on the view,

340
00:14:29,386 --> 00:14:32,826 A:middle
you can go ahead and call
the motion effect's accessor.

341
00:14:35,986 --> 00:14:39,096 A:middle
These are really,
really interesting APIs

342
00:14:39,096 --> 00:14:40,746 A:middle
because there's not
much to the API

343
00:14:40,746 --> 00:14:42,516 A:middle
but it concentrates on behavior.

344
00:14:43,166 --> 00:14:45,776 A:middle
So what you'll be able to do
is add these things gradually

345
00:14:45,776 --> 00:14:47,526 A:middle
to your application and
touches here and there.

346
00:14:48,116 --> 00:14:51,196 A:middle
And it'll really make
your application pop, so.

347
00:14:51,986 --> 00:14:54,806 A:middle
We've made some enhancements
to collection views, all right.

348
00:14:55,206 --> 00:14:56,966 A:middle
Collection view is
really flexible.

349
00:14:57,336 --> 00:15:01,016 A:middle
There are really interesting
ways to be able to combine them.

350
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

351
00:15:01,016 --> 00:15:05,046 A:middle
And you're really able to do a
large scale layouts without lots

352
00:15:05,046 --> 00:15:09,116 A:middle
and lots of individual layouts
subview tweaky little calls.

353
00:15:09,486 --> 00:15:12,146 A:middle
One of the things that we've
added is a convenience API

354
00:15:12,146 --> 00:15:14,806 A:middle
for switching between two
collection view layouts,

355
00:15:14,876 --> 00:15:17,956 A:middle
setCollectionViewLayout animated
completion is a new method

356
00:15:18,356 --> 00:15:19,666 A:middle
which compliments the old one

357
00:15:19,936 --> 00:15:21,326 A:middle
that didn't have the
completion handlers.

358
00:15:21,326 --> 00:15:23,696 A:middle
Now, if you are animating
it, you can find out exactly

359
00:15:23,696 --> 00:15:25,966 A:middle
when that animation completed.

360
00:15:25,966 --> 00:15:29,036 A:middle
So this is just a
little one off method

361
00:15:29,036 --> 00:15:30,056 A:middle
to help you out with that.

362
00:15:30,606 --> 00:15:32,956 A:middle
But one of the things we've
done in terms of switching

363
00:15:32,956 --> 00:15:36,326 A:middle
between two different collection
view layouts is added a really

364
00:15:36,326 --> 00:15:38,876 A:middle
easy way to be able to
interpolate between the two

365
00:15:39,266 --> 00:15:40,886 A:middle
with what's called
UICollectionView

366
00:15:40,886 --> 00:15:41,956 A:middle
TransitionLayout.

367
00:15:42,766 --> 00:15:46,296 A:middle
And a transition layout is a
UICollectionViewLayout object.

368
00:15:46,916 --> 00:15:49,836 A:middle
You hand it two other collection
view layouts, the current lay

369
00:15:49,836 --> 00:15:52,516 A:middle
out and the next layout,
and then we'll take care

370
00:15:52,516 --> 00:15:54,656 A:middle
of interpolating
between those two

371
00:15:54,926 --> 00:15:57,126 A:middle
as you drive the
transition progress.

372
00:15:57,556 --> 00:16:01,856 A:middle
So if you're needing to update
values in there yourself

373
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

374
00:16:01,856 --> 00:16:03,906 A:middle
for a custom subclass,
you'll get called

375
00:16:03,906 --> 00:16:07,246 A:middle
with updateValueForAnimatedKey
or value forAnimatedKey

376
00:16:07,246 --> 00:16:08,526 A:middle
so you find out what's happening

377
00:16:08,526 --> 00:16:09,876 A:middle
as the
CollectionViewTransitionLayout

378
00:16:09,876 --> 00:16:10,416 A:middle
is firing.

379
00:16:10,416 --> 00:16:12,396 A:middle
But for the most part,
you'll just be able

380
00:16:12,666 --> 00:16:15,586 A:middle
to call this transition,
setTransitionProgress property

381
00:16:16,186 --> 00:16:18,676 A:middle
and say, "You know, I'm 10
percent, 20 percent, 30 percent,

382
00:16:18,676 --> 00:16:20,976 A:middle
40 percent of the way through
it," and we'll take care

383
00:16:20,976 --> 00:16:22,986 A:middle
of interpolating between
all of the elements

384
00:16:23,226 --> 00:16:24,456 A:middle
in your collection view layout

385
00:16:24,456 --> 00:16:27,316 A:middle
in the starting collection
layout and the ending one

386
00:16:28,726 --> 00:16:31,396 A:middle
and take care all of the
movement of the views

387
00:16:31,396 --> 00:16:32,686 A:middle
and everything else for you.

388
00:16:32,686 --> 00:16:36,086 A:middle
So, this transition API is
really handy if you combine it

389
00:16:36,086 --> 00:16:40,146 A:middle
with the UIView controller,
API to be able to switch

390
00:16:40,146 --> 00:16:42,596 A:middle
between navigation
controllers and handoff

391
00:16:42,596 --> 00:16:45,186 A:middle
that collection view
itself that we're talking

392
00:16:45,186 --> 00:16:46,806 A:middle
about in the previous talk.

393
00:16:47,836 --> 00:16:52,806 A:middle
So, collection view layout, very
powerful, very easy now be able

394
00:16:52,806 --> 00:16:54,886 A:middle
to ship between two
different layouts.

395
00:16:56,286 --> 00:16:59,216 A:middle
View controllers, of
course, are the unit

396
00:16:59,836 --> 00:17:03,846 A:middle
of composition for UIKit.

397
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

398
00:17:03,846 --> 00:17:06,296 A:middle
We've made a lot of
changes to view controllers

399
00:17:06,296 --> 00:17:09,076 A:middle
to accommodate the new
API-- the new appearance.

400
00:17:09,366 --> 00:17:11,465 A:middle
We've also made a number of
changes, try to make it easier

401
00:17:11,465 --> 00:17:14,566 A:middle
for you to be able participate
in a lot of the things

402
00:17:14,566 --> 00:17:17,175 A:middle
that we do in terms of canned
animations and stuff like that.

403
00:17:17,175 --> 00:17:18,546 A:middle
But of one of the
first things I want

404
00:17:18,546 --> 00:17:21,376 A:middle
to mention is
wantsFullScreenLayout.

405
00:17:22,486 --> 00:17:26,945 A:middle
So, a lot of what you were
doing in iOS 6 in terms

406
00:17:26,945 --> 00:17:29,396 A:middle
of full screen layout was
dealing with things like this.

407
00:17:29,396 --> 00:17:31,016 A:middle
Here's a picture of the dog.

408
00:17:31,016 --> 00:17:33,846 A:middle
He was helping me out with
my presentation last week,

409
00:17:33,976 --> 00:17:37,996 A:middle
cleaning things up or, as
I like to call it, snoring.

410
00:17:38,876 --> 00:17:43,096 A:middle
This is a non-full screen
layout iOS 6 view controller.

411
00:17:43,496 --> 00:17:47,166 A:middle
And if you were going to call
wantsFullScreenLayout yes,

412
00:17:47,166 --> 00:17:50,746 A:middle
and then if you set your
navigation bar appearance

413
00:17:50,746 --> 00:17:52,756 A:middle
to be translucent and
your status bar appearance

414
00:17:52,756 --> 00:17:54,556 A:middle
to be translucent, you
get something like this

415
00:17:54,556 --> 00:17:57,486 A:middle
and this is the classic
barb with full screen layout

416
00:17:57,486 --> 00:17:58,606 A:middle
which is, you know,
you're not really--

417
00:17:58,866 --> 00:18:00,876 A:middle
I'm not stretching out the
content here to make sure

418
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

419
00:18:00,876 --> 00:18:02,356 A:middle
that it fits the
full screen layout.

420
00:18:02,786 --> 00:18:04,166 A:middle
One of the things that
we want to make sure

421
00:18:04,166 --> 00:18:07,466 A:middle
that you guys are doing is
using full screen layout

422
00:18:08,096 --> 00:18:11,616 A:middle
because iOS 7 deprecates
this property entirely.

423
00:18:12,106 --> 00:18:14,456 A:middle
wantsFullScreenLayout
is no longer useful.

424
00:18:14,456 --> 00:18:16,696 A:middle
We will treat as if it
were yes all the time

425
00:18:16,696 --> 00:18:18,286 A:middle
for [inaudible] or after 7.0.

426
00:18:20,036 --> 00:18:23,086 A:middle
So, with Bud resting
here, you can kind

427
00:18:23,086 --> 00:18:24,866 A:middle
of see how the content is slid

428
00:18:24,866 --> 00:18:28,166 A:middle
up under the navigation bar
and-- but the way that--

429
00:18:28,166 --> 00:18:30,786 A:middle
in iOS 7 that we're
going to have you specify

430
00:18:30,786 --> 00:18:34,486 A:middle
which edges get stretched
in a situation like this is

431
00:18:34,486 --> 00:18:35,906 A:middle
with this extended edge API.

432
00:18:37,056 --> 00:18:39,106 A:middle
And some of this is in flux,

433
00:18:39,106 --> 00:18:40,926 A:middle
but this is what in
Seed 1 right now.

434
00:18:41,036 --> 00:18:42,186 A:middle
It may look a little different.

435
00:18:42,186 --> 00:18:43,636 A:middle
We're still tinkering
with some of the names.

436
00:18:43,696 --> 00:18:48,876 A:middle
But the extended edge API here
is specifying that the edges

437
00:18:48,876 --> 00:18:51,036 A:middle
for extended layout for
your view controller,

438
00:18:52,146 --> 00:18:54,076 A:middle
this property is going
to be all by default.

439
00:18:54,536 --> 00:18:56,986 A:middle
We want to be able to take
you views and expand them

440
00:18:56,986 --> 00:18:58,526 A:middle
to their full content size.

441
00:18:58,876 --> 00:19:01,226 A:middle
But if you want to specify
only the left and right edges

442
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

443
00:19:01,226 --> 00:19:02,926 A:middle
and leave the top and
bottom the way they are,

444
00:19:02,926 --> 00:19:05,556 A:middle
you would logically [inaudible]
some of the flags together.

445
00:19:06,316 --> 00:19:07,046 A:middle
You can also check

446
00:19:07,046 --> 00:19:09,166 A:middle
if the extended layout
includes the opaque bars.

447
00:19:09,166 --> 00:19:11,016 A:middle
This is no by default in iOS 7.

448
00:19:11,626 --> 00:19:14,576 A:middle
And automatically
AdjustsScrollViewInsets is how

449
00:19:14,576 --> 00:19:17,206 A:middle
we're going to take a look at
the scroll view that's probably

450
00:19:17,206 --> 00:19:19,856 A:middle
at the top of your view
controller and say, "OK,

451
00:19:20,796 --> 00:19:22,876 A:middle
I can adjust the content
insets to make sure

452
00:19:22,876 --> 00:19:26,766 A:middle
that the content is actually
positioned correctly inside a

453
00:19:26,766 --> 00:19:30,106 A:middle
navigation controller or a Tab
bar controller because now all

454
00:19:30,106 --> 00:19:33,306 A:middle
of those bars, the Nav bar and
the Tab bar and the Tool bar

455
00:19:33,586 --> 00:19:37,196 A:middle
or Tab bar at the bottom have
that blur translucent effect."

456
00:19:38,026 --> 00:19:39,816 A:middle
So we want to make sure that
all of your content is winding

457
00:19:39,816 --> 00:19:40,806 A:middle
up in the right place.

458
00:19:41,086 --> 00:19:43,906 A:middle
These methods are how we're
going to help you adjust

459
00:19:43,906 --> 00:19:44,966 A:middle
that content automatically.

460
00:19:44,966 --> 00:19:47,556 A:middle
So automatically
AdjustsScrollViewInsets will

461
00:19:47,556 --> 00:19:49,236 A:middle
take of a lot of
those numbers of you.

462
00:19:49,446 --> 00:19:52,446 A:middle
And this also takes care things
like when the device rotates,

463
00:19:52,536 --> 00:19:55,066 A:middle
exactly how far you adjust
those insets because, of course,

464
00:19:55,356 --> 00:19:57,106 A:middle
on the phone, when you
rotate to landscape,

465
00:19:57,106 --> 00:20:00,446 A:middle
the Nav bar's a little
shorter, so.

466
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

467
00:20:01,186 --> 00:20:04,096 A:middle
We also we have new
API for content size.

468
00:20:04,096 --> 00:20:08,256 A:middle
So in many cases, we take a
view controller from you guys

469
00:20:08,256 --> 00:20:10,976 A:middle
or from-- you take one
from another component

470
00:20:10,976 --> 00:20:13,836 A:middle
like address book or something
like that, and you're going

471
00:20:13,836 --> 00:20:16,376 A:middle
to make a child view controller
of your view controller,

472
00:20:16,376 --> 00:20:17,516 A:middle
you want to find
out how big it is.

473
00:20:17,966 --> 00:20:20,426 A:middle
So preferredContentSize is
a way for view controller

474
00:20:20,426 --> 00:20:23,216 A:middle
to tell UIKit or tell
parent view controllers,

475
00:20:23,786 --> 00:20:26,576 A:middle
"I'd like to be this
size," right.

476
00:20:26,716 --> 00:20:30,786 A:middle
And this is actually replacement
for the content size review

477
00:20:30,786 --> 00:20:32,206 A:middle
in popover call because
we're going

478
00:20:32,206 --> 00:20:34,796 A:middle
to use this call
everywhere now in iOS 7.

479
00:20:34,796 --> 00:20:36,766 A:middle
So if you want to tell us how
big your view controller ought

480
00:20:36,766 --> 00:20:38,766 A:middle
to be right when
we initialize it,

481
00:20:39,126 --> 00:20:40,386 A:middle
this is your opportunity
to do it.

482
00:20:41,286 --> 00:20:42,706 A:middle
And it's a great way
to be able say, "OK,

483
00:20:42,706 --> 00:20:43,856 A:middle
I'm going to take
this view controller,

484
00:20:43,856 --> 00:20:47,466 A:middle
make it a certain size, how
big do you want it to be?"

485
00:20:47,826 --> 00:20:49,946 A:middle
So, layout is very important.

486
00:20:50,246 --> 00:20:54,256 A:middle
In terms of the status bar
appearance, there's new behavior

487
00:20:54,256 --> 00:20:56,446 A:middle
for the status bar and the
status bar actually has

488
00:20:56,446 --> 00:20:57,116 A:middle
no background.

489
00:20:57,116 --> 00:21:01,126 A:middle
What's you're seeing in iOS 7
is the navigation bar getting

490
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

491
00:21:01,126 --> 00:21:04,076 A:middle
taller and the status bar
being over laid on it.

492
00:21:04,076 --> 00:21:07,696 A:middle
UIStatusBarStyleDefault
is what you see--

493
00:21:07,826 --> 00:21:09,586 A:middle
it's got what we
call "Dark content",

494
00:21:09,586 --> 00:21:13,296 A:middle
meaning the status
bar information is all

495
00:21:13,296 --> 00:21:14,796 A:middle
in black or dark color.

496
00:21:15,596 --> 00:21:16,346 A:middle
Status bar--

497
00:21:16,506 --> 00:21:20,506 A:middle
UIStatusBarStyleLightContent
has white text up there.

498
00:21:21,386 --> 00:21:24,326 A:middle
So if your content
is going to be dark

499
00:21:24,326 --> 00:21:28,296 A:middle
or otherwise not contrast
with the default, you may want

500
00:21:28,296 --> 00:21:30,336 A:middle
to set UIStatusBarLightContent.

501
00:21:30,336 --> 00:21:33,036 A:middle
And this refers to the content
of the status bar itself.

502
00:21:34,036 --> 00:21:37,836 A:middle
These other two properties,
StatusBarStyleBlackTranslucent

503
00:21:37,836 --> 00:21:41,876 A:middle
and StatusBarStyleBlackOpaque,
those refer to the background

504
00:21:42,066 --> 00:21:43,456 A:middle
which really doesn't
make any sense anymore.

505
00:21:43,456 --> 00:21:44,596 A:middle
They don't have a
background now.

506
00:21:45,016 --> 00:21:46,366 A:middle
So, those are deprecated.

507
00:21:46,366 --> 00:21:47,326 A:middle
You can stop using them.

508
00:21:47,716 --> 00:21:52,536 A:middle
So if you recall with-- there
are two major sections of UIKit

509
00:21:52,606 --> 00:21:56,796 A:middle
or behaviors in UIKit where
we do these transitions,

510
00:21:56,796 --> 00:22:00,386 A:middle
where you slide, you do a push
pop in navigation controllers

511
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

512
00:22:00,426 --> 00:22:01,836 A:middle
or for a modal transition,

513
00:22:02,146 --> 00:22:07,386 A:middle
the presentation slides
up from the bottom.

514
00:22:07,546 --> 00:22:08,906 A:middle
Those are all canned
transitions.

515
00:22:08,906 --> 00:22:09,636 A:middle
You haven't been able

516
00:22:09,636 --> 00:22:12,396 A:middle
to participate in
those until iOS 7.

517
00:22:12,396 --> 00:22:16,446 A:middle
So iOS 7 introduces
custom transitions in all

518
00:22:16,446 --> 00:22:18,166 A:middle
of our API that does it.

519
00:22:18,216 --> 00:22:20,286 A:middle
So you're talking about
navigation controller push

520
00:22:20,286 --> 00:22:23,656 A:middle
and pop, we've got
modal transitions.

521
00:22:24,506 --> 00:22:28,666 A:middle
You'll be able to drive
these both off a timer.

522
00:22:29,106 --> 00:22:32,236 A:middle
So if you're just doing a
straight push or a straight pop,

523
00:22:32,946 --> 00:22:35,106 A:middle
you'll be able to participate in
that with your own transition,

524
00:22:35,246 --> 00:22:38,156 A:middle
or you'll be able set up
an interactive transition

525
00:22:38,156 --> 00:22:40,766 A:middle
with the user actually
sliding their thumb across

526
00:22:40,766 --> 00:22:42,856 A:middle
and you'll get all kinds of
events about things like whether

527
00:22:42,856 --> 00:22:44,106 A:middle
or not they made it all
the way across [inaudible],

528
00:22:44,136 --> 00:22:45,616 A:middle
whether they canceled
the transition,

529
00:22:46,456 --> 00:22:48,036 A:middle
or whether they made
it all the way across

530
00:22:48,036 --> 00:22:49,836 A:middle
and actually finished
the transition.

531
00:22:50,246 --> 00:22:51,376 A:middle
There's a new delegate method

532
00:22:51,376 --> 00:22:54,326 A:middle
of UIViewController called
transitioningDelegate.

533
00:22:55,166 --> 00:22:58,116 A:middle
The transitioningDelegate is
going to be the object called

534
00:22:59,156 --> 00:23:00,866 A:middle
to find out how to
do this transition.

535
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

536
00:23:00,866 --> 00:23:02,996 A:middle
So, let's say you've got
an UINavigationController,

537
00:23:02,996 --> 00:23:04,736 A:middle
you're pushing a new
view controller on it.

538
00:23:04,736 --> 00:23:08,176 A:middle
If that view controller has a
transitioningDelegate property

539
00:23:08,336 --> 00:23:11,446 A:middle
set on it, that object's going
to get one of these methods,

540
00:23:11,446 --> 00:23:13,986 A:middle
animationController
ForPresentedController,

541
00:23:14,336 --> 00:23:16,796 A:middle
presentingController,
sourceController.

542
00:23:17,856 --> 00:23:20,236 A:middle
So the sourceController or
the presentingController,

543
00:23:20,236 --> 00:23:22,016 A:middle
you're given all of
the view controllers

544
00:23:22,016 --> 00:23:25,076 A:middle
that are participating
in the transition.

545
00:23:25,876 --> 00:23:28,746 A:middle
And animationController
ForDismissedController,

546
00:23:28,746 --> 00:23:32,086 A:middle
this is basically the equivalent
of a pop or a dismissal

547
00:23:32,086 --> 00:23:33,546 A:middle
of a modal transition.

548
00:23:34,446 --> 00:23:37,176 A:middle
The objects conform
to this protocol,

549
00:23:37,176 --> 00:23:40,216 A:middle
UIViewController
AnimatedTransitioning protocol.

550
00:23:40,216 --> 00:23:43,216 A:middle
The protocol is really
useful here because it means

551
00:23:43,256 --> 00:23:45,076 A:middle
that you can specify any object.

552
00:23:45,076 --> 00:23:46,226 A:middle
It can be another
view controller.

553
00:23:46,226 --> 00:23:47,786 A:middle
It can be an object
of your own type.

554
00:23:48,396 --> 00:23:50,686 A:middle
As long as it conforms to
this protocol, you'll be able

555
00:23:50,686 --> 00:23:52,756 A:middle
to drive these transitions.

556
00:23:53,846 --> 00:23:58,116 A:middle
For interaction, we'll ask
the transitioningDelegate

557
00:23:58,116 --> 00:24:00,256 A:middle
for an interaction
controller for a presentation

558
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

559
00:24:00,856 --> 00:24:02,466 A:middle
or an interaction
controller for dismissal

560
00:24:02,466 --> 00:24:03,316 A:middle
when the thing's going away.

561
00:24:03,316 --> 00:24:05,496 A:middle
So presentation on Nav
contoller is, of course, a pop,

562
00:24:06,076 --> 00:24:08,176 A:middle
the dismissal would
be-- I'm sorry--

563
00:24:08,336 --> 00:24:11,676 A:middle
presentation's a push,
dismissal is a pop.

564
00:24:12,206 --> 00:24:13,526 A:middle
It has its own protocol as well.

565
00:24:13,526 --> 00:24:17,206 A:middle
So you are in a maze of twisty
little protocols all alike.

566
00:24:18,696 --> 00:24:19,886 A:middle
They're actually not all alike.

567
00:24:19,886 --> 00:24:21,736 A:middle
They're very, very powerful.

568
00:24:22,126 --> 00:24:23,746 A:middle
And for instance,

569
00:24:23,746 --> 00:24:26,556 A:middle
the AnimatedTransitioning
protocol, it's pretty simple.

570
00:24:26,556 --> 00:24:28,706 A:middle
The transitionDuration,
animateTransition,

571
00:24:28,706 --> 00:24:30,616 A:middle
and animationEnded,
these are all methods

572
00:24:30,726 --> 00:24:34,866 A:middle
that your transitioning
object will get called on.

573
00:24:35,586 --> 00:24:37,666 A:middle
You can return the
transitionDuration

574
00:24:37,666 --> 00:24:39,436 A:middle
for a given transition context.

575
00:24:39,516 --> 00:24:42,006 A:middle
The animateTransition
for a transition context.

576
00:24:42,006 --> 00:24:43,646 A:middle
This is when you're told, "Go
ahead and do the animation."

577
00:24:44,426 --> 00:24:47,336 A:middle
We're ready to go do your
slide, do your fading,

578
00:24:47,336 --> 00:24:50,776 A:middle
do your twirly transition there.

579
00:24:51,536 --> 00:24:54,466 A:middle
And animationEnded, this
is how you find out when

580
00:24:54,626 --> 00:24:55,956 A:middle
that transition ended.

581
00:24:56,126 --> 00:25:00,716 A:middle
So, the animated bits,
this is for the parts

582
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

583
00:25:00,716 --> 00:25:02,446 A:middle
where things are
happening on a timer,

584
00:25:02,446 --> 00:25:04,186 A:middle
things are happening
on our context.

585
00:25:05,696 --> 00:25:06,616 A:middle
Custom transitions

586
00:25:06,616 --> 00:25:09,256 A:middle
for UIViewController
InteractiveTransitioning,

587
00:25:09,516 --> 00:25:11,846 A:middle
you'll be told when to
start the animation,

588
00:25:12,316 --> 00:25:14,006 A:middle
the interactive transition,
right?

589
00:25:14,006 --> 00:25:16,006 A:middle
So just like the other API,
this is where you're going

590
00:25:16,006 --> 00:25:16,826 A:middle
to start the interaction.

591
00:25:17,186 --> 00:25:19,946 A:middle
And the completionSpeed and the
completionCurve are used to find

592
00:25:19,946 --> 00:25:24,866 A:middle
out when the user got far enough
across, did they finish or not,

593
00:25:25,336 --> 00:25:26,976 A:middle
and if they didn't
or if they did,

594
00:25:27,266 --> 00:25:31,126 A:middle
how fast do you want the rest
of the animation to run, right?

595
00:25:31,126 --> 00:25:33,026 A:middle
So when you're sliding
your thumb across

596
00:25:33,026 --> 00:25:35,676 A:middle
and you're driving one of these
things based on user gestures,

597
00:25:36,186 --> 00:25:37,876 A:middle
if you get all the way across,

598
00:25:37,876 --> 00:25:39,726 A:middle
then it must have
run the completion,

599
00:25:39,726 --> 00:25:41,936 A:middle
I think half way across, a
little bit more than half way.

600
00:25:41,936 --> 00:25:44,176 A:middle
And that means, yes, you
can actually do the rest

601
00:25:44,176 --> 00:25:45,586 A:middle
of the transition as
if they completed.

602
00:25:45,846 --> 00:25:48,786 A:middle
This is how you specify how long
it takes and what the curve is.

603
00:25:49,336 --> 00:25:51,806 A:middle
And the curve is
the UIAnimation bit.

604
00:25:53,086 --> 00:25:53,856 A:middle
Here's the meat of it.

605
00:25:54,696 --> 00:25:57,806 A:middle
The UIViewController
ContextTransitioning, again,

606
00:25:57,806 --> 00:26:00,036 A:middle
this is a protocol that
your objects conform to.

607
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

608
00:26:00,396 --> 00:26:03,706 A:middle
This is where you put all of
the information that you need

609
00:26:03,706 --> 00:26:05,426 A:middle
in order to drive
these animations.

610
00:26:05,856 --> 00:26:07,516 A:middle
You'll need to supply
a container view.

611
00:26:07,516 --> 00:26:10,246 A:middle
Frequently, this is the
parent view controller's view.

612
00:26:10,686 --> 00:26:13,156 A:middle
Whether or not it's
animated, whether or not

613
00:26:13,156 --> 00:26:15,236 A:middle
in it's interactive, whether

614
00:26:15,236 --> 00:26:17,446 A:middle
or not a particular transition
was canceled, you'll be able

615
00:26:17,446 --> 00:26:20,766 A:middle
to do all of that and
find out from this

616
00:26:20,796 --> 00:26:22,646 A:middle
that the transition
was canceled.

617
00:26:23,116 --> 00:26:26,196 A:middle
You'll also specify -- you can
specify presentation styles

618
00:26:26,196 --> 00:26:27,666 A:middle
and all kinds of stuff.

619
00:26:28,426 --> 00:26:31,516 A:middle
This is incredibly powerful.

620
00:26:31,516 --> 00:26:33,636 A:middle
And this is the mechanism that
we're using, for instance,

621
00:26:33,666 --> 00:26:36,366 A:middle
to do the slide transition in
navigation controllers now,

622
00:26:36,716 --> 00:26:39,556 A:middle
so you'll be able to participate
in all of those things yourself.

623
00:26:40,286 --> 00:26:43,056 A:middle
We've got a Custom Transitions
Using View Controllers talk

624
00:26:43,056 --> 00:26:45,276 A:middle
in Pacific Heights
on Thursday at 11:30.

625
00:26:45,276 --> 00:26:48,196 A:middle
If you've ever wanted to be able
to participate in these things,

626
00:26:48,636 --> 00:26:49,986 A:middle
that's the talk to go to.

627
00:26:50,556 --> 00:26:51,836 A:middle
So, let's talk a little bit

628
00:26:51,896 --> 00:26:54,166 A:middle
about some new stuff
in State Restoration.

629
00:26:54,896 --> 00:26:56,816 A:middle
One of the things that
we've noticed in terms

630
00:26:56,816 --> 00:26:59,606 A:middle
of our own usage of state
restoration is there are times

631
00:26:59,606 --> 00:27:02,716 A:middle
where your content or the state

632
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

633
00:27:02,716 --> 00:27:06,126 A:middle
that you're restoring doesn't
really match the snapshot we

634
00:27:06,126 --> 00:27:10,466 A:middle
took when your app got
killed before, right.

635
00:27:11,086 --> 00:27:13,436 A:middle
So, one of the new
methods that's available

636
00:27:13,436 --> 00:27:17,396 A:middle
in state restoration
is ignoreSnapshotOn

637
00:27:17,396 --> 00:27:18,766 A:middle
NextApplicationLaunch.

638
00:27:19,206 --> 00:27:21,466 A:middle
So, you've discovered as
a function of starting

639
00:27:21,466 --> 00:27:25,296 A:middle
through the state restoration
mechanism that allow,

640
00:27:25,296 --> 00:27:27,226 A:middle
you know what, the
snapshot that's going

641
00:27:27,226 --> 00:27:29,226 A:middle
to get taken won't
make any sense.

642
00:27:29,226 --> 00:27:31,336 A:middle
You can call
ignoreSnapshotOnNextAppLaunch.

643
00:27:31,986 --> 00:27:33,656 A:middle
That method will prevent
us from taking a snapshot.

644
00:27:33,656 --> 00:27:35,086 A:middle
You'll get the default
ping when it comes up.

645
00:27:35,086 --> 00:27:37,716 A:middle
You'll be able to still do
state restoration things

646
00:27:37,716 --> 00:27:41,276 A:middle
when your app comes up but
it won't have the old content

647
00:27:41,276 --> 00:27:43,836 A:middle
if it doesn't make sense.

648
00:27:44,336 --> 00:27:47,226 A:middle
One of the other things that's
been a very popular request is

649
00:27:47,456 --> 00:27:50,386 A:middle
for objects that aren't views
or view controllers to be able

650
00:27:50,386 --> 00:27:52,536 A:middle
to participate in a state
restoration machinery.

651
00:27:53,146 --> 00:27:54,806 A:middle
So you may have your
own model objects

652
00:27:54,806 --> 00:27:57,676 A:middle
or you may have your own
informational objects

653
00:27:57,676 --> 00:28:00,126 A:middle
or created models, things like
that, that are all going to need

654
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

655
00:28:00,126 --> 00:28:01,856 A:middle
to participate in
state restoration,

656
00:28:02,396 --> 00:28:04,806 A:middle
you can use this method,

657
00:28:05,456 --> 00:28:07,616 A:middle
registerObjectFor
StateRestoration

658
00:28:07,616 --> 00:28:08,866 A:middle
restorationIdentifier.

659
00:28:09,756 --> 00:28:12,906 A:middle
So just like view controllers
can have restorationIdentifiers

660
00:28:12,906 --> 00:28:16,056 A:middle
just like other views can
restorationIdentifiers,

661
00:28:16,406 --> 00:28:19,026 A:middle
you'll now be able to specify
a restorationIdentifier

662
00:28:19,026 --> 00:28:20,896 A:middle
for arbitrary objects.

663
00:28:22,106 --> 00:28:24,056 A:middle
You'll call UIApplication
registerObject

664
00:28:24,056 --> 00:28:25,916 A:middle
ForStateRestoration
restorationIdentifier,

665
00:28:25,916 --> 00:28:27,856 A:middle
tell us the object,
tell us the identifier.

666
00:28:28,286 --> 00:28:30,736 A:middle
And as long as you conform to
the state restoring protocol,

667
00:28:31,076 --> 00:28:33,966 A:middle
we'll go ahead and
restore that object along

668
00:28:33,966 --> 00:28:36,506 A:middle
with everything else during the
state restoration mechanism.

669
00:28:36,506 --> 00:28:38,806 A:middle
So this is a great way be
able hand us more information

670
00:28:38,806 --> 00:28:42,636 A:middle
and you guys can do a little bit
less work in terms of archiving

671
00:28:42,636 --> 00:28:45,106 A:middle
and saving off your additional
state 'cause we'll keep track

672
00:28:45,106 --> 00:28:46,996 A:middle
of it for you.

673
00:28:47,636 --> 00:28:50,056 A:middle
We also now support a couple
of interesting features.

674
00:28:50,056 --> 00:28:52,656 A:middle
If you're using Core
Bluetooth and you've paired

675
00:28:52,656 --> 00:28:57,126 A:middle
up with a Bluetooth Central or a
peripheral in your application,

676
00:28:57,566 --> 00:29:00,626 A:middle
we can now state restore
those things for you as well.

677
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

678
00:29:01,486 --> 00:29:03,966 A:middle
So UIApplicationLaunchOptions
BluetoothCentralsKey,

679
00:29:03,966 --> 00:29:07,156 A:middle
when you get the state
restoration method callback,

680
00:29:07,556 --> 00:29:08,116 A:middle
one of these things

681
00:29:08,116 --> 00:29:09,636 A:middle
in the userInfo dictionary
will be the--

682
00:29:09,816 --> 00:29:11,966 A:middle
all of the identifiers
for the Bluetooth Centrals

683
00:29:12,186 --> 00:29:14,256 A:middle
that we can determine
that were present

684
00:29:14,256 --> 00:29:16,036 A:middle
when you went down before.

685
00:29:16,036 --> 00:29:18,186 A:middle
So, you'll be able to
pull all those back up

686
00:29:18,186 --> 00:29:19,466 A:middle
and reconnect very easily.

687
00:29:19,466 --> 00:29:22,816 A:middle
And if you were connected to
peripherals, you'll be able

688
00:29:22,816 --> 00:29:24,656 A:middle
to get to all of
those peripherals back

689
00:29:24,656 --> 00:29:27,606 A:middle
out of the array that's
returned by this key as well.

690
00:29:28,096 --> 00:29:30,176 A:middle
So, you don't have
to go back and try

691
00:29:30,176 --> 00:29:32,896 A:middle
to repair everything without--

692
00:29:33,366 --> 00:29:35,296 A:middle
and keep track of
all of that stuff

693
00:29:35,336 --> 00:29:36,996 A:middle
because we'll take
care of it for you.

694
00:29:37,566 --> 00:29:40,596 A:middle
Let's talk a little
bit about AirDrop.

695
00:29:40,786 --> 00:29:43,126 A:middle
AirDrop is new iOS 7.

696
00:29:43,126 --> 00:29:45,376 A:middle
You've got the Activity
View Controller that comes

697
00:29:45,376 --> 00:29:46,916 A:middle
up in AirDrop as an option.

698
00:29:47,566 --> 00:29:49,636 A:middle
One of things that you'll
do is go ahead and look

699
00:29:49,636 --> 00:29:53,036 A:middle
in the
ActivityItemSourceProtocol,

700
00:29:53,556 --> 00:29:55,336 A:middle
make sure that your
object conforms to that.

701
00:29:55,836 --> 00:29:57,956 A:middle
You'll update your
Info.plist which will create

702
00:29:57,956 --> 00:30:00,136 A:middle
or register the UTIs for
the things that you're going

703
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

704
00:30:00,136 --> 00:30:01,966 A:middle
to be able to accept
as an AirDrop.

705
00:30:02,226 --> 00:30:04,386 A:middle
And there's a new
Documents/Inbox directory.

706
00:30:04,386 --> 00:30:06,906 A:middle
This directory lives in
your application's wrapper.

707
00:30:08,146 --> 00:30:12,586 A:middle
And that wrapper-- the Inbox
directory will accept all

708
00:30:12,586 --> 00:30:14,186 A:middle
of the things that
are being AirDropped

709
00:30:14,186 --> 00:30:16,356 A:middle
to your application, right.

710
00:30:16,356 --> 00:30:18,136 A:middle
So whenever your
application activates,

711
00:30:18,216 --> 00:30:20,266 A:middle
you'll want to take a tour
through this directory and see

712
00:30:20,266 --> 00:30:22,306 A:middle
if there's anything new in there
that you'll want to pull in.

713
00:30:22,906 --> 00:30:25,626 A:middle
New documents, new things
that other users have shared

714
00:30:25,626 --> 00:30:28,776 A:middle
with you are going to come along
with these app activations.

715
00:30:29,586 --> 00:30:31,056 A:middle
And you should check this even

716
00:30:31,056 --> 00:30:34,106 A:middle
if you don't get the
usual application:openURL

717
00:30:34,106 --> 00:30:35,656 A:middle
:sourceApplication :annotation:

718
00:30:35,656 --> 00:30:37,146 A:middle
call because these
things are going to come

719
00:30:37,146 --> 00:30:39,726 A:middle
in from other places and
they may come in frequently.

720
00:30:39,726 --> 00:30:43,616 A:middle
So somebody AirDrops 10 or 12
things to you, you might want

721
00:30:43,616 --> 00:30:44,856 A:middle
to be able to queue
that work up.

722
00:30:44,856 --> 00:30:47,346 A:middle
You don't want to do all of
the transition work of "Oh,

723
00:30:47,346 --> 00:30:49,816 A:middle
I received this thing and then
I'm going to move it over here

724
00:30:49,816 --> 00:30:50,956 A:middle
and process it somehow."

725
00:30:51,186 --> 00:30:53,926 A:middle
You want to defer that until a
point where the application is--

726
00:30:53,926 --> 00:30:57,176 A:middle
you want to make sure that the
application to stay responsive.

727
00:30:57,176 --> 00:30:58,576 A:middle
You don't want to block
the user doing that.

728
00:30:58,626 --> 00:31:00,476 A:middle
So you might want to queue
this stuff up if you discover

729
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

730
00:31:00,476 --> 00:31:05,216 A:middle
that there are 12 or 15
things in the Inbox directory.

731
00:31:05,686 --> 00:31:08,236 A:middle
This is tremendously
exciting because it's going

732
00:31:08,236 --> 00:31:12,156 A:middle
to be a very easy behavior-base
way for you guys to add really,

733
00:31:12,586 --> 00:31:14,016 A:middle
really, really subtle effects

734
00:31:14,056 --> 00:31:16,526 A:middle
but really fantastic
physics-base effects

735
00:31:16,526 --> 00:31:18,076 A:middle
and animations to
your application.

736
00:31:18,986 --> 00:31:20,646 A:middle
The idea is to be
able to provide fluid,

737
00:31:20,836 --> 00:31:24,996 A:middle
very responsive animations
that enhance the interactions

738
00:31:24,996 --> 00:31:26,796 A:middle
in your application, all right.

739
00:31:27,166 --> 00:31:28,766 A:middle
This is not something
that you should be using

740
00:31:28,766 --> 00:31:29,626 A:middle
that says, "Hey look.

741
00:31:29,626 --> 00:31:31,536 A:middle
This is animating and it's
bouncy and it's physics."

742
00:31:31,536 --> 00:31:34,136 A:middle
It should be really,
really carefully considered.

743
00:31:34,676 --> 00:31:37,536 A:middle
And the concentration of
the API is on behaviors.

744
00:31:38,276 --> 00:31:40,246 A:middle
We don't want you to have to
write lots and lots of code

745
00:31:40,246 --> 00:31:41,526 A:middle
to be able to get basic things

746
00:31:41,526 --> 00:31:44,826 A:middle
like views dropping
down from the screen.

747
00:31:45,216 --> 00:31:48,266 A:middle
The Lock Screen effect
where you bounce the camera,

748
00:31:48,646 --> 00:31:50,486 A:middle
you bounce the Lock
Screen to find the camera,

749
00:31:50,916 --> 00:31:53,006 A:middle
that's very few lines of code.

750
00:31:53,006 --> 00:31:56,236 A:middle
It's attaching behaviors to
a view rather than having

751
00:31:56,236 --> 00:31:58,726 A:middle
to write all of the
physics behavior behind it.

752
00:31:59,256 --> 00:32:02,786 A:middle
What you'll do is create one of
these UIDynamicAnimator objects.

753
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

754
00:32:04,006 --> 00:32:05,556 A:middle
And a Dynamic Animator
concentrates

755
00:32:05,556 --> 00:32:06,456 A:middle
on a reference view.

756
00:32:06,916 --> 00:32:09,396 A:middle
Most of the time, you'll be
using this view initializer,

757
00:32:09,486 --> 00:32:10,376 A:middle
initWithReferenceView.

758
00:32:11,746 --> 00:32:13,666 A:middle
That view contains-- it's going

759
00:32:13,666 --> 00:32:15,996 A:middle
to apply behaviors
to everything in it.

760
00:32:17,056 --> 00:32:18,756 A:middle
You'll add dynamic behaviors

761
00:32:18,756 --> 00:32:21,136 A:middle
or remove dynamic behaviors
depending on what's going on.

762
00:32:21,906 --> 00:32:24,106 A:middle
And you can also find out if
you're writing one of your own,

763
00:32:24,416 --> 00:32:25,646 A:middle
all of the items
in a given rect.

764
00:32:25,646 --> 00:32:28,676 A:middle
So you may want to be able
to do things like only look

765
00:32:28,676 --> 00:32:30,886 A:middle
at the visible rectangle and
only animate those things

766
00:32:30,886 --> 00:32:32,156 A:middle
that are actually
visible if you're going

767
00:32:32,256 --> 00:32:33,896 A:middle
to write your own
dynamic animators.

768
00:32:34,226 --> 00:32:37,046 A:middle
You can also find out
whether or not it's running

769
00:32:37,566 --> 00:32:38,666 A:middle
so you'll be able
to know whether

770
00:32:38,666 --> 00:32:40,736 A:middle
or not the animation
has come to rest.

771
00:32:41,746 --> 00:32:45,436 A:middle
And there's a delegate that
tells you also when things come

772
00:32:45,436 --> 00:32:47,166 A:middle
to rest, when things
started up again.

773
00:32:47,596 --> 00:32:49,776 A:middle
So, one of the things that we're
doing with this is making sure

774
00:32:49,776 --> 00:32:53,696 A:middle
that you're concentrating on the
behavior, we're concentrating

775
00:32:53,696 --> 00:32:55,086 A:middle
on the bookkeeping
for the physics.

776
00:32:55,976 --> 00:33:01,526 A:middle
Dynamic behaviors are
just a tree of all kinds

777
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

778
00:33:01,526 --> 00:33:03,586 A:middle
of supported things for gravity

779
00:33:03,586 --> 00:33:05,166 A:middle
and collisions and
stuff like that.

780
00:33:05,166 --> 00:33:06,976 A:middle
So you'll add or
remove child behaviors

781
00:33:06,976 --> 00:33:08,406 A:middle
to a given dynamic behavior.

782
00:33:08,806 --> 00:33:12,436 A:middle
And a dynamic behavior
defines all kinds

783
00:33:12,496 --> 00:33:14,536 A:middle
of timings and things like that.

784
00:33:14,826 --> 00:33:16,906 A:middle
One of the things that you can
do is you can also implement an

785
00:33:17,016 --> 00:33:17,896 A:middle
action block.

786
00:33:18,286 --> 00:33:21,406 A:middle
It gets called at every frame
of the dynamic animation.

787
00:33:21,406 --> 00:33:22,486 A:middle
So if you need to do something

788
00:33:22,866 --> 00:33:26,876 A:middle
that our built-in behaviors
don't do or can't really support

789
00:33:26,876 --> 00:33:30,216 A:middle
without additional help from
the system as it's running,

790
00:33:30,216 --> 00:33:31,716 A:middle
you can implement
this Action method.

791
00:33:32,066 --> 00:33:34,856 A:middle
It shouldn't be too
common, but you can do it.

792
00:33:35,546 --> 00:33:36,916 A:middle
What are those supported
behaviors?

793
00:33:37,886 --> 00:33:39,476 A:middle
Attachments, so if
you want to be able

794
00:33:39,476 --> 00:33:41,506 A:middle
to have one view
follow another view,

795
00:33:42,156 --> 00:33:43,856 A:middle
you can attach the
two views together

796
00:33:43,856 --> 00:33:45,146 A:middle
and they'll animate together.

797
00:33:45,586 --> 00:33:48,916 A:middle
CollisionBehavior, if two
views are going to bump

798
00:33:48,916 --> 00:33:50,116 A:middle
into each other and bounce off

799
00:33:50,116 --> 00:33:51,616 A:middle
of each other, you
can specify that.

800
00:33:52,096 --> 00:33:54,646 A:middle
GravityBehavior, how
much gravity is involved,

801
00:33:54,646 --> 00:33:59,356 A:middle
and that's how we control how
fast that Lock Screen drops back

802
00:33:59,396 --> 00:34:00,636 A:middle
down when you're
bringing the camera up.

803
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

804
00:34:01,366 --> 00:34:04,946 A:middle
A PushBehavior is if you
give it a view an impulse

805
00:34:04,946 --> 00:34:08,005 A:middle
as if you were giving it a force
and it's going to slide off

806
00:34:08,005 --> 00:34:09,235 A:middle
and bump into something else.

807
00:34:09,686 --> 00:34:12,466 A:middle
We have a new unit
of measure I think

808
00:34:12,466 --> 00:34:13,396 A:middle
that we're introducing there.

809
00:34:13,396 --> 00:34:14,876 A:middle
You'll have to go to
the Animation talk

810
00:34:14,906 --> 00:34:15,896 A:middle
to find out what it is.

811
00:34:16,576 --> 00:34:19,666 A:middle
A SnapBehavior, SnapBehaviors
are really interesting.

812
00:34:19,666 --> 00:34:23,335 A:middle
They allow you to be able to
specify essentially a well

813
00:34:23,335 --> 00:34:25,936 A:middle
or a snap so that when a
view overlaps another one,

814
00:34:26,176 --> 00:34:28,326 A:middle
it folds into place
at that location.

815
00:34:29,076 --> 00:34:32,456 A:middle
And if you need to do
something that isn't setup here,

816
00:34:32,556 --> 00:34:35,686 A:middle
UIDynamicItemBehavior is your
opportunity to participate

817
00:34:35,686 --> 00:34:37,235 A:middle
in the system yourself.

818
00:34:37,366 --> 00:34:43,416 A:middle
So DynamicItem is just something
that conforms to this protocol,

819
00:34:44,826 --> 00:34:46,386 A:middle
center, bounds, transform.

820
00:34:46,806 --> 00:34:47,815 A:middle
And that's how we move things

821
00:34:47,815 --> 00:34:50,216 A:middle
around on the screen
during the animations.

822
00:34:50,835 --> 00:34:54,116 A:middle
There are two Dynamics
talks, Getting Started

823
00:34:54,116 --> 00:34:56,815 A:middle
with UIKit Dynamics
right here at 4:30.

824
00:34:57,336 --> 00:34:58,896 A:middle
The demos are awesome.

825
00:34:59,626 --> 00:35:02,616 A:middle
And Olivia will an absolutely
fantastic job talking

826
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

827
00:35:02,616 --> 00:35:03,396 A:middle
about this.

828
00:35:03,606 --> 00:35:07,676 A:middle
Advanced Techniques with UIKit
Dynamics, Thursday here at 3:15.

829
00:35:08,946 --> 00:35:10,406 A:middle
It's very composeable.

830
00:35:10,406 --> 00:35:12,116 A:middle
It's tremendously powerful.

831
00:35:12,116 --> 00:35:13,446 A:middle
There's a lot of stuff here.

832
00:35:13,976 --> 00:35:16,416 A:middle
If you're interested in this
kind of physics-base animation,

833
00:35:16,876 --> 00:35:19,866 A:middle
you're going to want
to see this talk.

834
00:35:20,046 --> 00:35:25,156 A:middle
So, let's talk a
little bit about text.

835
00:35:25,326 --> 00:35:29,596 A:middle
We've always had a concentration
on beautiful typography

836
00:35:30,216 --> 00:35:32,436 A:middle
and really, really
crisp beautiful text.

837
00:35:32,926 --> 00:35:34,626 A:middle
In IOS 6, we introduced all

838
00:35:34,626 --> 00:35:38,286 A:middle
of the NSAttributedString
components that enable you

839
00:35:38,286 --> 00:35:40,796 A:middle
to do things like mix
and match runs of text

840
00:35:40,796 --> 00:35:43,286 A:middle
with different styles.

841
00:35:44,126 --> 00:35:46,356 A:middle
You know, bold, italic,
underline, things like that.

842
00:35:47,016 --> 00:35:49,236 A:middle
We also piped that all
the way through UIKit.

843
00:35:49,236 --> 00:35:52,246 A:middle
So, buttons and text fields and
text views and stuff like that.

844
00:35:52,636 --> 00:35:54,686 A:middle
Really, we're able to do--

845
00:35:54,686 --> 00:35:56,876 A:middle
you're able to do far more
typographic things with it.

846
00:35:57,696 --> 00:36:00,966 A:middle
We've introduced a new
dynamic types sizing mechanism.

847
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

848
00:36:00,966 --> 00:36:05,236 A:middle
So, dynamic type, this is the
text size view controller that's

849
00:36:05,276 --> 00:36:06,746 A:middle
in settings.

850
00:36:07,126 --> 00:36:11,126 A:middle
The user can go and slide
this slider left and right

851
00:36:11,126 --> 00:36:14,586 A:middle
to decide how large or small
they want their primary content

852
00:36:14,726 --> 00:36:16,436 A:middle
to be, right.

853
00:36:17,026 --> 00:36:18,896 A:middle
And that slider is piped

854
00:36:18,986 --> 00:36:21,896 A:middle
to the
preferredContentSizeCategory

855
00:36:21,896 --> 00:36:24,716 A:middle
method-- property,
rather, on UIApplication.

856
00:36:24,716 --> 00:36:27,456 A:middle
This is how you find out
what the user selected.

857
00:36:28,216 --> 00:36:30,496 A:middle
And that preferred content
size categories can be the--

858
00:36:30,636 --> 00:36:33,836 A:middle
essentially, the text size
for the primary content text

859
00:36:33,836 --> 00:36:37,556 A:middle
that you're using and that'll be
based with one of these values,

860
00:36:37,686 --> 00:36:39,636 A:middle
extra small, small,
medium large, extra,

861
00:36:39,636 --> 00:36:43,826 A:middle
it's like a t-shirt
but with-- for text.

862
00:36:44,436 --> 00:36:51,326 A:middle
So, this specifies sort of the
base relative size of the text.

863
00:36:51,486 --> 00:36:53,656 A:middle
When it changes, you'll
find out when it changes

864
00:36:53,656 --> 00:36:55,386 A:middle
because you'll get a
ContentSizeCategory

865
00:36:55,386 --> 00:36:59,376 A:middle
DidChangeNotification and a
ContentSize CategoryNewValueKey,

866
00:36:59,566 --> 00:37:01,366 A:middle
and this is your opportunity
to be able to go back,

867
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

868
00:37:01,696 --> 00:37:04,526 A:middle
find out what changed,
relay out your text.

869
00:37:04,626 --> 00:37:07,966 A:middle
So, again, with the dynamic
text bits, you're going to want

870
00:37:07,966 --> 00:37:11,076 A:middle
to be using auto-layout because
that will help you scale your

871
00:37:11,076 --> 00:37:13,756 A:middle
layout as the text size changes.

872
00:37:14,856 --> 00:37:16,856 A:middle
They mentioned this
one method here,

873
00:37:16,856 --> 00:37:20,196 A:middle
preferredFont ForTextStyle,
right.

874
00:37:20,536 --> 00:37:23,616 A:middle
Most of our content falls
within certain bins.

875
00:37:23,656 --> 00:37:24,576 A:middle
There's a body.

876
00:37:25,016 --> 00:37:28,876 A:middle
There are some headlines or
a subject line or something

877
00:37:28,876 --> 00:37:32,396 A:middle
like that or a smaller
text that's interstitial

878
00:37:32,396 --> 00:37:34,586 A:middle
like a caption for a
picture, something like that.

879
00:37:35,196 --> 00:37:38,066 A:middle
All of these styles,
you can pass

880
00:37:38,066 --> 00:37:40,096 A:middle
into preferredFontForTextStyle.

881
00:37:41,026 --> 00:37:42,516 A:middle
We'll go through
and evaluate that,

882
00:37:42,726 --> 00:37:46,906 A:middle
figure out what the appropriate
size, weight, all of the things

883
00:37:46,906 --> 00:37:48,986 A:middle
that would apply to that
is in relative terms

884
00:37:48,986 --> 00:37:51,076 A:middle
and produce a new
UIFont for you to use.

885
00:37:52,076 --> 00:37:54,316 A:middle
So this method
preferredFontForTextStyle is

886
00:37:54,446 --> 00:37:55,516 A:middle
very, very important.

887
00:37:55,596 --> 00:37:57,466 A:middle
It's the single chill
point to be able

888
00:37:57,466 --> 00:38:02,916 A:middle
to get relative text styles
and fonts for your application

889
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

890
00:38:02,916 --> 00:38:03,946 A:middle
and they'll scale relative

891
00:38:03,946 --> 00:38:06,296 A:middle
to the primary content
size that you want.

892
00:38:09,196 --> 00:38:11,706 A:middle
One of the things
that we've noticed is

893
00:38:12,246 --> 00:38:17,666 A:middle
that the NSAttributedString
system is very powerful.

894
00:38:17,806 --> 00:38:19,176 A:middle
You can specify attributes.

895
00:38:19,176 --> 00:38:20,486 A:middle
You can do all of these things.

896
00:38:20,866 --> 00:38:24,456 A:middle
But you're pretty much getting
the rendering that we give you.

897
00:38:25,326 --> 00:38:29,136 A:middle
So in IOS 7, we talked about
this a couple of times,

898
00:38:29,136 --> 00:38:32,216 A:middle
but in IOS 7, we're
introducing Text Kit.

899
00:38:33,646 --> 00:38:37,156 A:middle
Text Kit is an Objective-C API.

900
00:38:37,376 --> 00:38:40,286 A:middle
It's inspired by the Cocoa
text system from OS X.

901
00:38:40,286 --> 00:38:43,116 A:middle
So if you've been using the
Cocoa text system on OS X,

902
00:38:43,116 --> 00:38:45,586 A:middle
a lot of the concepts
that we're going to talk

903
00:38:45,586 --> 00:38:47,206 A:middle
about here will be
very, very familiar,

904
00:38:47,206 --> 00:38:48,696 A:middle
and this wraps Core Text.

905
00:38:49,086 --> 00:38:53,136 A:middle
So this is our high level API
for our low level text system.

906
00:38:53,506 --> 00:38:55,866 A:middle
So let's talk about the
classes that are involved here.

907
00:38:56,336 --> 00:38:58,266 A:middle
This is just an application.

908
00:38:58,726 --> 00:39:01,036 A:middle
It's got a UITextView in it.

909
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

910
00:39:01,336 --> 00:39:04,046 A:middle
That UITextView has
an NSTextContainer.

911
00:39:04,646 --> 00:39:09,036 A:middle
And NSTextContainer is
the largest component

912
00:39:09,086 --> 00:39:10,506 A:middle
of the text system for layout.

913
00:39:10,506 --> 00:39:13,846 A:middle
And then we get an
NSLayoutManager.

914
00:39:13,846 --> 00:39:16,216 A:middle
And the Layout Manager is the
thing that's actually in charge

915
00:39:16,216 --> 00:39:17,866 A:middle
of doing all of the
drawing and the bits.

916
00:39:17,866 --> 00:39:23,696 A:middle
And an NSTextStorage is the
actual NSString that's backing

917
00:39:23,696 --> 00:39:25,206 A:middle
all of this, right.

918
00:39:26,106 --> 00:39:28,026 A:middle
And one of the great things
about Text Kit and one

919
00:39:28,026 --> 00:39:31,126 A:middle
of the fantastic things about
way this to setup is if you want

920
00:39:31,126 --> 00:39:34,156 A:middle
to participate at any level
of this, you don't have

921
00:39:34,156 --> 00:39:35,796 A:middle
to subclass the whole stack.

922
00:39:37,066 --> 00:39:39,806 A:middle
You just subclass an
NSLayoutManager if you want

923
00:39:39,806 --> 00:39:43,536 A:middle
to change the way maybe glyphs
render, or a TextContainer

924
00:39:43,536 --> 00:39:45,836 A:middle
if you'd like to change the
way text flows or wraps.

925
00:39:46,306 --> 00:39:49,596 A:middle
Or if you need to be able to
manage your own specific kind

926
00:39:49,596 --> 00:39:52,346 A:middle
of text storage that isn't
just a straight array

927
00:39:52,346 --> 00:39:55,206 A:middle
of Unicode characters, you can
subclass that as TextStorage

928
00:39:55,206 --> 00:39:58,286 A:middle
and you can participate at
any level of this hierarchy.

929
00:39:59,436 --> 00:40:01,716 A:middle
Let's talk a little bit about
TextView and TextContainer.

930
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

931
00:40:02,046 --> 00:40:04,306 A:middle
An initWithFrame textContainer
is the new designated

932
00:40:04,306 --> 00:40:06,696 A:middle
initializer on UITextView, OK.

933
00:40:06,696 --> 00:40:08,836 A:middle
So if you specify a
nil TextContainer,

934
00:40:09,266 --> 00:40:11,146 A:middle
you'll get the default
that UIKit uses.

935
00:40:11,536 --> 00:40:14,196 A:middle
You can also find out what
that TextContainer is.

936
00:40:14,196 --> 00:40:17,436 A:middle
And as a convenience,
the layoutManager

937
00:40:17,436 --> 00:40:20,286 A:middle
and textStorage methods
are call-throughs

938
00:40:20,286 --> 00:40:22,976 A:middle
to the TextContainer
from UITextView.

939
00:40:23,046 --> 00:40:25,786 A:middle
We're just piping those through
to make it a little easier

940
00:40:25,786 --> 00:40:26,286 A:middle
to get to.

941
00:40:27,326 --> 00:40:30,976 A:middle
So, all you have to do
here is if you're going

942
00:40:30,976 --> 00:40:33,206 A:middle
to change your TextContainer,
call that.

943
00:40:33,976 --> 00:40:37,706 A:middle
TextContainers get initialized
with a size, so they get setup

944
00:40:37,706 --> 00:40:40,486 A:middle
with a specific size
for the frame

945
00:40:40,486 --> 00:40:41,706 A:middle
that they're being laid out in.

946
00:40:42,516 --> 00:40:44,426 A:middle
And they also have
a LayoutManager.

947
00:40:44,426 --> 00:40:45,036 A:middle
So if you're going to--

948
00:40:45,036 --> 00:40:47,426 A:middle
if you're going to
subclass LayoutManager,

949
00:40:47,426 --> 00:40:48,826 A:middle
you can provide your
own subclass.

950
00:40:48,826 --> 00:40:51,276 A:middle
If you don't provide one here,
again, you get our default,

951
00:40:51,276 --> 00:40:53,096 A:middle
so you get the default behavior
all the way down the stack.

952
00:40:54,686 --> 00:40:56,286 A:middle
You can also change
the lineBreakMode

953
00:40:56,286 --> 00:40:57,506 A:middle
and lineFragmentPadding.

954
00:40:58,116 --> 00:41:00,216 A:middle
So things that you've never
really had a lot of control

955
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

956
00:41:00,216 --> 00:41:02,956 A:middle
over before, where things
break, how they break

957
00:41:02,956 --> 00:41:06,046 A:middle
with the default break modes
and the fragment padding

958
00:41:06,046 --> 00:41:09,146 A:middle
for how things get split out.

959
00:41:09,426 --> 00:41:12,706 A:middle
lineFragmentRectForProposedRect
atIndex writingDirection

960
00:41:12,706 --> 00:41:16,026 A:middle
remainingRect, there are a lot
more methods on TextContainer,

961
00:41:16,026 --> 00:41:18,286 A:middle
and these are just
a few of them.

962
00:41:18,366 --> 00:41:20,306 A:middle
But this is the kind
of control you get.

963
00:41:20,306 --> 00:41:24,306 A:middle
Given a specific rectangle at
an index and a character index

964
00:41:24,306 --> 00:41:26,126 A:middle
of your Text Screen
will tell you what the

965
00:41:26,126 --> 00:41:29,446 A:middle
baseWritingDirection is,
you'll fill in a remainingRect,

966
00:41:29,446 --> 00:41:32,356 A:middle
in return, a rectangle for that.

967
00:41:32,356 --> 00:41:34,756 A:middle
So if you want to change
where this stuff lays out,

968
00:41:34,756 --> 00:41:36,126 A:middle
this is one place to do it.

969
00:41:36,126 --> 00:41:36,456 A:middle
So you're going

970
00:41:36,456 --> 00:41:39,786 A:middle
to get exceptionally fine
during control over where all

971
00:41:39,786 --> 00:41:41,296 A:middle
of the glyphs wind up.

972
00:41:42,206 --> 00:41:43,486 A:middle
One of the most-- one

973
00:41:43,486 --> 00:41:46,896 A:middle
of the coolest things we've
done is exclusionPaths.

974
00:41:47,436 --> 00:41:52,586 A:middle
So, if you're doing a picture,
for instance, of the flowers

975
00:41:52,586 --> 00:41:54,156 A:middle
that you saw in the
previous presentation,

976
00:41:54,156 --> 00:41:55,896 A:middle
it's got an irregular
path around it,

977
00:41:56,496 --> 00:41:59,506 A:middle
that would've involved a lot of
work to be able to try to figure

978
00:41:59,506 --> 00:42:01,946 A:middle
out where is the bitmap,
where are the places

979
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

980
00:42:01,946 --> 00:42:02,946 A:middle
that it's overlapping.

981
00:42:03,416 --> 00:42:04,916 A:middle
With exclusionPaths,
all you have

982
00:42:04,946 --> 00:42:06,976 A:middle
to do is provide
us a UIBezierPath.

983
00:42:07,856 --> 00:42:09,696 A:middle
The text will automatically
flow around that path.

984
00:42:09,696 --> 00:42:12,606 A:middle
And as you change it, we'll
re-layout it automatically.

985
00:42:13,516 --> 00:42:17,146 A:middle
[ Applause ]

986
00:42:17,646 --> 00:42:18,656 A:middle
It's a lot simpler.

987
00:42:19,886 --> 00:42:24,556 A:middle
LayoutManager has a bunch
of different global options,

988
00:42:24,556 --> 00:42:26,036 A:middle
things like
showsInvisibleCharacters,

989
00:42:26,036 --> 00:42:27,226 A:middle
showsControlCharacters,

990
00:42:27,226 --> 00:42:31,066 A:middle
the hyphenationFactor you can
tweak how aggressively words are

991
00:42:31,066 --> 00:42:34,596 A:middle
hyphenated, usesFontLeading,
whether reusing the leading

992
00:42:34,596 --> 00:42:36,136 A:middle
from the font system
or something else,

993
00:42:36,136 --> 00:42:39,686 A:middle
and allowsNonContiguousLayout
and hasNonContiguousLayout.

994
00:42:39,686 --> 00:42:43,606 A:middle
So, if you've invalidated
a section of the text,

995
00:42:43,666 --> 00:42:46,296 A:middle
we don't have to re-layout
the entire [inaudible] one

996
00:42:46,716 --> 00:42:50,916 A:middle
to be able to redisplay
the text.

997
00:42:51,296 --> 00:42:53,886 A:middle
So NonContiguousLayout
is a great performance

998
00:42:53,886 --> 00:42:55,646 A:middle
when especially on
embedded devices.

999
00:42:55,726 --> 00:42:57,456 A:middle
And this concept
is almost directly

1000
00:42:57,456 --> 00:42:59,386 A:middle
from the OS X text system.

1001
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1002
00:43:00,216 --> 00:43:02,366 A:middle
If you have NonContiguousLayout,
you can find

1003
00:43:02,366 --> 00:43:03,736 A:middle
out from the LayoutManager here.

1004
00:43:05,026 --> 00:43:06,216 A:middle
What does LayoutManager do?

1005
00:43:06,216 --> 00:43:10,556 A:middle
LayoutManager is really the
workhorse of the text system.

1006
00:43:10,556 --> 00:43:13,636 A:middle
So a lot of the features
involve things like invalidation

1007
00:43:13,636 --> 00:43:16,396 A:middle
and there are probably 15
or 20 invalidation methods.

1008
00:43:16,646 --> 00:43:17,336 A:middle
One of them is something

1009
00:43:17,336 --> 00:43:19,406 A:middle
like invalidateLayout
ForCharacterRange

1010
00:43:19,446 --> 00:43:22,846 A:middle
actualCharacterRange, so
you'll be able to take portions

1011
00:43:22,846 --> 00:43:25,806 A:middle
of the layout and invalidate
them yourself or find

1012
00:43:25,806 --> 00:43:27,036 A:middle
out when they're invalidated.

1013
00:43:27,716 --> 00:43:29,636 A:middle
Glyphs and glyph properties.

1014
00:43:29,636 --> 00:43:32,306 A:middle
If you've ever wanted to
get involved with what winds

1015
00:43:32,306 --> 00:43:35,676 A:middle
up on the screen in place of
something in your TextStorage,

1016
00:43:36,986 --> 00:43:38,956 A:middle
this is one part of
LayoutManager's job.

1017
00:43:38,986 --> 00:43:41,266 A:middle
You can find out many glyphs
are in the run, that's just,

1018
00:43:41,266 --> 00:43:43,066 A:middle
you know, what characters
are there.

1019
00:43:43,616 --> 00:43:47,686 A:middle
glyphAtIndex and isValidIndex
tell me what glyph is being used

1020
00:43:47,776 --> 00:43:49,576 A:middle
for the character at this index.

1021
00:43:49,576 --> 00:43:51,466 A:middle
And then you can do things
like getGlyphsInRange

1022
00:43:51,466 --> 00:43:53,446 A:middle
and you'll get a CGGlyph
back with properties,

1023
00:43:53,446 --> 00:43:55,056 A:middle
characterIndexes and bidiLevels.

1024
00:43:55,426 --> 00:43:58,536 A:middle
All of these things
help you decide what's

1025
00:43:58,536 --> 00:44:01,496 A:middle
in the LayoutManager as
well as what gets drawn.

1026
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1027
00:44:02,466 --> 00:44:07,906 A:middle
So speaking of drawing, you'll
be able to actually get involved

1028
00:44:07,906 --> 00:44:09,826 A:middle
with what hits the screen based

1029
00:44:09,826 --> 00:44:11,906 A:middle
on the text runs you
have in your TextStorage.

1030
00:44:12,586 --> 00:44:15,256 A:middle
So you can draw a background
for a glyph range at point,

1031
00:44:15,286 --> 00:44:16,636 A:middle
that's how you'll
be able to do things

1032
00:44:16,966 --> 00:44:19,846 A:middle
like put your own
graphics behind things.

1033
00:44:19,846 --> 00:44:21,626 A:middle
rawGlyphsForGlyphRange atPoint,

1034
00:44:21,626 --> 00:44:25,216 A:middle
if you want to put your own
CGGlyphs in place of a range

1035
00:44:25,216 --> 00:44:26,906 A:middle
at a point, you'll
be able to do that.

1036
00:44:26,906 --> 00:44:28,546 A:middle
So you've got complete control

1037
00:44:28,906 --> 00:44:30,736 A:middle
over how text gets
rendered on the system.

1038
00:44:31,466 --> 00:44:34,026 A:middle
drawUnderlineForGlyphRange
underlineType baseline--

1039
00:44:35,446 --> 00:44:37,926 A:middle
all of these different styles,
what kinds of underlines,

1040
00:44:37,926 --> 00:44:43,296 A:middle
what kinds of bold gets used,
all of that stuff is controlled

1041
00:44:43,296 --> 00:44:45,296 A:middle
by the LayoutManager,
you have all

1042
00:44:45,296 --> 00:44:46,706 A:middle
of these methods
available to you.

1043
00:44:46,706 --> 00:44:52,276 A:middle
So there is a fantastic
control over text on iOS.

1044
00:44:52,276 --> 00:44:54,676 A:middle
NSTextAttachment is
another class in Text Kit.

1045
00:44:54,676 --> 00:44:56,176 A:middle
You'll be able to put pictures

1046
00:44:56,176 --> 00:44:59,166 A:middle
and images inside the text
runs inside of UITextView.

1047
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1048
00:45:01,876 --> 00:45:02,726 A:middle
Much easier, yeah.

1049
00:45:04,216 --> 00:45:06,816 A:middle
So, we are very, very
serious about this.

1050
00:45:06,846 --> 00:45:08,326 A:middle
This is an incredible
technology.

1051
00:45:08,326 --> 00:45:11,736 A:middle
It's a fantastic opportunity
for you to really take control

1052
00:45:11,736 --> 00:45:12,866 A:middle
of the typography in your app,

1053
00:45:12,866 --> 00:45:14,726 A:middle
especially if you're
writing advanced text

1054
00:45:14,726 --> 00:45:15,866 A:middle
processing applications.

1055
00:45:16,256 --> 00:45:17,616 A:middle
We have three talks on this.

1056
00:45:17,616 --> 00:45:20,896 A:middle
Introducing Text Kit,
come back after lunch,

1057
00:45:20,896 --> 00:45:23,386 A:middle
after the lunch time
speaker, we'll we've talking

1058
00:45:23,386 --> 00:45:26,216 A:middle
about it right here in
the Presidio tomorrow.

1059
00:45:27,656 --> 00:45:30,606 A:middle
Advance Text Layouts and Effects
with Text Kit, that's going

1060
00:45:30,606 --> 00:45:32,256 A:middle
to get into all of the bits,

1061
00:45:32,366 --> 00:45:34,086 A:middle
things like all the
LayoutManager stuff,

1062
00:45:34,136 --> 00:45:35,106 A:middle
where to overwrite things,

1063
00:45:35,106 --> 00:45:37,676 A:middle
that's in Mission,
Thursday at 2:00.

1064
00:45:37,676 --> 00:45:40,316 A:middle
And Using Fonts with Text Kit
right here in the Presidio,

1065
00:45:40,316 --> 00:45:42,296 A:middle
Friday, bright and
early at 9:00 AM.

1066
00:45:42,716 --> 00:45:44,726 A:middle
You'll find out how to
effectively use fonts

1067
00:45:44,726 --> 00:45:46,316 A:middle
from your application
with Text Kit

1068
00:45:46,316 --> 00:45:48,116 A:middle
and everything else
that that implies.

1069
00:45:49,276 --> 00:45:52,156 A:middle
These are fantastic
technologies.

1070
00:45:52,156 --> 00:45:55,516 A:middle
It's all stuff that we're using
in iOS all over the place.

1071
00:45:55,986 --> 00:45:57,696 A:middle
If you don't take
advantage of this,

1072
00:45:57,886 --> 00:45:59,026 A:middle
I'm not sure what to tell you.

1073
00:45:59,076 --> 00:46:00,826 A:middle
This is fantastic stuff.

1074
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1075
00:46:01,456 --> 00:46:04,826 A:middle
We're not the only people
working on this stuff.

1076
00:46:04,966 --> 00:46:08,926 A:middle
There are many, many, many
new features across a number

1077
00:46:08,926 --> 00:46:11,006 A:middle
of different frameworks in iOS.

1078
00:46:11,096 --> 00:46:14,776 A:middle
One of the more exciting
things, Multipeer Connectivity,

1079
00:46:15,856 --> 00:46:20,386 A:middle
the Game Kit guys and the IMG
guys have been working very hard

1080
00:46:20,386 --> 00:46:21,686 A:middle
at producing a new framework

1081
00:46:21,776 --> 00:46:24,516 A:middle
for local network
connectivity involving things

1082
00:46:24,516 --> 00:46:26,396 A:middle
like session management,
who's involved,

1083
00:46:26,396 --> 00:46:27,546 A:middle
who's joined a session,

1084
00:46:27,776 --> 00:46:30,066 A:middle
and multiplexing data
across that session.

1085
00:46:30,516 --> 00:46:33,866 A:middle
You'll be able to setup secure
sessions yourself as well

1086
00:46:33,866 --> 00:46:35,446 A:middle
as file transfers
and things like that.

1087
00:46:35,446 --> 00:46:38,456 A:middle
So, if you're writing something
that involves collaboration

1088
00:46:38,456 --> 00:46:39,926 A:middle
or you're writing
a multiplayer game,

1089
00:46:40,306 --> 00:46:41,876 A:middle
this will be a fantastic
talk to go

1090
00:46:41,876 --> 00:46:43,986 A:middle
to in Mission, Wednesday
at 10:15.

1091
00:46:44,876 --> 00:46:47,686 A:middle
If you are at the Platform
State of the Union,

1092
00:46:47,686 --> 00:46:49,416 A:middle
you probably heard
about SpriteKits.

1093
00:46:49,456 --> 00:46:52,136 A:middle
SpriteKit is a cross
platform, high performance,

1094
00:46:52,136 --> 00:46:53,436 A:middle
sprite-based game framework.

1095
00:46:54,336 --> 00:46:56,646 A:middle
So, this makes it
tremendously easy to be able

1096
00:46:56,646 --> 00:46:58,756 A:middle
to write fantastic
iOS-based games,

1097
00:46:59,226 --> 00:47:01,306 A:middle
Mac OS X-- OS X-based games.

1098
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1099
00:47:01,696 --> 00:47:04,406 A:middle
It has image atlas support
and really tight integration

1100
00:47:04,406 --> 00:47:05,476 A:middle
with UIKit and Appkit.

1101
00:47:05,566 --> 00:47:07,916 A:middle
One of the things that these
guys did was to be able

1102
00:47:07,916 --> 00:47:10,186 A:middle
to pipe UIGestureRecognizers
directly

1103
00:47:10,186 --> 00:47:12,686 A:middle
into this entire
OpenGL-based rendering system.

1104
00:47:12,686 --> 00:47:16,086 A:middle
So, you'll be able to do very
idiomatic UIKit-like things

1105
00:47:16,686 --> 00:47:19,086 A:middle
with SpriteKit on iOS.

1106
00:47:19,376 --> 00:47:22,386 A:middle
The game Controllers
framework, you'll be able

1107
00:47:22,386 --> 00:47:24,106 A:middle
to pair arbitrary
Bluetooth game controllers

1108
00:47:24,186 --> 00:47:25,476 A:middle
with your iOS device.

1109
00:47:25,476 --> 00:47:27,106 A:middle
So if you're doing
something with games

1110
00:47:27,106 --> 00:47:28,156 A:middle
and you want those
shoulder buttons

1111
00:47:28,156 --> 00:47:30,226 A:middle
and the analogue joysticks
and everything else to work,

1112
00:47:30,486 --> 00:47:32,576 A:middle
you'll be able to find
out about all of that.

1113
00:47:32,576 --> 00:47:34,486 A:middle
That's at the Integrating
with Game Controllers talk

1114
00:47:34,486 --> 00:47:37,836 A:middle
in Pacific Heights
at Tuesday at 3:15.

1115
00:47:39,246 --> 00:47:41,936 A:middle
MapKit, of course, they
have been very busy.

1116
00:47:41,936 --> 00:47:43,856 A:middle
There's a new Directions
API that you'll be able

1117
00:47:43,856 --> 00:47:46,596 A:middle
to take advantage of, 3D
cameras for your maps,

1118
00:47:46,916 --> 00:47:49,386 A:middle
map tile overlays,
snapshots of your maps.

1119
00:47:49,686 --> 00:47:50,876 A:middle
They're working with Geodesics.

1120
00:47:50,876 --> 00:47:52,786 A:middle
You'll be able do all of
these things in your app

1121
00:47:53,276 --> 00:47:57,466 A:middle
for what's new in MapKit
right here Thursday at 9:00.

1122
00:47:57,736 --> 00:48:00,476 A:middle
CoreLocations adopted the new
Bluetooth LE beacons bits,

1123
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1124
00:48:00,476 --> 00:48:02,526 A:middle
so you'll be able to take your
device and actually turn it

1125
00:48:02,526 --> 00:48:05,186 A:middle
into a location-based
beacon where people can find

1126
00:48:05,186 --> 00:48:07,256 A:middle
out how far away
those beacons are.

1127
00:48:07,826 --> 00:48:09,986 A:middle
There are some new region
types or region monitoring

1128
00:48:09,986 --> 00:48:12,706 A:middle
and more control over the region
monitoring you've had before.

1129
00:48:13,176 --> 00:48:15,236 A:middle
What's new in CoreLocation,
of course,

1130
00:48:15,616 --> 00:48:18,026 A:middle
in Presidio, Thursday at 11:30.

1131
00:48:18,796 --> 00:48:20,746 A:middle
Accessibility is a
huge deal for us.

1132
00:48:20,746 --> 00:48:22,996 A:middle
One of the things that
we are really proud

1133
00:48:22,996 --> 00:48:26,526 A:middle
of is making our apps as
accessible as possible for users

1134
00:48:26,526 --> 00:48:27,386 A:middle
who are differently abled.

1135
00:48:28,076 --> 00:48:30,596 A:middle
There's new UI-- there's new
API to be able to participate

1136
00:48:30,596 --> 00:48:31,866 A:middle
in the Guided Access system.

1137
00:48:32,576 --> 00:48:34,956 A:middle
So, Guided Access was a
feature introduced on iOS VI.

1138
00:48:35,496 --> 00:48:38,636 A:middle
Now, your app can actually tell
the Guided Access system what's

1139
00:48:38,636 --> 00:48:39,446 A:middle
available to it.

1140
00:48:39,846 --> 00:48:43,396 A:middle
Accessibility in iOS in Pacific
Heights, Tuesday at 9:00.

1141
00:48:43,396 --> 00:48:46,026 A:middle
If you're doing anything to
make your app more accessible,

1142
00:48:46,026 --> 00:48:48,476 A:middle
please go this talk.

1143
00:48:48,766 --> 00:48:51,226 A:middle
GamesCenter now also has
a new turn-based API,

1144
00:48:51,786 --> 00:48:54,206 A:middle
so you'll be able to
better manage turns

1145
00:48:54,206 --> 00:48:55,236 A:middle
in your application.

1146
00:48:55,236 --> 00:48:57,136 A:middle
There's turns tabs,
modes for bidding.

1147
00:48:57,776 --> 00:49:00,556 A:middle
New leaderboard improvements and
some system integrity features

1148
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1149
00:49:00,556 --> 00:49:02,046 A:middle
to make sure that
nobody is packing max

1150
00:49:02,046 --> 00:49:03,866 A:middle
into your high score
fields anymore.

1151
00:49:04,646 --> 00:49:09,406 A:middle
So What's New in Game Center
in Mission, Wednesday at 3:15.

1152
00:49:10,316 --> 00:49:11,636 A:middle
There are many more talks

1153
00:49:11,636 --> 00:49:13,546 A:middle
and many more a labs
than I can list here.

1154
00:49:13,666 --> 00:49:16,506 A:middle
Please consult your
schedule for that.

1155
00:49:16,506 --> 00:49:18,316 A:middle
If you have any questions
about the technologies

1156
00:49:18,316 --> 00:49:20,676 A:middle
that we've talking about,
you know, John Geleynse

1157
00:49:20,676 --> 00:49:22,936 A:middle
and his team here,
Jake Behrens is

1158
00:49:22,936 --> 00:49:24,606 A:middle
of course the UI
Frameworks Evangelist,

1159
00:49:24,606 --> 00:49:27,276 A:middle
still wearing plaid
every day this week.

1160
00:49:28,376 --> 00:49:33,096 A:middle
And we also have, you know,
all of these fine people.

1161
00:49:34,066 --> 00:49:35,966 A:middle
If you're interested in
games and things like that,

1162
00:49:35,966 --> 00:49:37,566 A:middle
some of these people
are better to talk to.

1163
00:49:37,936 --> 00:49:39,126 A:middle
So, thank you very much.

1164
00:49:39,426 --> 00:49:41,826 A:middle
Come see us in the
labs, take advantage

1165
00:49:41,826 --> 00:49:43,286 A:middle
for everything we've
been talking about.

1166
00:49:43,776 --> 00:49:44,166 A:middle
Thank you.

1167
00:49:44,166 --> 00:49:46,000 A:middle
[applause]

1168
