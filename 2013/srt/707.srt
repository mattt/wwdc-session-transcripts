X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:09,556 A:middle
[ Silence ]

2
00:00:10,056 --> 00:00:10,996 A:middle
>> Jerry Cottingham:
Good Morning.

3
00:00:12,286 --> 00:00:17,006 A:middle
I'm Jerry Cottingham, I'm an
engineer on the Core OS IO team

4
00:00:17,006 --> 00:00:17,876 A:middle
and today we're going to talk

5
00:00:17,876 --> 00:00:19,686 A:middle
about what's new in
Kext Development.

6
00:00:22,336 --> 00:00:24,466 A:middle
So in my part of the
session, I'm going to talk

7
00:00:24,466 --> 00:00:27,596 A:middle
about Kext Development
overview, give you a little bit

8
00:00:27,596 --> 00:00:29,526 A:middle
of overview of the
Kext development.

9
00:00:30,136 --> 00:00:32,946 A:middle
The Developer ID program,
why that's important for you

10
00:00:33,646 --> 00:00:36,236 A:middle
and your attention please, I'm
going to call out some things

11
00:00:36,236 --> 00:00:40,336 A:middle
that are in OS X 10.9 that
you need to be aware about.

12
00:00:42,526 --> 00:00:44,376 A:middle
We're assuming that
the target audience

13
00:00:44,376 --> 00:00:47,646 A:middle
for this is somebody that's
already developing a kext,

14
00:00:48,206 --> 00:00:52,596 A:middle
you think you're about
to develop a kext.

15
00:00:52,596 --> 00:00:55,956 A:middle
And if you're here, you know the
top three reasons why you need

16
00:00:55,956 --> 00:00:58,206 A:middle
to avoid writing a kext
if at all possible.

17
00:00:58,656 --> 00:01:02,046 A:middle
So if you're thinking about
it then here's a couple things

18
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

19
00:01:02,046 --> 00:01:02,836 A:middle
that you need to think

20
00:01:02,836 --> 00:01:05,846 A:middle
about before you get
into writing a kext.

21
00:01:06,566 --> 00:01:09,106 A:middle
Kexts require wired
memory, so all the memory

22
00:01:09,106 --> 00:01:11,476 A:middle
that your kext consumes
is not available

23
00:01:11,476 --> 00:01:15,126 A:middle
for the rest of the system.

24
00:01:15,256 --> 00:01:16,616 A:middle
Mistakes are often fatal,

25
00:01:16,616 --> 00:01:20,046 A:middle
so if you run it writing an
application, you make a mistake,

26
00:01:20,046 --> 00:01:21,256 A:middle
you crash the application.

27
00:01:21,966 --> 00:01:24,976 A:middle
You're writing a kext, you
make a mistake and you crash,

28
00:01:25,086 --> 00:01:27,186 A:middle
you're crashing the whole
system so you affect everybody.

29
00:01:28,876 --> 00:01:29,906 A:middle
Debugging is harder.

30
00:01:29,906 --> 00:01:35,016 A:middle
So today, if you're developing
an application with Xcode,

31
00:01:35,016 --> 00:01:37,516 A:middle
debugging is very
simple, very, very simple.

32
00:01:38,346 --> 00:01:40,836 A:middle
If you're debugging a kext,
you need two machines,

33
00:01:40,836 --> 00:01:41,896 A:middle
you need to setup the machine,

34
00:01:41,896 --> 00:01:43,216 A:middle
you need to configure
it correctly.

35
00:01:43,216 --> 00:01:46,436 A:middle
The problems that you're dealing
with are often much harder

36
00:01:46,486 --> 00:01:49,036 A:middle
to figure out, so
debugging is much harder.

37
00:01:50,876 --> 00:01:54,376 A:middle
So, if you're still not deterred
and you still really think

38
00:01:54,376 --> 00:01:55,666 A:middle
that you need to develop a kext,

39
00:01:56,186 --> 00:01:59,756 A:middle
then if you must there's
two things that you need

40
00:01:59,756 --> 00:02:04,666 A:middle
to read before you even start
writing your first line of code.

41
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

42
00:02:05,226 --> 00:02:07,496 A:middle
The Kernel Extension
Programing Topics

43
00:02:08,395 --> 00:02:12,266 A:middle
and the Kernel Programing
Guide, so make sure you read

44
00:02:12,266 --> 00:02:15,236 A:middle
through those, and if you
still need to develop a kext,

45
00:02:15,816 --> 00:02:18,806 A:middle
make sure you talk to us to
see if there's any other way.

46
00:02:19,736 --> 00:02:23,976 A:middle
And, if you're going
to write a kext,

47
00:02:23,976 --> 00:02:25,576 A:middle
you're mantra should always be,

48
00:02:25,776 --> 00:02:28,156 A:middle
"With great power comes
great responsibility."

49
00:02:28,156 --> 00:02:35,266 A:middle
Now let's quickly go
over a little overview

50
00:02:35,266 --> 00:02:37,586 A:middle
of what kext development
is all about.

51
00:02:38,146 --> 00:02:41,286 A:middle
So a kext is just a bundle
that extends the kernel.

52
00:02:42,436 --> 00:02:44,446 A:middle
Kext stands for:
Kernel Extension,

53
00:02:44,986 --> 00:02:48,676 A:middle
and it's only available
for OS X.

54
00:02:48,676 --> 00:02:51,746 A:middle
So if you're trying
to write a kext

55
00:02:51,746 --> 00:02:53,096 A:middle
for iOS, we don't allow that.

56
00:02:53,096 --> 00:02:57,476 A:middle
And a kext is structured
just like any other CFBundle.

57
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

58
00:03:00,196 --> 00:03:03,156 A:middle
Do you see the binary
down in the OS folder?

59
00:03:03,156 --> 00:03:06,846 A:middle
So here the Apple sample PCI
kext, you're going to see this

60
00:03:06,846 --> 00:03:11,466 A:middle
through all three of our talks
today about kext development.

61
00:03:12,276 --> 00:03:15,356 A:middle
You'll see that the executable
is down in the OS folder.

62
00:03:16,576 --> 00:03:22,096 A:middle
The Info.plist describes all
the properties of your kext

63
00:03:22,096 --> 00:03:24,306 A:middle
and I'm going to call out
two here that we're going

64
00:03:24,306 --> 00:03:26,316 A:middle
to discuss later today.

65
00:03:27,086 --> 00:03:31,896 A:middle
The CFBundleIdentifier, so
that identifies your kext

66
00:03:32,346 --> 00:03:35,276 A:middle
in the whole kext name space,
so that's a unique identifier

67
00:03:35,776 --> 00:03:37,516 A:middle
across the whole system.

68
00:03:38,336 --> 00:03:43,696 A:middle
CFBundleVersion, so that allows
the kext management system

69
00:03:43,696 --> 00:03:45,356 A:middle
to figure out which
of your kexts,

70
00:03:45,356 --> 00:03:48,866 A:middle
if it has the same
bundle ID to load.

71
00:03:49,226 --> 00:03:52,086 A:middle
Now this becomes very
important and today when we talk

72
00:03:52,086 --> 00:03:53,736 A:middle
about some of the other
things that we're changing,

73
00:03:53,996 --> 00:03:57,266 A:middle
that you are bumping that
version number as you go along.

74
00:03:59,766 --> 00:04:03,756 A:middle
Okay, so you're part of the
kernel and part of that means

75
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

76
00:04:03,756 --> 00:04:06,766 A:middle
that you have to buy
into extra protection.

77
00:04:07,256 --> 00:04:11,996 A:middle
So, we require specific
File and Folder permissions.

78
00:04:12,976 --> 00:04:16,196 A:middle
Kexts must be owned by root
and the group must be wheel.

79
00:04:18,466 --> 00:04:23,566 A:middle
Must only be writable by
root, and permissions are deep

80
00:04:23,566 --> 00:04:27,726 A:middle
so this little folder here on
the right shows you if you did

81
00:04:27,776 --> 00:04:31,166 A:middle
like an 'ls -alR' all
permissions all the way

82
00:04:31,166 --> 00:04:32,506 A:middle
through would look like that.

83
00:04:33,036 --> 00:04:35,796 A:middle
If you get any of
those incorrect,

84
00:04:36,236 --> 00:04:37,326 A:middle
your kext will not load.

85
00:04:37,876 --> 00:04:44,596 A:middle
And you can use kextutil
-tn which is test no load

86
00:04:44,886 --> 00:04:48,836 A:middle
to verify your kext as
you're developing it.

87
00:04:48,836 --> 00:04:55,186 A:middle
Okay new in OS X 10.9, we
are now code signing kexts

88
00:04:55,446 --> 00:04:57,816 A:middle
and checking the
signature of your kext.

89
00:04:58,276 --> 00:05:04,096 A:middle
In OS 10.9 all kext
signatures are verified.

90
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

91
00:05:06,486 --> 00:05:09,806 A:middle
Unsigned or invalid
signatures are not fatal

92
00:05:09,896 --> 00:05:11,446 A:middle
with just one exception
and I'll talk

93
00:05:11,446 --> 00:05:13,546 A:middle
about that exception
in just a little bit.

94
00:05:15,616 --> 00:05:21,616 A:middle
So if you sign a kext in
10.9 and try to run it

95
00:05:21,906 --> 00:05:26,476 A:middle
on earlier versions, newer
than 10.8, it will not load,

96
00:05:26,476 --> 00:05:29,746 A:middle
there was some code signing
machinery changes in there

97
00:05:29,746 --> 00:05:32,206 A:middle
that will not allow those to
load, so just keep that in mind.

98
00:05:34,126 --> 00:05:37,266 A:middle
Valid code signatures will
eventually be mandatory

99
00:05:37,266 --> 00:05:38,586 A:middle
on all kexts.

100
00:05:38,866 --> 00:05:42,006 A:middle
So now in 10.9, there's
only one place its mandatory

101
00:05:42,306 --> 00:05:46,656 A:middle
and I'll talk about that, but
be prepared, be proactive.

102
00:05:46,656 --> 00:05:50,316 A:middle
Let's get your kexts signed and
you'll be ready for the future.

103
00:05:50,936 --> 00:05:54,246 A:middle
And again, kextutil -tn is good

104
00:05:54,246 --> 00:05:56,236 A:middle
for testing your
code signatures.

105
00:05:56,236 --> 00:05:59,166 A:middle
Now I have to mention in the
seed that you have today,

106
00:05:59,666 --> 00:06:02,436 A:middle
I didn't quite get around
to getting that working,

107
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

108
00:06:02,436 --> 00:06:06,146 A:middle
so it's fixed in the next
seed they will actually test,

109
00:06:06,146 --> 00:06:09,266 A:middle
so you can just try a kext
load to verify your signature.

110
00:06:11,066 --> 00:06:13,786 A:middle
Okay so now I want to talk
a little about kext loading.

111
00:06:13,786 --> 00:06:16,266 A:middle
So there's three types of loads
here I want to talk about.

112
00:06:16,266 --> 00:06:20,916 A:middle
Autoload. So autoload is
basically your IOKit KEXT

113
00:06:21,366 --> 00:06:24,286 A:middle
when it matches hardware that's
attached to your machine,

114
00:06:24,556 --> 00:06:27,256 A:middle
the kext machinery goes
through, matches the best driver

115
00:06:27,256 --> 00:06:29,176 A:middle
for that, and loads it for you.

116
00:06:30,076 --> 00:06:33,266 A:middle
Now, where we find
those kexts now is

117
00:06:33,266 --> 00:06:36,966 A:middle
in /System/Library/Extensions.

118
00:06:36,966 --> 00:06:39,826 A:middle
So on-demand loading
of kexts, so you can do

119
00:06:39,826 --> 00:06:43,326 A:middle
that by an explicit path,
so here we're using kextload

120
00:06:43,326 --> 00:06:45,866 A:middle
with our Apple sample PCI kext.

121
00:06:46,116 --> 00:06:48,156 A:middle
So I just give it
a specific path.

122
00:06:48,556 --> 00:06:51,316 A:middle
You can also use your
CFBundleIdentifier.

123
00:06:51,576 --> 00:06:57,126 A:middle
So here is kextload -b with a
big, long bundle ID that we have

124
00:06:57,126 --> 00:07:01,246 A:middle
for our sample kext, and again,
if you supply nothing else

125
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

126
00:07:01,246 --> 00:07:04,336 A:middle
to kextload, we'll go
search for that bundle ID

127
00:07:04,336 --> 00:07:06,136 A:middle
in System/Library/Extensions.

128
00:07:06,536 --> 00:07:11,176 A:middle
And the other place that
your kext gets loaded is

129
00:07:11,176 --> 00:07:12,326 A:middle
from the kernel cache.

130
00:07:12,636 --> 00:07:16,696 A:middle
So the kernel cache is built to
speed up the boot of the system

131
00:07:17,056 --> 00:07:19,686 A:middle
and in there is anything
that is required for booting,

132
00:07:19,686 --> 00:07:21,806 A:middle
for rooting, anything that needs

133
00:07:21,806 --> 00:07:25,046 A:middle
to be loaded early can be
put in the kernel cache.

134
00:07:25,376 --> 00:07:28,946 A:middle
And again, when we
build that, by default,

135
00:07:28,946 --> 00:07:32,866 A:middle
we'll look for those kexts out
of System/Library/Extensions.

136
00:07:33,856 --> 00:07:34,926 A:middle
So you see a pattern there

137
00:07:34,926 --> 00:07:37,516 A:middle
that /System/Library/Extensions
is very important

138
00:07:37,516 --> 00:07:40,326 A:middle
for us finding kexts
automatically.

139
00:07:42,136 --> 00:07:47,186 A:middle
Okay now in 10.9, autoload,
on-demand load by bundle ID

140
00:07:47,516 --> 00:07:50,606 A:middle
and kernel cache builds
will look not only

141
00:07:50,606 --> 00:07:54,296 A:middle
in /System/Library/Extensions,
but also /Library/Extensions.

142
00:07:55,006 --> 00:07:57,616 A:middle
So, and again, if you touch,

143
00:07:57,616 --> 00:08:00,996 A:middle
the /System/Library/Extensions
we will automatically rebuild

144
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

145
00:08:00,996 --> 00:08:01,456 A:middle
the kernel cache.

146
00:08:01,456 --> 00:08:04,426 A:middle
/Library/Extensions is the
same thing except, again,

147
00:08:04,426 --> 00:08:05,466 A:middle
the seed that you have,

148
00:08:06,836 --> 00:08:08,766 A:middle
that will not work
until the next seed.

149
00:08:08,766 --> 00:08:11,076 A:middle
We have a fix that
I just put in.

150
00:08:12,226 --> 00:08:15,576 A:middle
Okay, and you must sign
your kext if you're going

151
00:08:15,576 --> 00:08:17,836 A:middle
to deploy them in
/Library/Extensions.

152
00:08:17,986 --> 00:08:20,076 A:middle
So this is the exception I
was talking about earlier.

153
00:08:20,526 --> 00:08:27,076 A:middle
So, if it's not signed, we
will not load it from there.

154
00:08:27,276 --> 00:08:29,596 A:middle
Okay. So we've done
some research to find

155
00:08:29,596 --> 00:08:33,476 A:middle
out where your kext is
already installed recently.

156
00:08:33,476 --> 00:08:35,936 A:middle
Of course,
/System/Library/Extensions

157
00:08:35,936 --> 00:08:38,966 A:middle
and those are needed for
autoload or autosearch.

158
00:08:39,655 --> 00:08:43,186 A:middle
/Library/Application
Support, that's a fine place,

159
00:08:43,186 --> 00:08:44,306 A:middle
and that's where you guys are.

160
00:08:44,306 --> 00:08:46,976 A:middle
/System/Library/Extensions/File
Systems,

161
00:08:46,976 --> 00:08:49,686 A:middle
that's where mainly our
file system kexts are.

162
00:08:50,546 --> 00:08:54,016 A:middle
/Library/File Systems are
your File System kexts.

163
00:08:54,886 --> 00:09:00,596 A:middle
Library startup items, in
the application folder,

164
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

165
00:09:00,636 --> 00:09:04,406 A:middle
inside your app bundles,
that's a perfectly good place

166
00:09:04,406 --> 00:09:07,146 A:middle
for your kexts and
/Library/Extensions.

167
00:09:07,316 --> 00:09:10,036 A:middle
Again, it did not support
autosearch or autoload.

168
00:09:10,576 --> 00:09:17,436 A:middle
In OS 10.9, same setup, these
are all perfectly fine places

169
00:09:17,436 --> 00:09:20,166 A:middle
and now we have the
autoload and autosearch

170
00:09:20,166 --> 00:09:23,416 A:middle
in /Library/Extensions and,
again, the caveat there is

171
00:09:23,416 --> 00:09:27,186 A:middle
that they must be signed.

172
00:09:27,386 --> 00:09:30,926 A:middle
Okay where we want
your kexts installed.

173
00:09:31,826 --> 00:09:35,966 A:middle
So the autoload kext that
required rooting, booting,

174
00:09:36,136 --> 00:09:39,106 A:middle
early, you know, early
load from the kernel cache

175
00:09:39,536 --> 00:09:43,326 A:middle
and autosearching of
kexts, again, we want those

176
00:09:43,326 --> 00:09:45,576 A:middle
in /Library/Extensions
and they must be signed.

177
00:09:46,086 --> 00:09:50,566 A:middle
/System/Library/Extensions
for compatibility.

178
00:09:50,566 --> 00:09:53,296 A:middle
So if you have shipping kexts
out there, which you already do,

179
00:09:53,616 --> 00:09:56,516 A:middle
it's fine to leave those in
/System/Library/Extensions.

180
00:09:56,566 --> 00:09:58,656 A:middle
As you revise and start
signing your kexts,

181
00:09:58,846 --> 00:10:00,576 A:middle
move them to
/Library/Extensions,

182
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

183
00:10:01,146 --> 00:10:05,866 A:middle
and anything on 10.8 and
earlier, the unsigned kexts,

184
00:10:06,096 --> 00:10:08,516 A:middle
leave them in
/System/Library/Extensions,

185
00:10:09,246 --> 00:10:11,396 A:middle
that's fine, all other
kexts though, any other kext

186
00:10:11,396 --> 00:10:12,886 A:middle
that doesn't need
to be autoloaded

187
00:10:13,226 --> 00:10:16,076 A:middle
or automatically
found by the system.

188
00:10:16,576 --> 00:10:20,406 A:middle
Signed kexts can go into
/Library/Extensions,

189
00:10:20,406 --> 00:10:23,916 A:middle
so just because we autosearch
and autoload from there,

190
00:10:24,236 --> 00:10:26,886 A:middle
if you sign your kext, it's
still fine to put it in there.

191
00:10:26,886 --> 00:10:28,886 A:middle
Even if you don't
need to be autoloaded.

192
00:10:31,036 --> 00:10:32,886 A:middle
Do not install anywhere
in /System.

193
00:10:34,116 --> 00:10:36,876 A:middle
So in the future, we are
going to tighten down access

194
00:10:37,046 --> 00:10:41,216 A:middle
to the system hierarchy,
the whole hierarchy

195
00:10:41,216 --> 00:10:44,526 A:middle
down from /System and
everything in there.

196
00:10:45,496 --> 00:10:49,606 A:middle
So, be proactive and stay out of
there because changes are coming

197
00:10:49,606 --> 00:10:53,306 A:middle
that will require
that you not be there.

198
00:10:54,086 --> 00:10:56,986 A:middle
So all the other common
locations that I talked about,

199
00:10:56,986 --> 00:11:01,506 A:middle
applications in your application
bundle, all those are fine.

200
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

201
00:11:01,706 --> 00:11:07,446 A:middle
So, you may need to have
two kexts for compatibility

202
00:11:07,556 --> 00:11:09,926 A:middle
and in a little bit we'll
show you actually how

203
00:11:09,926 --> 00:11:11,246 A:middle
to build those kexts, sign them,

204
00:11:11,246 --> 00:11:14,686 A:middle
and deploy them across
multiple OS's.

205
00:11:16,366 --> 00:11:20,396 A:middle
Okay. So, we're talking
about signing your kexts,

206
00:11:20,396 --> 00:11:21,496 A:middle
so how do you go about that?

207
00:11:21,856 --> 00:11:25,446 A:middle
The Developer ID
Program is your mechanism

208
00:11:25,446 --> 00:11:26,746 A:middle
to get your kext signed.

209
00:11:26,746 --> 00:11:27,626 A:middle
So what is this?

210
00:11:28,226 --> 00:11:29,936 A:middle
Its part of the Mac
Development Program,

211
00:11:30,016 --> 00:11:32,306 A:middle
which you're probably
already a member of.

212
00:11:32,886 --> 00:11:34,796 A:middle
It allows distribution

213
00:11:34,796 --> 00:11:37,616 A:middle
of applications outside
of the Mac App Store.

214
00:11:38,306 --> 00:11:40,896 A:middle
So a kext is not
going to be delivered

215
00:11:40,896 --> 00:11:41,976 A:middle
through the Mac App Store,

216
00:11:41,976 --> 00:11:44,606 A:middle
so this is actually a
great place for you guys.

217
00:11:45,456 --> 00:11:48,276 A:middle
And then you get a special
Developer ID Certificate

218
00:11:48,576 --> 00:11:54,406 A:middle
for signing your applications
and now in OS 10.9 you're going

219
00:11:54,406 --> 00:11:58,166 A:middle
to get a new certificate for
signing applications and kexts.

220
00:11:58,616 --> 00:12:04,176 A:middle
So how do you go about getting
this Developer ID Certificate?

221
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

222
00:12:05,406 --> 00:12:06,106 A:middle
Very simple.

223
00:12:06,466 --> 00:12:09,086 A:middle
So you go up to
developer.apple.com,

224
00:12:10,386 --> 00:12:13,496 A:middle
Resources/Developer ID,
you click on the link

225
00:12:13,496 --> 00:12:15,996 A:middle
to request a Developer
ID Certificate,

226
00:12:18,086 --> 00:12:22,096 A:middle
you fill out the form, and then
once the form is approved you'll

227
00:12:22,096 --> 00:12:24,486 A:middle
go back to the Member Center

228
00:12:24,896 --> 00:12:28,546 A:middle
and in
Certificate/Identifier/Profiles

229
00:12:29,246 --> 00:12:31,466 A:middle
you will see this.

230
00:12:32,386 --> 00:12:33,896 A:middle
This should be active
right now, by the way,

231
00:12:33,896 --> 00:12:35,016 A:middle
so you should be able to go up

232
00:12:35,046 --> 00:12:37,176 A:middle
and get your certificate
right now,

233
00:12:37,356 --> 00:12:39,376 A:middle
so click on the Developer
ID Application

234
00:12:39,376 --> 00:12:43,126 A:middle
and kernel extensions,
and you're ready to go.

235
00:12:43,836 --> 00:12:45,866 A:middle
So for more information
you can go back

236
00:12:45,866 --> 00:12:49,376 A:middle
up to developer.apple.com
and then, also,

237
00:12:49,376 --> 00:12:54,906 A:middle
Session 702 from last
year's WWDC, Perry talked

238
00:12:54,906 --> 00:12:57,416 A:middle
about Gatekeeper and
Developer ID, so he talked

239
00:12:57,416 --> 00:12:59,386 A:middle
about the Developer
ID Program last year

240
00:12:59,926 --> 00:13:01,676 A:middle
in context for applications.

241
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

242
00:13:02,376 --> 00:13:06,106 A:middle
All that stuff he talked about
in that session, he gives a lot

243
00:13:06,106 --> 00:13:07,486 A:middle
of information about
code signing,

244
00:13:07,486 --> 00:13:09,146 A:middle
is applicable to you guys too.

245
00:13:09,416 --> 00:13:12,316 A:middle
So go back and look at
that, there's a great deal

246
00:13:12,316 --> 00:13:14,046 A:middle
of information there for you.

247
00:13:15,266 --> 00:13:22,036 A:middle
Okay. So in the seed that
you have now, in 10.9,

248
00:13:22,636 --> 00:13:24,546 A:middle
I want to call out some
things that are going

249
00:13:24,546 --> 00:13:27,116 A:middle
to affect you and our customers.

250
00:13:27,736 --> 00:13:31,146 A:middle
The first thing, as I said
before, /Library/Extensions,

251
00:13:31,246 --> 00:13:33,676 A:middle
kexts in /Library/Extensions
will not load

252
00:13:33,986 --> 00:13:37,226 A:middle
if they're unsigned or if
the signature's invalid.

253
00:13:39,136 --> 00:13:43,716 A:middle
So what this means is that
the user will see this no load

254
00:13:44,176 --> 00:13:45,526 A:middle
alert dialogue.

255
00:13:46,676 --> 00:13:51,276 A:middle
Basically, it says the kext is
not going to load and the part

256
00:13:51,276 --> 00:13:53,416 A:middle
that affects you is that
very last line in there

257
00:13:53,416 --> 00:13:57,266 A:middle
that says contact the Developer
to get updated software.

258
00:13:59,296 --> 00:14:02,616 A:middle
There's a second alert
that will come out.

259
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

260
00:14:03,166 --> 00:14:07,666 A:middle
Anything that is a kext outside
of /Library/Extensions will load

261
00:14:08,046 --> 00:14:13,046 A:middle
if it's unsigned or if it has
a signature validation problem,

262
00:14:14,856 --> 00:14:17,016 A:middle
but the user will
see another alert.

263
00:14:17,186 --> 00:14:20,506 A:middle
In that particular case, it
will say that yes we're going

264
00:14:20,506 --> 00:14:23,856 A:middle
to load it, but please
contact the vendor

265
00:14:23,856 --> 00:14:30,716 A:middle
to get an updated
version on this.

266
00:14:30,926 --> 00:14:34,986 A:middle
Also, what you guys will see as
you develop your kext and some

267
00:14:34,986 --> 00:14:36,686 A:middle
of your customers might
contact you and say, "Hey,

268
00:14:36,686 --> 00:14:41,476 A:middle
I saw this thing in the System
Log," so there's some warnings

269
00:14:41,476 --> 00:14:43,686 A:middle
and error messages, so
the warnings would be

270
00:14:44,046 --> 00:14:47,036 A:middle
if it's actually going to load
the kext, but it has some kind

271
00:14:47,036 --> 00:14:51,476 A:middle
of problem in verification,
and the error messages are

272
00:14:51,476 --> 00:14:52,456 A:middle
when you get that alert

273
00:14:52,456 --> 00:14:56,036 A:middle
that says I'm not going
to load it at all.

274
00:14:56,096 --> 00:15:00,146 A:middle
So the most common code
signature error codes

275
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

276
00:15:00,146 --> 00:15:04,086 A:middle
that you're going to
see is the -67030,

277
00:15:04,236 --> 00:15:07,416 A:middle
which means that something in
the bundle has been modified.

278
00:15:07,946 --> 00:15:12,126 A:middle
Something that, the kext
signature is no longer valid,

279
00:15:12,126 --> 00:15:16,146 A:middle
so if somebody went in and
messed with your Info.plist,

280
00:15:16,606 --> 00:15:17,876 A:middle
then you're going
to get this error.

281
00:15:19,146 --> 00:15:25,156 A:middle
The other one is -67062, which
is the kext is not code signed,

282
00:15:25,156 --> 00:15:27,926 A:middle
which means there's no
signature at all on this kext.

283
00:15:30,346 --> 00:15:34,216 A:middle
So there's all kinds of error
codes in the security framework

284
00:15:34,216 --> 00:15:37,796 A:middle
and you can go to the
cs.h and see all those.

285
00:15:38,796 --> 00:15:43,956 A:middle
So here's an example of when I
took the Apple sample PCI.kext,

286
00:15:44,686 --> 00:15:50,676 A:middle
built it, had it signed, then
I went into the Info.plist file

287
00:15:50,676 --> 00:15:52,926 A:middle
and changed just
a line in there,

288
00:15:53,786 --> 00:15:55,246 A:middle
and then I tried
to load the kext.

289
00:15:55,246 --> 00:15:58,356 A:middle
And so this is exactly
what you're going to see

290
00:15:58,356 --> 00:15:59,396 A:middle
in that particular case.

291
00:15:59,516 --> 00:16:03,106 A:middle
So this is an example of
a modified Info.plist,

292
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

293
00:16:03,396 --> 00:16:04,776 A:middle
invalidates the signature,

294
00:16:04,776 --> 00:16:08,306 A:middle
and this is the message
that you'll get.

295
00:16:08,496 --> 00:16:14,896 A:middle
Okay, in summary, sign your
kext with your Developer ID,

296
00:16:14,896 --> 00:16:16,106 A:middle
it's very simple and easy,

297
00:16:17,406 --> 00:16:19,646 A:middle
get out of
/System/Library/Extensions

298
00:16:19,866 --> 00:16:25,536 A:middle
as quickly as possible, in fact,
all of /System, and if you think

299
00:16:25,536 --> 00:16:29,116 A:middle
that you need to be in /System
for some reason anywhere down in

300
00:16:29,116 --> 00:16:31,996 A:middle
that hierarchy anywhere, please
talk to us and let us know

301
00:16:31,996 --> 00:16:34,306 A:middle
so we can provide
alternatives to that.

302
00:16:34,816 --> 00:16:41,006 A:middle
And get your kexts into
/Library/Extensions.

303
00:16:41,006 --> 00:16:42,756 A:middle
Okay, now Dean Reece
is going to come up

304
00:16:42,986 --> 00:16:45,396 A:middle
and actually show you how to
build your kext, get it signed,

305
00:16:45,396 --> 00:16:47,936 A:middle
and deployed across
many versions of the OS.

306
00:16:47,936 --> 00:16:49,226 A:middle
[ Applause ]

307
00:16:49,226 --> 00:16:49,426 A:middle
>> Dean Reece:Hi.

308
00:16:54,656 --> 00:16:56,276 A:middle
Thanks for joining us today.

309
00:16:56,476 --> 00:16:59,146 A:middle
My name is Dean Reece and
I manage the IOKit Team

310
00:16:59,146 --> 00:17:01,486 A:middle
in Core OS, and I'm
just going to run

311
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

312
00:17:01,486 --> 00:17:04,366 A:middle
through a couple examples
real quick.Let's get started

313
00:17:05,215 --> 00:17:08,506 A:middle
with the most basic
project here just to kind

314
00:17:08,506 --> 00:17:10,415 A:middle
of set a base to start from.

315
00:17:10,836 --> 00:17:13,526 A:middle
We're going to build a kext that
follows the new signing rules

316
00:17:13,526 --> 00:17:15,455 A:middle
and installation
paths and only loads

317
00:17:15,455 --> 00:17:23,906 A:middle
on OS X 10.9.So you're going to
need to use at least OS X 10.8.3

318
00:17:23,906 --> 00:17:26,606 A:middle
as your minimum build
for the build machine

319
00:17:26,945 --> 00:17:29,036 A:middle
and this is necessary to
get correct code signing.

320
00:17:29,036 --> 00:17:32,616 A:middle
It was a change to the security
framework that's available

321
00:17:32,676 --> 00:17:34,976 A:middle
in that build and
later OS releases.

322
00:17:36,106 --> 00:17:39,306 A:middle
You're also going to need
to use Xcode 4.6 or later,

323
00:17:39,436 --> 00:17:41,836 A:middle
and for these examples
I'm showing you Xcode 5

324
00:17:41,916 --> 00:17:42,636 A:middle
which is preferred.

325
00:17:43,256 --> 00:17:46,186 A:middle
And as Jerry described,
you're going to need

326
00:17:46,186 --> 00:17:48,626 A:middle
that Developer ID
Certificate that allows you

327
00:17:48,626 --> 00:17:51,876 A:middle
to sign kernel extensions,
and you're going to install

328
00:17:51,876 --> 00:17:56,026 A:middle
that on your keychain so
Xcode can get to it.Okay,

329
00:17:56,026 --> 00:17:59,266 A:middle
so you create a new Xcode
project and there's two flavors

330
00:17:59,266 --> 00:18:02,766 A:middle
of kernel extensions: The
"Generic Kernel Extension",

331
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

332
00:18:02,766 --> 00:18:05,366 A:middle
which is typically used for File
Systems and network plug-ins.

333
00:18:05,786 --> 00:18:07,816 A:middle
An "IOKit Driver",
which is typically used

334
00:18:07,816 --> 00:18:12,626 A:middle
for autoload hardware
drivers.And you'll go

335
00:18:12,626 --> 00:18:15,156 A:middle
through the normal creation
process so we'll give it a name,

336
00:18:15,156 --> 00:18:19,966 A:middle
a unique bundle identifier,
and you have a project ready

337
00:18:19,966 --> 00:18:22,066 A:middle
to start putting code into.So,

338
00:18:22,306 --> 00:18:24,716 A:middle
we're going to set a
few properties and most

339
00:18:24,716 --> 00:18:26,566 A:middle
of these are going to default
this way, but a couple won't

340
00:18:26,566 --> 00:18:30,306 A:middle
so we'll walk through those
very quickly.Make sure

341
00:18:30,306 --> 00:18:32,506 A:middle
"Architectures" is set to
"Standard Architectures".

342
00:18:32,506 --> 00:18:39,026 A:middle
You only need to building for
64-bit Intel on OS X 10.9.

343
00:18:39,396 --> 00:18:40,936 A:middle
And also make sure
the "Base SDK" is set

344
00:18:40,936 --> 00:18:48,296 A:middle
to "Latest OS X (OS X
10.9)".Under Code Signing,

345
00:18:48,296 --> 00:18:51,086 A:middle
this is new for kernel
extensions, so you're going

346
00:18:51,086 --> 00:18:52,936 A:middle
to want to change the
"Code Signing Identity"

347
00:18:53,006 --> 00:18:54,426 A:middle
to your Developer ID Certificate

348
00:18:54,596 --> 00:18:55,916 A:middle
that you've installed
on your keychain.

349
00:18:55,916 --> 00:18:58,456 A:middle
You can set it to this setting

350
00:18:58,456 --> 00:19:00,196 A:middle
which would match
any Developer ID.

351
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

352
00:19:00,196 --> 00:19:03,056 A:middle
If you have multiple
Developer ID Certificates,

353
00:19:03,126 --> 00:19:05,916 A:middle
then you might have to pick the
specific one that is authorized

354
00:19:05,916 --> 00:19:11,456 A:middle
for signing kernel extensions.In
the deployment section,

355
00:19:11,826 --> 00:19:13,336 A:middle
another change here,
you're going

356
00:19:13,336 --> 00:19:14,946 A:middle
to have change the
installation directory.

357
00:19:14,946 --> 00:19:17,416 A:middle
It will default to
/System/Library/Extensions,

358
00:19:17,416 --> 00:19:18,796 A:middle
and of course as we said,

359
00:19:18,796 --> 00:19:21,576 A:middle
that is now /Library/Extensions
for OS X 10.9.

360
00:19:22,126 --> 00:19:29,336 A:middle
And the deployment target should
match.We're not going to go

361
00:19:29,936 --> 00:19:32,226 A:middle
into the actual coding
of the kernel extension,

362
00:19:32,226 --> 00:19:33,816 A:middle
that's outside the
scope of this talk,

363
00:19:33,816 --> 00:19:35,306 A:middle
but there's a few quick
reminders that I wanted

364
00:19:35,306 --> 00:19:38,106 A:middle
to give you.When you're
developing a kernel extension,

365
00:19:38,296 --> 00:19:40,446 A:middle
you may only use
headers that you find

366
00:19:40,446 --> 00:19:41,546 A:middle
in the Kernel.framework.

367
00:19:41,956 --> 00:19:44,866 A:middle
The Kernel.framework is intended
for use by kernel extensions

368
00:19:45,456 --> 00:19:48,216 A:middle
and conversely, it cannot
be used by applications.

369
00:19:48,576 --> 00:19:51,036 A:middle
So all the other frameworks
are for applications,

370
00:19:51,746 --> 00:19:56,996 A:middle
Kernel.framework is for kexts.If
you're writing an autoload kext

371
00:19:56,996 --> 00:20:00,406 A:middle
or IOKit kext and you
happen to subclass OSObject

372
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

373
00:20:00,406 --> 00:20:02,336 A:middle
or any class that's
derived from it,

374
00:20:02,336 --> 00:20:05,996 A:middle
which all the IOKit classes are,
then you must use the OSDeclare

375
00:20:05,996 --> 00:20:08,366 A:middle
and OSDefine macros
that you'll find

376
00:20:08,366 --> 00:20:10,446 A:middle
in the OSMetaClass.h header.

377
00:20:10,916 --> 00:20:13,176 A:middle
This is important for
our binary compatibility.

378
00:20:14,186 --> 00:20:18,126 A:middle
This includes additional symbols
that our run-time system picks

379
00:20:18,126 --> 00:20:20,366 A:middle
up and uses so that we
can patch up your kext

380
00:20:20,366 --> 00:20:21,666 A:middle
and make it binary compatible

381
00:20:22,056 --> 00:20:23,496 A:middle
with whatever OS
you're loading it on.

382
00:20:23,916 --> 00:20:28,686 A:middle
So, for example, if you build a
kernel extension using the OS X

383
00:20:28,686 --> 00:20:32,596 A:middle
10.8 SDK and you fail
to use these macros,

384
00:20:33,166 --> 00:20:36,456 A:middle
that kext will only ever load
on OS X 10.8; it won't load

385
00:20:36,456 --> 00:20:43,456 A:middle
on OS X 10.9, you'll get symbol
errors.And the last thing,

386
00:20:43,676 --> 00:20:47,456 A:middle
is you need to not strip those
binary compatibility symbols

387
00:20:47,456 --> 00:20:48,956 A:middle
out of the binary.

388
00:20:48,956 --> 00:20:50,796 A:middle
You can use "strip -S -x".

389
00:20:50,976 --> 00:20:54,656 A:middle
That's safe for stripping
a kernel extension binary,

390
00:20:55,116 --> 00:20:57,696 A:middle
but anything more restrictive
might rip out those symbols

391
00:20:57,696 --> 00:21:05,176 A:middle
that we need.The project we
just described builds one kext.

392
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

393
00:21:05,906 --> 00:21:10,086 A:middle
It will load on OS X 10.9
with no errors or warnings

394
00:21:11,016 --> 00:21:12,966 A:middle
and you're going to
debug it using lldb.

395
00:21:12,966 --> 00:21:16,666 A:middle
In a few minutes Brian's going
to join us and describe how

396
00:21:16,666 --> 00:21:20,586 A:middle
to do that, but you'll need
to be running OS X 10.9

397
00:21:20,586 --> 00:21:24,346 A:middle
on both the target system
and your host system

398
00:21:24,346 --> 00:21:29,716 A:middle
for that lldb connection.And
of course after you package it,

399
00:21:29,986 --> 00:21:33,196 A:middle
part of your Q.A. process
should be to verify

400
00:21:33,196 --> 00:21:35,426 A:middle
that it is installing
in Library/Extensions.

401
00:21:35,546 --> 00:21:37,756 A:middle
I think that might
have come up once

402
00:21:37,846 --> 00:21:43,526 A:middle
or twice.Now let's expand
this project a little bit

403
00:21:43,576 --> 00:21:46,136 A:middle
and we're going to add
support for OS X 10.8.

404
00:21:47,186 --> 00:21:49,186 A:middle
To do that, we're going
to create a new target,

405
00:21:50,066 --> 00:21:52,686 A:middle
and we'll have visit those
same settings that we talked

406
00:21:52,686 --> 00:21:56,416 A:middle
about before.But
before we do that,

407
00:21:56,536 --> 00:21:59,296 A:middle
we're going to check
our version numbers.

408
00:21:59,796 --> 00:22:01,826 A:middle
Now, this is very
important; this calls back

409
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

410
00:22:01,826 --> 00:22:03,186 A:middle
to what Jerry told you earlier.

411
00:22:03,186 --> 00:22:06,776 A:middle
If you have multiple copies
of your kexts installed

412
00:22:06,776 --> 00:22:09,326 A:middle
on the system, and the system
encounters both of them,

413
00:22:09,326 --> 00:22:13,266 A:middle
it's going to pick the one with
the highest version number.

414
00:22:13,266 --> 00:22:15,396 A:middle
Because of the way that
this project is going

415
00:22:15,396 --> 00:22:18,356 A:middle
to install its kexts,
we're going to say

416
00:22:18,356 --> 00:22:21,866 A:middle
that the target intended for
Mavericks, for OS X 10.9,

417
00:22:22,256 --> 00:22:23,846 A:middle
will have a higher
version number.

418
00:22:24,396 --> 00:22:27,216 A:middle
And that the one intended

419
00:22:27,216 --> 00:22:30,006 A:middle
for OS X 10.8 will have
the lower version number.

420
00:22:31,046 --> 00:22:36,326 A:middle
The reason this works is
because the newer kext is going

421
00:22:36,326 --> 00:22:38,226 A:middle
to be installed in
/Library/Extensions,

422
00:22:38,336 --> 00:22:41,146 A:middle
and older OS's don't look there
so they won't see it by default,

423
00:22:41,726 --> 00:22:43,056 A:middle
they won't know about
the newer version

424
00:22:43,056 --> 00:22:43,796 A:middle
and they'll just ignore it.

425
00:22:45,176 --> 00:22:49,566 A:middle
Whereas Mavericks will see
the newer one and load it

426
00:22:51,496 --> 00:22:53,576 A:middle
by preference.Okay, so let's go

427
00:22:53,576 --> 00:22:55,366 A:middle
and visit those same
build settings we talked

428
00:22:55,366 --> 00:22:56,356 A:middle
about last time through.

429
00:22:57,056 --> 00:23:01,136 A:middle
Your new OS X 10.8
target is going

430
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

431
00:23:01,136 --> 00:23:04,126 A:middle
to have the same
architecture setting,

432
00:23:04,126 --> 00:23:05,746 A:middle
again you only need
64-bit Intel there,

433
00:23:06,066 --> 00:23:09,886 A:middle
but your "Base SDK" will be
"OS X 10.8" in this case.And

434
00:23:10,776 --> 00:23:12,486 A:middle
of course "Code Signing
Identity" will default

435
00:23:12,486 --> 00:23:14,986 A:middle
to "Don't Code Sign", but you
should verify that is the case,

436
00:23:15,036 --> 00:23:19,426 A:middle
because you don't
want it signed.And the

437
00:23:19,666 --> 00:23:22,326 A:middle
"Installation Directory"
in this case will need

438
00:23:22,326 --> 00:23:27,376 A:middle
to be
/System/Library/Extensions,

439
00:23:27,376 --> 00:23:29,516 A:middle
and the "OS X Deployment
Target" needs

440
00:23:31,876 --> 00:23:33,566 A:middle
to match the SDK.This
project now builds two

441
00:23:33,566 --> 00:23:34,476 A:middle
kernel extensions.

442
00:23:35,186 --> 00:23:36,876 A:middle
The signed one is
exactly the same

443
00:23:36,876 --> 00:23:38,376 A:middle
as the one we built
in the first example.

444
00:23:38,956 --> 00:23:41,896 A:middle
And the unsigned kext
that is being built

445
00:23:41,896 --> 00:23:45,896 A:middle
by the new target will load
on OS X 10.8.Now you're going

446
00:23:45,896 --> 00:23:49,026 A:middle
to use gdb to debug that one.

447
00:23:49,026 --> 00:23:52,246 A:middle
That's the divide
between 10.8 and 10.9:

448
00:23:52,596 --> 00:23:54,456 A:middle
10.8 and earlier is gdb,

449
00:23:54,806 --> 00:23:58,206 A:middle
10.9 and later is lldb.And
you're going to verify

450
00:23:58,206 --> 00:23:59,136 A:middle
that that did, in fact,

451
00:23:59,136 --> 00:23:59,306 A:middle
go

452
00:23:59,306 --> 00:24:05,026 A:middle
to
/System/Library/Extensions.Since

453
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

454
00:24:05,026 --> 00:24:06,986 A:middle
you'll be installing
two kernel extensions,

455
00:24:07,256 --> 00:24:12,086 A:middle
it might be a good idea if you
were to look at the target OS

456
00:24:12,086 --> 00:24:15,366 A:middle
in your install scripts, see
what OS you're installing into

457
00:24:15,366 --> 00:24:17,986 A:middle
and avoid installing the legacy
kext if you're installing

458
00:24:17,986 --> 00:24:21,666 A:middle
onto a Maverick system, because
it will never need it.And

459
00:24:21,666 --> 00:24:24,586 A:middle
another warning I'll throw
out here is in the future

460
00:24:24,586 --> 00:24:27,326 A:middle
as we start to lock
down the /System folder,

461
00:24:27,676 --> 00:24:29,216 A:middle
you might actually
get write errors.

462
00:24:29,306 --> 00:24:31,136 A:middle
So when you try to
install a kernel extension

463
00:24:31,136 --> 00:24:35,236 A:middle
into the /System folder,
the write itself may fail.

464
00:24:35,336 --> 00:24:37,676 A:middle
Your installer script needs
to be smart enough to know

465
00:24:37,676 --> 00:24:40,826 A:middle
if it tries to write something
there, as long as the one

466
00:24:40,826 --> 00:24:41,296 A:middle
that went

467
00:24:41,296 --> 00:24:43,286 A:middle
into /Library/Extensions
made it okay,

468
00:24:43,286 --> 00:24:50,566 A:middle
that's good enough.Alright.So
let's expand one more OS

469
00:24:50,566 --> 00:24:51,176 A:middle
release back.

470
00:24:51,176 --> 00:24:52,156 A:middle
In this case we're going

471
00:24:52,156 --> 00:24:56,256 A:middle
to modify the project we
just created for OS X 10.7,

472
00:24:56,656 --> 00:25:01,306 A:middle
but one difference is we're
going to use Xcode 4.6.

473
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

474
00:25:01,586 --> 00:25:03,956 A:middle
You can't use Xcode 5 for this

475
00:25:03,956 --> 00:25:13,636 A:middle
because Xcode 5 doesn't
have the 10.7 SDK.As before,

476
00:25:13,636 --> 00:25:15,426 A:middle
you're still going to
need that certificate

477
00:25:15,426 --> 00:25:22,336 A:middle
for signing the Maverick's
kext.We're going to start

478
00:25:22,336 --> 00:25:25,296 A:middle
with the same project as
last time, but we're going

479
00:25:25,296 --> 00:25:28,806 A:middle
to show the screenshots
in the older Xcode.

480
00:25:29,596 --> 00:25:31,246 A:middle
So the second target is going

481
00:25:31,246 --> 00:25:33,626 A:middle
to have slightly different
settings, particularly

482
00:25:33,626 --> 00:25:36,316 A:middle
to target OS X 10.7, we have

483
00:25:36,316 --> 00:25:38,236 A:middle
to add the 32-bit Intel
architecture for that,

484
00:25:38,616 --> 00:25:39,606 A:middle
for full compatibility.

485
00:25:40,316 --> 00:25:42,136 A:middle
And the resulting kext
from that target will load

486
00:25:42,136 --> 00:25:48,656 A:middle
on both OS X 10.7 and
10.8.As before, you're going

487
00:25:48,656 --> 00:25:50,946 A:middle
to make sure that the
module identifier,

488
00:25:51,186 --> 00:25:52,976 A:middle
the CFBundleIdentifier
that Jerry talked about,

489
00:25:52,976 --> 00:25:54,386 A:middle
is the same for both targets.

490
00:25:55,416 --> 00:25:58,686 A:middle
And you're going to make
sure that the legacy kext,

491
00:25:58,686 --> 00:26:01,946 A:middle
the one that's installing
in the old path,

492
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

493
00:26:01,946 --> 00:26:09,436 A:middle
/System/Library/Extensions,

494
00:26:09,436 --> 00:26:11,146 A:middle
has the older version
number.Let's go and look

495
00:26:11,146 --> 00:26:12,116 A:middle
at these build settings.

496
00:26:12,636 --> 00:26:14,976 A:middle
Again, "Architectures",
you need to make sure

497
00:26:14,976 --> 00:26:16,106 A:middle
that its standard for this SDK.

498
00:26:16,106 --> 00:26:19,976 A:middle
So the "Base SDK" is
going to be "OS X 10.7"

499
00:26:20,096 --> 00:26:22,456 A:middle
and the "Architecture"
is going to be both 32

500
00:26:22,456 --> 00:26:28,116 A:middle
and 64-bit Intel.And as
before, this target needs

501
00:26:28,116 --> 00:26:33,466 A:middle
to not sign the kext.In
deployment, again,

502
00:26:33,466 --> 00:26:35,906 A:middle
/System/Library/Extensions
is where it has to go

503
00:26:35,906 --> 00:26:38,766 A:middle
for OS X 10.7 and
10.8 to see it.

504
00:26:39,616 --> 00:26:43,506 A:middle
And the "OS X Deployment
Target" needs to match the SDK

505
00:26:45,126 --> 00:26:47,756 A:middle
as before.This project
will also build two kexts.

506
00:26:48,176 --> 00:26:50,716 A:middle
The signed kext is
unchanged, it's exactly

507
00:26:50,716 --> 00:26:52,276 A:middle
as the previous two examples.

508
00:26:53,196 --> 00:26:57,316 A:middle
But the unsigned kext should
actually load on both 10.7,

509
00:26:57,316 --> 00:27:01,416 A:middle
all flavors of 10.7 and all
flavors of 10.8, and you will,

510
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

511
00:27:01,416 --> 00:27:05,326 A:middle
again, use gdb to debug that.

512
00:27:06,156 --> 00:27:08,196 A:middle
Oh yeah, and as before,
you're going to want

513
00:27:08,196 --> 00:27:10,196 A:middle
to install only the
kexts that are necessary.

514
00:27:10,196 --> 00:27:12,586 A:middle
If you're installing to
a 10.7 or 10.8 system,

515
00:27:12,766 --> 00:27:14,776 A:middle
you'll install both kexts,
but if you're installing

516
00:27:14,776 --> 00:27:17,206 A:middle
into an OS X 10.9
system, you only need

517
00:27:17,206 --> 00:27:21,806 A:middle
to install the signed
kext.What happens if you want

518
00:27:22,126 --> 00:27:25,576 A:middle
to target releases even
further back than 10.7?

519
00:27:26,056 --> 00:27:27,246 A:middle
It is possible.

520
00:27:27,246 --> 00:27:29,266 A:middle
You can't do it from a
single Xcode project,

521
00:27:29,266 --> 00:27:32,346 A:middle
because there is no single Xcode
that spans that many releases.

522
00:27:32,456 --> 00:27:36,346 A:middle
So probably the best
approach for you is

523
00:27:36,346 --> 00:27:38,456 A:middle
to take your existing
kernel extension project

524
00:27:38,456 --> 00:27:43,806 A:middle
that already runs on OS's
up through 10.8 and just use

525
00:27:43,806 --> 00:27:45,456 A:middle
that kext as the unsigned
kext that you install

526
00:27:45,456 --> 00:27:47,796 A:middle
in /System/Library/Extensions.

527
00:27:48,466 --> 00:27:52,616 A:middle
And then use the
simple OS X 10.9 project

528
00:27:52,726 --> 00:27:56,206 A:middle
that I described first, and
just import the source code

529
00:27:56,326 --> 00:27:58,256 A:middle
and build a second kext that
way and that will install

530
00:27:58,256 --> 00:28:01,086 A:middle
in /Library/Extensions.So
effectively you're kind

531
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

532
00:28:01,086 --> 00:28:04,766 A:middle
of building a line in the
sand between Mavericks

533
00:28:04,766 --> 00:28:06,256 A:middle
and older operating systems

534
00:28:06,256 --> 00:28:08,756 A:middle
that didn't use signed kernel
extensions, and so it's kind

535
00:28:08,756 --> 00:28:12,336 A:middle
of a clean break in the
new kext project and focus

536
00:28:12,336 --> 00:28:14,056 A:middle
on Mavericks and the future.

537
00:28:17,516 --> 00:28:21,316 A:middle
So, when you're building for
older OS's, I couldn't go

538
00:28:21,316 --> 00:28:23,386 A:middle
into all the different
permutations, it really depends

539
00:28:23,386 --> 00:28:27,916 A:middle
on what OS's you're targeting,
what families you are using

540
00:28:27,916 --> 00:28:29,166 A:middle
within IOKit and so on as

541
00:28:29,206 --> 00:28:31,806 A:middle
to exactly what compatibility
you would have.

542
00:28:32,406 --> 00:28:34,716 A:middle
But you need to follow
the compatibility guidance

543
00:28:34,716 --> 00:28:36,876 A:middle
that we've released for
previous operating systems

544
00:28:36,876 --> 00:28:39,446 A:middle
when targeting those, and
again, you're kind of separating

545
00:28:39,446 --> 00:28:42,546 A:middle
out the 10.9 kext anyway.

546
00:28:42,546 --> 00:28:45,276 A:middle
So, the compatibility
guidance we've given you

547
00:28:45,276 --> 00:28:46,386 A:middle
in the past still applies

548
00:28:46,386 --> 00:28:53,996 A:middle
for the legacy kext.And
always install only the kexts

549
00:28:54,146 --> 00:28:57,956 A:middle
that are particularly
necessary for the target system

550
00:28:58,286 --> 00:29:01,836 A:middle
and also make sure that you're
robust against write failures

551
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

552
00:29:01,836 --> 00:29:02,686 A:middle
to the /System folder

553
00:29:02,686 --> 00:29:08,586 A:middle
for future.So this is your handy
pocket guide for compatibility.

554
00:29:09,186 --> 00:29:13,916 A:middle
The first column here
says, OS X 10.7 and beyond.

555
00:29:14,546 --> 00:29:16,626 A:middle
Those are all the various
settings you're going to need

556
00:29:16,626 --> 00:29:17,506 A:middle
and each column further

557
00:29:17,506 --> 00:29:20,716 A:middle
to the right takes it
further 1 OS release.

558
00:29:21,446 --> 00:29:25,686 A:middle
This is mostly for the at-home
audience that can freeze frame

559
00:29:25,686 --> 00:29:28,706 A:middle
on this and very quickly
get all those build settings

560
00:29:28,746 --> 00:29:32,126 A:middle
that they need.All
right, and with that,

561
00:29:32,126 --> 00:29:34,186 A:middle
I would like to turn the stage

562
00:29:34,186 --> 00:29:37,086 A:middle
over to Brian Bechtel
who's going to talk to you

563
00:29:37,086 --> 00:29:38,766 A:middle
about lldb.Thanks
for your attention.

564
00:29:39,266 --> 00:29:43,116 A:middle
[ Applause ]

565
00:29:43,616 --> 00:29:44,356 A:middle
>> Brian Bechtel:
Hello everybody.

566
00:29:44,686 --> 00:29:45,606 A:middle
I'm Brian Bechtel.

567
00:29:45,856 --> 00:29:48,166 A:middle
I work in Core OS
doing Panic Triage.

568
00:29:48,166 --> 00:29:50,486 A:middle
I look at panics
all day and we have,

569
00:29:51,256 --> 00:29:52,406 A:middle
I know it's a wonderful
job [laughter].

570
00:29:54,086 --> 00:29:56,506 A:middle
We have a saying in our group.

571
00:29:58,006 --> 00:30:02,686 A:middle
[Laughter] And it really is true
that after about 10,000 panics,

572
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

573
00:30:02,686 --> 00:30:06,196 A:middle
there pretty straightforward.

574
00:30:06,406 --> 00:30:10,626 A:middle
In Mac OS X 10.9 we have
a new debugger, lldb.

575
00:30:10,626 --> 00:30:15,846 A:middle
It is a very powerful, very
fast, very nice debugger.

576
00:30:16,516 --> 00:30:17,536 A:middle
It is slightly different.

577
00:30:17,536 --> 00:30:19,316 A:middle
I'll be talking about
some of those differences.

578
00:30:19,936 --> 00:30:23,826 A:middle
The big things we get out of
lldb are tighter integration

579
00:30:23,826 --> 00:30:26,606 A:middle
with llvm and the rest of
the development tool chain.

580
00:30:27,416 --> 00:30:30,006 A:middle
We have a much, much
faster debugger.

581
00:30:30,006 --> 00:30:31,486 A:middle
I will be demoing that later.

582
00:30:32,006 --> 00:30:35,006 A:middle
And we're supporting
it very actively

583
00:30:35,006 --> 00:30:40,046 A:middle
and we're very much listening
to developer reports of issues

584
00:30:40,096 --> 00:30:42,266 A:middle
and fixing them, which
is a very good thing.

585
00:30:44,206 --> 00:30:47,616 A:middle
lldb includes Python as
its scripting language.

586
00:30:47,616 --> 00:30:50,096 A:middle
That means you can do almost
anything that you can do

587
00:30:50,096 --> 00:30:53,216 A:middle
in Python inside lldb, it
gives you way more power

588
00:30:53,526 --> 00:30:55,726 A:middle
than the old macro
language in gdb.

589
00:30:56,706 --> 00:31:01,916 A:middle
There is a gdb to lldb command
map up on the llvm.org website,

590
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

591
00:31:01,996 --> 00:31:04,536 A:middle
which helps you make
this transition,

592
00:31:04,956 --> 00:31:07,486 A:middle
but much of the commands
are exactly the same

593
00:31:07,486 --> 00:31:09,356 A:middle
for the things you typically do.

594
00:31:10,096 --> 00:31:15,016 A:middle
lldb is the debugger for
Mac OS X 10.9 and beyond.

595
00:31:15,646 --> 00:31:16,646 A:middle
gdb is dead.

596
00:31:18,526 --> 00:31:20,516 A:middle
[Laughter] gdb is
gone in Xcode 5.0.

597
00:31:20,926 --> 00:31:22,646 A:middle
There is no gdb binary there.

598
00:31:22,876 --> 00:31:27,086 A:middle
There is no kgmacros file in the
kernel debug kit for Mavericks.

599
00:31:27,676 --> 00:31:29,966 A:middle
We have no plans to fix
any remaining issues.

600
00:31:31,406 --> 00:31:34,816 A:middle
It is still the debugger
of choice for Snow Leopard,

601
00:31:35,056 --> 00:31:38,706 A:middle
the cats basically, if you
have a cat, gdb is your friend.

602
00:31:39,046 --> 00:31:43,436 A:middle
If you have a giant wave or
some other California feature,

603
00:31:43,846 --> 00:31:44,866 A:middle
lldb is your friend.

604
00:31:44,866 --> 00:31:52,066 A:middle
This is a demo of how fast gdb
is, versus how fast lldb is.

605
00:31:52,516 --> 00:31:54,196 A:middle
I'm just going to
issue one command

606
00:31:54,196 --> 00:32:00,206 A:middle
in the debugger while connected
via gdb to a 10.8 system

607
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

608
00:32:00,596 --> 00:32:03,216 A:middle
and lldb to a 10.9 system.

609
00:32:03,996 --> 00:32:06,966 A:middle
I've set up two terminal
windows here,

610
00:32:06,966 --> 00:32:09,256 A:middle
the light brown one
is running gdb

611
00:32:09,556 --> 00:32:12,076 A:middle
and the white one
is running lldb.

612
00:32:12,076 --> 00:32:15,956 A:middle
I'm even going to let gdb
start first so you're going

613
00:32:15,956 --> 00:32:18,676 A:middle
to see a cursor there
that touches that window,

614
00:32:18,976 --> 00:32:21,536 A:middle
I hit Return, then go down
and hit the other window.

615
00:32:22,126 --> 00:32:24,576 A:middle
And what you see
is lldb is much,

616
00:32:24,576 --> 00:32:27,946 A:middle
much faster at just
printing the zone list.

617
00:32:29,716 --> 00:32:33,166 A:middle
Every other command in lldb has
this kind of speed improvement.

618
00:32:33,616 --> 00:32:36,636 A:middle
It's really quite, quite
noticeable, and wonderful

619
00:32:36,636 --> 00:32:40,136 A:middle
if you're doing 10,000 panics.

620
00:32:41,406 --> 00:32:44,326 A:middle
[Laughter] All of the standard
kgmacros are still there,

621
00:32:44,326 --> 00:32:48,486 A:middle
I said there's no kgmacros file,
but the kgmacros themselves,

622
00:32:48,576 --> 00:32:53,836 A:middle
reimplemented in Python, are
in the mach kernel.dSYM file

623
00:32:53,836 --> 00:32:55,576 A:middle
in a directory, which
I'll discuss later.

624
00:32:56,126 --> 00:32:58,356 A:middle
These are all the
standard macros that we use

625
00:32:58,356 --> 00:33:02,156 A:middle
when we're debugging to just get
the generic information we need

626
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

627
00:33:02,156 --> 00:33:04,346 A:middle
for a panic.

628
00:33:04,616 --> 00:33:06,466 A:middle
They're still there, there
are some minor changes

629
00:33:06,466 --> 00:33:10,306 A:middle
in the output format, but
everything works great.

630
00:33:11,776 --> 00:33:14,126 A:middle
For adding kext symbols,
on startup,

631
00:33:14,126 --> 00:33:17,456 A:middle
lldb will automatically
scan for kexts installed

632
00:33:17,456 --> 00:33:22,676 A:middle
in System/Library/Extensions,
the new Library/Extensions,

633
00:33:23,206 --> 00:33:26,176 A:middle
and in the directory
/Volumes/Kernel/DebugKit

634
00:33:26,176 --> 00:33:29,786 A:middle
because that's the kext
symbols that we give you in all

635
00:33:29,786 --> 00:33:32,206 A:middle
of the symbols for IOKit kexts.

636
00:33:33,096 --> 00:33:37,666 A:middle
You can specify additional
locations in the .lldbinit file

637
00:33:37,666 --> 00:33:40,156 A:middle
in your home directory.

638
00:33:40,156 --> 00:33:41,716 A:middle
There's the command line for it.

639
00:33:42,276 --> 00:33:44,056 A:middle
And of course while
you're debugging,

640
00:33:44,126 --> 00:33:47,166 A:middle
you can add kext symbols
using the addkext macro.

641
00:33:47,446 --> 00:33:52,576 A:middle
I'll have some examples
of that later.

642
00:33:53,976 --> 00:33:56,456 A:middle
Every time you change something
you'll have little gotchas,

643
00:33:56,456 --> 00:33:58,246 A:middle
these are some of
the ones that hit me

644
00:33:58,246 --> 00:34:01,046 A:middle
that I thought you guys
would like to know.

645
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

646
00:34:01,416 --> 00:34:06,416 A:middle
lldb likes to pretend it
doesn't know how to do addition.

647
00:34:07,326 --> 00:34:08,666 A:middle
Backtick is your friend.

648
00:34:08,906 --> 00:34:11,735 A:middle
Backtick, if you get a, if
you try to display something

649
00:34:12,016 --> 00:34:13,946 A:middle
and it says, "I don't know
what that is that you're trying

650
00:34:13,946 --> 00:34:16,176 A:middle
to display," put the
expression in backticks.

651
00:34:16,656 --> 00:34:20,366 A:middle
It sometimes fixes that.

652
00:34:20,366 --> 00:34:24,396 A:middle
gdb was very, very sloppy
about describing a structure

653
00:34:24,396 --> 00:34:28,136 A:middle
or a pointer to a structure
or fields in a structure.

654
00:34:28,186 --> 00:34:30,255 A:middle
lldb is very pedantic about that

655
00:34:30,286 --> 00:34:33,596 A:middle
because it gets very pedantic
information from llvm.

656
00:34:33,596 --> 00:34:37,946 A:middle
So if you're saying this is
a pointer to a structure,

657
00:34:38,466 --> 00:34:40,786 A:middle
you have to say it's a
pointer to a structure,

658
00:34:40,786 --> 00:34:45,076 A:middle
it'll painfully warn you that
you probably meant to say that

659
00:34:45,076 --> 00:34:47,726 A:middle
and let you reenter
your command.

660
00:34:48,696 --> 00:34:51,235 A:middle
And you may need to cast a
variable very explicitly.

661
00:34:51,235 --> 00:34:55,436 A:middle
We've had issues where you
know that this class is called,

662
00:34:55,656 --> 00:35:00,436 A:middle
"MyClass," and you say, "Print
MyClass," and instead it says,

663
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

664
00:35:00,436 --> 00:35:03,456 A:middle
"I don't know what MyClass is,"
but if you say, "Class/MyClass,"

665
00:35:03,456 --> 00:35:06,496 A:middle
or "Struct/MyStruct," it'll
say, "Yeah sure I can do that."

666
00:35:07,886 --> 00:35:10,216 A:middle
Anything you encounter like
that, we want to hear about it,

667
00:35:10,286 --> 00:35:12,866 A:middle
so please go to
bugreporter.apple.com,

668
00:35:13,216 --> 00:35:16,036 A:middle
file any issues you're
having, we really want

669
00:35:16,036 --> 00:35:18,256 A:middle
to hear those things, they're
going to the engineers,

670
00:35:18,566 --> 00:35:22,076 A:middle
they will repair them or
at least have a reason why.

671
00:35:22,926 --> 00:35:26,396 A:middle
So one of the great things

672
00:35:26,396 --> 00:35:28,556 A:middle
in lldb is the mixed
mode disassembly.

673
00:35:28,556 --> 00:35:30,396 A:middle
A lot of times when
you're trying to figure

674
00:35:30,396 --> 00:35:33,746 A:middle
out what happened, it's
difficult to translate

675
00:35:33,746 --> 00:35:37,526 A:middle
in your head what is
going on in the assembly

676
00:35:37,526 --> 00:35:39,346 A:middle
versus what the compiler did.

677
00:35:40,416 --> 00:35:44,416 A:middle
The disassemble -m option
gives you mixed mode

678
00:35:44,826 --> 00:35:47,176 A:middle
of whatever you're asking for.

679
00:35:47,176 --> 00:35:50,166 A:middle
You can say, for instance,
"disassemble -f -m,"

680
00:35:50,366 --> 00:35:53,726 A:middle
which will disassemble
the entire current frame

681
00:35:53,726 --> 00:35:56,616 A:middle
with both source and assembly,

682
00:35:56,826 --> 00:35:58,816 A:middle
intermixed so you can
see where everything is.

683
00:35:59,306 --> 00:36:01,246 A:middle
If you just want to see the
current line that you're stopped

684
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

685
00:36:01,246 --> 00:36:03,796 A:middle
on you can say, "disassemble
-l -m

686
00:36:04,426 --> 00:36:06,716 A:middle
or you can give it
a start and address.

687
00:36:07,016 --> 00:36:11,966 A:middle
And you can abbreviate that,
the minimum command abbreviation

688
00:36:11,966 --> 00:36:14,446 A:middle
for disassemble is di.

689
00:36:14,446 --> 00:36:16,166 A:middle
So you can say di -f -m.

690
00:36:17,306 --> 00:36:19,846 A:middle
Here's an example of
mixed mode disassembly.

691
00:36:19,896 --> 00:36:22,996 A:middle
The stupidest, simplest
example I could come up with.

692
00:36:23,436 --> 00:36:26,556 A:middle
There's a routine in the
kernel called, fseventsf-write,

693
00:36:27,206 --> 00:36:31,216 A:middle
which just returns
EIO, an error.

694
00:36:31,866 --> 00:36:36,856 A:middle
So this is the example of
that routine disassembled

695
00:36:36,856 --> 00:36:39,366 A:middle
with mixed disassembly.

696
00:36:40,146 --> 00:36:42,766 A:middle
Here you see the
prologue of the routine.

697
00:36:44,076 --> 00:36:47,846 A:middle
EIO turns out to be the value
of 5, so here it's moving 5

698
00:36:47,846 --> 00:36:49,136 A:middle
into the return register.

699
00:36:50,156 --> 00:36:52,456 A:middle
And here you see the epilogue.

700
00:36:53,436 --> 00:36:55,906 A:middle
So in a much more
complex example,

701
00:36:55,906 --> 00:36:57,236 A:middle
this is really, really helpful.

702
00:36:57,596 --> 00:37:07,036 A:middle
Here, you could probably figure
that out in a day or two.

703
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

704
00:37:07,036 --> 00:37:07,103 A:middle
[Laughter]

705
00:37:07,103 --> 00:37:07,170 A:middle
[ Silence ]

706
00:37:07,170 --> 00:37:09,756 A:middle
The kgmacros now take
an additional argument,

707
00:37:09,756 --> 00:37:11,306 A:middle
or series of arguments.

708
00:37:11,616 --> 00:37:13,516 A:middle
You can now redirect output

709
00:37:13,516 --> 00:37:16,576 A:middle
from a macro directly
to a file with -o.

710
00:37:17,396 --> 00:37:21,536 A:middle
If you get a macro that
has a lot of output

711
00:37:21,536 --> 00:37:22,926 A:middle
and you don't want
all that output,

712
00:37:22,926 --> 00:37:26,206 A:middle
you can grep inside
the output with -s

713
00:37:26,936 --> 00:37:30,126 A:middle
and you can add additional
verbosity to the macros

714
00:37:30,126 --> 00:37:35,306 A:middle
to see additional details
about the macro with -v and it,

715
00:37:35,306 --> 00:37:41,996 A:middle
it is cumulative so you can
say -v -v -v, you can be anal

716
00:37:41,996 --> 00:37:43,376 A:middle
and see how far out you can go.

717
00:37:44,366 --> 00:37:45,696 A:middle
So here's an example,

718
00:37:45,696 --> 00:37:47,806 A:middle
if you want to find
the load information

719
00:37:47,806 --> 00:37:52,696 A:middle
for just our sample PCI kext,
you can say, 'showallkmods,"

720
00:37:52,696 --> 00:37:55,696 A:middle
which shows all of
the kext information,

721
00:37:56,056 --> 00:38:01,036 A:middle
and then say -s AppleSamplePCI
to just get the information

722
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

723
00:38:01,036 --> 00:38:03,966 A:middle
on one line rather than have to
scroll through a lot of lines.

724
00:38:06,286 --> 00:38:11,586 A:middle
For security purposes, we do
not automatically load the lldb

725
00:38:11,586 --> 00:38:14,006 A:middle
macros in lldb by default.

726
00:38:14,836 --> 00:38:15,976 A:middle
The reason we do this is

727
00:38:15,976 --> 00:38:17,676 A:middle
if you're doing application
debugging

728
00:38:17,676 --> 00:38:19,406 A:middle
or you have a malicious kext,

729
00:38:19,826 --> 00:38:23,686 A:middle
and they've put some bad lldb
macros in a hidden symbol file

730
00:38:23,686 --> 00:38:26,226 A:middle
or something, bad
things could happen.

731
00:38:26,466 --> 00:38:28,176 A:middle
You know? It's the
internet nowadays.

732
00:38:28,966 --> 00:38:31,926 A:middle
So to overcome this because
you trust your development

733
00:38:31,926 --> 00:38:33,226 A:middle
environment and your setup,

734
00:38:33,496 --> 00:38:36,216 A:middle
you can add that
particular setting line

735
00:38:36,216 --> 00:38:39,786 A:middle
to your .lldbinit file and then
it will automatically load the

736
00:38:39,786 --> 00:38:41,306 A:middle
script from the symbol files.

737
00:38:41,896 --> 00:38:46,336 A:middle
You can also create custom
Python and put it in the,

738
00:38:47,506 --> 00:38:48,896 A:middle
in the dSYM file

739
00:38:48,896 --> 00:38:51,666 A:middle
in the Contents/Resources/Python
directory,

740
00:38:52,216 --> 00:38:54,406 A:middle
and then that will be
automatically loaded assuming

741
00:38:54,406 --> 00:38:56,766 A:middle
that you have your
settings set correctly.

742
00:38:59,316 --> 00:39:01,876 A:middle
For faster loading, a lot
of times you only want

743
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

744
00:39:01,876 --> 00:39:03,946 A:middle
to see your particular
kexts, you don't care

745
00:39:03,946 --> 00:39:05,396 A:middle
about Apple's kexts,
you don't care

746
00:39:05,396 --> 00:39:06,586 A:middle
about all those other things.

747
00:39:07,666 --> 00:39:11,306 A:middle
Add this line before you
do the connection or put

748
00:39:11,306 --> 00:39:13,346 A:middle
that in your .lldbinit file

749
00:39:13,766 --> 00:39:15,366 A:middle
and it won't load
all the other things

750
00:39:15,366 --> 00:39:18,516 A:middle
and you just come right
back up to Ready To Go.

751
00:39:18,566 --> 00:39:21,436 A:middle
And then at that point if you
want to automatically load,

752
00:39:21,436 --> 00:39:25,506 A:middle
or manually load symbols for
your kext, you can use any

753
00:39:25,506 --> 00:39:28,536 A:middle
of these four examples
of the addkext command.

754
00:39:28,926 --> 00:39:32,166 A:middle
You can either pass it
the UUID, pass it the name

755
00:39:32,166 --> 00:39:34,856 A:middle
and if the name is found
in one of the places

756
00:39:34,856 --> 00:39:37,396 A:middle
that lldb searches,
it will load it.

757
00:39:37,786 --> 00:39:40,166 A:middle
You can give it an
explicit path, an address,

758
00:39:40,576 --> 00:39:43,596 A:middle
or you can say, "Hey, I changed
my mind I want them all loaded,"

759
00:39:43,986 --> 00:39:45,716 A:middle
that will take a lot
longer than it would

760
00:39:45,716 --> 00:39:52,496 A:middle
if you'd just let lldb
do it at the beginning.

761
00:39:52,496 --> 00:39:54,886 A:middle
nvram is needed, I'm
going to now be talking

762
00:39:54,886 --> 00:39:56,106 A:middle
about two machine debugging.

763
00:39:56,746 --> 00:40:00,546 A:middle
We use nvram to enable
debugging at all.

764
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

765
00:40:01,056 --> 00:40:03,376 A:middle
If you have no debug
boot argument set,

766
00:40:03,646 --> 00:40:05,596 A:middle
your system will
reboot on panic,

767
00:40:05,686 --> 00:40:08,156 A:middle
that's a new behavior
starting in 10.8.

768
00:40:09,146 --> 00:40:13,596 A:middle
If you set boot-args using the
nvram command line tool as root

769
00:40:14,036 --> 00:40:17,376 A:middle
and reboot to let those settings
take effect, you can change

770
00:40:17,376 --> 00:40:19,546 A:middle
that behavior so
you'll halt at panic

771
00:40:19,936 --> 00:40:22,206 A:middle
and let you connect
from another machine.

772
00:40:23,556 --> 00:40:30,326 A:middle
So in the old days, back when
we had just iMac's or something,

773
00:40:30,756 --> 00:40:32,816 A:middle
we had built-in Ethernet
and built-in FireWire.

774
00:40:33,166 --> 00:40:37,066 A:middle
Nowadays, probably most of you
out there, have a MacBook Air

775
00:40:37,066 --> 00:40:41,556 A:middle
or something that no longer has
built-in Ethernet nor built-in

776
00:40:41,556 --> 00:40:44,826 A:middle
FireWire, so we've added
new ways to connect.

777
00:40:44,916 --> 00:40:48,866 A:middle
You can now connect for two
machine debugging using a

778
00:40:48,866 --> 00:40:51,846 A:middle
Thunderbolt Ethernet
Adaptor, using a Thunderbolt

779
00:40:51,846 --> 00:40:55,946 A:middle
to FireWire Adaptor, using
an Apple Thunderbolt display

780
00:40:55,946 --> 00:40:59,216 A:middle
in either Ethernet or FireWire
on the back of that monitor.

781
00:40:59,806 --> 00:41:03,616 A:middle
We do not support wireless and
we do not support USB Ethernet,

782
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

783
00:41:04,016 --> 00:41:06,336 A:middle
so you're going to have to get
one of those other connections.

784
00:41:08,986 --> 00:41:13,626 A:middle
When you connect, two-machine
debugging assumes a network port

785
00:41:13,626 --> 00:41:18,886 A:middle
of en0, that's the old
behavior from the original iMac,

786
00:41:18,886 --> 00:41:21,166 A:middle
MacBook Pro, Mac Pro, whatever.

787
00:41:21,816 --> 00:41:26,056 A:middle
If your network port isn't
that, you have to add,

788
00:41:26,056 --> 00:41:27,556 A:middle
as part of your boot arguments,

789
00:41:27,936 --> 00:41:30,906 A:middle
kdp-match-name=,
and then some value.

790
00:41:31,816 --> 00:41:34,246 A:middle
That some value will
depend on your connection.

791
00:41:34,626 --> 00:41:37,366 A:middle
For a network connection,
ifconfig, will tell you

792
00:41:37,366 --> 00:41:38,826 A:middle
which port you should use.

793
00:41:39,216 --> 00:41:40,486 A:middle
So if you have a Thunderbolt

794
00:41:40,486 --> 00:41:43,796 A:middle
to Ethernet connector
you would use ifconfig

795
00:41:43,796 --> 00:41:48,826 A:middle
to find the connection and
then kdp-match-name=en whatever

796
00:41:48,826 --> 00:41:49,716 A:middle
that number is.

797
00:41:50,316 --> 00:41:51,816 A:middle
Here's an example of that.

798
00:41:51,816 --> 00:41:56,136 A:middle
This is the output from the
ifconfig command just cut

799
00:41:56,136 --> 00:41:57,726 A:middle
down to a single port.

800
00:41:58,996 --> 00:42:02,576 A:middle
I'm looking for a port with an
inet value that makes sense.

801
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

802
00:42:02,896 --> 00:42:07,136 A:middle
So, for instance, here
at the conference,

803
00:42:07,466 --> 00:42:11,066 A:middle
we're running off the
10.0 net or 10.1 net,

804
00:42:11,146 --> 00:42:12,366 A:middle
I'm not sure which one.

805
00:42:12,996 --> 00:42:15,856 A:middle
I look for a connection
that's 10.

806
00:42:15,856 --> 00:42:19,346 A:middle
whatever, the en1
tells me that the port

807
00:42:19,396 --> 00:42:23,106 A:middle
that I will be using
in kdp-match-name=.

808
00:42:24,796 --> 00:42:30,396 A:middle
So for built-in debugging on
a machine like a MacBook Pro

809
00:42:30,396 --> 00:42:34,106 A:middle
with built-in Ethernet, you
would just set your boot args

810
00:42:34,216 --> 00:42:43,066 A:middle
as this: debug=0x144, the
100-bit means don't put

811
00:42:43,066 --> 00:42:46,556 A:middle
up the graphic panic
screen, just halt.

812
00:42:47,116 --> 00:42:50,836 A:middle
The 4-bit means let me
connect to the machine,

813
00:42:51,386 --> 00:42:54,896 A:middle
and the 40-bit means
let me connect

814
00:42:54,896 --> 00:42:56,946 A:middle
over a different
subnet if necessary.

815
00:42:57,286 --> 00:43:00,716 A:middle
So you can simplify this to
104 instead if you wanted.

816
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

817
00:43:02,216 --> 00:43:05,086 A:middle
For Thunderbolt to
Ethernet, you'll notice

818
00:43:05,086 --> 00:43:09,416 A:middle
that same command line
has added kdp-match-name=

819
00:43:09,416 --> 00:43:10,906 A:middle
and then an en value.

820
00:43:11,586 --> 00:43:14,646 A:middle
And for Thunderbolt Display,
you would do the same thing.

821
00:43:15,086 --> 00:43:17,466 A:middle
I'm giving examples
here with en2 and en4,

822
00:43:17,466 --> 00:43:22,066 A:middle
but you actually need the
output from ifconfig to figure

823
00:43:22,066 --> 00:43:26,736 A:middle
out what the proper en value
is, and you would put that in.

824
00:43:27,086 --> 00:43:30,566 A:middle
Many times this value may
coincidentally be there,

825
00:43:30,566 --> 00:43:34,306 A:middle
and it may be the right value,
but you have to use ifconfig,

826
00:43:34,346 --> 00:43:36,586 A:middle
you can't just trust a
slide at a conference.

827
00:43:39,546 --> 00:43:41,166 A:middle
[Laughing] If you're
using native FireWire,

828
00:43:42,036 --> 00:43:44,946 A:middle
you set kdp-match-name
to FireWire.

829
00:43:46,116 --> 00:43:49,346 A:middle
If you're using Thunderbolt
FireWire Connector

830
00:43:49,436 --> 00:43:51,686 A:middle
or Apple Thunderbolt
Display to FireWire,

831
00:43:52,226 --> 00:43:57,416 A:middle
you have to add an additional
command, which is fwkdp=8000hex.

832
00:43:57,976 --> 00:44:02,156 A:middle
That tells the Thunderbolt
System not to turn off power

833
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

834
00:44:02,156 --> 00:44:05,376 A:middle
to the FireWire chip, which
would be rather inconvenient

835
00:44:05,376 --> 00:44:06,426 A:middle
when you're trying to connect.

836
00:44:07,706 --> 00:44:09,306 A:middle
And as always, you
need to reboot

837
00:44:09,306 --> 00:44:10,816 A:middle
to let the settings take effect.

838
00:44:11,426 --> 00:44:15,296 A:middle
So for FireWire debugging
it's very simple,

839
00:44:15,296 --> 00:44:17,206 A:middle
you open up two terminal
windows.

840
00:44:17,576 --> 00:44:20,346 A:middle
In one terminal window,
you enter fwkdp,

841
00:44:20,346 --> 00:44:24,596 A:middle
in the other terminal
window you invoke lldb,

842
00:44:25,026 --> 00:44:27,846 A:middle
and then connect
to the local host.

843
00:44:27,846 --> 00:44:31,796 A:middle
The fwkdp is a redirecting
program that makes it look

844
00:44:31,796 --> 00:44:34,176 A:middle
as if your local
machine is panicked,

845
00:44:34,546 --> 00:44:38,396 A:middle
but it actually redirects the
commands out the FireWire port

846
00:44:38,766 --> 00:44:40,166 A:middle
to the panicked machine.

847
00:44:44,036 --> 00:44:46,796 A:middle
It's important to note
I used xcrun there.

848
00:44:46,796 --> 00:44:48,486 A:middle
xcrun guarantees
that you're going

849
00:44:48,486 --> 00:44:52,006 A:middle
to be running the lldb
that's in your current Xcode.

850
00:44:52,476 --> 00:44:55,766 A:middle
You want that because who knows
what horrible thing you've got

851
00:44:56,006 --> 00:44:59,166 A:middle
installed in /usr/bin
or /usr/local/bin

852
00:44:59,606 --> 00:45:01,376 A:middle
that might accidentally
be grabbed.

853
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

854
00:45:01,716 --> 00:45:06,626 A:middle
If you use xcrun lldb it will
always find the proper lldb

855
00:45:06,626 --> 00:45:07,686 A:middle
for your Xcode.

856
00:45:08,756 --> 00:45:12,066 A:middle
And I'm giving a couple examples
of how you connect to a machine.

857
00:45:12,066 --> 00:45:13,256 A:middle
If you're connecting live,

858
00:45:13,626 --> 00:45:16,276 A:middle
you can either give a
name or an IP address.

859
00:45:17,056 --> 00:45:19,686 A:middle
You can use a Bonjour name
although there is a warning

860
00:45:19,686 --> 00:45:24,926 A:middle
that with Bonjour you may have
a reassignment of an address

861
00:45:25,376 --> 00:45:27,736 A:middle
as you're going along,
so that's a little shaky.

862
00:45:27,736 --> 00:45:30,786 A:middle
I tend to either use a
fully-qualified domain name

863
00:45:30,786 --> 00:45:33,046 A:middle
or a dotted IP address.

864
00:45:33,676 --> 00:45:37,466 A:middle
And if you're reading a coredump
file, the command is "file --

865
00:45:37,906 --> 00:45:42,736 A:middle
c" and then a path to the file.

866
00:45:43,876 --> 00:45:47,346 A:middle
In fact, talking about
coredumps, I'm going to talk

867
00:45:47,346 --> 00:45:51,626 A:middle
about several things that
we've changed recently

868
00:45:51,626 --> 00:45:53,086 A:middle
that are helpful for you.

869
00:45:53,086 --> 00:45:57,756 A:middle
The first thing that you'll
notice is we've changed how you

870
00:45:57,756 --> 00:46:00,366 A:middle
do a NMI in Mac OS X 10.9.

871
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

872
00:46:01,056 --> 00:46:04,756 A:middle
With boot-args set
so that the 0x4 bit

873
00:46:04,756 --> 00:46:10,766 A:middle
or the DB-NMI bit is
set, in 10.8 or earlier,

874
00:46:10,846 --> 00:46:12,306 A:middle
you'd just hit the Power key.

875
00:46:12,876 --> 00:46:15,236 A:middle
Anybody who's done
kernel debugging

876
00:46:15,236 --> 00:46:17,556 A:middle
and hit the Power key will
discover that the Power key

877
00:46:17,556 --> 00:46:21,616 A:middle
on a MacBook Air is directly
next to the Delete key.

878
00:46:22,226 --> 00:46:24,816 A:middle
And then you curse and
reboot your machine

879
00:46:24,816 --> 00:46:27,196 A:middle
because you didn't have
it setup for debugging.

880
00:46:27,656 --> 00:46:30,286 A:middle
So we changed that in Mavericks.

881
00:46:30,506 --> 00:46:34,126 A:middle
Now it is Left and Right
command keys and the Power key.

882
00:46:34,876 --> 00:46:37,486 A:middle
This will make your
day-to-day life a lot easier.

883
00:46:38,706 --> 00:46:41,036 A:middle
If you really like the old
behavior, you can revert to that

884
00:46:41,326 --> 00:46:43,516 A:middle
by OR'ing [phonetic]
in the hex 8000-bit,

885
00:46:43,996 --> 00:46:49,396 A:middle
so instead of debug=0x144,
you'd say debug=8144.

886
00:46:50,776 --> 00:46:54,536 A:middle
You can automatically
save coredumps.

887
00:46:54,586 --> 00:46:58,436 A:middle
This works far back in the
system, but I'm documenting it

888
00:46:58,436 --> 00:46:59,666 A:middle
to make sure everybody has it

889
00:46:59,666 --> 00:47:01,936 A:middle
because it's a pretty
easy process.

890
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

891
00:47:02,746 --> 00:47:05,636 A:middle
As root on a host machine,
the machine where you're going

892
00:47:05,636 --> 00:47:07,456 A:middle
to save the coredump, you need

893
00:47:07,456 --> 00:47:09,526 A:middle
to create a directory
called PanicDumps,

894
00:47:10,436 --> 00:47:17,456 A:middle
change it to permissions, and
then launch the kdump.plist,

895
00:47:17,456 --> 00:47:20,826 A:middle
which will load a demon that
will sit there waiting to see

896
00:47:20,826 --> 00:47:23,206 A:middle
if anybody wants to send
it a coredump to save.

897
00:47:24,006 --> 00:47:26,836 A:middle
On the client machine, on the
machine that you want to panic

898
00:47:26,836 --> 00:47:30,736 A:middle
and save a core from, you
can set your boot-args

899
00:47:31,056 --> 00:47:39,116 A:middle
where debug is 0xd44 panicd ip=

900
00:47:39,386 --> 00:47:42,776 A:middle
and then the dotted IP
address of the host machine.

901
00:47:43,126 --> 00:47:46,166 A:middle
It has to be a dotted IP
address because at the time

902
00:47:46,166 --> 00:47:48,386 A:middle
of a panic we can't
do DNS resolution.

903
00:47:48,996 --> 00:47:55,016 A:middle
We've added some new
protection boot-args,

904
00:47:55,076 --> 00:47:58,676 A:middle
which will help you track
down buffer overruns,

905
00:47:58,676 --> 00:48:02,336 A:middle
use after free errors,
mismatched frees, you know,

906
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

907
00:48:02,536 --> 00:48:05,056 A:middle
freeing from a zone that you
didn't actually allocate from,

908
00:48:05,546 --> 00:48:07,346 A:middle
and some timing-induced races.

909
00:48:08,056 --> 00:48:14,826 A:middle
-zc, the allocate code inside
the kernel for zone allocations,

910
00:48:15,246 --> 00:48:17,366 A:middle
checks the free-list
pointers of all the zones

911
00:48:17,366 --> 00:48:20,496 A:middle
for correctness every
time you do an allocation.

912
00:48:20,496 --> 00:48:25,776 A:middle
-zp, the free routine,
will overwrite freed memory

913
00:48:25,776 --> 00:48:27,226 A:middle
with deadbeefdeadbeef.

914
00:48:27,716 --> 00:48:31,856 A:middle
That will catch any attempt to
execute or access freed data.

915
00:48:31,856 --> 00:48:36,856 A:middle
And here's an example of how
you would set that: debug=144,

916
00:48:36,856 --> 00:48:41,376 A:middle
for the two-machine debugging,
-zp -zc, and of course reboot

917
00:48:41,426 --> 00:48:44,486 A:middle
to let it take effect.

918
00:48:44,666 --> 00:48:47,486 A:middle
We also have a guard mode
kernel zone allocator.

919
00:48:47,616 --> 00:48:51,916 A:middle
This will let you target
any zone with a certain size

920
00:48:51,916 --> 00:48:55,736 A:middle
or any zone above a certain
size, below a certain size,

921
00:48:55,736 --> 00:48:57,216 A:middle
or in a range of sizes.

922
00:48:57,926 --> 00:49:02,436 A:middle
You set, specify one of
gzalloc-size, gzalloc-min,

923
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

924
00:49:02,776 --> 00:49:07,556 A:middle
gzalloc-max, or min and
max, and then gzalloc-wp.

925
00:49:07,556 --> 00:49:11,816 A:middle
And that will write-protect
the allocations rather

926
00:49:11,816 --> 00:49:14,456 A:middle
than unmapping them.

927
00:49:14,896 --> 00:49:17,716 A:middle
So the allocation
will still be around,

928
00:49:18,116 --> 00:49:21,176 A:middle
but it will be write-protected.

929
00:49:21,716 --> 00:49:29,026 A:middle
Zp and zc aren't very much
of an impact on performance,

930
00:49:29,026 --> 00:49:30,966 A:middle
I wouldn't do your
benchmarking with them set.

931
00:49:31,456 --> 00:49:34,346 A:middle
But they don't really
take up too much memory

932
00:49:34,346 --> 00:49:36,386 A:middle
and they don't really
take up too much time

933
00:49:36,726 --> 00:49:38,146 A:middle
in the allocation and free.

934
00:49:38,986 --> 00:49:43,956 A:middle
The gzalloc-wp, gzalloc-size
stuff, every allocation is going

935
00:49:43,956 --> 00:49:47,176 A:middle
to be put on its own 4k page
with an additional guard page,

936
00:49:48,086 --> 00:49:49,756 A:middle
measurably slower,
you'll notice it

937
00:49:49,756 --> 00:49:52,456 A:middle
when you're using the machine,
but it catches all kinds

938
00:49:52,456 --> 00:49:55,816 A:middle
of bugs, it's a very
valuable tool.

939
00:49:56,686 --> 00:49:59,236 A:middle
Another point I wanted
to make is that starting

940
00:49:59,236 --> 00:50:03,746 A:middle
in Mac OS X 10.8,
we changed graphics

941
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

942
00:50:03,746 --> 00:50:05,356 A:middle
to support multiple buffers.

943
00:50:05,776 --> 00:50:08,696 A:middle
We draw the console output
tool buffer in instead

944
00:50:08,696 --> 00:50:09,996 A:middle
of directly to the screen.

945
00:50:10,486 --> 00:50:12,596 A:middle
This was an enhancement
needed in order

946
00:50:12,596 --> 00:50:15,426 A:middle
to support the retina
display Macs, but it applies

947
00:50:15,426 --> 00:50:16,726 A:middle
across all the machines.

948
00:50:17,136 --> 00:50:20,206 A:middle
Unfortunately, that means you
have unreliable console output

949
00:50:20,206 --> 00:50:22,016 A:middle
to the screen if you panic.

950
00:50:22,386 --> 00:50:26,066 A:middle
So if you have your boot-args
set to display text instead

951
00:50:26,066 --> 00:50:29,066 A:middle
of a panic screen, you
may not see that text,

952
00:50:29,066 --> 00:50:30,076 A:middle
it will appear to hang.

953
00:50:30,076 --> 00:50:32,016 A:middle
The only way to tell
is to attempt

954
00:50:32,016 --> 00:50:33,156 A:middle
to connect to the machine.

955
00:50:35,076 --> 00:50:38,116 A:middle
For more information
about all of this,

956
00:50:38,116 --> 00:50:41,386 A:middle
we have documentation
online, we have a contact here

957
00:50:41,386 --> 00:50:42,896 A:middle
from the evangelist group,

958
00:50:43,346 --> 00:50:47,796 A:middle
and the developer forums
are actually get pretty good

959
00:50:47,796 --> 00:50:50,046 A:middle
coverage from people
inside of Apple.

960
00:50:51,036 --> 00:50:53,706 A:middle
I recommend understanding
and debugging kernel panics.

961
00:50:53,966 --> 00:50:56,586 A:middle
The Kernel Core Dumps,
I specified all

962
00:50:56,586 --> 00:50:59,316 A:middle
of the stuff you need from
Kernel Core Dumps on one slide.

963
00:50:59,576 --> 00:51:00,866 A:middle
So, it's not very difficult.

964
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

965
00:51:01,236 --> 00:51:03,666 A:middle
And there's a new revision

966
00:51:03,666 --> 00:51:05,836 A:middle
to the generating a
non-maskable interrupt,

967
00:51:06,216 --> 00:51:09,106 A:middle
which is in the Mavericks
section

968
00:51:09,106 --> 00:51:13,696 A:middle
of the developer website,
the original version

969
00:51:13,696 --> 00:51:15,226 A:middle
of that is referenced here.

970
00:51:15,226 --> 00:51:19,876 A:middle
We have some related
sessions later this week,

971
00:51:19,946 --> 00:51:23,466 A:middle
on Friday in the Pacific
Heights Conference Room,

972
00:51:23,466 --> 00:51:27,496 A:middle
they'll be an Advanced Debugging
with LLDB, I recommend you go.

973
00:51:28,256 --> 00:51:31,636 A:middle
So in summary, sign
your kexts in 10.9.

974
00:51:31,936 --> 00:51:33,336 A:middle
We've had two people
tell you that,

975
00:51:33,336 --> 00:51:35,166 A:middle
it's the wave of the future.

976
00:51:35,936 --> 00:51:37,566 A:middle
lldb is actually pretty cool.

977
00:51:37,726 --> 00:51:38,276 A:middle
I like it.

978
00:51:38,276 --> 00:51:41,616 A:middle
I prefer it over gdb
now that I'm used to it.

979
00:51:41,806 --> 00:51:44,856 A:middle
Like any new technology,
it takes a bit to get used,

980
00:51:44,946 --> 00:51:47,686 A:middle
but it's very powerful
and very nice.

981
00:51:48,606 --> 00:51:51,056 A:middle
We have new ways of
debugging for machines

982
00:51:51,276 --> 00:51:53,916 A:middle
that do not have built-in
FireWire or built-in Ethernet,

983
00:51:54,386 --> 00:51:56,836 A:middle
and we have new boot-args
that help you track down bugs.

984
00:51:58,896 --> 00:52:00,766 A:middle
There you go.

985
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

986
00:52:01,266 --> 00:52:22,480 A:middle
[ Applause ]

987
