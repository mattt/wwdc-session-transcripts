X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:09,466 A:middle
[ Silence ]

2
00:00:09,966 --> 00:00:10,886 A:middle
>> Good afternoon.

3
00:00:12,656 --> 00:00:14,016 A:middle
My name is David Chan.

4
00:00:14,086 --> 00:00:16,476 A:middle
Today, we're going to talk
a bit about multitasking.

5
00:00:16,766 --> 00:00:19,186 A:middle
As you saw yesterday, we
have some great new APIs

6
00:00:19,186 --> 00:00:22,076 A:middle
for you today, and we're
going to just dive right in.

7
00:00:23,916 --> 00:00:27,426 A:middle
So first, we want to just do a
quick review of the multitasking

8
00:00:27,426 --> 00:00:29,236 A:middle
that we have in iOS 6.

9
00:00:29,766 --> 00:00:32,336 A:middle
We have a few changes here that
we want to just to note right

10
00:00:32,336 --> 00:00:34,946 A:middle
at the top and then
we're going to dive right

11
00:00:34,946 --> 00:00:37,246 A:middle
into the new APIs
that we have for you.

12
00:00:37,896 --> 00:00:40,206 A:middle
We're really excited to see
what you guys think about it

13
00:00:40,686 --> 00:00:42,996 A:middle
and what you'll do inside
of your applications.

14
00:00:43,786 --> 00:00:46,646 A:middle
And then next, we're
going to talk a little bit

15
00:00:46,646 --> 00:00:48,576 A:middle
about what it means to
run in the background.

16
00:00:48,976 --> 00:00:51,726 A:middle
For those of you who
haven't adapted any

17
00:00:52,096 --> 00:00:57,286 A:middle
of the more significant
multitasking APIs in the past,

18
00:00:57,366 --> 00:01:01,216 A:middle
these are a few tips and things
that you should be considering

19
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

20
00:01:01,216 --> 00:01:02,786 A:middle
as you're implementing it.

21
00:01:03,596 --> 00:01:06,606 A:middle
Details are incredibly important
to make a great application

22
00:01:07,026 --> 00:01:08,886 A:middle
and this is where
you're going to learn

23
00:01:08,886 --> 00:01:12,406 A:middle
about what you need
to do for those.

24
00:01:12,606 --> 00:01:18,176 A:middle
So, in iOS 6, we have a
number of great APIs for you

25
00:01:18,696 --> 00:01:21,906 A:middle
to for example playing
audio into the background

26
00:01:21,956 --> 00:01:26,116 A:middle
if you're listening to music,
for your application to be woken

27
00:01:26,116 --> 00:01:30,096 A:middle
up and notified when the user
changes location, if they enter

28
00:01:30,096 --> 00:01:32,156 A:middle
in a region that
they're interested in.

29
00:01:32,916 --> 00:01:35,876 A:middle
And of course, in iOS 5,
we introduced Newsstand

30
00:01:36,276 --> 00:01:39,986 A:middle
which allows newspaper
and magazine applications

31
00:01:39,986 --> 00:01:43,616 A:middle
to keep their content
up to date.

32
00:01:43,616 --> 00:01:46,646 A:middle
So, here are a few changes
that we've made to some

33
00:01:46,646 --> 00:01:48,986 A:middle
of the existing multitasking
APIs.

34
00:01:50,336 --> 00:01:54,686 A:middle
The UIApplication background
task API is really great.

35
00:01:54,686 --> 00:01:58,296 A:middle
It's certainly very useful
to continue operation

36
00:01:58,296 --> 00:02:00,256 A:middle
after users have left
your application.

37
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

38
00:02:00,696 --> 00:02:03,876 A:middle
And a number of applications
use this for encoding video

39
00:02:03,876 --> 00:02:07,476 A:middle
or transferring files,
uploading or downloading

40
00:02:07,476 --> 00:02:09,376 A:middle
and completing database
operations

41
00:02:09,376 --> 00:02:13,206 A:middle
or just generally finishing up
whatever the user was doing.

42
00:02:13,866 --> 00:02:19,636 A:middle
And so from a power standpoint,
it kind of looked like this.

43
00:02:20,456 --> 00:02:22,296 A:middle
When the application
enters the background,

44
00:02:22,356 --> 00:02:26,526 A:middle
obviously the phone stays awake
to keep that task running,

45
00:02:27,916 --> 00:02:29,876 A:middle
even when the user
locks her phone.

46
00:02:30,096 --> 00:02:32,526 A:middle
So, when you lock your phone
and you put it in your pocket,

47
00:02:32,526 --> 00:02:33,816 A:middle
you kind of expect
it to go to sleep.

48
00:02:34,526 --> 00:02:38,896 A:middle
But in iOS 6, that background
task would keep the phone awake

49
00:02:39,296 --> 00:02:42,466 A:middle
and then it would only go to
sleep after that task has ended.

50
00:02:43,796 --> 00:02:47,506 A:middle
In iOS 7, we've changed
this slightly

51
00:02:47,506 --> 00:02:49,096 A:middle
to improve battery life.

52
00:02:50,076 --> 00:02:53,296 A:middle
So, we have where the
application enters the

53
00:02:53,296 --> 00:02:56,316 A:middle
background, where it locks and
you'll see that the phone goes

54
00:02:56,316 --> 00:02:57,626 A:middle
to sleep shortly afterwards.

55
00:02:58,406 --> 00:03:02,416 A:middle
And that anytime that the
device is awake to, for example,

56
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

57
00:03:02,886 --> 00:03:07,196 A:middle
check mail, your application
will get a chance to run

58
00:03:07,196 --> 00:03:11,466 A:middle
at that point too, so you get
these opportunistic slices

59
00:03:11,466 --> 00:03:12,926 A:middle
of time to run.

60
00:03:13,056 --> 00:03:15,426 A:middle
And you'll see that you still
get about the same amount

61
00:03:15,426 --> 00:03:17,026 A:middle
of time to run your task.

62
00:03:17,056 --> 00:03:19,556 A:middle
It's just split up
over that period.

63
00:03:20,556 --> 00:03:26,456 A:middle
So, if you're an application
that uses the background tasks

64
00:03:26,456 --> 00:03:30,076 A:middle
to transfer files, in iOS 7,
we're going to encourage you

65
00:03:30,076 --> 00:03:34,246 A:middle
to use the NSURLSession API
and we're going to discuss what

66
00:03:34,246 --> 00:03:36,726 A:middle
that looks like and how to
use that in a little bit.

67
00:03:36,726 --> 00:03:40,056 A:middle
And of course, if you're
going to support iOS 6 as well

68
00:03:40,186 --> 00:03:43,496 A:middle
as iOS 7, all we ask is
that you check to see

69
00:03:43,496 --> 00:03:47,136 A:middle
if that class exists and use
the new enqueuing behavior

70
00:03:47,576 --> 00:03:48,556 A:middle
but of course, continuing

71
00:03:48,556 --> 00:03:51,836 A:middle
to use your old stuff
for iOS 6 as well.

72
00:03:53,126 --> 00:03:54,376 A:middle
So, just to summarize,

73
00:03:55,466 --> 00:03:57,936 A:middle
applications will no
longer keep the device awake

74
00:03:58,286 --> 00:03:59,516 A:middle
when you're running these tasks.

75
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

76
00:04:00,276 --> 00:04:03,136 A:middle
You'll still get several minutes
of runtime just as before,

77
00:04:03,446 --> 00:04:05,266 A:middle
it's just not guaranteed
to be contiguous.

78
00:04:05,826 --> 00:04:10,726 A:middle
So, next stop is
the App Switcher.

79
00:04:11,266 --> 00:04:13,446 A:middle
So, I hope you guys
noticed yesterday,

80
00:04:13,446 --> 00:04:15,646 A:middle
we have a great new
App Switcher.

81
00:04:15,936 --> 00:04:20,036 A:middle
It prominently features
snapshots, so users can go

82
00:04:20,036 --> 00:04:23,196 A:middle
through and find what they're
looking for just by recognition.

83
00:04:24,016 --> 00:04:27,056 A:middle
So, the really important
thing to note about this is

84
00:04:27,106 --> 00:04:29,206 A:middle
that your snapshots
that got taken

85
00:04:29,206 --> 00:04:30,486 A:middle
after your application goes

86
00:04:30,486 --> 00:04:35,316 A:middle
into the background is even
more important, and it's really,

87
00:04:35,316 --> 00:04:38,236 A:middle
really important now that
you go back to the same place

88
00:04:38,236 --> 00:04:40,436 A:middle
that the user was
at when they left.

89
00:04:41,116 --> 00:04:45,146 A:middle
And if you haven't seen it
before, I encourage you to go

90
00:04:45,146 --> 00:04:48,536 A:middle
to the State Restoration talk
that will be on Thursday.

91
00:04:48,536 --> 00:04:50,886 A:middle
And you'll be able to see how

92
00:04:50,886 --> 00:04:52,636 A:middle
to use State Restoration
to do that.

93
00:04:52,636 --> 00:04:53,816 A:middle
It's a really simple API.

94
00:04:53,816 --> 00:04:55,046 A:middle
It's very powerful.

95
00:04:55,396 --> 00:04:57,726 A:middle
You'll be able to use that
to make sure that when

96
00:04:57,726 --> 00:05:01,056 A:middle
that user taps that snapshot and
it flies in, it goes right back

97
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

98
00:05:01,056 --> 00:05:02,506 A:middle
into the same place
that they left it.

99
00:05:04,056 --> 00:05:08,586 A:middle
Also, users will be able to
swipe up to remove applications,

100
00:05:08,726 --> 00:05:13,786 A:middle
and so just as before in iOS 6,
that will stop the application

101
00:05:13,786 --> 00:05:16,836 A:middle
from running but now in
iOS 7, it will also stop

102
00:05:16,836 --> 00:05:18,436 A:middle
that application from
running in the background.

103
00:05:18,986 --> 00:05:21,156 A:middle
And we've made this consistent
across a number of APIs,

104
00:05:21,156 --> 00:05:24,496 A:middle
but you guys should be
aware that that is what's--

105
00:05:25,566 --> 00:05:31,436 A:middle
that will be what's happening
when the application is removed.

106
00:05:31,556 --> 00:05:34,106 A:middle
So, we applied these to
location services as well,

107
00:05:34,316 --> 00:05:36,156 A:middle
so with respect to the
App Switcher state,

108
00:05:36,586 --> 00:05:39,246 A:middle
so your application
for region monitoring

109
00:05:39,246 --> 00:05:42,196 A:middle
or significant location changes
won't launch in the background

110
00:05:42,196 --> 00:05:43,606 A:middle
if the users remove
that application.

111
00:05:44,206 --> 00:05:47,236 A:middle
In addition, users will be
able to configure whether

112
00:05:47,236 --> 00:05:48,796 A:middle
or not they want that
application to run

113
00:05:48,796 --> 00:05:52,856 A:middle
in the background with the new
Background App Refresh Settings

114
00:05:52,856 --> 00:05:53,976 A:middle
under General.

115
00:05:57,536 --> 00:05:58,136 A:middle
Newsstand.

116
00:05:58,766 --> 00:06:01,246 A:middle
So quick note about
Newsstand, we've only updated it

117
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

118
00:06:01,926 --> 00:06:03,286 A:middle
to support these two things,

119
00:06:03,286 --> 00:06:04,736 A:middle
Settings as well as
the App Switcher.

120
00:06:05,896 --> 00:06:09,236 A:middle
You'll see a lot of really great
APIs here that might be tempting

121
00:06:09,236 --> 00:06:11,506 A:middle
to use if you're a
Newsstand developer.

122
00:06:12,356 --> 00:06:16,186 A:middle
Suffice it to say, we
encourage you to stick

123
00:06:16,186 --> 00:06:19,956 A:middle
with the Newsstand API for your
Newsstand behavior and that

124
00:06:20,126 --> 00:06:21,846 A:middle
for new features,
you'll certainly want

125
00:06:21,846 --> 00:06:23,066 A:middle
to consider using our new stuff.

126
00:06:23,616 --> 00:06:29,786 A:middle
OK, so with that, let's dive in.

127
00:06:29,906 --> 00:06:34,006 A:middle
First, multitasking API
is background app fetch.

128
00:06:35,276 --> 00:06:39,306 A:middle
And what this is, is
it's a periodic way

129
00:06:39,306 --> 00:06:42,226 A:middle
for your application to get
launched into the background

130
00:06:42,616 --> 00:06:45,316 A:middle
to update its content.

131
00:06:45,386 --> 00:06:49,626 A:middle
It's based on when the user
actually users your application

132
00:06:50,156 --> 00:06:55,566 A:middle
so that your fetch opportunities
can be as fresh as possible.

133
00:06:55,916 --> 00:06:58,626 A:middle
And we'll go into a little bit
about what that means and how

134
00:06:58,626 --> 00:07:01,026 A:middle
that works so that you guys
can get an understanding of how

135
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

136
00:07:01,026 --> 00:07:01,896 A:middle
to build your features.

137
00:07:02,356 --> 00:07:05,846 A:middle
Next stop is notifications.

138
00:07:07,186 --> 00:07:08,576 A:middle
This is really a great API.

139
00:07:10,306 --> 00:07:12,256 A:middle
We've had lots of
request for this

140
00:07:12,336 --> 00:07:13,926 A:middle
and I think you guys
are going to love this.

141
00:07:14,936 --> 00:07:18,166 A:middle
This basically just gives
your application a chance

142
00:07:18,166 --> 00:07:21,336 A:middle
to launch whenever you send
it a push notification crafted

143
00:07:21,336 --> 00:07:24,786 A:middle
in a certain way,
it can actually wake

144
00:07:24,786 --> 00:07:26,636 A:middle
up your application
in the background

145
00:07:26,636 --> 00:07:28,196 A:middle
with a silent push notification.

146
00:07:28,626 --> 00:07:30,896 A:middle
So that if there's
something immediate that needs

147
00:07:30,896 --> 00:07:32,966 A:middle
to happen inside of the
application but doesn't need

148
00:07:32,966 --> 00:07:35,466 A:middle
to bother the user,
you can do that too.

149
00:07:35,466 --> 00:07:37,236 A:middle
It's really great.

150
00:07:37,416 --> 00:07:40,496 A:middle
And lastly is a Background
Transfer Service,

151
00:07:41,166 --> 00:07:44,736 A:middle
so this will allow you
to enqueue large uploads

152
00:07:44,736 --> 00:07:48,056 A:middle
and downloads for iOS to
continue in the background

153
00:07:48,106 --> 00:07:51,776 A:middle
after the user leaves your
application and can continue

154
00:07:51,776 --> 00:07:54,566 A:middle
across reboots and just
handles all of that for you.

155
00:07:54,716 --> 00:07:55,226 A:middle
It's really great.

156
00:07:56,686 --> 00:07:58,246 A:middle
So with that, let's
start talking

157
00:07:58,246 --> 00:08:01,196 A:middle
about background app refresh.

158
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

159
00:08:01,296 --> 00:08:03,606 A:middle
So, let's say you've got
the next great social

160
00:08:03,606 --> 00:08:04,636 A:middle
networking application.

161
00:08:06,796 --> 00:08:09,886 A:middle
Now, this might sound
typical to all of you,

162
00:08:09,886 --> 00:08:11,096 A:middle
or familiar to all of you.

163
00:08:11,606 --> 00:08:13,076 A:middle
When your app becomes
front most,

164
00:08:13,076 --> 00:08:14,826 A:middle
you typically refresh
your feed right then,

165
00:08:14,856 --> 00:08:16,776 A:middle
which means that
for a few seconds,

166
00:08:16,896 --> 00:08:18,446 A:middle
your users are stuck looking

167
00:08:18,446 --> 00:08:21,896 A:middle
at what they saw last
time and not what's new.

168
00:08:22,146 --> 00:08:24,006 A:middle
And obviously, they've
gone to your application

169
00:08:24,006 --> 00:08:26,536 A:middle
to see what's going
on with your--

170
00:08:26,656 --> 00:08:29,706 A:middle
you know, with their
friends and family.

171
00:08:31,426 --> 00:08:37,145 A:middle
So, now in iOS 7, you can update
your content before the user

172
00:08:37,145 --> 00:08:38,265 A:middle
returns to your application.

173
00:08:38,836 --> 00:08:41,645 A:middle
So, just like you resume
mail and has new mail there,

174
00:08:41,645 --> 00:08:44,376 A:middle
then you can get that
same experience in iOS 7.

175
00:08:45,336 --> 00:08:48,496 A:middle
So, that new interesting
content is just waiting there

176
00:08:48,496 --> 00:08:51,986 A:middle
for the users to go and see.

177
00:08:52,236 --> 00:08:55,406 A:middle
So, let's dig into the API.

178
00:08:55,406 --> 00:08:58,196 A:middle
It's really simple, but it's a
common pattern that we're going

179
00:08:58,196 --> 00:08:59,086 A:middle
to use throughout the top.

180
00:08:59,086 --> 00:09:01,956 A:middle
So, I want you to pay
attention to how this works.

181
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

182
00:09:03,916 --> 00:09:07,036 A:middle
The first thing you do is
either in the Info.plist

183
00:09:07,036 --> 00:09:10,616 A:middle
or in the new Xcode feature
capability's PNG, you're going

184
00:09:10,616 --> 00:09:13,906 A:middle
to enable Background
Fetch by adding this key

185
00:09:13,906 --> 00:09:16,096 A:middle
to UI background modes.

186
00:09:16,806 --> 00:09:20,336 A:middle
The second thing you do is you
set this Minimum Background

187
00:09:20,336 --> 00:09:23,366 A:middle
Fetch interval and that
will allow your application

188
00:09:23,366 --> 00:09:25,186 A:middle
to enable these fetches
to start with.

189
00:09:26,036 --> 00:09:29,406 A:middle
And we'll go over what
these values are and what

190
00:09:29,616 --> 00:09:33,466 A:middle
that actually means in
practice in just a moment.

191
00:09:34,076 --> 00:09:36,266 A:middle
Finally, once your
application does get launched

192
00:09:36,266 --> 00:09:39,286 A:middle
in the background, it'll go
through this typical pattern

193
00:09:39,356 --> 00:09:42,426 A:middle
where it did finish launching,
gets called, and then obviously

194
00:09:42,426 --> 00:09:44,076 A:middle
if your application
was already running

195
00:09:44,076 --> 00:09:45,776 A:middle
and it was simply
suspended in the background,

196
00:09:46,786 --> 00:09:49,586 A:middle
your application will be
resumed and perform fetch

197
00:09:49,686 --> 00:09:51,236 A:middle
with completion handle
will be called.

198
00:09:51,236 --> 00:09:52,896 A:middle
So, this is our new
delegate callback

199
00:09:52,896 --> 00:09:54,086 A:middle
in UIApplicationDelegate.

200
00:09:54,806 --> 00:09:57,396 A:middle
All you do is you implement
that, you get passed

201
00:09:57,396 --> 00:10:00,846 A:middle
in a completion handler
and from that point on,

202
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

203
00:10:01,366 --> 00:10:03,986 A:middle
you're allowed a certain
amount of time in order

204
00:10:03,986 --> 00:10:06,156 A:middle
to kick off any network
request you need to do

205
00:10:06,476 --> 00:10:10,826 A:middle
to retrieve new content
and update your UI.

206
00:10:11,046 --> 00:10:14,246 A:middle
And then after you've done
all of that and you've gotten

207
00:10:14,246 --> 00:10:16,086 A:middle
that brand new stuff,
you're going

208
00:10:16,086 --> 00:10:17,746 A:middle
to call the completion
handler that was called--

209
00:10:17,796 --> 00:10:20,176 A:middle
that was passed in and
that's really important.

210
00:10:20,306 --> 00:10:25,036 A:middle
That's where your snapshot
gets taken and will go right

211
00:10:25,036 --> 00:10:28,716 A:middle
into that app switcher UI, so
that if the user is passing

212
00:10:28,716 --> 00:10:30,976 A:middle
by your application-- the app
switcher, they can see, "Hey,

213
00:10:31,016 --> 00:10:32,246 A:middle
look, there's brand
new content there.

214
00:10:32,666 --> 00:10:34,046 A:middle
That's a cool new picture,
I want to see that."

215
00:10:35,686 --> 00:10:38,176 A:middle
In addition, it also saves
the state restoration archive

216
00:10:38,176 --> 00:10:41,876 A:middle
so that, of course, when you
tap that, the user goes right

217
00:10:41,876 --> 00:10:43,206 A:middle
into your application even

218
00:10:43,206 --> 00:10:48,916 A:middle
if it may have exited
in the background.

219
00:10:48,916 --> 00:10:51,056 A:middle
So, let's talk about the
minimum fetch interval.

220
00:10:51,846 --> 00:10:54,866 A:middle
So with that same social
networking app, right,

221
00:10:55,646 --> 00:10:57,826 A:middle
it's like any other application,
you have a user account

222
00:10:57,826 --> 00:10:58,736 A:middle
that you have to log in with.

223
00:10:59,346 --> 00:11:02,886 A:middle
And so when the user first
installs it, it starts signed

224
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

225
00:11:02,886 --> 00:11:05,226 A:middle
out which means that
there's no content available.

226
00:11:06,036 --> 00:11:09,746 A:middle
And so the default value of the
minimum fetch interval is never.

227
00:11:10,296 --> 00:11:13,246 A:middle
Once the user signs in, however,

228
00:11:14,716 --> 00:11:16,476 A:middle
the content will
then be available.

229
00:11:16,766 --> 00:11:20,186 A:middle
So you can set that
fetch interval to minimum

230
00:11:20,386 --> 00:11:24,206 A:middle
and that means that the system
will use a reasonable default

231
00:11:24,276 --> 00:11:28,466 A:middle
in order to find out when your
application should be launched

232
00:11:28,466 --> 00:11:28,886 A:middle
to update.

233
00:11:29,646 --> 00:11:31,676 A:middle
And of course, the cycle
completes, if the user happens

234
00:11:31,676 --> 00:11:33,796 A:middle
to log out, you want to
set that back to never.

235
00:11:34,996 --> 00:11:38,036 A:middle
So never and minimum are two
of the values that you can use,

236
00:11:38,396 --> 00:11:41,056 A:middle
but of course you can set
a custom value expressed

237
00:11:41,056 --> 00:11:41,946 A:middle
in seconds.

238
00:11:41,946 --> 00:11:45,996 A:middle
So let's take a look
at what that actually--

239
00:11:46,356 --> 00:11:47,466 A:middle
how that actually works.

240
00:11:47,786 --> 00:11:50,286 A:middle
So let's say that I-- app
icon there represents some app

241
00:11:50,286 --> 00:11:52,646 A:middle
activity like the user
using your application

242
00:11:53,136 --> 00:11:54,456 A:middle
or a previous fetch.

243
00:11:55,006 --> 00:11:58,466 A:middle
For a limited amount
of time afterwards,

244
00:11:58,566 --> 00:11:59,646 A:middle
fetching will be disabled.

245
00:11:59,646 --> 00:12:02,966 A:middle
So if you set this to let's
say an hour, for the next hour,

246
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

247
00:12:03,356 --> 00:12:05,356 A:middle
the system will not
wake up your application

248
00:12:05,356 --> 00:12:06,386 A:middle
in order to go and fetch.

249
00:12:07,666 --> 00:12:09,536 A:middle
But that for any
time after that,

250
00:12:10,046 --> 00:12:11,566 A:middle
fetching will be
allowed at any time.

251
00:12:11,956 --> 00:12:14,836 A:middle
So if you zoom out a little
bit, what that looks like is

252
00:12:14,896 --> 00:12:16,416 A:middle
that there's no repeating
interval.

253
00:12:16,416 --> 00:12:18,156 A:middle
It just means that
there's a period of time

254
00:12:18,156 --> 00:12:21,876 A:middle
after your app launches where
the system won't wake it up.

255
00:12:22,516 --> 00:12:24,756 A:middle
Now, you might ask, "Why
would you want to do that?

256
00:12:24,756 --> 00:12:27,766 A:middle
Of course, I want to be
updated all the time."

257
00:12:27,986 --> 00:12:30,066 A:middle
So I'll give you an example.

258
00:12:30,676 --> 00:12:33,426 A:middle
Let's say you have an
application that reads data

259
00:12:33,426 --> 00:12:35,236 A:middle
from a number of
personal weather stations

260
00:12:35,616 --> 00:12:37,076 A:middle
and that's really
expensive to do,

261
00:12:37,076 --> 00:12:39,296 A:middle
so you only do it once an hour.

262
00:12:39,556 --> 00:12:43,916 A:middle
You know ahead of time that
your content only updates once

263
00:12:43,916 --> 00:12:44,276 A:middle
an hour.

264
00:12:44,276 --> 00:12:46,856 A:middle
So if you were being woken up
let's say every 15 minutes,

265
00:12:47,206 --> 00:12:49,956 A:middle
that would be a waste of
the user's battery life

266
00:12:49,956 --> 00:12:52,196 A:middle
and it would be a waste
of your server resources.

267
00:12:52,616 --> 00:12:54,146 A:middle
So you can set this
value to that.

268
00:12:54,576 --> 00:12:56,256 A:middle
But if you don't have
constraints like that,

269
00:12:56,356 --> 00:12:58,846 A:middle
we highly encourage you to
use the default minimum.

270
00:12:59,306 --> 00:13:01,376 A:middle
We think that will give you
a really great experience

271
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

272
00:13:01,376 --> 00:13:04,316 A:middle
and give your users
the right thing.

273
00:13:04,516 --> 00:13:08,336 A:middle
So, with that I'd like to invite
up on stage Brittany Hughes

274
00:13:08,336 --> 00:13:11,166 A:middle
from the SpringBoard team
and she'll show us how

275
00:13:11,166 --> 00:13:14,726 A:middle
to update your application
with these APIs

276
00:13:14,926 --> 00:13:16,816 A:middle
and how easy it is
to do an Xcode.

277
00:13:17,316 --> 00:13:22,996 A:middle
[Applause]

278
00:13:23,496 --> 00:13:25,326 A:middle
>> Hi. My name is Brittany
and I'm going to show you how

279
00:13:25,326 --> 00:13:27,506 A:middle
to update your app to fetch
new content in the background.

280
00:13:28,536 --> 00:13:32,316 A:middle
OK, I think I have the next
great social networking app.

281
00:13:32,596 --> 00:13:35,896 A:middle
I've been working on an app that
is a social network for clowns

282
00:13:35,896 --> 00:13:37,456 A:middle
and clown enthusiasts.

283
00:13:37,566 --> 00:13:38,566 A:middle
I call it Clowntown.

284
00:13:38,626 --> 00:13:41,076 A:middle
So, let's start by giving
you a little tour of my app.

285
00:13:42,516 --> 00:13:46,666 A:middle
[ Pause ]

286
00:13:47,166 --> 00:13:48,606 A:middle
OK, here we go.

287
00:13:49,476 --> 00:13:50,946 A:middle
You can see it's
a very simple app.

288
00:13:50,946 --> 00:13:53,956 A:middle
It just has a lot of posts
from my clown friends.

289
00:13:54,576 --> 00:13:56,876 A:middle
I can pull the refresh
to get new posts

290
00:13:57,926 --> 00:13:59,936 A:middle
and when I just pulled
the refresh,

291
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

292
00:14:00,166 --> 00:14:01,606 A:middle
we just got two new posts.

293
00:14:01,606 --> 00:14:04,426 A:middle
They're marked in blue and
if you look really closely

294
00:14:04,426 --> 00:14:06,926 A:middle
down here on the corner of
a post, there's a timestamp.

295
00:14:07,466 --> 00:14:09,726 A:middle
That means these posts
were downloaded at 2:20.

296
00:14:10,366 --> 00:14:14,306 A:middle
So unfortunately for my
users, the only way for them

297
00:14:14,306 --> 00:14:16,426 A:middle
to see new posts from
their clown friends is

298
00:14:16,426 --> 00:14:17,196 A:middle
to pull the refresh.

299
00:14:17,976 --> 00:14:21,016 A:middle
Wouldn't it be great if my
app was already up to date

300
00:14:21,016 --> 00:14:21,906 A:middle
when the user launched it?

301
00:14:22,916 --> 00:14:24,766 A:middle
Well now in iOS 7,
we can do that.

302
00:14:24,766 --> 00:14:25,446 A:middle
Let me show you how.

303
00:14:25,976 --> 00:14:29,516 A:middle
The first thing we
need to do is we need

304
00:14:29,516 --> 00:14:31,026 A:middle
to add the new UI
background mode.

305
00:14:31,856 --> 00:14:33,616 A:middle
Xcode 5 has made it much easier

306
00:14:33,616 --> 00:14:35,316 A:middle
to manage your UI
background modes.

307
00:14:36,216 --> 00:14:38,306 A:middle
All you have to do is
click on your project

308
00:14:38,306 --> 00:14:39,886 A:middle
over here on the left.

309
00:14:39,886 --> 00:14:42,076 A:middle
And then on the Capabilities
tab,

310
00:14:42,826 --> 00:14:44,836 A:middle
down here there's a
background mode section.

311
00:14:45,236 --> 00:14:48,616 A:middle
If I zoom in here, you
can see here is the list

312
00:14:48,616 --> 00:14:53,746 A:middle
of background modes, so I'm just
going to check Background Fetch

313
00:14:53,746 --> 00:14:58,156 A:middle
and now it's added to my apps
Info.plist The next thing I need

314
00:14:58,156 --> 00:15:01,326 A:middle
to do is I need to set my
apps minimum fetch interval.

315
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

316
00:15:02,056 --> 00:15:05,426 A:middle
This is super important because
the default interval is never,

317
00:15:05,616 --> 00:15:07,746 A:middle
that means my app will
never be given a chance

318
00:15:07,826 --> 00:15:08,706 A:middle
to run in the background.

319
00:15:09,336 --> 00:15:14,866 A:middle
I'm going to set my apps
minimum fetch interval

320
00:15:14,866 --> 00:15:18,036 A:middle
to the minimum interval which
means that iOS will decide

321
00:15:18,036 --> 00:15:19,936 A:middle
when it's best for my app
to run in the background.

322
00:15:20,356 --> 00:15:24,406 A:middle
The next thing I
need to do is I need

323
00:15:24,406 --> 00:15:26,836 A:middle
to implement the new UI
application delegate callback.

324
00:15:28,376 --> 00:15:30,756 A:middle
Application performs fetch
with completion handler.

325
00:15:31,886 --> 00:15:34,596 A:middle
In this method, I need
to go fetch my new posts.

326
00:15:35,396 --> 00:15:38,556 A:middle
I need to update my apps
UI to show the new posts,

327
00:15:38,976 --> 00:15:41,536 A:middle
and then I need to call the
completion handler to signal

328
00:15:41,536 --> 00:15:43,626 A:middle
to iOS that I'm finished
with my refresh.

329
00:15:44,966 --> 00:15:46,516 A:middle
Let's go check out
my View Controller

330
00:15:46,516 --> 00:15:48,466 A:middle
to see what options I have.

331
00:15:50,426 --> 00:15:54,176 A:middle
OK, it looks like I have
conveniently refreshed

332
00:15:54,176 --> 00:15:55,126 A:middle
with completion handler.

333
00:15:56,076 --> 00:15:56,656 A:middle
Let's use that.

334
00:15:58,246 --> 00:16:00,186 A:middle
It looks like this
method takes in a block

335
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

336
00:16:00,186 --> 00:16:01,606 A:middle
than when the refresh
is finished,

337
00:16:01,886 --> 00:16:03,596 A:middle
will give me back a bool whether

338
00:16:03,596 --> 00:16:07,326 A:middle
or not we downloaded new
post in that refresh.

339
00:16:07,556 --> 00:16:08,596 A:middle
Let's add that over here

340
00:16:08,916 --> 00:16:11,346 A:middle
in my UI application
delegate callback.

341
00:16:13,326 --> 00:16:17,576 A:middle
Now inside this block,
what I need to do is I need

342
00:16:17,576 --> 00:16:20,236 A:middle
to call the UI application
delegates completion handler.

343
00:16:21,006 --> 00:16:23,916 A:middle
The UIApplicationDelegate's
completion handler can take a

344
00:16:23,916 --> 00:16:25,116 A:middle
couple of different arguments.

345
00:16:25,756 --> 00:16:28,926 A:middle
So, if we did receive
new posts, then I'm going

346
00:16:28,926 --> 00:16:30,246 A:middle
to call the completion handler

347
00:16:30,246 --> 00:16:32,566 A:middle
with UI Background
Fetch result new data.

348
00:16:33,886 --> 00:16:35,956 A:middle
If there weren't any new
posts, then I'm going

349
00:16:35,956 --> 00:16:37,116 A:middle
to call the completion handler

350
00:16:37,116 --> 00:16:39,136 A:middle
with UI Background
Fetch result no data.

351
00:16:39,876 --> 00:16:43,736 A:middle
OK, let's go check out
and see what refresh

352
00:16:43,766 --> 00:16:45,476 A:middle
with completion handler
actually does.

353
00:16:50,426 --> 00:16:53,186 A:middle
OK, it looks like it takes
that completion handler

354
00:16:53,186 --> 00:16:54,626 A:middle
and assigns it to a property.

355
00:16:55,476 --> 00:16:57,476 A:middle
This was probably
a good idea before

356
00:16:57,476 --> 00:17:00,066 A:middle
when there was only one
code path that was coming

357
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

358
00:17:00,066 --> 00:17:01,406 A:middle
through here, but now
that we just added

359
00:17:01,406 --> 00:17:03,766 A:middle
that second code path, it's
not a great idea anymore.

360
00:17:04,486 --> 00:17:07,266 A:middle
The reason why this isn't a good
idea is because it's possible

361
00:17:07,266 --> 00:17:09,665 A:middle
for us to come through
this method one time

362
00:17:09,665 --> 00:17:12,596 A:middle
with a completion handler,
stash it away in our property

363
00:17:13,116 --> 00:17:16,046 A:middle
and then before that refresh
is finished, we'll come in here

364
00:17:16,046 --> 00:17:17,435 A:middle
with a different
completion handler,

365
00:17:18,086 --> 00:17:20,675 A:middle
assign it to the property which
will overwrite the first one.

366
00:17:20,675 --> 00:17:23,146 A:middle
That means the first completion
handler will never get called.

367
00:17:24,346 --> 00:17:25,915 A:middle
One of the most important things

368
00:17:25,986 --> 00:17:28,286 A:middle
about the UI application
delegate callback is

369
00:17:28,286 --> 00:17:29,746 A:middle
that we call the
completion handler.

370
00:17:30,156 --> 00:17:33,136 A:middle
Like I said a minute ago,
that's the signal to the system

371
00:17:33,136 --> 00:17:35,346 A:middle
that we're done with everything,
we're ready to be snapshotted.

372
00:17:35,926 --> 00:17:38,886 A:middle
If I don't call the completion
handler, bad things will happen.

373
00:17:40,326 --> 00:17:43,536 A:middle
So, instead of signing it to
a property, let's just get rid

374
00:17:43,536 --> 00:17:46,696 A:middle
of that and let's pass the
completion handler all the way

375
00:17:46,696 --> 00:17:47,586 A:middle
through the refresh.

376
00:17:47,586 --> 00:17:49,996 A:middle
So I'm going to delete that
line, I'm going to get rid

377
00:17:49,996 --> 00:17:55,066 A:middle
of my property and then
I'll just change this method

378
00:17:55,066 --> 00:17:57,796 A:middle
to fetch new posts with
completion handler.

379
00:17:58,396 --> 00:18:03,346 A:middle
And then that means I need
to update the signature

380
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

381
00:18:04,066 --> 00:18:07,036 A:middle
to fetch new posts with
completion handler.

382
00:18:07,036 --> 00:18:09,376 A:middle
And then inside this method,

383
00:18:09,376 --> 00:18:12,536 A:middle
it's look like we were
referencing the completion

384
00:18:12,536 --> 00:18:14,466 A:middle
handler property that
we just get rid of.

385
00:18:14,926 --> 00:18:18,506 A:middle
So instead, let's just reference
the completion handler argument.

386
00:18:22,086 --> 00:18:26,856 A:middle
OK, looks like everything's
going good so far.

387
00:18:26,856 --> 00:18:28,896 A:middle
Let me run my app and make
sure I didn't break anything.

388
00:18:33,616 --> 00:18:35,426 A:middle
OK, here we are,
looks good so far.

389
00:18:36,046 --> 00:18:38,166 A:middle
If I pull the refresh,
all right,

390
00:18:39,516 --> 00:18:41,976 A:middle
we've got three new posts,
they're marked in blue

391
00:18:41,976 --> 00:18:47,946 A:middle
and their timestamp is 2:24
p.m. Now, I need to test

392
00:18:47,946 --> 00:18:50,716 A:middle
that my app can actually fetch
new content in the background.

393
00:18:51,306 --> 00:18:54,066 A:middle
There are two very important
scenarios you need to test here.

394
00:18:54,426 --> 00:18:56,776 A:middle
The first scenario is
having your app launched

395
00:18:56,966 --> 00:18:58,556 A:middle
in the background to
fetch new content.

396
00:18:59,236 --> 00:19:01,456 A:middle
The second scenario is
having your app resumed

397
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

398
00:19:01,456 --> 00:19:02,956 A:middle
in the background to
fetch new content.

399
00:19:03,816 --> 00:19:05,316 A:middle
Let's test the resume
case first.

400
00:19:05,366 --> 00:19:10,416 A:middle
I recommend testing the resume
case by creating a new scheme.

401
00:19:10,416 --> 00:19:12,676 A:middle
So what I'm going to do is
I'm going to come up here

402
00:19:12,676 --> 00:19:15,186 A:middle
to my scheme list and I'm
going to hit Manage Schemes.

403
00:19:16,546 --> 00:19:18,336 A:middle
And I just have one the default,

404
00:19:18,336 --> 00:19:22,026 A:middle
so I'm just going
to duplicate that.

405
00:19:22,236 --> 00:19:27,006 A:middle
Let's call it Clowntown
Background Fetch with an R.

406
00:19:27,886 --> 00:19:33,806 A:middle
And if I zoom in here, in
the Run section of the scheme

407
00:19:33,806 --> 00:19:36,336 A:middle
under the Options tab,
there's a checkbox down here

408
00:19:36,336 --> 00:19:38,316 A:middle
that is Launch Due to a
Background Fetch Event.

409
00:19:38,316 --> 00:19:39,446 A:middle
So I'm just going to check that,

410
00:19:40,766 --> 00:19:44,836 A:middle
and zoom out and
then hit OK, OK.

411
00:19:45,396 --> 00:19:48,866 A:middle
Going to sneakily
clear this, OK.

412
00:19:49,216 --> 00:19:51,066 A:middle
And now I'm going to run my app.

413
00:19:53,116 --> 00:19:55,526 A:middle
What you'll notice here is
that the simulator launched

414
00:19:55,526 --> 00:19:57,776 A:middle
and my app is running but
it's not in the foreground.

415
00:19:58,296 --> 00:19:59,436 A:middle
That's because it was launched

416
00:19:59,436 --> 00:20:01,556 A:middle
into the background
to fetch new content.

417
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

418
00:20:02,596 --> 00:20:04,636 A:middle
If I look down here in
the Syslog for my app,

419
00:20:05,136 --> 00:20:09,846 A:middle
it says that we fetched one new
post and then saved a snapshot.

420
00:20:09,946 --> 00:20:12,446 A:middle
Let's resume my app and
see what it looks like.

421
00:20:13,526 --> 00:20:16,576 A:middle
OK great, we have our one
new post, it's marked in blue

422
00:20:16,576 --> 00:20:18,836 A:middle
and the timestamp is 2:26 p.m.

423
00:20:18,836 --> 00:20:20,746 A:middle
That was just a couple
of seconds ago.

424
00:20:20,746 --> 00:20:22,356 A:middle
So the launch case worked.

425
00:20:22,356 --> 00:20:26,046 A:middle
Now we need to test
the resume case.

426
00:20:30,976 --> 00:20:34,726 A:middle
Xcode 5 has added
a new menu item

427
00:20:34,726 --> 00:20:37,546 A:middle
in the Debug menu called
Simulate Background Fetch

428
00:20:38,146 --> 00:20:39,296 A:middle
that will test the resume case.

429
00:20:39,296 --> 00:20:43,326 A:middle
So I'm just going to click that
and if I come back over here

430
00:20:43,326 --> 00:20:45,216 A:middle
at the simulator, it's
still running my apps not

431
00:20:45,216 --> 00:20:47,916 A:middle
in the foreground because it
was resumed in the background.

432
00:20:48,736 --> 00:20:50,306 A:middle
And if I check down
here on the Syslog,

433
00:20:50,306 --> 00:20:53,036 A:middle
it looks like we
fetched another new post

434
00:20:53,166 --> 00:20:54,416 A:middle
and saved another snapshot.

435
00:20:55,786 --> 00:21:00,016 A:middle
So let me resume my app and
see what it looks like now.

436
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

437
00:21:00,256 --> 00:21:02,346 A:middle
OK great, we have one
new post from Mr. Happy,

438
00:21:02,796 --> 00:21:06,576 A:middle
it's the blue post and
its timestamp is 2:26:52

439
00:21:06,576 --> 00:21:08,986 A:middle
which is just a couple
of seconds ago.

440
00:21:10,266 --> 00:21:13,186 A:middle
So we just verified that my app
could be launched and resumed

441
00:21:13,186 --> 00:21:14,686 A:middle
in the background to
fetch new content.

442
00:21:14,686 --> 00:21:17,356 A:middle
And now it's possible for
my app to be up to date

443
00:21:17,356 --> 00:21:19,146 A:middle
when the user launches my app.

444
00:21:19,696 --> 00:21:21,576 A:middle
You've seen how easy it
is to update your app

445
00:21:22,146 --> 00:21:23,456 A:middle
to fetch new content
in the background.

446
00:21:23,646 --> 00:21:24,366 A:middle
It's not that hard.

447
00:21:25,276 --> 00:21:25,886 A:middle
Back to you Dave.

448
00:21:27,516 --> 00:21:33,436 A:middle
[ Applause ]

449
00:21:33,936 --> 00:21:34,386 A:middle
>> Thanks Brittany.

450
00:21:35,696 --> 00:21:37,766 A:middle
So what did we learn?

451
00:21:38,506 --> 00:21:39,946 A:middle
It's really, really easy

452
00:21:40,056 --> 00:21:41,976 A:middle
to update your application
with the new APIs.

453
00:21:43,046 --> 00:21:45,096 A:middle
We've made it intentionally
very simple.

454
00:21:45,576 --> 00:21:47,716 A:middle
We think that it should be
really easy for you guys

455
00:21:47,716 --> 00:21:48,846 A:middle
to get started even today.

456
00:21:50,466 --> 00:21:53,006 A:middle
But two main points that
Brittany made, make sure to pass

457
00:21:53,006 --> 00:21:56,066 A:middle
that completion handler
all the way through so

458
00:21:56,066 --> 00:21:58,946 A:middle
that every perform
fetch is bookended

459
00:21:58,946 --> 00:22:00,316 A:middle
with calling the
completion handler

460
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

461
00:22:01,166 --> 00:22:03,656 A:middle
and calling the completion
handler with the proper status

462
00:22:03,656 --> 00:22:06,236 A:middle
of whether or not there's
new data, there's no data

463
00:22:06,636 --> 00:22:08,336 A:middle
or failed will give you--

464
00:22:08,336 --> 00:22:11,676 A:middle
will give us the
system more information

465
00:22:11,736 --> 00:22:15,436 A:middle
about how your application
is working.

466
00:22:16,266 --> 00:22:20,046 A:middle
So next, I wanted to pull
the curtain back a little bit

467
00:22:20,356 --> 00:22:24,996 A:middle
so that you guys can get a sense
of how Background Fetch works

468
00:22:24,996 --> 00:22:28,836 A:middle
under the-- behind
the curtains so that--

469
00:22:29,066 --> 00:22:31,686 A:middle
so that you can design your
features in the right way.

470
00:22:32,736 --> 00:22:34,716 A:middle
So the first thing that
you need to know is

471
00:22:34,776 --> 00:22:39,096 A:middle
that this system iOS
schedules these fetches.

472
00:22:40,006 --> 00:22:41,626 A:middle
It's important that
the system do this

473
00:22:41,626 --> 00:22:43,946 A:middle
so that these opportunities
can be coalesced

474
00:22:43,946 --> 00:22:45,036 A:middle
across applications.

475
00:22:45,366 --> 00:22:48,186 A:middle
That means that multiple
applications get an opportunity

476
00:22:48,186 --> 00:22:52,456 A:middle
fetch at the same time so
that we can optimize power,

477
00:22:52,906 --> 00:22:53,996 A:middle
that's really important.

478
00:22:54,346 --> 00:22:57,476 A:middle
You know, these phones
have great batteries

479
00:22:57,886 --> 00:23:00,796 A:middle
but you do too many of these
things at the same time and--

480
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

481
00:23:00,796 --> 00:23:03,256 A:middle
or you do too many of these
things over the course

482
00:23:03,256 --> 00:23:06,586 A:middle
of the day and that can
really wear it down.

483
00:23:07,016 --> 00:23:09,816 A:middle
The second thing to note
is that the system looks

484
00:23:09,816 --> 00:23:14,486 A:middle
at how users actually use their
device on the device in order

485
00:23:14,486 --> 00:23:17,566 A:middle
to see when they're
typically using it.

486
00:23:17,986 --> 00:23:20,556 A:middle
So that means it does a bit of
prediction in order to figure

487
00:23:20,556 --> 00:23:22,776 A:middle
out what the right
time to use that--

488
00:23:23,216 --> 00:23:24,866 A:middle
what the right time to
update that application.

489
00:23:27,106 --> 00:23:28,776 A:middle
The other thing that it
does is it's sensitive

490
00:23:28,806 --> 00:23:30,066 A:middle
to energy in daily users.

491
00:23:30,166 --> 00:23:33,656 A:middle
That means that it can look
at how much data is being used

492
00:23:33,656 --> 00:23:35,926 A:middle
and how much energy
is being used in order

493
00:23:35,926 --> 00:23:37,426 A:middle
to manage these fetches
correctly

494
00:23:37,516 --> 00:23:41,446 A:middle
so that we don't have users
with poor battery life

495
00:23:41,446 --> 00:23:46,816 A:middle
and excessive data plans.

496
00:23:46,816 --> 00:23:50,496 A:middle
And as we've mentioned before,
this is completely indifferent

497
00:23:50,496 --> 00:23:51,916 A:middle
to your actual app
running state.

498
00:23:51,916 --> 00:23:54,366 A:middle
If you happen to be
running, you'll get resumed.

499
00:23:55,326 --> 00:23:58,666 A:middle
If your application is no longer
running, you'll get launched.

500
00:23:58,936 --> 00:24:02,376 A:middle
So let me give you a
small example about--

501
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

502
00:24:03,026 --> 00:24:06,576 A:middle
of what I mean by-- when I
say adapts to user activity.

503
00:24:09,256 --> 00:24:12,726 A:middle
So let's say the user
uses their device

504
00:24:12,726 --> 00:24:15,576 A:middle
in this particular pattern
on the first day and uses it

505
00:24:15,576 --> 00:24:19,026 A:middle
in a slightly different way
on the second day and so on.

506
00:24:20,616 --> 00:24:24,366 A:middle
The device can observe this
pattern so it can really figure

507
00:24:24,366 --> 00:24:27,786 A:middle
out that yes, the user uses
this INN app in the morning.

508
00:24:28,606 --> 00:24:29,876 A:middle
And they use it around
lunch time

509
00:24:30,476 --> 00:24:31,666 A:middle
and then they use
it in the evening.

510
00:24:31,666 --> 00:24:33,906 A:middle
And that's a really
simple thing to observe

511
00:24:34,256 --> 00:24:36,816 A:middle
because then it allows us to
actually make this prediction

512
00:24:36,816 --> 00:24:38,196 A:middle
about when those apps get used.

513
00:24:38,846 --> 00:24:42,906 A:middle
And the best time to update
an application's info is just

514
00:24:42,906 --> 00:24:44,656 A:middle
before the user launches it.

515
00:24:45,506 --> 00:24:48,746 A:middle
So that the data is as
fresh and up to date

516
00:24:48,746 --> 00:24:50,856 A:middle
as possible before
they get into it.

517
00:24:51,906 --> 00:24:56,656 A:middle
So it allows us to
make this prediction.

518
00:24:56,706 --> 00:24:58,736 A:middle
So three main points
that you should remember.

519
00:24:59,536 --> 00:25:02,486 A:middle
It learns these patterns
based on actual device usage.

520
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

521
00:25:03,516 --> 00:25:07,306 A:middle
It coalesces, fetches across the
applications at the same time.

522
00:25:08,066 --> 00:25:11,366 A:middle
And this system allows us

523
00:25:11,366 --> 00:25:14,336 A:middle
to avoid frequent fetching
during periods of inactivity.

524
00:25:14,726 --> 00:25:17,816 A:middle
So of course, it would be
inefficient both for the device,

525
00:25:18,116 --> 00:25:21,926 A:middle
as well as your servers, if
we have the system fetching,

526
00:25:22,146 --> 00:25:24,616 A:middle
you know, every 15 minutes
or in the middle of the night

527
00:25:24,676 --> 00:25:28,426 A:middle
when the user is asleep.

528
00:25:28,546 --> 00:25:30,726 A:middle
So that's Background Fetch.

529
00:25:31,336 --> 00:25:33,916 A:middle
Now, we think this is going
to be incredibly useful

530
00:25:33,916 --> 00:25:36,086 A:middle
for many different
kinds of applications,

531
00:25:37,076 --> 00:25:39,256 A:middle
we thought about
social networking feeds,

532
00:25:39,366 --> 00:25:43,616 A:middle
news and entertainment
applications, blog aggregators,

533
00:25:43,996 --> 00:25:45,596 A:middle
weather apps, finance apps.

534
00:25:46,316 --> 00:25:48,556 A:middle
And we think that you can use
this in conjunction with one

535
00:25:48,556 --> 00:25:50,736 A:middle
of the other APIs that we're
going to be talking about soon,

536
00:25:51,006 --> 00:25:53,006 A:middle
call background transfers
in order

537
00:25:53,006 --> 00:25:56,466 A:middle
to download even bigger
things like photos or videos

538
00:25:56,766 --> 00:25:58,816 A:middle
to allow you to get
an experience

539
00:25:58,816 --> 00:26:00,706 A:middle
where the user can pop
up in your application

540
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

541
00:26:01,056 --> 00:26:02,936 A:middle
and instantly start
viewing, you know,

542
00:26:03,196 --> 00:26:05,076 A:middle
large beautiful photos
or videos.

543
00:26:09,336 --> 00:26:12,486 A:middle
So next, let's talk about
Remote Notifications.

544
00:26:13,026 --> 00:26:19,396 A:middle
So if any of you have a kind of
messaging functionality inside

545
00:26:19,396 --> 00:26:22,216 A:middle
of your application, I'm sure
you're familiar with this flow.

546
00:26:22,286 --> 00:26:28,666 A:middle
If I send a message to somebody
over my new application here,

547
00:26:30,376 --> 00:26:34,016 A:middle
what happens is my server send
a push to the Apple servers

548
00:26:34,016 --> 00:26:35,386 A:middle
and that sends a
push to the device

549
00:26:35,926 --> 00:26:38,536 A:middle
and that causes a
notification banner to show

550
00:26:38,536 --> 00:26:39,286 A:middle
up on the lock screen.

551
00:26:41,686 --> 00:26:45,196 A:middle
When the user goes and slides
to view that notification,

552
00:26:45,586 --> 00:26:48,016 A:middle
only then is your
application launched or resumed

553
00:26:48,676 --> 00:26:51,276 A:middle
and then that's when you go
and retrieve the full message

554
00:26:51,806 --> 00:26:54,336 A:middle
so that it's ready to view.

555
00:26:54,916 --> 00:26:57,726 A:middle
Now, this can leave
users with a bit of lag

556
00:26:57,836 --> 00:27:02,236 A:middle
where they see either the old
message or an old transcript

557
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

558
00:27:02,236 --> 00:27:03,546 A:middle
that they were looking
at before.

559
00:27:04,426 --> 00:27:07,296 A:middle
And then only after a few
seconds does it actually update

560
00:27:07,506 --> 00:27:09,566 A:middle
to show them their message.

561
00:27:10,126 --> 00:27:13,126 A:middle
So we flipped this around.

562
00:27:13,976 --> 00:27:18,996 A:middle
In iOS 7, you can actually get
woken up before the user sees

563
00:27:18,996 --> 00:27:20,036 A:middle
that banner notification.

564
00:27:20,356 --> 00:27:22,946 A:middle
So you can immediately
retrieve that message

565
00:27:23,376 --> 00:27:26,126 A:middle
and then make it ready
for viewing so that

566
00:27:26,126 --> 00:27:28,516 A:middle
when the user just swipes
to view on the lock screen,

567
00:27:29,006 --> 00:27:30,506 A:middle
they can see that
message right away

568
00:27:30,536 --> 00:27:32,876 A:middle
and we think this
is really powerful.

569
00:27:33,516 --> 00:27:41,526 A:middle
[ Applause ]

570
00:27:42,026 --> 00:27:46,916 A:middle
In addition, you can omit that
alert line and that'll allow you

571
00:27:46,916 --> 00:27:49,356 A:middle
to actually send a
silent notification.

572
00:27:50,126 --> 00:27:51,656 A:middle
And this gets delivered
in the background.

573
00:27:51,656 --> 00:27:53,856 A:middle
Again, if your app wasn't
running, we'd launch it.

574
00:27:54,196 --> 00:27:55,286 A:middle
If it is running, we resume it.

575
00:27:56,506 --> 00:27:58,516 A:middle
And you can go and retrieve
whatever content you need

576
00:27:58,516 --> 00:27:59,176 A:middle
to at this point.

577
00:27:59,846 --> 00:28:02,656 A:middle
Now, this is incredibly
powerful.

578
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

579
00:28:02,736 --> 00:28:05,776 A:middle
We think there's a lot of
applications that we'll be able

580
00:28:05,776 --> 00:28:07,966 A:middle
to take advantage of
this and do really,

581
00:28:07,966 --> 00:28:10,206 A:middle
really great auto
behavior with it.

582
00:28:10,976 --> 00:28:13,876 A:middle
There are a couple
things to note.

583
00:28:14,116 --> 00:28:17,976 A:middle
There's a new protocol that
we're introducing this year

584
00:28:19,196 --> 00:28:21,536 A:middle
that is optional right now.

585
00:28:21,536 --> 00:28:24,526 A:middle
That also was intended
to support silent pushes.

586
00:28:25,246 --> 00:28:29,716 A:middle
And you should go to the push
notifications lab on Wednesday

587
00:28:29,716 --> 00:28:32,276 A:middle
to learn more about it.

588
00:28:32,276 --> 00:28:34,606 A:middle
We think many providers
will get a kick

589
00:28:34,606 --> 00:28:36,556 A:middle
out of what the new
protocol can do.

590
00:28:36,746 --> 00:28:42,106 A:middle
But for you guys, all you need
to know is that you just need

591
00:28:42,106 --> 00:28:44,026 A:middle
to provide this content
available flag here

592
00:28:44,306 --> 00:28:47,266 A:middle
and you can set silent
notifications that gets

593
00:28:47,266 --> 00:28:48,016 A:middle
to your app up to date.

594
00:28:49,356 --> 00:28:50,286 A:middle
So let's take a look about the--

595
00:28:50,286 --> 00:28:52,216 A:middle
at the API in a little
bit more detail.

596
00:28:52,216 --> 00:28:55,096 A:middle
So this should be
a familiar pattern.

597
00:28:55,426 --> 00:28:57,996 A:middle
You just set this
Remote Notification key

598
00:28:57,996 --> 00:28:59,006 A:middle
in the UI background modes

599
00:28:59,056 --> 00:29:01,866 A:middle
or use the X code
feature capabilities menu

600
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

601
00:29:01,866 --> 00:29:04,996 A:middle
to enable this.

602
00:29:05,206 --> 00:29:10,656 A:middle
You set content-available 1
in your APS payload and then

603
00:29:10,846 --> 00:29:13,126 A:middle
when your app is launched in
the background or resumed,

604
00:29:14,006 --> 00:29:16,036 A:middle
you will get a,
didReceiveRemoteNotification

605
00:29:16,496 --> 00:29:17,436 A:middle
with a completion handler.

606
00:29:18,426 --> 00:29:21,086 A:middle
So that will allow you to go
and retrieve that new message

607
00:29:21,086 --> 00:29:22,296 A:middle
or whatever you need to do.

608
00:29:23,766 --> 00:29:25,756 A:middle
And then call the completion
handler when you're done.

609
00:29:27,306 --> 00:29:30,456 A:middle
So again, in order to do a
silent push, all you need

610
00:29:30,456 --> 00:29:38,476 A:middle
to do is omit that alert or
sound entry in the APS payload.

611
00:29:38,616 --> 00:29:41,896 A:middle
Important thing to realize about
silent notifications though is

612
00:29:42,146 --> 00:29:43,146 A:middle
that the rate limited.

613
00:29:44,086 --> 00:29:47,186 A:middle
With normal notifications,
we fully expect users

614
00:29:47,186 --> 00:29:48,186 A:middle
to be able to manage that.

615
00:29:48,296 --> 00:29:49,566 A:middle
If you're annoying your user,

616
00:29:49,856 --> 00:29:51,866 A:middle
they will clearly do
something about it.

617
00:29:52,536 --> 00:29:54,906 A:middle
But with silent notifications,
obviously,

618
00:29:54,906 --> 00:29:56,746 A:middle
if the user doesn't have
any indication of them,

619
00:29:57,126 --> 00:29:58,406 A:middle
they can't manage
that on their own.

620
00:29:59,346 --> 00:30:04,956 A:middle
So iOS and our push servers will
manage a rate limit for you.

621
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

622
00:30:05,926 --> 00:30:08,376 A:middle
And the thing you need
to get out of this is

623
00:30:08,376 --> 00:30:11,396 A:middle
that we're not asking you

624
00:30:11,396 --> 00:30:16,726 A:middle
to hold back your silent
push notifications.

625
00:30:17,236 --> 00:30:19,416 A:middle
We want you to send
them as frequently

626
00:30:19,416 --> 00:30:20,706 A:middle
as your application dictates.

627
00:30:22,156 --> 00:30:23,476 A:middle
And the thing you
need to realize is

628
00:30:23,526 --> 00:30:25,536 A:middle
that we've done the work
for you to make sure

629
00:30:25,536 --> 00:30:29,756 A:middle
that the device can protect
itself and that it can make sure

630
00:30:29,756 --> 00:30:30,986 A:middle
that it doesn't run out of power

631
00:30:30,986 --> 00:30:33,116 A:middle
because it's using too
many push notifications.

632
00:30:34,106 --> 00:30:37,416 A:middle
So, I just want to let you know
how this works so that you can--

633
00:30:37,576 --> 00:30:39,206 A:middle
as you're going ahead
and testing this

634
00:30:39,456 --> 00:30:43,196 A:middle
that you're not surprised by the
way the pushes are rate limited.

635
00:30:44,516 --> 00:30:48,356 A:middle
So when the push rate is
completely acceptable and,

636
00:30:48,356 --> 00:30:51,706 A:middle
you know, let's say you're
sending only a couple an hour,

637
00:30:51,706 --> 00:30:53,736 A:middle
something like that, both normal

638
00:30:53,736 --> 00:30:56,006 A:middle
and silent push notifications
are delivered immediately.

639
00:30:56,106 --> 00:30:57,946 A:middle
You have that same quality
service that we have today,

640
00:30:58,266 --> 00:31:00,516 A:middle
it just sends straight
through and of course,

641
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

642
00:31:00,886 --> 00:31:01,776 A:middle
they don't wake up the device.

643
00:31:02,496 --> 00:31:04,326 A:middle
Or rather they don't
wake the screen up.

644
00:31:05,336 --> 00:31:07,106 A:middle
When that push rate is too high,

645
00:31:07,526 --> 00:31:09,216 A:middle
silent pushes can
then get stored

646
00:31:09,216 --> 00:31:11,356 A:middle
for later delivery
on our servers.

647
00:31:11,696 --> 00:31:13,976 A:middle
And for those of
you who are familiar

648
00:31:13,976 --> 00:31:15,356 A:middle
with the way pushes work today,

649
00:31:15,866 --> 00:31:18,546 A:middle
we still have the same
storage guarantee, we store one

650
00:31:18,546 --> 00:31:21,056 A:middle
on the server, and if there's
another silent notification

651
00:31:21,056 --> 00:31:22,856 A:middle
that comes in when the push
rate is still too high,

652
00:31:23,256 --> 00:31:26,776 A:middle
that will get stored
in the server.

653
00:31:26,776 --> 00:31:30,776 A:middle
Then, if there's any
other communication

654
00:31:30,776 --> 00:31:33,696 A:middle
between the Apple push
service and the device,

655
00:31:34,326 --> 00:31:39,456 A:middle
we'll actually put that silent
notification on the back of that

656
00:31:39,456 --> 00:31:42,186 A:middle
and actually piggyback that
along, send along to the device.

657
00:31:42,606 --> 00:31:44,426 A:middle
So we're not halting
your pushes.

658
00:31:44,706 --> 00:31:46,816 A:middle
All we're doing is delaying
it by just a little bit

659
00:31:46,876 --> 00:31:49,696 A:middle
until when it's a good
time for the device

660
00:31:49,796 --> 00:31:51,566 A:middle
to receive it based on power.

661
00:31:53,036 --> 00:31:55,636 A:middle
So again, there's
nothing special

662
00:31:55,636 --> 00:31:56,616 A:middle
that you need to do here.

663
00:31:56,996 --> 00:32:00,306 A:middle
All you need to do is
realize that the device

664
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

665
00:32:00,356 --> 00:32:02,516 A:middle
and the servers will take
care of the rate for you,

666
00:32:02,896 --> 00:32:03,696 A:middle
that you can just send it

667
00:32:03,696 --> 00:32:07,306 A:middle
when it's appropriate
for your application.

668
00:32:07,756 --> 00:32:10,896 A:middle
So here're some really great
examples that we came up with.

669
00:32:11,256 --> 00:32:13,416 A:middle
Obviously, like we
had in the example,

670
00:32:13,416 --> 00:32:16,656 A:middle
instant messaging is a
perfect example for this.

671
00:32:16,656 --> 00:32:19,526 A:middle
We think picture messaging
is especially important here

672
00:32:19,886 --> 00:32:22,446 A:middle
because oftentimes, when
you get that message,

673
00:32:22,786 --> 00:32:25,386 A:middle
the application needs to then
download that whole photo.

674
00:32:25,776 --> 00:32:27,836 A:middle
So now, you can download
it in the background

675
00:32:28,266 --> 00:32:31,156 A:middle
and that picture is completely
ready to go once users use that.

676
00:32:31,346 --> 00:32:33,546 A:middle
We think this is
really, really awesome.

677
00:32:34,046 --> 00:32:35,806 A:middle
This is really great for email.

678
00:32:36,206 --> 00:32:38,296 A:middle
So if you're already
sending push notifications

679
00:32:39,106 --> 00:32:41,526 A:middle
as email notifications,
right, you can then go

680
00:32:41,526 --> 00:32:43,296 A:middle
and fetch the entire mailbox.

681
00:32:45,026 --> 00:32:46,696 A:middle
We think silent notification
is being used

682
00:32:46,696 --> 00:32:47,996 A:middle
for completely different things.

683
00:32:48,306 --> 00:32:51,746 A:middle
If you have episodic content,

684
00:32:51,746 --> 00:32:54,216 A:middle
you can get those downloaded
using the Background

685
00:32:54,216 --> 00:32:54,916 A:middle
Transfer Service.

686
00:32:55,226 --> 00:32:59,616 A:middle
There are applications out
there that implement this kind

687
00:32:59,616 --> 00:33:02,956 A:middle
of read some stories later
kind of functionality.

688
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

689
00:33:03,256 --> 00:33:06,366 A:middle
And some applications
have actually gone so far

690
00:33:06,366 --> 00:33:09,396 A:middle
as to implement a
fetching behavior

691
00:33:09,626 --> 00:33:11,736 A:middle
on the back of region
monitoring.

692
00:33:12,066 --> 00:33:15,386 A:middle
So that when you go home or you
leave work, you can actually go

693
00:33:15,386 --> 00:33:16,496 A:middle
and download content then.

694
00:33:17,396 --> 00:33:19,196 A:middle
We think that this is
a much better model.

695
00:33:20,186 --> 00:33:23,016 A:middle
All you do in that case is
when the user add something

696
00:33:23,016 --> 00:33:25,686 A:middle
to that list, selling the silent
notification to the device

697
00:33:25,986 --> 00:33:28,766 A:middle
because A, the user
doesn't need to be notified

698
00:33:28,766 --> 00:33:30,136 A:middle
that they added something
to that list.

699
00:33:30,486 --> 00:33:31,336 A:middle
So that should be silent.

700
00:33:31,816 --> 00:33:33,886 A:middle
And then the application
can download that content

701
00:33:34,336 --> 00:33:35,486 A:middle
that they want to read offline.

702
00:33:35,946 --> 00:33:37,806 A:middle
So we think this is
actually really awesome

703
00:33:37,806 --> 00:33:40,376 A:middle
and it will work really well.

704
00:33:40,476 --> 00:33:45,136 A:middle
For Purchase Syncing, so if
you have a library of magazines

705
00:33:45,136 --> 00:33:47,866 A:middle
or comic books or something,
and the user buys something

706
00:33:47,866 --> 00:33:50,856 A:middle
on your website, this can be a
great way to send a notification

707
00:33:50,856 --> 00:33:54,026 A:middle
to the device so that it can
go download that new content

708
00:33:54,026 --> 00:33:55,236 A:middle
so it's available offline.

709
00:33:55,236 --> 00:33:58,946 A:middle
Or if you have a File
Syncing application

710
00:33:58,946 --> 00:34:00,196 A:middle
with documents, same thing.

711
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

712
00:34:00,726 --> 00:34:04,776 A:middle
Just send that notification
when it's ready, and then go.

713
00:34:05,016 --> 00:34:06,416 A:middle
So let's talk a little bit

714
00:34:06,416 --> 00:34:10,416 A:middle
about how silent
notifications can work

715
00:34:10,416 --> 00:34:14,366 A:middle
with background transfers to
provide a brand new feature,

716
00:34:15,056 --> 00:34:17,556 A:middle
auto downloading in
a TV application.

717
00:34:18,255 --> 00:34:22,106 A:middle
So let's say some TV network
has an application out there

718
00:34:22,106 --> 00:34:24,846 A:middle
that allows you to do
offline content viewing.

719
00:34:25,386 --> 00:34:28,815 A:middle
And they want to offer
a system where, hey,

720
00:34:28,815 --> 00:34:31,076 A:middle
every week when that
new episode of the show

721
00:34:31,436 --> 00:34:35,196 A:middle
that the user's favorited is
ready that it can download

722
00:34:35,196 --> 00:34:37,766 A:middle
onto the device so that
they can view it at anytime.

723
00:34:39,166 --> 00:34:41,295 A:middle
So the user asks
for new episodes

724
00:34:41,295 --> 00:34:42,536 A:middle
to be downloaded
when it's available.

725
00:34:43,136 --> 00:34:45,436 A:middle
When that episode is available,

726
00:34:46,556 --> 00:34:49,525 A:middle
the content provider can
just send a silent push

727
00:34:49,525 --> 00:34:51,076 A:middle
to the devices that have
signed up for the stuff.

728
00:34:52,366 --> 00:34:54,295 A:middle
And so the app going to
wake up and can check

729
00:34:54,295 --> 00:34:56,866 A:middle
for any newly available
episodes and queue them

730
00:34:56,866 --> 00:34:58,366 A:middle
into the Background
Transfer Service

731
00:34:58,666 --> 00:35:00,966 A:middle
so the application can go
back to sleep at this point

732
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

733
00:35:01,556 --> 00:35:04,116 A:middle
and then once it's completed,
the application just wakes up,

734
00:35:04,116 --> 00:35:09,526 A:middle
updates the UI and then post a
local notification letting the

735
00:35:09,526 --> 00:35:12,616 A:middle
user know that it
has new content.

736
00:35:17,696 --> 00:35:20,976 A:middle
So the same thing would kind of
go for File Syncing application.

737
00:35:20,976 --> 00:35:23,286 A:middle
If you, let's say,
favorite a particular file

738
00:35:23,286 --> 00:35:24,846 A:middle
and then you want it
updated all the time,

739
00:35:25,396 --> 00:35:27,656 A:middle
whether that file changes,
let's say, if they're editing

740
00:35:27,656 --> 00:35:30,486 A:middle
on their desktop, that service
can send a silent push right

741
00:35:30,486 --> 00:35:32,576 A:middle
away and because it's rate
limited already, you don't need

742
00:35:32,576 --> 00:35:35,246 A:middle
to do anything to make sure
that's going at the right speed.

743
00:35:36,666 --> 00:35:39,396 A:middle
So once that app
wakes up, it can check

744
00:35:39,396 --> 00:35:43,216 A:middle
for any newly available files
and enqueue those file diffs

745
00:35:43,306 --> 00:35:45,486 A:middle
into the transfer
service and then the UI--

746
00:35:45,486 --> 00:35:50,706 A:middle
I'm sorry, the application will
then wake up and update its UI.

747
00:35:51,276 --> 00:35:53,146 A:middle
So receive push notifications

748
00:35:53,146 --> 00:35:54,456 A:middle
at the background,
we think this is big.

749
00:35:55,236 --> 00:35:58,286 A:middle
Silent pushers are rate
limited and that's intended

750
00:35:58,286 --> 00:36:02,706 A:middle
to help save you
effort and time.

751
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

752
00:36:02,906 --> 00:36:05,826 A:middle
So here were the two APIs that
we've talked about so far.

753
00:36:06,266 --> 00:36:10,246 A:middle
And when you're sitting down
and looking to enhance one

754
00:36:10,246 --> 00:36:13,926 A:middle
of your features with this,
we want you to kind of keep

755
00:36:13,926 --> 00:36:16,376 A:middle
in consideration why you
would pick one or the other.

756
00:36:17,656 --> 00:36:18,796 A:middle
You would typically use fetch

757
00:36:19,076 --> 00:36:21,676 A:middle
when the content is
really interesting

758
00:36:21,676 --> 00:36:22,856 A:middle
but not quite critical.

759
00:36:22,856 --> 00:36:23,936 A:middle
It's not really important

760
00:36:23,936 --> 00:36:25,456 A:middle
to let the user know
about it right away.

761
00:36:26,336 --> 00:36:27,636 A:middle
Whereas Remote Notifications

762
00:36:27,636 --> 00:36:29,116 A:middle
that would be a lot more
immediate, you know,

763
00:36:29,116 --> 00:36:31,986 A:middle
it's a message from their
friend or it needs as much time

764
00:36:31,986 --> 00:36:34,076 A:middle
as possible in order
to download.

765
00:36:34,666 --> 00:36:40,726 A:middle
If the content was available all
the time very, very frequently,

766
00:36:41,136 --> 00:36:45,646 A:middle
it can be really burdensome on
power as well as your servers

767
00:36:45,996 --> 00:36:50,806 A:middle
to notify all the applications
about it whenever that happens.

768
00:36:51,196 --> 00:36:52,976 A:middle
So we think that that's
a much better use case

769
00:36:52,976 --> 00:36:53,826 A:middle
for Background Fetch.

770
00:36:53,826 --> 00:36:56,436 A:middle
So for example, I
don't know about you

771
00:36:56,436 --> 00:36:58,376 A:middle
but my social networking
feeds always look

772
00:36:58,376 --> 00:37:01,746 A:middle
like they're updating
every single second.

773
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

774
00:37:02,566 --> 00:37:07,406 A:middle
And for Remote Notifications,
it's fine if it's very frequent

775
00:37:07,406 --> 00:37:10,536 A:middle
but maybe that's more sporadic
so if I'm working on a document

776
00:37:10,536 --> 00:37:13,696 A:middle
on my PC and it's supposed
to sync to my phone,

777
00:37:14,206 --> 00:37:17,186 A:middle
that would be sporadic but maybe
kind of frequent for that period

778
00:37:17,186 --> 00:37:18,956 A:middle
of time, where Remote
Notifications would be the

779
00:37:18,956 --> 00:37:22,046 A:middle
appropriate thing to use there.

780
00:37:22,256 --> 00:37:29,016 A:middle
OK, so let's dive into the
Background Transfer Service.

781
00:37:29,016 --> 00:37:34,496 A:middle
So in iOS 6, using the UI
application background test API,

782
00:37:35,436 --> 00:37:38,876 A:middle
applications can transfer files
while in the foreground or even

783
00:37:38,876 --> 00:37:40,616 A:middle
for a few minutes when
the application returns

784
00:37:40,616 --> 00:37:41,226 A:middle
to the background.

785
00:37:41,766 --> 00:37:44,186 A:middle
But that's limited sort
of arbitrarily by time.

786
00:37:44,446 --> 00:37:46,436 A:middle
You only get a few minutes
to download or upload

787
00:37:46,826 --> 00:37:50,216 A:middle
and that can cause weird user
experience where, you know,

788
00:37:50,216 --> 00:37:51,696 A:middle
maybe your video
didn't finish uploading.

789
00:37:53,066 --> 00:37:54,676 A:middle
So in addition, you
couldn't kind

790
00:37:54,676 --> 00:37:58,116 A:middle
of effectively download the
content or upload large assets.

791
00:37:59,116 --> 00:38:01,466 A:middle
In iOS 7, we've changed this.

792
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

793
00:38:01,846 --> 00:38:04,496 A:middle
We're providing a service that
allows you to enqueue downloads

794
00:38:04,496 --> 00:38:07,396 A:middle
and uploads that are managed
by the OS that continue even

795
00:38:07,396 --> 00:38:10,786 A:middle
after your application
exits or the device reboots.

796
00:38:11,256 --> 00:38:12,546 A:middle
It's not restricted by time.

797
00:38:12,746 --> 00:38:16,216 A:middle
We intend this for you
to enqueue large things.

798
00:38:17,576 --> 00:38:20,216 A:middle
You can enqueue it anytime,
either from the foreground.

799
00:38:20,376 --> 00:38:23,836 A:middle
Let's say if the user decided
to upload a video or download,

800
00:38:24,186 --> 00:38:27,846 A:middle
let's say an episodic content,
or from the background.

801
00:38:27,846 --> 00:38:29,906 A:middle
So if you get woken up
for a Background Fetch

802
00:38:29,906 --> 00:38:32,416 A:middle
or for Remote Notifications,
that's a great time

803
00:38:32,756 --> 00:38:36,246 A:middle
to enqueue a transfer into
Background Transfer Service.

804
00:38:37,616 --> 00:38:39,886 A:middle
And of course, your
application is woken

805
00:38:39,886 --> 00:38:43,316 A:middle
up to handle authentication
errors or completion.

806
00:38:43,476 --> 00:38:45,476 A:middle
So once it's done,
you can update your UI

807
00:38:45,716 --> 00:38:47,806 A:middle
and make sure the user
sees it very prominently,

808
00:38:47,806 --> 00:38:49,816 A:middle
that they have a new
piece of content.

809
00:38:51,846 --> 00:38:57,466 A:middle
So let's just take a
quick look at the API.

810
00:38:57,616 --> 00:39:03,256 A:middle
So we are introducing a new
class called NSURLSession today.

811
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

812
00:39:03,606 --> 00:39:05,356 A:middle
It's part of the
CFNetwork framework

813
00:39:05,816 --> 00:39:09,486 A:middle
and I highly encourage you
to go to the What's New

814
00:39:09,486 --> 00:39:12,336 A:middle
in Foundation Networking
talk as well

815
00:39:12,336 --> 00:39:14,776 A:middle
as the foundation networking
lab and we'll have links

816
00:39:14,776 --> 00:39:15,446 A:middle
at the end of the talk.

817
00:39:16,586 --> 00:39:18,256 A:middle
So you create this NSURLSession,

818
00:39:18,306 --> 00:39:21,756 A:middle
you configure it using a
background session configuration

819
00:39:21,756 --> 00:39:25,366 A:middle
and then all you do is you
enqueue these NSURLSessionTasks

820
00:39:25,736 --> 00:39:28,346 A:middle
that are associated with
an existing NSURLRequest.

821
00:39:28,636 --> 00:39:30,576 A:middle
So any of the NSURLRequests
that you're doing right now,

822
00:39:30,576 --> 00:39:32,576 A:middle
all you do is you attach
them to the session task

823
00:39:32,896 --> 00:39:34,266 A:middle
and enqueue them
into the service.

824
00:39:34,706 --> 00:39:37,836 A:middle
And this can be download
tasks or upload tasks

825
00:39:38,336 --> 00:39:39,536 A:middle
and those just continue.

826
00:39:40,056 --> 00:39:44,836 A:middle
And then once you're-- once
that transfer is complete,

827
00:39:45,846 --> 00:39:48,006 A:middle
if you're in the background,
if you're not running

828
00:39:48,006 --> 00:39:50,626 A:middle
or you have been suspended, your
application will get launched

829
00:39:50,626 --> 00:39:52,786 A:middle
into background, you'll
get did finish launching

830
00:39:52,966 --> 00:39:55,756 A:middle
and then you'll get this new
callback called handle events

831
00:39:55,756 --> 00:39:58,436 A:middle
for background URL session
with a completion handler.

832
00:39:59,396 --> 00:40:01,076 A:middle
And what this allows
you to do is reconnect

833
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

834
00:40:01,076 --> 00:40:03,886 A:middle
to your NSURLSession by
providing a unique identifier.

835
00:40:04,306 --> 00:40:06,646 A:middle
And that will allow you
to handle that new content

836
00:40:07,026 --> 00:40:10,426 A:middle
so you can, for example,
you know, update your UI

837
00:40:10,426 --> 00:40:11,916 A:middle
to prominently show
that there's--

838
00:40:11,996 --> 00:40:14,996 A:middle
your upload is completed or
that your download is done.

839
00:40:15,986 --> 00:40:19,316 A:middle
And then, of course, you want
to call the completion handler

840
00:40:19,316 --> 00:40:22,236 A:middle
to make sure that the
system can go back to sleep

841
00:40:22,286 --> 00:40:26,716 A:middle
and your snapshot gets taken.

842
00:40:28,366 --> 00:40:32,806 A:middle
So within the transfer
service, we have this notion

843
00:40:32,806 --> 00:40:34,326 A:middle
of a discretionary transfer.

844
00:40:35,086 --> 00:40:38,896 A:middle
And discretionary transfers
help preserve battery life

845
00:40:38,896 --> 00:40:39,766 A:middle
and data usage.

846
00:40:39,996 --> 00:40:42,496 A:middle
And the way they do that is
that they're power managed

847
00:40:43,106 --> 00:40:44,846 A:middle
and they also only go for Wi-Fi.

848
00:40:45,716 --> 00:40:48,866 A:middle
So if you enqueue a
transfer from the background,

849
00:40:49,076 --> 00:40:50,996 A:middle
these transfers will
always be discretionary.

850
00:40:51,686 --> 00:40:53,446 A:middle
And if you're enqueuing
something let's say

851
00:40:53,446 --> 00:40:56,346 A:middle
from the foreground, that
transfer can optionally request

852
00:40:56,346 --> 00:40:57,316 A:middle
for it to be discretionary.

853
00:40:57,536 --> 00:40:59,956 A:middle
So for example, if it's
something that is not--

854
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

855
00:41:01,016 --> 00:41:02,966 A:middle
let's say, it needs to
happen at some point

856
00:41:02,966 --> 00:41:04,776 A:middle
but the user didn't
say specifically,

857
00:41:04,776 --> 00:41:06,746 A:middle
"I want this downloaded,"
that would be something

858
00:41:06,746 --> 00:41:08,276 A:middle
that you would enqueue
as discretionary.

859
00:41:08,886 --> 00:41:12,486 A:middle
So here're some examples.

860
00:41:12,876 --> 00:41:15,326 A:middle
So this would be incredibly
useful for uploading photos

861
00:41:15,326 --> 00:41:16,636 A:middle
and videos like we said before.

862
00:41:17,316 --> 00:41:20,776 A:middle
Used in combination with some of
the existing multitasking modes,

863
00:41:21,056 --> 00:41:23,796 A:middle
so for example, if you have
significant location change,

864
00:41:24,206 --> 00:41:27,136 A:middle
and your user, for example,
flies to San Francisco,

865
00:41:27,526 --> 00:41:31,216 A:middle
they can download, let's say,
new Map Packs and new tiles

866
00:41:31,216 --> 00:41:33,916 A:middle
for the area in order to
automatically make sure

867
00:41:33,916 --> 00:41:35,796 A:middle
that their navigation
application continues

868
00:41:35,796 --> 00:41:36,456 A:middle
to work really well.

869
00:41:36,916 --> 00:41:41,196 A:middle
This will help keep your app
up to date by downloading

870
00:41:41,196 --> 00:41:43,066 A:middle
in the background number
of different things.

871
00:41:43,066 --> 00:41:47,156 A:middle
Maybe even, you know,
podcast or game content.

872
00:41:47,536 --> 00:41:48,886 A:middle
We think this will
be really great

873
00:41:48,886 --> 00:41:51,846 A:middle
and users will get
a kick out of this.

874
00:41:52,066 --> 00:41:55,826 A:middle
OK, so these are our three
new multitasking modes.

875
00:41:56,386 --> 00:41:57,556 A:middle
We think they're
really excellent.

876
00:41:57,556 --> 00:42:00,276 A:middle
We think that they add
a lot to the ecosystem

877
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

878
00:42:00,596 --> 00:42:06,466 A:middle
and we really can't wait to
see what you guys do with it.

879
00:42:07,996 --> 00:42:09,286 A:middle
So details.

880
00:42:09,836 --> 00:42:12,216 A:middle
We have the viewed details that
we want to discuss with you

881
00:42:12,596 --> 00:42:15,896 A:middle
to make sure that as you're
architecting your applications

882
00:42:15,896 --> 00:42:17,536 A:middle
to take advantages of
these new opportunities

883
00:42:17,836 --> 00:42:20,336 A:middle
that you do the right
things in order to kind

884
00:42:20,336 --> 00:42:21,806 A:middle
of function well in the system.

885
00:42:23,056 --> 00:42:25,506 A:middle
The first thing to realize is
that you get a limited amount

886
00:42:25,506 --> 00:42:26,596 A:middle
of time to run to
the background.

887
00:42:27,196 --> 00:42:30,376 A:middle
This wouldn't be very power
efficient if you were able

888
00:42:30,456 --> 00:42:32,006 A:middle
to run for, let's
say 10 minutes.

889
00:42:32,426 --> 00:42:34,696 A:middle
You're given about less than
a minute to finish your update

890
00:42:35,196 --> 00:42:36,936 A:middle
and your fetch is in
parallel with other apps,

891
00:42:37,266 --> 00:42:38,856 A:middle
which means that you
want to make sure

892
00:42:38,856 --> 00:42:41,896 A:middle
that your CPU profile is
as minimal as possible

893
00:42:41,896 --> 00:42:42,806 A:middle
and you're doing these updates.

894
00:42:43,306 --> 00:42:45,776 A:middle
Obviously, since this is
designed for networking,

895
00:42:46,136 --> 00:42:47,666 A:middle
we expect many of
your applications

896
00:42:47,666 --> 00:42:49,016 A:middle
to use very little CPU time

897
00:42:49,296 --> 00:42:51,306 A:middle
because you're just transferring
data for the most part.

898
00:42:51,956 --> 00:42:55,326 A:middle
But you want to make sure to
use time profile and instruments

899
00:42:55,326 --> 00:42:56,966 A:middle
to make sure that you
are using as much as--

900
00:42:57,126 --> 00:43:01,136 A:middle
as little CPU time as possible
and that there's nothing obvious

901
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

902
00:43:01,166 --> 00:43:04,116 A:middle
that you can get rid off.

903
00:43:04,216 --> 00:43:07,126 A:middle
So, it's really important
that you also complete as soon

904
00:43:07,126 --> 00:43:09,846 A:middle
as possible because if
you've been woken up,

905
00:43:10,416 --> 00:43:12,846 A:middle
the device is going to
stay awake for as much time

906
00:43:12,846 --> 00:43:16,116 A:middle
as it gave you until you
tell it to say, "I'm done,

907
00:43:16,116 --> 00:43:17,366 A:middle
I can let the system
go to sleep."

908
00:43:17,366 --> 00:43:19,376 A:middle
So it's important to
complete as soon as possible,

909
00:43:19,726 --> 00:43:22,326 A:middle
call the completion handler,
let the device sleep.

910
00:43:24,616 --> 00:43:26,786 A:middle
So the background task API.

911
00:43:27,706 --> 00:43:30,386 A:middle
When it's called from
the Background Fetch AP--

912
00:43:30,716 --> 00:43:33,156 A:middle
delegate or the Remote
Notification delegate

913
00:43:34,316 --> 00:43:36,036 A:middle
or the background
transfer completion,

914
00:43:36,566 --> 00:43:39,776 A:middle
your task will only be
given seconds to run

915
00:43:39,776 --> 00:43:41,076 A:middle
to the background
rather than minutes.

916
00:43:41,986 --> 00:43:44,726 A:middle
We realize that many of you
use the background task API

917
00:43:44,996 --> 00:43:48,996 A:middle
to close database connections
or close file handlers

918
00:43:48,996 --> 00:43:50,486 A:middle
or other system resources.

919
00:43:50,836 --> 00:43:53,456 A:middle
And we want to let you continue
doing that but this is not a way

920
00:43:53,456 --> 00:43:56,106 A:middle
for your application to run
for minutes and minutes on it.

921
00:43:58,116 --> 00:43:59,096 A:middle
The next detail.

922
00:43:59,776 --> 00:44:01,296 A:middle
So like I said before,
your snapshot

923
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

924
00:44:01,296 --> 00:44:03,776 A:middle
and your state restoration
is saved

925
00:44:03,776 --> 00:44:05,136 A:middle
after calling the
completion handler.

926
00:44:05,676 --> 00:44:07,506 A:middle
You want to make sure it
configure your view hierarchy

927
00:44:07,506 --> 00:44:09,126 A:middle
to hide sensitive
information like,

928
00:44:09,126 --> 00:44:10,326 A:middle
let's say the user's passwords

929
00:44:10,326 --> 00:44:12,626 A:middle
of your say password
management application.

930
00:44:13,446 --> 00:44:15,336 A:middle
And like I said before,
you really want

931
00:44:15,336 --> 00:44:18,096 A:middle
to use save restoration
to transition seamlessly

932
00:44:18,096 --> 00:44:19,866 A:middle
from that cool snapshot

933
00:44:19,866 --> 00:44:22,746 A:middle
of the app switcher
back to the application.

934
00:44:23,246 --> 00:44:28,216 A:middle
Next up is a bit of privacy.

935
00:44:30,226 --> 00:44:33,046 A:middle
We've always encouraged
you to use data protection

936
00:44:33,046 --> 00:44:34,546 A:middle
when handling sensitive
user data.

937
00:44:35,006 --> 00:44:36,916 A:middle
This is incredibly
important for privacy.

938
00:44:37,276 --> 00:44:41,486 A:middle
We think that users come to
iOS and user applications

939
00:44:41,526 --> 00:44:46,136 A:middle
because it's a secure way
of using their device.

940
00:44:46,466 --> 00:44:49,396 A:middle
And so a lot of you
should be familiar

941
00:44:49,396 --> 00:44:51,666 A:middle
with this NSFileProtection API.

942
00:44:53,106 --> 00:44:54,416 A:middle
Just to explain just
a little bit.

943
00:44:54,776 --> 00:44:59,476 A:middle
Of course, there is a Data
Protection lab that you can go

944
00:44:59,476 --> 00:45:01,176 A:middle
to and we'll have a link
at the end of the session,

945
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

946
00:45:02,426 --> 00:45:04,576 A:middle
but let's explain
this for a second.

947
00:45:04,676 --> 00:45:06,996 A:middle
So we've got
NSFileProtectionComplete.

948
00:45:07,446 --> 00:45:10,886 A:middle
What that means is that
whenever the device is unlocked

949
00:45:11,046 --> 00:45:13,966 A:middle
and actively being used,
these files are available.

950
00:45:13,966 --> 00:45:15,586 A:middle
You can use them as normal.

951
00:45:15,586 --> 00:45:20,486 A:middle
But when the device is locked,
those files are inaccessible.

952
00:45:21,506 --> 00:45:25,156 A:middle
And of course, the low
means that these files

953
00:45:25,256 --> 00:45:27,166 A:middle
and keychain items
are available always.

954
00:45:27,166 --> 00:45:30,496 A:middle
So even after the
first boot, you know,

955
00:45:30,496 --> 00:45:31,806 A:middle
when the device is
locked, et cetera.

956
00:45:32,476 --> 00:45:35,146 A:middle
And we highly encourage
you to not use the lowest

957
00:45:35,566 --> 00:45:37,896 A:middle
but use the highest or one
of the ones in between.

958
00:45:38,136 --> 00:45:40,806 A:middle
And we'll go over what
this mean in just a second.

959
00:45:40,886 --> 00:45:44,336 A:middle
But for completeness, here
are the rest of the APIs

960
00:45:44,336 --> 00:45:47,046 A:middle
that you should be
looking at but of course,

961
00:45:47,046 --> 00:45:49,336 A:middle
that'll be on the slides
that you'll get afterwards

962
00:45:49,736 --> 00:45:52,646 A:middle
and you can look at it there.

963
00:45:52,856 --> 00:45:55,336 A:middle
So, why should you
care about this

964
00:45:55,336 --> 00:45:56,456 A:middle
if you're doing the right thing?

965
00:45:57,086 --> 00:45:59,496 A:middle
If you're doing the right
thing, your keychain items

966
00:45:59,496 --> 00:46:02,916 A:middle
and credential, so let's say,
users-- usernames and passwords

967
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

968
00:46:02,916 --> 00:46:06,366 A:middle
and log-in tokens
or cookies should be

969
00:46:06,366 --> 00:46:09,226 A:middle
in the keychain item
as a sec item.

970
00:46:09,766 --> 00:46:13,526 A:middle
And that should be the
maximum protection.

971
00:46:13,526 --> 00:46:14,526 A:middle
That's actually the default.

972
00:46:15,346 --> 00:46:17,276 A:middle
Your database, SQLite database

973
00:46:17,276 --> 00:46:20,066 A:middle
or coordinated database should
also be using the complete

974
00:46:20,066 --> 00:46:22,116 A:middle
protection so that
it's not available

975
00:46:22,116 --> 00:46:23,596 A:middle
when the device is locked.

976
00:46:25,016 --> 00:46:28,176 A:middle
Now, we've just told you
about all these great ways

977
00:46:28,176 --> 00:46:31,486 A:middle
that you can wake up and run
in the background and some

978
00:46:31,486 --> 00:46:33,566 A:middle
of those times, the device
is going to be locked.

979
00:46:33,566 --> 00:46:34,396 A:middle
It's going to be in their pocket

980
00:46:34,396 --> 00:46:35,966 A:middle
when they receive
a new text message

981
00:46:36,326 --> 00:46:39,326 A:middle
or if they get an
opportunity to launch.

982
00:46:39,906 --> 00:46:42,406 A:middle
So that means that you
need to kind of make

983
00:46:42,406 --> 00:46:43,666 A:middle
that a little bit more partial.

984
00:46:44,366 --> 00:46:50,046 A:middle
You want to be able to
have access to connect

985
00:46:50,046 --> 00:46:52,946 A:middle
to your service,
but what we're going

986
00:46:52,946 --> 00:46:57,426 A:middle
to do here is set these keychain
items to be partially protected

987
00:46:57,616 --> 00:46:59,496 A:middle
and specifically, we're
going to use the mode

988
00:46:59,536 --> 00:47:02,636 A:middle
where the data is available
after the very first unlock.

989
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

990
00:47:04,336 --> 00:47:07,806 A:middle
So what we encourage you to
do is to actually create--

991
00:47:08,506 --> 00:47:10,946 A:middle
is not to actually
reduce the protection

992
00:47:11,046 --> 00:47:15,236 A:middle
of that main credential
but to create a kind

993
00:47:15,236 --> 00:47:18,356 A:middle
of derivative credential
that has limited access.

994
00:47:18,616 --> 00:47:20,426 A:middle
So you might make it Read-Only

995
00:47:20,876 --> 00:47:24,706 A:middle
or you might make it expire
within, let's say, a week or so,

996
00:47:25,296 --> 00:47:29,086 A:middle
so that if that were to get
out, then there wouldn't be,

997
00:47:29,086 --> 00:47:30,846 A:middle
you know, harmful consequences.

998
00:47:30,846 --> 00:47:36,686 A:middle
So what do you do with the
data that you then download?

999
00:47:36,686 --> 00:47:39,136 A:middle
So you have that credential,
you connect your server,

1000
00:47:39,476 --> 00:47:41,226 A:middle
you're able to download
some new information.

1001
00:47:42,406 --> 00:47:44,866 A:middle
What you wanted use is the
background mode that allows you

1002
00:47:44,866 --> 00:47:50,466 A:middle
to have this data accessible
while the file handle is open.

1003
00:47:50,466 --> 00:47:51,616 A:middle
And you can go back
and refer to the--

1004
00:47:51,616 --> 00:47:53,096 A:middle
read the previous
slides afterwards,

1005
00:47:53,446 --> 00:47:57,166 A:middle
but all it does is allows you
to download new data, save it,

1006
00:47:57,376 --> 00:48:01,096 A:middle
and as soon as you close
it, it can be secured.

1007
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1008
00:48:02,956 --> 00:48:06,376 A:middle
And then once that main
database is accessible

1009
00:48:06,376 --> 00:48:08,376 A:middle
when the device is unlocked,
you're going to merge

1010
00:48:08,376 --> 00:48:11,466 A:middle
that new data into your database
when that's appropriate.

1011
00:48:12,736 --> 00:48:14,476 A:middle
So there's a fairly
common pattern.

1012
00:48:14,926 --> 00:48:17,726 A:middle
You can definitely go to
the data protection lab

1013
00:48:17,726 --> 00:48:21,186 A:middle
and get more details about how
to do this, but we encourage you

1014
00:48:21,186 --> 00:48:22,586 A:middle
to do this instead
of, let's say,

1015
00:48:22,586 --> 00:48:29,626 A:middle
just downgrading the protection
on your end credentials.

1016
00:48:29,626 --> 00:48:33,626 A:middle
OK, so next is battery life
and cellular data usage.

1017
00:48:34,526 --> 00:48:38,826 A:middle
So, even though the system
protects the device and the user

1018
00:48:38,826 --> 00:48:41,436 A:middle
against excessive cellular data
usage and power efficient--

1019
00:48:41,486 --> 00:48:46,556 A:middle
and power usage, you can do
a lot to be a good citizen

1020
00:48:46,626 --> 00:48:48,686 A:middle
and make sure that on
the user's devices,

1021
00:48:49,016 --> 00:48:51,536 A:middle
they get as many opportunities
as possible in order

1022
00:48:51,536 --> 00:48:52,546 A:middle
to have other applications

1023
00:48:52,546 --> 00:48:54,816 A:middle
and your own application
get launched more often.

1024
00:48:55,906 --> 00:48:58,846 A:middle
Very specifically, the
more efficient you are,

1025
00:48:59,776 --> 00:49:01,796 A:middle
the more opportunities
there will be for your app

1026
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1027
00:49:01,796 --> 00:49:03,536 A:middle
and other apps to get launched.

1028
00:49:05,246 --> 00:49:06,536 A:middle
So what can you do?

1029
00:49:07,496 --> 00:49:09,296 A:middle
Well, just minimize
cellular data usage.

1030
00:49:09,296 --> 00:49:11,416 A:middle
That's absolutely the
best thing you can do.

1031
00:49:12,136 --> 00:49:14,726 A:middle
So we encourage you, before
calling the completion handler

1032
00:49:14,726 --> 00:49:17,956 A:middle
to only really download what's
necessary to update your UI.

1033
00:49:18,026 --> 00:49:20,246 A:middle
So download thumbnails
instead of full images.

1034
00:49:20,576 --> 00:49:22,566 A:middle
But then enqueue
those full images

1035
00:49:22,566 --> 00:49:25,686 A:middle
into a background transfer so
that the system can manage that.

1036
00:49:26,796 --> 00:49:30,906 A:middle
For power efficiency, we
encourage you to enqueue

1037
00:49:30,906 --> 00:49:34,336 A:middle
as many transfers as possible in
parallel that allows the radios

1038
00:49:34,366 --> 00:49:36,196 A:middle
to go back to sleep as
quickly as possible.

1039
00:49:36,896 --> 00:49:41,396 A:middle
So in addition, that also means
that if you have to be using,

1040
00:49:41,396 --> 00:49:46,076 A:middle
let' say, Core Motion or one of
the other hardware-specific APIs

1041
00:49:46,476 --> 00:49:49,926 A:middle
in order to, you know, provide
some kind of user interaction,

1042
00:49:49,926 --> 00:49:51,016 A:middle
let's say you have a game

1043
00:49:51,016 --> 00:49:54,636 A:middle
that involves moving your
phone around, we encourage you

1044
00:49:54,636 --> 00:49:56,636 A:middle
to make sure that that's get
turned off while you're running

1045
00:49:56,636 --> 00:49:59,896 A:middle
in the background so that
you're not impacting power.

1046
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1047
00:50:00,446 --> 00:50:01,716 A:middle
And then of course,
like I said before,

1048
00:50:01,716 --> 00:50:03,416 A:middle
call the completion handler
as soon as you're done.

1049
00:50:03,766 --> 00:50:07,316 A:middle
That allows the system
to go back to sleep.

1050
00:50:07,316 --> 00:50:10,066 A:middle
OK, so a quick reminder as well.

1051
00:50:11,066 --> 00:50:13,286 A:middle
If the user removes your
application from app switcher,

1052
00:50:13,286 --> 00:50:14,816 A:middle
your application
will no longer run

1053
00:50:14,816 --> 00:50:16,556 A:middle
until it's then relaunched
by the user.

1054
00:50:17,026 --> 00:50:21,596 A:middle
So if your-- you know, you get
feedback from users of saying,

1055
00:50:21,596 --> 00:50:23,826 A:middle
"Hey, I removed it and then
I was expecting update."

1056
00:50:24,236 --> 00:50:28,476 A:middle
This why. And the same
is true for settings.

1057
00:50:28,476 --> 00:50:31,416 A:middle
If the user turns you off,
obviously, you won't get

1058
00:50:31,536 --> 00:50:33,886 A:middle
up any background opportunities.

1059
00:50:34,626 --> 00:50:38,606 A:middle
We'll be introducing API soon
to inspect new settings--

1060
00:50:38,866 --> 00:50:41,206 A:middle
sorry, new API that will
allow you to inspect settings

1061
00:50:41,646 --> 00:50:44,746 A:middle
so that you can say, "Hey,
am I going to actually run

1062
00:50:44,746 --> 00:50:46,446 A:middle
in the background after
this," so you can make sure

1063
00:50:46,446 --> 00:50:49,086 A:middle
that if you're promising some
functionality to the user,

1064
00:50:49,086 --> 00:50:54,536 A:middle
that you can warn them, that
it's not going to be there.

1065
00:50:54,536 --> 00:50:57,546 A:middle
And of course, like
Newsstand and Location,

1066
00:50:58,076 --> 00:50:59,456 A:middle
they'll appear here as well.

1067
00:50:59,966 --> 00:51:02,616 A:middle
So that the user can go
through and, you know,

1068
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1069
00:51:02,616 --> 00:51:05,506 A:middle
turn off particular applications

1070
00:51:05,576 --> 00:51:10,276 A:middle
or turn off Background Fetch
overall if they want to.

1071
00:51:10,516 --> 00:51:17,296 A:middle
So this is multitasking in iOS 6
and we've added Background Fetch

1072
00:51:17,346 --> 00:51:20,376 A:middle
which allows you to
periodically get new content.

1073
00:51:21,916 --> 00:51:25,406 A:middle
We added Remote Notifications so
that your application can launch

1074
00:51:25,406 --> 00:51:28,236 A:middle
and be updated, in-response
from push notification.

1075
00:51:29,516 --> 00:51:31,686 A:middle
And finally, we have a
Background Transfer Service

1076
00:51:31,976 --> 00:51:35,196 A:middle
that allows you to enqueue
large uploads and downloads

1077
00:51:35,536 --> 00:51:38,306 A:middle
to be finished later and then
woken up in the background.

1078
00:51:39,666 --> 00:51:42,126 A:middle
For more information,
you're welcome

1079
00:51:42,126 --> 00:51:46,406 A:middle
to contact our evangelist and
look at the programming guide

1080
00:51:46,406 --> 00:51:49,446 A:middle
as well as access
to developer forms.

1081
00:51:50,406 --> 00:51:52,686 A:middle
We have a lot of
related sessions to this.

1082
00:51:53,606 --> 00:51:56,296 A:middle
We highly encourage you
to go the What's New

1083
00:51:56,296 --> 00:51:58,376 A:middle
in Foundation Networking
session.

1084
00:51:58,736 --> 00:52:01,546 A:middle
The keychain session
will let you learn more

1085
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1086
00:52:01,546 --> 00:52:03,606 A:middle
about the data protection
pattern that I showed here.

1087
00:52:04,256 --> 00:52:06,996 A:middle
I highly encourage you
to go to the What's New

1088
00:52:06,996 --> 00:52:08,056 A:middle
in Core Location talk.

1089
00:52:08,126 --> 00:52:10,706 A:middle
They have a lot of great
new things and you want

1090
00:52:10,706 --> 00:52:14,376 A:middle
to check it out, as well as
the State Restoration talk.

1091
00:52:14,526 --> 00:52:17,306 A:middle
You'll learn about how
do you state restoration

1092
00:52:17,306 --> 00:52:19,356 A:middle
in your application,
how you can make sure

1093
00:52:19,356 --> 00:52:21,906 A:middle
that your application
is up to date

1094
00:52:21,906 --> 00:52:25,636 A:middle
when the user taps
on that app switcher.

1095
00:52:25,806 --> 00:52:27,756 A:middle
With that, thank you.

1096
00:52:28,516 --> 00:52:34,600 A:middle
[ Applause ]

1097
