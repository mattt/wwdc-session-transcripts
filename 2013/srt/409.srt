X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:10,516 A:middle
[ Silence ]

2
00:00:11,016 --> 00:00:11,826 A:middle
>> Good morning.

3
00:00:12,516 --> 00:00:16,256 A:middle
[ Applause ]

4
00:00:16,756 --> 00:00:20,606 A:middle
Wow. Thank you for coming
to Testing in Xcode 5.

5
00:00:21,646 --> 00:00:24,486 A:middle
I'm Mike and before
we get started,

6
00:00:24,486 --> 00:00:26,536 A:middle
could I have everyone
raise your hand

7
00:00:26,666 --> 00:00:29,506 A:middle
if you've ever written
a unit test before.

8
00:00:31,046 --> 00:00:33,646 A:middle
Wow. Actually, could
you keep your hand

9
00:00:33,646 --> 00:00:35,826 A:middle
up if you've written a
unit test in Objective-C.

10
00:00:37,276 --> 00:00:39,146 A:middle
Awesome. All right.

11
00:00:39,146 --> 00:00:39,776 A:middle
Thank you.

12
00:00:40,016 --> 00:00:41,726 A:middle
What I'm here today
to show you is all

13
00:00:41,726 --> 00:00:44,066 A:middle
of the great unit testing
features that we've added

14
00:00:44,116 --> 00:00:48,176 A:middle
in Xcode 5 and show you how
easy it is to test your apps.

15
00:00:48,836 --> 00:00:51,266 A:middle
So easy that I hope
by the end of today,

16
00:00:51,266 --> 00:00:53,576 A:middle
we'll have absolutely
every hand raised.

17
00:00:54,976 --> 00:00:59,926 A:middle
So, first, why would anyone
actually want to do testing?

18
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

19
00:01:01,036 --> 00:01:04,236 A:middle
Perhaps you've heard a few
times this week that we want

20
00:01:04,236 --> 00:01:06,026 A:middle
to help you build better apps.

21
00:01:06,836 --> 00:01:08,986 A:middle
So first off, wouldn't
it be great

22
00:01:08,986 --> 00:01:11,656 A:middle
if you could catch crashers
before your app got submitted

23
00:01:11,656 --> 00:01:12,416 A:middle
into the app store?

24
00:01:13,126 --> 00:01:16,796 A:middle
Did you know that crashers are
actually the number one cause

25
00:01:16,796 --> 00:01:17,756 A:middle
of app rejection?

26
00:01:19,736 --> 00:01:21,196 A:middle
Any crashers that make their way

27
00:01:21,196 --> 00:01:23,336 A:middle
to your customers are
probably only going

28
00:01:23,336 --> 00:01:24,426 A:middle
to lower your app's rating.

29
00:01:25,126 --> 00:01:27,466 A:middle
And if you can catch
your crasher in testing,

30
00:01:28,066 --> 00:01:30,156 A:middle
it means you don't have
to re-submit your app.

31
00:01:31,246 --> 00:01:33,536 A:middle
But besides crashers,
you'll also want

32
00:01:33,536 --> 00:01:35,076 A:middle
to catch logical errors.

33
00:01:36,026 --> 00:01:39,686 A:middle
Suppose, you have a game with
a character who's running along

34
00:01:39,886 --> 00:01:43,376 A:middle
and picks up a health pack,
it'd be pretty embarrassing

35
00:01:43,626 --> 00:01:46,766 A:middle
if picking up that
health pack actually ended

36
00:01:46,766 --> 00:01:50,366 A:middle
up killing the character because
of some sort of integer overflow

37
00:01:50,806 --> 00:01:53,846 A:middle
if the health was already
topped off at 100 percent.

38
00:01:54,916 --> 00:01:58,096 A:middle
Or, perhaps the pack was
poisoned or maybe the character,

39
00:01:58,096 --> 00:02:01,256 A:middle
it was just getting greedy, but
either way you're going to want

40
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

41
00:02:01,256 --> 00:02:03,896 A:middle
to write a test to define
what the correct behavior is

42
00:02:03,896 --> 00:02:04,436 A:middle
for your app.

43
00:02:06,026 --> 00:02:10,175 A:middle
So once you have a bank of
this test built up over time

44
00:02:10,216 --> 00:02:13,996 A:middle
from release to release,
you'll find that these sorts

45
00:02:13,996 --> 00:02:15,676 A:middle
of test will start
to catch regressions

46
00:02:15,676 --> 00:02:17,866 A:middle
as the rules of your app change.

47
00:02:20,206 --> 00:02:23,976 A:middle
As your code evolves over time,
these sorts of test will begin

48
00:02:23,976 --> 00:02:25,486 A:middle
to surface logical errors

49
00:02:26,576 --> 00:02:28,556 A:middle
and sometimes just
find plain old bugs.

50
00:02:29,846 --> 00:02:32,546 A:middle
Also, in some of the other
sessions, you may have been

51
00:02:32,546 --> 00:02:35,606 A:middle
at earlier this week you
may have seen how to set

52
00:02:35,606 --> 00:02:39,336 A:middle
up OS X server to run your
tests on a huge mix of OS

53
00:02:39,336 --> 00:02:40,586 A:middle
and device configurations.

54
00:02:41,316 --> 00:02:44,736 A:middle
Many more configurations than
we could reasonably run by hand

55
00:02:45,526 --> 00:02:47,036 A:middle
because we as developers want

56
00:02:47,166 --> 00:02:50,156 A:middle
to actually spend time writing
features and not spend all

57
00:02:50,156 --> 00:02:51,096 A:middle
of our time running tests.

58
00:02:52,996 --> 00:02:56,016 A:middle
And most importantly, for
every test that you commit

59
00:02:56,016 --> 00:03:00,036 A:middle
to your source repository,
OS X server can run that test

60
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

61
00:03:00,366 --> 00:03:01,966 A:middle
when someone else on
your team commits.

62
00:03:03,006 --> 00:03:05,876 A:middle
Because, maybe the new guy
doesn't have the entire model

63
00:03:05,876 --> 00:03:06,876 A:middle
of your app in his head yet,

64
00:03:07,676 --> 00:03:10,176 A:middle
or perhaps he just forgot
some sort of subtle edge case.

65
00:03:10,816 --> 00:03:13,456 A:middle
I mean, who among us
hasn't actually introduced a

66
00:03:13,456 --> 00:03:16,656 A:middle
jaw-dropping regression
that nobody picked up on

67
00:03:16,846 --> 00:03:18,736 A:middle
until it was way too late
in the release cycle.

68
00:03:20,476 --> 00:03:21,916 A:middle
So, all this is great, right?

69
00:03:22,616 --> 00:03:24,696 A:middle
Well, let's see how we're
going to do all that.

70
00:03:26,246 --> 00:03:29,226 A:middle
So first, we're going to briefly
touch on what a unit test is.

71
00:03:29,976 --> 00:03:32,506 A:middle
Then I'm going to show you
the new testing framework

72
00:03:32,926 --> 00:03:34,476 A:middle
that we've added to Xcode 5.

73
00:03:35,356 --> 00:03:37,776 A:middle
And then we're going to cover
how you can create your first

74
00:03:38,656 --> 00:03:40,236 A:middle
test and then for the
bulk of the session,

75
00:03:40,236 --> 00:03:41,306 A:middle
we're going to show you some

76
00:03:41,306 --> 00:03:43,476 A:middle
of the exciting new UI
enhancements we've added

77
00:03:43,476 --> 00:03:47,826 A:middle
to Xcode 5 that will allow
you to run single tests just

78
00:03:47,826 --> 00:03:51,076 A:middle
with one click or all your
tests in really large batches.

79
00:03:52,516 --> 00:03:54,186 A:middle
Then we'll show you
how to debug your code

80
00:03:54,186 --> 00:03:55,716 A:middle
when it's running
inside of the test rig.

81
00:03:56,386 --> 00:03:58,096 A:middle
And, we'll show you
how testing fits

82
00:03:58,096 --> 00:04:00,876 A:middle
into the continuous integration
the OS X server provides.

83
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

84
00:04:02,096 --> 00:04:06,166 A:middle
And finally, we'll look at
some advanced configurations

85
00:04:06,206 --> 00:04:08,516 A:middle
for OS X server and how
you can drive testing

86
00:04:08,516 --> 00:04:09,206 A:middle
on the command line.

87
00:04:10,606 --> 00:04:13,016 A:middle
So first, we should
define what we mean

88
00:04:13,016 --> 00:04:14,546 A:middle
when we talk about unit tests.

89
00:04:15,516 --> 00:04:19,856 A:middle
[ Pause ]

90
00:04:20,356 --> 00:04:26,076 A:middle
A unit test is a small test
of one unit of functionality.

91
00:04:26,706 --> 00:04:28,796 A:middle
It either passes or it fails

92
00:04:29,046 --> 00:04:31,556 A:middle
and the behavior should be
completely deterministic.

93
00:04:32,246 --> 00:04:33,936 A:middle
If you want to run
a lot of them,

94
00:04:34,326 --> 00:04:36,976 A:middle
they should run pretty quick
because when they fail,

95
00:04:36,976 --> 00:04:38,906 A:middle
you're going to want to
diagnose them really fast.

96
00:04:40,746 --> 00:04:43,316 A:middle
Though, unit testing
is not necessarily good

97
00:04:43,316 --> 00:04:43,896 A:middle
for some things.

98
00:04:44,746 --> 00:04:48,596 A:middle
For example, unit tests
are not performance tests,

99
00:04:49,586 --> 00:04:52,626 A:middle
a pass-fail result isn't going
to tell you how long it takes

100
00:04:52,626 --> 00:04:55,716 A:middle
to run a benchmark or
the standard deviation

101
00:04:55,716 --> 00:05:00,036 A:middle
of that benchmark over time, or
the variation of that benchmark

102
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

103
00:05:00,076 --> 00:05:01,026 A:middle
across different hardware.

104
00:05:02,686 --> 00:05:05,566 A:middle
Also, UI testing is
pretty hard to do

105
00:05:05,566 --> 00:05:06,896 A:middle
from a unit testing framework.

106
00:05:07,876 --> 00:05:11,076 A:middle
There are a lot of complex
interactions in the UI

107
00:05:11,076 --> 00:05:13,756 A:middle
and it's hard to
isolate down precisely

108
00:05:13,756 --> 00:05:15,346 A:middle
where a failure originates

109
00:05:15,346 --> 00:05:18,056 A:middle
from when you're running
tests at such a high level.

110
00:05:18,876 --> 00:05:20,996 A:middle
You're also going to want
screen recordings and a lot

111
00:05:20,996 --> 00:05:23,766 A:middle
of other support you don't get
from a simple pass-fail result.

112
00:05:25,836 --> 00:05:29,216 A:middle
And this sort of speaks to a
greater point and that it's hard

113
00:05:29,216 --> 00:05:34,846 A:middle
to understand failures that are
introduced by the integration

114
00:05:35,006 --> 00:05:39,366 A:middle
of a complex system that isn't
already granularly unit-tested.

115
00:05:41,876 --> 00:05:44,856 A:middle
You want to have the confidence
that the individual pieces

116
00:05:44,856 --> 00:05:47,126 A:middle
of your application
are well-tested

117
00:05:48,296 --> 00:05:51,236 A:middle
so that you can trust that your
higher level tests are actually

118
00:05:51,236 --> 00:05:52,676 A:middle
reporting higher level failures.

119
00:05:53,616 --> 00:05:55,046 A:middle
What this means is that
you're going to want

120
00:05:55,046 --> 00:05:58,846 A:middle
to pick the right place
to start testing your app.

121
00:05:59,176 --> 00:06:01,876 A:middle
So here, we have a high
level block diagram

122
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

123
00:06:01,876 --> 00:06:03,876 A:middle
of how your app might
be structured.

124
00:06:04,126 --> 00:06:05,976 A:middle
You probably have
some sort of model,

125
00:06:05,976 --> 00:06:09,166 A:middle
view and controller classes
which are some pattern familiar

126
00:06:09,166 --> 00:06:10,906 A:middle
to anyone who's been
working with Cocoa.

127
00:06:11,506 --> 00:06:15,776 A:middle
And you might have
some sort of connection

128
00:06:15,776 --> 00:06:17,116 A:middle
to the network behind some sort

129
00:06:17,116 --> 00:06:20,646 A:middle
of database that's behind
some sort of web service,

130
00:06:21,346 --> 00:06:24,276 A:middle
but what we're really
focusing on today is

131
00:06:24,276 --> 00:06:28,026 A:middle
where your model classes
meet your controller.

132
00:06:28,596 --> 00:06:33,576 A:middle
This is a good place to start to
build up tests because you want

133
00:06:33,576 --> 00:06:36,936 A:middle
to know with certainty that your
model classes are well-tested

134
00:06:37,206 --> 00:06:39,116 A:middle
before you work your
way up to running test

135
00:06:39,116 --> 00:06:41,036 A:middle
for the controller
classes which start

136
00:06:41,036 --> 00:06:44,216 A:middle
to touch the other more
complex parts of your app.

137
00:06:44,636 --> 00:06:47,716 A:middle
Alternately, if you're a
framework or a library author,

138
00:06:48,206 --> 00:06:52,256 A:middle
you could write tests around
the external API of your code

139
00:06:52,586 --> 00:06:54,446 A:middle
and work your way into
the internal classes.

140
00:06:55,366 --> 00:07:00,846 A:middle
It's really up to you, but
the new testing framework

141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

142
00:07:01,296 --> 00:07:03,926 A:middle
and UI features in
Xcode 5 are designed

143
00:07:03,926 --> 00:07:09,756 A:middle
to make running model tests
really easy and really fast.

144
00:07:10,876 --> 00:07:17,616 A:middle
So, the Xcode unit testing
framework Xc test is brand new

145
00:07:17,666 --> 00:07:19,546 A:middle
to Xcode 5 and iOS 7.

146
00:07:20,406 --> 00:07:23,576 A:middle
If you've used testing before
an Xcode, you may recognize

147
00:07:23,776 --> 00:07:28,016 A:middle
that Xc test is actually
directly derived from OC unit.

148
00:07:28,616 --> 00:07:30,966 A:middle
But it's been significantly
cleaned up and modernized.

149
00:07:31,986 --> 00:07:33,386 A:middle
We even have a migration tool

150
00:07:33,566 --> 00:07:39,766 A:middle
to migrate your existing
send tests to Xc test.

151
00:07:39,766 --> 00:07:42,836 A:middle
Xcode builds your test
into an Xc test bundle

152
00:07:43,436 --> 00:07:47,046 A:middle
which is injected directly into
your application and invoked

153
00:07:47,286 --> 00:07:49,136 A:middle
after application
did finish launching.

154
00:07:51,186 --> 00:07:55,646 A:middle
Or, when testing a library, the
test rig will load your library

155
00:07:55,816 --> 00:07:57,066 A:middle
and the test bundles together.

156
00:07:58,446 --> 00:08:01,226 A:middle
So what does a test look like?

157
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

158
00:08:03,456 --> 00:08:06,536 A:middle
Tests are just ordinary
Objective-C code.

159
00:08:07,056 --> 00:08:13,856 A:middle
A test class is simply a
sub-class of Xc test case.

160
00:08:14,766 --> 00:08:18,176 A:middle
Tests are simply methods
inside of a test class.

161
00:08:19,336 --> 00:08:21,906 A:middle
These methods are
identified by the word test

162
00:08:22,126 --> 00:08:24,506 A:middle
at the beginning of
their method name.

163
00:08:25,396 --> 00:08:29,356 A:middle
And, test methods return
nothing and take no arguments.

164
00:08:30,776 --> 00:08:33,546 A:middle
So how do you know if
a test passes or fails?

165
00:08:34,666 --> 00:08:38,376 A:middle
Well, tests make assertions
in the bodies of their method.

166
00:08:40,866 --> 00:08:43,486 A:middle
What this means is that you can
actually have multiple failures

167
00:08:43,486 --> 00:08:46,496 A:middle
inside of a test because you
can make multiple assertions.

168
00:08:48,276 --> 00:08:50,136 A:middle
The test classes are discovered

169
00:08:50,136 --> 00:08:53,066 A:middle
by the test rig interrogating
the Objective-Code runtime

170
00:08:53,406 --> 00:08:57,416 A:middle
and asking for all of the
subclasses of Xc test case

171
00:08:57,736 --> 00:09:00,686 A:middle
from the Xc test bundle
which has been injected

172
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

173
00:09:00,686 --> 00:09:01,516 A:middle
into your application.

174
00:09:03,136 --> 00:09:04,506 A:middle
So, these are the basics

175
00:09:04,716 --> 00:09:07,216 A:middle
of how tests are
structured at the code level.

176
00:09:07,216 --> 00:09:11,366 A:middle
What I'd like to show you now is
the most significant UI feature

177
00:09:11,556 --> 00:09:13,666 A:middle
that we've added to
Xcode 5 for testing.

178
00:09:13,666 --> 00:09:17,676 A:middle
It will help you add, run, and
navigate all of your tests.

179
00:09:18,506 --> 00:09:20,616 A:middle
This is the new test navigator.

180
00:09:21,956 --> 00:09:25,456 A:middle
As you can see here,
nestled between the issue

181
00:09:25,456 --> 00:09:27,956 A:middle
and the debug navigators
is where you'll find all

182
00:09:27,956 --> 00:09:29,156 A:middle
of your tests in your project.

183
00:09:30,406 --> 00:09:34,296 A:middle
When we started designing
Xcode 5 to make the act

184
00:09:34,716 --> 00:09:37,386 A:middle
of testing your app a
first class experience,

185
00:09:37,966 --> 00:09:41,776 A:middle
we quickly realized that
the workflow of being able

186
00:09:41,776 --> 00:09:44,636 A:middle
to view your tests
and their statuses was

187
00:09:44,636 --> 00:09:45,656 A:middle
critically important.

188
00:09:47,306 --> 00:09:50,606 A:middle
At the top level of the
navigator, you'll see all

189
00:09:50,606 --> 00:09:52,576 A:middle
of your test bundles
in your project.

190
00:09:53,366 --> 00:09:55,976 A:middle
Those test bundles
contain your test classes

191
00:09:56,576 --> 00:09:59,516 A:middle
which contain your test methods.

192
00:09:59,996 --> 00:10:03,116 A:middle
We've also made it really
easy to run any test or group

193
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

194
00:10:03,116 --> 00:10:05,746 A:middle
of tests with just one click.

195
00:10:10,226 --> 00:10:13,866 A:middle
As the tests run, the result
show up live along the side

196
00:10:13,866 --> 00:10:17,326 A:middle
of the navigator, this gives
you a great top level overview

197
00:10:17,396 --> 00:10:19,916 A:middle
of what's passing and
failing and lets you drill

198
00:10:19,916 --> 00:10:22,566 A:middle
down to any specific test.

199
00:10:22,916 --> 00:10:26,506 A:middle
Also, if you just want to focus
on only the failing tests,

200
00:10:26,506 --> 00:10:28,166 A:middle
we have a filter for that.

201
00:10:29,766 --> 00:10:33,586 A:middle
In this view, you can see
only the current failures

202
00:10:33,946 --> 00:10:35,546 A:middle
but still run all of your tests

203
00:10:36,176 --> 00:10:37,586 A:middle
as you work your
way down to zero.

204
00:10:38,576 --> 00:10:41,966 A:middle
We think that the new navigator
will give you a very nice

205
00:10:41,966 --> 00:10:43,046 A:middle
overview of your tests.

206
00:10:43,046 --> 00:10:44,806 A:middle
But we didn't stop there.

207
00:10:45,546 --> 00:10:50,506 A:middle
Next to each test method
in the source editor,

208
00:10:50,696 --> 00:10:52,786 A:middle
we added new test indicators.

209
00:10:53,946 --> 00:10:58,036 A:middle
You can click to run just
that test and see its status.

210
00:10:59,106 --> 00:11:01,746 A:middle
Running each test
is really easy even

211
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

212
00:11:01,746 --> 00:11:03,206 A:middle
without the test navigator open.

213
00:11:04,436 --> 00:11:06,216 A:middle
So let's look at each
of these features

214
00:11:06,456 --> 00:11:08,976 A:middle
and how they work together
over on the demo machine.

215
00:11:09,516 --> 00:11:16,186 A:middle
[ Pause ]

216
00:11:16,686 --> 00:11:19,946 A:middle
So here, we have a project
that's a board game class

217
00:11:20,656 --> 00:11:26,836 A:middle
that has several classes which
represent the model of our game.

218
00:11:27,696 --> 00:11:32,486 A:middle
There are classes for how the
parts, the pieces on the board,

219
00:11:32,926 --> 00:11:36,986 A:middle
the scoring and how the board
itself actually interacts.

220
00:11:37,256 --> 00:11:42,336 A:middle
So, one of the rules in a game
like this is that normally,

221
00:11:42,526 --> 00:11:45,426 A:middle
two pieces cannot occupy
the same space on the board

222
00:11:45,426 --> 00:11:48,326 A:middle
at the same time, but we've
actually noticed this has been

223
00:11:48,326 --> 00:11:49,786 A:middle
happening in our board class.

224
00:11:50,166 --> 00:11:53,446 A:middle
So let's try and write a test
to tease out this problem.

225
00:11:54,326 --> 00:11:57,146 A:middle
I can do that by going
to the test navigator.

226
00:11:57,986 --> 00:12:00,416 A:middle
As you noticed we have
no tests for our project,

227
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

228
00:12:01,486 --> 00:12:06,076 A:middle
go down to the plus menu
and choose new test target.

229
00:12:10,516 --> 00:12:16,666 A:middle
What this will do is create a
new bundle inside of our project

230
00:12:17,006 --> 00:12:19,316 A:middle
that is linked against
our application

231
00:12:19,706 --> 00:12:24,526 A:middle
which contains the board
class that we want to test.

232
00:12:24,686 --> 00:12:27,706 A:middle
As you can see, the new test
bundle shows up right away

233
00:12:28,086 --> 00:12:29,876 A:middle
and takes just a
moment for the indexer

234
00:12:29,926 --> 00:12:32,886 A:middle
to find the board class
and the test method.

235
00:12:33,816 --> 00:12:36,066 A:middle
The test class and
the test method.

236
00:12:37,026 --> 00:12:39,376 A:middle
We can run the test just by
clicking on the indicator

237
00:12:39,376 --> 00:12:41,116 A:middle
in the test navigator.

238
00:12:42,626 --> 00:12:45,136 A:middle
And the test fails.

239
00:12:46,236 --> 00:12:48,606 A:middle
So we can find out why
by clicking on the test

240
00:12:48,856 --> 00:12:51,796 A:middle
which will navigate us to that
test and the source editor.

241
00:12:52,166 --> 00:12:56,016 A:middle
And as you can see here,
the test is unimplemented

242
00:12:56,166 --> 00:12:59,076 A:middle
so by default it has a
built-in unconditional failure.

243
00:12:59,766 --> 00:13:07,496 A:middle
So, we created a code
snippet ahead of time

244
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

245
00:13:07,586 --> 00:13:10,136 A:middle
that has a pre-cooked test
for this demo which I'm going

246
00:13:10,136 --> 00:13:11,456 A:middle
to autocomplete into
place, so you don't have

247
00:13:11,456 --> 00:13:13,216 A:middle
to watch me type
this all at on stage.

248
00:13:14,436 --> 00:13:19,616 A:middle
This is test unit locations and
it's got a couple of imports

249
00:13:19,646 --> 00:13:21,416 A:middle
that we need to put
here at the top.

250
00:13:22,496 --> 00:13:24,736 A:middle
There we go.

251
00:13:26,096 --> 00:13:31,026 A:middle
So this test creates four model
objects in our game, the board,

252
00:13:31,526 --> 00:13:35,346 A:middle
two pieces and one location to
try and move them both into.

253
00:13:36,526 --> 00:13:38,106 A:middle
This test makes four assertions.

254
00:13:39,206 --> 00:13:42,546 A:middle
First, it asserts that
moving the first piece

255
00:13:42,646 --> 00:13:44,746 A:middle
into the location on
the board succeeds

256
00:13:45,336 --> 00:13:46,826 A:middle
and then it actually
checks to see

257
00:13:46,826 --> 00:13:48,446 A:middle
if the piece is at
that location.

258
00:13:49,906 --> 00:13:53,326 A:middle
Then, it tries to move a second
piece into the same location

259
00:13:53,326 --> 00:13:56,966 A:middle
on the board and asserts that
that move actually fails.

260
00:13:58,076 --> 00:14:01,446 A:middle
Then, we check to
see if the second--

261
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

262
00:14:01,446 --> 00:14:03,956 A:middle
if the first piece is
still on the board.

263
00:14:04,816 --> 00:14:06,856 A:middle
So let's run this
test by clicking

264
00:14:06,996 --> 00:14:10,346 A:middle
on the test indicator next to
the method here on the editor.

265
00:14:11,516 --> 00:14:14,126 A:middle
Well, it looks like
our test is failing.

266
00:14:14,216 --> 00:14:17,296 A:middle
We should probably take a
look at the move piece method

267
00:14:17,526 --> 00:14:20,736 A:middle
to see why it's not
working as we expect.

268
00:14:21,326 --> 00:14:22,966 A:middle
I'll do that just
by command-clicking

269
00:14:23,386 --> 00:14:24,396 A:middle
on the move piece method.

270
00:14:25,056 --> 00:14:29,086 A:middle
And it looks like there's--

271
00:14:30,356 --> 00:14:34,916 A:middle
that the location to piece map
is always getting the piece

272
00:14:35,116 --> 00:14:38,266 A:middle
slammed in and there's no point

273
00:14:38,266 --> 00:14:41,506 A:middle
where this method is actually
trying to reject a move

274
00:14:41,506 --> 00:14:43,796 A:middle
to a location if there's
a piece already in place.

275
00:14:44,636 --> 00:14:48,046 A:middle
So, we can fix this pretty
easily just by adding a check

276
00:14:48,396 --> 00:14:50,066 A:middle
to a location to
piece map to see

277
00:14:50,066 --> 00:14:53,326 A:middle
if there is something that's
already in the location

278
00:14:54,116 --> 00:14:58,546 A:middle
and just return early with
a no to reject that move.

279
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

280
00:15:00,236 --> 00:15:06,356 A:middle
So, we can go back to the test
and rerun it with our change

281
00:15:06,356 --> 00:15:08,466 A:middle
in place and our test succeeds.

282
00:15:09,696 --> 00:15:13,256 A:middle
So, now our board class is
correctly rejecting moving a

283
00:15:13,256 --> 00:15:15,916 A:middle
piece into the same space
where another piece already is

284
00:15:16,856 --> 00:15:18,736 A:middle
and we'll go back to the slides.

285
00:15:19,516 --> 00:15:24,886 A:middle
[ Applause ]

286
00:15:25,386 --> 00:15:26,336 A:middle
So, what did we just see?

287
00:15:27,616 --> 00:15:31,986 A:middle
We made our first Xc test
bundle in our project

288
00:15:32,416 --> 00:15:34,596 A:middle
to test our board class inside

289
00:15:34,596 --> 00:15:36,596 A:middle
of our app using
the test navigator.

290
00:15:37,696 --> 00:15:39,996 A:middle
Then we wrote our first test

291
00:15:40,086 --> 00:15:44,106 A:middle
and asserted what the correct
behavior was for the board

292
00:15:44,206 --> 00:15:46,446 A:middle
and the piece classes and how
they were supposed to interact.

293
00:15:47,656 --> 00:15:50,376 A:middle
Then we ran the test
which exposed the bug

294
00:15:50,376 --> 00:15:54,186 A:middle
in our games model and once we
fixed up the implementation,

295
00:15:54,566 --> 00:15:57,826 A:middle
we reran the test without
ever leaving the editor just

296
00:15:58,416 --> 00:16:00,586 A:middle
by clicking on the
test indicator.

297
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

298
00:16:01,666 --> 00:16:04,066 A:middle
So now we have a test
that we can commit

299
00:16:04,066 --> 00:16:07,866 A:middle
into our source repository and
be sure that any future changes

300
00:16:07,866 --> 00:16:11,376 A:middle
to the board or piece classes
won't reintroduce the same bug

301
00:16:11,376 --> 00:16:12,716 A:middle
as long as that test gets run.

302
00:16:13,696 --> 00:16:15,516 A:middle
Pretty easy, start getting to--

303
00:16:15,566 --> 00:16:17,086 A:middle
easy to get started
with testing, right?

304
00:16:18,436 --> 00:16:21,726 A:middle
So let's take a closer
look at how Xc test works.

305
00:16:22,306 --> 00:16:28,566 A:middle
So the whole point of a
test method is to assert

306
00:16:28,766 --> 00:16:30,136 A:middle
that certain assumptions
are met.

307
00:16:31,196 --> 00:16:33,306 A:middle
If you can think of a condition
that you might want to test,

308
00:16:33,986 --> 00:16:37,646 A:middle
Xc test's got an
assertion for that.

309
00:16:39,016 --> 00:16:40,256 A:middle
We're just going to take a look

310
00:16:40,256 --> 00:16:41,616 A:middle
at a couple of common
assertions.

311
00:16:42,646 --> 00:16:48,076 A:middle
For example, XCT assert equals
objects, takes two objects

312
00:16:48,486 --> 00:16:49,626 A:middle
and the optional message.

313
00:16:51,066 --> 00:16:57,666 A:middle
It passes if the two objects is
equals methods actually agree

314
00:16:57,666 --> 00:16:59,596 A:middle
that the two objects
are in fact the same.

315
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

316
00:17:01,466 --> 00:17:04,195 A:middle
XCT assert not nil
is a favorite of mine

317
00:17:04,606 --> 00:17:07,036 A:middle
because it can catch
situations where you message nil

318
00:17:07,445 --> 00:17:10,465 A:middle
and it returns nil and
propagates that nil farther

319
00:17:10,465 --> 00:17:11,386 A:middle
than you might expect.

320
00:17:13,486 --> 00:17:15,496 A:middle
XCT assert true and false.

321
00:17:16,006 --> 00:17:17,796 A:middle
Both take a single
Boolean expression

322
00:17:18,215 --> 00:17:21,776 A:middle
and an optional message and do
basically what you would expect.

323
00:17:22,955 --> 00:17:30,286 A:middle
And XCT assert throws is really
good for testing your API

324
00:17:30,616 --> 00:17:34,816 A:middle
to ensure that an exception
is thrown in situations

325
00:17:34,946 --> 00:17:37,636 A:middle
where it's actually being
passed in valid parameters.

326
00:17:39,266 --> 00:17:43,526 A:middle
So let's take a look at a few
things that are good to assert.

327
00:17:44,486 --> 00:17:46,496 A:middle
Most tests fall into
a few categories.

328
00:17:46,896 --> 00:17:49,146 A:middle
First, are expected successes.

329
00:17:50,326 --> 00:17:53,246 A:middle
These are situations where
your code is working basically

330
00:17:53,246 --> 00:17:55,006 A:middle
as designed.

331
00:17:55,006 --> 00:17:59,236 A:middle
An addition method takes 2 and
2 and returns 4, a character,

332
00:17:59,716 --> 00:18:02,576 A:middle
gets a health pack and health
is bumped up by 5 percent.

333
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

334
00:18:03,676 --> 00:18:07,346 A:middle
This may include EDGE Cases,
but this is still situations

335
00:18:07,346 --> 00:18:09,006 A:middle
where your code is
doing the right thing

336
00:18:09,046 --> 00:18:12,686 A:middle
by whatever definition it is
that you've defined it to be.

337
00:18:13,116 --> 00:18:15,336 A:middle
Some people actually
write tests first

338
00:18:15,996 --> 00:18:17,886 A:middle
which help them define
their implementation.

339
00:18:18,926 --> 00:18:21,816 A:middle
They'll take use cases
and express them as tests

340
00:18:21,816 --> 00:18:25,726 A:middle
and they'll keep writing
their actual implementation

341
00:18:25,846 --> 00:18:29,466 A:middle
until they get all of
their tests to pass.

342
00:18:30,376 --> 00:18:34,106 A:middle
The second category are from
bugs that have been reported

343
00:18:34,106 --> 00:18:36,606 A:middle
by your users or have been
found in other testing

344
00:18:37,056 --> 00:18:39,576 A:middle
that you've distilled down
into making unit tests.

345
00:18:40,746 --> 00:18:43,876 A:middle
These kinds of tests
grow over time and ensure

346
00:18:43,876 --> 00:18:46,556 A:middle
that you don't reintroduce
the same kinds of problems

347
00:18:46,836 --> 00:18:47,896 A:middle
with later code changes.

348
00:18:49,406 --> 00:18:51,976 A:middle
The third category is a
little less intuitive.

349
00:18:53,256 --> 00:18:56,656 A:middle
To fully cover your code,
you should consider cases

350
00:18:56,656 --> 00:18:58,766 A:middle
where your code is
actually expected

351
00:18:58,766 --> 00:19:03,776 A:middle
to fail however it emits errors,
how it might throw an exemption

352
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

353
00:19:04,816 --> 00:19:07,866 A:middle
if your addition method takes
2 billion plus 2 billion,

354
00:19:08,356 --> 00:19:13,696 A:middle
it could result in overflow or
out of nowhere, a wild infinity

355
00:19:13,696 --> 00:19:16,696 A:middle
or not a number could appear as
a result of some calculation.

356
00:19:18,566 --> 00:19:21,396 A:middle
It makes sense to
write a test to ensure

357
00:19:21,396 --> 00:19:22,946 A:middle
that an exception gets thrown

358
00:19:23,476 --> 00:19:26,186 A:middle
or some other error is
surfaced for these cases.

359
00:19:27,526 --> 00:19:29,476 A:middle
Sometimes with higher
level objects,

360
00:19:29,476 --> 00:19:31,996 A:middle
getting past nil is
totally unexpected

361
00:19:32,856 --> 00:19:36,486 A:middle
or you could be passing an
array which is shockingly empty.

362
00:19:37,756 --> 00:19:40,826 A:middle
The untyped collections in
Cocoa can be problematic

363
00:19:41,116 --> 00:19:43,666 A:middle
if you assume things like keys

364
00:19:43,666 --> 00:19:45,436 A:middle
and dictionaries
and always strings.

365
00:19:46,046 --> 00:19:48,936 A:middle
Or, you could get an NS
null value that could sneak

366
00:19:48,936 --> 00:19:51,796 A:middle
in as a side effect to
somebody observing through KVO.

367
00:19:52,366 --> 00:19:56,076 A:middle
And finally, if your
code uses NS errors

368
00:19:56,486 --> 00:19:59,526 A:middle
or venns them throughout
parameters, you want to assert

369
00:19:59,526 --> 00:20:02,706 A:middle
that those errors are actually
created with useful information

370
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

371
00:20:02,706 --> 00:20:06,436 A:middle
in them and that they're
handled in a sensible way.

372
00:20:08,136 --> 00:20:10,876 A:middle
So writing tests for
all of these sorts

373
00:20:10,876 --> 00:20:13,976 A:middle
of situations will give your
code the most complete coverage.

374
00:20:15,876 --> 00:20:19,356 A:middle
So now, I'd like to back up and
take a look at what sort of set

375
00:20:19,356 --> 00:20:20,736 A:middle
up might be needed for each

376
00:20:20,736 --> 00:20:22,246 A:middle
of your test methods
before they're run.

377
00:20:22,246 --> 00:20:29,196 A:middle
The set up method is your
opportunity to run common bits

378
00:20:29,196 --> 00:20:31,526 A:middle
of code before each
of your test methods.

379
00:20:32,246 --> 00:20:34,776 A:middle
If you find that you're
copying and pasting code

380
00:20:34,776 --> 00:20:36,246 A:middle
from test method to test method,

381
00:20:36,766 --> 00:20:38,506 A:middle
set up might actually
be a pretty good place

382
00:20:38,506 --> 00:20:39,636 A:middle
to centralize some of that.

383
00:20:41,086 --> 00:20:43,856 A:middle
You can set up shim objects
that might represent things

384
00:20:43,856 --> 00:20:46,626 A:middle
like a server which would
not be appropriate to contact

385
00:20:47,056 --> 00:20:48,086 A:middle
in a testing environment.

386
00:20:48,936 --> 00:20:53,546 A:middle
You can also load
Plist, JSON, and XML data

387
00:20:53,956 --> 00:20:56,996 A:middle
from your Xc test
bundles resources just

388
00:20:56,996 --> 00:20:59,726 A:middle
by calling NS bundle,
bundle for class

389
00:20:59,866 --> 00:21:03,216 A:middle
and giving it a reference
to your test class.

390
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

391
00:21:03,856 --> 00:21:05,216 A:middle
Putting data and documents

392
00:21:05,686 --> 00:21:07,606 A:middle
into your test bundle
is a great place

393
00:21:07,606 --> 00:21:10,806 A:middle
to store pathological used cases

394
00:21:10,976 --> 00:21:13,096 A:middle
that may have been
reported by as bugs.

395
00:21:13,916 --> 00:21:16,286 A:middle
And finally, if you need to
undo anything that you did

396
00:21:16,286 --> 00:21:18,746 A:middle
in your set up method,
tear down is there for you.

397
00:21:19,816 --> 00:21:23,576 A:middle
So let's see how
this works in action.

398
00:21:24,256 --> 00:21:29,096 A:middle
First, the test rig finds all
subclasses of Xc test case

399
00:21:30,346 --> 00:21:33,006 A:middle
and starts iterating through
them in no particular order.

400
00:21:34,216 --> 00:21:38,946 A:middle
Then for this example, it finds
exempt-- the example tests class

401
00:21:39,326 --> 00:21:41,016 A:middle
and notices that there
are two methods in it.

402
00:21:42,676 --> 00:21:45,986 A:middle
First, the set up method
for the class is run,

403
00:21:46,906 --> 00:21:51,286 A:middle
then a new instance of
the test class is created

404
00:21:51,286 --> 00:21:52,746 A:middle
and set up as called on that.

405
00:21:53,756 --> 00:21:57,486 A:middle
Then your actual test
method itself is run

406
00:21:58,046 --> 00:22:01,356 A:middle
which in this case
will pass and then tear

407
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

408
00:22:01,356 --> 00:22:02,776 A:middle
down is called on that instance.

409
00:22:03,956 --> 00:22:06,316 A:middle
After that, another
instance is created

410
00:22:06,316 --> 00:22:08,676 A:middle
and setup is called on it.

411
00:22:08,816 --> 00:22:12,486 A:middle
Then the second test method gets
run which in this case will fail

412
00:22:12,486 --> 00:22:16,146 A:middle
and tear down gets called on
the instance then gets called

413
00:22:16,146 --> 00:22:19,656 A:middle
on the class and the test rig
moves on to the next class.

414
00:22:21,116 --> 00:22:23,826 A:middle
Pretty straightforward, right?

415
00:22:24,806 --> 00:22:29,416 A:middle
So, I'd like to take a
moment before another demo

416
00:22:29,886 --> 00:22:31,566 A:middle
to mention OC unit.

417
00:22:32,596 --> 00:22:36,406 A:middle
OC unit is Xcode's unit
testing framework or has been

418
00:22:36,406 --> 00:22:41,066 A:middle
since version 2.1 and that's--
you may already have some tests

419
00:22:41,066 --> 00:22:41,746 A:middle
that are written in it.

420
00:22:41,746 --> 00:22:44,946 A:middle
A lot of you actually have
tests that are written in it.

421
00:22:45,376 --> 00:22:48,356 A:middle
That's great and we don't want
to break any of your tests.

422
00:22:48,986 --> 00:22:54,056 A:middle
So we ensured that OC unit
and Xc unit could coexist side

423
00:22:54,056 --> 00:22:56,996 A:middle
by side as we make
more disruptive changes

424
00:22:56,996 --> 00:22:58,576 A:middle
to Xc test in the future.

425
00:22:59,706 --> 00:23:04,016 A:middle
Xcode 5 actually recognizes
all of the same test classes

426
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

427
00:23:04,376 --> 00:23:07,576 A:middle
and will show you your classes
and your test methods inside

428
00:23:07,576 --> 00:23:10,956 A:middle
of the test navigator
as well as all

429
00:23:10,956 --> 00:23:14,366 A:middle
of the editor indicators
in the side bar.

430
00:23:14,576 --> 00:23:18,526 A:middle
If you're-- if you want to
run your tests on iOS 6 and 7,

431
00:23:19,516 --> 00:23:25,246 A:middle
OC unit is actually the
right choice for you.

432
00:23:25,696 --> 00:23:29,556 A:middle
So-- but when you're
ready to adopt Xc unit,

433
00:23:29,856 --> 00:23:34,276 A:middle
Xc test we have an
option available under--

434
00:23:34,776 --> 00:23:36,156 A:middle
to the run the migration tool

435
00:23:36,156 --> 00:23:39,186 A:middle
under the Edit menu
refactoring option

436
00:23:40,066 --> 00:23:44,266 A:middle
and then convert
to Xc test case.

437
00:23:44,816 --> 00:23:47,956 A:middle
So now that we've dove
into Xc test all the way

438
00:23:47,956 --> 00:23:48,896 A:middle
down to the code level.

439
00:23:49,506 --> 00:23:51,566 A:middle
I'm sure you're going to want
to see how to debug your tests.

440
00:23:52,826 --> 00:23:54,836 A:middle
We've added some
great new UI features

441
00:23:54,836 --> 00:23:57,966 A:middle
to Xcode 5 beyond just
the test navigator

442
00:23:57,996 --> 00:24:01,496 A:middle
and the editor indicators
to help you quickly run

443
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

444
00:24:01,496 --> 00:24:02,666 A:middle
and debug your tests

445
00:24:02,666 --> 00:24:05,096 A:middle
with a workflow I think
you're going to love.

446
00:24:05,966 --> 00:24:08,856 A:middle
So to show this to you in our
next demo, I'd like to turn it

447
00:24:08,856 --> 00:24:11,226 A:middle
over to my friend and
colleague Bino George.

448
00:24:12,516 --> 00:24:18,776 A:middle
[ Applause ]

449
00:24:19,276 --> 00:24:19,736 A:middle
>> Thanks Mike.

450
00:24:20,996 --> 00:24:22,516 A:middle
This is the demonstration.

451
00:24:23,326 --> 00:24:27,626 A:middle
So this is a newer version of
the project that we saw earlier

452
00:24:27,626 --> 00:24:31,256 A:middle
and it has many more test that
covered the various EDGE Cases

453
00:24:31,916 --> 00:24:35,556 A:middle
for our board games
model classes.

454
00:24:35,896 --> 00:24:38,036 A:middle
Before we get started and I need

455
00:24:38,036 --> 00:24:41,456 A:middle
to add a new break point
that's new in Xcode 5

456
00:24:42,156 --> 00:24:43,756 A:middle
which breaks on test failures.

457
00:24:44,416 --> 00:24:47,036 A:middle
To do that I'm going
to switch the test--

458
00:24:47,036 --> 00:24:52,426 A:middle
to the breakpoint navigator
and I'm going to click

459
00:24:52,426 --> 00:25:01,066 A:middle
on the plus button and select
Add test failure breakpoint.

460
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

461
00:25:01,446 --> 00:25:03,846 A:middle
So this special breakpoint stops
when a test assertion fails.

462
00:25:03,846 --> 00:25:06,326 A:middle
You'll probably want
to understand

463
00:25:06,326 --> 00:25:08,126 A:middle
when you're debugging your test.

464
00:25:08,746 --> 00:25:11,756 A:middle
It's helpful because it stops
the debugger right at the point

465
00:25:11,756 --> 00:25:14,196 A:middle
of the failure, at the
point of the test assertion

466
00:25:14,196 --> 00:25:19,216 A:middle
where you can inspect the live
objects that caused the failure.

467
00:25:20,556 --> 00:25:24,626 A:middle
So let's switch back to test
navigator and run all the test.

468
00:25:25,086 --> 00:25:29,506 A:middle
I can do that by clicking on
the one button for the bundle.

469
00:25:30,516 --> 00:25:36,496 A:middle
[ Pause ]

470
00:25:36,996 --> 00:25:39,886 A:middle
Huh, looks like there's
a failure.

471
00:25:40,866 --> 00:25:42,526 A:middle
Mike must have checked in
something before he went

472
00:25:42,526 --> 00:25:45,036 A:middle
on the stage that
broke one of my test.

473
00:25:46,046 --> 00:25:47,806 A:middle
It looks like they're
failing on and this--

474
00:25:47,806 --> 00:25:49,406 A:middle
it looks they're
failing on an assertion

475
00:25:49,406 --> 00:25:50,486 A:middle
for our rule checker class.

476
00:25:51,056 --> 00:25:54,306 A:middle
In the out of bounds move test,

477
00:25:55,346 --> 00:25:57,636 A:middle
it's creating an invalid
location and then trying

478
00:25:57,636 --> 00:25:58,856 A:middle
to move the piece there.

479
00:25:59,516 --> 00:26:03,476 A:middle
[ Pause ]

480
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

481
00:26:03,976 --> 00:26:05,686 A:middle
The debugger tool
tip was telling us

482
00:26:05,996 --> 00:26:08,696 A:middle
that the rule check is
actually allowing this.

483
00:26:09,856 --> 00:26:13,776 A:middle
So now we know why the test is
actually failing but let's find

484
00:26:13,776 --> 00:26:14,836 A:middle
out why it's actually failing,

485
00:26:14,836 --> 00:26:16,326 A:middle
why the rule checker
is allowing this.

486
00:26:17,426 --> 00:26:21,836 A:middle
To do that, I'm going to add a
new manual breakpoint before the

487
00:26:21,836 --> 00:26:22,586 A:middle
test failure.

488
00:26:23,016 --> 00:26:28,406 A:middle
And then I can rerun
the test again.

489
00:26:32,256 --> 00:26:37,476 A:middle
Now, on the second run we hit
the manual breakpoint before the

490
00:26:37,476 --> 00:26:38,086 A:middle
actual failure.

491
00:26:38,136 --> 00:26:42,646 A:middle
So lets step into the
valid location method.

492
00:26:47,516 --> 00:26:51,276 A:middle
So the first thing it does is
actually check that the piece

493
00:26:51,276 --> 00:26:53,536 A:middle
that you're moving is
actually already on the board

494
00:26:53,536 --> 00:26:55,976 A:middle
and to do it I just
find the old location.

495
00:26:56,716 --> 00:27:01,106 A:middle
I'm going to step
over it and it looks

496
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

497
00:27:01,106 --> 00:27:02,466 A:middle
like all location is not nil

498
00:27:02,466 --> 00:27:04,406 A:middle
so that means the piece
is already on the board.

499
00:27:04,406 --> 00:27:09,166 A:middle
So the next thing it does
is it actually checks

500
00:27:09,166 --> 00:27:13,076 A:middle
that the location you're
moving to is actually

501
00:27:13,076 --> 00:27:14,136 A:middle
within the bounds of the board.

502
00:27:14,256 --> 00:27:19,366 A:middle
And that's exactly what our test
is actually doing in this test.

503
00:27:19,856 --> 00:27:21,886 A:middle
So let's see if that's the case.

504
00:27:22,516 --> 00:27:30,686 A:middle
[ Pause ]

505
00:27:31,186 --> 00:27:35,066 A:middle
Clearly the rule check is
clearly wrong here and--

506
00:27:35,516 --> 00:27:38,206 A:middle
no the logic is clearly
giving us the wrong result.

507
00:27:38,206 --> 00:27:44,476 A:middle
So the board's frame
is actually 0088

508
00:27:44,546 --> 00:27:46,106 A:middle
and the coordinate is actually--

509
00:27:46,106 --> 00:27:47,966 A:middle
the removing tool is
negative one, negative one

510
00:27:48,366 --> 00:27:50,086 A:middle
which is clearly outside
of the bounds of the board.

511
00:27:50,086 --> 00:27:55,276 A:middle
The bug is probably in
this giant nest of code

512
00:27:56,026 --> 00:27:59,996 A:middle
and since we already
have the board's frame

513
00:27:59,996 --> 00:28:02,036 A:middle
and the performance of
NSRect and the boards--

514
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

515
00:28:02,766 --> 00:28:05,226 A:middle
the location we were going to--
in the form of an NSPoint,

516
00:28:05,916 --> 00:28:08,026 A:middle
I think there's a foundation
method that does this for us

517
00:28:08,026 --> 00:28:10,256 A:middle
and we can remove all those
bunch (inaudible) away.

518
00:28:10,256 --> 00:28:15,746 A:middle
It's again it's called
NSPoint/NSRect.

519
00:28:17,346 --> 00:28:19,436 A:middle
It takes a point and NSRect.

520
00:28:20,056 --> 00:28:21,966 A:middle
So the point in this
case is new coordinate

521
00:28:22,946 --> 00:28:25,286 A:middle
and the rect is board frame.

522
00:28:27,936 --> 00:28:28,966 A:middle
That's a lot simpler.

523
00:28:28,966 --> 00:28:32,166 A:middle
So let's see if this actually--
if the test is passing now.

524
00:28:36,376 --> 00:28:39,756 A:middle
To do that, I'm going to
use a new test command

525
00:28:39,756 --> 00:28:41,426 A:middle
in the Product menu.

526
00:28:41,916 --> 00:28:47,826 A:middle
The test again command
is very powerful.

527
00:28:47,826 --> 00:28:50,126 A:middle
It allows you to rebond the last
set of test that you're in over

528
00:28:50,126 --> 00:28:54,396 A:middle
and over again and it can help
you debug your test while you're

529
00:28:54,396 --> 00:28:57,866 A:middle
iterating over the test.

530
00:28:58,036 --> 00:29:00,536 A:middle
So in the Product menu
under Perform Action,

531
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

532
00:29:00,536 --> 00:29:01,826 A:middle
I'm going to select test again.

533
00:29:01,826 --> 00:29:07,446 A:middle
It looks like I hit
the manual breakpoint

534
00:29:07,446 --> 00:29:08,346 A:middle
that we added earlier.

535
00:29:08,576 --> 00:29:15,106 A:middle
So I'm going to remove
that and continue.

536
00:29:15,106 --> 00:29:18,406 A:middle
Great, our test is
passing and the one checked

537
00:29:18,406 --> 00:29:19,196 A:middle
in code is working now.

538
00:29:20,626 --> 00:29:23,486 A:middle
So now that we fixed this
test, I want to make sure

539
00:29:23,486 --> 00:29:25,926 A:middle
that we didn't break any
other test in my code.

540
00:29:26,526 --> 00:29:29,676 A:middle
So I want to find out
which other test are there

541
00:29:29,736 --> 00:29:30,436 A:middle
for this API.

542
00:29:31,406 --> 00:29:34,386 A:middle
To do this, I can use the--

543
00:29:34,386 --> 00:29:36,396 A:middle
a new assessment category
at the other Xcode 5.

544
00:29:36,396 --> 00:29:43,846 A:middle
So I'm going to switch
the assessment editor

545
00:29:44,656 --> 00:29:46,226 A:middle
and select Test Colors.

546
00:29:46,226 --> 00:29:51,656 A:middle
And I'm going to switch
to the primary editor back

547
00:29:51,656 --> 00:29:56,246 A:middle
to the API review testing and
here is our first test method

548
00:29:56,246 --> 00:29:57,536 A:middle
that we already tested.

549
00:29:58,026 --> 00:30:00,746 A:middle
Let's see if there
are any other test.

550
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

551
00:30:02,106 --> 00:30:04,696 A:middle
There's another test called test
vertical move and let's switch

552
00:30:04,696 --> 00:30:07,926 A:middle
to that and run that
test as well.

553
00:30:08,136 --> 00:30:11,796 A:middle
Great, this test
is also passing.

554
00:30:12,616 --> 00:30:15,706 A:middle
So now let's make sure that
everything else is working

555
00:30:15,706 --> 00:30:17,626 A:middle
and to do that I'm going to
switch the test navigator.

556
00:30:17,626 --> 00:30:23,526 A:middle
It looks like we never
completely finished the full run

557
00:30:23,526 --> 00:30:24,606 A:middle
of tests.

558
00:30:24,706 --> 00:30:26,206 A:middle
So I can rerun all the tests

559
00:30:26,206 --> 00:30:28,826 A:middle
by using the Test
Menu on the product.

560
00:30:29,516 --> 00:30:36,376 A:middle
[ Pause ]

561
00:30:36,876 --> 00:30:38,946 A:middle
Great. Looks like
there are no failures

562
00:30:38,946 --> 00:30:42,626 A:middle
and we see green all the
way down to test navigator.

563
00:30:42,656 --> 00:30:44,236 A:middle
Everything looks great
on my local machine

564
00:30:44,236 --> 00:30:46,136 A:middle
and I should probably
check in this fix,

565
00:30:46,476 --> 00:30:48,436 A:middle
but for now let's switch
back to the slides.

566
00:30:49,516 --> 00:31:11,906 A:middle
[ Pause ]

567
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

568
00:31:12,406 --> 00:31:13,806 A:middle
So we just saw a
lot in the demo.

569
00:31:13,806 --> 00:31:17,816 A:middle
There are three new Xcode 5 UI
features I'd like to call out.

570
00:31:18,956 --> 00:31:21,206 A:middle
The first is the test
failure breakpoint.

571
00:31:22,056 --> 00:31:25,576 A:middle
When we add it to our project
it stopped the test execution

572
00:31:25,576 --> 00:31:28,566 A:middle
in the debugger right
at the test failure.

573
00:31:29,056 --> 00:31:31,516 A:middle
So this allows us to
inspect the live objects

574
00:31:31,516 --> 00:31:35,266 A:middle
that cause test failure.

575
00:31:35,266 --> 00:31:37,636 A:middle
Second we saw that there are
new assistant categories.

576
00:31:39,056 --> 00:31:41,426 A:middle
We use a test color's
category in the demo

577
00:31:42,106 --> 00:31:43,416 A:middle
to find the second method

578
00:31:43,416 --> 00:31:46,536 A:middle
that was calling our test
a valid location API.

579
00:31:46,746 --> 00:31:50,326 A:middle
It works just like the
general colors category

580
00:31:50,486 --> 00:31:52,066 A:middle
but it focused just
on the test methods

581
00:31:52,186 --> 00:31:54,796 A:middle
that are calling the
method that you're editing

582
00:31:54,796 --> 00:31:55,596 A:middle
in the primary editor.

583
00:31:56,246 --> 00:31:58,056 A:middle
Very tight, very
focused results.

584
00:31:59,796 --> 00:32:04,406 A:middle
The test pluses category we
didn't see it in the demo

585
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

586
00:32:04,556 --> 00:32:07,366 A:middle
but it's a good way-- what it
does is it gives you a wider

587
00:32:07,396 --> 00:32:12,116 A:middle
range of classes that have test
methods in them that call the--

588
00:32:12,116 --> 00:32:15,116 A:middle
that referenced the classes
you are editing in the primary.

589
00:32:16,526 --> 00:32:18,666 A:middle
It's a good way to step back
and see where you might want

590
00:32:18,666 --> 00:32:21,696 A:middle
to add new test especially for
new code that you're developing.

591
00:32:22,236 --> 00:32:28,396 A:middle
And third, we saw
the-- we use a test--

592
00:32:28,396 --> 00:32:32,396 A:middle
a new test command in the
product Perform Action menu.

593
00:32:32,916 --> 00:32:37,486 A:middle
The test again command
is incredibly powerful.

594
00:32:37,486 --> 00:32:41,336 A:middle
It allows you to rerun the last
set of test that you run over

595
00:32:41,336 --> 00:32:44,226 A:middle
and over again with
just one key stroke.

596
00:32:44,226 --> 00:32:49,116 A:middle
You can be in the middle
of editing any file

597
00:32:49,116 --> 00:32:51,326 A:middle
in your source editor
and would want it

598
00:32:51,326 --> 00:32:52,916 A:middle
and you can work the
Test Again command

599
00:32:52,976 --> 00:32:54,626 A:middle
and you get immediate results.

600
00:32:55,226 --> 00:32:57,396 A:middle
You will now just then
rather, changes you made

601
00:32:57,396 --> 00:32:59,766 A:middle
in the editor actually fix the
test that you're working on.

602
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

603
00:33:00,356 --> 00:33:03,246 A:middle
We think it's a really big deal
and it's one of those features

604
00:33:03,246 --> 00:33:06,126 A:middle
that you love once
you start using it.

605
00:33:08,136 --> 00:33:09,836 A:middle
So now that we've
shown you how to write

606
00:33:09,836 --> 00:33:11,796 A:middle
and debug test locally
inside test Xcode,

607
00:33:12,216 --> 00:33:15,436 A:middle
I'd like to shift gears and show
you how OS X server can save you

608
00:33:15,436 --> 00:33:17,456 A:middle
time and catch problems
by running all

609
00:33:17,456 --> 00:33:22,006 A:middle
of your tests all the time.

610
00:33:22,006 --> 00:33:24,266 A:middle
So earlier this week you
may have seen how to set

611
00:33:24,266 --> 00:33:27,596 A:middle
up OS X server, so we will
make something how to set

612
00:33:27,596 --> 00:33:28,796 A:middle
up OS X server in this session

613
00:33:28,796 --> 00:33:31,596 A:middle
but in the Continuous
Integration with Xcode 5 session

614
00:33:31,596 --> 00:33:35,346 A:middle
on Tuesday this was covered and
depth so you might want to refer

615
00:33:35,346 --> 00:33:37,966 A:middle
to that for your-- when
you leave the session.

616
00:33:38,606 --> 00:33:41,916 A:middle
So after you set up the export
service, you can create a bot

617
00:33:42,046 --> 00:33:44,376 A:middle
to integrate your project.

618
00:33:44,376 --> 00:33:48,186 A:middle
Integration is the act of
checking out your code, building

619
00:33:48,186 --> 00:33:50,016 A:middle
and running your tests.

620
00:33:50,166 --> 00:33:53,816 A:middle
Integration can happen on
every commit, on every hour

621
00:33:53,816 --> 00:33:55,646 A:middle
or whatever interval
is right for your team.

622
00:33:56,516 --> 00:34:02,316 A:middle
[ Pause ]

623
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

624
00:34:02,816 --> 00:34:06,526 A:middle
So, you could have multiple bots
-- integrate all of the products

625
00:34:06,526 --> 00:34:09,076 A:middle
in your project, one
for your app NSTest,

626
00:34:09,485 --> 00:34:13,146 A:middle
one for your framework NSTest,
one for your library NSTest.

627
00:34:13,246 --> 00:34:14,266 A:middle
But there is a much
simplier way.

628
00:34:14,306 --> 00:34:19,196 A:middle
You can create a shared scheme

629
00:34:19,896 --> 00:34:22,096 A:middle
and this shared scheme
everything in your app,

630
00:34:22,255 --> 00:34:25,065 A:middle
your app NSTest, your library
NSTest, they're all going

631
00:34:25,065 --> 00:34:25,956 A:middle
to this shared scheme.

632
00:34:26,846 --> 00:34:28,176 A:middle
All the test bundles for all

633
00:34:28,176 --> 00:34:32,176 A:middle
of the products you create
are going to the scheme

634
00:34:32,396 --> 00:34:34,206 A:middle
which you can then edit
in the scheme sheet

635
00:34:34,206 --> 00:34:36,985 A:middle
or in the test navigator
directly

636
00:34:36,985 --> 00:34:40,186 A:middle
in the test navigator itself.

637
00:34:40,275 --> 00:34:42,116 A:middle
You will then check
in this sheet--

638
00:34:42,116 --> 00:34:45,166 A:middle
this scheme into
source repository

639
00:34:45,166 --> 00:34:50,166 A:middle
and then the bots can integrate
your project, the scheme.

640
00:34:50,456 --> 00:34:53,636 A:middle
Since the shared scheme,

641
00:34:53,636 --> 00:34:59,666 A:middle
everybody in your team can
also run the same scheme.

642
00:34:59,866 --> 00:35:01,546 A:middle
So once you've set up a bot

643
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

644
00:35:01,546 --> 00:35:04,656 A:middle
for your project any time
there's a new test failure

645
00:35:04,656 --> 00:35:07,646 A:middle
or new build issue will
bring that to you right away.

646
00:35:07,646 --> 00:35:10,606 A:middle
On the score board over
the next code itself right

647
00:35:10,606 --> 00:35:12,766 A:middle
into the activity
area where you can--

648
00:35:12,766 --> 00:35:17,366 A:middle
when you open that project.

649
00:35:17,466 --> 00:35:20,426 A:middle
So besides running all of your
test all the time for you,

650
00:35:20,736 --> 00:35:22,976 A:middle
there's an, you will now an
exciting reason why you want

651
00:35:22,976 --> 00:35:25,716 A:middle
to have OS X server do your
continuous integration for you.

652
00:35:25,716 --> 00:35:30,276 A:middle
You can cover-- your test
will run on a wide variety

653
00:35:30,276 --> 00:35:32,486 A:middle
of configurations that
simply isn't possible to do

654
00:35:32,486 --> 00:35:35,166 A:middle
on your laptop or
while you are sitting

655
00:35:35,166 --> 00:35:37,756 A:middle
at your desktop,
sitting at your desk.

656
00:35:37,976 --> 00:35:43,116 A:middle
You can have many more
devices connected to the server

657
00:35:43,236 --> 00:35:46,416 A:middle
and the server will basically
run all of your test on any

658
00:35:46,416 --> 00:35:48,766 A:middle
or all of these devices
for you automatically.

659
00:35:51,216 --> 00:35:53,586 A:middle
This allows you to cover
a wide variety of hardware

660
00:35:53,586 --> 00:35:55,666 A:middle
and software configurations
automatically.

661
00:35:56,326 --> 00:36:01,526 A:middle
You can also run your test
on the simulator although

662
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

663
00:36:01,526 --> 00:36:04,456 A:middle
in the current OS X server
seed that's not supported,

664
00:36:05,056 --> 00:36:08,286 A:middle
it's not available.

665
00:36:08,286 --> 00:36:11,126 A:middle
Between the simulator and the
devices connected to the server,

666
00:36:11,126 --> 00:36:13,666 A:middle
you can cut-- you can cover
a wide variety of hardware

667
00:36:13,666 --> 00:36:15,276 A:middle
and software cointegrations
automatically

668
00:36:16,486 --> 00:36:18,536 A:middle
and you can cover
all the OS versions

669
00:36:18,536 --> 00:36:19,376 A:middle
that you support as well.

670
00:36:20,076 --> 00:36:25,866 A:middle
If you're integrating an OS
X project, server will check

671
00:36:25,866 --> 00:36:29,966 A:middle
out your project, build
your app and NSTests

672
00:36:29,966 --> 00:36:33,086 A:middle
and run everything locally on
the server itself without having

673
00:36:33,086 --> 00:36:34,406 A:middle
to have a user logged
in graphically.

674
00:36:34,406 --> 00:36:38,616 A:middle
So to see this in action,
let's switch to a demo machine.

675
00:36:38,676 --> 00:36:45,496 A:middle
So this is the same
project that we saw earlier

676
00:36:45,496 --> 00:36:48,366 A:middle
that I just checked out
from my OS X server here.

677
00:36:53,916 --> 00:36:56,456 A:middle
This red indicator shows us
that there's a problem with one

678
00:36:56,456 --> 00:36:58,006 A:middle
of the boards that's
integrating this project.

679
00:36:58,006 --> 00:37:03,946 A:middle
So I'm going to click on this
indicator to see what's wrong.

680
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

681
00:37:04,516 --> 00:37:10,236 A:middle
[ Pause ]

682
00:37:10,736 --> 00:37:12,976 A:middle
Let's take a look at the board
to see exactly what's going on.

683
00:37:13,516 --> 00:37:21,546 A:middle
[ Pause ]

684
00:37:22,046 --> 00:37:25,306 A:middle
Here we see all the
recent integrations

685
00:37:25,486 --> 00:37:27,376 A:middle
that we performed on--
that the board performed

686
00:37:27,426 --> 00:37:28,346 A:middle
for this project.

687
00:37:28,436 --> 00:37:33,516 A:middle
I can see all the test
failures as well, a few.

688
00:37:34,286 --> 00:37:35,946 A:middle
So we've had a run
of clean integrations

689
00:37:36,156 --> 00:37:38,166 A:middle
and everything was going
up until this point

690
00:37:38,636 --> 00:37:40,286 A:middle
but somebody broke one
of our tests just now.

691
00:37:44,856 --> 00:37:46,556 A:middle
So to find out which
test is failing,

692
00:37:46,556 --> 00:37:48,706 A:middle
let's click on the
integration test results.

693
00:37:49,516 --> 00:37:55,226 A:middle
[ Pause ]

694
00:37:55,726 --> 00:38:00,266 A:middle
So I have-- this is where you
can see all your tests and all

695
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

696
00:38:00,266 --> 00:38:01,996 A:middle
of the devices that are
connected to the server

697
00:38:02,036 --> 00:38:04,316 A:middle
and the results for all of the
test that ran on the server.

698
00:38:04,826 --> 00:38:08,016 A:middle
You can see various
configurations

699
00:38:08,336 --> 00:38:10,246 A:middle
like I have an iPad mini here

700
00:38:10,246 --> 00:38:12,926 A:middle
and an iPhone running
iOS 6-- iOS 7.

701
00:38:12,926 --> 00:38:16,296 A:middle
I only have two devices here

702
00:38:16,296 --> 00:38:21,036 A:middle
but you could have many more
devices connected to the server.

703
00:38:21,036 --> 00:38:24,316 A:middle
The first device I have is an
iPad mini and its running iOS 6,

704
00:38:24,396 --> 00:38:27,476 A:middle
the second device I have
is an iPhone running iOS 7.

705
00:38:27,476 --> 00:38:32,626 A:middle
So we can look at the failing
test, the code of failing test

706
00:38:32,626 --> 00:38:35,196 A:middle
by clicking on the
red test indicator.

707
00:38:35,826 --> 00:38:42,506 A:middle
So this is a test that
basically parses high score data

708
00:38:42,506 --> 00:38:43,356 A:middle
from our server.

709
00:38:44,516 --> 00:38:46,656 A:middle
In this test we fake the
data because we don't--

710
00:38:46,656 --> 00:38:48,746 A:middle
this is a unit test and we
want it to be really fast.

711
00:38:49,706 --> 00:38:51,366 A:middle
We also want the test
to work in isolation

712
00:38:51,366 --> 00:38:53,586 A:middle
so that it's not relying
on any data from the server

713
00:38:53,586 --> 00:38:54,786 A:middle
that could change
from one to one.

714
00:38:54,786 --> 00:39:00,196 A:middle
So what could have gone wrong?

715
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

716
00:39:00,196 --> 00:39:02,766 A:middle
Perhaps integration
summary could help us out.

717
00:39:03,086 --> 00:39:05,276 A:middle
So let's go back to
integration summary.

718
00:39:05,486 --> 00:39:09,676 A:middle
So the integration
details tell us

719
00:39:09,676 --> 00:39:12,246 A:middle
that we are calling an
unrecognized selector called

720
00:39:12,246 --> 00:39:13,756 A:middle
scan on-sign long, long.

721
00:39:14,226 --> 00:39:19,956 A:middle
This is really weird because we
didn't have any build failures.

722
00:39:20,876 --> 00:39:22,006 A:middle
So let's switch back
to the code and see

723
00:39:22,006 --> 00:39:22,966 A:middle
where we're actually using it.

724
00:39:23,516 --> 00:39:27,776 A:middle
[ Pause ]

725
00:39:28,276 --> 00:39:30,916 A:middle
We're not actually using
in the test meter itself.

726
00:39:31,036 --> 00:39:33,396 A:middle
I don't see it here,
it's quite small.

727
00:39:34,296 --> 00:39:36,276 A:middle
Maybe we are using again
the high scores class.

728
00:39:36,766 --> 00:39:39,226 A:middle
So let's command-click on
it and see if we're using it

729
00:39:39,226 --> 00:39:40,086 A:middle
in the high scores class.

730
00:39:40,446 --> 00:39:48,526 A:middle
It's quite a big file so I'm
going to search for it in here.

731
00:39:48,526 --> 00:39:50,276 A:middle
There it is.

732
00:39:50,486 --> 00:39:51,866 A:middle
So how could this fail on an--

733
00:39:51,866 --> 00:39:54,016 A:middle
on the iPad but not
on the iPhone?

734
00:39:55,086 --> 00:39:59,406 A:middle
Perhaps there's a
difference in the OS versions?

735
00:39:59,766 --> 00:40:01,786 A:middle
So let's look at the header
for this method to find

736
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

737
00:40:01,786 --> 00:40:02,856 A:middle
out when it was introduced.

738
00:40:03,576 --> 00:40:09,136 A:middle
I can do that by
command-clicking on the method.

739
00:40:09,276 --> 00:40:16,866 A:middle
So this method was newly
introduced in iOS 7.

740
00:40:16,866 --> 00:40:20,296 A:middle
So we're running an iOS 7 API,
we're calling an iOS 7 API

741
00:40:20,296 --> 00:40:22,146 A:middle
on a device that's
running iOS 6.

742
00:40:22,146 --> 00:40:23,786 A:middle
This is not going to work.

743
00:40:23,786 --> 00:40:27,996 A:middle
No wonder it's failing.

744
00:40:27,996 --> 00:40:30,866 A:middle
So right about that, I
see another method called

745
00:40:30,866 --> 00:40:32,106 A:middle
which scans the sign numbers.

746
00:40:32,866 --> 00:40:35,756 A:middle
So we could probably use this

747
00:40:35,756 --> 00:40:40,676 A:middle
because it's exists iOS
6 and I think it'll do.

748
00:40:41,536 --> 00:40:44,046 A:middle
It just means that the highest
score can only be 9 quintillion

749
00:40:44,046 --> 00:40:47,386 A:middle
instead of 18 quintillion,
I guess that will work.

750
00:40:49,096 --> 00:40:52,906 A:middle
So let's switch back to the
code and fix it-- fix the AP--

751
00:40:52,986 --> 00:40:55,906 A:middle
fix our code to use the
new AP-- the older API.

752
00:40:56,516 --> 00:41:02,896 A:middle
[ Pause ]

753
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

754
00:41:03,396 --> 00:41:07,756 A:middle
And now I think I fixed
the test and fixed my code,

755
00:41:07,756 --> 00:41:09,896 A:middle
so let's run all
the test locally

756
00:41:09,896 --> 00:41:11,556 A:middle
to see if it works locally.

757
00:41:12,466 --> 00:41:15,516 A:middle
During that I am going to
switch to Test Navigator

758
00:41:15,516 --> 00:41:17,796 A:middle
and select product test

759
00:41:17,916 --> 00:41:19,796 A:middle
to run all the test
locally in the simulator.

760
00:41:23,736 --> 00:41:26,006 A:middle
Great, everything
is passing locally.

761
00:41:26,006 --> 00:41:29,346 A:middle
So let's check it in by
using the source control menu

762
00:41:29,346 --> 00:41:30,796 A:middle
and selecting commit.

763
00:41:31,516 --> 00:41:46,096 A:middle
[ Background Conversation ]

764
00:41:46,596 --> 00:41:50,676 A:middle
Push it to the server.

765
00:41:50,856 --> 00:41:54,726 A:middle
So now I checked it in and I can
click off a manual integration

766
00:41:54,786 --> 00:41:57,576 A:middle
because I want it to happen
right away by switching

767
00:41:57,576 --> 00:42:00,906 A:middle
to the bott and performing
integrate.

768
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

769
00:42:01,516 --> 00:42:07,016 A:middle
[ Pause ]

770
00:42:07,516 --> 00:42:13,656 A:middle
So, when I push the
integrate button,

771
00:42:14,616 --> 00:42:19,646 A:middle
Xcode sends integration
request to the server.

772
00:42:19,816 --> 00:42:22,456 A:middle
The server then checks out all
of the code from my project

773
00:42:22,456 --> 00:42:26,746 A:middle
from the source repository into
a temporary build location.

774
00:42:27,286 --> 00:42:32,646 A:middle
Then it builds all of the
apps code and the test code

775
00:42:32,646 --> 00:42:35,066 A:middle
into an app bundle and a
test code, test bundle.

776
00:42:37,306 --> 00:42:39,476 A:middle
Server then tries to
figure out all the devices,

777
00:42:39,576 --> 00:42:42,486 A:middle
it scans all the
devices connected to it.

778
00:42:44,896 --> 00:42:50,106 A:middle
Server then uploads your app
and its test bundles into the--

779
00:42:50,106 --> 00:42:51,746 A:middle
to each of the devices.

780
00:42:52,486 --> 00:42:59,596 A:middle
In this case I have
an iPad and an iPhone.

781
00:42:59,596 --> 00:43:04,146 A:middle
Then your application
is launched as we talked

782
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

783
00:43:04,146 --> 00:43:06,366 A:middle
about earlier in the application

784
00:43:06,366 --> 00:43:10,836 A:middle
that finished launching
it calls your test

785
00:43:10,956 --> 00:43:12,806 A:middle
and it got-- runs your test.

786
00:43:15,396 --> 00:43:18,846 A:middle
Once the last test is
finished on the last device,

787
00:43:19,656 --> 00:43:22,756 A:middle
basically server collects
all of the data for all

788
00:43:22,756 --> 00:43:26,366 A:middle
of the test results from
each device and stores it

789
00:43:26,366 --> 00:43:27,686 A:middle
into the box integration
history.

790
00:43:27,846 --> 00:43:29,636 A:middle
So you can go back and see where

791
00:43:29,636 --> 00:43:31,136 A:middle
and how things have
done in the past.

792
00:43:31,236 --> 00:43:33,146 A:middle
And the whole integration
results are stored

793
00:43:33,146 --> 00:43:35,366 A:middle
in the history.

794
00:43:35,456 --> 00:43:38,696 A:middle
Then, all the connected
clients Xcode here

795
00:43:38,696 --> 00:43:41,436 A:middle
and the score board
we saw earlier and any

796
00:43:41,436 --> 00:43:44,226 A:middle
of the web sessions are
all informed of the result.

797
00:43:46,716 --> 00:43:49,546 A:middle
And now what we can see here
in Xcode that all of the test

798
00:43:49,546 --> 00:43:53,226 A:middle
and all of the configurations
have passed.

799
00:43:53,376 --> 00:43:53,836 A:middle
Excellent.

800
00:43:54,716 --> 00:43:57,166 A:middle
Thanks to OS X server we've
tested many more configurations

801
00:43:57,976 --> 00:43:59,866 A:middle
automatically than we
have time to do by hand.

802
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

803
00:44:00,516 --> 00:44:01,646 A:middle
So let's switch back
to the slides.

804
00:44:01,886 --> 00:44:08,456 A:middle
I'd like to invite Mike back up
to recap and then wrap it up.

805
00:44:09,516 --> 00:44:14,526 A:middle
[ Applause ]

806
00:44:15,026 --> 00:44:17,436 A:middle
>> Great. Great, thank you Bino.

807
00:44:17,536 --> 00:44:22,046 A:middle
So, what did Bino just show us?

808
00:44:23,506 --> 00:44:28,826 A:middle
Well, first to set up the bot,
you need to add your tests

809
00:44:29,506 --> 00:44:31,736 A:middle
to a shared scheme and commit

810
00:44:31,736 --> 00:44:33,656 A:middle
that into your source
repository.

811
00:44:35,276 --> 00:44:40,456 A:middle
In the demo, we showed-- we
saw how OS X server can run all

812
00:44:40,456 --> 00:44:44,946 A:middle
of your tests on a variety of
devices and configurations.

813
00:44:46,736 --> 00:44:52,336 A:middle
Then, Bino showed us the bot and
test summary results in Xcode 5

814
00:44:52,476 --> 00:44:55,106 A:middle
and how you can use
it to find failures

815
00:44:55,586 --> 00:44:59,296 A:middle
that are not necessarily
reproducing in the IDE.

816
00:44:59,466 --> 00:45:02,256 A:middle
Now, all of this is great
if you can start fresh

817
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

818
00:45:02,616 --> 00:45:05,086 A:middle
with a brand new OS X
server and set that up

819
00:45:05,086 --> 00:45:06,896 A:middle
as your continuous
integration environment.

820
00:45:07,436 --> 00:45:10,846 A:middle
But what if you already
have one?

821
00:45:11,986 --> 00:45:15,106 A:middle
Through all the new features
that we've added to Xcode 5

822
00:45:15,106 --> 00:45:16,926 A:middle
for testing, we haven't
forgotten

823
00:45:16,926 --> 00:45:17,766 A:middle
about the command line.

824
00:45:18,576 --> 00:45:19,946 A:middle
This is your opportunity

825
00:45:20,036 --> 00:45:24,146 A:middle
for your existing continuous
integration system to hook in.

826
00:45:24,146 --> 00:45:27,906 A:middle
The Xcode build command
line tool can drive testing

827
00:45:28,206 --> 00:45:31,006 A:middle
in exactly the same
way as the Xcode IDE

828
00:45:31,356 --> 00:45:33,946 A:middle
or the Xcode service
inside Xcode server.

829
00:45:34,756 --> 00:45:37,976 A:middle
The only mandatory argument
is the shared scheme.

830
00:45:40,006 --> 00:45:42,376 A:middle
You can also specify
different destinations

831
00:45:42,566 --> 00:45:44,346 A:middle
that you want the
integration performed to.

832
00:45:44,866 --> 00:45:50,506 A:middle
For example, My Mac 64, or
if you have devices plugged

833
00:45:50,506 --> 00:45:53,236 A:middle
in to the server, you
can call them now by name

834
00:45:53,526 --> 00:45:54,726 A:middle
and their device identifier.

835
00:45:55,326 --> 00:45:59,196 A:middle
You can also use a simulator

836
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

837
00:46:00,446 --> 00:46:03,546 A:middle
to target all the
different device form factors

838
00:46:04,076 --> 00:46:07,786 A:middle
and OS combinations that
that simulator supports.

839
00:46:08,316 --> 00:46:11,616 A:middle
Best of all, you can chain all

840
00:46:11,616 --> 00:46:13,446 A:middle
of these destination
arguments together

841
00:46:13,446 --> 00:46:16,736 A:middle
and an integration we
performed across all of them.

842
00:46:18,126 --> 00:46:21,476 A:middle
If there are any issues that
came up in either the building

843
00:46:21,476 --> 00:46:23,336 A:middle
or the actual tests themselves,

844
00:46:23,816 --> 00:46:27,266 A:middle
Xcode build will return a
non-zero exit code and this is

845
00:46:27,266 --> 00:46:29,086 A:middle
where your automation
can pick up on that

846
00:46:29,936 --> 00:46:32,916 A:middle
and store off the
transcript of the log for you

847
00:46:32,916 --> 00:46:34,366 A:middle
to investigate the
failure later.

848
00:46:35,136 --> 00:46:38,906 A:middle
So, we think this is really
easy for command line tool

849
00:46:39,746 --> 00:46:44,616 A:middle
and that is the last thing I
have to show that's new today.

850
00:46:44,816 --> 00:46:52,316 A:middle
So, to recap, today we covered
what a unit test is in general

851
00:46:52,766 --> 00:46:54,286 A:middle
and how they test
just one thing.

852
00:46:55,296 --> 00:46:57,836 A:middle
And how to quickly
write those tests

853
00:46:58,156 --> 00:47:00,156 A:middle
in Objective-C using Xc test.

854
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

855
00:47:01,906 --> 00:47:04,356 A:middle
In the demo, we showed
just how easy it was

856
00:47:04,356 --> 00:47:07,896 A:middle
to start getting writing-- get
started writing your unit tests

857
00:47:09,036 --> 00:47:12,346 A:middle
and how to run them quickly
in the test navigator

858
00:47:12,346 --> 00:47:15,416 A:middle
and using the test indicators
in the source editor.

859
00:47:16,006 --> 00:47:22,636 A:middle
Then, Bino showed us how to
use the test failure breakpoint

860
00:47:23,116 --> 00:47:25,256 A:middle
to step through your
code at the moment

861
00:47:25,556 --> 00:47:27,536 A:middle
that a test assertion failed.

862
00:47:29,386 --> 00:47:33,606 A:middle
Then, he also showed us how to
use the new assistant categories

863
00:47:33,606 --> 00:47:36,796 A:middle
to find other tests that might
be calling the implementation

864
00:47:36,796 --> 00:47:39,056 A:middle
that you're working on
in the primary editor.

865
00:47:40,696 --> 00:47:44,176 A:middle
Then, he also showed us how the
Test Again command can quickly

866
00:47:44,176 --> 00:47:47,346 A:middle
help you rerun the same test
over and over and over again

867
00:47:47,816 --> 00:47:49,716 A:middle
as your iterating on
the implementation

868
00:47:50,216 --> 00:47:53,966 A:middle
without even having the test
navigator or to test itself up.

869
00:47:54,156 --> 00:47:58,476 A:middle
In the demo, he showed us
how to run a wide variety

870
00:47:58,536 --> 00:48:01,596 A:middle
of configurations
on different devices

871
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

872
00:48:02,026 --> 00:48:05,286 A:middle
and how you can run all those
configurations all the time

873
00:48:06,136 --> 00:48:08,956 A:middle
and then finally we
covered just now how

874
00:48:08,956 --> 00:48:13,036 A:middle
to drive the same integrations
at the command line.

875
00:48:14,656 --> 00:48:18,286 A:middle
So throughout the three demos
today, we showed three bugs

876
00:48:18,286 --> 00:48:20,486 A:middle
that could've been
potential show stoppers

877
00:48:20,486 --> 00:48:21,606 A:middle
for any application.

878
00:48:22,796 --> 00:48:25,946 A:middle
The first, being a pure logic
bug where the two pieces

879
00:48:25,946 --> 00:48:29,866 A:middle
on our board collided,
the second was a case

880
00:48:29,866 --> 00:48:31,656 A:middle
of overly complicated
balance check

881
00:48:31,656 --> 00:48:34,496 A:middle
in that could've been replaced
by a simple library function.

882
00:48:35,666 --> 00:48:40,476 A:middle
And the third was the case
of using a two new API

883
00:48:41,136 --> 00:48:43,076 A:middle
when deploying on to
an older OS version.

884
00:48:44,366 --> 00:48:47,346 A:middle
What I hope that you've seen
today is how testing can catch

885
00:48:47,346 --> 00:48:50,596 A:middle
these kinds of bugs in your
app and just how easy it is

886
00:48:50,596 --> 00:48:53,756 A:middle
to start the testing right
now if you haven't already.

887
00:48:56,856 --> 00:49:00,056 A:middle
So, if you have any
questions or feedback,

888
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

889
00:49:00,396 --> 00:49:02,226 A:middle
please let our evangelist
Dave know.

890
00:49:02,226 --> 00:49:04,076 A:middle
Here are the links

891
00:49:04,076 --> 00:49:06,386 A:middle
to the documentation
and developer forums.

892
00:49:07,566 --> 00:49:10,446 A:middle
To learn more about
OS X's server--

893
00:49:11,026 --> 00:49:14,826 A:middle
learn more about OS X server and
the Xcode service, please check

894
00:49:14,826 --> 00:49:16,586 A:middle
out the Continuous Integration

895
00:49:16,586 --> 00:49:18,656 A:middle
with Xcode 5 session
that was on Tuesday.

896
00:49:19,326 --> 00:49:21,506 A:middle
The video is available
right now from the wwcf

897
00:49:21,506 --> 00:49:22,866 A:middle
that you have in your pocket.

898
00:49:24,706 --> 00:49:26,486 A:middle
And with that, I'd
like to say thank you.

899
00:49:27,516 --> 00:49:33,800 A:middle
[ Applause ]

900
