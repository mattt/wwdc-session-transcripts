X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:16,826 A:middle
[ Silence ]

2
00:00:17,326 --> 00:00:19,416 A:middle
>> Good afternoon.

3
00:00:20,646 --> 00:00:20,916 A:middle
[applause] Thank you.

4
00:00:22,116 --> 00:00:23,826 A:middle
Welcome to What's New in Cocoa.

5
00:00:23,826 --> 00:00:26,696 A:middle
My name is Ali Ozer, I'm the
director Cocoa Frameworks

6
00:00:26,696 --> 00:00:27,276 A:middle
at Apple.

7
00:00:29,256 --> 00:00:30,986 A:middle
So, what are we going
to talk about today?

8
00:00:31,616 --> 00:00:33,616 A:middle
We're going to give you
a high level overview

9
00:00:33,616 --> 00:00:38,876 A:middle
of the updates we made to Cocoa
in Mac OS X Mavericks 10.9,

10
00:00:39,256 --> 00:00:42,336 A:middle
and we're going to give you
pointers to related sessions

11
00:00:42,336 --> 00:00:45,756 A:middle
and labs because we have
many sessions and labs.

12
00:00:45,756 --> 00:00:48,696 A:middle
Note that everything we're going
to talk about today is new,

13
00:00:48,866 --> 00:00:50,986 A:middle
so I'm not going to be
putting this new badge

14
00:00:50,986 --> 00:00:53,516 A:middle
on every single slide that
has new material on it,

15
00:00:53,576 --> 00:00:54,896 A:middle
pretty much most things are new.

16
00:00:54,896 --> 00:00:57,886 A:middle
And this is not a
complete reference

17
00:00:57,886 --> 00:00:59,866 A:middle
to all the things we've added.

18
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

19
00:01:00,526 --> 00:01:03,726 A:middle
These are the highlights, we
have Heather file updates,

20
00:01:03,726 --> 00:01:04,696 A:middle
we have Release Notes,

21
00:01:04,696 --> 00:01:07,496 A:middle
and in many cases coming
soon we have documentation.

22
00:01:07,496 --> 00:01:09,916 A:middle
Please refer to those
for the complete story.

23
00:01:10,476 --> 00:01:13,836 A:middle
OK, first let's talk about Tags,

24
00:01:14,316 --> 00:01:16,336 A:middle
you saw the feature
yesterday in the Keynote.

25
00:01:17,086 --> 00:01:20,286 A:middle
Tags is a new feature
which enables users

26
00:01:20,286 --> 00:01:23,596 A:middle
to assign arbitrarily named
labels to their files.

27
00:01:25,116 --> 00:01:26,856 A:middle
And users can search
for their files

28
00:01:26,856 --> 00:01:29,076 A:middle
or group their files
using these Tags.

29
00:01:29,606 --> 00:01:30,776 A:middle
It's a pretty powerful feature.

30
00:01:30,776 --> 00:01:32,186 A:middle
Just to recap what
it looks like,

31
00:01:32,596 --> 00:01:36,096 A:middle
so here is some files
grouped by Tag for instance

32
00:01:36,096 --> 00:01:40,276 A:middle
that you can see the tags
are shown along the side

33
00:01:40,276 --> 00:01:41,626 A:middle
and also under the file names.

34
00:01:42,106 --> 00:01:44,346 A:middle
You can search by
tag as shown here,

35
00:01:45,086 --> 00:01:47,386 A:middle
you type your search tags
there and you will be displayed

36
00:01:47,386 --> 00:01:49,906 A:middle
that files with those
tags will be displayed.

37
00:01:50,266 --> 00:01:54,406 A:middle
You can bring up a side bar
which lists the tags you have.

38
00:01:54,406 --> 00:01:57,886 A:middle
You can go ahead and use tags
in your iCloud open panel.

39
00:01:58,206 --> 00:02:00,956 A:middle
You can see the tags and their
iCloud documents as well.

40
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

41
00:02:01,326 --> 00:02:04,476 A:middle
You can go ahead and assign tags
to files as you're saving them

42
00:02:04,846 --> 00:02:06,436 A:middle
or you can go ahead
and change the tags

43
00:02:06,436 --> 00:02:10,045 A:middle
on files using this new
document popover that comes

44
00:02:10,045 --> 00:02:11,126 A:middle
out from the title bar.

45
00:02:11,436 --> 00:02:13,666 A:middle
So there are many ways for
users to interact with Tags.

46
00:02:14,896 --> 00:02:17,636 A:middle
Now, let's talk at-- look at
the APIs we've added for tags.

47
00:02:18,126 --> 00:02:20,666 A:middle
It's actually not too many APIs
here we don't need too many.

48
00:02:21,086 --> 00:02:25,586 A:middle
One is a new, NSURL resource
key, NSURL tag names key

49
00:02:25,586 --> 00:02:28,996 A:middle
and the value of this is
an NSArray of NS strings.

50
00:02:29,636 --> 00:02:32,806 A:middle
You would use this API on
an NSURL, get resource value

51
00:02:32,806 --> 00:02:36,466 A:middle
for KeyError which of course
an API NSURL already has

52
00:02:36,826 --> 00:02:40,106 A:middle
to get the list of Tags
assigned to a given file,

53
00:02:40,106 --> 00:02:43,656 A:middle
and you would use the set
API to set tags on a file.

54
00:02:44,726 --> 00:02:47,956 A:middle
Now, as you saw earlier, we
also have support for Tags

55
00:02:47,956 --> 00:02:51,256 A:middle
in the safe panel and
it's actually automatic,

56
00:02:51,916 --> 00:02:54,406 A:middle
not just for NSDocument-based
applications

57
00:02:54,406 --> 00:02:56,026 A:middle
but also any application

58
00:02:56,026 --> 00:02:59,996 A:middle
that uses the safe panel will
get a TagsField as shown here.

59
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

60
00:03:00,756 --> 00:03:02,796 A:middle
Now, the safe panel
will show the TagsField,

61
00:03:02,796 --> 00:03:04,936 A:middle
it will allow the users
to edit those tags

62
00:03:05,226 --> 00:03:07,676 A:middle
and it will also
automatically apply those tags

63
00:03:07,806 --> 00:03:10,076 A:middle
to the saved file, so you don't
really have to do anything.

64
00:03:10,476 --> 00:03:13,176 A:middle
Now, there might be cases
where this doesn't work right

65
00:03:13,176 --> 00:03:14,626 A:middle
or there might be
cases where you want

66
00:03:14,626 --> 00:03:15,876 A:middle
to customize this behavior.

67
00:03:16,906 --> 00:03:18,236 A:middle
In those cases, we
do have an API.

68
00:03:18,866 --> 00:03:22,356 A:middle
You can explicitly indicate that
you want to show the TagsField

69
00:03:22,356 --> 00:03:23,906 A:middle
or you don't want to
show the TagsField.

70
00:03:24,196 --> 00:03:26,696 A:middle
And if you are showing the
TagsField, you can then go ahead

71
00:03:26,696 --> 00:03:29,016 A:middle
and get and set the list of tags

72
00:03:29,016 --> 00:03:31,736 A:middle
that the user has
specified on that file.

73
00:03:31,736 --> 00:03:33,086 A:middle
And then you would
apply them yourself

74
00:03:33,086 --> 00:03:34,536 A:middle
or do whatever else you
want to do with them.

75
00:03:35,006 --> 00:03:37,966 A:middle
Next thing I want to talk about
is Light Content Controls.

76
00:03:38,506 --> 00:03:40,336 A:middle
So, these are new controls,

77
00:03:40,336 --> 00:03:43,666 A:middle
variants of our controls
are Standard Aqua Controls

78
00:03:43,896 --> 00:03:47,046 A:middle
that are meant for Window
bodies or Document Content.

79
00:03:47,716 --> 00:03:48,666 A:middle
Here's some example.

80
00:03:48,976 --> 00:03:52,606 A:middle
This is the event inspector
in the Calendar application

81
00:03:52,776 --> 00:03:55,476 A:middle
and the buttons you see
here, down the side,

82
00:03:55,836 --> 00:03:57,486 A:middle
these are Light Content
Controls.

83
00:03:57,486 --> 00:03:59,806 A:middle
As you can see they're
somewhat lighter,

84
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

85
00:04:00,086 --> 00:04:02,656 A:middle
than standard Aqua
controls and they're meant

86
00:04:02,656 --> 00:04:05,106 A:middle
for that white lighter
colored background.

87
00:04:05,476 --> 00:04:08,076 A:middle
Here's another example, this
is the Contacts application,

88
00:04:08,276 --> 00:04:10,936 A:middle
and the buttons along the side
are light content controls.

89
00:04:11,866 --> 00:04:13,246 A:middle
Here's the Maps application.

90
00:04:13,516 --> 00:04:16,315 A:middle
Now, the buttons along the top
here are standard Aqua controls

91
00:04:16,315 --> 00:04:18,666 A:middle
because they're just
being displayed on top

92
00:04:18,666 --> 00:04:20,466 A:middle
of the standard Window
background.

93
00:04:20,826 --> 00:04:23,076 A:middle
But if you bring up a
popover in this application,

94
00:04:23,416 --> 00:04:25,146 A:middle
then the buttons you
see in the popover again

95
00:04:25,146 --> 00:04:28,006 A:middle
in that light background, these
are light contents controls.

96
00:04:28,346 --> 00:04:30,466 A:middle
So, how do you access these
light content controls?

97
00:04:31,036 --> 00:04:34,646 A:middle
Well, they're available through
a new API called NSAppearance.

98
00:04:35,546 --> 00:04:39,116 A:middle
This is a class that lets you
access alternate appearances

99
00:04:40,446 --> 00:04:43,126 A:middle
and it's got a bunch of
methods, the one I'm going

100
00:04:43,126 --> 00:04:44,676 A:middle
to show here is appearance name,

101
00:04:44,706 --> 00:04:46,216 A:middle
you just give it
an appearance name

102
00:04:46,216 --> 00:04:48,026 A:middle
and it fetches an
appearance for you.

103
00:04:48,026 --> 00:04:49,466 A:middle
And we have two appearances
to find;

104
00:04:50,116 --> 00:04:52,156 A:middle
Standard Aqua, and
Light Content.

105
00:04:52,736 --> 00:04:53,826 A:middle
Now, once you have
an appearance,

106
00:04:53,826 --> 00:04:54,606 A:middle
what do you do with it?

107
00:04:55,066 --> 00:04:57,626 A:middle
You would use this protocol
which is to find on View,

108
00:04:57,726 --> 00:04:59,386 A:middle
on NSView and NSWindow,

109
00:04:59,596 --> 00:05:01,336 A:middle
the appearance customization
protocol.

110
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

111
00:05:01,666 --> 00:05:04,906 A:middle
You can go ahead and the set
the appearance of that View

112
00:05:04,906 --> 00:05:09,146 A:middle
or Window, and all the UI
elements inside that View

113
00:05:09,146 --> 00:05:12,186 A:middle
of Window will now
inherit this appearance,

114
00:05:12,186 --> 00:05:13,876 A:middle
and start using the
appearance you've specified.

115
00:05:14,456 --> 00:05:17,386 A:middle
And since the UI element
can inherit its appearance

116
00:05:17,386 --> 00:05:19,816 A:middle
from its parent views
there's also another property,

117
00:05:19,816 --> 00:05:21,766 A:middle
a Read Only property
called Effective Appearance

118
00:05:22,156 --> 00:05:24,696 A:middle
which lets you tell what
appearance a UI element should

119
00:05:24,696 --> 00:05:25,146 A:middle
be using.

120
00:05:26,266 --> 00:05:28,716 A:middle
Now, you don't have to use codes
for this, you can also do this

121
00:05:28,716 --> 00:05:32,256 A:middle
in Xcode in the Attributes
Inspector

122
00:05:32,256 --> 00:05:33,626 A:middle
in Xcode interface builder.

123
00:05:34,786 --> 00:05:40,216 A:middle
So here for instance is the
Attributes Inspector for box.

124
00:05:40,216 --> 00:05:41,836 A:middle
You can do this for
container classes.

125
00:05:42,356 --> 00:05:45,056 A:middle
And at the bottom here, you
see the appearance setting.

126
00:05:45,056 --> 00:05:46,446 A:middle
It's now showing Aqua.

127
00:05:46,756 --> 00:05:48,126 A:middle
If you click on it
you can see that,

128
00:05:48,126 --> 00:05:52,286 A:middle
you can now specify light
content for that container

129
00:05:52,286 --> 00:05:53,726 A:middle
and as I said, all the elements

130
00:05:53,726 --> 00:05:55,686 A:middle
in there will now start
using this appearance.

131
00:05:55,926 --> 00:05:57,826 A:middle
Next thing I want to talk
about is NSStackView.

132
00:05:58,376 --> 00:06:00,226 A:middle
NSStackView is a
new class we've added

133
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

134
00:06:00,226 --> 00:06:02,136 A:middle
to AppKit in Mavericks.

135
00:06:02,346 --> 00:06:05,046 A:middle
It's a class which
manages stacks of views

136
00:06:05,216 --> 00:06:07,056 A:middle
and it uses Auto
Layout internally.

137
00:06:07,496 --> 00:06:09,486 A:middle
It lets you group the views

138
00:06:09,486 --> 00:06:11,296 A:middle
and we'll be seeing an
example of that shortly.

139
00:06:11,526 --> 00:06:14,656 A:middle
And it also will manage
the sizing of the views

140
00:06:14,656 --> 00:06:17,856 A:middle
and it will also drop Views, or
click Views, or tighten Views

141
00:06:17,856 --> 00:06:20,646 A:middle
as necessary as the
StackView size changes.

142
00:06:21,156 --> 00:06:23,476 A:middle
Let me give you a
little example.

143
00:06:23,476 --> 00:06:27,316 A:middle
This is the kind of view you
might build with NSStackView.

144
00:06:27,676 --> 00:06:30,406 A:middle
Here you have a group of
controls on the left side

145
00:06:30,406 --> 00:06:32,996 A:middle
and you have another control,
a slider on the other side.

146
00:06:33,266 --> 00:06:36,916 A:middle
As this view is made smaller,
the slider comes closer

147
00:06:36,916 --> 00:06:39,666 A:middle
to the other group and then the
slider starts getting smaller.

148
00:06:39,996 --> 00:06:42,266 A:middle
And then, the text field
starts getting smaller.

149
00:06:42,466 --> 00:06:45,606 A:middle
And eventually when there's no
more room and pressure's rising,

150
00:06:45,976 --> 00:06:48,606 A:middle
the button all the way at this
end is voted off the island

151
00:06:49,066 --> 00:06:51,726 A:middle
and then things start to
continue to get even smaller.

152
00:06:51,986 --> 00:06:53,976 A:middle
So, as you can see, StackView
they're not only used

153
00:06:53,976 --> 00:06:57,876 A:middle
to using Auto Layout, it's also
hiding and removing some Views

154
00:06:57,876 --> 00:06:59,866 A:middle
as needed and it will
also bring them back

155
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

156
00:07:00,216 --> 00:07:01,616 A:middle
when the StackView
is made larger.

157
00:07:01,676 --> 00:07:04,726 A:middle
So, in this way StackView is
using Auto Layout and building

158
00:07:04,726 --> 00:07:06,576 A:middle
on top of it, and you
yourself don't have to worry

159
00:07:06,576 --> 00:07:09,446 A:middle
about any creating those
constraints or managing them

160
00:07:09,746 --> 00:07:10,926 A:middle
which is, you know, not

161
00:07:10,926 --> 00:07:13,366 A:middle
that [inaudible] especially
once you're removing

162
00:07:13,366 --> 00:07:14,636 A:middle
and adding Views and so on.

163
00:07:14,976 --> 00:07:16,786 A:middle
Now, StackViews don't
have to be horizontal,

164
00:07:16,786 --> 00:07:18,036 A:middle
they can also be vertical.

165
00:07:18,316 --> 00:07:20,736 A:middle
Here's a kind of view you might
build with a vertical StackView,

166
00:07:20,736 --> 00:07:22,626 A:middle
this is an inspector
panel you might see

167
00:07:22,626 --> 00:07:24,286 A:middle
in drawing application.

168
00:07:25,696 --> 00:07:30,466 A:middle
As you expand the various
pieces, various elements up here

169
00:07:30,466 --> 00:07:32,776 A:middle
and you know, they will collapse
as well and that's the kind

170
00:07:32,776 --> 00:07:35,746 A:middle
of thing that's fairly simple
to build with a StackView.

171
00:07:36,186 --> 00:07:38,766 A:middle
The API of NSStackView
is purely straightforward,

172
00:07:39,076 --> 00:07:42,586 A:middle
you create one by giving it
some views, StackView with views

173
00:07:42,946 --> 00:07:46,866 A:middle
or you can choose to add Views
explicitly one at a time.

174
00:07:47,006 --> 00:07:49,906 A:middle
Here, you're specifying gravity
and the gravity is the grouping,

175
00:07:50,056 --> 00:07:53,036 A:middle
either one end, to the other end
or the middle of the StackView.

176
00:07:53,296 --> 00:07:55,536 A:middle
And there are other
properties on StackView

177
00:07:55,806 --> 00:08:00,026 A:middle
that lets you specify properties
in Layouts such as the spacing,

178
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

179
00:08:00,026 --> 00:08:01,856 A:middle
the priority, what the clipping

180
00:08:01,856 --> 00:08:03,656 A:middle
and hugging priorities
are and so on.

181
00:08:04,066 --> 00:08:07,566 A:middle
There will be a more in-depth
coverage of NSStackView

182
00:08:07,566 --> 00:08:09,856 A:middle
in this talk which is tomorrow,

183
00:08:10,146 --> 00:08:12,746 A:middle
best practices for
Cocoa Animation.

184
00:08:12,976 --> 00:08:16,336 A:middle
This talk will also go into
various animation techniques

185
00:08:16,336 --> 00:08:19,476 A:middle
for Cocoa both old and new,
so it's a great to talk

186
00:08:19,476 --> 00:08:21,946 A:middle
to learn both about animation
and StackView and in fact

187
00:08:21,946 --> 00:08:23,566 A:middle
about animating StackViews
as well.

188
00:08:24,156 --> 00:08:25,476 A:middle
So, next I want to talk--

189
00:08:25,476 --> 00:08:27,766 A:middle
so just of having to
talk about Auto Layout,

190
00:08:27,766 --> 00:08:30,006 A:middle
let me just talk a bit
about Auto Layout as well.

191
00:08:30,296 --> 00:08:33,046 A:middle
In Auto Layout, we've made a
lot of performance improvements

192
00:08:33,046 --> 00:08:36,086 A:middle
and this is true in
general but especially

193
00:08:36,086 --> 00:08:37,645 A:middle
in view-based TableViews.

194
00:08:37,936 --> 00:08:41,116 A:middle
That's because constraints are
now attached to Views in a way

195
00:08:41,116 --> 00:08:43,566 A:middle
that as Views are removed
or added to the hierarchy,

196
00:08:43,856 --> 00:08:44,856 A:middle
they stick to the View.

197
00:08:45,086 --> 00:08:47,416 A:middle
In addition, we've
made the enumeration

198
00:08:47,416 --> 00:08:50,416 A:middle
of constraints a lot more
efficient and predictable,

199
00:08:50,666 --> 00:08:53,546 A:middle
so that you will see much
more predictable behavior in--

200
00:08:53,606 --> 00:08:55,846 A:middle
when dealing with Views that
have a lot of constraints.

201
00:08:56,166 --> 00:08:58,376 A:middle
So, that's something you should
notice in your applications.

202
00:08:58,756 --> 00:09:01,016 A:middle
In addition, we have
a new workflow to deal

203
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

204
00:09:01,016 --> 00:09:02,516 A:middle
with Auto Layout in Xcode.

205
00:09:02,846 --> 00:09:07,746 A:middle
In general, Xcode is a lot
more flexible and forgiving

206
00:09:07,746 --> 00:09:10,946 A:middle
about letting you do
Auto Layout in Xcode.

207
00:09:10,946 --> 00:09:12,396 A:middle
You can now delete constraints,

208
00:09:12,396 --> 00:09:15,326 A:middle
you can create ambiguous
structures, you can move Views

209
00:09:15,326 --> 00:09:18,346 A:middle
around et cetera and Xcode
won't throw a fit anymore.

210
00:09:18,396 --> 00:09:20,856 A:middle
So this is-- you
are more in control.

211
00:09:21,216 --> 00:09:24,786 A:middle
And you can see more about
this in tomorrow's session,

212
00:09:25,036 --> 00:09:27,176 A:middle
taking control of Auto
Layout in Xcode 5.

213
00:09:27,336 --> 00:09:29,286 A:middle
Next, I want to talk about
Responsive Scrolling,

214
00:09:29,356 --> 00:09:33,266 A:middle
and you saw a demo of this
yesterday at the Keynote,

215
00:09:33,266 --> 00:09:35,576 A:middle
in addition you saw it perhaps
at the State of the Union

216
00:09:35,576 --> 00:09:37,026 A:middle
in the afternoon as
well it's something

217
00:09:37,026 --> 00:09:39,966 A:middle
that we've worked a lot on

218
00:09:39,966 --> 00:09:43,026 A:middle
and it's you know
something we think is great.

219
00:09:43,576 --> 00:09:45,496 A:middle
The goal here is to
provide the users

220
00:09:45,496 --> 00:09:48,406 A:middle
with non-stuttering
fluid scrolling.

221
00:09:48,816 --> 00:09:52,986 A:middle
So let me just give you a review
of how scrolling works in 10.8.

222
00:09:53,716 --> 00:09:56,236 A:middle
So here it is a view and assume,

223
00:09:56,236 --> 00:09:58,856 A:middle
not the blue border there
is your divisible area

224
00:09:58,856 --> 00:09:59,646 A:middle
of the ScrollView.

225
00:09:59,906 --> 00:10:02,976 A:middle
In 10.8, when the user
scrolls, they see this.

226
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

227
00:10:04,346 --> 00:10:07,186 A:middle
Now, really what's
happening under the covers is

228
00:10:07,186 --> 00:10:10,736 A:middle
that when the scroll
starts, divisible area

229
00:10:10,736 --> 00:10:15,236 A:middle
of the view is copied up
a blip, blip if you will.

230
00:10:15,236 --> 00:10:18,806 A:middle
And then the-- reveal the area
is drawn in by calling drawRect.

231
00:10:19,246 --> 00:10:20,606 A:middle
And then this happens again

232
00:10:20,606 --> 00:10:22,416 A:middle
for every little
slice that's visible.

233
00:10:22,666 --> 00:10:25,476 A:middle
And of course, the user
never see the black flash

234
00:10:25,506 --> 00:10:28,076 A:middle
because we actually copy
the bits up and then we fill

235
00:10:28,076 --> 00:10:30,386 A:middle
in that area without
flushing the Window

236
00:10:30,616 --> 00:10:32,366 A:middle
so that the user actually
doesn't see a flash.

237
00:10:32,796 --> 00:10:37,716 A:middle
But one thing you will notice is
that in a situation like this,

238
00:10:38,046 --> 00:10:40,376 A:middle
the scrolling performance
is really at the mercy

239
00:10:40,376 --> 00:10:41,896 A:middle
of the performance of drawRect.

240
00:10:42,366 --> 00:10:44,766 A:middle
If that drawRect
call just to fill

241
00:10:44,766 --> 00:10:47,056 A:middle
in that little strip
takes say, half a second,

242
00:10:47,336 --> 00:10:50,116 A:middle
scrolling all stutter,
really for half a second.

243
00:10:50,226 --> 00:10:52,756 A:middle
And actually more generally,
scrolling performance is

244
00:10:52,756 --> 00:10:54,116 A:middle
at the mercy of the main thread

245
00:10:54,426 --> 00:10:56,626 A:middle
because the drawRect is
happening on the main thread

246
00:10:56,826 --> 00:10:59,146 A:middle
and the main thread is
a pretty popular place.

247
00:10:59,516 --> 00:11:00,866 A:middle
There is the Run Loop there.

248
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

249
00:11:01,066 --> 00:11:02,726 A:middle
You know, things are happening.

250
00:11:03,276 --> 00:11:04,866 A:middle
All sorts of things
might be happening,

251
00:11:04,866 --> 00:11:06,316 A:middle
network activity,
who knows what?

252
00:11:06,666 --> 00:11:10,476 A:middle
So, even if drawRect wasn't
badly behaving there might be

253
00:11:10,476 --> 00:11:13,446 A:middle
other factors which cause the
whole scrolling experience

254
00:11:13,496 --> 00:11:15,196 A:middle
to stutter in certain
conditions.

255
00:11:15,836 --> 00:11:16,816 A:middle
So, what's the solution?

256
00:11:17,896 --> 00:11:22,806 A:middle
The solution is to dissociate
the scrolling from domain thread

257
00:11:22,806 --> 00:11:24,906 A:middle
as much as possible and
we've done two things

258
00:11:25,006 --> 00:11:25,946 A:middle
to help with this.

259
00:11:26,466 --> 00:11:29,196 A:middle
One, is to get scroll events
of a secondary thread.

260
00:11:29,976 --> 00:11:32,236 A:middle
Now, despite itself is good

261
00:11:32,396 --> 00:11:34,366 A:middle
because the main thread is
now longer fetching events.

262
00:11:34,636 --> 00:11:37,866 A:middle
However, it's not
good enough by itself

263
00:11:37,866 --> 00:11:40,256 A:middle
because if you get scroll
events on a secondary thread

264
00:11:40,256 --> 00:11:41,326 A:middle
and if you scroll the view

265
00:11:41,326 --> 00:11:44,116 A:middle
on the secondary thread there
still won't be any content

266
00:11:44,116 --> 00:11:44,536 A:middle
to show.

267
00:11:44,536 --> 00:11:47,616 A:middle
So, there will be white
flashes as the user scrolls,

268
00:11:47,886 --> 00:11:50,516 A:middle
clearly not, not ideal.

269
00:11:50,756 --> 00:11:52,446 A:middle
So the second part
of the solution is

270
00:11:52,446 --> 00:11:54,696 A:middle
to prepare Overdraw
regions ahead of time,

271
00:11:54,986 --> 00:11:57,356 A:middle
so that the scrolling
can happen smoothly.

272
00:11:57,426 --> 00:11:58,906 A:middle
And let me show how this works.

273
00:11:59,916 --> 00:12:01,246 A:middle
Here is our ScrollView again

274
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

275
00:12:01,556 --> 00:12:04,856 A:middle
and this time we have a visible
area, the area that user sees.

276
00:12:05,226 --> 00:12:08,096 A:middle
In addition, we have this
additionally drawn area

277
00:12:08,156 --> 00:12:09,476 A:middle
which we called the
Overdraw area

278
00:12:09,476 --> 00:12:11,156 A:middle
and that's not visible
at the moment.

279
00:12:11,596 --> 00:12:13,816 A:middle
So as the user scrolls this up,

280
00:12:13,816 --> 00:12:15,576 A:middle
notice that drawRect
doesn't need to be called

281
00:12:15,576 --> 00:12:18,666 A:middle
and the user maybe scrolls down
again no drawRect being called.

282
00:12:19,216 --> 00:12:23,366 A:middle
And-- but if the user scrolls
a bunch, then we might go ahead

283
00:12:23,366 --> 00:12:25,786 A:middle
and call drawRect to fill
in that Overdraw area.

284
00:12:25,966 --> 00:12:28,956 A:middle
And of course Overdraw area
is well exists on any edge

285
00:12:28,956 --> 00:12:30,946 A:middle
that the user can
scroll towards.

286
00:12:31,266 --> 00:12:35,496 A:middle
Now, this responsive
scrolling is actually automatic

287
00:12:35,546 --> 00:12:38,276 A:middle
so you don't-- in most cases
you don't have to do anything

288
00:12:38,276 --> 00:12:40,036 A:middle
and your app should
get this feature,

289
00:12:40,316 --> 00:12:43,456 A:middle
assuming they're linked
on 10.8 or newer SDK.

290
00:12:43,456 --> 00:12:46,036 A:middle
And there are also a
few other conditions.

291
00:12:46,896 --> 00:12:49,936 A:middle
Now, your application can
chose to explicitly opt in our

292
00:12:49,936 --> 00:12:54,436 A:middle
out by overwriting this method
and this is a purview method

293
00:12:54,436 --> 00:12:56,416 A:middle
because you might want
some ScrollViews to do this

294
00:12:56,416 --> 00:12:59,896 A:middle
and some ScrollViews not to is
com/public responsive scrolling

295
00:12:59,946 --> 00:13:01,876 A:middle
by overwriting and
returning yes you say

296
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

297
00:13:02,216 --> 00:13:04,326 A:middle
"I'm doing responsive
scrolling no matter what."

298
00:13:04,456 --> 00:13:05,456 A:middle
Or "No, I don't want

299
00:13:05,456 --> 00:13:07,296 A:middle
to do responsive
scrolling no matter what."

300
00:13:07,566 --> 00:13:11,016 A:middle
So there's a bunch more
APIs here and a lot more--

301
00:13:11,016 --> 00:13:14,116 A:middle
lot more stuff to
learn and we will cover

302
00:13:14,116 --> 00:13:16,476 A:middle
that in Optimizing
Drawing and Scrolling talk

303
00:13:16,476 --> 00:13:18,576 A:middle
with is tomorrow
afternoon at 3:15.

304
00:13:18,826 --> 00:13:21,416 A:middle
And the next, I want to talk
a bit about Export as PDF.

305
00:13:21,416 --> 00:13:24,086 A:middle
And we talked about
Export as PDF before

306
00:13:24,086 --> 00:13:28,006 A:middle
and maybe you've heard about
it in its using its other name

307
00:13:28,006 --> 00:13:32,586 A:middle
such as save as PDF, save to
PDF, export to PDF et cetera.

308
00:13:32,876 --> 00:13:37,026 A:middle
The idea here is to enable the
user to generate a PDF file

309
00:13:37,026 --> 00:13:38,356 A:middle
without going through
the print panel.

310
00:13:38,586 --> 00:13:41,226 A:middle
And in fact in general,
we'd like the UI

311
00:13:41,226 --> 00:13:44,086 A:middle
to separate PDF generation
from the print panel

312
00:13:44,086 --> 00:13:46,626 A:middle
and the whole printing
process as much as possible

313
00:13:46,836 --> 00:13:48,566 A:middle
from the point of
view of the user.

314
00:13:49,896 --> 00:13:53,276 A:middle
So, in 10.9 here is what happens
when you choose Export as PDF

315
00:13:53,446 --> 00:13:55,046 A:middle
in an application like TextEdit.

316
00:13:55,476 --> 00:13:56,366 A:middle
Here's my window.

317
00:13:57,016 --> 00:13:59,326 A:middle
You get a nice, simple
safe panel.

318
00:13:59,406 --> 00:14:02,266 A:middle
It does nothing to do with
printing just a safe field.

319
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

320
00:14:02,736 --> 00:14:03,936 A:middle
And you can go ahead and save.

321
00:14:04,066 --> 00:14:04,756 A:middle
That's it.

322
00:14:04,756 --> 00:14:05,596 A:middle
Your PDF is generated.

323
00:14:06,046 --> 00:14:09,326 A:middle
If you want to go ahead and set
some parameters the users want

324
00:14:09,356 --> 00:14:11,976 A:middle
to have some control
or what, what they get.

325
00:14:12,406 --> 00:14:14,426 A:middle
They can click the
Show Details button

326
00:14:14,426 --> 00:14:17,556 A:middle
and get a somewhat expanded
panel which has field

327
00:14:17,556 --> 00:14:19,276 A:middle
such as page, size
and orientation

328
00:14:19,276 --> 00:14:20,996 A:middle
if appropriate for
your application.

329
00:14:21,246 --> 00:14:23,966 A:middle
In addition, possibly
some additional views

330
00:14:23,966 --> 00:14:27,106 A:middle
that the application
is adding custom views.

331
00:14:27,106 --> 00:14:29,446 A:middle
And you know, we normally refer
to those as accessory view.

332
00:14:29,766 --> 00:14:32,836 A:middle
Now, we've added new APIs
and behaviors in 10.9

333
00:14:32,836 --> 00:14:35,206 A:middle
to make it lot easier
to do all this.

334
00:14:35,626 --> 00:14:39,156 A:middle
If you're NSDocument based
application there is a new

335
00:14:39,156 --> 00:14:41,516 A:middle
action method, save
document to PDF.

336
00:14:41,786 --> 00:14:44,636 A:middle
If you connect the
menu item to this,

337
00:14:45,636 --> 00:14:47,056 A:middle
that's pretty much
all you have to do

338
00:14:47,056 --> 00:14:48,976 A:middle
and you'll get the
experience I showed you.

339
00:14:49,366 --> 00:14:51,826 A:middle
Now, you might want to customize
though the PDF generation.

340
00:14:51,826 --> 00:14:53,976 A:middle
For instance maybe
during PDF generation,

341
00:14:54,136 --> 00:14:57,356 A:middle
you want to take a
different printing code path.

342
00:14:57,796 --> 00:14:59,666 A:middle
Not the one you would get
when the user print it.

343
00:14:59,666 --> 00:15:01,626 A:middle
In that case, you can
overwrite this method--

344
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

345
00:15:02,096 --> 00:15:05,616 A:middle
I'm sorry, I skipped the
PDF print operation method

346
00:15:05,616 --> 00:15:07,536 A:middle
and customized the
print operation.

347
00:15:07,806 --> 00:15:10,176 A:middle
Now, if you're a non
NSDocument-based application,

348
00:15:11,216 --> 00:15:12,386 A:middle
and it's also fairly easy

349
00:15:12,756 --> 00:15:15,726 A:middle
when you're generating your
Print operation, go ahead

350
00:15:15,726 --> 00:15:19,176 A:middle
and specify the job
disposition of Print Save job

351
00:15:19,466 --> 00:15:22,456 A:middle
but do not supply a URL,
what that will do is

352
00:15:22,456 --> 00:15:24,786 A:middle
that will cause the
save panel to be shown

353
00:15:24,786 --> 00:15:27,876 A:middle
and the user will be able to
specify file name as you saw.

354
00:15:28,446 --> 00:15:30,246 A:middle
There's a few other
ways to customize this.

355
00:15:30,836 --> 00:15:33,766 A:middle
One new class, one other
new class is NSPDFPanel,

356
00:15:34,036 --> 00:15:36,786 A:middle
this gives you more panel over
the panel and the excess review.

357
00:15:36,866 --> 00:15:39,556 A:middle
For instance, let's
say you don't want

358
00:15:39,556 --> 00:15:41,356 A:middle
to export just one
PDF file but you want

359
00:15:41,356 --> 00:15:43,476 A:middle
to export the whole bunch
of related PDF files

360
00:15:44,246 --> 00:15:46,736 A:middle
and you just want the user
to choose one location.

361
00:15:46,986 --> 00:15:49,946 A:middle
With this, there's an option
that lets you choose a folder

362
00:15:50,046 --> 00:15:51,656 A:middle
to save the PDF files too.

363
00:15:51,796 --> 00:15:55,076 A:middle
And then there's this other
class NSPDFInfo that sets

364
00:15:55,076 --> 00:15:57,316 A:middle
and gets that basically
holds the user choices

365
00:15:57,316 --> 00:15:57,936 A:middle
that are being made.

366
00:15:58,276 --> 00:16:00,876 A:middle
Next thing I want to talk
about is Media Library Access.

367
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

368
00:16:01,626 --> 00:16:05,316 A:middle
So the media library is the
user's library of images,

369
00:16:06,176 --> 00:16:08,246 A:middle
music, videos and so on.

370
00:16:08,476 --> 00:16:10,976 A:middle
And they're managed by
applications such as iPhoto,

371
00:16:10,976 --> 00:16:12,756 A:middle
Aperture, iMovie, iTunes.

372
00:16:13,576 --> 00:16:16,706 A:middle
So, we have two sets of
APIs to make it easy for you

373
00:16:16,706 --> 00:16:18,236 A:middle
to access these media resources.

374
00:16:19,196 --> 00:16:20,606 A:middle
One of them is a very simple API

375
00:16:20,746 --> 00:16:23,526 A:middle
that just gives you
a non modal panel

376
00:16:23,886 --> 00:16:25,626 A:middle
that will appear in
your applications.

377
00:16:26,256 --> 00:16:29,686 A:middle
It's a new class of an app kit
called NS Media Library Browser

378
00:16:29,686 --> 00:16:31,746 A:middle
Controller and it's
fairly easy to use.

379
00:16:31,996 --> 00:16:33,976 A:middle
You would go ahead and
create the shared instance.

380
00:16:34,336 --> 00:16:37,666 A:middle
You would specify what kind of
what library you want to see

381
00:16:37,666 --> 00:16:39,976 A:middle
in this case image
so the photo library.

382
00:16:40,796 --> 00:16:43,076 A:middle
And then make the UI visible.

383
00:16:44,256 --> 00:16:46,946 A:middle
When you do this, you will
get the panel that looks

384
00:16:46,946 --> 00:16:48,916 A:middle
like this appearing
in your application.

385
00:16:49,136 --> 00:16:51,896 A:middle
As you can see, it's showing
you your iPhoto events just

386
00:16:51,896 --> 00:16:53,146 A:middle
to where the user is used to.

387
00:16:53,146 --> 00:16:57,486 A:middle
The user can go ahead and choose
or browse for individual images.

388
00:16:57,946 --> 00:17:01,056 A:middle
They can also go ahead and
browse through locations, faces,

389
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

390
00:17:01,056 --> 00:17:04,766 A:middle
et cetera just like it appears
in iPhoto, Aperture et cetera.

391
00:17:05,126 --> 00:17:08,266 A:middle
They can also go ahead and look
at the images in a list view

392
00:17:08,266 --> 00:17:10,165 A:middle
which gives them more
details about the images.

393
00:17:10,346 --> 00:17:13,156 A:middle
So, it's as fairly
simple, not customizable.

394
00:17:13,156 --> 00:17:16,086 A:middle
But you know, that only took two
or three lines of code to show.

395
00:17:16,406 --> 00:17:19,496 A:middle
The other API we have
gives you low-level access

396
00:17:19,576 --> 00:17:21,886 A:middle
to the user's library and
this comes in the form

397
00:17:21,886 --> 00:17:24,516 A:middle
of a new framework called
medialibrary.framework.

398
00:17:25,036 --> 00:17:28,306 A:middle
This library provides you
with an Objective-C data model

399
00:17:28,306 --> 00:17:30,666 A:middle
that represents all
of the user's media.

400
00:17:31,386 --> 00:17:35,446 A:middle
It's a read-only model so you
can only access the images

401
00:17:35,446 --> 00:17:37,426 A:middle
for showing in your app or
importing into your app.

402
00:17:38,156 --> 00:17:39,886 A:middle
It's also asynchronous
in the sense

403
00:17:39,886 --> 00:17:42,026 A:middle
that your application
doesn't have to be blocked

404
00:17:42,026 --> 00:17:44,056 A:middle
as you're rummaging
through library.

405
00:17:44,056 --> 00:17:46,486 A:middle
And just to give
you a quick overview

406
00:17:46,486 --> 00:17:48,096 A:middle
of what this framework
looks like,

407
00:17:48,406 --> 00:17:49,766 A:middle
there are four principal
classes,

408
00:17:50,086 --> 00:17:52,276 A:middle
ML MediaLibrary represents
the library.

409
00:17:52,506 --> 00:17:56,066 A:middle
ML MediaSource represents
the individual applications

410
00:17:56,066 --> 00:17:57,676 A:middle
or source of images.

411
00:17:58,016 --> 00:18:01,146 A:middle
ML MediaGroup represents
groups that make sense

412
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

413
00:18:01,146 --> 00:18:07,056 A:middle
within that source for
instance playlists or locations

414
00:18:07,056 --> 00:18:10,056 A:middle
or photo albums and so on.

415
00:18:10,236 --> 00:18:13,056 A:middle
And finally, ML MediaObject
represents individual

416
00:18:13,056 --> 00:18:13,956 A:middle
media objects.

417
00:18:14,236 --> 00:18:17,636 A:middle
This-- this class will
provide you with properties

418
00:18:17,636 --> 00:18:19,546 A:middle
of that object such
as the dimensions,

419
00:18:19,546 --> 00:18:20,816 A:middle
the length of the
movie, et cetera.

420
00:18:21,166 --> 00:18:23,396 A:middle
In addition, that will
also return to you a URL

421
00:18:23,716 --> 00:18:26,246 A:middle
which you can use to
access the media object even

422
00:18:26,246 --> 00:18:27,616 A:middle
in SandBox applications.

423
00:18:27,876 --> 00:18:31,386 A:middle
Next, I want to talk about
block-based sheet presentation.

424
00:18:32,386 --> 00:18:36,376 A:middle
As you know, blocks are a
feature we introduced in 10.6

425
00:18:36,376 --> 00:18:39,666 A:middle
and since then we've been
incrementally updating our APIs

426
00:18:39,916 --> 00:18:41,346 A:middle
to take advantage of blocks.

427
00:18:41,346 --> 00:18:42,796 A:middle
In one area where
we haven't done that

428
00:18:42,796 --> 00:18:44,746 A:middle
yet is generalized
sheet presentation.

429
00:18:44,866 --> 00:18:48,366 A:middle
In 10.8 and earlier, if you
want to present the sheet

430
00:18:48,366 --> 00:18:50,216 A:middle
in your application, here's
the code you would write.

431
00:18:50,696 --> 00:18:53,936 A:middle
You tell NSApp to begin
a sheet you provide

432
00:18:53,966 --> 00:18:56,346 A:middle
which Window the sheet
should be attached to

433
00:18:56,346 --> 00:18:59,266 A:middle
and then you provide a call
back in the form of a selector.

434
00:18:59,466 --> 00:19:01,226 A:middle
And then you go ahead and
implement your selector.

435
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

436
00:19:01,926 --> 00:19:04,086 A:middle
And inside that selector,
inside that method,

437
00:19:04,496 --> 00:19:06,506 A:middle
you process whatever
the user chose.

438
00:19:07,116 --> 00:19:09,096 A:middle
So, you know it's pretty
powerful, pretty good stuff

439
00:19:09,096 --> 00:19:10,636 A:middle
but it does take a
few lines of code.

440
00:19:11,256 --> 00:19:12,946 A:middle
You know, not super convenient.

441
00:19:13,626 --> 00:19:16,016 A:middle
And in 10.9 here is
all you need to do.

442
00:19:16,356 --> 00:19:18,466 A:middle
You tell the parent
window to show the sheet

443
00:19:18,526 --> 00:19:20,786 A:middle
and then you execute the
code that should happen

444
00:19:20,786 --> 00:19:21,886 A:middle
when the sheet is dismissed.

445
00:19:22,346 --> 00:19:23,616 A:middle
So, that's really it.

446
00:19:23,616 --> 00:19:25,046 A:middle
So that's the code
you're writing here.

447
00:19:25,426 --> 00:19:26,136 A:middle
So it's much better.

448
00:19:26,326 --> 00:19:28,516 A:middle
Now, this thing has
few other advantages.

449
00:19:28,516 --> 00:19:30,216 A:middle
This approach has
few other advantages.

450
00:19:30,496 --> 00:19:34,156 A:middle
For one thing, this version will
automatically dismiss the sheet.

451
00:19:34,156 --> 00:19:35,706 A:middle
You don't have to call
order out anymore.

452
00:19:36,086 --> 00:19:37,826 A:middle
When that completion
block is done,

453
00:19:37,976 --> 00:19:39,086 A:middle
the sheet will be dismissed.

454
00:19:39,666 --> 00:19:42,226 A:middle
It will queue up multiple
sheets for presentation.

455
00:19:42,916 --> 00:19:45,726 A:middle
Although it's not, you know,
UI we generally recommend,

456
00:19:46,086 --> 00:19:47,906 A:middle
sometimes some subsystems
might want

457
00:19:47,906 --> 00:19:49,336 A:middle
to show sheets one
after another.

458
00:19:49,576 --> 00:19:51,916 A:middle
And you all want those sheets
to appear on top of another

459
00:19:51,916 --> 00:19:54,146 A:middle
which doesn't exactly
working all cases.

460
00:19:54,476 --> 00:19:55,636 A:middle
This one will actually
queue them

461
00:19:55,636 --> 00:19:57,946 A:middle
so as one sheet is dismissed,
the next one will appear.

462
00:19:59,156 --> 00:20:02,746 A:middle
Now, however, if you're
a subsystem and you want

463
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

464
00:20:02,816 --> 00:20:05,566 A:middle
that sheet of your stuff here
immediately for some reason,

465
00:20:05,766 --> 00:20:08,276 A:middle
there is a big and critical
sheet completion handler

466
00:20:08,276 --> 00:20:09,836 A:middle
which will get your
sheet to cut--

467
00:20:09,836 --> 00:20:11,346 A:middle
you know, cut through
the line and up here

468
00:20:11,346 --> 00:20:11,976 A:middle
on top of everything else.

469
00:20:12,046 --> 00:20:15,566 A:middle
Clearly this would only be
used for some serious errors,

470
00:20:15,566 --> 00:20:16,596 A:middle
emergencies, whatever.

471
00:20:16,866 --> 00:20:19,326 A:middle
But anyway yes you have
that API if needed.

472
00:20:19,706 --> 00:20:23,216 A:middle
One thing you saw yesterday at
the Keynote is our new support

473
00:20:23,216 --> 00:20:26,596 A:middle
for multiple monitors and I
mean, here we say full screen

474
00:20:26,596 --> 00:20:27,466 A:middle
for multi-monitors,

475
00:20:27,466 --> 00:20:30,026 A:middle
it's actually goes way
beyond full screen as well.

476
00:20:30,346 --> 00:20:32,296 A:middle
Let me just recap what
this feature looks like.

477
00:20:32,686 --> 00:20:37,056 A:middle
So, here we have a MacBook Pro
and a larger screen attached

478
00:20:37,056 --> 00:20:40,886 A:middle
to your MacBook Pro and as you
can see here both screens have a

479
00:20:40,886 --> 00:20:43,096 A:middle
Menu Bar that Safari
is running on this one

480
00:20:43,096 --> 00:20:45,096 A:middle
and iPhoto is running
on this one.

481
00:20:45,406 --> 00:20:48,436 A:middle
So that the MacBook
Pro screen is active

482
00:20:48,906 --> 00:20:50,296 A:middle
because it's got
an active Menu Bar

483
00:20:50,296 --> 00:20:51,686 A:middle
and that's the active
application.

484
00:20:51,686 --> 00:20:53,496 A:middle
If the user goes and
clicks on iPhoto,

485
00:20:53,496 --> 00:20:57,866 A:middle
the menu on the other screen
is now active and the menu

486
00:20:57,866 --> 00:20:59,896 A:middle
on the smaller screen is
now appearing inactive

487
00:20:59,956 --> 00:21:02,796 A:middle
so that's you have a one active
screen at any given time.

488
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

489
00:21:03,086 --> 00:21:05,106 A:middle
So the user can go ahead
and interact with iPhoto put

490
00:21:05,106 --> 00:21:08,916 A:middle
into full screen mode, go into
edit mode and in fact even put

491
00:21:08,916 --> 00:21:11,886 A:middle
into gorgeous full screen
editing mode like this,

492
00:21:11,886 --> 00:21:13,086 A:middle
fairly straightforward.

493
00:21:13,086 --> 00:21:15,256 A:middle
They can also go ahead
and do the same thing

494
00:21:15,256 --> 00:21:17,666 A:middle
on their other screen and put
Safari into full screen mode,

495
00:21:17,666 --> 00:21:19,976 A:middle
again all part of a
standard operation.

496
00:21:20,296 --> 00:21:23,886 A:middle
They can also go ahead and just
switch between different spaces

497
00:21:23,886 --> 00:21:27,056 A:middle
on any screen they want as far
as they can switch the maps

498
00:21:27,056 --> 00:21:28,266 A:middle
or they can switch the pages

499
00:21:28,266 --> 00:21:30,386 A:middle
or they can switch the
desktop screens and so on.

500
00:21:30,796 --> 00:21:33,346 A:middle
So it's very powerful,
very flexible environment

501
00:21:33,796 --> 00:21:36,716 A:middle
and this is all controlled
with really just one setting.

502
00:21:37,156 --> 00:21:39,916 A:middle
If you launch Preferences
and go to Mission Control,

503
00:21:40,206 --> 00:21:41,456 A:middle
the setting here displays

504
00:21:41,456 --> 00:21:44,456 A:middle
out separate spaces is what
controls all this new behavior.

505
00:21:45,196 --> 00:21:46,746 A:middle
Now, users can go turn them off

506
00:21:46,876 --> 00:21:50,256 A:middle
in which case they get back
the 10.8 behaviors that--

507
00:21:50,376 --> 00:21:53,146 A:middle
you know that we had in 10.8.

508
00:21:54,756 --> 00:21:56,006 A:middle
So this is a user choice

509
00:21:56,316 --> 00:22:01,746 A:middle
and in this mode what happens
is each screen has its own set

510
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

511
00:22:01,746 --> 00:22:03,626 A:middle
of spaces as you saw.

512
00:22:03,626 --> 00:22:05,886 A:middle
Each screen has its
own Menu Bar as you saw

513
00:22:06,026 --> 00:22:08,696 A:middle
and Windows do not span screens
so Window will either to be

514
00:22:08,696 --> 00:22:11,206 A:middle
on one screen or the other
but not span screens.

515
00:22:11,536 --> 00:22:16,066 A:middle
Since this is a user choice
there's not much control your

516
00:22:16,066 --> 00:22:18,866 A:middle
application has over it
and there are no new APIs.

517
00:22:19,156 --> 00:22:20,966 A:middle
There's some changes
in behaviors however.

518
00:22:21,306 --> 00:22:24,766 A:middle
For instance NS screen main
screen method will now return

519
00:22:24,966 --> 00:22:27,966 A:middle
the active screen and
active screen being defined

520
00:22:27,966 --> 00:22:31,416 A:middle
as the screen with
the Menu Bar on it.

521
00:22:31,416 --> 00:22:34,086 A:middle
And resumed Windows and
resumed applications

522
00:22:34,086 --> 00:22:35,846 A:middle
so these are state-restored
Windows,

523
00:22:36,086 --> 00:22:38,716 A:middle
will return to their previous
locations wherever they might be

524
00:22:38,716 --> 00:22:40,366 A:middle
on all the user screens

525
00:22:40,846 --> 00:22:43,906 A:middle
and newly opened Windows will
prefer the active screen.

526
00:22:44,196 --> 00:22:46,566 A:middle
So we believe these
behaviors will be appropriate

527
00:22:46,566 --> 00:22:47,756 A:middle
for most applications.

528
00:22:48,396 --> 00:22:50,346 A:middle
If you get a chance, we'll pop

529
00:22:50,346 --> 00:22:52,436 A:middle
that second screen you're
carrying around in your bag

530
00:22:52,436 --> 00:22:53,606 A:middle
and try your applications.

531
00:22:53,606 --> 00:22:55,336 A:middle
And if you don't happen
to bring a second screen,

532
00:22:55,636 --> 00:22:58,286 A:middle
we do have some downstairs
in the labs and you can hook

533
00:22:58,286 --> 00:23:00,766 A:middle
up your portables
to those screens

534
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

535
00:23:00,766 --> 00:23:02,386 A:middle
and see how well your
applications work

536
00:23:02,386 --> 00:23:03,486 A:middle
in full screen modes.

537
00:23:04,026 --> 00:23:07,226 A:middle
So next thing I want to
mention is we have an updated

538
00:23:07,226 --> 00:23:07,966 A:middle
system font.

539
00:23:08,756 --> 00:23:12,086 A:middle
So how many of you noticed that
we have an updated system font?

540
00:23:12,486 --> 00:23:14,106 A:middle
I'm not talking about my iOS 7,

541
00:23:14,106 --> 00:23:15,696 A:middle
OK a few if you have
noticed that's good.

542
00:23:16,236 --> 00:23:19,626 A:middle
So, yeah we do have a
new font for UI Elements

543
00:23:19,626 --> 00:23:21,886 A:middle
and it's actually not a
drastic change at all.

544
00:23:21,886 --> 00:23:25,746 A:middle
It's very similar to the font
we had before-- Lucida Grande.

545
00:23:25,956 --> 00:23:27,726 A:middle
It's optimized for
retina display

546
00:23:27,726 --> 00:23:29,146 A:middle
so they're just slight tweaks.

547
00:23:29,676 --> 00:23:31,756 A:middle
This font is-- it's-they're
slight tweaks

548
00:23:31,756 --> 00:23:34,076 A:middle
but they're really not
significant enough at all

549
00:23:34,446 --> 00:23:36,846 A:middle
where they will cause
rewrapping of text and so

550
00:23:36,846 --> 00:23:39,246 A:middle
on so we're pretty
certain that's the case.

551
00:23:39,666 --> 00:23:41,776 A:middle
This font is not
intended for general use.

552
00:23:41,776 --> 00:23:44,526 A:middle
This font is really just
a UI Optimized version

553
00:23:44,526 --> 00:23:47,156 A:middle
of Lucida Grande so any users
who are using Lucida Grande

554
00:23:47,156 --> 00:23:48,166 A:middle
in their documents and so

555
00:23:48,166 --> 00:23:50,786 A:middle
on will continue to
use Lucida Grande.

556
00:23:51,466 --> 00:23:55,606 A:middle
Now you're saying, "Hey, my
application is UI Elements.

557
00:23:55,756 --> 00:23:56,806 A:middle
How do I use this font?"

558
00:23:57,226 --> 00:23:59,726 A:middle
Well, it's pretty simple use it
the exact same way you've been

559
00:23:59,726 --> 00:24:00,456 A:middle
using before.

560
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

561
00:24:00,456 --> 00:24:03,296 A:middle
If you're calling NS
Font system font of size,

562
00:24:04,016 --> 00:24:07,926 A:middle
you will get this new
font now or in Xcode,

563
00:24:08,356 --> 00:24:11,926 A:middle
in the Attributes Inspector, if
you have selected system font

564
00:24:11,926 --> 00:24:15,426 A:middle
which is by the way the default
in most cases and has been

565
00:24:15,426 --> 00:24:19,206 A:middle
for many years, the system
font here is the right one.

566
00:24:19,206 --> 00:24:20,516 A:middle
So if you're using this one,

567
00:24:20,796 --> 00:24:21,956 A:middle
you will be getting
the correct font.

568
00:24:21,956 --> 00:24:24,746 A:middle
So no worries, your applications
might already be using this font

569
00:24:24,746 --> 00:24:26,136 A:middle
properly in 10.9.

570
00:24:26,556 --> 00:24:29,096 A:middle
Now, if you ever
bring up a font panel

571
00:24:30,326 --> 00:24:33,016 A:middle
and to see this font
called Dot Lucida Grande UI,

572
00:24:33,016 --> 00:24:35,596 A:middle
just ignore it, it's not there.

573
00:24:37,336 --> 00:24:38,546 A:middle
We hope it will go away soon.

574
00:24:38,546 --> 00:24:40,666 A:middle
This is-- this might make an
appearance in a few places,

575
00:24:40,666 --> 00:24:42,146 A:middle
this is not even a final name

576
00:24:42,146 --> 00:24:45,486 A:middle
or we don't know how this
will land but ignore this.

577
00:24:45,486 --> 00:24:46,656 A:middle
Don't reference it by name.

578
00:24:46,656 --> 00:24:48,826 A:middle
Again just use the system
font of size method.

579
00:24:49,226 --> 00:24:55,166 A:middle
And I want to shift gears a bit
and talk a bit about App Nap

580
00:24:55,746 --> 00:24:59,956 A:middle
which you also heard about
yesterday in the Keynote

581
00:24:59,956 --> 00:25:01,196 A:middle
and also State of the Union.

582
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

583
00:25:01,946 --> 00:25:05,156 A:middle
So App Nap is a new system
feature in OS X Mavericks

584
00:25:05,656 --> 00:25:10,096 A:middle
where the system will throttle,
non for grand applications

585
00:25:10,096 --> 00:25:11,736 A:middle
that are not doing useful work.

586
00:25:12,416 --> 00:25:14,986 A:middle
So now some of you are wondering
what this throttle means.

587
00:25:14,986 --> 00:25:18,316 A:middle
Some of you are wondering
what this useful work means so

588
00:25:18,826 --> 00:25:20,136 A:middle
and not for grand apps like--

589
00:25:20,136 --> 00:25:21,576 A:middle
'cause they have to
maybe is the question,

590
00:25:21,576 --> 00:25:23,276 A:middle
but anyway so there are a
bunch of questions here.

591
00:25:23,276 --> 00:25:24,116 A:middle
What do all of these mean?

592
00:25:24,116 --> 00:25:25,106 A:middle
How's it going to do to my app?

593
00:25:25,236 --> 00:25:26,466 A:middle
And that's maybe the
biggest question.

594
00:25:27,036 --> 00:25:29,556 A:middle
So first let me define
what throttle means,

595
00:25:29,916 --> 00:25:32,366 A:middle
the biggest thing about
throttling apps is

596
00:25:32,366 --> 00:25:36,316 A:middle
that timers will be delayed
and they will be rate limited.

597
00:25:36,616 --> 00:25:40,736 A:middle
So once an app is decided
as not doing useful work,

598
00:25:40,736 --> 00:25:43,496 A:middle
it will be put into App
Nap mode and in this mode,

599
00:25:44,536 --> 00:25:48,046 A:middle
say the app has a timer to
set off to go in one second.

600
00:25:48,106 --> 00:25:49,606 A:middle
The timer might actually
not go off

601
00:25:49,606 --> 00:25:52,046 A:middle
for 10 seconds or
maybe even more.

602
00:25:52,576 --> 00:25:54,556 A:middle
Let's say an application
is that timer that's set

603
00:25:54,596 --> 00:25:56,516 A:middle
to go 60 times a second.

604
00:25:57,756 --> 00:26:00,616 A:middle
That timer will now start
going off every 10 seconds,

605
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

606
00:26:01,176 --> 00:26:03,456 A:middle
so you know it's really
going to be sleeping.

607
00:26:04,256 --> 00:26:06,536 A:middle
Another thing that
happens is apps

608
00:26:06,536 --> 00:26:09,446 A:middle
that are napping will have
lower I/O and CPU priorities.

609
00:26:09,746 --> 00:26:11,456 A:middle
So even when they're
executing code,

610
00:26:11,736 --> 00:26:13,876 A:middle
their overall throughput
will be somewhat reduced.

611
00:26:13,876 --> 00:26:17,306 A:middle
Now it's not a drastic reduction
but it will be reduced compared

612
00:26:17,306 --> 00:26:19,186 A:middle
to other applications, the
foreground applications

613
00:26:19,186 --> 00:26:20,476 A:middle
and not napping applications.

614
00:26:20,776 --> 00:26:24,176 A:middle
So the other question is, well
what does useful work mean?

615
00:26:25,356 --> 00:26:26,416 A:middle
Well so there are
some heuristics

616
00:26:26,416 --> 00:26:29,766 A:middle
to determine useful work because
as you might guess it's not easy

617
00:26:29,766 --> 00:26:33,006 A:middle
to tell an application that's
using a hundred percent CPU

618
00:26:33,236 --> 00:26:34,336 A:middle
and doing something useful

619
00:26:34,336 --> 00:26:36,646 A:middle
versus something that's
using hundred percent CPU

620
00:26:36,646 --> 00:26:37,866 A:middle
and not doing anything at all.

621
00:26:38,246 --> 00:26:39,386 A:middle
So here are our heuristics,

622
00:26:39,676 --> 00:26:42,926 A:middle
one is handling a user
event or an action method.

623
00:26:43,186 --> 00:26:45,746 A:middle
So, if we find ourselves
that were in action method

624
00:26:45,746 --> 00:26:47,816 A:middle
in the main thread,
that's clearly as a result

625
00:26:47,816 --> 00:26:51,386 A:middle
of the user having hit a button
or chosen some Menu items

626
00:26:51,386 --> 00:26:53,126 A:middle
so that's presumably
useful work.

627
00:26:54,226 --> 00:26:56,626 A:middle
Drawing visibly, if the app
is actually drawing something

628
00:26:56,626 --> 00:27:00,036 A:middle
visibly while the user is seeing
that drawing so we really want

629
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

630
00:27:00,036 --> 00:27:03,396 A:middle
that drawing to continue
playing audio as well

631
00:27:04,186 --> 00:27:05,856 A:middle
and the disabling system sleep.

632
00:27:06,206 --> 00:27:09,786 A:middle
Now some of you might be aware,
we have this API previously

633
00:27:09,786 --> 00:27:12,696 A:middle
in fact power assertion API
where an application can say,

634
00:27:13,686 --> 00:27:15,156 A:middle
"I want to disable
system sleep."

635
00:27:15,676 --> 00:27:18,386 A:middle
This is where the system goes
to sleep after no activity.

636
00:27:18,556 --> 00:27:21,146 A:middle
Applications can disable that
and the reason they do that is

637
00:27:21,146 --> 00:27:23,106 A:middle
because they're doing some
long-running operations

638
00:27:23,106 --> 00:27:27,316 A:middle
such as exporting images or
doing something else long,

639
00:27:27,316 --> 00:27:28,866 A:middle
and then they don't want
the system to go to sleep.

640
00:27:29,856 --> 00:27:31,456 A:middle
So, we take that
as a hint to mean

641
00:27:31,456 --> 00:27:33,886 A:middle
that the app is doing useful
work and we disable App Nap

642
00:27:34,006 --> 00:27:35,746 A:middle
for the duration for
that application.

643
00:27:36,466 --> 00:27:38,916 A:middle
And finally we have some new
APIs that we'll talk about.

644
00:27:39,346 --> 00:27:43,146 A:middle
You can use APIs to declare
activity formally and then we--

645
00:27:43,146 --> 00:27:46,256 A:middle
of course say, "OK you're doing
useful work, useful activity,

646
00:27:46,456 --> 00:27:47,346 A:middle
we won't put you to sleep."

647
00:27:47,876 --> 00:27:50,926 A:middle
Now App Nap is automatically
applied to all applications.

648
00:27:50,996 --> 00:27:53,256 A:middle
In fact that's the
goal of App Nap.

649
00:27:54,346 --> 00:27:55,676 A:middle
You know, we know that
there are a lot of apps

650
00:27:55,676 --> 00:27:58,596 A:middle
out there probably enough of
yours but there are a bunch

651
00:27:58,596 --> 00:28:00,866 A:middle
of apps out there that
do misbehave sometimes

652
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

653
00:28:00,866 --> 00:28:02,606 A:middle
and they're sitting in the
background just chewing

654
00:28:02,606 --> 00:28:05,426 A:middle
through CPU-- you know maybe
well-intentioned purpose

655
00:28:05,426 --> 00:28:08,906 A:middle
but again they are still chewing
through CPU and we're going

656
00:28:09,156 --> 00:28:12,516 A:middle
to apply App Nap to all these
apps who haven't been updated

657
00:28:12,806 --> 00:28:15,486 A:middle
or who-- you know,
won't get updated maybe

658
00:28:15,486 --> 00:28:17,616 A:middle
for a few more months or years
or you know, the ones we want

659
00:28:17,616 --> 00:28:19,646 A:middle
to apply to all these apps
that's why we're applying--

660
00:28:20,086 --> 00:28:21,406 A:middle
you know, no opt-in required.

661
00:28:22,096 --> 00:28:24,346 A:middle
Apps will get App Nap however

662
00:28:24,676 --> 00:28:26,976 A:middle
if some applications
are misbehaving,

663
00:28:27,126 --> 00:28:29,726 A:middle
users can disable App
Nap for that application

664
00:28:30,066 --> 00:28:33,206 A:middle
by using the prevent
App Nap check box

665
00:28:33,306 --> 00:28:36,616 A:middle
in the File Info
Panel and Finder.

666
00:28:37,546 --> 00:28:38,776 A:middle
That will disable App Nap

667
00:28:38,836 --> 00:28:40,586 A:middle
for that version of
that application.

668
00:28:41,156 --> 00:28:43,076 A:middle
Note that this check
box will go away,

669
00:28:43,076 --> 00:28:46,066 A:middle
will vanish for applications
that are linked on 10.9

670
00:28:46,346 --> 00:28:49,566 A:middle
with the intent that when you
put up 10.9 linked versions

671
00:28:49,566 --> 00:28:53,076 A:middle
of your applications, they're
hopefully App Nap savvy

672
00:28:53,076 --> 00:28:56,016 A:middle
and users don't have to turn off
App Nap for those applications

673
00:28:56,016 --> 00:28:57,586 A:middle
so that's something
to look into.

674
00:28:58,026 --> 00:29:01,106 A:middle
Now earlier I mentioned
activity APIs,

675
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

676
00:29:01,106 --> 00:29:03,166 A:middle
let me just give a
quick overview of those.

677
00:29:03,496 --> 00:29:07,366 A:middle
These APIs allow you to declare
the activities your application

678
00:29:07,396 --> 00:29:07,966 A:middle
is doing.

679
00:29:08,456 --> 00:29:11,306 A:middle
APIs are in process info.

680
00:29:12,356 --> 00:29:13,066 A:middle
Here's one of them.

681
00:29:13,066 --> 00:29:14,546 A:middle
Perform activity with options.

682
00:29:15,306 --> 00:29:18,296 A:middle
I'll talk about the options,
a recent string which is used

683
00:29:18,296 --> 00:29:19,816 A:middle
for debugging end the block

684
00:29:19,816 --> 00:29:22,356 A:middle
and this is the Activity
Block that's being executed.

685
00:29:22,866 --> 00:29:25,146 A:middle
Now if you can't represent
your activity as a block,

686
00:29:25,416 --> 00:29:27,396 A:middle
you can also call the
Begin and End methods

687
00:29:27,396 --> 00:29:28,876 A:middle
which are also on process info.

688
00:29:28,876 --> 00:29:31,636 A:middle
So let me talk a little
bit about those options,

689
00:29:31,686 --> 00:29:33,406 A:middle
those options that
you specify the kind

690
00:29:33,406 --> 00:29:34,716 A:middle
of activity that's happening.

691
00:29:35,136 --> 00:29:38,716 A:middle
One common one is NS
Activity user-initiated.

692
00:29:39,156 --> 00:29:42,016 A:middle
This is simply an activity where
the user wanted to do something.

693
00:29:42,016 --> 00:29:45,896 A:middle
They hit some button;
they chose some Menu item

694
00:29:45,896 --> 00:29:48,386 A:middle
so something is happening
clearly the app should finish

695
00:29:48,386 --> 00:29:50,296 A:middle
that even if app is
not in the foreground.

696
00:29:50,756 --> 00:29:53,256 A:middle
Another example is activity
user-initiated allowing

697
00:29:53,356 --> 00:29:54,016 A:middle
system sleep.

698
00:29:54,366 --> 00:29:55,476 A:middle
An example of this is

699
00:29:55,476 --> 00:29:58,086 A:middle
for instance an application
that's sitting there constantly

700
00:29:58,086 --> 00:30:00,076 A:middle
giving you stock price updates.

701
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

702
00:30:00,076 --> 00:30:01,376 A:middle
The user might have
initiated that.

703
00:30:01,676 --> 00:30:04,886 A:middle
However, such an application
typically would not prevent

704
00:30:04,886 --> 00:30:07,396 A:middle
system idle sleep because it's
an application that's just

705
00:30:07,396 --> 00:30:08,976 A:middle
giving their-- showing
some status update.

706
00:30:10,006 --> 00:30:13,046 A:middle
Another example is
activate the background.

707
00:30:13,356 --> 00:30:14,216 A:middle
That's the kind of activity

708
00:30:14,216 --> 00:30:16,006 A:middle
that the user did not
necessarily initiate

709
00:30:16,296 --> 00:30:19,316 A:middle
but it should still
continue but maybe some--

710
00:30:19,526 --> 00:30:22,046 A:middle
the system should still
be apply some heuristics

711
00:30:22,046 --> 00:30:23,476 A:middle
to lower power usage.

712
00:30:23,906 --> 00:30:25,776 A:middle
But however, it's
still is something

713
00:30:25,776 --> 00:30:28,806 A:middle
that the app should not go to
App Nap during this activity.

714
00:30:28,806 --> 00:30:31,526 A:middle
An example of this is for
instance indexing in Xcode

715
00:30:31,846 --> 00:30:36,226 A:middle
or thumbnail generation
in an app like Aperture.

716
00:30:36,496 --> 00:30:38,686 A:middle
These are not things that
the user directly initiates

717
00:30:39,026 --> 00:30:41,056 A:middle
but these are things that
are being done on behalf

718
00:30:41,056 --> 00:30:42,866 A:middle
of the user, so they
should really complete.

719
00:30:43,526 --> 00:30:45,026 A:middle
There are a bunch of more
activities and you can look

720
00:30:45,026 --> 00:30:46,536 A:middle
at header files to see
what they're about.

721
00:30:46,886 --> 00:30:48,726 A:middle
Now, app nap is something
that's applied

722
00:30:48,796 --> 00:30:50,986 A:middle
to non-foreground
apps automatically.

723
00:30:51,266 --> 00:30:54,396 A:middle
We also have some APIs that
let you control some of these,

724
00:30:54,396 --> 00:30:56,566 A:middle
some of these facilities
explicitly.

725
00:30:57,626 --> 00:30:59,556 A:middle
Timer tolerance APIs
are one of them.

726
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

727
00:31:00,416 --> 00:31:02,816 A:middle
So, NSTimer now is
property called tolerance

728
00:31:03,146 --> 00:31:06,636 A:middle
and that lets you specify the
amount of delay you're willing

729
00:31:06,636 --> 00:31:07,916 A:middle
to tolerate on the timer.

730
00:31:08,236 --> 00:31:11,976 A:middle
So, the timer can fire by
up to that much time later

731
00:31:11,976 --> 00:31:13,486 A:middle
than the time it specified for.

732
00:31:14,206 --> 00:31:17,306 A:middle
So, the benefits here are
that this allows the system

733
00:31:17,306 --> 00:31:19,996 A:middle
to synchronize timers
across the system

734
00:31:20,236 --> 00:31:22,366 A:middle
so they're firing
at the same time.

735
00:31:22,366 --> 00:31:25,996 A:middle
And this as you saw yesterday
during the Keynote increases the

736
00:31:25,996 --> 00:31:30,356 A:middle
amount of time that the CPU
is idle which in turn impacts,

737
00:31:30,356 --> 00:31:32,016 A:middle
improves battery life.

738
00:31:32,476 --> 00:31:33,996 A:middle
So, let me show you an example

739
00:31:34,026 --> 00:31:36,276 A:middle
of how timers work
with tolerance.

740
00:31:37,396 --> 00:31:39,326 A:middle
So, here is a very
simple timer called

741
00:31:39,326 --> 00:31:41,326 A:middle
without tolerance you're
creating at one time,

742
00:31:41,706 --> 00:31:44,036 A:middle
one shot timer to
fire in two seconds.

743
00:31:44,476 --> 00:31:47,276 A:middle
And here is our timeline,
the timer will fire there.

744
00:31:47,746 --> 00:31:50,126 A:middle
Now, note that despite
the flaming graphics,

745
00:31:50,206 --> 00:31:51,256 A:middle
timers don't really fire.

746
00:31:51,566 --> 00:31:52,826 A:middle
But anyway, so, it will--

747
00:31:52,826 --> 00:31:54,546 A:middle
the timer will kick-off
at 2 seconds.

748
00:31:54,776 --> 00:31:57,066 A:middle
Now, if you were to go ahead
and provide the tolerance

749
00:31:57,236 --> 00:32:00,656 A:middle
of 1 second, then the
timer can fire anywhere

750
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

751
00:32:00,656 --> 00:32:02,536 A:middle
between 2 to 3 seconds.

752
00:32:02,966 --> 00:32:06,726 A:middle
And then if you're to go ahead
and create a repeating timer

753
00:32:07,076 --> 00:32:10,256 A:middle
with that 2-second time period
but a 1-second tolerance,

754
00:32:11,146 --> 00:32:12,826 A:middle
the first time you'll
fire is here,

755
00:32:13,476 --> 00:32:16,006 A:middle
the second time you'll
fire is from 4 to 5

756
00:32:16,006 --> 00:32:17,876 A:middle
and the third time,
6 to 7 and so on.

757
00:32:18,166 --> 00:32:20,296 A:middle
So as you noticed, the
timer isn't really drifting.

758
00:32:20,296 --> 00:32:21,996 A:middle
It's still firing
every 2 seconds.

759
00:32:22,346 --> 00:32:25,496 A:middle
However, the fire time might
be delayed by up to 1 second.

760
00:32:25,986 --> 00:32:28,706 A:middle
Another set of API's
we're giving you is the

761
00:32:28,706 --> 00:32:29,366 A:middle
occlusion APIs.

762
00:32:29,366 --> 00:32:32,466 A:middle
You can now tell whether
Windows are visible or not

763
00:32:32,756 --> 00:32:35,576 A:middle
and the advantage here is
by telling that a Window

764
00:32:35,576 --> 00:32:38,236 A:middle
that you're drawing something
into is not visible to the user.

765
00:32:38,436 --> 00:32:41,436 A:middle
You can actually stop doing
the work of drawing stuff

766
00:32:41,436 --> 00:32:44,256 A:middle
and maybe even stop doing some
other work that's supporting

767
00:32:44,256 --> 00:32:45,006 A:middle
that drawing work.

768
00:32:45,356 --> 00:32:47,706 A:middle
This API exist on NSWindow
and NSAapplication.

769
00:32:47,706 --> 00:32:50,276 A:middle
You can tell what the
occlusion state of a Window is.

770
00:32:50,746 --> 00:32:52,486 A:middle
And there also notifications
that tell you

771
00:32:52,486 --> 00:32:54,566 A:middle
when that occlusion
state to changes.

772
00:32:55,816 --> 00:32:57,846 A:middle
We do have a whole talk
dedicated to App Nap.

773
00:32:58,436 --> 00:33:01,126 A:middle
That's tomorrow morning
at 10:15,

774
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

775
00:33:01,416 --> 00:33:03,336 A:middle
"Improving Power
Efficiency with App Nap."

776
00:33:05,316 --> 00:33:07,896 A:middle
In addition we have a lab
right after that Cocoa

777
00:33:07,896 --> 00:33:11,046 A:middle
and Foundation Lab where you can
ask App Nap questions as well

778
00:33:11,046 --> 00:33:13,306 A:middle
as any other foundation or
Cocoa questions in fact.

779
00:33:13,836 --> 00:33:15,366 A:middle
And then we have one more talk.

780
00:33:15,506 --> 00:33:16,676 A:middle
We actually have a lot of talks

781
00:33:16,676 --> 00:33:18,706 A:middle
about battery life
and power and so on.

782
00:33:18,706 --> 00:33:21,056 A:middle
But one that you might
have missed this morning

783
00:33:21,056 --> 00:33:23,946 A:middle
at 11:30 is maximizing
battery life on OS X

784
00:33:24,296 --> 00:33:27,466 A:middle
which is a great overview of
this effort and it's given by,

785
00:33:27,466 --> 00:33:30,256 A:middle
it was given by Bud
Tribble, vice president

786
00:33:30,256 --> 00:33:31,446 A:middle
of Software Technology.

787
00:33:31,906 --> 00:33:36,366 A:middle
Bud was also one of the original
designers of Mac OS in fact.

788
00:33:36,626 --> 00:33:37,936 A:middle
So, if you haven't seen

789
00:33:37,936 --> 00:33:39,746 A:middle
that talk you might want
to catch it on video.

790
00:33:40,166 --> 00:33:41,206 A:middle
So the next thing I want to talk

791
00:33:41,206 --> 00:33:43,186 A:middle
about is another new
facility we've added

792
00:33:43,226 --> 00:33:44,446 A:middle
to foundation called
the progress,

793
00:33:44,446 --> 00:33:45,786 A:middle
supporting and cancellation.

794
00:33:46,256 --> 00:33:50,216 A:middle
This is a new facility for
reporting progress of work.

795
00:33:50,856 --> 00:33:56,846 A:middle
It also allows the progress
to be presented to the user

796
00:33:57,146 --> 00:34:00,906 A:middle
and for the user to cancel
the work that's represented

797
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

798
00:34:00,936 --> 00:34:01,846 A:middle
by that progress.

799
00:34:01,936 --> 00:34:05,966 A:middle
And now, this facility
has got some aspects,

800
00:34:06,206 --> 00:34:09,815 A:middle
it's loosely coupled
meaning the subsystem

801
00:34:10,025 --> 00:34:12,076 A:middle
that is reporting
progress doesn't know

802
00:34:12,076 --> 00:34:14,896 A:middle
about the subsystems that might
be displaying that progress.

803
00:34:15,636 --> 00:34:17,436 A:middle
This facility is composable

804
00:34:17,436 --> 00:34:19,786 A:middle
across layers meaning
different layers

805
00:34:19,786 --> 00:34:23,556 A:middle
of software can be generating
progress in their own terms

806
00:34:23,556 --> 00:34:26,136 A:middle
and they might not even be aware
of other layers of the system.

807
00:34:26,196 --> 00:34:29,126 A:middle
For instance, the user
might say" Go ahead

808
00:34:29,126 --> 00:34:32,636 A:middle
and compress this
folder full of images."

809
00:34:33,096 --> 00:34:37,446 A:middle
So, at the top level we're
processing 42 images,

810
00:34:37,446 --> 00:34:40,116 A:middle
one image out of 42, two
images out of 42 et cetera.

811
00:34:40,346 --> 00:34:43,746 A:middle
But at the lower layer as each
image is being processed it's

812
00:34:43,746 --> 00:34:45,156 A:middle
running through a
Scanline so kind

813
00:34:45,156 --> 00:34:47,606 A:middle
of Scanline100 and
101 et cetera.

814
00:34:47,606 --> 00:34:49,835 A:middle
And each layer reports
progress in its own terms

815
00:34:49,835 --> 00:34:51,386 A:middle
but it's composed across layers.

816
00:34:51,525 --> 00:34:53,516 A:middle
And this is also across process.

817
00:34:53,856 --> 00:34:59,556 A:middle
One-- process the application
that's reporting progress might

818
00:34:59,556 --> 00:35:01,096 A:middle
be different than the
one that's observing it.

819
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

820
00:35:01,286 --> 00:35:03,316 A:middle
A great example of
this is Safari

821
00:35:03,796 --> 00:35:05,306 A:middle
which is downloading a file.

822
00:35:05,396 --> 00:35:09,026 A:middle
It's reporting progress of
that download but Finder

823
00:35:09,056 --> 00:35:11,606 A:middle
or Dock can be observing
that progress

824
00:35:11,606 --> 00:35:14,566 A:middle
and showing actually how much
of that download is finished.

825
00:35:14,566 --> 00:35:17,146 A:middle
And in fact that those
facilities do use NSProgress

826
00:35:17,586 --> 00:35:18,236 A:middle
in the system.

827
00:35:18,466 --> 00:35:19,796 A:middle
So let me give you
a quick example

828
00:35:19,796 --> 00:35:21,286 A:middle
of how you use NSProgress.

829
00:35:21,556 --> 00:35:24,096 A:middle
Here's a simple method
which does some work.

830
00:35:24,096 --> 00:35:27,736 A:middle
It runs through an array
of stuff just one by one

831
00:35:27,736 --> 00:35:29,266 A:middle
and it processes the items

832
00:35:29,266 --> 00:35:30,896 A:middle
in the array fairly
straightforward.

833
00:35:31,136 --> 00:35:32,826 A:middle
If you want to make
this progress savvy,

834
00:35:33,126 --> 00:35:34,946 A:middle
you would insert these
two lines of code.

835
00:35:35,316 --> 00:35:37,616 A:middle
One of them goes and
creates an NSProgress object

836
00:35:38,026 --> 00:35:41,636 A:middle
and you specify a total unit
count for an array of elements,

837
00:35:41,986 --> 00:35:44,236 A:middle
the number of elements in an
array is a perfect unit account

838
00:35:44,676 --> 00:35:46,276 A:middle
for a file, the byte count

839
00:35:46,276 --> 00:35:49,046 A:middle
of the file might be the
unit count to use and so on.

840
00:35:49,786 --> 00:35:51,706 A:middle
And then each time through
the loop we go ahead

841
00:35:51,706 --> 00:35:53,296 A:middle
and set the completed
unit count.

842
00:35:53,906 --> 00:35:57,026 A:middle
We increment the completed unit
count to indicate we're done

843
00:35:57,026 --> 00:35:59,086 A:middle
with one more item, so
fairly straightforward.

844
00:35:59,496 --> 00:36:02,326 A:middle
Now, you can also go to the next
step and make those cancelable.

845
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

846
00:36:02,786 --> 00:36:04,636 A:middle
To do that, you would
go ahead and say

847
00:36:04,636 --> 00:36:08,396 A:middle
if the progress is canceled then
you go ahead and exit the loop

848
00:36:08,466 --> 00:36:10,446 A:middle
with an appropriate
canceled error.

849
00:36:10,906 --> 00:36:12,476 A:middle
Of course, this would
also indicate

850
00:36:12,476 --> 00:36:14,766 A:middle
that you would tell the
progress that's cancelable

851
00:36:14,766 --> 00:36:18,146 A:middle
and that upper levels would
provide the ability for the user

852
00:36:18,146 --> 00:36:19,326 A:middle
to cancel the progress.

853
00:36:19,666 --> 00:36:21,716 A:middle
But you know, you can just
add this code here as a way

854
00:36:21,716 --> 00:36:23,966 A:middle
to say that, "hey, I know
about cancellation I'll deal

855
00:36:23,966 --> 00:36:24,916 A:middle
with it if the user did."

856
00:36:25,856 --> 00:36:28,196 A:middle
Observing progress is also
fairly straightforward.

857
00:36:28,596 --> 00:36:32,436 A:middle
There are properties
such as total unit count,

858
00:36:32,436 --> 00:36:34,656 A:middle
completed unit count,
fraction completed

859
00:36:34,656 --> 00:36:36,816 A:middle
that you can display in your UI.

860
00:36:37,006 --> 00:36:39,376 A:middle
There's also a localized
description that's generated

861
00:36:39,376 --> 00:36:41,616 A:middle
fairly generically or
it might be specialized

862
00:36:41,616 --> 00:36:43,216 A:middle
by whoever is generating
the progress.

863
00:36:43,736 --> 00:36:44,906 A:middle
In addition, there
are other properties

864
00:36:44,906 --> 00:36:47,296 A:middle
such as whether the
progress is in determinant

865
00:36:47,296 --> 00:36:49,186 A:middle
and of course whether
it's cancelable or not.

866
00:36:49,646 --> 00:36:52,316 A:middle
As I mentioned earlier,
an example of you know,

867
00:36:52,316 --> 00:36:54,506 A:middle
observing progress
is a finder window

868
00:36:54,506 --> 00:36:57,486 A:middle
where this file is being
either copied or downloaded

869
00:36:57,806 --> 00:37:00,886 A:middle
but the little bar at the
bottom is showing the progress

870
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

871
00:37:00,886 --> 00:37:02,276 A:middle
and the X in the corner there

872
00:37:02,276 --> 00:37:03,936 A:middle
in the upper left
corner is showing you

873
00:37:03,936 --> 00:37:05,486 A:middle
that it's a cancelable progress.

874
00:37:05,486 --> 00:37:08,716 A:middle
So the user can click it at any
point to stop the operation.

875
00:37:08,996 --> 00:37:11,436 A:middle
So the next thing I want to talk
about is date and time handling.

876
00:37:11,826 --> 00:37:13,386 A:middle
And this is a favorite
topic of ours

877
00:37:13,386 --> 00:37:17,476 A:middle
because I think we've talked
about this every WWDC for a few,

878
00:37:17,476 --> 00:37:19,736 A:middle
for the last few years now it's

879
00:37:19,736 --> 00:37:21,546 A:middle
because current calendar
computations turned

880
00:37:21,546 --> 00:37:22,186 A:middle
out to be hard.

881
00:37:22,616 --> 00:37:24,976 A:middle
They're hard because there
are different calendar systems

882
00:37:24,976 --> 00:37:25,896 A:middle
in use around the world.

883
00:37:25,896 --> 00:37:27,836 A:middle
They're hard because there
are daylight savings.

884
00:37:27,836 --> 00:37:30,346 A:middle
They're hard there because of
their time zones and so on.

885
00:37:30,346 --> 00:37:32,256 A:middle
So there are a lot of little
complications involved

886
00:37:32,256 --> 00:37:33,506 A:middle
in current calendar
computations.

887
00:37:34,186 --> 00:37:36,336 A:middle
So to help with this, we
provided a bunch more APIs.

888
00:37:36,336 --> 00:37:38,846 A:middle
And I'm just going to
touch upon a few of them.

889
00:37:39,576 --> 00:37:42,416 A:middle
Some of the APIs are
just what we would refer

890
00:37:42,416 --> 00:37:43,956 A:middle
to as communions APIs.

891
00:37:44,326 --> 00:37:46,926 A:middle
They just give you very
simple one-line ways

892
00:37:46,926 --> 00:37:50,436 A:middle
to achieve some things that
might have been few lines before

893
00:37:50,436 --> 00:37:52,046 A:middle
or maybe in fact
more lines in fact.

894
00:37:52,316 --> 00:37:53,736 A:middle
And there might have
been hidden pitfalls.

895
00:37:54,086 --> 00:37:55,696 A:middle
An example is just
asking a question

896
00:37:55,696 --> 00:37:57,296 A:middle
like "is date in today?"

897
00:37:57,706 --> 00:38:00,316 A:middle
Is this NSDate object
some time in today?

898
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

899
00:38:00,896 --> 00:38:03,196 A:middle
One-line call now to your
appropriate calendar.

900
00:38:03,856 --> 00:38:05,726 A:middle
Another one is this
date in the weekend.

901
00:38:06,166 --> 00:38:08,596 A:middle
That's you know that's not
getting fairly powerful

902
00:38:08,596 --> 00:38:11,536 A:middle
because you know definition of
weekend might change depending

903
00:38:11,536 --> 00:38:14,036 A:middle
on what calendar and what
part of the world you are.

904
00:38:14,666 --> 00:38:18,266 A:middle
Another call along the same
lines "is date equal to date"

905
00:38:18,756 --> 00:38:20,286 A:middle
in unit ground [inaudible]
in this case,

906
00:38:20,286 --> 00:38:23,206 A:middle
it will tell you whether two
dates are within the same month

907
00:38:23,416 --> 00:38:25,816 A:middle
in that calendar
system and so on.

908
00:38:25,876 --> 00:38:28,426 A:middle
There's a bunch of methods here
I would encourage you to go look

909
00:38:28,426 --> 00:38:30,936 A:middle
at the header file to
see what we've all added.

910
00:38:31,376 --> 00:38:33,636 A:middle
We also have a bunch of
new enumeration APIs here.

911
00:38:34,226 --> 00:38:35,786 A:middle
And again, I will just--

912
00:38:35,786 --> 00:38:38,416 A:middle
I want to go through them all
just show you one of them.

913
00:38:39,446 --> 00:38:41,246 A:middle
Enumerate dates starting
after date.

914
00:38:42,046 --> 00:38:45,476 A:middle
Now, this method here will
enumerate dates you are

915
00:38:45,476 --> 00:38:47,756 A:middle
providing a date
components instance

916
00:38:47,756 --> 00:38:49,846 A:middle
which represents your
enumeration parameters.

917
00:38:50,036 --> 00:38:54,326 A:middle
And then options parameter which
represents what to do in case

918
00:38:54,326 --> 00:38:55,896 A:middle
of various exceptional cases.

919
00:38:56,446 --> 00:38:57,696 A:middle
Let me give you a quick example.

920
00:38:58,956 --> 00:39:01,916 A:middle
Let's say you want to create
NSDate representing 2:30 a.m.

921
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

922
00:39:02,126 --> 00:39:02,696 A:middle
every day.

923
00:39:03,826 --> 00:39:06,266 A:middle
You'd create a date
components object set the hour

924
00:39:06,266 --> 00:39:08,276 A:middle
and the minute like
this to 2 and 30.

925
00:39:08,846 --> 00:39:11,596 A:middle
And then you would ask
your current calendar

926
00:39:11,596 --> 00:39:13,526 A:middle
which is usually the
most appropriate calendar

927
00:39:13,796 --> 00:39:14,296 A:middle
to enumerate.

928
00:39:14,656 --> 00:39:15,726 A:middle
So fairly straightforward

929
00:39:16,136 --> 00:39:19,466 A:middle
and you would start NSDate
date it's right now June 11th

930
00:39:19,466 --> 00:39:24,006 A:middle
at 4 p.m. So, you start running
this program and it will report

931
00:39:24,036 --> 00:39:27,096 A:middle
to you June 12th at 2:30
a.m. so on and so forth.

932
00:39:27,316 --> 00:39:30,596 A:middle
March 8th 2:30 a.m.,
March 9th at 3 a.m.

933
00:39:30,596 --> 00:39:33,236 A:middle
And it will continue
on reporting 2:30.

934
00:39:33,876 --> 00:39:36,596 A:middle
So what happened there on
March 9th, I think most

935
00:39:36,596 --> 00:39:37,936 A:middle
of you already can guess it's

936
00:39:38,036 --> 00:39:39,976 A:middle
when daylight savings
time happens here

937
00:39:39,976 --> 00:39:40,996 A:middle
in the United States.

938
00:39:41,336 --> 00:39:43,436 A:middle
So the algorithm chose
to give you 3 o'clock

939
00:39:43,496 --> 00:39:45,746 A:middle
but it also told you that
the time was not exact.

940
00:39:46,246 --> 00:39:48,206 A:middle
So you know that
something went wrong.

941
00:39:48,666 --> 00:39:51,666 A:middle
So where did the 3
o'clock come from?

942
00:39:51,666 --> 00:39:53,086 A:middle
Well, it came from
this argument here,

943
00:39:53,086 --> 00:39:54,666 A:middle
NSCalendar match next time.

944
00:39:54,946 --> 00:39:58,356 A:middle
This option tells you that if
this given time doesn't exist

945
00:39:58,356 --> 00:40:00,246 A:middle
and in this case of
course there's no 2:30

946
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

947
00:40:00,246 --> 00:40:02,736 A:middle
on March 9th time
jumps from 2 a.m.

948
00:40:02,736 --> 00:40:03,826 A:middle
to 3 a.m. just give
me the next time.

949
00:40:03,916 --> 00:40:04,686 A:middle
So it gives you 3 a.m.

950
00:40:05,276 --> 00:40:10,246 A:middle
There are other options which
give you other choices like 3:30

951
00:40:10,246 --> 00:40:12,796 A:middle
or 1:30 or maybe it doesn't
give you a return result at all

952
00:40:12,796 --> 00:40:14,176 A:middle
and just generates
an error instead.

953
00:40:15,346 --> 00:40:18,956 A:middle
So to find out more about the
various challenges and issues

954
00:40:18,956 --> 00:40:22,196 A:middle
and the various solutions we've
come up with, and to hear more

955
00:40:22,196 --> 00:40:24,066 A:middle
about these options in
this enumeration case.

956
00:40:24,066 --> 00:40:26,856 A:middle
You can go to this talk
on Friday at 11:30,

957
00:40:27,266 --> 00:40:29,656 A:middle
Solutions to Common Date
and Time Challenges.

958
00:40:29,726 --> 00:40:30,656 A:middle
You know, there are a lot

959
00:40:30,656 --> 00:40:32,746 A:middle
of hard things actually it
turns out in programing.

960
00:40:32,746 --> 00:40:35,036 A:middle
Another thing that's
hard is handling plurals.

961
00:40:35,536 --> 00:40:39,066 A:middle
Now, many of you might say,
"what's hard with that?,

962
00:40:39,306 --> 00:40:44,376 A:middle
I wrote this code" you know,
if N equals one, yes you know,

963
00:40:44,376 --> 00:40:48,296 A:middle
there is one and if otherwise
you know percent D files are

964
00:40:48,296 --> 00:40:48,976 A:middle
selected right?

965
00:40:48,976 --> 00:40:51,336 A:middle
So many of us are either
proud of within this--

966
00:40:51,476 --> 00:40:53,296 A:middle
having this code,
or maybe guilty

967
00:40:53,296 --> 00:40:54,296 A:middle
of having written this code?

968
00:40:54,696 --> 00:40:57,466 A:middle
So this code is actually fine
for English but it doesn't work

969
00:40:57,466 --> 00:40:59,346 A:middle
in other languages,
most other languages.

970
00:40:59,346 --> 00:41:02,186 A:middle
For instance, even French
turns out, treats zero

971
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

972
00:41:02,186 --> 00:41:05,486 A:middle
and one differently
than the plural cases.

973
00:41:05,486 --> 00:41:07,926 A:middle
While in English, zero is
treated like the plural case.

974
00:41:08,306 --> 00:41:11,436 A:middle
And forget about Arabic,
here's what you get,

975
00:41:11,636 --> 00:41:15,046 A:middle
you get six different cases and
I'm not even going to you know,

976
00:41:15,166 --> 00:41:16,016 A:middle
run through this code.

977
00:41:16,016 --> 00:41:17,836 A:middle
But it's not simple
and so if you are going

978
00:41:17,836 --> 00:41:19,626 A:middle
to write a properly
localized application

979
00:41:19,626 --> 00:41:23,156 A:middle
that handles all these cases,
there's a lot of if statements

980
00:41:23,156 --> 00:41:24,926 A:middle
and a lot of localizations
we're having to deal with.

981
00:41:25,616 --> 00:41:29,816 A:middle
So, we have a solution
for this in foundation

982
00:41:30,176 --> 00:41:32,606 A:middle
and we call it localized
Populous File

983
00:41:32,856 --> 00:41:36,576 A:middle
and it was also known as
strings dict resource files.

984
00:41:37,216 --> 00:41:39,506 A:middle
Those of you familiar with the
way we do localization know

985
00:41:39,506 --> 00:41:40,846 A:middle
that we have strings file.

986
00:41:40,846 --> 00:41:44,506 A:middle
Strings dict files as you
can guess is just a glorified

987
00:41:44,506 --> 00:41:46,876 A:middle
strings file which actually
contains the full-fledged

988
00:41:46,926 --> 00:41:47,966 A:middle
dictionary in there.

989
00:41:48,536 --> 00:41:52,616 A:middle
It provides localized
forms based on plurality

990
00:41:52,686 --> 00:41:54,496 A:middle
as I showed and also gender.

991
00:41:54,566 --> 00:41:57,726 A:middle
It turns out gender, most of
you know isn't easy either.

992
00:41:57,866 --> 00:41:59,646 A:middle
Some languages have
one, some have two,

993
00:41:59,646 --> 00:42:01,376 A:middle
turns out some have
even more like up

994
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

995
00:42:01,376 --> 00:42:02,996 A:middle
to five in some languages.

996
00:42:03,436 --> 00:42:05,256 A:middle
And you know, and who
knows what will happen

997
00:42:05,256 --> 00:42:07,746 A:middle
when you discover an
alien race with 10 sexes?

998
00:42:08,056 --> 00:42:09,736 A:middle
So gender is not easy OK?

999
00:42:10,336 --> 00:42:13,206 A:middle
So anyway the good thing
here is there's no new API

1000
00:42:13,386 --> 00:42:14,046 A:middle
to do any of this.

1001
00:42:14,046 --> 00:42:15,836 A:middle
You just have in fact one
code of path, for instance,

1002
00:42:15,836 --> 00:42:17,146 A:middle
here's a kind of
code you might write.

1003
00:42:17,596 --> 00:42:20,376 A:middle
Just localize a string,
percent D files selected,

1004
00:42:20,376 --> 00:42:21,656 A:middle
it's a nice generic string,

1005
00:42:21,656 --> 00:42:24,676 A:middle
it'll work in case no
localization exist.

1006
00:42:24,676 --> 00:42:26,796 A:middle
It's clearly suboptimal
but it will work.

1007
00:42:27,206 --> 00:42:29,066 A:middle
However if this was
properly localized,

1008
00:42:29,976 --> 00:42:32,726 A:middle
here is what the
localization would look like.

1009
00:42:33,766 --> 00:42:37,536 A:middle
So let's look at a strings
file, the strings dict file.

1010
00:42:38,096 --> 00:42:39,756 A:middle
First of all, avert your eyes

1011
00:42:39,756 --> 00:42:41,146 A:middle
because there are
a lot of XML here.

1012
00:42:41,526 --> 00:42:44,456 A:middle
And XML, you know
is this ugly glass

1013
00:42:44,456 --> 00:42:46,016 A:middle
that makes everything
look unattractive.

1014
00:42:46,416 --> 00:42:50,316 A:middle
So let's hide all this stuff
and maybe just pull out the guts

1015
00:42:50,316 --> 00:42:51,436 A:middle
of what we're trying to look at.

1016
00:42:51,766 --> 00:42:53,666 A:middle
So the string we're
localizing is up here,

1017
00:42:53,666 --> 00:42:55,136 A:middle
percent D file selected.

1018
00:42:55,436 --> 00:42:57,396 A:middle
It's been localized
into this string.

1019
00:42:57,906 --> 00:43:01,946 A:middle
File count selected and that
substring file count is actually

1020
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1021
00:43:01,946 --> 00:43:03,586 A:middle
being selected out of
this dictionary here.

1022
00:43:03,586 --> 00:43:06,236 A:middle
Either the substring if file is

1023
00:43:06,236 --> 00:43:08,616 A:middle
or the substring
percent D files are based

1024
00:43:08,616 --> 00:43:10,786 A:middle
on the number we
have is one or other.

1025
00:43:11,196 --> 00:43:12,936 A:middle
This works for the English case

1026
00:43:12,936 --> 00:43:14,666 A:middle
and this is the English
strings dict file.

1027
00:43:15,096 --> 00:43:18,276 A:middle
However, if the same
situation was being localized

1028
00:43:18,276 --> 00:43:21,816 A:middle
for other languages, there would
be other cases here such as zero

1029
00:43:21,816 --> 00:43:24,626 A:middle
or two or few or many,
which would apply

1030
00:43:24,746 --> 00:43:26,616 A:middle
to different localizations
and different languages.

1031
00:43:26,616 --> 00:43:30,296 A:middle
So this is the way that we
handle localizations now if you,

1032
00:43:31,276 --> 00:43:33,516 A:middle
and it's a manner
of just you know,

1033
00:43:33,516 --> 00:43:35,156 A:middle
coming up with the
current localization files

1034
00:43:35,156 --> 00:43:36,926 A:middle
which can be done of
course in parallel

1035
00:43:36,926 --> 00:43:38,086 A:middle
to your application development.

1036
00:43:38,216 --> 00:43:40,606 A:middle
So I'm going to talk a
bit about instance type.

1037
00:43:40,606 --> 00:43:42,456 A:middle
Instance type is a
feature we introduced

1038
00:43:42,456 --> 00:43:44,496 A:middle
in 10.8 in objective C.

1039
00:43:44,766 --> 00:43:46,026 A:middle
Instance type indicates

1040
00:43:46,026 --> 00:43:48,936 A:middle
that a method returns an
instance of its receiver.

1041
00:43:49,276 --> 00:43:50,726 A:middle
And you might already
be familiar with it.

1042
00:43:51,086 --> 00:43:53,086 A:middle
It's already applied
implicitly to methods

1043
00:43:53,086 --> 00:43:54,776 A:middle
such as ELAC, NEW and INIT.

1044
00:43:55,266 --> 00:43:57,846 A:middle
Although these are not the
declarations you see in 10.8.

1045
00:43:57,926 --> 00:44:00,646 A:middle
SDKs, this is the way
it works implicitly.

1046
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1047
00:44:01,026 --> 00:44:04,506 A:middle
So this means that when you
send NSArray and ELAC method,

1048
00:44:05,256 --> 00:44:08,126 A:middle
the return now is
implicitly assumed

1049
00:44:08,126 --> 00:44:09,526 A:middle
to be an instance of NSArray.

1050
00:44:09,806 --> 00:44:12,256 A:middle
So this is applied only to
a very few methods in 10.8

1051
00:44:12,576 --> 00:44:15,246 A:middle
because many other methods
are not implicitly done.

1052
00:44:15,246 --> 00:44:19,386 A:middle
But in 10.9, we've declared this
on many more methods in a number

1053
00:44:19,386 --> 00:44:23,446 A:middle
of foundation classes including
NSString, NSDictinary, NSSet,

1054
00:44:24,246 --> 00:44:28,586 A:middle
NSDate etc. So let me just
show you how this helps you.

1055
00:44:29,716 --> 00:44:34,286 A:middle
Here is a line of code which
some people might have written

1056
00:44:34,286 --> 00:44:36,796 A:middle
at some point, probably
nobody in this room.

1057
00:44:36,966 --> 00:44:40,006 A:middle
And I'm just going
to put a big X on it

1058
00:44:40,006 --> 00:44:42,316 A:middle
because there's a giant
error in this line of code.

1059
00:44:42,696 --> 00:44:44,036 A:middle
And you know, you're saying

1060
00:44:44,036 --> 00:44:48,166 A:middle
of NSMutableSet mySet
equals NSMutableArray array.

1061
00:44:48,486 --> 00:44:52,296 A:middle
Now the thing is so, in 10.8,
the compiler says OK, whatever.

1062
00:44:52,716 --> 00:44:54,706 A:middle
It doesn't even generate
a warning.

1063
00:44:55,766 --> 00:44:56,906 A:middle
And that's because
the arraignment

1064
00:44:56,906 --> 00:45:00,026 A:middle
to the 10.8 is declared to
return ID so the compiler think

1065
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1066
00:45:00,026 --> 00:45:00,886 A:middle
that it's a good match here.

1067
00:45:01,456 --> 00:45:04,176 A:middle
Now, what's even sadder
is that if you go ahead

1068
00:45:04,176 --> 00:45:07,206 A:middle
and write the next line
like this, mySet add object,

1069
00:45:07,426 --> 00:45:10,746 A:middle
this also works because add
objects happens to exist both

1070
00:45:10,746 --> 00:45:12,806 A:middle
in NSMutableArray
and NSMutableSet.

1071
00:45:13,196 --> 00:45:14,276 A:middle
So now you've written a code

1072
00:45:14,306 --> 00:45:17,036 A:middle
which is totally not
doing what you intended.

1073
00:45:17,036 --> 00:45:21,056 A:middle
But it is working and the
bad thing is this will work

1074
00:45:21,336 --> 00:45:23,966 A:middle
with a number of
items like 5, 10, 20.

1075
00:45:24,236 --> 00:45:26,066 A:middle
But you know, as you add
more items to the array,

1076
00:45:26,066 --> 00:45:28,056 A:middle
instead of getting
set characteristics

1077
00:45:28,056 --> 00:45:29,326 A:middle
that you might have
been expecting,

1078
00:45:29,326 --> 00:45:31,056 A:middle
you will be getting
array characteristics.

1079
00:45:31,056 --> 00:45:33,196 A:middle
So your performance
will be suddenly showing

1080
00:45:33,746 --> 00:45:34,576 A:middle
weird behaviors.

1081
00:45:34,576 --> 00:45:39,996 A:middle
So, the bottom-line in 10.8, the
compiler is happy, no complaints

1082
00:45:39,996 --> 00:45:41,026 A:middle
and the Apps seems to work.

1083
00:45:41,376 --> 00:45:43,576 A:middle
In 10.9, here's what
the compiler will do,

1084
00:45:43,576 --> 00:45:44,816 A:middle
it will give you a big warning,

1085
00:45:45,236 --> 00:45:47,426 A:middle
telling you yes,
something's wrong.

1086
00:45:47,826 --> 00:45:49,886 A:middle
You won't be clapping
actually once you complied your

1087
00:45:49,886 --> 00:45:52,336 A:middle
applications on 10.9
and get warnings.

1088
00:45:52,926 --> 00:45:57,326 A:middle
However, it's very important to
pay attention to these warnings

1089
00:45:57,326 --> 00:46:00,066 A:middle
because we found out
many cases where we--

1090
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1091
00:46:00,146 --> 00:46:01,686 A:middle
we've gotten warnings
due to this,

1092
00:46:01,686 --> 00:46:05,256 A:middle
were actually either real bugs
or bugs waiting to happen.

1093
00:46:05,256 --> 00:46:07,126 A:middle
So it's a good idea to pay
attention to these warnings.

1094
00:46:07,576 --> 00:46:08,146 A:middle
They are good for you.

1095
00:46:08,766 --> 00:46:13,596 A:middle
Now, speaking of NSArray, let's
talk about a tidbit in NSArray.

1096
00:46:14,006 --> 00:46:17,066 A:middle
For the longest time, we've had
a method called last object.

1097
00:46:18,326 --> 00:46:21,816 A:middle
And now, we've added a
method called first object.

1098
00:46:21,816 --> 00:46:23,226 A:middle
And because we love you so much,

1099
00:46:23,226 --> 00:46:25,796 A:middle
it actually works
back to 10.6 in iOS4.

1100
00:46:25,826 --> 00:46:27,576 A:middle
So we made that happen to you.

1101
00:46:27,876 --> 00:46:30,236 A:middle
We decided it was about time,
we were keeping it you know,

1102
00:46:30,236 --> 00:46:31,946 A:middle
it was just ripening
on the tree.

1103
00:46:31,946 --> 00:46:32,606 A:middle
So there it is.

1104
00:46:33,376 --> 00:46:37,036 A:middle
Another tidbit about NSData,
so NSData now has basics

1105
00:46:37,096 --> 00:46:38,686 A:middle
for encoding and
decoding support.

1106
00:46:38,686 --> 00:46:41,026 A:middle
You can encode/decode
back the strings and data.

1107
00:46:41,656 --> 00:46:42,096 A:middle
Thank you.

1108
00:46:42,556 --> 00:46:46,256 A:middle
You can also cast the dispatch
data ts to NSData's now

1109
00:46:46,256 --> 00:46:50,076 A:middle
and this is actually a one way--
one way bridging effectively.

1110
00:46:50,466 --> 00:46:53,806 A:middle
They're sometimes you-- you
know, you cross API boundaries

1111
00:46:53,806 --> 00:46:55,856 A:middle
and you need to do this.

1112
00:46:55,906 --> 00:46:58,326 A:middle
And note that since dispatch
data ts, those of you

1113
00:46:58,326 --> 00:46:59,356 A:middle
who are familiar
might know this.

1114
00:46:59,416 --> 00:47:03,426 A:middle
Dispatch data ts can represent
discontiguous blocks of data.

1115
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1116
00:47:05,156 --> 00:47:06,206 A:middle
There's a slight, you know,

1117
00:47:06,356 --> 00:47:08,776 A:middle
maybe mismatch with
NSData there.

1118
00:47:09,146 --> 00:47:12,106 A:middle
If you call NSData, bytes method
will actually make it work.

1119
00:47:12,106 --> 00:47:13,756 A:middle
However, if you want
to be more efficient

1120
00:47:14,046 --> 00:47:15,616 A:middle
with these continuos
blocks of data,

1121
00:47:16,026 --> 00:47:18,286 A:middle
you can actually use this new
enumeration method we've added

1122
00:47:18,316 --> 00:47:21,426 A:middle
which lets you enumerate NSData
in terms of the blocks it has.

1123
00:47:21,756 --> 00:47:23,286 A:middle
And of course, if you
happen to call this on one

1124
00:47:23,286 --> 00:47:26,136 A:middle
of the traditional style datas,
you'll still get just one block.

1125
00:47:26,136 --> 00:47:28,146 A:middle
It will be as efficient as
calling the bytes method.

1126
00:47:28,146 --> 00:47:31,416 A:middle
So it's you know, it's a pretty
good method to use in general.

1127
00:47:31,676 --> 00:47:33,766 A:middle
So just call enumerate
byte ranges using block

1128
00:47:33,766 --> 00:47:35,686 A:middle
and it will return to
you the radius where the,

1129
00:47:35,746 --> 00:47:37,856 A:middle
the ranges where the
discontiguous memory

1130
00:47:37,856 --> 00:47:38,716 A:middle
blocks exist.

1131
00:47:39,626 --> 00:47:43,236 A:middle
OK, NSURL component is another
new class in foundation.

1132
00:47:43,376 --> 00:47:47,476 A:middle
NSURL components is to NSURL
what NSDate components is

1133
00:47:47,476 --> 00:47:48,196 A:middle
to NSDate.

1134
00:47:48,196 --> 00:47:52,016 A:middle
It's a mutable class that lets
you parse and create URLs.

1135
00:47:52,486 --> 00:47:54,646 A:middle
And for those of you
who are into RFCs.

1136
00:47:54,976 --> 00:47:59,156 A:middle
This now allows NSURL to be
compliant with this RFC up here.

1137
00:47:59,736 --> 00:48:01,896 A:middle
The API is fairly
straightforward.

1138
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1139
00:48:02,106 --> 00:48:03,706 A:middle
You can initialize
one from a URL

1140
00:48:03,706 --> 00:48:05,286 A:middle
or you can just initialize
an empty one.

1141
00:48:05,406 --> 00:48:08,036 A:middle
You can go ahead and set
various properties on here

1142
00:48:08,036 --> 00:48:10,746 A:middle
such as the scheme, the
user, the path, the query.

1143
00:48:11,316 --> 00:48:13,956 A:middle
And you just go ahead
and extract the URL.

1144
00:48:14,416 --> 00:48:17,436 A:middle
And just to show you
a quick example, you--

1145
00:48:17,436 --> 00:48:20,326 A:middle
so let me create one just
specify those parameters

1146
00:48:20,496 --> 00:48:22,216 A:middle
and I can go ahead
and ask the URL

1147
00:48:22,216 --> 00:48:23,266 A:middle
and here's the output you get.

1148
00:48:23,346 --> 00:48:25,876 A:middle
So it's much, much
more straightforward

1149
00:48:25,876 --> 00:48:28,926 A:middle
than using the previous
URLs and the APIs and NSURL.

1150
00:48:29,576 --> 00:48:31,996 A:middle
NSURLSession is another
API in foundation.

1151
00:48:31,996 --> 00:48:34,406 A:middle
It's actually a set
of related classes,

1152
00:48:34,886 --> 00:48:37,316 A:middle
it's replacement APIs
for NSURLConnection.

1153
00:48:37,876 --> 00:48:39,526 A:middle
It's-- gives you
improved control

1154
00:48:39,526 --> 00:48:40,926 A:middle
over configuration options

1155
00:48:40,926 --> 00:48:43,376 A:middle
such as authentication
cookies and caching.

1156
00:48:43,646 --> 00:48:45,876 A:middle
You no longer have to fiddle
with the global settings,

1157
00:48:45,876 --> 00:48:48,596 A:middle
you can just set them for the
operation you have at hand.

1158
00:48:49,096 --> 00:48:51,676 A:middle
It has ability to pour out
from out of process downloads

1159
00:48:51,676 --> 00:48:54,136 A:middle
and uploads and it will
notify you when it's done.

1160
00:48:54,626 --> 00:48:57,496 A:middle
And there's also some
convenience APIs in NSURLSession

1161
00:48:57,496 --> 00:49:00,616 A:middle
that lets you do simple
cancelable asynchronous

1162
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1163
00:49:00,616 --> 00:49:02,846 A:middle
operations which has
a few lines of code.

1164
00:49:02,846 --> 00:49:05,026 A:middle
I'm not going to go
into more depth here

1165
00:49:05,026 --> 00:49:08,106 A:middle
because there's a talk
about NSURLSession,

1166
00:49:08,106 --> 00:49:09,836 A:middle
what's new in foundation
networking.

1167
00:49:10,096 --> 00:49:12,446 A:middle
We have some improvements in
the core data and you heard

1168
00:49:12,446 --> 00:49:14,166 A:middle
about this yesterday as well.

1169
00:49:14,656 --> 00:49:17,136 A:middle
In the area of iCloud
support, we now made it

1170
00:49:17,136 --> 00:49:21,506 A:middle
so that core data does lot more
of the tedious things for you.

1171
00:49:21,646 --> 00:49:24,876 A:middle
For instance, core data will
now manage your fallback store.

1172
00:49:24,916 --> 00:49:26,166 A:middle
You don't have to
deal with it anymore.

1173
00:49:26,466 --> 00:49:30,386 A:middle
Core data will do asynchronous
iCloud initialization,

1174
00:49:30,736 --> 00:49:32,906 A:middle
so you don't have to worry
about writing that code anymore.

1175
00:49:33,186 --> 00:49:36,156 A:middle
And core data will also
automatically handle account

1176
00:49:36,156 --> 00:49:36,906 A:middle
changes for you.

1177
00:49:36,906 --> 00:49:39,026 A:middle
So that's another block of code
that you don't have to write

1178
00:49:39,086 --> 00:49:40,396 A:middle
in your coded applications.

1179
00:49:40,976 --> 00:49:43,846 A:middle
In addition, there are
many other fixes not just

1180
00:49:43,846 --> 00:49:46,066 A:middle
in core data but also
in the iClouds stack,

1181
00:49:46,126 --> 00:49:47,566 A:middle
both in the client and server

1182
00:49:47,986 --> 00:49:49,616 A:middle
that will make your
applications--

1183
00:49:49,616 --> 00:49:51,646 A:middle
that will help make your
applications more robust

1184
00:49:51,776 --> 00:49:52,296 A:middle
than before.

1185
00:49:52,486 --> 00:49:55,136 A:middle
There are other changes in core
data as well and one of them is

1186
00:49:55,136 --> 00:49:57,106 A:middle
that we've enabled
write-ahead logging,

1187
00:49:57,486 --> 00:49:58,856 A:middle
journaling on by default.

1188
00:49:58,856 --> 00:50:00,706 A:middle
This replaces rollback
journaling

1189
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1190
00:50:00,706 --> 00:50:02,276 A:middle
that was on by default before.

1191
00:50:02,886 --> 00:50:04,786 A:middle
This write-ahead
logging journaling is--

1192
00:50:04,926 --> 00:50:08,066 A:middle
has improved reliability,
concurrency, and performance

1193
00:50:08,066 --> 00:50:09,276 A:middle
so it's a good thing in general.

1194
00:50:09,716 --> 00:50:12,616 A:middle
So you can hear more about
core data changes and core data

1195
00:50:12,616 --> 00:50:16,836 A:middle
and iCloud as well tomorrow
morning in this talk,

1196
00:50:16,836 --> 00:50:17,966 A:middle
What's New in Core
Data and iCloud.

1197
00:50:18,866 --> 00:50:20,686 A:middle
There is also a talk
tomorrow at 2,

1198
00:50:20,966 --> 00:50:23,016 A:middle
core data performance
optimization and debugging.

1199
00:50:23,196 --> 00:50:30,736 A:middle
A new feature in objective C
for 10.9 and iOS7 is modules.

1200
00:50:31,386 --> 00:50:34,566 A:middle
Modules is a better way to
import a framework's interface.

1201
00:50:35,426 --> 00:50:38,436 A:middle
So instead of using pound
import that you're you know,

1202
00:50:38,696 --> 00:50:40,506 A:middle
used to love, it's been
around for a while.

1203
00:50:40,506 --> 00:50:44,596 A:middle
Cocoa/cocoa.h you can now
use at import of coco.

1204
00:50:45,486 --> 00:50:49,626 A:middle
What this does is it loads a
binary representation, however,

1205
00:50:49,626 --> 00:50:51,456 A:middle
I mean, just something
you could do before

1206
00:50:51,456 --> 00:50:53,506 A:middle
with pre-compiled headers,
but it's more flexible

1207
00:50:53,506 --> 00:50:56,346 A:middle
that pre-compiled headers
because you don't have to manage

1208
00:50:56,346 --> 00:50:58,086 A:middle
that list of pre-compiled
headers anymore.

1209
00:50:58,086 --> 00:50:59,746 A:middle
The system will take
care of it for you.

1210
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1211
00:51:00,626 --> 00:51:02,576 A:middle
This is also immune to effects

1212
00:51:02,576 --> 00:51:05,016 A:middle
of local macro definitions
you know,

1213
00:51:05,016 --> 00:51:08,406 A:middle
there's that C programmer
mistake of pound to find int

1214
00:51:08,536 --> 00:51:10,266 A:middle
to you know, short
or whatever you know.

1215
00:51:10,266 --> 00:51:12,206 A:middle
That will no longer be
an issue in this case

1216
00:51:12,206 --> 00:51:16,596 A:middle
because those macro definitions
do not take effect in interfaces

1217
00:51:16,596 --> 00:51:18,876 A:middle
that you've imported as modules.

1218
00:51:19,466 --> 00:51:21,686 A:middle
These are enabled for
new projects by default

1219
00:51:21,686 --> 00:51:24,606 A:middle
and you can also enable it for
your existing projects as well.

1220
00:51:25,206 --> 00:51:27,726 A:middle
So there'll be a lot
more coverage of modules

1221
00:51:27,726 --> 00:51:29,636 A:middle
in advances in objective C.

1222
00:51:29,636 --> 00:51:30,906 A:middle
I just want to mention,

1223
00:51:30,906 --> 00:51:33,116 A:middle
highlight of few new
frameworks we've added.

1224
00:51:33,426 --> 00:51:34,396 A:middle
One of them is MapKit.

1225
00:51:34,666 --> 00:51:35,856 A:middle
It was on iOS6.

1226
00:51:35,856 --> 00:51:39,136 A:middle
It's now available on 10.9.

1227
00:51:40,176 --> 00:51:42,476 A:middle
Sprite Kit, you heard
about Sprite Kit yesterday.

1228
00:51:42,476 --> 00:51:46,486 A:middle
It's a new framework for
doing games or applications

1229
00:51:46,486 --> 00:51:50,176 A:middle
with game-like animations
and physics needs and so on.

1230
00:51:50,826 --> 00:51:53,186 A:middle
And there's also AV
Kit which is used

1231
00:51:53,186 --> 00:51:55,006 A:middle
in conjunction with
AV foundation.

1232
00:51:55,286 --> 00:51:57,646 A:middle
It's you know, you
can replace usage

1233
00:51:57,646 --> 00:51:59,506 A:middle
of queue ticket in
your applications.

1234
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1235
00:52:00,296 --> 00:52:03,586 A:middle
There are talks for this, moving
to AV Kit and AV Foundations,

1236
00:52:03,586 --> 00:52:06,216 A:middle
introduction to Sprite Kit
and what's new in Map Kit.

1237
00:52:06,216 --> 00:52:08,226 A:middle
So I'm going to talk
a bit about Textkit.

1238
00:52:09,126 --> 00:52:11,316 A:middle
Textkit, you heard
about this yesterday

1239
00:52:11,316 --> 00:52:12,926 A:middle
in the State of the Union Talk.

1240
00:52:14,036 --> 00:52:17,786 A:middle
Textkit well, let me choose
Textkit by saying when you look

1241
00:52:17,786 --> 00:52:21,136 A:middle
at Cocoa Text on OS X,
you see NSTextView.

1242
00:52:21,886 --> 00:52:24,066 A:middle
However, if you make
any sophisticated use

1243
00:52:24,066 --> 00:52:26,956 A:middle
of the text system on OS X,
you know that's actually made

1244
00:52:26,956 --> 00:52:28,466 A:middle
up of these underlying classes

1245
00:52:28,736 --> 00:52:30,696 A:middle
which gives you a lot more
power and flexibility.

1246
00:52:31,026 --> 00:52:35,286 A:middle
When you look at Textkit on iOS,
which is a new feature in iOS7,

1247
00:52:35,286 --> 00:52:36,866 A:middle
if I didn't make that clear,

1248
00:52:37,336 --> 00:52:39,596 A:middle
you see that there is
the UITextView class

1249
00:52:39,726 --> 00:52:41,216 A:middle
which has existed
for a long time.

1250
00:52:41,536 --> 00:52:43,516 A:middle
However, if you look
underneath now,

1251
00:52:43,846 --> 00:52:46,226 A:middle
you'll see the same
set of classes.

1252
00:52:46,636 --> 00:52:48,266 A:middle
In addition, they have the same

1253
00:52:48,436 --> 00:52:50,306 A:middle
or very similar set
of APIs as well.

1254
00:52:50,606 --> 00:52:54,306 A:middle
So I'm mentioning this to you
because yeah, those of you

1255
00:52:54,306 --> 00:52:56,996 A:middle
who have a sophisticated
text need of applications

1256
00:52:56,996 --> 00:52:58,856 A:middle
with sophisticated
text users on OS X,

1257
00:52:59,086 --> 00:53:00,456 A:middle
you can now import
these applications

1258
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1259
00:53:00,456 --> 00:53:03,396 A:middle
to iOS with a lot more ease.

1260
00:53:04,116 --> 00:53:05,616 A:middle
So you can find out
more about Textkit

1261
00:53:05,616 --> 00:53:08,986 A:middle
in the two talks introducing
Textkit and advanced Textkit.

1262
00:53:08,986 --> 00:53:13,076 A:middle
OK so, as I'm running out of
time, I just want to throw

1263
00:53:13,216 --> 00:53:16,506 A:middle
up a list of some other
changes we have bunch

1264
00:53:16,506 --> 00:53:18,336 A:middle
of Table View outline
view improvements,

1265
00:53:18,496 --> 00:53:20,166 A:middle
we have layer-backed
new improvements.

1266
00:53:20,166 --> 00:53:22,546 A:middle
Again please look at the
release notes, read about these.

1267
00:53:22,986 --> 00:53:27,036 A:middle
NSSlider has some new APIs and
we got rid of some crusty ones.

1268
00:53:27,036 --> 00:53:28,146 A:middle
Some built-in services,

1269
00:53:28,146 --> 00:53:30,826 A:middle
additional built-in services
and NSSharingService.

1270
00:53:31,216 --> 00:53:33,086 A:middle
There's some NSCalendar
convenience APIs

1271
00:53:33,086 --> 00:53:35,496 A:middle
which make it easier to move
your code back and forth

1272
00:53:35,496 --> 00:53:37,336 A:middle
between UIColor and NSColor.

1273
00:53:38,066 --> 00:53:40,756 A:middle
We've-- all right, some
people have tried that

1274
00:53:40,756 --> 00:53:41,846 A:middle
and now it's even better.

1275
00:53:42,466 --> 00:53:44,176 A:middle
So we've deprecated some NSNib

1276
00:53:44,176 --> 00:53:46,166 A:middle
and NSBundle nib-loading
methods.

1277
00:53:46,166 --> 00:53:47,516 A:middle
And the new ones
we had introduced

1278
00:53:47,516 --> 00:53:49,656 A:middle
in 10.8 are the ones you
should move forward to.

1279
00:53:49,846 --> 00:53:53,606 A:middle
And in foundation, we have
some further NSURL improvements

1280
00:53:53,646 --> 00:53:54,636 A:middle
beyond the ones I've talked

1281
00:53:54,636 --> 00:53:57,636 A:middle
about including some built-in
character sets for URL handling.

1282
00:53:58,046 --> 00:54:01,976 A:middle
NS metadata APIs and foundation
level attribute names you no

1283
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1284
00:54:01,976 --> 00:54:04,016 A:middle
longer have to go
to CF level APIs

1285
00:54:04,016 --> 00:54:06,256 A:middle
to get your spotlight
attribute names.

1286
00:54:07,106 --> 00:54:12,186 A:middle
NSUser defaults suite--
whatever, I can't say that word.

1287
00:54:12,416 --> 00:54:14,986 A:middle
If you have a bunch of related
applications and they want

1288
00:54:14,986 --> 00:54:18,136 A:middle
to share defaults, these are the
APIs you would use, thank you.

1289
00:54:18,526 --> 00:54:22,666 A:middle
And then also NSScanner has
support for unsigned long long.

1290
00:54:22,666 --> 00:54:25,056 A:middle
So please refer to the
10.9 release notes.

1291
00:54:25,846 --> 00:54:28,726 A:middle
And now, I want to just put
a reminder of some features

1292
00:54:28,726 --> 00:54:30,506 A:middle
that have come and
I would have still.

1293
00:54:30,906 --> 00:54:32,156 A:middle
If you haven't taken advantage

1294
00:54:32,156 --> 00:54:34,326 A:middle
of these features
please consider doing so.

1295
00:54:34,326 --> 00:54:36,516 A:middle
Some of these have
been around since 10.7.

1296
00:54:36,516 --> 00:54:37,706 A:middle
In fact some earlier than that

1297
00:54:37,706 --> 00:54:39,256 A:middle
and some were introduced
in 10.8.

1298
00:54:39,666 --> 00:54:41,046 A:middle
But these are all great features

1299
00:54:41,046 --> 00:54:42,996 A:middle
that will make your
applications more powerful,

1300
00:54:42,996 --> 00:54:44,656 A:middle
more consistent,
more user-friendly.

1301
00:54:45,066 --> 00:54:48,636 A:middle
So please freeze frame
this on your VCRs at home

1302
00:54:48,636 --> 00:54:50,686 A:middle
and choose the features
you want to implement.

1303
00:54:51,266 --> 00:54:52,616 A:middle
We have a lot of
related sessions.

1304
00:54:53,026 --> 00:54:55,766 A:middle
I'm not going to go through
them, just highlight one here.

1305
00:54:55,766 --> 00:54:58,306 A:middle
I've already put these up
in other slides but one

1306
00:54:58,306 --> 00:55:00,516 A:middle
that I haven't talked about
is if you have an iOS App,

1307
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1308
00:55:00,516 --> 00:55:01,946 A:middle
you're thinking of
bring it to OS X.

1309
00:55:02,206 --> 00:55:04,716 A:middle
We have session Thursday
morning, "Bringing your iOS Apps

1310
00:55:04,716 --> 00:55:06,936 A:middle
to OS X" you might
want to go to that.

1311
00:55:07,436 --> 00:55:10,786 A:middle
And with that, Jake Behrens
is our evangelist if you need

1312
00:55:10,786 --> 00:55:12,186 A:middle
to talk to an evangelist.

1313
00:55:12,706 --> 00:55:14,476 A:middle
And that's it, thank
you very much.

1314
00:55:14,976 --> 00:55:22,560 A:middle
[Applause]

1315
