WEBVTT

00:00:00.506 --> 00:00:10.776 A:middle
[ Silence ]

00:00:11.276 --> 00:00:12.046 A:middle
&gt;&gt; Hello, everyone.

00:00:12.786 --> 00:00:13.556 A:middle
I'm Tim Hatcher.

00:00:14.606 --> 00:00:15.186 A:middle
Good morning.

00:00:15.256 --> 00:00:15.946 A:middle
Thanks for coming.

00:00:16.516 --> 00:00:20.516 A:middle
[ Applause ]

00:00:21.016 --> 00:00:23.356 A:middle
So I'm going to talk to
you about Web Inspector

00:00:23.356 --> 00:00:26.046 A:middle
and Modern JavaScript.

00:00:27.626 --> 00:00:30.756 A:middle
But first, I'm going to just
talk about Modern JavaScript.

00:00:32.176 --> 00:00:34.816 A:middle
So, what exactly is
Modern JavaScript?

00:00:36.066 --> 00:00:38.936 A:middle
Well, let's go through some
of the history of JavaScript

00:00:39.586 --> 00:00:42.626 A:middle
which is also known
as ECMAScript

00:00:43.026 --> 00:00:44.226 A:middle
as some of you may know.

00:00:45.096 --> 00:00:46.726 A:middle
But it's had a long history.

00:00:46.726 --> 00:00:48.686 A:middle
It's been around since the '90s.

00:00:49.166 --> 00:00:53.106 A:middle
And it had a lot of
momentum back in the '90s

00:00:53.106 --> 00:00:55.846 A:middle
when it was first part
of the browser wars,

00:00:56.916 --> 00:00:59.526 A:middle
but it kind of sputtered
and stalled.

00:00:59.596 --> 00:01:02.536 A:middle
But JavaScript is alive
and well nowadays.

00:01:02.786 --> 00:01:06.946 A:middle
Everyone is using it from web
apps to server applications,

00:01:07.866 --> 00:01:13.426 A:middle
and some of the standards bodies
have been battling over some

00:01:13.426 --> 00:01:17.086 A:middle
of what should be included in
the next version of JavaScript.

00:01:18.506 --> 00:01:24.736 A:middle
And I'm happy to say that they
finally started coming together

00:01:24.736 --> 00:01:30.126 A:middle
and started releasing what
is known as ECMAScript 6.

00:01:31.776 --> 00:01:36.626 A:middle
And the sixth edition
brings a lot of cool things

00:01:36.626 --> 00:01:39.246 A:middle
and it's really just JavaScript

00:01:39.246 --> 00:01:41.786 A:middle
and that's how I'm
going to refer to it.

00:01:43.076 --> 00:01:47.786 A:middle
In this modern JavaScript world,
there's a lot of great things.

00:01:47.786 --> 00:01:49.146 A:middle
And this is just some of them.

00:01:49.246 --> 00:01:52.826 A:middle
There's some destructuring,
maps, promises.

00:01:53.886 --> 00:01:55.866 A:middle
And let's go over some
of these new features

00:01:55.866 --> 00:02:03.936 A:middle
that are also now available
in iOS 8 and OS X Yosemite.

00:02:04.046 --> 00:02:09.306 A:middle
So when they're available, I
mean, you can use them in Safari

00:02:09.306 --> 00:02:13.806 A:middle
or your iOS applications or
Mac applications and not just

00:02:13.806 --> 00:02:16.666 A:middle
in web views but also a
JavaScriptCore context.

00:02:18.066 --> 00:02:22.846 A:middle
So let's talk over
some of these.

00:02:23.026 --> 00:02:25.036 A:middle
Let's first talk about
some math additions.

00:02:26.056 --> 00:02:29.966 A:middle
JavaScript has had a math object
pretty much since day one.

00:02:31.256 --> 00:02:38.026 A:middle
But JavaScript nowadays is super
fast, with the modern LLVM JIT

00:02:38.026 --> 00:02:41.306 A:middle
that we have in iOS
8 and OS X Yosemite.

00:02:42.136 --> 00:02:45.956 A:middle
You need these super fast math
functions to do complex things

00:02:45.956 --> 00:02:50.366 A:middle
like WebGL or complex
scientific calculations.

00:02:51.846 --> 00:02:56.146 A:middle
And most of you will recognize
a lot of things in this list

00:02:56.146 --> 00:03:00.056 A:middle
that you've used in the past
for your own applications.

00:03:00.056 --> 00:03:02.716 A:middle
And they're now available
in Modern JavaScript.

00:03:03.146 --> 00:03:06.116 A:middle
So that's the math additions.

00:03:07.366 --> 00:03:11.016 A:middle
Now let's talk about
maps and sets.

00:03:11.266 --> 00:03:13.626 A:middle
So, what do I mean
by maps and sets?

00:03:14.826 --> 00:03:19.196 A:middle
Well, in JavaScript, you
might think of this as a map.

00:03:19.966 --> 00:03:23.366 A:middle
This is something that you
create as a generic object

00:03:24.156 --> 00:03:26.236 A:middle
and it's really just
a property bag.

00:03:26.236 --> 00:03:28.486 A:middle
You can throw whatever
you want on this object.

00:03:29.116 --> 00:03:34.266 A:middle
You can set simple strings and
any object can be the value.

00:03:34.776 --> 00:03:38.026 A:middle
And you can remove
things from that map.

00:03:39.006 --> 00:03:41.676 A:middle
Well, these maps have
some limitations.

00:03:41.676 --> 00:03:44.876 A:middle
There's string coercion when
you're-when it comes to the key.

00:03:45.496 --> 00:03:48.666 A:middle
Everything that is the key needs
to be coerced into a string,

00:03:48.666 --> 00:03:50.746 A:middle
so it's not going to give
you exactly what you want.

00:03:51.136 --> 00:03:52.216 A:middle
If you want to use it

00:03:52.216 --> 00:03:55.706 A:middle
for a property bag
that's tracking some node,

00:03:56.086 --> 00:03:59.526 A:middle
it won't work.

00:03:59.736 --> 00:04:03.196 A:middle
Well in Modern JavaScript,
there's now a map object.

00:04:03.586 --> 00:04:05.756 A:middle
And it does pretty
much the same thing

00:04:05.756 --> 00:04:08.276 A:middle
that you would do
with an object.

00:04:08.606 --> 00:04:11.366 A:middle
It has a little bit
different syntax and API,

00:04:12.066 --> 00:04:13.826 A:middle
but it's pretty much
all the same.

00:04:13.926 --> 00:04:15.786 A:middle
The most powerful
thing you can do

00:04:16.126 --> 00:04:20.676 A:middle
with the map object is you
can use any value as the key.

00:04:21.516 --> 00:04:25.696 A:middle
And a lot of people will
use this to track DOM nodes

00:04:25.696 --> 00:04:28.986 A:middle
that they have in the page,
adding some additional data

00:04:29.286 --> 00:04:33.596 A:middle
on the side instead of tacking
it onto the DOM node itself.

00:04:34.076 --> 00:04:37.246 A:middle
So it really allows you
to compartmentalize data

00:04:37.246 --> 00:04:38.676 A:middle
that you're tracking
on the page.

00:04:39.196 --> 00:04:42.226 A:middle
But there are some
issues with that.

00:04:43.086 --> 00:04:45.746 A:middle
If you add it to the
map, that map is going

00:04:45.746 --> 00:04:47.266 A:middle
to hold a hard reference to it

00:04:47.446 --> 00:04:50.266 A:middle
and that's why Modern
JavaScript has a WeakMap.

00:04:51.186 --> 00:04:56.436 A:middle
And that means whenever
the key disappears

00:04:56.436 --> 00:04:59.466 A:middle
or gets garbage collected,
it's also removed from the map.

00:05:00.036 --> 00:05:04.136 A:middle
So in this case, I have a
node in my WeakMap and when

00:05:04.566 --> 00:05:09.106 A:middle
that node is removed by doing
a remove call or a removeChild

00:05:09.546 --> 00:05:12.586 A:middle
in that page, it would
no longer be in the map

00:05:12.586 --> 00:05:14.126 A:middle
and the data that's associated

00:05:14.126 --> 00:05:16.106 A:middle
with it will also get
garbage collected.

00:05:16.556 --> 00:05:20.716 A:middle
So that's maps and sets.

00:05:20.716 --> 00:05:24.006 A:middle
And there's also a set
object that I didn't cover

00:05:24.006 --> 00:05:25.376 A:middle
but it's pretty straightforward.

00:05:25.376 --> 00:05:29.446 A:middle
It only allows the key
to be added to the set.

00:05:31.096 --> 00:05:32.836 A:middle
So now let's talk
about Destructuring.

00:05:35.636 --> 00:05:38.986 A:middle
If you got excited about some
of the new features in Swift,

00:05:39.366 --> 00:05:43.876 A:middle
this will be right up your
alley as far as JavaScript goes.

00:05:44.666 --> 00:05:49.016 A:middle
It allows you to return like
multiple objects in an array.

00:05:49.146 --> 00:05:53.056 A:middle
In this case, I have an
array of two numbers here.

00:05:53.786 --> 00:05:56.006 A:middle
And traditionally, I
would have to collect

00:05:56.006 --> 00:05:57.286 A:middle
that in a result object.

00:05:58.296 --> 00:06:03.326 A:middle
And I would have to break
each piece off from that array

00:06:03.326 --> 00:06:06.506 A:middle
to use it in a separate
variable that made more sense

00:06:06.626 --> 00:06:09.656 A:middle
in the scope I was using it in.

00:06:09.876 --> 00:06:14.406 A:middle
But with destructuring, we can
break that down into one line.

00:06:14.696 --> 00:06:18.866 A:middle
Now my function that's
returning two results

00:06:19.326 --> 00:06:21.086 A:middle
that maybe didn't
make sense as array,

00:06:21.086 --> 00:06:25.326 A:middle
but it was what I could use to
return multiple things at once,

00:06:25.866 --> 00:06:29.046 A:middle
I can now save those
into the alpha

00:06:29.046 --> 00:06:32.846 A:middle
and beta variables
right there in one line.

00:06:33.936 --> 00:06:38.326 A:middle
And this might look like an
array but when it's on-when it's

00:06:38.326 --> 00:06:43.326 A:middle
on the left side, we're dealing
with the destructuring syntax.

00:06:45.366 --> 00:06:47.156 A:middle
And it's not just for arrays.

00:06:48.186 --> 00:06:49.646 A:middle
You can destructure objects.

00:06:50.376 --> 00:06:53.306 A:middle
And this is when it becomes
more of a pattern matching.

00:06:53.676 --> 00:06:56.946 A:middle
So in my example here,
say I have a point object.

00:06:58.076 --> 00:07:01.326 A:middle
And normally, I would have
to save it off into a result

00:07:01.906 --> 00:07:03.786 A:middle
and break each piece
out if I wanted

00:07:03.786 --> 00:07:08.056 A:middle
to use some more concise
syntax for those variables.

00:07:08.606 --> 00:07:14.126 A:middle
But now, I have object
destructuring in this case.

00:07:15.096 --> 00:07:18.716 A:middle
And if I'd want a different
variable name than the property,

00:07:19.336 --> 00:07:23.126 A:middle
I can separate them by colons,
so x is the value that's coming

00:07:23.126 --> 00:07:25.266 A:middle
out of the object
pattern matching

00:07:25.836 --> 00:07:29.916 A:middle
and my x is the variable name
in the local scope in this case.

00:07:30.416 --> 00:07:32.746 A:middle
But if I want to
use the same name,

00:07:33.176 --> 00:07:36.316 A:middle
I could omit the second
piece and just use y.

00:07:36.316 --> 00:07:39.186 A:middle
And y is now a local
variable in this scope.

00:07:39.716 --> 00:07:44.376 A:middle
And you can do some
really fancy things

00:07:44.376 --> 00:07:45.556 A:middle
that I don't examples for.

00:07:45.556 --> 00:07:49.266 A:middle
But you can deeply nest these
pattern matches and objects

00:07:49.266 --> 00:07:50.996 A:middle
with arrays and vice versa.

00:07:50.996 --> 00:07:53.236 A:middle
So you can really
break apart your object

00:07:53.236 --> 00:07:55.666 A:middle
if that-if that's what
works for your application.

00:07:58.046 --> 00:07:59.276 A:middle
So that's destructuring.

00:07:59.686 --> 00:08:04.306 A:middle
Now let's talk about what
we call the Spread Operator.

00:08:05.356 --> 00:08:09.076 A:middle
And this is something that is
borrowed from many languages,

00:08:09.786 --> 00:08:15.756 A:middle
but it comes in very, very
handy and I love using it.

00:08:15.756 --> 00:08:20.176 A:middle
It's-It really takes away
some of the common idioms

00:08:20.176 --> 00:08:24.916 A:middle
that you would do before if
you're building up arguments

00:08:24.916 --> 00:08:27.936 A:middle
that you want to call in
a function as an array,

00:08:28.266 --> 00:08:32.106 A:middle
before you would have to
resort to .call or .apply

00:08:32.846 --> 00:08:35.216 A:middle
and pass in those arguments.

00:08:36.306 --> 00:08:39.616 A:middle
But now, with the Spread
Operator which is represented

00:08:39.616 --> 00:08:42.666 A:middle
by three dots prefixing
an object.

00:08:43.836 --> 00:08:45.826 A:middle
And in this case
it's-it's an array.

00:08:46.726 --> 00:08:50.136 A:middle
But secretly, the Spread
Operator works on anything.

00:08:50.586 --> 00:08:52.056 A:middle
It even works on maps.

00:08:52.176 --> 00:08:55.526 A:middle
And it will break it out
in key value sequences.

00:08:57.276 --> 00:09:00.856 A:middle
So, anything that's has support
for iteration, which I'll talk

00:09:00.856 --> 00:09:02.586 A:middle
about in a bit, can be spread.

00:09:02.586 --> 00:09:05.706 A:middle
And this will spread it out
and call my function foo

00:09:06.116 --> 00:09:10.676 A:middle
with the three arguments
that are in the array.

00:09:10.746 --> 00:09:13.136 A:middle
One thing that you could
never do in JavaScript

00:09:13.496 --> 00:09:17.196 A:middle
and you can only do now with
the Spread Operator is called a

00:09:17.196 --> 00:09:22.136 A:middle
constructor with an array
input or a map input.

00:09:22.896 --> 00:09:27.166 A:middle
You can now take your parts
of a date and spread them

00:09:27.166 --> 00:09:30.076 A:middle
across the date constructor
instead of having

00:09:30.076 --> 00:09:35.406 A:middle
to manually do 0, 1, 2 and
break it out like that.

00:09:39.196 --> 00:09:42.066 A:middle
The Spread Operator
is also useful

00:09:42.066 --> 00:09:44.726 A:middle
in the construction
of array literals.

00:09:45.226 --> 00:09:47.936 A:middle
Say you have something
that's pretty repetitious.

00:09:47.986 --> 00:09:51.066 A:middle
You want to have a separate
form and a combined form.

00:09:51.336 --> 00:09:55.136 A:middle
Normally you have to either
repeat the data or push and pop

00:09:55.136 --> 00:09:58.636 A:middle
and add everything,
concatenate everything together.

00:09:59.886 --> 00:10:04.226 A:middle
But with the Spread Operator
you can just spread those other

00:10:04.226 --> 00:10:07.386 A:middle
arrays right out into the new
array that you're constructing.

00:10:07.836 --> 00:10:12.216 A:middle
So this is a handy way to do
pretty complex concatenation.

00:10:13.036 --> 00:10:15.056 A:middle
And you can understand
what it's doing

00:10:15.516 --> 00:10:18.956 A:middle
without having the
parse different calls

00:10:18.956 --> 00:10:20.606 A:middle
to different array functions.

00:10:21.156 --> 00:10:24.516 A:middle
So that's the Spread Operator.

00:10:24.516 --> 00:10:27.546 A:middle
Now let's talk about
something new.

00:10:27.546 --> 00:10:32.226 A:middle
A new For loop that's
available in JavaScript.

00:10:32.226 --> 00:10:35.826 A:middle
JavaScript has traditional
loops, which you can iterate

00:10:35.826 --> 00:10:39.116 A:middle
over an array by doing
an index and a length.

00:10:39.246 --> 00:10:43.136 A:middle
And you still might need
to use this if you care

00:10:43.136 --> 00:10:44.716 A:middle
about the index or the length.

00:10:44.846 --> 00:10:49.166 A:middle
And you're doing some complex
operation based on those.

00:10:49.696 --> 00:10:58.346 A:middle
Some people have avoided this
syntax because it's ugly.

00:10:58.346 --> 00:11:02.596 A:middle
And they use something
for-called forEach on an array

00:11:03.016 --> 00:11:05.876 A:middle
that lets you iterate
over individual items

00:11:05.876 --> 00:11:09.276 A:middle
and you handily get
the item right there

00:11:09.276 --> 00:11:10.156 A:middle
that you can work with.

00:11:10.866 --> 00:11:12.486 A:middle
But this creates a closure.

00:11:12.756 --> 00:11:16.786 A:middle
It does a lot of complex
things that you might not want

00:11:16.786 --> 00:11:18.266 A:middle
to deal with overhead-wise.

00:11:20.356 --> 00:11:23.926 A:middle
Well, with the new For loop
that's in modern JavaScript,

00:11:25.226 --> 00:11:28.536 A:middle
this is all you have to write
to iterate over an array.

00:11:29.466 --> 00:11:33.106 A:middle
And this will iterate over
every item in the array

00:11:33.866 --> 00:11:35.496 A:middle
if you break early,
it will stop.

00:11:35.696 --> 00:11:37.566 A:middle
But it starts at the first item.

00:11:37.996 --> 00:11:41.176 A:middle
But it's not just for arrays.

00:11:41.336 --> 00:11:43.946 A:middle
Say you have a set, you
can iterate over that set.

00:11:44.466 --> 00:11:49.496 A:middle
And if you have a map you can
iterate over the key and value.

00:11:49.746 --> 00:11:51.626 A:middle
Very similar to what
you can do in Swift.

00:11:52.846 --> 00:11:57.096 A:middle
So now you have the key in value
right there to process both

00:11:57.096 --> 00:11:59.456 A:middle
at the same time instead
of doing extra lines

00:11:59.456 --> 00:12:01.856 A:middle
of code using the for-in loop

00:12:02.276 --> 00:12:03.526 A:middle
which is available
on JavaScript.

00:12:03.526 --> 00:12:05.686 A:middle
Now you can do it
right here with for-of.

00:12:07.006 --> 00:12:09.496 A:middle
And for-of is the
only way to iterate

00:12:10.016 --> 00:12:12.806 A:middle
over the keys in values in maps.

00:12:13.196 --> 00:12:15.126 A:middle
For-in will not do
what you expect

00:12:15.536 --> 00:12:19.646 A:middle
and that-for reasons I'm
not going to go into.

00:12:19.826 --> 00:12:22.136 A:middle
But maybe you want to
iterate over a WeakMap.

00:12:23.196 --> 00:12:24.526 A:middle
That's not supported.

00:12:25.366 --> 00:12:29.276 A:middle
For reasons that involve
the garbage collection,

00:12:29.926 --> 00:12:32.916 A:middle
you cannot iterate over the
keys and values of the WeakMap

00:12:33.296 --> 00:12:40.376 A:middle
and this is part of the spec.
So, that's for-of loops.

00:12:42.336 --> 00:12:46.836 A:middle
Now, one of the new
things in modern JavaScript

00:12:46.836 --> 00:12:49.486 A:middle
that I'm really excited
about is Promises.

00:12:50.846 --> 00:12:54.136 A:middle
And it solves a longstanding
problem of JavaScript.

00:12:54.526 --> 00:12:56.206 A:middle
Now that JavaScript
is moving more

00:12:56.206 --> 00:13:00.186 A:middle
and more asynchronous everything
is asynchronous, you don't want

00:13:00.186 --> 00:13:01.726 A:middle
to be blocking your application.

00:13:02.866 --> 00:13:08.086 A:middle
And say you have a function that
you've written that loads a URL,

00:13:08.456 --> 00:13:12.396 A:middle
maybe it does an XHR behind
the scenes for you to wrap

00:13:12.396 --> 00:13:14.996 A:middle
up all the different
browser incompatibilities

00:13:14.996 --> 00:13:15.586 A:middle
that are out there.

00:13:16.366 --> 00:13:20.506 A:middle
So this will load a URL
and that's all it'll do.

00:13:20.906 --> 00:13:22.026 A:middle
You can't get the data.

00:13:22.706 --> 00:13:26.456 A:middle
To get the data, you might be
inclined to do a return result

00:13:26.456 --> 00:13:28.876 A:middle
that gives you the
data that was loaded.

00:13:29.486 --> 00:13:31.076 A:middle
But this is synchronous.

00:13:31.176 --> 00:13:34.316 A:middle
You can't get away with
this in a shipping product

00:13:34.776 --> 00:13:37.196 A:middle
without blocking
your user interface.

00:13:39.136 --> 00:13:42.246 A:middle
So, you have to resort
to a callback function.

00:13:42.246 --> 00:13:44.976 A:middle
And JavaScript makes
this real easy.

00:13:45.526 --> 00:13:47.766 A:middle
I do this everyday
in JavaScript:

00:13:48.086 --> 00:13:49.346 A:middle
pass in a callback function.

00:13:49.896 --> 00:13:53.876 A:middle
And it works and it's very
usable and it's very handy.

00:13:55.696 --> 00:14:00.536 A:middle
But when it gets deeply
nested and you're passing

00:14:00.536 --> 00:14:01.986 A:middle
in multiple information

00:14:02.636 --> 00:14:05.706 A:middle
and it just gets confusing
and hard to follow.

00:14:05.706 --> 00:14:07.676 A:middle
You have all these load
calls in this case.

00:14:08.796 --> 00:14:11.166 A:middle
Which one is handling
which information?

00:14:11.726 --> 00:14:14.356 A:middle
Well, this is what
Promises solved.

00:14:15.606 --> 00:14:17.996 A:middle
With Promises you can
write something like this

00:14:19.276 --> 00:14:22.446 A:middle
where the first load
returns a promise.

00:14:23.696 --> 00:14:25.696 A:middle
And immediately on
returning that promise,

00:14:25.696 --> 00:14:27.376 A:middle
I can call the .then function.

00:14:27.596 --> 00:14:29.526 A:middle
And that's pretty much
the only API you need

00:14:29.526 --> 00:14:31.226 A:middle
to be concerned about
with Promises.

00:14:32.336 --> 00:14:35.256 A:middle
And you can pass a call
back to that .then function

00:14:35.696 --> 00:14:39.006 A:middle
which will get called when
that promise is fulfilled.

00:14:40.516 --> 00:14:45.426 A:middle
And that callback can
return another promise.

00:14:46.386 --> 00:14:47.796 A:middle
And this where it's magical,

00:14:48.226 --> 00:14:51.396 A:middle
you can chain-keep
chaining along that.

00:14:51.756 --> 00:14:56.226 A:middle
So these callbacks are in line
here just for clarity for you.

00:14:56.696 --> 00:14:59.586 A:middle
But they might be
named functions

00:14:59.586 --> 00:15:00.696 A:middle
that you have somewhere else.

00:15:01.526 --> 00:15:06.356 A:middle
And it makes it very clear that
this is the order of operations.

00:15:08.696 --> 00:15:10.246 A:middle
So that's Promises.

00:15:11.196 --> 00:15:17.006 A:middle
And taking it to the next level
you can then use another API,

00:15:17.006 --> 00:15:20.276 A:middle
a global API, Promise.all.

00:15:20.956 --> 00:15:25.656 A:middle
And what this does is you can
pass in an array of promises.

00:15:26.686 --> 00:15:30.826 A:middle
And it will return a new
promise and that new promise

00:15:31.056 --> 00:15:36.566 A:middle
that it returns is dependent on
all of those promises finishing.

00:15:37.496 --> 00:15:39.016 A:middle
If any of them error out,

00:15:39.706 --> 00:15:42.666 A:middle
your "then" object can
get past the callback

00:15:42.666 --> 00:15:44.076 A:middle
that gets called for errors.

00:15:44.446 --> 00:15:48.326 A:middle
But in this case, "done"
will get called when only all

00:15:48.326 --> 00:15:52.096 A:middle
of those promises
succeed or fulfilled.

00:15:54.616 --> 00:15:56.656 A:middle
But maybe you only care
about the first one.

00:15:56.896 --> 00:15:58.196 A:middle
You're loading a bunch of images

00:15:58.196 --> 00:16:00.116 A:middle
and once you got one
image you're ready to go.

00:16:00.896 --> 00:16:02.866 A:middle
That's where Promise.race
comes in.

00:16:02.996 --> 00:16:08.066 A:middle
It will call your
callback when the first one

00:16:08.066 --> 00:16:09.596 A:middle
of those promises is fulfilled.

00:16:10.206 --> 00:16:14.146 A:middle
So that's a quick
glance of Promises.

00:16:14.146 --> 00:16:19.236 A:middle
So that pretty much wraps it
up with Modern JavaScript,

00:16:19.236 --> 00:16:21.606 A:middle
at least the parts that
we've already implemented

00:16:21.966 --> 00:16:24.136 A:middle
and decided were
ready for consumption.

00:16:24.546 --> 00:16:26.006 A:middle
There's a lot that's being done

00:16:26.006 --> 00:16:29.136 A:middle
in ECMAScript 6 that
is not ready.

00:16:29.326 --> 00:16:31.266 A:middle
And it's going to be
coming down the pipeline.

00:16:31.766 --> 00:16:34.246 A:middle
But these pieces we feel
that you're ready to use

00:16:34.246 --> 00:16:40.396 A:middle
in your application, in
browsers that support them.

00:16:41.716 --> 00:16:43.746 A:middle
So now let's talk about
the Web Inspector.

00:16:46.066 --> 00:16:48.656 A:middle
So if you're not familiar
with the Web Inspector,

00:16:50.006 --> 00:16:51.236 A:middle
this is what it looks like.

00:16:52.816 --> 00:16:56.516 A:middle
And we've had this UI for a
while but we've done a lot.

00:16:56.516 --> 00:16:58.026 A:middle
We've fixed a lot of bugs.

00:16:58.026 --> 00:17:00.436 A:middle
We've added a lot of features.

00:17:01.006 --> 00:17:04.296 A:middle
But the main thing we've done
this year is make the Web

00:17:04.296 --> 00:17:06.526 A:middle
Inspector available
in more places.

00:17:07.356 --> 00:17:10.326 A:middle
We've listened to your
feedback and you want to be able

00:17:10.326 --> 00:17:12.346 A:middle
to inspect your Mac application.

00:17:12.346 --> 00:17:15.076 A:middle
You want to be able to inspect
your JavaScriptCore context.

00:17:15.616 --> 00:17:20.466 A:middle
And that's exactly what you can
do with iOS 8 and OS X Yosemite.

00:17:22.036 --> 00:17:29.056 A:middle
So with Safari, you've been
able to inspect your iOS apps

00:17:29.176 --> 00:17:32.466 A:middle
and iOS Safari by tethering
up to your computer.

00:17:33.836 --> 00:17:43.276 A:middle
But now you can inspect your
Mac application and right there

00:17:43.366 --> 00:17:46.116 A:middle
from Safari see a list
of your Mac applications.

00:17:46.386 --> 00:17:47.446 A:middle
So what's that look like?

00:17:49.086 --> 00:17:51.416 A:middle
But first, like I said, you want

00:17:51.416 --> 00:17:53.536 A:middle
to inspect your JavaScriptCore
context.

00:17:54.496 --> 00:17:56.826 A:middle
But Web Inspector is
all about the web.

00:17:57.986 --> 00:18:01.506 A:middle
And it's only been able to work
with WebKit up until this point.

00:18:02.306 --> 00:18:04.236 A:middle
But now Web Inspector
can connect

00:18:04.536 --> 00:18:06.826 A:middle
to your JavaScriptCore-based
applications.

00:18:07.426 --> 00:18:09.336 A:middle
So even if you're
not using a web view

00:18:09.886 --> 00:18:13.156 A:middle
but you're using JavaScriptCore
for some logic in your game,

00:18:13.776 --> 00:18:16.796 A:middle
you can now debug
that JavaScript right

00:18:16.796 --> 00:18:19.306 A:middle
in the Web Inspector
and it's really great.

00:18:19.866 --> 00:18:21.776 A:middle
So let's-let's show
you what it looks like.

00:18:22.896 --> 00:18:29.006 A:middle
So, Mac App inspection, like I
said, will show up right next

00:18:29.006 --> 00:18:31.036 A:middle
to your iOS devices
in the Develop menu.

00:18:32.086 --> 00:18:36.626 A:middle
In this case, I have two Mac
Apps and the second one here,

00:18:36.806 --> 00:18:39.486 A:middle
JSPong, is a JavaScriptCore app.

00:18:39.816 --> 00:18:41.126 A:middle
The first one is a web view

00:18:41.496 --> 00:18:43.016 A:middle
but they're right
there side by side.

00:18:43.576 --> 00:18:44.776 A:middle
They're first class citizens.

00:18:45.436 --> 00:18:48.786 A:middle
And like I said, you
can also still connect

00:18:48.786 --> 00:18:51.316 A:middle
to your iOS applications
and iOS Safari

00:18:51.916 --> 00:18:53.296 A:middle
from the same Develop menu.

00:18:53.836 --> 00:18:58.956 A:middle
But for Mac App inspection
we require you

00:18:58.956 --> 00:19:01.416 A:middle
to add an entitlement
to your app.

00:19:02.666 --> 00:19:05.586 A:middle
You don't want anyone else
debugging your JavaScript

00:19:05.586 --> 00:19:08.106 A:middle
context or stealing
your JavaScript code

00:19:08.106 --> 00:19:10.616 A:middle
from your Mac Application
that you've worked so hard on.

00:19:11.286 --> 00:19:15.526 A:middle
So we require you to have this
entitlement on your applications

00:19:15.526 --> 00:19:17.036 A:middle
that you're developing locally.

00:19:18.096 --> 00:19:21.696 A:middle
And it's very simple to do
and I'll give you a demo

00:19:21.696 --> 00:19:23.926 A:middle
of it here in a little bit.

00:19:23.926 --> 00:19:25.846 A:middle
But what about JavaScriptCore
inspection?

00:19:26.376 --> 00:19:28.696 A:middle
What's that look like?

00:19:28.966 --> 00:19:32.386 A:middle
Well, it looks just
like the Web Inspector.

00:19:32.916 --> 00:19:35.706 A:middle
This is the same Web Inspector
that you saw a little bit ago.

00:19:36.046 --> 00:19:37.606 A:middle
The other one was
for the web view.

00:19:38.226 --> 00:19:39.966 A:middle
This one is for JavaScriptCore
context.

00:19:40.526 --> 00:19:43.806 A:middle
There's a couple of buttons that
are missing that don't apply

00:19:43.806 --> 00:19:45.306 A:middle
to JavaScriptCore context like,

00:19:45.306 --> 00:19:47.806 A:middle
styles and the DOM
and things like that.

00:19:48.366 --> 00:19:51.616 A:middle
But for the most part
it's everything you need

00:19:51.616 --> 00:19:53.946 A:middle
to debug your JavaScriptCore
application.

00:19:54.456 --> 00:19:58.426 A:middle
And you have the full console.

00:19:58.556 --> 00:20:02.846 A:middle
You can do a REPL, evaluate
JavaScript or see console.logs.

00:20:03.246 --> 00:20:07.476 A:middle
Console.log is now available in
your JavaScriptCore application.

00:20:08.066 --> 00:20:11.036 A:middle
So if you have your own log
function you can now abandon it

00:20:11.036 --> 00:20:14.386 A:middle
and start using console.log
and get all the great benefits

00:20:14.386 --> 00:20:16.126 A:middle
of the Web Inspector's
Log functions.

00:20:16.746 --> 00:20:20.626 A:middle
But if you don't do anything,

00:20:20.846 --> 00:20:23.106 A:middle
the console is pretty much
all you have available.

00:20:23.856 --> 00:20:24.746 A:middle
And I'll tell you why.

00:20:25.416 --> 00:20:27.676 A:middle
We don't know what
you're evaluating

00:20:27.676 --> 00:20:29.496 A:middle
in your JavaScriptCore context.

00:20:30.166 --> 00:20:32.036 A:middle
If you're evaluating
large scripts,

00:20:32.096 --> 00:20:33.866 A:middle
those are something you
probably want to debug

00:20:33.866 --> 00:20:38.246 A:middle
but you could be evaluating
something every 200 milliseconds

00:20:38.566 --> 00:20:40.966 A:middle
and that would quickly
pollute the sidebar here.

00:20:41.486 --> 00:20:43.936 A:middle
So you-any script
that you want to debug

00:20:43.936 --> 00:20:48.646 A:middle
in the Web Inspector we will
need you to supply a URL

00:20:48.646 --> 00:20:50.906 A:middle
or just a plain name
for that script.

00:20:52.416 --> 00:20:55.406 A:middle
And we've given you a
couple new APIs for this.

00:20:56.256 --> 00:20:59.496 A:middle
There has always been the
EvaluateScript functions.

00:21:00.706 --> 00:21:03.726 A:middle
We now have a new Objective-C
one that takes a sourceURL,

00:21:04.546 --> 00:21:06.826 A:middle
and this URL can be a file URL.

00:21:06.826 --> 00:21:07.736 A:middle
It can be any URL.

00:21:07.736 --> 00:21:12.176 A:middle
The Web Inspector really
doesn't take it other

00:21:12.176 --> 00:21:14.146 A:middle
than to get the name
at this point.

00:21:14.756 --> 00:21:17.616 A:middle
But if it's a file URL, it will
have a little bit extra benefit

00:21:17.616 --> 00:21:19.766 A:middle
and I'll talk to you
about that a little bit,

00:21:20.356 --> 00:21:24.126 A:middle
but JSEvaluateScript has
always supported the sourceURL

00:21:24.426 --> 00:21:26.216 A:middle
but a lot of people
just pass null to it.

00:21:26.636 --> 00:21:28.326 A:middle
So if you're using
the old C API,

00:21:29.326 --> 00:21:32.146 A:middle
make sure to start passing
a sourceURL for things

00:21:32.146 --> 00:21:34.356 A:middle
that you want to debug
that way they will show

00:21:34.356 --> 00:21:35.306 A:middle
up in the Web Inspector.

00:21:36.386 --> 00:21:38.406 A:middle
And that's for scripts.

00:21:38.406 --> 00:21:39.856 A:middle
But what about your context?

00:21:39.856 --> 00:21:42.716 A:middle
Identifying a context is pretty
difficult with JavaScript.

00:21:42.716 --> 00:21:44.626 A:middle
We don't know what it is.

00:21:45.446 --> 00:21:48.526 A:middle
By default it will just say
JSContext in the Develop menu.

00:21:48.906 --> 00:21:51.586 A:middle
But if you have a multiple
context, you don't want

00:21:51.586 --> 00:21:54.736 A:middle
to see a list that says
JSContext, JSContext, JSContext,

00:21:55.336 --> 00:21:57.536 A:middle
you want to identify those.

00:21:58.466 --> 00:22:00.946 A:middle
And as the developer, you
should know what you're using

00:22:00.946 --> 00:22:03.776 A:middle
that context for and
we provide this new API

00:22:03.776 --> 00:22:06.046 A:middle
that allows you to
name your context.

00:22:06.376 --> 00:22:08.426 A:middle
And the name is only
used for debugging.

00:22:08.426 --> 00:22:10.436 A:middle
It will only show up in
Safari's Develop menu.

00:22:11.026 --> 00:22:14.126 A:middle
So let's just give
a demo of this.

00:22:14.596 --> 00:22:19.306 A:middle
So I have a sample application
that we released a while ago

00:22:19.526 --> 00:22:22.596 A:middle
at a previous WWDC: JSPong.

00:22:23.596 --> 00:22:24.946 A:middle
And it's a simple pong game.

00:22:25.626 --> 00:22:29.626 A:middle
But I have some things I need
to do to it to make it work

00:22:29.626 --> 00:22:31.026 A:middle
with JSContext inspection.

00:22:31.466 --> 00:22:34.126 A:middle
The first thing I need to do
is make sure the entitlement

00:22:34.126 --> 00:22:34.526 A:middle
is there.

00:22:35.016 --> 00:22:36.426 A:middle
And if you're in the Apps Store,

00:22:36.426 --> 00:22:38.476 A:middle
you probably already have
an entitlements file.

00:22:38.886 --> 00:22:40.926 A:middle
In this case, I already
have an App Sandbox

00:22:41.236 --> 00:22:43.026 A:middle
and that will give
me an entitlement.

00:22:43.456 --> 00:22:46.916 A:middle
And I have it right here in the
sidebar, JSPong.entitlements.

00:22:47.746 --> 00:22:53.276 A:middle
So let's go in and add the
entitlement that we need.

00:22:53.276 --> 00:23:00.586 A:middle
And I said it was
com.apple.security.

00:23:01.906 --> 00:23:07.316 A:middle
get-task-allow, and
it's a Boolean.

00:23:07.866 --> 00:23:11.716 A:middle
And we'll go ahead
and say "Yes."

00:23:14.116 --> 00:23:15.786 A:middle
So that's all I need to do

00:23:15.786 --> 00:23:19.366 A:middle
to allow JSContext
inspection in my application.

00:23:19.596 --> 00:23:20.736 A:middle
And I'll go ahead and save that.

00:23:20.736 --> 00:23:24.346 A:middle
And I'll go ahead
and build and run it.

00:23:25.926 --> 00:23:28.096 A:middle
And it's a very simple
pong game.

00:23:28.096 --> 00:23:30.686 A:middle
The AI is controlled
by a JavaScript

00:23:30.686 --> 00:23:32.136 A:middle
that you can modify
here in the app.

00:23:32.226 --> 00:23:33.796 A:middle
I'm not going to
talk about that.

00:23:34.626 --> 00:23:39.366 A:middle
But now I can go to Safari
and, in the Develop menu,

00:23:40.286 --> 00:23:46.046 A:middle
I will see Mac Pro and I will
see JSPong and my JSContext.

00:23:46.606 --> 00:23:48.436 A:middle
And I didn't name
the context yet,

00:23:48.436 --> 00:23:50.156 A:middle
so it's getting the
default name.

00:23:50.826 --> 00:23:52.246 A:middle
And I'll go ahead
and inspect that.

00:23:52.246 --> 00:23:54.816 A:middle
And you'll see the
resources are empty.

00:23:54.816 --> 00:23:58.336 A:middle
I'm not seeing that that
AI script that I've loaded.

00:23:59.026 --> 00:24:01.996 A:middle
But I-if I want to debug that,
I'll need to give that a name.

00:24:02.526 --> 00:24:06.216 A:middle
But at this point, I have
access to the console.

00:24:06.676 --> 00:24:07.926 A:middle
If you don't do anything,

00:24:07.956 --> 00:24:10.566 A:middle
you can do evaluations
here in the console.

00:24:11.796 --> 00:24:14.696 A:middle
You can get access
to any globals

00:24:14.696 --> 00:24:17.026 A:middle
that you might have
available in your context.

00:24:18.816 --> 00:24:22.196 A:middle
And you will see exceptions
in logs and errors.

00:24:22.886 --> 00:24:25.236 A:middle
And in this case, we
have an example exception

00:24:26.116 --> 00:24:27.726 A:middle
and this will give
you a back trace,

00:24:27.786 --> 00:24:31.316 A:middle
not just of your JavaScript,
but of your native code.

00:24:31.706 --> 00:24:35.036 A:middle
So you can see exactly
where that function

00:24:35.036 --> 00:24:38.286 A:middle
or script was evaluated all
the way to your native codes

00:24:38.286 --> 00:24:41.026 A:middle
so you can trace it back
to the exist-the origin.

00:24:43.396 --> 00:24:48.316 A:middle
So let's go back into Xcode
and name some of these.

00:24:49.636 --> 00:24:50.556 A:middle
So it's pretty simple.

00:24:50.556 --> 00:24:51.896 A:middle
I'll just comment this out.

00:24:51.896 --> 00:24:54.626 A:middle
This will name my
context, Pong Context.

00:24:54.906 --> 00:24:56.326 A:middle
I only have one context.

00:24:56.326 --> 00:24:57.526 A:middle
But if I had multiple ones,

00:24:57.526 --> 00:25:01.156 A:middle
it would be imperative
for me to name them.

00:25:01.926 --> 00:25:04.646 A:middle
And when I'm evaluating
the AI script,

00:25:05.956 --> 00:25:08.536 A:middle
all I have to do
is construct a URL.

00:25:08.536 --> 00:25:11.156 A:middle
In this case, I'm just
making a URL with a string

00:25:11.736 --> 00:25:14.136 A:middle
and it really doesn't
have a location.

00:25:15.116 --> 00:25:19.046 A:middle
And I'll just use the
new withSourceURL method

00:25:19.566 --> 00:25:22.936 A:middle
and pass in that URL.

00:25:23.166 --> 00:25:26.476 A:middle
Now let's build and run
and see what happens

00:25:26.476 --> 00:25:27.346 A:middle
in the Web Inspector.

00:25:30.916 --> 00:25:32.746 A:middle
We'll go ahead and
reconnect to the pong game.

00:25:33.786 --> 00:25:38.396 A:middle
In the Resource sidebar,
we now have that AI script.

00:25:39.526 --> 00:25:42.676 A:middle
And in the app, we didn't
syntax highlight it.

00:25:42.676 --> 00:25:44.406 A:middle
But Web Inspector
knows exactly how

00:25:44.406 --> 00:25:45.816 A:middle
to syntax highlight JavaScript.

00:25:46.616 --> 00:25:49.776 A:middle
So we can set breakpoints
right here.

00:25:49.776 --> 00:25:54.396 A:middle
And since the script is called
every iteration of the movement,

00:25:55.146 --> 00:25:56.156 A:middle
it should break right away.

00:25:56.156 --> 00:25:57.836 A:middle
And now I'm in the debugger.

00:25:58.616 --> 00:26:01.126 A:middle
I have access to the call stack.

00:26:01.606 --> 00:26:04.136 A:middle
There's nothing other than
this function being called.

00:26:04.666 --> 00:26:06.526 A:middle
But if there was a
deeply nested call stack,

00:26:06.526 --> 00:26:08.206 A:middle
you would see it right
there in the sidebar.

00:26:09.216 --> 00:26:14.216 A:middle
And I can also bring open the
scope chain and we can-just

00:26:14.216 --> 00:26:16.426 A:middle
like you would any
JavaScript context,

00:26:16.426 --> 00:26:20.066 A:middle
you can now inspect the objects
that you're getting passed

00:26:20.066 --> 00:26:24.166 A:middle
around or your global
scope in this case.

00:26:24.696 --> 00:26:30.046 A:middle
And we can do what any
debugger does and step through,

00:26:30.746 --> 00:26:33.576 A:middle
and do anything you would
do in a normal debugger,

00:26:34.306 --> 00:26:37.306 A:middle
in addition to hovering
over variables

00:26:37.306 --> 00:26:41.036 A:middle
to see their current
value or evaluate things

00:26:41.036 --> 00:26:43.666 A:middle
in this current scope
in the console.

00:26:44.486 --> 00:26:54.496 A:middle
So in this case, let's try
modifying the ball here.

00:26:54.716 --> 00:26:58.136 A:middle
Maybe we want to modify
the rules of pong here

00:26:58.136 --> 00:27:00.136 A:middle
and make something
really easy to hit.

00:27:01.236 --> 00:27:02.896 A:middle
So I've gone ahead
and modified that.

00:27:02.896 --> 00:27:09.666 A:middle
And I have an update function
here that will redraw my scene.

00:27:10.056 --> 00:27:12.506 A:middle
And you can see the
ball increase in size

00:27:12.866 --> 00:27:14.726 A:middle
as I may-after I
made that change.

00:27:15.426 --> 00:27:18.816 A:middle
And this is working with
Objective-C bridged objects.

00:27:18.816 --> 00:27:22.596 A:middle
The ball object here is a
bridged Objective-C object

00:27:23.076 --> 00:27:27.436 A:middle
that you can use as you would
a normal JavaScript object.

00:27:28.686 --> 00:27:30.596 A:middle
So that's JSContext inspection.

00:27:31.396 --> 00:27:32.326 A:middle
And we'll go ahead and play it

00:27:32.326 --> 00:27:34.566 A:middle
and the ball stays the same
size and keeps on going.

00:27:37.006 --> 00:27:41.926 A:middle
So again, any web view, any
JavaScript context that you have

00:27:41.926 --> 00:27:44.636 A:middle
in your application can
be debugged now as long

00:27:44.636 --> 00:27:45.886 A:middle
as you have the right
entitlement.

00:27:46.346 --> 00:27:48.346 A:middle
And this also applies for iOS.

00:27:48.346 --> 00:27:51.776 A:middle
So only builds that you build
and run on to your device

00:27:52.176 --> 00:27:55.226 A:middle
or into the iOS simulator
will be inspectable.

00:27:55.256 --> 00:27:57.846 A:middle
Any app from the App
Store will not be allowed

00:27:57.846 --> 00:27:59.416 A:middle
to be inspected by anyone else.

00:28:00.766 --> 00:28:03.386 A:middle
So that's all you need.

00:28:03.606 --> 00:28:06.316 A:middle
And again, name your context
and name your scripts,

00:28:06.316 --> 00:28:08.566 A:middle
so you can easily identify
them when you're debugging.

00:28:09.056 --> 00:28:14.676 A:middle
So now let's talk about
something that we've had

00:28:14.676 --> 00:28:18.876 A:middle
in the Web Inspector for
a while: the Timeline.

00:28:18.876 --> 00:28:21.516 A:middle
And something new this year
is the Source Code Timelines.

00:28:21.516 --> 00:28:22.876 A:middle
So what do I mean by that?

00:28:23.066 --> 00:28:24.916 A:middle
What sorts of problems
does it solve?

00:28:26.316 --> 00:28:31.446 A:middle
So Source Code Timelines help
you answer this question.

00:28:31.886 --> 00:28:34.786 A:middle
What happened when I click
on something on the page?

00:28:36.256 --> 00:28:38.176 A:middle
Maybe it's a new project
that you're working on,

00:28:38.566 --> 00:28:40.166 A:middle
maybe it's something
you wrote years ago

00:28:40.166 --> 00:28:42.726 A:middle
and you don't remember how it
worked and you want to find

00:28:42.726 --> 00:28:45.796 A:middle
that line of code that handles
this click, so you can fix a bug

00:28:46.326 --> 00:28:51.096 A:middle
or so you can just modify
it for some new behavior

00:28:51.096 --> 00:28:52.936 A:middle
that your client is
asking you to add.

00:28:54.046 --> 00:28:56.486 A:middle
So, when this click happens,
there's a lot of stuff

00:28:56.486 --> 00:28:57.636 A:middle
that probably going on.

00:28:58.256 --> 00:29:00.696 A:middle
But you really only care
about code that you wrote,

00:29:01.136 --> 00:29:04.496 A:middle
maybe you have some analytics
code or a lot of other code

00:29:04.496 --> 00:29:06.176 A:middle
that it might be
hard to decipher

00:29:06.466 --> 00:29:11.416 A:middle
or see interleaved functions
and event calls and all of these

00:29:11.416 --> 00:29:14.396 A:middle
that happen in a big
modern web application.

00:29:15.656 --> 00:29:22.206 A:middle
So when I click on that,
you start wondering, "OK,

00:29:22.206 --> 00:29:24.736 A:middle
what script is handling
this button?"

00:29:25.166 --> 00:29:27.026 A:middle
And it turns out it's this one.

00:29:28.356 --> 00:29:32.186 A:middle
But with the new Web
Inspector, we can dig deeper.

00:29:32.646 --> 00:29:36.876 A:middle
In the script, I can now see
a timeline representation

00:29:36.936 --> 00:29:38.506 A:middle
of what the script was doing.

00:29:39.956 --> 00:29:43.426 A:middle
So I can see over time where
the mouse events are coming in,

00:29:43.636 --> 00:29:46.286 A:middle
where the clicks events,
where the timer was added,

00:29:46.286 --> 00:29:47.706 A:middle
where the timers are firing,

00:29:48.186 --> 00:29:50.506 A:middle
where I might be
doing forced layout,

00:29:50.906 --> 00:29:56.426 A:middle
which is a pretty evil thing
to do in a modern web app.

00:29:56.686 --> 00:29:58.536 A:middle
So what's it looked like
in the Web Inspector?

00:29:59.876 --> 00:30:02.806 A:middle
Well, here's the new
Web Inspector Timeline.

00:30:03.946 --> 00:30:10.066 A:middle
And you can see in the sidebar
here we have all of our scripts

00:30:10.066 --> 00:30:14.186 A:middle
and resources from the page
broken out in their hierarchy

00:30:14.186 --> 00:30:18.856 A:middle
of how they're included by
you, the developer, in the page

00:30:19.356 --> 00:30:23.896 A:middle
and you can expand
each script to see what

00:30:23.896 --> 00:30:26.896 A:middle
that script was doing and
where the line of code was.

00:30:27.986 --> 00:30:30.786 A:middle
And in this case, you'll
see a whole timeline

00:30:30.886 --> 00:30:32.806 A:middle
where things are
happening repeatedly.

00:30:32.806 --> 00:30:35.046 A:middle
You'll start seeing
patterns and allow you

00:30:35.046 --> 00:30:38.176 A:middle
to identify problem areas if
something is firing too much,

00:30:38.466 --> 00:30:41.866 A:middle
too little, not at all, if
you don't see it in the list.

00:30:43.346 --> 00:30:46.806 A:middle
And if you want to dig deeper
into the code, all you have

00:30:46.836 --> 00:30:48.956 A:middle
to do is click right
there on the sidebar

00:30:49.036 --> 00:30:52.286 A:middle
and it will take you right to
that location, and you can mouse

00:30:52.286 --> 00:30:55.866 A:middle
up and down through the sidebar
and have your code on one side

00:30:56.126 --> 00:30:58.216 A:middle
and your timeline
data in the sidebar.

00:30:58.536 --> 00:31:01.726 A:middle
So you can get a good overview

00:31:01.726 --> 00:31:03.806 A:middle
of what the script is
doing really quick.

00:31:06.166 --> 00:31:07.906 A:middle
So that's the Source
Code Timelines

00:31:07.966 --> 00:31:10.306 A:middle
and I'll give you a demo
here in a little minute.

00:31:12.416 --> 00:31:14.586 A:middle
So something else that's new

00:31:14.586 --> 00:31:16.816 A:middle
in the Web Inspector
is Breakpoint Probes.

00:31:18.116 --> 00:31:22.406 A:middle
So you might have some
information that you want

00:31:22.406 --> 00:31:25.126 A:middle
to know when that
mouse is clicked

00:31:25.446 --> 00:31:27.486 A:middle
or when your mouse is moving.

00:31:27.886 --> 00:31:30.386 A:middle
And those things are kind of
hard to debug in the debugger.

00:31:31.006 --> 00:31:33.276 A:middle
You often have to resort
to printf debugging

00:31:33.276 --> 00:31:36.376 A:middle
because you don't want to
constantly be switching context

00:31:36.376 --> 00:31:40.516 A:middle
between your app in the
page and the Web Inspector.

00:31:42.396 --> 00:31:45.746 A:middle
So you often result to printf
debugging and you're cluttering

00:31:45.746 --> 00:31:48.936 A:middle
up your console with thousands
of lines and it's hard

00:31:48.936 --> 00:31:51.796 A:middle
to decipher, especially if
you're debugging multiple areas

00:31:52.206 --> 00:31:55.516 A:middle
that are not related
and you don't care

00:31:55.576 --> 00:31:57.276 A:middle
about the interloop data.

00:31:58.456 --> 00:32:00.906 A:middle
So this is where
Breakpoint Probes comes in.

00:32:00.956 --> 00:32:04.906 A:middle
It let's you see these
properties that you might care

00:32:04.906 --> 00:32:07.186 A:middle
about without having to
breakout into the Web Inspector.

00:32:07.636 --> 00:32:10.086 A:middle
So let's just go ahead
and give a demo of this.

00:32:12.086 --> 00:32:13.786 A:middle
So let's go to Safari here.

00:32:14.976 --> 00:32:19.346 A:middle
And I have a simple
stack the block game

00:32:22.716 --> 00:32:27.666 A:middle
that I want to-it's been a while
since this was written so I want

00:32:27.666 --> 00:32:28.706 A:middle
to see what's going on.

00:32:28.786 --> 00:32:31.396 A:middle
Let's go ahead and use the
Timeline panel for this.

00:32:32.186 --> 00:32:34.096 A:middle
I'll go ahead and bring
up the Web Inspector

00:32:34.396 --> 00:32:37.436 A:middle
in the Develop menu,
show Web Inspector.

00:32:38.846 --> 00:32:40.636 A:middle
And we'll go to the
Timeline panel.

00:32:41.426 --> 00:32:43.236 A:middle
And by default, the
Timeline is empty.

00:32:43.236 --> 00:32:44.716 A:middle
It's not recording all the time.

00:32:45.256 --> 00:32:48.566 A:middle
And it only automatically
records when you reload the page

00:32:49.126 --> 00:32:52.386 A:middle
or when you press the Record
button up here in the corner.

00:32:53.216 --> 00:32:55.556 A:middle
And this can record
any length of time

00:32:55.556 --> 00:32:57.356 A:middle
that you would like to record.

00:32:57.826 --> 00:32:59.866 A:middle
But when you-when
I reload the page,

00:32:59.866 --> 00:33:01.776 A:middle
it will only record
a little bit.

00:33:01.876 --> 00:33:04.066 A:middle
So I'm just going to go ahead
and start recording here

00:33:04.726 --> 00:33:07.676 A:middle
and see what this page is doing
as I interact with this game.

00:33:08.526 --> 00:33:11.906 A:middle
And you'll see the
events and all the work

00:33:11.906 --> 00:33:14.246 A:middle
that the engine is
doing in response

00:33:14.246 --> 00:33:17.156 A:middle
to these events start
filling up on the Timeline.

00:33:17.986 --> 00:33:21.776 A:middle
And I'll go ahead and stop this.

00:33:21.776 --> 00:33:25.946 A:middle
And my application has three
scripts, but the logic is all

00:33:25.946 --> 00:33:29.066 A:middle
in blocks.js, all the other
stuff is stuff I didn't

00:33:29.066 --> 00:33:29.556 A:middle
even write.

00:33:29.556 --> 00:33:31.046 A:middle
I don't even know
what's going on there.

00:33:31.906 --> 00:33:34.936 A:middle
So I can ignore those, but
they're doing some work.

00:33:34.936 --> 00:33:37.466 A:middle
And normally that
would clutter up my UI.

00:33:37.466 --> 00:33:40.456 A:middle
But they're collapsed here, so
they're not taking up any space.

00:33:41.226 --> 00:33:44.236 A:middle
I'll go ahead and expand the
script that I care about here

00:33:44.886 --> 00:33:51.856 A:middle
and I can see that Timers are
firing pretty-at a pretty good

00:33:51.856 --> 00:33:56.106 A:middle
clip as I'm interacting with
the page and there's key events

00:33:56.106 --> 00:33:57.706 A:middle
that are firing every
time I press a key.

00:33:59.116 --> 00:34:01.886 A:middle
Some of the other new
features of the timeline here,

00:34:01.886 --> 00:34:06.036 A:middle
we can now zoom and scale the
overview panel so if you want

00:34:06.036 --> 00:34:11.286 A:middle
to dig in to see where things
are happening across domains.

00:34:11.676 --> 00:34:14.686 A:middle
In this case, we have three
Timelines, the Network Request,

00:34:14.926 --> 00:34:16.626 A:middle
Layout and Rendering,
and JavaScript.

00:34:16.946 --> 00:34:21.116 A:middle
And all three play a key role
in the performance of your page.

00:34:22.206 --> 00:34:24.726 A:middle
So if you see anything
interesting happening

00:34:24.726 --> 00:34:28.816 A:middle
in a specific time range,
you can zoom in on it,

00:34:28.816 --> 00:34:31.516 A:middle
make a selection and that
information will show

00:34:31.516 --> 00:34:33.316 A:middle
up below in the Timeline.

00:34:35.056 --> 00:34:38.266 A:middle
And you can also drag this
around to scroll and scrub

00:34:38.266 --> 00:34:43.426 A:middle
through your time as things
were happening on the page.

00:34:44.796 --> 00:34:50.066 A:middle
So in this case, let me reload
and I'll show you the networks.

00:34:50.386 --> 00:34:53.696 A:middle
And in this case,
it's a local file.

00:34:54.246 --> 00:34:57.286 A:middle
But we now have network load
information and you see those

00:34:57.286 --> 00:35:00.406 A:middle
on the network timeline
and you'll notice

00:35:00.406 --> 00:35:02.186 A:middle
that the Timeline just
automatically stops

00:35:02.186 --> 00:35:02.866 A:middle
recording there.

00:35:03.166 --> 00:35:04.596 A:middle
It records up to
a certain amount

00:35:04.596 --> 00:35:08.016 A:middle
of time unless you manually
hit the Record button again

00:35:08.016 --> 00:35:09.656 A:middle
to record more information.

00:35:10.766 --> 00:35:12.766 A:middle
So let's look into the
network timeline here.

00:35:13.606 --> 00:35:16.106 A:middle
And we can see all of
the network details

00:35:16.106 --> 00:35:17.476 A:middle
that you might be familiar

00:35:17.476 --> 00:35:19.876 A:middle
with in the previous
network timeline.

00:35:20.386 --> 00:35:23.286 A:middle
They're all there and you
can sort-sort these columns

00:35:23.286 --> 00:35:26.096 A:middle
by whatever information
you find most interesting.

00:35:26.396 --> 00:35:30.086 A:middle
If you're looking for a
large script, you can sort

00:35:30.086 --> 00:35:33.306 A:middle
by transfer size and see
the biggest script show

00:35:33.306 --> 00:35:35.346 A:middle
up right there.

00:35:35.536 --> 00:35:38.526 A:middle
Let's go back to start time.

00:35:38.706 --> 00:35:41.756 A:middle
You can also do-click
on the other timelines

00:35:41.756 --> 00:35:44.776 A:middle
and get detailed tab-linear data

00:35:44.776 --> 00:35:47.306 A:middle
of what was happening
in that time range.

00:35:47.386 --> 00:35:49.476 A:middle
And again this is
all time range-based.

00:35:49.476 --> 00:35:53.736 A:middle
So you can see, as these layout
and rendering events filter out,

00:35:53.736 --> 00:35:56.666 A:middle
they disappear from
the display below.

00:35:58.056 --> 00:36:01.076 A:middle
JavaScript and Events
is a special view.

00:36:01.966 --> 00:36:05.166 A:middle
And if you're looking
for the old profile data,

00:36:05.296 --> 00:36:06.656 A:middle
this is where it's moved to.

00:36:07.196 --> 00:36:11.446 A:middle
So as you're recording Timeline,
we would now capture profiles

00:36:11.446 --> 00:36:13.736 A:middle
of all those entry points
into your JavaScript.

00:36:14.146 --> 00:36:19.126 A:middle
So whenever script is evaluated,
you can expand these to see all

00:36:19.126 --> 00:36:21.946 A:middle
of the functions that
were called in your script

00:36:22.656 --> 00:36:26.416 A:middle
and how much time each
individual function took to make

00:36:26.416 --> 00:36:29.286 A:middle
up that piece of
that entry point.

00:36:29.676 --> 00:36:33.516 A:middle
So that's a brief
glance at the Timeline.

00:36:33.516 --> 00:36:35.626 A:middle
But there is one cool thing
that people always forget

00:36:35.626 --> 00:36:37.776 A:middle
about when they're
talking about the Timeline.

00:36:38.316 --> 00:36:39.866 A:middle
And that's the Filter.

00:36:39.866 --> 00:36:43.926 A:middle
The Filter bar is
vastly underappreciated

00:36:43.926 --> 00:36:46.986 A:middle
in the Web Inspector and even
Xcode where it comes from,

00:36:47.836 --> 00:36:49.866 A:middle
where you can filter
down this list

00:36:50.466 --> 00:36:53.116 A:middle
to find what exactly you want.

00:36:53.406 --> 00:36:56.266 A:middle
So, in this case I'd look-I
did a filter for event

00:36:56.536 --> 00:36:58.736 A:middle
and it found addEventListener
right there

00:36:58.736 --> 00:36:59.906 A:middle
and it brought it to the front.

00:37:00.126 --> 00:37:02.316 A:middle
It expanded those
profiles and showed me

00:37:02.316 --> 00:37:04.056 A:middle
that exact function
I was looking for.

00:37:04.976 --> 00:37:07.796 A:middle
So that's the Filter
Bar and I encourage you

00:37:07.796 --> 00:37:09.526 A:middle
to start using filtering
more often

00:37:09.526 --> 00:37:11.276 A:middle
in the Web Inspector
and even Xcode.

00:37:11.396 --> 00:37:14.056 A:middle
We'll go back to my
block application

00:37:14.056 --> 00:37:15.246 A:middle
and bring up the Web Inspector.

00:37:16.786 --> 00:37:23.546 A:middle
And let's go ahead and go to
the Resource sidebar here.

00:37:23.546 --> 00:37:28.536 A:middle
And I really want to improve
this key function listener-this

00:37:28.536 --> 00:37:29.726 A:middle
key listener.

00:37:30.236 --> 00:37:33.096 A:middle
It's using key code,
which is pretty arcane.

00:37:33.606 --> 00:37:36.366 A:middle
And there's some new API
key identifier that's been

00:37:36.366 --> 00:37:38.216 A:middle
out for years that I could use

00:37:38.216 --> 00:37:40.566 A:middle
that would give string
representations

00:37:41.036 --> 00:37:44.536 A:middle
of these-for my cases
instead of the numbers.

00:37:45.586 --> 00:37:51.046 A:middle
So what I'll do, like I said,
when we set a breakpoint anytime

00:37:51.046 --> 00:37:53.666 A:middle
that key is pressed it's
going to interrupt my process.

00:37:54.016 --> 00:37:56.616 A:middle
So now to do another key,
I have to hit Continue

00:37:57.076 --> 00:37:58.626 A:middle
and log what I wanted.

00:37:58.976 --> 00:38:01.946 A:middle
And press another key, figure
out what I'm doing here.

00:38:02.786 --> 00:38:07.856 A:middle
But with this breakpoint we
can add a breakpoint action.

00:38:08.376 --> 00:38:12.776 A:middle
And I'll go ahead and edit this
breakpoint, which will bring

00:38:12.776 --> 00:38:14.606 A:middle
up the breakpoint
Action popover.

00:38:15.956 --> 00:38:18.286 A:middle
And let's go ahead
and add a probe.

00:38:19.546 --> 00:38:21.406 A:middle
So we have a few
actions available.

00:38:21.406 --> 00:38:22.686 A:middle
I'm not going to cover them.

00:38:22.716 --> 00:38:24.296 A:middle
But they're pretty
self-explanatory.

00:38:24.916 --> 00:38:27.676 A:middle
Probe Expression in
this case is brand new.

00:38:27.676 --> 00:38:31.136 A:middle
And we'll go ahead and
evaluate an expression

00:38:31.136 --> 00:38:32.246 A:middle
that we're interested in.

00:38:32.456 --> 00:38:37.566 A:middle
And we have an an event object
here and I want to know what

00:38:37.566 --> 00:38:38.976 A:middle
that key identifier is.

00:38:39.476 --> 00:38:42.926 A:middle
And that's all I need to type.

00:38:43.566 --> 00:38:46.526 A:middle
And I want to automatically
continue after evaluating

00:38:46.526 --> 00:38:48.136 A:middle
so it doesn't pause
in the debugger.

00:38:50.356 --> 00:38:53.166 A:middle
So we'll go ahead and
break out in here.

00:38:53.166 --> 00:38:54.816 A:middle
And when I added that probe,

00:38:55.176 --> 00:38:57.636 A:middle
it added a new sidebar
item called Probes.

00:38:58.106 --> 00:39:00.946 A:middle
And this is where that data
will show up in the table.

00:39:02.156 --> 00:39:06.016 A:middle
So I'm going to go back to
my game and interact with it.

00:39:06.466 --> 00:39:09.976 A:middle
And now it's logging that key
identifier every time I press

00:39:09.976 --> 00:39:13.156 A:middle
the key and showing
me the values

00:39:13.156 --> 00:39:17.356 A:middle
that I can now take an input
into my code and improve my code

00:39:17.356 --> 00:39:20.876 A:middle
and I didn't-this would have
been a back and forth process

00:39:21.236 --> 00:39:23.906 A:middle
or a lot of assumption of
what these identifiers were.

00:39:24.246 --> 00:39:26.516 A:middle
Now I can see them all
in a table and go back

00:39:26.516 --> 00:39:29.126 A:middle
to my case and modify them.

00:39:31.766 --> 00:39:33.616 A:middle
So that's Probes.

00:39:33.616 --> 00:39:36.916 A:middle
So that's a little bit
about Breakpoint Probes

00:39:36.916 --> 00:39:38.196 A:middle
and Source Code Timelines.

00:39:38.196 --> 00:39:40.436 A:middle
And I encourage you to
play around with them

00:39:40.726 --> 00:39:43.566 A:middle
and see how they can fit
into your debugging workflow.

00:39:45.776 --> 00:39:47.736 A:middle
So now let's talk
about Accessibility.

00:39:48.906 --> 00:39:50.486 A:middle
A new in the Web Inspector,

00:39:50.486 --> 00:39:53.056 A:middle
we have an Accessibility
Details View.

00:39:53.886 --> 00:39:58.766 A:middle
And this is pretty,
pretty important.

00:39:58.766 --> 00:40:01.436 A:middle
If you're working
on a major website,

00:40:01.676 --> 00:40:03.786 A:middle
you want to be accessible
to everyone.

00:40:04.186 --> 00:40:06.386 A:middle
Apple cares a lot
about accessibility.

00:40:06.386 --> 00:40:10.616 A:middle
And we do a lot of work to
make accessibility matter.

00:40:11.466 --> 00:40:15.706 A:middle
But it only goes so far as
to how much you put into it

00:40:15.706 --> 00:40:17.686 A:middle
when you're developing
your own applications.

00:40:18.566 --> 00:40:20.686 A:middle
And that goes for
iOS applications

00:40:20.686 --> 00:40:21.936 A:middle
and web applications.

00:40:23.516 --> 00:40:26.176 A:middle
And on the web, we have
something called ARIA.

00:40:26.666 --> 00:40:29.766 A:middle
And it's recently hit
a milestone ARIA 1

00:40:29.886 --> 00:40:32.486 A:middle
or it's about to.

00:40:32.486 --> 00:40:37.696 A:middle
And that allows you to
define for a DOM node what

00:40:37.696 --> 00:40:39.976 A:middle
that DOM node does as a role.

00:40:40.266 --> 00:40:43.346 A:middle
And those roles are
translated into things

00:40:43.346 --> 00:40:48.786 A:middle
that the person using the
computer with VoiceOver can hear

00:40:48.786 --> 00:40:53.766 A:middle
or see with your-with
your web application.

00:40:53.946 --> 00:40:56.956 A:middle
And in this case,
I have a webpage

00:40:56.956 --> 00:40:59.616 A:middle
that has an alert,
an HTML alert.

00:41:00.446 --> 00:41:04.666 A:middle
And those are notoriously
hard to debug or hard

00:41:04.666 --> 00:41:09.316 A:middle
for a sighted-non-sighted
person to see when they pop

00:41:09.886 --> 00:41:14.016 A:middle
up in a webpage because they're
not going to be able to see

00:41:14.016 --> 00:41:18.796 A:middle
that content unless you
annotate it with ARIA roles.

00:41:20.376 --> 00:41:24.826 A:middle
And in this case, the
VoiceOver machinery

00:41:24.826 --> 00:41:29.866 A:middle
and the Accessibility machinery
in web view exposes a lot

00:41:29.866 --> 00:41:32.096 A:middle
of details like child
relationships.

00:41:32.386 --> 00:41:35.326 A:middle
And these relationships are
not necessarily the same

00:41:35.806 --> 00:41:38.206 A:middle
as a normal DOM node
relationship

00:41:38.646 --> 00:41:43.706 A:middle
where your parent could be
someone that's deeply-a deep

00:41:43.706 --> 00:41:44.606 A:middle
ancestor of you.

00:41:45.926 --> 00:41:49.466 A:middle
And we show those
in the sidebar here

00:41:49.466 --> 00:41:50.926 A:middle
as a parent-child relationship.

00:41:50.926 --> 00:41:52.076 A:middle
And they're all linkable.

00:41:52.076 --> 00:41:54.146 A:middle
So I can click on
them and go directly

00:41:54.146 --> 00:41:58.906 A:middle
to these other child nodes
that are part of my alert.

00:41:59.356 --> 00:42:02.426 A:middle
And see that this button has
the right role for a button.

00:42:02.876 --> 00:42:06.726 A:middle
And it will allow people-it
won't allow people to focus it,

00:42:06.726 --> 00:42:08.086 A:middle
but it allows people
to click it.

00:42:08.566 --> 00:42:12.116 A:middle
And that's a brief
summary of what you can do

00:42:12.116 --> 00:42:14.506 A:middle
with the Web Inspector
and Accessibility.

00:42:14.876 --> 00:42:16.426 A:middle
There's a session
tomorrow morning

00:42:16.776 --> 00:42:19.306 A:middle
that covers Accessibility
and the web.

00:42:19.866 --> 00:42:21.706 A:middle
And I encourage you
to go check it out.

00:42:21.706 --> 00:42:25.016 A:middle
If you have a website or
a web view in your iOS

00:42:25.016 --> 00:42:28.396 A:middle
or Mac application, please
do make it accessible.

00:42:30.976 --> 00:42:33.126 A:middle
So that's accessibility details.

00:42:33.736 --> 00:42:36.686 A:middle
Now let's talk about
something that's really fun,

00:42:36.946 --> 00:42:37.896 A:middle
which is Color.

00:42:39.716 --> 00:42:42.466 A:middle
Color is one of those things-we

00:42:42.466 --> 00:42:45.826 A:middle
as people can understand
numbers.

00:42:46.316 --> 00:42:48.546 A:middle
But colors, there's
millions of them.

00:42:49.336 --> 00:42:53.556 A:middle
And it's very visual and
a very personal process

00:42:53.556 --> 00:42:54.956 A:middle
of picking the right color.

00:42:55.826 --> 00:43:00.466 A:middle
And if you're like me and
you're working on a webpage,

00:43:00.626 --> 00:43:02.476 A:middle
you might have a
client come in and say,

00:43:02.476 --> 00:43:06.596 A:middle
"I want this color salmon"
or "this color taupe."

00:43:07.566 --> 00:43:12.996 A:middle
It's hard for them to take those
words and you can translate

00:43:12.996 --> 00:43:14.096 A:middle
that into the right color.

00:43:14.856 --> 00:43:16.806 A:middle
Wouldn't it be great if you
can just bring up the color,

00:43:16.806 --> 00:43:18.416 A:middle
pick it right there
in the webpage

00:43:18.776 --> 00:43:20.896 A:middle
and modify it right
there in front of them.

00:43:21.656 --> 00:43:23.666 A:middle
So that's what we've added
in the Web Inspector,

00:43:23.666 --> 00:43:24.676 A:middle
and I'll give you a demo.

00:43:25.206 --> 00:43:28.236 A:middle
So I have an icon that
I've been mocking up.

00:43:28.266 --> 00:43:30.996 A:middle
And often I do these
things in the web

00:43:30.996 --> 00:43:32.936 A:middle
because that's something
I understand.

00:43:32.936 --> 00:43:35.256 A:middle
I can play around
with it a lot easier

00:43:35.256 --> 00:43:36.716 A:middle
than maybe I could
do in Photoshop.

00:43:37.676 --> 00:43:41.036 A:middle
And this icon is a little small
so I'll just go ahead and bring

00:43:41.036 --> 00:43:43.986 A:middle
up the Web Inspector here.

00:43:45.246 --> 00:43:49.706 A:middle
And I have a class
that I can add

00:43:49.706 --> 00:43:50.846 A:middle
to make it a little
bigger for you.

00:43:52.276 --> 00:43:54.396 A:middle
So, now I have my icon.

00:43:54.396 --> 00:43:55.466 A:middle
It has a couple colors.

00:43:55.466 --> 00:43:57.006 A:middle
It's got this color
for the glyph

00:43:57.006 --> 00:43:58.826 A:middle
and it's got a gradient
in the background.

00:43:59.366 --> 00:44:05.576 A:middle
I can bring up the Style
sidebar and see those colors.

00:44:06.686 --> 00:44:10.426 A:middle
And in this case, I'm
using some named colors.

00:44:10.426 --> 00:44:12.356 A:middle
CSS has hundreds
of named colors.

00:44:12.616 --> 00:44:14.356 A:middle
But maybe it's not
the right teal.

00:44:15.036 --> 00:44:17.236 A:middle
That's a little more
green than I expected

00:44:17.856 --> 00:44:22.856 A:middle
or the light blue is
not enough sea foam

00:44:22.856 --> 00:44:25.716 A:middle
or whatever your client is
telling you to make this color.

00:44:26.796 --> 00:44:32.206 A:middle
So, I can click on these colors
swatches and get a Color Editor.

00:44:34.036 --> 00:44:37.596 A:middle
Or I can switch over
to the CSS resource

00:44:38.096 --> 00:44:41.126 A:middle
and get the exact
same experience.

00:44:41.396 --> 00:44:44.266 A:middle
But in this case, we want
your source code to be front

00:44:44.266 --> 00:44:46.566 A:middle
and center, so we don't even
add those color swatches.

00:44:47.456 --> 00:44:49.506 A:middle
But we have a new feature

00:44:49.506 --> 00:44:53.566 A:middle
that let you get a data
detector-like experience.

00:44:53.846 --> 00:44:55.386 A:middle
When we detect that
it's a color,

00:44:55.386 --> 00:45:00.006 A:middle
we will show a color wheel
next to it as you hover it.

00:45:00.006 --> 00:45:02.816 A:middle
And when you click
on that wheel,

00:45:02.816 --> 00:45:04.236 A:middle
we bring up the color popover.

00:45:05.386 --> 00:45:07.926 A:middle
And in this case we
could just click around

00:45:07.926 --> 00:45:10.836 A:middle
and you can see the color
updating live right there

00:45:10.836 --> 00:45:11.716 A:middle
in the web page.

00:45:13.326 --> 00:45:15.796 A:middle
And I can find the right color

00:45:16.006 --> 00:45:17.986 A:middle
that I'm looking
for, for this glyph.

00:45:19.356 --> 00:45:22.166 A:middle
And if it's a named color
it will default back

00:45:22.166 --> 00:45:23.476 A:middle
to the named color syntax.

00:45:23.816 --> 00:45:25.526 A:middle
But if it's not something
that's named,

00:45:25.596 --> 00:45:29.826 A:middle
it will just give you
the RGB syntax or RGBa

00:45:29.826 --> 00:45:31.356 A:middle
if you picked an alpha.

00:45:32.856 --> 00:45:34.286 A:middle
But we didn't stop there.

00:45:35.336 --> 00:45:37.526 A:middle
We now let you do gradients.

00:45:37.956 --> 00:45:41.056 A:middle
And gradients are even more
hard to visualize than color

00:45:41.536 --> 00:45:43.316 A:middle
because you have that interplay

00:45:43.566 --> 00:45:46.126 A:middle
of the colors transitioning
from one to another.

00:45:46.696 --> 00:45:49.056 A:middle
And it's hard to see
those in your mind.

00:45:49.936 --> 00:45:52.796 A:middle
But we can go ahead
and edit this gradient.

00:45:53.646 --> 00:45:56.506 A:middle
And it gives you a simple slider

00:45:56.896 --> 00:45:59.986 A:middle
that you might be familiar
with from other UIs.

00:46:00.746 --> 00:46:02.266 A:middle
And I can drag these around

00:46:02.606 --> 00:46:05.516 A:middle
and you'll see it's updating
the source code as I drag this.

00:46:05.516 --> 00:46:06.926 A:middle
The percentage is changing.

00:46:07.486 --> 00:46:09.966 A:middle
And when I let go, it
updates the page live.

00:46:09.966 --> 00:46:14.286 A:middle
So I can see exactly what
is applying to this page.

00:46:15.436 --> 00:46:17.996 A:middle
But you can't just
edit the color stops.

00:46:18.516 --> 00:46:26.016 A:middle
You can edit the type of
gradient or you can pick radial

00:46:26.016 --> 00:46:27.436 A:middle
so it's coming out
from the center.

00:46:28.846 --> 00:46:31.706 A:middle
And I can click on these
colors and get the color wheel

00:46:31.916 --> 00:46:34.836 A:middle
and start editing each of
these color stops directly.

00:46:36.216 --> 00:46:39.926 A:middle
So I can find the exact
look I'm looking for.

00:46:40.396 --> 00:46:44.426 A:middle
Drag this around.

00:46:45.996 --> 00:46:48.706 A:middle
Maybe we'll run it to be
more of the starburst look.

00:46:52.056 --> 00:46:53.576 A:middle
A little bit more yellow.

00:46:54.126 --> 00:46:57.706 A:middle
Or the client might say, "Oh,

00:46:57.706 --> 00:47:00.526 A:middle
I want a linear gradient
in this case."

00:47:00.526 --> 00:47:03.526 A:middle
So let's go back to the
traditional iOS look

00:47:03.526 --> 00:47:08.866 A:middle
for gradients and start picking
some pretty wild colors here.

00:47:10.216 --> 00:47:14.956 A:middle
So that's the gradient editor
at the new Web Inspector.

00:47:15.406 --> 00:47:24.086 A:middle
And what I didn't show you here,
let's go back and reload here.

00:47:29.826 --> 00:47:33.366 A:middle
If I make any of
these changes, say,

00:47:33.366 --> 00:47:37.626 A:middle
I want to go back and save it.

00:47:37.816 --> 00:47:41.296 A:middle
Let's make this a red
and that looks good.

00:47:41.296 --> 00:47:42.476 A:middle
That looks like a sunset.

00:47:43.616 --> 00:47:46.936 A:middle
In the Web Inspector, I can
just go ahead and hit Command+S

00:47:46.936 --> 00:47:49.046 A:middle
that will bring up the
traditional Save dialogue.

00:47:49.626 --> 00:47:51.116 A:middle
Go ahead and replace it.

00:47:51.366 --> 00:47:54.316 A:middle
And now, if I close the Web
Inspector, reload the page,

00:47:54.436 --> 00:47:56.626 A:middle
I have that gradient
color right there.

00:47:57.676 --> 00:48:00.436 A:middle
The icon is a different size
because I was modifying the DOM

00:48:00.576 --> 00:48:01.806 A:middle
and it that doesn't save.

00:48:02.216 --> 00:48:04.196 A:middle
But if you're editing
a CSS resource

00:48:04.486 --> 00:48:07.916 A:middle
or any other local file resource
you can save those right back

00:48:07.916 --> 00:48:09.816 A:middle
to disk from the Web Inspector.

00:48:11.166 --> 00:48:12.786 A:middle
So that's Color and
Gradient Editing.

00:48:12.886 --> 00:48:15.316 A:middle
And I hope you play around
with it and try it out.

00:48:15.316 --> 00:48:20.346 A:middle
It's really fun to just get down
and dirty with those colors.

00:48:20.736 --> 00:48:23.606 A:middle
And the gradient
syntax is something

00:48:23.606 --> 00:48:25.676 A:middle
that I still have
trouble remembering.

00:48:25.676 --> 00:48:27.856 A:middle
But the Web inspector will
just help you right there

00:48:28.286 --> 00:48:31.566 A:middle
and get the right
syntax and let you go

00:48:31.566 --> 00:48:33.666 A:middle
on to do more important
things in your code.

00:48:34.146 --> 00:48:37.896 A:middle
So that's the summary
of all the new features,

00:48:38.206 --> 00:48:40.666 A:middle
and just a brief introduction

00:48:40.666 --> 00:48:42.396 A:middle
of all the new features
in the Web Inspector.

00:48:44.596 --> 00:48:47.596 A:middle
So, I encourage you
to take advantage

00:48:47.596 --> 00:48:49.356 A:middle
of the new JavaScript
language features.

00:48:49.756 --> 00:48:54.436 A:middle
As you're able to release and
use the new modern browsers,

00:48:54.556 --> 00:49:00.266 A:middle
or use iOS 8 exclusively, or
Mac OS Yosemite exclusively,

00:49:00.266 --> 00:49:01.376 A:middle
you could start using some

00:49:01.376 --> 00:49:03.236 A:middle
of these new language
and syntax features.

00:49:05.416 --> 00:49:08.406 A:middle
The Web Inspector is
now available again

00:49:08.666 --> 00:49:10.156 A:middle
from your Mac Applications.

00:49:10.156 --> 00:49:11.906 A:middle
If you have a web view
that you've always wanted

00:49:11.906 --> 00:49:14.096 A:middle
to see what it's doing
in your application,

00:49:14.096 --> 00:49:15.486 A:middle
there's been a few
ways to do it.

00:49:15.486 --> 00:49:18.066 A:middle
But you can now officially
use the web inspector

00:49:18.066 --> 00:49:19.316 A:middle
in your Mac Application.

00:49:20.816 --> 00:49:23.746 A:middle
And I want you to
enjoy debugging your

00:49:23.746 --> 00:49:24.746 A:middle
JavaScript context.

00:49:24.746 --> 00:49:27.216 A:middle
This is something
that may seem simple.

00:49:27.496 --> 00:49:29.056 A:middle
Oh yeah, there's now a debugger.

00:49:29.056 --> 00:49:31.566 A:middle
But, yeah, now there's
a debugger.

00:49:32.446 --> 00:49:35.456 A:middle
You can now debug this
JavaScript that's been plaguing

00:49:35.456 --> 00:49:40.266 A:middle
you or giving you this weird
errors or it's always been hard

00:49:40.266 --> 00:49:43.676 A:middle
to debug these contexts because
there's been no debugger that's

00:49:43.676 --> 00:49:46.176 A:middle
been able to give
you that information.

00:49:47.816 --> 00:49:50.236 A:middle
And again, it's really important

00:49:50.236 --> 00:49:52.226 A:middle
to make your web
applications accessible

00:49:52.486 --> 00:49:54.556 A:middle
and your iOS application
accessible.

00:49:55.596 --> 00:49:57.256 A:middle
And be a colorful person.

00:49:57.866 --> 00:50:00.966 A:middle
Enjoy color editing in the Web
Inspector and gradient editing.

00:50:01.456 --> 00:50:06.466 A:middle
And again, for more information,
you can contact Evangelism

00:50:06.466 --> 00:50:10.956 A:middle
at this email address, or the
Developer Technical support,

00:50:11.166 --> 00:50:12.426 A:middle
and even the Apple Forums.

00:50:12.476 --> 00:50:14.276 A:middle
I'm in the Apple Forums
if you have a question

00:50:14.276 --> 00:50:16.726 A:middle
about the Web Inspector,
or anything web-related,

00:50:17.146 --> 00:50:19.976 A:middle
or one of our team will be
able to answer it or I would.

00:50:21.476 --> 00:50:23.596 A:middle
There-Again, there's
a couple more sessions

00:50:23.946 --> 00:50:27.806 A:middle
that might interest you as web
developers or iOS developers

00:50:27.806 --> 00:50:30.096 A:middle
that have web or
JavaScript context.

00:50:31.016 --> 00:50:33.616 A:middle
You can go to the
session tomorrow morning

00:50:33.616 --> 00:50:35.966 A:middle
and learn all you need to
know about accessibility

00:50:35.966 --> 00:50:37.036 A:middle
in your web application.

00:50:37.396 --> 00:50:40.336 A:middle
And then stay in that
same room and learn

00:50:40.336 --> 00:50:44.426 A:middle
about responsive web design
for making your web apps scale

00:50:44.426 --> 00:50:47.066 A:middle
from desktop size
to iPhone size.

00:50:47.186 --> 00:50:48.116 A:middle
And that's it.

00:50:48.356 --> 00:50:48.976 A:middle
Thanks a lot.

00:50:49.508 --> 00:50:51.508 A:middle
[ Applause ]