X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:12,116 --> 00:00:12,996 A:middle
>> Good morning, everyone.

2
00:00:14,516 --> 00:00:18,586 A:middle
[ Applause ]

3
00:00:19,086 --> 00:00:20,596 A:middle
I'm glad you guys could make it.

4
00:00:21,026 --> 00:00:22,296 A:middle
My name is Bruce Nilo.

5
00:00:22,366 --> 00:00:24,746 A:middle
I'm one of the engineers
on UIKit.

6
00:00:25,356 --> 00:00:28,506 A:middle
And we're going to be talking
about all the new stuff

7
00:00:28,506 --> 00:00:32,616 A:middle
that we've brought
into UIKit for iOS 8.

8
00:00:33,546 --> 00:00:37,276 A:middle
In case no one's told
you, it's a big release.

9
00:00:37,806 --> 00:00:38,756 A:middle
There's a lot of stuff.

10
00:00:38,756 --> 00:00:42,256 A:middle
And two weeks ago when I was
thinking about what I was going

11
00:00:42,256 --> 00:00:44,306 A:middle
to say, I said, "Piece of cake.

12
00:00:44,306 --> 00:00:46,726 A:middle
I'm just going to list
all the new features.

13
00:00:47,476 --> 00:00:51,826 A:middle
I'm going to also list all the
things that are going away.

14
00:00:51,826 --> 00:00:54,596 A:middle
And I'm done, right?"

15
00:00:54,596 --> 00:00:57,106 A:middle
Well, that's what
I ended up with,

16
00:00:57,746 --> 00:01:02,166 A:middle
and I realized I
really needed to cut

17

18
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

19
00:00:57,746 --> 00:01:02,166 A:middle
and I realized I
really needed to cut

20
00:01:02,316 --> 00:01:03,916 A:middle
down on what I was
going to talk about.

21
00:01:04,626 --> 00:01:06,746 A:middle
So this is where we ended up.

22
00:01:06,746 --> 00:01:12,456 A:middle
And I just want to point out,
though, that there's a lot more

23
00:01:12,456 --> 00:01:13,776 A:middle
than what I'm going
to talk about.

24
00:01:13,776 --> 00:01:19,196 A:middle
One of the most important things
that we're introducing in iOS 8,

25
00:01:19,196 --> 00:01:22,466 A:middle
in case you haven't heard,
is we are providing APIs

26
00:01:22,466 --> 00:01:23,926 A:middle
that are more adaptive.

27
00:01:24,546 --> 00:01:29,096 A:middle
What this means is that your
user interfaces can more easily

28
00:01:29,096 --> 00:01:33,766 A:middle
respond to changes in size
and other changes, as well.

29
00:01:34,966 --> 00:01:39,676 A:middle
UISplitViewController used to be
a kind of a pretty simple class.

30
00:01:40,366 --> 00:01:42,996 A:middle
Well, it's grown up in iOS
8, and we're going to talk

31
00:01:42,996 --> 00:01:44,606 A:middle
about some of the new features

32
00:01:44,606 --> 00:01:46,756 A:middle
that UISplitViewController
has to offer.

33
00:01:48,536 --> 00:01:52,496 A:middle
We're going to, while we're at
it, show how it's really easy

34
00:01:52,496 --> 00:01:55,596 A:middle
to hide bars in ways
that you've probably seen

35
00:01:55,596 --> 00:01:56,746 A:middle
in some of our own apps.

36
00:01:56,746 --> 00:02:01,036 A:middle
Then we're going to
shift gears a little bit

37

38
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

39
00:01:56,746 --> 00:02:01,036 A:middle
Then we're going to
shift gears a little bit

40
00:02:01,036 --> 00:02:03,046 A:middle
and talk about presentations.

41
00:02:03,486 --> 00:02:07,286 A:middle
Presentation controllers have
been introduced and are part

42
00:02:07,286 --> 00:02:10,136 A:middle
of a whole architectural
revamping

43
00:02:10,136 --> 00:02:12,226 A:middle
of how view controllers
are presented

44
00:02:12,226 --> 00:02:17,086 A:middle
and how you can create great
custom presentations yourselves.

45
00:02:17,146 --> 00:02:20,536 A:middle
That gave us the
opportunity, by the way,

46
00:02:20,536 --> 00:02:22,396 A:middle
to redo popovers, as well.

47
00:02:22,716 --> 00:02:25,036 A:middle
And popovers have
now become integrated

48
00:02:25,266 --> 00:02:27,346 A:middle
with UIViewController
presentations.

49
00:02:28,556 --> 00:02:31,136 A:middle
Finally we're going to talk-not
finally-we're also going to talk

50
00:02:31,136 --> 00:02:33,636 A:middle
about new a API that
we introduced

51
00:02:33,636 --> 00:02:35,906 A:middle
that builds upon
transition coordinators,

52
00:02:37,006 --> 00:02:40,036 A:middle
that also helps your
applications adapt.

53
00:02:40,556 --> 00:02:43,666 A:middle
And, finally, there's a subtle
but pretty important change

54
00:02:43,666 --> 00:02:47,486 A:middle
in terms of the coordinate
spaces

55
00:02:47,486 --> 00:02:49,706 A:middle
that you've grown to love.

56
00:02:49,706 --> 00:02:52,266 A:middle
And we'll talk about that
briefly when we wrap up.

57
00:02:53,256 --> 00:02:55,906 A:middle
So, you've probably
seen this picture,

58
00:02:55,906 --> 00:02:57,786 A:middle
or a variant of it, a few times.

59
00:02:59,586 --> 00:03:01,436 A:middle
Many hierarchical applications

60

61
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

62
00:02:59,586 --> 00:03:01,436 A:middle
Many hierarchical applications

63
00:03:01,436 --> 00:03:04,006 A:middle
on a phone might structure
themselves this way,

64
00:03:04,006 --> 00:03:05,656 A:middle
inside of a navigation
controller.

65
00:03:06,306 --> 00:03:09,736 A:middle
And there might be some
detail that you would see

66
00:03:11,036 --> 00:03:12,576 A:middle
when you hit the Back button.

67
00:03:16,726 --> 00:03:19,256 A:middle
And on an iPad, you might choose

68
00:03:19,256 --> 00:03:22,236 A:middle
to structure it a
little bit differently.

69
00:03:22,556 --> 00:03:24,626 A:middle
Again, this is all
kind of familiar stuff.

70
00:03:25,786 --> 00:03:28,716 A:middle
But there's no particular
reason why you shouldn't be able

71
00:03:28,716 --> 00:03:32,156 A:middle
to do this on an iPhone, if
it suited your application.

72
00:03:32,446 --> 00:03:34,616 A:middle
We're going to show
how that's possible.

73
00:03:36,756 --> 00:03:44,236 A:middle
So prior to iOS 8, most of
your application coarse-grained

74
00:03:44,236 --> 00:03:49,236 A:middle
structure was determined by
looking at the device type,

75
00:03:49,236 --> 00:03:52,966 A:middle
and possibly the interface
orientation, as well as the size

76
00:03:52,966 --> 00:03:56,756 A:middle
in which your user
interface was being presented.

77
00:03:58,106 --> 00:04:00,926 A:middle
In iOS 8, we've taken
the first two

78

79
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

80
00:03:58,106 --> 00:04:00,926 A:middle
In iOS 8, we've taken
the first two

81
00:04:01,056 --> 00:04:02,966 A:middle
and abstracted it a little bit

82
00:04:02,966 --> 00:04:06,276 A:middle
into two new concepts called
traits and trait collections.

83
00:04:07,106 --> 00:04:08,666 A:middle
Size is still available,

84
00:04:09,546 --> 00:04:13,266 A:middle
but typically size is a finer
grain type of layout operation

85
00:04:13,266 --> 00:04:16,866 A:middle
that can be easily
accommodated using technologies

86
00:04:16,866 --> 00:04:17,856 A:middle
like Auto Layout.

87
00:04:18,366 --> 00:04:20,426 A:middle
We're going to talk a little
bit more about the former.

88
00:04:20,426 --> 00:04:23,566 A:middle
We'll also address the
latter a little bit.

89
00:04:24,456 --> 00:04:26,336 A:middle
So what is a "trait collection"?

90
00:04:27,326 --> 00:04:33,426 A:middle
A trait collection, simply
put, is a set of traits.

91
00:04:33,786 --> 00:04:34,786 A:middle
Not too surprising.

92
00:04:37,026 --> 00:04:41,146 A:middle
On a phone, you might
see the window

93
00:04:41,226 --> 00:04:45,656 A:middle
of your application
return a trait collection

94
00:04:45,926 --> 00:04:49,536 A:middle
that has the following
traits: two size classes,

95
00:04:49,776 --> 00:04:51,876 A:middle
an idiom, and a display scale.

96
00:04:52,276 --> 00:04:58,496 A:middle
This typically is the way a
phone's traits are structured.

97
00:04:58,496 --> 00:05:01,236 A:middle
One of the most important traits

98

99
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

100
00:04:58,496 --> 00:05:01,236 A:middle
One of the most important traits

101
00:05:01,236 --> 00:05:03,926 A:middle
that we've introduced
is size class.

102
00:05:04,406 --> 00:05:09,096 A:middle
And size class deals
with, on a coarse level,

103
00:05:09,096 --> 00:05:13,576 A:middle
the available space that
your application has

104
00:05:13,576 --> 00:05:15,156 A:middle
and can therefore make decisions

105
00:05:15,156 --> 00:05:16,636 A:middle
about what its structure
should be.

106
00:05:17,406 --> 00:05:18,736 A:middle
Let's look at that quickly.

107
00:05:20,066 --> 00:05:20,686 A:middle
Here we have kind

108
00:05:20,686 --> 00:05:23,946 A:middle
of a cartoonish representation
of an iPhone.

109
00:05:27,666 --> 00:05:32,706 A:middle
And typically, the
vertical axis is going

110
00:05:33,076 --> 00:05:36,116 A:middle
to have a regular size class,

111
00:05:36,116 --> 00:05:37,976 A:middle
whereas the horizontal
axis is going

112
00:05:37,976 --> 00:05:39,786 A:middle
to have a compact size class.

113
00:05:41,356 --> 00:05:43,346 A:middle
If you rotate a phone,

114
00:05:46,886 --> 00:05:51,006 A:middle
we say that the size classes are
constrained in both the vertical

115
00:05:51,006 --> 00:05:52,686 A:middle
and the horizontal dimensions.

116
00:05:52,686 --> 00:05:57,966 A:middle
Now, an iPad is a
little bit more free.

117
00:05:59,556 --> 00:06:02,136 A:middle
It's regular in all
of its dimensions,

118

119
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

120
00:05:59,556 --> 00:06:02,136 A:middle
It's regular in all
of its dimensions,

121
00:06:02,266 --> 00:06:05,096 A:middle
or it has regular size classes
in all of its dimensions,

122
00:06:05,276 --> 00:06:08,316 A:middle
and that holds true when
you rotate it, as well.

123
00:06:11,876 --> 00:06:16,646 A:middle
But that's not the full story,
because some view controllers,

124
00:06:16,646 --> 00:06:20,456 A:middle
like split view controller, can
determine that its children,

125
00:06:20,456 --> 00:06:24,176 A:middle
in this case the primary child,
which is on the left side,

126
00:06:24,796 --> 00:06:30,366 A:middle
has a more constrained size
class in either dimension.

127
00:06:30,586 --> 00:06:32,186 A:middle
For a split view controller,

128
00:06:32,446 --> 00:06:35,476 A:middle
it constrains the
horizontal size class.

129
00:06:39,556 --> 00:06:46,956 A:middle
So, a size class is all about
informing your application

130
00:06:47,356 --> 00:06:50,426 A:middle
of the available space
in some coarse way

131
00:06:50,426 --> 00:06:51,606 A:middle
that you can make decisions

132
00:06:51,606 --> 00:06:54,676 A:middle
about how you would
substantially alter the

133
00:06:54,676 --> 00:06:56,056 A:middle
application's structure.

134

135
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

136
00:07:01,326 --> 00:07:05,386 A:middle
We have API on specific objects
that vend trait collections.

137
00:07:06,176 --> 00:07:11,676 A:middle
And in these cases they have
values for both the horizontal

138
00:07:11,676 --> 00:07:13,406 A:middle
and the vertical size classes.

139
00:07:13,736 --> 00:07:16,896 A:middle
Now, I like to think about the
trait collections that come back

140
00:07:16,896 --> 00:07:21,316 A:middle
from these objects as defining
a point in a trait space.

141
00:07:23,666 --> 00:07:27,716 A:middle
We've introduced a new
protocol that a number

142
00:07:27,716 --> 00:07:30,286 A:middle
of our objects conform to
which is a trait environment.

143
00:07:30,286 --> 00:07:32,406 A:middle
And you'll see the
hierarchy on the right is kind

144
00:07:32,406 --> 00:07:35,306 A:middle
of a window hierarchy
that starts from a screen

145
00:07:35,486 --> 00:07:37,086 A:middle
and proceeds down all the way

146
00:07:37,086 --> 00:07:39,276 A:middle
to the leaf view
elements that you have.

147
00:07:39,586 --> 00:07:43,066 A:middle
All these objects conform to
the trait environment protocol,

148
00:07:43,066 --> 00:07:45,256 A:middle
which means you can ask
them for a trait collection,

149
00:07:45,556 --> 00:07:48,526 A:middle
and what you get back is going
to be a point in a trait space

150
00:07:48,666 --> 00:07:50,606 A:middle
where every single
trait has a value.

151
00:07:51,356 --> 00:07:55,646 A:middle
And not all of these objects
define those values directly.

152
00:07:56,116 --> 00:07:59,176 A:middle
So, for example, if you asked
for the scale of a leaf,

153
00:07:59,176 --> 00:08:02,846 A:middle
the scale trait of the leaf
of a view, it might actually,

154

155
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

156
00:07:59,176 --> 00:08:02,846 A:middle
the scale trait of the leaf
of a view, it might actually,

157
00:08:02,846 --> 00:08:04,226 A:middle
the system might
walk all the way

158
00:08:04,226 --> 00:08:06,346 A:middle
up to the screen to get that.

159
00:08:06,376 --> 00:08:07,216 A:middle
But the trait collection

160
00:08:07,216 --> 00:08:09,736 A:middle
that you get back will have
a value for that scale.

161
00:08:10,766 --> 00:08:14,826 A:middle
Finally, you will notice
that whenever a trait changes

162
00:08:14,826 --> 00:08:17,606 A:middle
in a trait collection,
your object,

163
00:08:17,606 --> 00:08:20,536 A:middle
the appropriate object will get
a traitCollectionDidChange just

164
00:08:20,536 --> 00:08:24,146 A:middle
before that object is laid out,
so you can respond to that.

165
00:08:26,296 --> 00:08:30,576 A:middle
So I kind of implied before that
you can, that a view controller,

166
00:08:30,576 --> 00:08:31,816 A:middle
such as a split view controller,

167
00:08:31,816 --> 00:08:33,586 A:middle
can override the
traits for a child.

168
00:08:34,395 --> 00:08:36,756 A:middle
How do you do this?

169
00:08:36,936 --> 00:08:38,996 A:middle
Well, we've introduced
a couple of new methods

170
00:08:39,096 --> 00:08:42,216 A:middle
on UIViewController which
allow you to do precisely this.

171
00:08:42,326 --> 00:08:47,426 A:middle
SetOverrideTraitCollection
can be used by a parent

172
00:08:47,656 --> 00:08:50,676 A:middle
to indicate what the
appropriate traits are

173
00:08:50,676 --> 00:08:52,146 A:middle
for any one of its children.

174
00:08:52,366 --> 00:08:56,236 A:middle
The trait collection that
you pass in, in this case,

175
00:08:56,236 --> 00:08:57,966 A:middle
isn't a point in a trait space;

176
00:08:57,966 --> 00:09:02,936 A:middle
it might just be a single trait
value which is then overridden.

177

178
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

179
00:08:57,966 --> 00:09:02,936 A:middle
it might just be a single trait
value which is then overridden.

180
00:09:03,446 --> 00:09:06,216 A:middle
So what I wanted to do was,
before I go into the rest

181
00:09:06,216 --> 00:09:08,856 A:middle
of the talk, is I put together
kind of a toy application,

182
00:09:09,606 --> 00:09:11,556 A:middle
which is going to highlight
some of the features

183
00:09:11,556 --> 00:09:12,876 A:middle
that we're going to
talk about today.

184
00:09:14,176 --> 00:09:18,806 A:middle
This is kind of my canonical
little photo note-taking

185
00:09:18,876 --> 00:09:19,986 A:middle
toy application.

186
00:09:20,836 --> 00:09:23,986 A:middle
What you see here is basically
a pretty standard thing.

187
00:09:23,986 --> 00:09:26,306 A:middle
You see a navigation controller.

188
00:09:26,776 --> 00:09:30,056 A:middle
And I can hit the Back
button with this Photos,

189
00:09:30,216 --> 00:09:32,766 A:middle
and I get a list, which
is a simple table view.

190
00:09:33,296 --> 00:09:35,956 A:middle
I can select things.

191
00:09:35,956 --> 00:09:36,576 A:middle
That's great.

192
00:09:37,276 --> 00:09:39,276 A:middle
What's interesting, is that
this is actually a split

193
00:09:39,276 --> 00:09:40,106 A:middle
view controller.

194
00:09:41,416 --> 00:09:46,236 A:middle
Notice when I rotate, I stay
inside a navigation controller.

195
00:09:46,556 --> 00:09:47,946 A:middle
However, I can do
something interesting.

196
00:09:47,946 --> 00:09:52,206 A:middle
You see there's a Split button
on the bottom of this toolbar.

197
00:09:52,516 --> 00:09:55,856 A:middle
If I hit it, you can now see
a little bit more clearly

198
00:09:55,856 --> 00:09:58,766 A:middle
that this is, in fact, really
a split view controller.

199
00:09:59,546 --> 00:10:04,046 A:middle
You'll also notice that
when I-let's hide this.

200

201
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

202
00:09:59,546 --> 00:10:04,046 A:middle
You'll also notice that
when I-let's hide this.

203
00:10:04,046 --> 00:10:06,256 A:middle
I can tap and interact
with the bars.

204
00:10:06,256 --> 00:10:12,016 A:middle
I can create, I can move that
primary controller off-screen.

205
00:10:12,646 --> 00:10:15,656 A:middle
But one of the things we're
going to show is how easy it is

206
00:10:15,656 --> 00:10:20,126 A:middle
to hide the bars if I
tap on a view controller.

207
00:10:20,126 --> 00:10:22,166 A:middle
I can also get that Safari look

208
00:10:22,386 --> 00:10:24,876 A:middle
where the bars condense
really easily.

209
00:10:28,066 --> 00:10:32,816 A:middle
Alright. Let's go back

210
00:10:32,816 --> 00:10:37,816 A:middle
into a regular old
navigation controller look,

211
00:10:37,946 --> 00:10:40,976 A:middle
and let's hit this Note button.

212
00:10:41,046 --> 00:10:46,336 A:middle
The Note button is going
to do a presentation.

213
00:10:46,336 --> 00:10:48,416 A:middle
This is a view controller
presentation.

214
00:10:49,036 --> 00:10:51,716 A:middle
It takes advantage of
a couple of new classes

215
00:10:51,716 --> 00:10:54,126 A:middle
that I might mention as
we go through the talk.

216
00:10:55,036 --> 00:10:58,356 A:middle
What's interesting is this is,
in fact, a popover presentation.

217
00:10:59,006 --> 00:11:00,816 A:middle
Now, I'll get into
that a little bit later

218

219
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

220
00:10:59,006 --> 00:11:00,816 A:middle
Now, I'll get into
that a little bit later

221
00:11:00,816 --> 00:11:01,826 A:middle
because it certainly
doesn't look

222
00:11:01,826 --> 00:11:03,326 A:middle
like a popover presentation.

223
00:11:03,806 --> 00:11:07,986 A:middle
But if I do something special
on this little toy app-well,

224
00:11:07,986 --> 00:11:09,526 A:middle
it didn't quite do it that time.

225
00:11:10,296 --> 00:11:12,906 A:middle
Now you'll see that that same
thing is, in fact, a popover.

226
00:11:12,906 --> 00:11:15,266 A:middle
And we'll go through
that a little bit.

227
00:11:16,296 --> 00:11:20,426 A:middle
Finally, I wanted to talk about,
a little bit about rotation.

228
00:11:20,506 --> 00:11:25,376 A:middle
And to do that, I'm going to
present another view controller.

229
00:11:25,376 --> 00:11:28,116 A:middle
This time it's a collection view
controller, which has a bunch

230
00:11:28,116 --> 00:11:29,826 A:middle
of little thumbnail photos.

231
00:11:29,826 --> 00:11:31,816 A:middle
And if I were to
rotate the device now,

232
00:11:32,366 --> 00:11:36,116 A:middle
the normal collection view flow
layout behavior would basically

233
00:11:36,116 --> 00:11:39,686 A:middle
relay things out so that
everything is oriented now

234
00:11:39,946 --> 00:11:41,536 A:middle
in the horizontal direction.

235
00:11:41,986 --> 00:11:45,926 A:middle
However, if I wanted to change
what happened when I rotated

236
00:11:45,926 --> 00:11:48,116 A:middle
so that it did something
more akin to this,

237
00:11:48,116 --> 00:11:51,956 A:middle
there's some interesting
things that we can do.

238
00:11:52,206 --> 00:11:56,966 A:middle
And this is a perfect example
of when you would use some

239
00:11:56,966 --> 00:11:58,716 A:middle
of the methods like willRotate,

240
00:11:58,716 --> 00:12:00,476 A:middle
interface orientation,
and so forth.

241

242
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

243
00:11:58,716 --> 00:12:00,476 A:middle
interface orientation,
and so forth.

244
00:12:00,476 --> 00:12:02,486 A:middle
So we're going to talk about
that a little bit, as well.

245
00:12:03,296 --> 00:12:06,356 A:middle
Alright, so enough of a taste of
what we're going to talk about.

246
00:12:06,356 --> 00:12:10,836 A:middle
Let's go back to
the presentation.

247
00:12:15,106 --> 00:12:17,106 A:middle
And let's talk about
split view controller.

248
00:12:20,276 --> 00:12:24,866 A:middle
So as I kind of implied, split
view controller is now available

249
00:12:25,236 --> 00:12:27,696 A:middle
on the phone, as
well as on the iPad,

250
00:12:27,986 --> 00:12:32,316 A:middle
and it has this interesting
new property.

251
00:12:32,546 --> 00:12:35,546 A:middle
It has a property of being
collapsed or not collapsed.

252
00:12:36,556 --> 00:12:39,196 A:middle
Now, what does it mean for
a split view controller

253
00:12:39,196 --> 00:12:41,456 A:middle
to be collapsed or expanded?

254
00:12:42,256 --> 00:12:45,316 A:middle
Well, an expanded
split view controller,

255
00:12:45,896 --> 00:12:47,956 A:middle
it's kind of obvious,
might look like this.

256
00:12:48,566 --> 00:12:51,086 A:middle
However, it's not
just a question

257
00:12:51,086 --> 00:12:53,516 A:middle
of the two children
being visible.

258
00:12:54,466 --> 00:12:58,846 A:middle
So I'm highlighting the
secondary view controller

259
00:12:58,846 --> 00:13:02,806 A:middle
of this split view controller,
and you're going to notice

260

261
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

262
00:12:58,846 --> 00:13:02,806 A:middle
of this split view controller,
and you're going to notice

263
00:13:02,806 --> 00:13:05,606 A:middle
that there's a little
button off to the left.

264
00:13:05,606 --> 00:13:07,536 A:middle
We call that the
displayModeButtonItem.

265
00:13:08,176 --> 00:13:11,596 A:middle
When I click on that,
I can expand

266
00:13:11,596 --> 00:13:13,106 A:middle
out the split view controller.

267
00:13:13,386 --> 00:13:14,866 A:middle
And even though we're
only looking

268
00:13:14,866 --> 00:13:16,496 A:middle
at the secondary controller,

269
00:13:16,656 --> 00:13:19,766 A:middle
that split view controller
is still expanded.

270
00:13:19,766 --> 00:13:20,976 A:middle
It is not collapsed.

271
00:13:20,976 --> 00:13:23,486 A:middle
And the reason why that is
is because it's possible

272
00:13:23,776 --> 00:13:27,396 A:middle
to show the primary
controller at the same time

273
00:13:27,766 --> 00:13:29,896 A:middle
as the secondary controller.

274
00:13:30,356 --> 00:13:35,456 A:middle
On the other hand, this is a
collapsed split view controller.

275
00:13:35,486 --> 00:13:38,146 A:middle
You'll notice that the
displayModeButtonItem that was

276
00:13:38,146 --> 00:13:39,656 A:middle
on the left side is gone.

277
00:13:39,656 --> 00:13:41,836 A:middle
You can no longer
show the primary

278
00:13:41,836 --> 00:13:43,856 A:middle
and secondary controllers
together.

279
00:13:44,106 --> 00:13:47,026 A:middle
They've been collapsed,
and you can now get

280
00:13:47,026 --> 00:13:49,536 A:middle
to the primary controller
by hitting the Back button,

281
00:13:49,696 --> 00:13:51,806 A:middle
which is up on the
top-left corner.

282
00:13:52,266 --> 00:13:53,636 A:middle
So that's kind of
what the difference is

283
00:13:53,636 --> 00:13:54,996 A:middle
between the split
view controller

284
00:13:54,996 --> 00:13:57,576 A:middle
in its collapsed state
and its expanded state.

285
00:13:58,806 --> 00:14:02,456 A:middle
It's important to know
that split view controller

286

287
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

288
00:13:58,806 --> 00:14:02,456 A:middle
It's important to know
that split view controller

289
00:14:02,456 --> 00:14:06,286 A:middle
by default are collapsed
when they're

290
00:14:06,286 --> 00:14:08,736 A:middle
in horizontally compact
containers.

291
00:14:09,226 --> 00:14:13,216 A:middle
So by default on a phone, if
you use a split view controller,

292
00:14:13,216 --> 00:14:18,996 A:middle
it's going to appear in
this collapsed state.

293
00:14:19,186 --> 00:14:24,126 A:middle
So I've implied that you can
enable the expanded state

294
00:14:24,126 --> 00:14:26,276 A:middle
of a split view controller
on the phone already.

295
00:14:27,336 --> 00:14:28,136 A:middle
How do you do that?

296
00:14:28,946 --> 00:14:31,246 A:middle
Well, it's actually quite
simple and straightforward.

297
00:14:32,356 --> 00:14:34,136 A:middle
You probably know
the answer already.

298
00:14:34,816 --> 00:14:38,096 A:middle
First of all, you're going to
take your split view controller

299
00:14:38,096 --> 00:14:39,476 A:middle
and you're going to embed it

300
00:14:39,476 --> 00:14:45,676 A:middle
in a parent container view
controller, as follows.

301
00:14:46,896 --> 00:14:51,666 A:middle
You're then going to call
setOverrideTraitCollection.

302
00:14:52,626 --> 00:14:56,546 A:middle
And you're going to inform that
child split view controller

303
00:14:56,546 --> 00:14:59,846 A:middle
that it is now in a horizontally
regular environment.

304

305
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

306
00:15:01,196 --> 00:15:05,876 A:middle
The second you do that, the
split view controller morphs

307
00:15:05,876 --> 00:15:09,606 A:middle
into its expanded or
not collapsed state.

308
00:15:10,596 --> 00:15:12,686 A:middle
You'll notice that the
displayModeButtonItem,

309
00:15:12,686 --> 00:15:15,206 A:middle
which is titled Photos
in the lower left corner,

310
00:15:15,206 --> 00:15:16,716 A:middle
has now become enabled.

311
00:15:17,696 --> 00:15:21,596 A:middle
If I wanted to show both
controllers together,

312
00:15:21,596 --> 00:15:26,156 A:middle
side by side, I could click
on that displayModeButtonItem.

313
00:15:26,696 --> 00:15:28,956 A:middle
But we've also introduced
a property called

314
00:15:28,956 --> 00:15:31,826 A:middle
preferredDisplayMode, which
you can use programmatically.

315
00:15:34,746 --> 00:15:38,446 A:middle
If you set the
preferredDisplayMode

316
00:15:38,446 --> 00:15:44,416 A:middle
to the all visible
value, it's the same as,

317
00:15:45,216 --> 00:15:47,236 A:middle
the same behavior would
occur as if you clicked

318
00:15:47,236 --> 00:15:48,666 A:middle
on the displayModeButtonItem.

319
00:15:48,666 --> 00:15:51,216 A:middle
And you'll also notice the
displayModeButtonItem morphs

320
00:15:51,436 --> 00:15:55,926 A:middle
into this kind of
diagonal double arrow.

321
00:15:57,576 --> 00:16:00,346 A:middle
These items, this
display mode item

322

323
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

324
00:15:57,576 --> 00:16:00,346 A:middle
These items, this
display mode item

325
00:16:00,346 --> 00:16:03,006 A:middle
and this behavior
are all customizable.

326
00:16:03,006 --> 00:16:06,226 A:middle
And this is via delegate
API that you can look

327
00:16:06,226 --> 00:16:07,556 A:middle
at in the header files
that I'm not going

328
00:16:07,556 --> 00:16:09,116 A:middle
to have time to talk
about today.

329
00:16:09,626 --> 00:16:14,536 A:middle
So to go over some of that API,

330
00:16:14,536 --> 00:16:18,626 A:middle
preferredDisplayMode
is an enumeration.

331
00:16:19,326 --> 00:16:23,576 A:middle
Enumerated values are automatic,
hidden, visible, and overlay.

332
00:16:23,636 --> 00:16:25,716 A:middle
Automatic is the old behavior

333
00:16:25,716 --> 00:16:28,356 A:middle
that you are familiar
with on iPads.

334
00:16:29,096 --> 00:16:31,576 A:middle
Hidden and visible
are explicit means

335
00:16:31,576 --> 00:16:34,296 A:middle
by which you can
control the layout

336
00:16:34,296 --> 00:16:36,796 A:middle
of the split view
controller so that the primary

337
00:16:36,796 --> 00:16:38,516 A:middle
and secondary are side by side.

338
00:16:38,776 --> 00:16:40,636 A:middle
An overlay is an explicit way

339
00:16:40,636 --> 00:16:43,096 A:middle
that you can have the
primary kind of go

340
00:16:43,096 --> 00:16:45,006 A:middle
over the top of the secondary.

341
00:16:47,536 --> 00:16:52,356 A:middle
The displayModeButtonItem is
also accessible in this API,

342
00:16:52,356 --> 00:16:55,326 A:middle
so you can ask the split view
controller for it and put it

343
00:16:55,326 --> 00:16:56,536 A:middle
in whatever bar you want.

344
00:16:56,536 --> 00:16:59,676 A:middle
Although I'm not going to say it
explicitly, if you were to look

345
00:16:59,676 --> 00:17:01,786 A:middle
in the header files of
UISplitViewController,

346

347
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

348
00:16:59,676 --> 00:17:01,786 A:middle
in the header files of
UISplitViewController,

349
00:17:01,786 --> 00:17:04,955 A:middle
you would find that most
of the API that used

350
00:17:04,955 --> 00:17:07,955 A:middle
to be there is now deprecated
and replaced by new API.

351
00:17:11,366 --> 00:17:13,786 A:middle
One thing that I'd like
to say is that a lot

352
00:17:13,786 --> 00:17:16,965 A:middle
of people have always wanted
to control the split width,

353
00:17:16,965 --> 00:17:18,976 A:middle
and we've made that
really easy to do.

354
00:17:23,406 --> 00:17:25,165 A:middle
So there's a new
method, a new property,

355
00:17:25,165 --> 00:17:27,205 A:middle
preferredPrimary
ColumnWidthFraction.

356
00:17:27,366 --> 00:17:29,756 A:middle
And if I were to set
that to one-half, say,

357
00:17:31,206 --> 00:17:32,756 A:middle
the split width changes.

358
00:17:35,476 --> 00:17:38,606 A:middle
The API that enables
that is this.

359
00:17:38,606 --> 00:17:41,126 A:middle
You can set a minimum
and maximum bound

360
00:17:41,126 --> 00:17:43,266 A:middle
of the split width
in terms of points.

361
00:17:44,396 --> 00:17:46,706 A:middle
You specify the split
in terms of a fraction

362
00:17:46,706 --> 00:17:49,616 A:middle
and you can read back
the actual point value

363
00:17:50,136 --> 00:17:51,806 A:middle
with the primary
column width property.

364
00:17:55,676 --> 00:17:56,966 A:middle
So what have we learned here?

365
00:17:57,456 --> 00:18:00,056 A:middle
One is, is that split view
controllers can be used

366

367
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

368
00:17:57,456 --> 00:18:00,056 A:middle
One is, is that split view
controllers can be used

369
00:18:00,056 --> 00:18:01,606 A:middle
on both the iPhone and the iPad.

370
00:18:01,876 --> 00:18:05,606 A:middle
This makes it easy to write
code that is kind of agnostic

371
00:18:05,606 --> 00:18:08,596 A:middle
about the platform that it's
going to be deployed on.

372
00:18:09,016 --> 00:18:11,506 A:middle
If you have a certain
type of application layout

373
00:18:11,506 --> 00:18:15,016 A:middle
that makes sense in
either a collapsed state

374
00:18:15,016 --> 00:18:17,406 A:middle
or an expanded split view
controller state based

375
00:18:17,406 --> 00:18:21,166 A:middle
on the available space,
create a split view controller

376
00:18:21,166 --> 00:18:23,536 A:middle
and the split view controller
will adapt accordingly.

377
00:18:25,726 --> 00:18:28,276 A:middle
Split view controllers
are collapsed by default

378
00:18:28,276 --> 00:18:30,446 A:middle
in horizontally compact
environments.

379
00:18:32,696 --> 00:18:35,996 A:middle
The displayMode property
controls the appearance

380
00:18:35,996 --> 00:18:39,586 A:middle
of the primary or left
child view controller.

381
00:18:39,586 --> 00:18:44,956 A:middle
And you can also now
specify the split width.

382
00:18:47,426 --> 00:18:50,866 A:middle
So there are a lot of
other API that we added

383
00:18:50,866 --> 00:18:51,956 A:middle
to split view controller.

384
00:18:52,746 --> 00:18:55,076 A:middle
There's going to be a talk
immediately following this one

385
00:18:55,076 --> 00:18:58,696 A:middle
which talks about in more depth
all of the new adaptive APIs

386
00:18:58,696 --> 00:19:01,146 A:middle
that we've added
to UIViewController

387

388
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

389
00:18:58,696 --> 00:19:01,146 A:middle
that we've added
to UIViewController

390
00:19:01,146 --> 00:19:03,796 A:middle
and UISplitViewController
that you can attend

391
00:19:03,796 --> 00:19:05,906 A:middle
and get more information.

392
00:19:07,036 --> 00:19:08,986 A:middle
So let's talk about
condensing bars.

393
00:19:10,176 --> 00:19:13,096 A:middle
It's all about available space
and highlighting your content.

394
00:19:13,156 --> 00:19:15,116 A:middle
So we wanted to make
it easy to do.

395
00:19:15,886 --> 00:19:18,166 A:middle
It's really easy now
to hide your bars.

396
00:19:19,656 --> 00:19:24,456 A:middle
Just set the hideBarsOnTop
property, and they're gone.

397
00:19:24,556 --> 00:19:24,676 A:middle
If you-

398
00:19:27,516 --> 00:19:33,306 A:middle
[ Applause ]

399
00:19:33,806 --> 00:19:35,336 A:middle
So what about that
gray, you know,

400
00:19:35,336 --> 00:19:39,106 A:middle
kind of Safari-looking
condensing bar behavior?

401
00:19:39,436 --> 00:19:41,326 A:middle
Well, we've added a
property for that, too.

402
00:19:42,176 --> 00:19:45,656 A:middle
Just set it to YES; when you
swipe, those bars condense.

403
00:19:46,516 --> 00:19:52,716 A:middle
[ Applause ]

404
00:19:53,216 --> 00:19:55,946 A:middle
So we've added a couple of
other properties, as well.

405
00:19:56,056 --> 00:19:58,696 A:middle
You know, the bars
can hide when you're

406
00:19:58,696 --> 00:20:01,596 A:middle
in a vertically compact
environment.

407

408
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

409
00:19:58,696 --> 00:20:01,596 A:middle
in a vertically compact
environment.

410
00:20:02,256 --> 00:20:04,546 A:middle
They might condense when
the keyboard appears.

411
00:20:04,546 --> 00:20:07,736 A:middle
You can control this
all programmatically

412
00:20:07,736 --> 00:20:11,596 A:middle
with an animatable property
called navigationBarCondensed.

413
00:20:11,736 --> 00:20:14,116 A:middle
Well, at least you can
control the condensing behavior

414
00:20:14,116 --> 00:20:17,586 A:middle
that way.

415
00:20:17,796 --> 00:20:20,606 A:middle
So, yeah, that's it
for condensing bars.

416
00:20:22,656 --> 00:20:25,666 A:middle
Okay, now the easy
stuff is all done.

417
00:20:25,666 --> 00:20:27,946 A:middle
Let's talk about
presentation controllers.

418
00:20:28,976 --> 00:20:31,966 A:middle
We have revamped the
presentation architecture

419
00:20:31,966 --> 00:20:34,986 A:middle
for view controllers on iOS 8.

420
00:20:37,036 --> 00:20:41,626 A:middle
You might recall that in
iOS 7 we allowed developers

421
00:20:41,626 --> 00:20:45,066 A:middle
for the first time to
customize what the presentation

422
00:20:45,066 --> 00:20:46,986 A:middle
transitions looked like.

423
00:20:48,236 --> 00:20:51,476 A:middle
Let's go back and
kind of talk about how

424
00:20:51,476 --> 00:20:53,426 A:middle
that looked and how
you did that.

425
00:20:53,996 --> 00:20:56,586 A:middle
So, first of all, what you
would do is, the view controller

426
00:20:56,586 --> 00:20:58,166 A:middle
that you wanted to present,

427
00:20:58,426 --> 00:21:01,766 A:middle
you would set the
presentation style to Custom.

428

429
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

430
00:20:58,426 --> 00:21:01,766 A:middle
you would set the
presentation style to Custom.

431
00:21:03,016 --> 00:21:06,116 A:middle
You would also set a
transitioning delegate

432
00:21:06,176 --> 00:21:09,546 A:middle
on that presented, on that view
controller to be presented.

433
00:21:10,106 --> 00:21:13,106 A:middle
And then you would just
present the way you normally do.

434
00:21:13,346 --> 00:21:14,816 A:middle
You'd tell the presenting
view controller

435
00:21:14,816 --> 00:21:18,066 A:middle
presentViewController, at which
point the system takes over.

436
00:21:19,626 --> 00:21:22,876 A:middle
UIKit will ask the
transitioning delegate

437
00:21:23,146 --> 00:21:26,776 A:middle
for the animation
controller that is your object

438
00:21:26,776 --> 00:21:27,626 A:middle
that is vended

439
00:21:27,626 --> 00:21:29,836 A:middle
by the transitioning
delegate that you've set.

440
00:21:29,836 --> 00:21:35,266 A:middle
At which point UIKit
prepares this internal object

441
00:21:36,386 --> 00:21:39,886 A:middle
which conforms to this context
transitioning protocol to set

442
00:21:39,886 --> 00:21:42,636 A:middle
up some information that
you need to know in order

443
00:21:42,636 --> 00:21:44,706 A:middle
to drive your custom transition.

444
00:21:45,766 --> 00:21:47,596 A:middle
The views that are participating

445
00:21:47,636 --> 00:21:51,276 A:middle
in this custom presentation
are accessed via this

446
00:21:51,276 --> 00:21:53,146 A:middle
viewControllerForKey property.

447
00:21:53,146 --> 00:21:55,006 A:middle
And then there's
frame information

448
00:21:55,006 --> 00:21:55,976 A:middle
and all of that stuff.

449
00:21:56,296 --> 00:22:00,826 A:middle
Now this object is passed into
another method that is generated

450

451
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

452
00:21:56,296 --> 00:22:00,826 A:middle
Now this object is passed into
another method that is generated

453
00:22:00,826 --> 00:22:04,926 A:middle
by UIKit to your animation
controller, animateTransition.

454
00:22:05,776 --> 00:22:09,486 A:middle
You do your animation, the
presentation's complete,

455
00:22:09,716 --> 00:22:11,666 A:middle
and the animation
controller goes away,

456
00:22:11,666 --> 00:22:13,176 A:middle
and everything's good.

457
00:22:13,176 --> 00:22:17,566 A:middle
Well, there were a couple
of problems with that.

458
00:22:17,566 --> 00:22:19,496 A:middle
Let's look at the view hierarchy

459
00:22:19,586 --> 00:22:22,006 A:middle
to see what those
problems might have been.

460
00:22:23,086 --> 00:22:25,116 A:middle
So we have the presenting
view controller's view.

461
00:22:26,186 --> 00:22:29,226 A:middle
When the animation controller's
vended, we set up kind

462
00:22:29,226 --> 00:22:32,166 A:middle
of the environment in which this
transition animation is going

463
00:22:32,166 --> 00:22:33,196 A:middle
to take place.

464
00:22:33,376 --> 00:22:36,116 A:middle
That's kind of the container
view that the context,

465
00:22:36,116 --> 00:22:38,816 A:middle
the transitioning
context is pointing

466
00:22:38,816 --> 00:22:40,996 A:middle
to that your animation
controller accesses.

467
00:22:42,516 --> 00:22:46,896 A:middle
When we send the
animateTransition message

468
00:22:46,896 --> 00:22:48,296 A:middle
to the animation controller,

469
00:22:49,786 --> 00:22:52,156 A:middle
it's the animation
controller now that's groveling

470
00:22:52,156 --> 00:22:55,406 A:middle
in the view hierarchy,
adding special views,

471
00:22:55,486 --> 00:22:58,156 A:middle
adding the presented
view controller's view,

472
00:22:58,486 --> 00:23:02,996 A:middle
and one of the neat things-it
was a feature in iOS 7-is

473

474
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

475
00:22:58,486 --> 00:23:02,996 A:middle
and one of the neat things-it
was a feature in iOS 7-is

476
00:23:02,996 --> 00:23:04,606 A:middle
that we didn't remove
the presenting view

477
00:23:04,606 --> 00:23:05,476 A:middle
controller's view.

478
00:23:05,856 --> 00:23:09,316 A:middle
And so this is what
it ended up with,

479
00:23:09,316 --> 00:23:10,906 A:middle
and the animation
controller went away.

480
00:23:12,346 --> 00:23:15,906 A:middle
Okay, so the first question
that comes to mind is,

481
00:23:16,506 --> 00:23:19,346 A:middle
what object owns all these
other-these views that are lying

482
00:23:19,346 --> 00:23:22,426 A:middle
around that just got added
by that animation controller?

483
00:23:22,426 --> 00:23:25,546 A:middle
Well, there wasn't a
good answer for that.

484
00:23:25,546 --> 00:23:29,746 A:middle
In fact, that ended up
causing a tight coupling

485
00:23:30,206 --> 00:23:31,806 A:middle
between the animation
controllers

486
00:23:31,806 --> 00:23:34,486 A:middle
that were doing a presentation
and the animation controllers

487
00:23:34,486 --> 00:23:35,706 A:middle
that were doing a dismissal.

488
00:23:36,446 --> 00:23:39,316 A:middle
Sometimes that was
easy to manage.

489
00:23:39,436 --> 00:23:41,076 A:middle
Sometimes it caused problems.

490
00:23:41,646 --> 00:23:42,976 A:middle
It often caused problems

491
00:23:42,976 --> 00:23:45,576 A:middle
when view controller
presentations were being stacked

492
00:23:45,576 --> 00:23:46,566 A:middle
on top of one another.

493
00:23:48,206 --> 00:23:50,066 A:middle
So let's look at
what we do in iOS 8.

494
00:23:50,706 --> 00:23:53,046 A:middle
It's going to look pretty
similar in the beginning.

495
00:23:53,046 --> 00:23:55,086 A:middle
You're going to set
the presentation style,

496
00:23:55,446 --> 00:23:56,286 A:middle
just like before.

497
00:23:56,286 --> 00:23:58,556 A:middle
You're going to set a
transitioning delegate,

498
00:23:58,986 --> 00:23:59,916 A:middle
just like before.

499

500
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

501
00:24:00,966 --> 00:24:03,996 A:middle
You're going to send a
presentViewController message

502
00:24:04,056 --> 00:24:06,746 A:middle
to the presenting view
controller, just like before.

503
00:24:08,476 --> 00:24:12,396 A:middle
However, now the transitioning
delegate has grown a couple

504
00:24:12,396 --> 00:24:13,166 A:middle
of new methods.

505
00:24:13,466 --> 00:24:16,806 A:middle
You can now get then
this new object called a

506
00:24:16,806 --> 00:24:18,056 A:middle
presentation controller.

507
00:24:19,436 --> 00:24:24,326 A:middle
And now it is the presentation
controller that's responsible

508
00:24:24,516 --> 00:24:26,186 A:middle
for asking the transitioning
delegate

509
00:24:26,266 --> 00:24:29,976 A:middle
for the animation
controller and, in fact,

510
00:24:29,976 --> 00:24:32,826 A:middle
for driving the actual
transition.

511
00:24:32,826 --> 00:24:34,726 A:middle
Now, there's a lot of
neat things under the hood

512
00:24:34,726 --> 00:24:37,006 A:middle
that are going on
here, and there's going

513
00:24:37,006 --> 00:24:39,856 A:middle
to be a whole talk
tomorrow, I believe,

514
00:24:39,906 --> 00:24:41,916 A:middle
about presentation
controllers, in depth,

515
00:24:41,916 --> 00:24:46,826 A:middle
and how we used the UIKit to
introduce some new API, as well.

516
00:24:47,796 --> 00:24:50,796 A:middle
But for now, let's
look at what's going

517
00:24:50,796 --> 00:24:51,806 A:middle
on in the view hierarchy.

518
00:24:52,936 --> 00:24:56,846 A:middle
So now, you'll remember you
have this view hierarchy

519
00:24:56,846 --> 00:24:58,756 A:middle
that corresponds to
this custom transition.

520
00:24:59,066 --> 00:25:00,836 A:middle
The presentation
controller's still around,

521

522
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

523
00:24:59,066 --> 00:25:00,836 A:middle
The presentation
controller's still around,

524
00:25:00,836 --> 00:25:03,676 A:middle
and it holds a reference
to the container view,

525
00:25:03,986 --> 00:25:06,306 A:middle
which is where the whole
transition is happening.

526
00:25:07,546 --> 00:25:08,826 A:middle
It also holds a reference

527
00:25:08,826 --> 00:25:10,586 A:middle
to this thing called
a presented view.

528
00:25:11,286 --> 00:25:12,676 A:middle
Now I want to point out,

529
00:25:12,676 --> 00:25:16,576 A:middle
the presented view is
not necessarily the view

530
00:25:16,576 --> 00:25:18,546 A:middle
of the view controller
that's being presented.

531
00:25:19,346 --> 00:25:21,776 A:middle
Maybe I put a drop
shadow around that view

532
00:25:21,896 --> 00:25:24,406 A:middle
because that's what my
custom presentation demanded.

533
00:25:25,956 --> 00:25:28,306 A:middle
In order to accommodate that,

534
00:25:29,516 --> 00:25:32,746 A:middle
we had to augment the context
transitioning protocol a

535
00:25:32,746 --> 00:25:33,196 A:middle
little bit.

536
00:25:33,386 --> 00:25:36,536 A:middle
So we added this new
method called viewForKey.

537
00:25:37,346 --> 00:25:39,426 A:middle
ViewControllerForKey
still exists,

538
00:25:39,426 --> 00:25:42,266 A:middle
but viewForKey may
return a different view

539
00:25:42,266 --> 00:25:44,406 A:middle
than the viewControllerForKey.

540
00:25:44,636 --> 00:25:46,876 A:middle
And so when you build a
custom animation controller,

541
00:25:46,876 --> 00:25:50,296 A:middle
you want to make sure that
you use the viewForKey methods

542
00:25:50,296 --> 00:25:53,426 A:middle
to figure out which views
are actually participating

543
00:25:53,656 --> 00:25:54,526 A:middle
in the animation.

544
00:25:58,056 --> 00:26:02,366 A:middle
A presentation controller can
also add other types of views

545

546
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

547
00:25:58,056 --> 00:26:02,366 A:middle
A presentation controller can
also add other types of views

548
00:26:02,366 --> 00:26:05,966 A:middle
that are completely
unknown to other types

549
00:26:05,966 --> 00:26:09,176 A:middle
of presentation controllers,
say, like a dimming view

550
00:26:09,176 --> 00:26:13,976 A:middle
that it wants to put over the
entire back of the presentation.

551
00:26:15,926 --> 00:26:18,256 A:middle
I mentioned that in iOS 7,

552
00:26:18,676 --> 00:26:22,196 A:middle
by default the presenting view
controller's view was left

553
00:26:22,196 --> 00:26:23,266 A:middle
in the window hierarchy.

554
00:26:23,346 --> 00:26:25,576 A:middle
Well, presentation controllers
have a very rich API,

555
00:26:25,576 --> 00:26:29,536 A:middle
and if you build your own,
you can specify properties

556
00:26:29,536 --> 00:26:34,156 A:middle
such as shouldRemove, should the
presentation view controller's

557
00:26:34,156 --> 00:26:35,326 A:middle
view be removed or not.

558
00:26:35,326 --> 00:26:38,316 A:middle
And if you set it to YES, it
will automatically get removed.

559
00:26:40,156 --> 00:26:43,596 A:middle
There's one other property
which is, I'm raising here

560
00:26:43,596 --> 00:26:44,896 A:middle
because I think anyone

561
00:26:44,896 --> 00:26:46,966 A:middle
who builds a custom
presentation controller needs

562
00:26:46,966 --> 00:26:48,326 A:middle
to at least be aware of,

563
00:26:48,646 --> 00:26:50,416 A:middle
which is the
shouldPresentInFullscreen

564
00:26:50,416 --> 00:26:50,926 A:middle
property.

565
00:26:51,236 --> 00:26:55,276 A:middle
What this means is that a
presentation will effectively,

566
00:26:55,276 --> 00:27:00,596 A:middle
its container will be in the
window and its, and the frame

567

568
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

569
00:26:55,276 --> 00:27:00,596 A:middle
its container will be in the
window and its, and the frame

570
00:27:00,596 --> 00:27:03,126 A:middle
of that container view will
effectively be the bounds

571
00:27:03,126 --> 00:27:03,746 A:middle
of the window.

572
00:27:04,346 --> 00:27:11,416 A:middle
If you implement a custom
presentation controller and set

573
00:27:11,416 --> 00:27:12,976 A:middle
that property to NO,

574
00:27:13,796 --> 00:27:16,006 A:middle
your presentation
will no longer adapt.

575
00:27:17,236 --> 00:27:19,666 A:middle
Now, I know that doesn't make
quite a lot of sense yet,

576
00:27:19,666 --> 00:27:21,766 A:middle
but we're going to
go through some stuff

577
00:27:21,766 --> 00:27:23,956 A:middle
and then it will
become more clear.

578
00:27:25,356 --> 00:27:30,506 A:middle
So let's quickly talk about some
of the API that has been added

579
00:27:30,556 --> 00:27:32,066 A:middle
for presentation controllers.

580
00:27:32,486 --> 00:27:34,416 A:middle
One is that you'll
notice that it appears,

581
00:27:34,416 --> 00:27:37,006 A:middle
it conforms to the
appearance container protocol,

582
00:27:37,316 --> 00:27:40,156 A:middle
the trait environment
protocol, and this new protocol

583
00:27:40,156 --> 00:27:42,506 A:middle
which we'll talk about in a
bit called content container.

584
00:27:43,106 --> 00:27:45,406 A:middle
We talked about the
containerView properties

585
00:27:45,406 --> 00:27:48,446 A:middle
and the presentedView method
and these two other properties.

586
00:27:48,576 --> 00:27:53,596 A:middle
As I said, there's a whole bunch
of methods and logic available

587
00:27:53,596 --> 00:27:56,976 A:middle
for you to create fantastic
new custom presentations.

588
00:27:57,836 --> 00:28:00,986 A:middle
But that's beyond the
scope of this talk.

589

590
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

591
00:27:57,836 --> 00:28:00,986 A:middle
But that's beyond the
scope of this talk.

592
00:28:01,176 --> 00:28:03,356 A:middle
So armed with this
new architecture,

593
00:28:03,576 --> 00:28:05,416 A:middle
let's talk about some
features that we've added.

594
00:28:06,586 --> 00:28:11,436 A:middle
First of all, all the old
iPad-only presentations are now

595
00:28:11,436 --> 00:28:13,606 A:middle
available on the iPhone.

596
00:28:14,146 --> 00:28:15,836 A:middle
By default they're
going to present

597
00:28:16,066 --> 00:28:17,866 A:middle
to full-screen presentations.

598
00:28:18,556 --> 00:28:20,626 A:middle
But there's some power
under the hood here.

599
00:28:21,606 --> 00:28:26,036 A:middle
So new presentation styles that
are available that we've added,

600
00:28:26,516 --> 00:28:29,716 A:middle
again, that are both available
on the phone and the iPad,

601
00:28:29,716 --> 00:28:31,886 A:middle
is an OverFullscreen
presentation,

602
00:28:32,646 --> 00:28:36,316 A:middle
an OverCurrentContext
presentation, and,

603
00:28:36,316 --> 00:28:38,146 A:middle
I think I mentioned before,

604
00:28:38,146 --> 00:28:40,586 A:middle
popovers are now
presentations, as well.

605
00:28:45,396 --> 00:28:48,766 A:middle
Every presentation has an
associated presentation

606
00:28:48,766 --> 00:28:52,336 A:middle
controller, and you can access
these with these methods.

607
00:28:52,716 --> 00:28:54,706 A:middle
And the reason you do so
is because you often want

608
00:28:54,706 --> 00:28:57,656 A:middle
to set the delegate on the
presentation controller.

609
00:28:57,986 --> 00:29:00,956 A:middle
And now the plot thickens
because the delegate is,

610

611
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

612
00:28:57,986 --> 00:29:00,956 A:middle
And now the plot thickens
because the delegate is,

613
00:29:00,956 --> 00:29:03,016 A:middle
in fact, the object
that is going

614
00:29:03,016 --> 00:29:06,726 A:middle
to help your presentations adapt
to different trait environments.

615
00:29:07,566 --> 00:29:09,186 A:middle
Before we get into that,

616
00:29:09,546 --> 00:29:11,176 A:middle
let's make sure we all
understand what the new

617
00:29:11,176 --> 00:29:14,176 A:middle
presentation styles
are all about.

618
00:29:14,176 --> 00:29:18,146 A:middle
OverFullscreen is kind of
a full-screen presentation

619
00:29:18,146 --> 00:29:20,046 A:middle
that doesn't remove
the presenting view

620
00:29:20,046 --> 00:29:20,886 A:middle
controller's view.

621
00:29:21,296 --> 00:29:25,676 A:middle
So you can create interesting
kind of overlay types

622
00:29:25,676 --> 00:29:29,596 A:middle
of presentations
really easily now.

623
00:29:29,786 --> 00:29:32,716 A:middle
OverCurrentContext
is pretty similar.

624
00:29:34,916 --> 00:29:37,446 A:middle
If you know what current
context presentations are,

625
00:29:37,446 --> 00:29:42,386 A:middle
it's presentations that are
kind of constrained inside

626
00:29:42,386 --> 00:29:45,206 A:middle
of the presenting view
controller's super view.

627
00:29:46,076 --> 00:29:48,546 A:middle
So that's what
OverCurrentContext gives you.

628
00:29:49,966 --> 00:29:51,336 A:middle
And, finally, we have popover.

629
00:29:51,846 --> 00:29:54,626 A:middle
And we all know what
popover looks like.

630
00:29:55,596 --> 00:29:59,416 A:middle
This is a good opportunity
for me to say that we're kind

631
00:29:59,416 --> 00:30:02,006 A:middle
of soft-deprecating
UIPopoverController.

632

633
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

634
00:29:59,416 --> 00:30:02,006 A:middle
of soft-deprecating
UIPopoverController.

635
00:30:02,616 --> 00:30:07,016 A:middle
We're not hard-deprecating
it, but you should be aware

636
00:30:07,016 --> 00:30:09,326 A:middle
that all the popover controller,

637
00:30:09,326 --> 00:30:13,076 A:middle
old popover controller API
is now being shimmed kind

638
00:30:13,076 --> 00:30:16,546 A:middle
of behind the scenes into
a popover presentation.

639
00:30:17,326 --> 00:30:20,416 A:middle
This might create a couple
of differences in behavior.

640
00:30:20,656 --> 00:30:24,426 A:middle
For the most part, these things
are functionally equivalent.

641
00:30:24,796 --> 00:30:27,976 A:middle
There are a few corner cases,
though, that you might run into.

642
00:30:27,976 --> 00:30:30,106 A:middle
For example, if you have
a pop, if you have code

643
00:30:30,106 --> 00:30:31,516 A:middle
that was presenting a popover

644
00:30:32,236 --> 00:30:33,756 A:middle
and then immediately
dismissed it

645
00:30:33,756 --> 00:30:37,416 A:middle
and did another presentation
the next line, you're going

646
00:30:37,416 --> 00:30:39,036 A:middle
to have to defer that.

647
00:30:39,036 --> 00:30:40,636 A:middle
And you can do that
pretty easily

648
00:30:40,756 --> 00:30:42,666 A:middle
by grabbing a transition
coordinator

649
00:30:42,666 --> 00:30:44,406 A:middle
and scheduling the
new presentation

650
00:30:44,406 --> 00:30:47,186 A:middle
for after the dismissal
of the popover.

651
00:30:51,056 --> 00:30:54,886 A:middle
So let's talk about how
presentations can adapt

652
00:30:55,116 --> 00:30:56,586 A:middle
to changing trait environments.

653
00:30:57,766 --> 00:31:02,246 A:middle
As I mentioned, all of
these presentations, styles,

654

655
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

656
00:30:57,766 --> 00:31:02,246 A:middle
As I mentioned, all of
these presentations, styles,

657
00:31:02,246 --> 00:31:06,426 A:middle
adapt by default in horizontally
compact environments

658
00:31:06,426 --> 00:31:07,166 A:middle
to full-screen.

659
00:31:10,336 --> 00:31:14,586 A:middle
Now, it's possible to
change that default behavior

660
00:31:15,026 --> 00:31:18,706 A:middle
to be OverFullscreen or
to be not, which means,

661
00:31:18,866 --> 00:31:22,106 A:middle
"Please don't adapt; keep
my presentation controller

662
00:31:22,166 --> 00:31:23,656 A:middle
as is, in charge."

663
00:31:25,796 --> 00:31:28,586 A:middle
The way you control this
behavior, as I implied,

664
00:31:28,586 --> 00:31:30,156 A:middle
was you set the delegate
and you're going

665
00:31:30,156 --> 00:31:32,296 A:middle
to override a couple, or you're
going to implement a couple

666
00:31:32,296 --> 00:31:33,486 A:middle
of methods on that delegate.

667
00:31:35,496 --> 00:31:36,826 A:middle
So here they are.

668
00:31:38,676 --> 00:31:40,926 A:middle
The first is
adaptivePresentationStyle

669
00:31:40,926 --> 00:31:42,126 A:middle
ForPresentationController.

670
00:31:42,876 --> 00:31:45,286 A:middle
It does what its name implies.

671
00:31:45,686 --> 00:31:48,576 A:middle
It's called when the
presentation moves

672
00:31:48,576 --> 00:31:51,676 A:middle
into a horizontally compact
environment and you return one

673
00:31:51,676 --> 00:31:54,926 A:middle
of those presentation styles
that I enumerated earlier.

674
00:31:55,806 --> 00:31:57,996 A:middle
There's another method that
might be a little less clear

675
00:31:57,996 --> 00:32:00,796 A:middle
which allows you to actually
return a whole new view

676

677
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

678
00:31:57,996 --> 00:32:00,796 A:middle
which allows you to actually
return a whole new view

679
00:32:00,796 --> 00:32:03,176 A:middle
controller that should be
presented in that style.

680
00:32:03,696 --> 00:32:05,766 A:middle
And we'll see what
that means in a bit.

681
00:32:05,766 --> 00:32:09,746 A:middle
There's a PopoverPresentation
ControllerDelegate,

682
00:32:09,746 --> 00:32:11,916 A:middle
which I'm not going to
go into detail about.

683
00:32:11,916 --> 00:32:14,226 A:middle
But suffice it to say
that that delegate,

684
00:32:14,686 --> 00:32:20,026 A:middle
in addition to providing the
adaptive APIs, also exposes all

685
00:32:20,026 --> 00:32:22,026 A:middle
of the properties and
methods that you need

686
00:32:22,026 --> 00:32:26,756 A:middle
to get the functionally
equivalent popover behavior

687
00:32:26,756 --> 00:32:27,426 A:middle
you're used to.

688
00:32:28,146 --> 00:32:30,856 A:middle
We'll see a little bit of a
code example of that shortly.

689
00:32:31,896 --> 00:32:33,036 A:middle
In fact, very shortly.

690
00:32:33,456 --> 00:32:38,096 A:middle
So what does it mean to
present a popover in iOS 8?

691
00:32:38,806 --> 00:32:41,186 A:middle
Well, you could use the
old APIs, as I said,

692
00:32:41,186 --> 00:32:42,756 A:middle
on UIPopoverController.

693
00:32:42,756 --> 00:32:48,046 A:middle
But I want to show how you
would do it using the new APIs.

694
00:32:50,206 --> 00:32:53,226 A:middle
So the first thing you
do, not too surprisingly,

695
00:32:53,226 --> 00:32:55,986 A:middle
is you set the presentation
style to popover.

696
00:32:57,806 --> 00:32:59,576 A:middle
Now, interestingly
you can grab the

697
00:32:59,576 --> 00:33:02,376 A:middle
PopoverPresentationController
before you've even

698

699
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

700
00:32:59,576 --> 00:33:02,376 A:middle
PopoverPresentationController
before you've even

701
00:33:02,376 --> 00:33:03,256 A:middle
presented anything.

702
00:33:03,746 --> 00:33:06,336 A:middle
That's important because you're
going to need to do things

703
00:33:06,336 --> 00:33:10,106 A:middle
like say, "What's the bar button
item that I'm pointing to?"

704
00:33:10,106 --> 00:33:11,736 A:middle
and "What do my arrows
look like?"

705
00:33:12,266 --> 00:33:15,446 A:middle
You might also want to specify
a preferred content size

706
00:33:15,446 --> 00:33:18,616 A:middle
so that we know kind of
how to size the popover.

707
00:33:18,616 --> 00:33:23,296 A:middle
And, finally, you
present the popover.

708
00:33:24,366 --> 00:33:25,886 A:middle
So what's that going
to look like?

709
00:33:27,056 --> 00:33:32,096 A:middle
So if I wrote that code and
executed it just the way you saw

710
00:33:32,096 --> 00:33:36,406 A:middle
on the previous slide, it's
going to look like that.

711
00:33:37,466 --> 00:33:38,596 A:middle
Now, the first thing I want

712
00:33:38,596 --> 00:33:41,476 A:middle
to say is it is a
popover presentation.

713
00:33:43,576 --> 00:33:46,666 A:middle
The second thing I want to say
is there's a couple of problems.

714
00:33:49,916 --> 00:33:55,756 A:middle
So the first problem is that
it underlaps the status bar.

715
00:33:56,016 --> 00:33:57,476 A:middle
This is one of my favorite bugs.

716
00:33:57,476 --> 00:33:59,906 A:middle
I can't tell you how
many bugs I get about

717
00:33:59,906 --> 00:34:02,116 A:middle
"My content's underneath
the status bar."

718

719
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

720
00:33:59,906 --> 00:34:02,116 A:middle
"My content's underneath
the status bar."

721
00:34:02,116 --> 00:34:04,406 A:middle
I'm not going to go into that,

722
00:34:04,486 --> 00:34:07,056 A:middle
but I thought I would
just mention that.

723
00:34:07,966 --> 00:34:14,056 A:middle
The second thing is
it looks pretty bad.

724
00:34:14,246 --> 00:34:18,216 A:middle
And a more subtle point that
I'm sure all of you got was,

725
00:34:18,636 --> 00:34:20,156 A:middle
it's a popover presentation

726
00:34:20,156 --> 00:34:24,045 A:middle
and I can't tap anywhere
to dismiss it.

727
00:34:24,315 --> 00:34:26,335 A:middle
Okay, so what are
we going to do?

728
00:34:26,366 --> 00:34:27,795 A:middle
Well, we're going
to go to our friend,

729
00:34:27,795 --> 00:34:30,085 A:middle
the trusty presentation
controller delegate,

730
00:34:30,085 --> 00:34:33,346 A:middle
and we're going to use some
of those new adaptive APIs.

731
00:34:33,346 --> 00:34:37,085 A:middle
And in particular, I'm
going to implement,

732
00:34:37,085 --> 00:34:40,216 A:middle
I would implement
adaptivePresentationStyle

733
00:34:40,396 --> 00:34:41,766 A:middle
ForPresentationController.

734
00:34:41,766 --> 00:34:45,045 A:middle
This time I'm going to have
it return OverFullscreen.

735
00:34:45,045 --> 00:34:49,956 A:middle
I'm going to use this brand new
view object that we introduced

736
00:34:50,136 --> 00:34:52,815 A:middle
in iOS 8 called the
UIVisualEffectView,

737
00:34:52,815 --> 00:34:56,255 A:middle
which will become your best
blurry friend in iOS 8.

738
00:34:57,286 --> 00:34:59,206 A:middle
And then inside of
that implementation,

739
00:34:59,206 --> 00:35:02,736 A:middle
I can adjust the content, like
where it's actually positioned.

740

741
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

742
00:34:59,206 --> 00:35:02,736 A:middle
I can adjust the content, like
where it's actually positioned.

743
00:35:03,766 --> 00:35:05,836 A:middle
So that should address a
couple of the problems.

744
00:35:07,056 --> 00:35:12,256 A:middle
So now I get this kind
of nifty blurred view,

745
00:35:12,256 --> 00:35:14,536 A:middle
which looks a lot better
than that ugly white thing.

746
00:35:14,796 --> 00:35:16,736 A:middle
I've repositioned my content.

747
00:35:17,116 --> 00:35:18,786 A:middle
It's a different adaptation.

748
00:35:19,006 --> 00:35:20,526 A:middle
The reason it's blurring
so nicely is

749
00:35:20,526 --> 00:35:22,906 A:middle
because I didn't remove the
presenting view controller's

750
00:35:22,906 --> 00:35:23,856 A:middle
view underneath.

751
00:35:25,106 --> 00:35:27,706 A:middle
However, we still have the
problem that there's no way

752
00:35:27,706 --> 00:35:28,876 A:middle
to dismiss the popover.

753
00:35:29,856 --> 00:35:31,086 A:middle
So how do we fix this?

754
00:35:32,446 --> 00:35:34,766 A:middle
Well, you might have recalled

755
00:35:34,936 --> 00:35:39,346 A:middle
that there was another
delegate API that I talked

756
00:35:39,346 --> 00:35:40,626 A:middle
about that I deferred kind

757
00:35:40,626 --> 00:35:43,076 A:middle
of explaining why I,
why it was useful.

758
00:35:43,076 --> 00:35:44,776 A:middle
We're going to go
back to the delegate,

759
00:35:44,776 --> 00:35:48,366 A:middle
and this time we're going

760
00:35:48,366 --> 00:35:50,836 A:middle
to also implement
presentationController:

761
00:35:50,836 --> 00:35:53,096 A:middle
viewController
ForAdaptivePresentationStyle.

762
00:35:53,506 --> 00:35:54,776 A:middle
So this is pretty nifty.

763
00:35:54,776 --> 00:35:55,786 A:middle
What we're going to
do is we're going

764
00:35:55,786 --> 00:36:00,136 A:middle
to create a navigation
controller whose root view

765

766
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

767
00:35:55,786 --> 00:36:00,136 A:middle
to create a navigation
controller whose root view

768
00:36:00,136 --> 00:36:03,686 A:middle
controller is the currently
presented view controller.

769
00:36:03,686 --> 00:36:06,966 A:middle
We're going to add
a Dismiss button

770
00:36:06,966 --> 00:36:10,766 A:middle
to that navigation controller's
bar, navigation bar.

771
00:36:10,766 --> 00:36:14,066 A:middle
And then we're going
to be good to go.

772
00:36:15,136 --> 00:36:17,716 A:middle
So now when I hit Note,

773
00:36:19,946 --> 00:36:24,396 A:middle
I get this great looking
OverFullscreen adapted

774
00:36:24,396 --> 00:36:25,796 A:middle
popover presentation.

775
00:36:26,436 --> 00:36:28,586 A:middle
There's a Done button,
so I can dismiss it.

776
00:36:31,426 --> 00:36:32,286 A:middle
So that's great.

777
00:36:32,286 --> 00:36:36,456 A:middle
But what if I actually
just wanted a popover?

778
00:36:36,456 --> 00:36:37,496 A:middle
Well, you can do that, too.

779
00:36:38,566 --> 00:36:40,706 A:middle
Let's go back to our
trusty delegate friend,

780
00:36:40,766 --> 00:36:45,816 A:middle
and it's this time an
adaptivePresentationStyle

781
00:36:45,816 --> 00:36:47,186 A:middle
ForPresentationController.

782
00:36:47,946 --> 00:36:49,886 A:middle
All I need to do is return None.

783
00:36:51,136 --> 00:36:52,466 A:middle
And if I return None,

784
00:36:52,466 --> 00:36:55,416 A:middle
the presentation controller is
not going to be adapted at all.

785
00:36:56,816 --> 00:37:01,496 A:middle
And now when I hit the Note
button, I get an actual popover.

786

787
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

788
00:36:56,816 --> 00:37:01,496 A:middle
And now when I hit the Note
button, I get an actual popover.

789
00:37:02,516 --> 00:37:09,926 A:middle
[ Applause ]

790
00:37:10,426 --> 00:37:13,176 A:middle
So let's kind of go
over what we saw here.

791
00:37:14,126 --> 00:37:18,826 A:middle
First is, presentation
controllers are a new object

792
00:37:18,826 --> 00:37:22,696 A:middle
in iOS 8 that make it
easier and more consistent

793
00:37:22,696 --> 00:37:25,656 A:middle
to create powerful
custom presentations.

794
00:37:25,996 --> 00:37:32,476 A:middle
They are an improvement over
what was introduced in iOS 7.

795
00:37:32,476 --> 00:37:36,446 A:middle
Every presentation is associated
with a presentation controller,

796
00:37:36,446 --> 00:37:39,406 A:middle
which can be accessed,
and you can use

797
00:37:39,406 --> 00:37:42,136 A:middle
that presentation controller
to do various things,

798
00:37:42,136 --> 00:37:44,596 A:middle
depending on the
presentation control.

799
00:37:45,076 --> 00:37:49,696 A:middle
But all presentation controllers
can use, can have a delegate

800
00:37:49,746 --> 00:37:54,706 A:middle
that conforms to these
adapting delegate protocols.

801
00:37:55,386 --> 00:37:57,556 A:middle
One thing that isn't
on this screen is

802
00:37:57,556 --> 00:38:00,516 A:middle
that popovers are also
presentation controllers,

803

804
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

805
00:37:57,556 --> 00:38:00,516 A:middle
that popovers are also
presentation controllers,

806
00:38:00,936 --> 00:38:03,816 A:middle
or are presentations
that have an associated

807
00:38:03,816 --> 00:38:04,806 A:middle
presentation control.

808
00:38:04,806 --> 00:38:07,906 A:middle
And, finally, if you create your
own presentation controller-I

809
00:38:07,906 --> 00:38:11,036 A:middle
mentioned this earlier-if
it returns YES

810
00:38:11,036 --> 00:38:13,866 A:middle
to shouldPresentInFullscreen,
it will be able to adapt.

811
00:38:14,206 --> 00:38:16,466 A:middle
If, on the other hand, your
presentation controller is kind

812
00:38:16,466 --> 00:38:19,076 A:middle
of a current context
style presentation,

813
00:38:19,256 --> 00:38:21,416 A:middle
it doesn't really make
too much sense for that

814
00:38:21,416 --> 00:38:23,106 A:middle
to adapt, so it doesn't.

815
00:38:23,106 --> 00:38:26,326 A:middle
We're not going to go through
those adaptive delegate calls

816
00:38:26,326 --> 00:38:27,026 A:middle
in that case.

817
00:38:29,596 --> 00:38:33,726 A:middle
Alright, that's enough for
presentation controllers,

818
00:38:33,726 --> 00:38:36,896 A:middle
although this topic
actually kind of overlaps

819
00:38:36,896 --> 00:38:39,946 A:middle
or has some overlap with
presentation controllers:

820
00:38:40,776 --> 00:38:42,386 A:middle
transition coordinators.

821
00:38:42,856 --> 00:38:47,726 A:middle
Again, those were
introduced in iOS 7.

822
00:38:49,186 --> 00:38:49,976 A:middle
What is it?

823
00:38:51,136 --> 00:38:56,446 A:middle
Well, it's an object that
conforms to this protocol.

824
00:38:57,266 --> 00:39:05,936 A:middle
Every transition coordinator
has an associated transition,

825

826
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

827
00:38:57,266 --> 00:39:05,936 A:middle
Every transition coordinator
has an associated transition,

828
00:39:06,456 --> 00:39:13,166 A:middle
and that associated transition
is oftentimes deferred.

829
00:39:13,166 --> 00:39:15,966 A:middle
And this transition
coordinator is kind

830
00:39:15,966 --> 00:39:19,076 A:middle
of holding this freeze-dried
transition as it gets passed

831
00:39:19,076 --> 00:39:21,226 A:middle
around to various pieces of code

832
00:39:21,566 --> 00:39:24,376 A:middle
that can then use this method
called animateAlongside

833
00:39:24,376 --> 00:39:25,556 A:middle
TransitionCompletion.

834
00:39:25,556 --> 00:39:28,676 A:middle
So you can kind of queue
up blocks of animations

835
00:39:28,676 --> 00:39:30,316 A:middle
that are going to
execute in that kind

836
00:39:30,316 --> 00:39:34,136 A:middle
of deferred transition
animation that is associated

837
00:39:34,136 --> 00:39:35,606 A:middle
with that transition
coordinator.

838
00:39:36,036 --> 00:39:37,546 A:middle
So that's pretty powerful.

839
00:39:37,546 --> 00:39:40,336 A:middle
It was introduced in iOS 7,
and we're taking advantage

840
00:39:40,336 --> 00:39:42,466 A:middle
of this object in
a few new APIs.

841
00:39:45,496 --> 00:39:49,636 A:middle
So, two of these are
viewWillTransitionToSize:

842
00:39:49,756 --> 00:39:51,026 A:middle
withTransitionCoordinator;

843
00:39:54,056 --> 00:39:56,836 A:middle
next one is
willTransitionToTraitCollection:

844
00:39:56,966 --> 00:39:58,296 A:middle
withTransitionCoordinator.

845
00:39:58,826 --> 00:40:00,416 A:middle
Now, I'm not going
to talk too much

846

847
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

848
00:39:58,826 --> 00:40:00,416 A:middle
Now, I'm not going
to talk too much

849
00:40:00,416 --> 00:40:02,516 A:middle
about
willTransitionToTraitCollection.

850
00:40:03,316 --> 00:40:06,246 A:middle
But I did mention earlier that
trait collections are kind

851
00:40:06,246 --> 00:40:09,176 A:middle
of associated with coarse
application structure.

852
00:40:10,616 --> 00:40:12,626 A:middle
And one of the best ways

853
00:40:12,626 --> 00:40:18,186 A:middle
to adapt an application-it's not
the only way, but it's one-is

854
00:40:18,186 --> 00:40:21,476 A:middle
to implement
willTransitionToTraitCollection,

855
00:40:21,476 --> 00:40:25,456 A:middle
and when a trait collection,
such as a size class, say,

856
00:40:25,796 --> 00:40:29,356 A:middle
that may change, say,
if you rotate a device

857
00:40:29,356 --> 00:40:31,566 A:middle
or if you set an
override trait collection,

858
00:40:31,766 --> 00:40:33,026 A:middle
this method will be invoked

859
00:40:33,266 --> 00:40:37,376 A:middle
and you can actually do some
coarse-grained application kind

860
00:40:37,376 --> 00:40:39,316 A:middle
of re-jiggering, if you want.

861
00:40:39,616 --> 00:40:41,926 A:middle
Now, again, there's going
to be a whole talk that goes

862
00:40:41,926 --> 00:40:44,616 A:middle
into a lot more detail on
that particular method.

863
00:40:45,146 --> 00:40:47,106 A:middle
It's very parallel
to the other method,

864
00:40:47,106 --> 00:40:49,806 A:middle
viewWillTransitionToSize:
withTransitionCoordinator

865
00:40:50,436 --> 00:40:51,556 A:middle
that I'm going to talk about.

866
00:40:52,366 --> 00:40:54,126 A:middle
By the way, did I forget
to mention this is part

867
00:40:54,126 --> 00:40:57,246 A:middle
of a new protocol called the
content, UIContentContainer?

868
00:40:57,436 --> 00:40:58,086 A:middle
I mentioned

869
00:40:58,086 --> 00:41:01,366 A:middle
that UIPresentationController
conforms to this.

870

871
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

872
00:40:58,086 --> 00:41:01,366 A:middle
that UIPresentationController
conforms to this.

873
00:41:01,866 --> 00:41:05,076 A:middle
UIViewController also
conforms to this protocol.

874
00:41:06,886 --> 00:41:08,596 A:middle
These objects support a notion

875
00:41:08,596 --> 00:41:11,206 A:middle
of a preferred content
size that you can set.

876
00:41:11,206 --> 00:41:14,506 A:middle
And that's kind of the
request, if you will,

877
00:41:14,906 --> 00:41:18,986 A:middle
that you like your content size
to grow or shrink depending

878
00:41:18,986 --> 00:41:22,306 A:middle
on the circumstances
of your application.

879
00:41:23,096 --> 00:41:26,716 A:middle
When you set that, your
parent container object,

880
00:41:26,716 --> 00:41:30,466 A:middle
whatever that might be-it might
be a parent view controller,

881
00:41:30,466 --> 00:41:33,536 A:middle
it might be a presentation
controller-will get a

882
00:41:33,536 --> 00:41:37,156 A:middle
preferredContentSizeDid
ChangeForChildContentContainer.

883
00:41:37,676 --> 00:41:40,876 A:middle
In that method, the
parent can decide what

884
00:41:40,876 --> 00:41:42,046 A:middle
to do with the request.

885
00:41:43,246 --> 00:41:46,316 A:middle
If it decides that it actually
wants to honor the request,

886
00:41:47,486 --> 00:41:51,076 A:middle
it may turn around and call
viewWillTransitionToSize:

887
00:41:51,076 --> 00:41:53,536 A:middle
withTransitionCoordinator
on the child,

888
00:41:54,176 --> 00:41:57,686 A:middle
which gives the child
the ability

889
00:41:58,176 --> 00:42:01,986 A:middle
to animate alongside
that size change.

890

891
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

892
00:41:58,176 --> 00:42:01,986 A:middle
to animate alongside
that size change.

893
00:42:03,516 --> 00:42:08,026 A:middle
So let me kind of make a
small digression and kind

894
00:42:08,026 --> 00:42:10,126 A:middle
of give a bit of wisdom.

895
00:42:10,126 --> 00:42:13,026 A:middle
And I realize that Anonymous
is actually Josh Shaffer

896
00:42:13,446 --> 00:42:15,236 A:middle
because I think I
heard this from him.

897
00:42:16,796 --> 00:42:21,206 A:middle
And you might wonder, why am I
throwing this random point out?

898
00:42:21,516 --> 00:42:24,216 A:middle
First, let's see
what we mean here.

899
00:42:24,626 --> 00:42:26,776 A:middle
Basically if I rotate
a device in general,

900
00:42:26,776 --> 00:42:28,296 A:middle
that's all that's happening.

901
00:42:28,496 --> 00:42:30,996 A:middle
The fact that there's an
animated transform rotation is

902
00:42:30,996 --> 00:42:32,176 A:middle
kind of beside the point.

903
00:42:33,336 --> 00:42:36,196 A:middle
And most of the time your
application really doesn't need

904
00:42:36,196 --> 00:42:36,906 A:middle
to do anything.

905
00:42:36,906 --> 00:42:39,866 A:middle
It's going to gracefully
stretch and do whatever it needs

906
00:42:39,866 --> 00:42:42,966 A:middle
to do as the bounds change.

907
00:42:46,236 --> 00:42:48,616 A:middle
Okay, so what does that mean?

908
00:42:48,616 --> 00:42:51,746 A:middle
Well, you will recall that we
have these APIs that have been

909
00:42:51,746 --> 00:42:54,226 A:middle
around for a long time.

910
00:42:54,746 --> 00:42:56,286 A:middle
Well, we're getting rid of them.

911
00:42:56,946 --> 00:43:02,646 A:middle
And [Applause]-ah, I thought
you guys all loved these.

912

913
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

914
00:42:56,946 --> 00:43:02,646 A:middle
And [Applause]-ah, I thought
you guys all loved these.

915
00:43:03,596 --> 00:43:08,576 A:middle
So one of the things about these
APIs, and I think I've been

916
00:43:08,576 --> 00:43:13,166 A:middle
on this stage before saying,
"You shouldn't do layout based

917
00:43:13,166 --> 00:43:15,146 A:middle
on interface orientation.

918
00:43:15,146 --> 00:43:17,616 A:middle
You shouldn't use these
methods to drive your layout."

919
00:43:18,126 --> 00:43:20,186 A:middle
They're really kind
of focused methods.

920
00:43:20,186 --> 00:43:23,356 A:middle
You wanted to use them because
you wanted to participate

921
00:43:23,586 --> 00:43:25,026 A:middle
in this rotation event.

922
00:43:25,426 --> 00:43:26,866 A:middle
So now we've generalized it.

923
00:43:26,866 --> 00:43:30,066 A:middle
We have this other method called
viewWillTransitionToSize:w

924
00:43:30,066 --> 00:43:32,936 A:middle
ithTransitionCoordinator
that takes over.

925
00:43:33,976 --> 00:43:37,766 A:middle
So, first of all, all those
rotation callbacks can be

926
00:43:37,766 --> 00:43:40,826 A:middle
replaced with this
more general notion

927
00:43:41,146 --> 00:43:43,726 A:middle
of viewWillTransitionToSize:
withTransitionCoordinator.

928
00:43:44,006 --> 00:43:47,126 A:middle
I talked about setting
the preferred content size

929
00:43:47,126 --> 00:43:48,796 A:middle
and that you get
this notification.

930
00:43:48,796 --> 00:43:50,436 A:middle
Well, so if your widget

931
00:43:50,436 --> 00:43:53,016 A:middle
in the notification center
actually wants to request

932
00:43:53,016 --> 00:43:57,886 A:middle
to be displayed in a slightly
larger space or smaller space,

933
00:43:59,286 --> 00:44:04,016 A:middle
this API will be called on your
widget so that you can, in fact,

934

935
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

936
00:43:59,286 --> 00:44:04,016 A:middle
this API will be called on your
widget so that you can, in fact,

937
00:44:04,256 --> 00:44:08,366 A:middle
animate alongside or run
some code that executes

938
00:44:08,616 --> 00:44:10,766 A:middle
after the resizing
has taken place.

939
00:44:10,896 --> 00:44:16,146 A:middle
I said that you can, your
own apps can respond to this.

940
00:44:16,946 --> 00:44:21,666 A:middle
Now, at one point I was going
to have a whole bunch of slides

941
00:44:21,666 --> 00:44:25,106 A:middle
that showed you how to implement
your own transition coordinator.

942
00:44:25,676 --> 00:44:27,866 A:middle
I didn't have time to do that,

943
00:44:28,166 --> 00:44:29,696 A:middle
but it's relatively
straightforward

944
00:44:29,696 --> 00:44:32,196 A:middle
and you can implement your own
transition coordinator that's

945
00:44:32,196 --> 00:44:33,926 A:middle
implement, that's
kind of associated

946
00:44:33,926 --> 00:44:36,326 A:middle
with your own transition
animation.

947
00:44:36,836 --> 00:44:39,816 A:middle
And if a child changes its size,

948
00:44:39,856 --> 00:44:41,476 A:middle
you can call
viewWillTransitionToSize

949
00:44:41,476 --> 00:44:46,156 A:middle
and pass in that object using
the transition coordinator.

950
00:44:47,186 --> 00:44:51,746 A:middle
Okay. So to really be
a replacement for kind

951
00:44:51,746 --> 00:44:55,536 A:middle
of the rotation, we kind of
had to give a little bit,

952
00:44:55,676 --> 00:45:02,036 A:middle
kind of get down off of our
high horses of, you know,

953

954
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

955
00:44:55,676 --> 00:45:02,036 A:middle
kind of get down off of our
high horses of, you know,

956
00:45:02,396 --> 00:45:05,256 A:middle
the way things should be and
acknowledge the way things are.

957
00:45:05,906 --> 00:45:08,046 A:middle
And we added this
target transform.

958
00:45:08,396 --> 00:45:10,226 A:middle
So it's not so much
the orientation

959
00:45:10,226 --> 00:45:11,326 A:middle
that you really care about.

960
00:45:11,326 --> 00:45:15,006 A:middle
It's like what's the
transform that's kind of being,

961
00:45:15,006 --> 00:45:17,256 A:middle
that I'm participating
in an animation with?

962
00:45:18,656 --> 00:45:21,676 A:middle
The reason this is
important, and I'm going to get

963
00:45:21,676 --> 00:45:24,736 A:middle
to this later, is
we've actually changed

964
00:45:25,016 --> 00:45:28,466 A:middle
where the rotation
transforms live.

965
00:45:28,976 --> 00:45:30,466 A:middle
Some of you guys
may have noticed

966
00:45:30,466 --> 00:45:32,146 A:middle
that whenever you do a rotation

967
00:45:32,146 --> 00:45:33,806 A:middle
that it's the root
view controller

968
00:45:33,806 --> 00:45:39,206 A:middle
or the full-screen view
controller's layer that has kind

969
00:45:39,306 --> 00:45:41,706 A:middle
of the affine rotation
transformation directly

970
00:45:41,706 --> 00:45:42,746 A:middle
associated with it.

971
00:45:43,056 --> 00:45:44,966 A:middle
That's no longer
the case on iOS 8.

972
00:45:46,106 --> 00:45:48,596 A:middle
So when you implement
viewWillTransitionToSize,

973
00:45:48,596 --> 00:45:50,446 A:middle
you can ask for the
target transform,

974
00:45:50,446 --> 00:45:53,316 A:middle
and if it's not identity,
you are inside

975
00:45:53,316 --> 00:45:55,916 A:middle
of a rotation resize event

976
00:45:55,916 --> 00:45:57,676 A:middle
that you can do some
interesting things with.

977
00:45:58,016 --> 00:46:02,316 A:middle
So to show how these are similar

978

979
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

980
00:45:58,016 --> 00:46:02,316 A:middle
So to show how these are similar

981
00:46:02,316 --> 00:46:04,316 A:middle
or how this is a
direct replacement

982
00:46:04,316 --> 00:46:07,346 A:middle
for the old rotation callbacks,
this is some, you know,

983
00:46:07,956 --> 00:46:08,966 A:middle
skeleton code

984
00:46:09,446 --> 00:46:12,566 A:middle
where viewWillTransitionToSize
first calls myWillRotateTo

985
00:46:12,566 --> 00:46:16,596 A:middle
InterfaceOrientation,
which is exactly when it,

986
00:46:16,726 --> 00:46:18,686 A:middle
the old call would
have been made.

987
00:46:18,686 --> 00:46:22,816 A:middle
And then it uses the
transition coordinator

988
00:46:23,126 --> 00:46:26,916 A:middle
to animate alongside
myWillAnimateTo

989
00:46:27,646 --> 00:46:29,076 A:middle
InterfaceOrientation call.

990
00:46:29,076 --> 00:46:32,376 A:middle
And, finally, in the
completion block is

991
00:46:32,376 --> 00:46:35,006 A:middle
when you would call
myDidAnimateFrom

992
00:46:35,006 --> 00:46:36,726 A:middle
InterfaceOrientation.

993
00:46:36,796 --> 00:46:40,476 A:middle
So you can kind of see
that WillTransitionToSize:

994
00:46:40,736 --> 00:46:43,166 A:middle
withTransitionCoordinator
is identical

995
00:46:43,286 --> 00:46:45,166 A:middle
or provides the identical
functionality.

996
00:46:45,166 --> 00:46:48,466 A:middle
It's actually more powerful
and, from my perspective,

997
00:46:48,466 --> 00:46:50,516 A:middle
it's a lot easier to
read code like this.

998
00:46:52,176 --> 00:46:53,896 A:middle
Okay, I know you
guys are all sad

999
00:46:54,096 --> 00:46:55,766 A:middle
that these methods have gone.

1000
00:46:55,766 --> 00:46:57,626 A:middle
So if you don't implement
viewWillTransitionToSize:

1001
00:46:57,626 --> 00:47:00,046 A:middle
withTransitionCoordinator
will still call them,

1002

1003
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1004
00:46:57,626 --> 00:47:00,046 A:middle
withTransitionCoordinator
will still call them,

1005
00:47:00,426 --> 00:47:01,766 A:middle
just don't implement it.

1006
00:47:02,376 --> 00:47:04,676 A:middle
A subtle point that
you should be aware

1007
00:47:04,676 --> 00:47:09,626 A:middle
of is most view controller
transitions are immediate

1008
00:47:09,806 --> 00:47:11,566 A:middle
when the system calls
this method.

1009
00:47:11,606 --> 00:47:14,806 A:middle
What does that mean?

1010
00:47:15,326 --> 00:47:16,916 A:middle
It means that if you needed

1011
00:47:16,916 --> 00:47:19,146 A:middle
to rearrange your
application's structure

1012
00:47:19,146 --> 00:47:24,246 A:middle
in some significant way and
you do like pushViewController

1013
00:47:24,246 --> 00:47:26,926 A:middle
or something like that, the
entire view hierarchy is going

1014
00:47:26,926 --> 00:47:29,376 A:middle
to be updated immediately.

1015
00:47:29,376 --> 00:47:31,076 A:middle
So you can do neat
things with that

1016
00:47:31,076 --> 00:47:32,626 A:middle
in your transition animations.

1017
00:47:35,036 --> 00:47:39,736 A:middle
Unlike rotation callbacks,
by default we're going

1018
00:47:39,776 --> 00:47:41,786 A:middle
to forward
viewWillTransitionToSize

1019
00:47:42,326 --> 00:47:45,916 A:middle
through the entire
presentation hierarchy,

1020
00:47:45,916 --> 00:47:48,406 A:middle
through the entire
view controller

1021
00:47:48,406 --> 00:47:49,536 A:middle
containment hierarchy.

1022
00:47:49,896 --> 00:47:52,476 A:middle
All you need to do is call
super to get that behavior.

1023
00:47:52,746 --> 00:47:55,376 A:middle
If you don't, we will no
longer propagate those.

1024
00:47:55,376 --> 00:47:57,236 A:middle
So you probably want
to call super.

1025
00:47:59,556 --> 00:48:02,706 A:middle
Finally I'm going to say that
you only really need this,

1026

1027
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1028
00:47:59,556 --> 00:48:02,706 A:middle
Finally I'm going to say that
you only really need this,

1029
00:48:02,736 --> 00:48:05,156 A:middle
I kind of implied it before,
when you're doing some kind

1030
00:48:05,156 --> 00:48:06,856 A:middle
of special size transition.

1031
00:48:07,356 --> 00:48:11,136 A:middle
More often than not, autolayout
and other techniques are going

1032
00:48:11,136 --> 00:48:14,256 A:middle
to be-layout techniques are
going to more than suffice

1033
00:48:14,806 --> 00:48:16,416 A:middle
to handle a size transition.

1034
00:48:18,776 --> 00:48:22,126 A:middle
So I wanted to, I showed this
example earlier in the demo

1035
00:48:22,126 --> 00:48:24,436 A:middle
and I wanted to show
when would be a good time

1036
00:48:24,436 --> 00:48:26,626 A:middle
that you might want to use
viewWillTransitionToSize.

1037
00:48:27,876 --> 00:48:29,846 A:middle
So here's a collection
view controller.

1038
00:48:29,846 --> 00:48:33,696 A:middle
If I rotate it, what's
going to end up happening

1039
00:48:33,696 --> 00:48:34,786 A:middle
if I did nothing at all,

1040
00:48:34,786 --> 00:48:39,246 A:middle
is I get-the default collection
view flow layout will give me

1041
00:48:39,246 --> 00:48:40,086 A:middle
something like this.

1042
00:48:40,086 --> 00:48:43,986 A:middle
You'll notice kind of how the
thumbnails have shifted around

1043
00:48:43,986 --> 00:48:47,866 A:middle
and things have resized and
maybe that's what I want.

1044
00:48:48,176 --> 00:48:49,656 A:middle
But maybe I want something else.

1045
00:48:50,366 --> 00:48:53,116 A:middle
Maybe I don't want the
collection view controller's

1046
00:48:53,116 --> 00:48:54,496 A:middle
view to rotate at all,

1047
00:48:54,496 --> 00:48:58,546 A:middle
and I want to apply the counter
transform on each of the cells.

1048
00:48:59,886 --> 00:49:00,826 A:middle
Something like that.

1049

1050
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1051
00:48:59,886 --> 00:49:00,826 A:middle
Something like that.

1052
00:49:00,826 --> 00:49:04,856 A:middle
So this would be a great time
to use viewWillTransitionToSize.

1053
00:49:04,856 --> 00:49:06,696 A:middle
And let's see how
that would look.

1054
00:49:07,506 --> 00:49:10,386 A:middle
The first thing that you do is
you get that targetTransform

1055
00:49:10,386 --> 00:49:11,546 A:middle
that I was talking about.

1056
00:49:11,996 --> 00:49:14,706 A:middle
And we're going to
invert it, and we're going

1057
00:49:14,706 --> 00:49:18,576 A:middle
to grab our old view
bounds and set things

1058
00:49:18,576 --> 00:49:20,746 A:middle
up for our transition
coordinator.

1059
00:49:21,496 --> 00:49:23,496 A:middle
So inside the alongside block,

1060
00:49:23,496 --> 00:49:24,986 A:middle
we're going to basically
call transition

1061
00:49:24,986 --> 00:49:26,606 A:middle
coordinator animateAlongside.

1062
00:49:27,266 --> 00:49:29,396 A:middle
We're going to update
the transform

1063
00:49:30,306 --> 00:49:33,896 A:middle
to basically undo the rotation
transform that's taking effect.

1064
00:49:33,896 --> 00:49:35,386 A:middle
You'll notice that
I'm composing it

1065
00:49:35,386 --> 00:49:37,276 A:middle
with the existing
transform because, hell,

1066
00:49:37,276 --> 00:49:39,136 A:middle
I might be in a different
orientation already.

1067
00:49:39,536 --> 00:49:41,866 A:middle
So I do that.

1068
00:49:41,866 --> 00:49:45,136 A:middle
I then squirrel away
the counter rotation,

1069
00:49:45,136 --> 00:49:48,246 A:middle
which effectively is
the transform that is,

1070
00:49:48,476 --> 00:49:50,606 A:middle
I am animating with right now.

1071
00:49:50,606 --> 00:49:53,286 A:middle
I update my bounds
to the old bounds

1072
00:49:53,286 --> 00:49:56,986 A:middle
because I've now applied
the counter transform

1073
00:49:56,986 --> 00:49:59,506 A:middle
on the collection view
controller view's transform.

1074
00:49:59,636 --> 00:50:03,396 A:middle
I'm done. I'm going
to not rotate,

1075

1076
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1077
00:49:59,636 --> 00:50:03,396 A:middle
I'm done. I'm going
to not rotate,

1078
00:50:03,396 --> 00:50:05,806 A:middle
the collection view controller
isn't going to rotate,

1079
00:50:05,936 --> 00:50:08,746 A:middle
and those cells aren't
going to rotate either

1080
00:50:08,746 --> 00:50:11,946 A:middle
until I hit the completion
block, at which point I'm going

1081
00:50:11,946 --> 00:50:14,276 A:middle
to apply the counter
rotation to each of them.

1082
00:50:15,676 --> 00:50:18,566 A:middle
Okay, so what did we learn?

1083
00:50:20,046 --> 00:50:22,116 A:middle
Transition coordinators
are being used

1084
00:50:22,116 --> 00:50:25,216 A:middle
in a lot of our adaptive APIs.

1085
00:50:28,816 --> 00:50:32,046 A:middle
You can use a transition
coordinator in response

1086
00:50:32,046 --> 00:50:35,186 A:middle
to preferredContent
SizeDidChange calls.

1087
00:50:36,246 --> 00:50:38,666 A:middle
All of the rotation callbacks
are being deprecated.

1088
00:50:41,446 --> 00:50:42,236 A:middle
That's about it.

1089
00:50:42,846 --> 00:50:44,376 A:middle
So let's talk about
screen coordinates.

1090
00:50:44,556 --> 00:50:48,716 A:middle
And this gets to where the
transforms are being applied

1091
00:50:49,276 --> 00:50:50,126 A:middle
when we rotate.

1092
00:50:54,536 --> 00:50:57,036 A:middle
So in iOS 8-I mean, iOS 7,

1093
00:50:58,836 --> 00:51:02,486 A:middle
the screen orientation
was always fixed to kind

1094

1095
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1096
00:50:58,836 --> 00:51:02,486 A:middle
the screen orientation
was always fixed to kind

1097
00:51:02,486 --> 00:51:07,396 A:middle
of the top left position
in portrait.

1098
00:51:08,506 --> 00:51:10,386 A:middle
This gave you a fixed,

1099
00:51:10,386 --> 00:51:13,496 A:middle
unchanging coordinate
system, if you needed it.

1100
00:51:14,466 --> 00:51:18,516 A:middle
We ended up communicating
things like keyboard size

1101
00:51:18,516 --> 00:51:22,136 A:middle
and other things in terms of
this fixed coordinate system,

1102
00:51:22,956 --> 00:51:27,506 A:middle
even though the actual interface
orientation was the current top

1103
00:51:27,506 --> 00:51:28,146 A:middle
left corner.

1104
00:51:29,486 --> 00:51:31,366 A:middle
So in iOS 8, we're
changing that a bit,

1105
00:51:32,666 --> 00:51:35,076 A:middle
and everything is now
interface oriented.

1106
00:51:35,836 --> 00:51:37,986 A:middle
So the keyboard size
notifications are going

1107
00:51:37,986 --> 00:51:39,596 A:middle
to be interface oriented.

1108
00:51:39,596 --> 00:51:42,366 A:middle
A few other things are going
to be interface oriented.

1109
00:51:46,716 --> 00:51:51,636 A:middle
But you still may need a
fixed coordinate system.

1110
00:51:51,846 --> 00:51:54,566 A:middle
How do you do that?

1111
00:51:55,616 --> 00:51:57,326 A:middle
Well, we introduced
a new protocol

1112
00:51:57,326 --> 00:51:58,706 A:middle
called UICoordinateSpace.

1113
00:51:58,706 --> 00:52:00,436 A:middle
And, by the way, this
is not in seed one.

1114

1115
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1116
00:51:58,706 --> 00:52:00,436 A:middle
And, by the way, this
is not in seed one.

1117
00:52:00,436 --> 00:52:04,006 A:middle
This will come out in a, you
know, a soon-to-follow seed.

1118
00:52:05,026 --> 00:52:07,816 A:middle
We introduced a protocol
called UICoordinateSpace,

1119
00:52:07,816 --> 00:52:10,196 A:middle
a couple of conversion routines,

1120
00:52:10,526 --> 00:52:13,226 A:middle
to and from these
coordinate spaces.

1121
00:52:13,286 --> 00:52:15,216 A:middle
It also implements
the bounds call.

1122
00:52:17,606 --> 00:52:20,176 A:middle
UIView conforms to
this directly,

1123
00:52:20,176 --> 00:52:21,616 A:middle
which isn't too surprising.

1124
00:52:21,616 --> 00:52:23,526 A:middle
All the existing
conversion routines,

1125
00:52:23,526 --> 00:52:25,166 A:middle
by the way, stay in place.

1126
00:52:25,766 --> 00:52:28,706 A:middle
UIScreen now has grown
a couple of properties

1127
00:52:28,706 --> 00:52:30,686 A:middle
that vend two different
coordinate spaces.

1128
00:52:30,686 --> 00:52:34,016 A:middle
One is the default interface
oriented coordinate space

1129
00:52:34,016 --> 00:52:37,946 A:middle
and the other is the old
portrait fixed coordinate space.

1130
00:52:38,776 --> 00:52:42,396 A:middle
So if I wanted to
convert to and from

1131
00:52:42,876 --> 00:52:45,056 A:middle
that fixed coordinate space,

1132
00:52:45,446 --> 00:52:47,066 A:middle
what you effectively
do is you grab

1133
00:52:47,066 --> 00:52:50,756 A:middle
that fixed coordinate space
off of the window's screen

1134
00:52:51,276 --> 00:52:53,186 A:middle
and you can convert
to and from views.

1135
00:52:56,696 --> 00:52:59,776 A:middle
So let's go over briefly
what we discussed today.

1136

1137
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1138
00:53:04,086 --> 00:53:06,136 A:middle
We talked a little bit
about trait collections,

1139
00:53:06,466 --> 00:53:08,176 A:middle
how they affect kind

1140
00:53:08,176 --> 00:53:11,576 A:middle
of the gross coarse-level
application structure

1141
00:53:12,306 --> 00:53:15,846 A:middle
of your application, how
you can override them,

1142
00:53:15,846 --> 00:53:18,816 A:middle
how view controllers can
override them, and a little bit

1143
00:53:18,816 --> 00:53:21,186 A:middle
about how your view controllers

1144
00:53:21,186 --> 00:53:23,566 A:middle
and your application can
adapt to those changes.

1145
00:53:24,346 --> 00:53:29,816 A:middle
We introduced some of the new
UISplitViewController features,

1146
00:53:30,506 --> 00:53:32,006 A:middle
and there are a lot of them.

1147
00:53:32,006 --> 00:53:34,256 A:middle
I encourage you to kind of
look at the header files

1148
00:53:34,256 --> 00:53:37,826 A:middle
and attend the talk after
this to see all the new

1149
00:53:37,826 --> 00:53:40,386 A:middle
and amazing things you can do
with split view controller.

1150
00:53:41,096 --> 00:53:43,266 A:middle
There are some new
simple properties

1151
00:53:43,266 --> 00:53:45,196 A:middle
on navigation controller
that will allow you

1152
00:53:45,196 --> 00:53:46,506 A:middle
to condense and hide bars.

1153
00:53:47,916 --> 00:53:50,096 A:middle
We've introduced
PresentationController and,

1154
00:53:50,256 --> 00:53:52,906 A:middle
in particular, we've revamped
the presentation hierarchy.

1155
00:53:52,986 --> 00:53:54,926 A:middle
Popovers are now presentations.

1156
00:53:54,926 --> 00:53:57,076 A:middle
We've introduced some
new presentation styles.

1157

1158
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1159
00:54:00,136 --> 00:54:02,176 A:middle
We've added some new
API for transition

1160
00:54:02,176 --> 00:54:04,206 A:middle
that utilize transition
coordinators,

1161
00:54:04,936 --> 00:54:07,006 A:middle
and these are becoming
interesting objects

1162
00:54:07,006 --> 00:54:10,416 A:middle
that are becoming more present
in more and more of our APIs.

1163
00:54:10,946 --> 00:54:13,196 A:middle
We've deprecated the
old rotation callbacks

1164
00:54:13,196 --> 00:54:15,526 A:middle
or the existing rotation
callbacks,

1165
00:54:16,836 --> 00:54:19,566 A:middle
can be replaced by-that
logic can be replaced

1166
00:54:19,566 --> 00:54:22,426 A:middle
by this new method,
viewWillTransitionToSize.

1167
00:54:23,106 --> 00:54:26,966 A:middle
And, finally, screen bounds
is now interface oriented.

1168
00:54:27,686 --> 00:54:33,116 A:middle
There's a lot of things in
UIKit that are new for iOS 8.

1169
00:54:33,576 --> 00:54:34,776 A:middle
This is just some of them.

1170
00:54:34,776 --> 00:54:37,426 A:middle
I encourage you: the talk right

1171
00:54:37,426 --> 00:54:39,536 A:middle
after this one is
Building Adaptive Apps

1172
00:54:39,536 --> 00:54:41,976 A:middle
with UIKit that's going to
go into much more detail

1173
00:54:42,096 --> 00:54:45,796 A:middle
about all these new and great
adaptive APIs we have in UIKit.

1174
00:54:46,476 --> 00:54:49,006 A:middle
Tomorrow there's going to be
a talk that goes into depth

1175
00:54:49,186 --> 00:54:52,906 A:middle
about presentation controllers,
how we internally use them

1176
00:54:52,906 --> 00:54:55,696 A:middle
to implement new replacements

1177
00:54:55,696 --> 00:54:58,536 A:middle
for search controller
and alert controller.

1178
00:54:58,536 --> 00:55:02,896 A:middle
We are, there was a talk
yesterday, I believe,

1179

1180
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1181
00:54:58,536 --> 00:55:02,896 A:middle
We are, there was a talk
yesterday, I believe,

1182
00:55:02,896 --> 00:55:04,376 A:middle
about creating extensions

1183
00:55:04,376 --> 00:55:06,896 A:middle
that leverage the
viewWillTransition ToSize APIs.

1184
00:55:06,896 --> 00:55:10,586 A:middle
There are some nice talks on
Friday, or there is a nice talk

1185
00:55:10,586 --> 00:55:14,106 A:middle
on Friday about how
you can make your,

1186
00:55:14,936 --> 00:55:16,536 A:middle
basically your transition
animations,

1187
00:55:16,536 --> 00:55:19,286 A:middle
more responsive to
user interaction.

1188
00:55:20,706 --> 00:55:21,676 A:middle
For more information,

1189
00:55:21,676 --> 00:55:23,906 A:middle
please contact our
evangelist, Jake Behrens.

1190
00:55:23,906 --> 00:55:26,626 A:middle
He'll be more than happy
to get you the sample app

1191
00:55:26,626 --> 00:55:29,926 A:middle
and answer your questions and
tell you how it all works.

1192
00:55:30,686 --> 00:55:34,776 A:middle
And have a great rest
of the conference.

1193
00:55:35,026 --> 00:55:39,906 A:middle
Thank you.

1194
00:55:39,906 --> 00:55:40,640 A:middle
[ Applause ]

1195
