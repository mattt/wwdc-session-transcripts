X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:12,271 --> 00:00:14,271 A:middle
[ Applause ]

2
00:00:14,526 --> 00:00:14,936 A:middle
>> Good morning.

3
00:00:15,926 --> 00:00:17,996 A:middle
Welcome to Debugging in Xcode 6.

4
00:00:18,736 --> 00:00:21,046 A:middle
So if you had seen our
debugging session last year,

5
00:00:21,726 --> 00:00:22,796 A:middle
you would have noticed our quest

6
00:00:22,796 --> 00:00:25,906 A:middle
to bring more relative debugging
information to your fingertips.

7
00:00:26,366 --> 00:00:28,286 A:middle
This year, we're going to
continue with this mission.

8
00:00:29,376 --> 00:00:31,686 A:middle
Oh, before I forget, my
colleague reminded me

9
00:00:31,686 --> 00:00:35,276 A:middle
to introduce myself, but my name
has not changed from last year,

10
00:00:35,376 --> 00:00:38,316 A:middle
so I'm still Han Ming Ong and
I'm still Debugger UI Engineer.

11
00:00:39,676 --> 00:00:43,826 A:middle
So, let's briefly look
at what we're going

12
00:00:43,826 --> 00:00:45,066 A:middle
to talk about this year.

13
00:00:45,866 --> 00:00:49,116 A:middle
I'm going to talk about
a new feature in Xcode 6

14
00:00:49,116 --> 00:00:52,436 A:middle
that will help you
with debugging your use

15
00:00:52,436 --> 00:00:54,776 A:middle
of Grand Central
Dispatch which is GCD.

16
00:00:54,816 --> 00:00:58,146 A:middle
This feature is called
Queue Debugging.

17
00:00:59,106 --> 00:01:02,596 A:middle
Next up, Troy is going to come
up and show you amazing new way

18

19
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

20
00:00:59,106 --> 00:01:02,596 A:middle
Next up, Troy is going to come
up and show you amazing new way

21
00:01:02,596 --> 00:01:05,586 A:middle
to explore and debug
your user interface.

22
00:01:06,436 --> 00:01:08,116 A:middle
And then Kerry is going
to talk in detail,

23
00:01:08,496 --> 00:01:10,606 A:middle
how to integrate your --

24
00:01:10,716 --> 00:01:12,546 A:middle
the Quick Look Preview
into your custom class.

25
00:01:16,546 --> 00:01:18,606 A:middle
I want to set the stage
for Queue Debugging

26
00:01:19,136 --> 00:01:20,596 A:middle
so that we're all
on the same page.

27
00:01:21,196 --> 00:01:23,086 A:middle
My apologies if this
is a bit of --

28
00:01:23,086 --> 00:01:26,476 A:middle
a bit of it too basic for some
of you, but it's important

29
00:01:26,476 --> 00:01:27,876 A:middle
that we get the fundamentals
right.

30
00:01:29,136 --> 00:01:34,836 A:middle
So, when your application hits a
break point, the program pauses.

31
00:01:35,486 --> 00:01:38,386 A:middle
The debugger will go through
a process known as unwinding.

32
00:01:39,016 --> 00:01:41,476 A:middle
What it does is, it
looks at the method

33
00:01:41,476 --> 00:01:42,726 A:middle
that contains your break point,

34
00:01:43,106 --> 00:01:46,036 A:middle
and follows the thread
pointer back to the call site.

35
00:01:46,726 --> 00:01:48,336 A:middle
In this case, awakeFromNib.

36
00:01:48,896 --> 00:01:52,966 A:middle
It goes on until it reaches
the beginning of the thread.

37
00:01:53,216 --> 00:01:54,876 A:middle
Then it comes back with a series

38
00:01:54,876 --> 00:01:56,986 A:middle
of stack frames known
as a backtrace.

39
00:01:57,646 --> 00:02:01,906 A:middle
So a stack frame is an instance
of location of your method.

40

41
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

42
00:01:57,646 --> 00:02:01,906 A:middle
So a stack frame is an instance
of location of your method.

43
00:02:02,926 --> 00:02:04,066 A:middle
Now backtraces are important

44
00:02:04,066 --> 00:02:06,406 A:middle
because it helps you
understand the control flow

45
00:02:06,846 --> 00:02:08,076 A:middle
and the state of
your application.

46
00:02:08,726 --> 00:02:14,606 A:middle
So what happens -- how
does GCD impact backtraces?

47
00:02:15,546 --> 00:02:16,976 A:middle
But first, what is GCD?

48
00:02:17,786 --> 00:02:21,336 A:middle
It is a technology
that is introduced five

49
00:02:21,336 --> 00:02:23,736 A:middle
or six years ago, in the
Snow Leopard timeframe.

50
00:02:23,736 --> 00:02:27,006 A:middle
Since then, it has
taken off like wildfire

51
00:02:27,106 --> 00:02:31,576 A:middle
because it is a very natural
way to create concurrent,

52
00:02:31,576 --> 00:02:32,796 A:middle
responsive application.

53
00:02:34,276 --> 00:02:36,866 A:middle
Basically you divide your task

54
00:02:36,866 --> 00:02:40,136 A:middle
up into smaller work
items called blocks.

55
00:02:40,696 --> 00:02:45,686 A:middle
And then you enqueue the block
to a queue using two ways:

56
00:02:47,226 --> 00:02:49,296 A:middle
synchronously or asynchronously.

57
00:02:50,316 --> 00:02:51,576 A:middle
We're going to focus
on the latter

58
00:02:51,576 --> 00:02:53,986 A:middle
because it poses
a bigger challenge

59
00:02:54,436 --> 00:02:55,276 A:middle
when it comes to debugging.

60
00:02:56,616 --> 00:03:00,046 A:middle
You enqueue asynchronously
using the dispatch async API.

61

62
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

63
00:02:56,616 --> 00:03:00,046 A:middle
You enqueue asynchronously
using the dispatch async API.

64
00:03:01,056 --> 00:03:06,586 A:middle
And then what you're
telling the system, the OS,

65
00:03:06,586 --> 00:03:11,136 A:middle
is at some time later, it
can be dequeue your block

66
00:03:11,446 --> 00:03:14,086 A:middle
and find a worker thread
to start executing it.

67
00:03:15,696 --> 00:03:17,246 A:middle
Imagine that you've
hit a breakpoint

68
00:03:18,146 --> 00:03:19,106 A:middle
in your block right now.

69
00:03:20,776 --> 00:03:23,456 A:middle
So let's look at a
backtrace of Thread 16.

70
00:03:24,816 --> 00:03:27,206 A:middle
After the debugger has
finished its unwinding,

71
00:03:27,966 --> 00:03:32,116 A:middle
the bottommost frame, Frame
9, represents the start

72
00:03:32,116 --> 00:03:34,486 A:middle
of the worker thread,
which corresponds

73
00:03:34,486 --> 00:03:36,236 A:middle
to the dequeuing event.

74
00:03:37,166 --> 00:03:38,166 A:middle
So what do you have to do

75
00:03:38,166 --> 00:03:41,166 A:middle
to understand the control flow
before the enqueuing event?

76
00:03:42,306 --> 00:03:45,636 A:middle
Well, what I used to do
is to find the method

77
00:03:45,636 --> 00:03:47,596 A:middle
that contains the
enqueuing event,

78
00:03:47,676 --> 00:03:49,246 A:middle
in this case cachedGraphImage,

79
00:03:49,796 --> 00:03:51,356 A:middle
paste it in the Search
Navigator,

80
00:03:52,056 --> 00:03:55,376 A:middle
search for all the call sites
of it, put break points there,

81
00:03:56,156 --> 00:03:57,646 A:middle
re-launch the application,

82
00:03:58,106 --> 00:04:00,006 A:middle
go through all the
crazy UI gestures

83

84
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

85
00:03:58,106 --> 00:04:00,006 A:middle
go through all the
crazy UI gestures

86
00:04:00,416 --> 00:04:02,336 A:middle
to make sure I can
repeat the similar --

87
00:04:02,336 --> 00:04:05,336 A:middle
the same problem to
hit the break point.

88
00:04:07,186 --> 00:04:10,946 A:middle
And heaven forbids if
those call sites are also

89
00:04:10,946 --> 00:04:13,676 A:middle
in another dispatch async
because that means I have

90
00:04:13,676 --> 00:04:16,185 A:middle
to wash, rinse, and repeat.

91
00:04:16,896 --> 00:04:20,196 A:middle
But, Xcode is not lying to you

92
00:04:20,196 --> 00:04:23,136 A:middle
when it's giving you
this limited backtrace.

93
00:04:24,086 --> 00:04:25,186 A:middle
That's because the thread

94
00:04:25,366 --> 00:04:29,806 A:middle
that does enqueuing did it
asynchronously in the past.

95
00:04:31,316 --> 00:04:34,446 A:middle
In fact, that thread is possibly
doing something completely

96
00:04:34,446 --> 00:04:36,926 A:middle
different or may be
gone from memory.

97
00:04:37,756 --> 00:04:41,816 A:middle
So it's not fair to accuse
a debugger of not being able

98
00:04:41,816 --> 00:04:45,866 A:middle
to unwind to the past, but in
your head, you must be thinking,

99
00:04:45,866 --> 00:04:46,886 A:middle
"Well, this is accurate

100
00:04:46,886 --> 00:04:50,306 A:middle
but surely Xcode can present
a more logical backtrace."

101
00:04:50,826 --> 00:04:54,236 A:middle
And we agree with you.

102
00:04:54,456 --> 00:05:00,026 A:middle
So in the scenario that I
described above, over here,

103

104
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

105
00:04:54,456 --> 00:05:00,026 A:middle
So in the scenario that I
described above, over here,

106
00:05:01,226 --> 00:05:03,626 A:middle
we're going to splice and
Xcode 6 is going to splice

107
00:05:03,626 --> 00:05:06,306 A:middle
in the backtrace of
the enqueuing event

108
00:05:07,546 --> 00:05:08,836 A:middle
so that it can show them to you

109
00:05:08,836 --> 00:05:11,656 A:middle
in a more logical
manner in the UI.

110
00:05:12,846 --> 00:05:16,466 A:middle
And if you have one in --
more than one enqueuing event,

111
00:05:16,736 --> 00:05:18,316 A:middle
Xcode is going to
follow the chain

112
00:05:18,936 --> 00:05:19,946 A:middle
so that it shows you everything.

113
00:05:24,196 --> 00:05:26,006 A:middle
So how did we do that?

114
00:05:26,046 --> 00:05:28,226 A:middle
Well we worked through
several layers of the OS,

115
00:05:28,686 --> 00:05:33,136 A:middle
down to the core OS, we
shortcuts all the backtraces

116
00:05:33,366 --> 00:05:36,506 A:middle
of the enqueuing event, so
when your application hits a

117
00:05:36,506 --> 00:05:38,866 A:middle
breakpoint, Xcode
will ask the debugger

118
00:05:39,496 --> 00:05:40,656 A:middle
to retrieve the backtrace,

119
00:05:41,516 --> 00:05:44,786 A:middle
so that we can show
them to you in the UI.

120
00:05:44,946 --> 00:05:47,246 A:middle
The live stack frames,
they have colored icons.

121
00:05:49,196 --> 00:05:51,626 A:middle
The recorded stack frames,
they have gray icons.

122
00:05:52,246 --> 00:05:57,536 A:middle
But, just like the live stack
frame, you can select it

123
00:05:57,536 --> 00:05:59,826 A:middle
and if Xcode has
its debug symbols,

124
00:05:59,826 --> 00:06:04,016 A:middle
it will show you the source
code, like in this case.

125

126
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

127
00:05:59,826 --> 00:06:04,016 A:middle
it will show you the source
code, like in this case.

128
00:06:04,576 --> 00:06:07,806 A:middle
If it doesn't have debug symbol,
it will show this assembly

129
00:06:08,306 --> 00:06:10,366 A:middle
that some among us
can actually decipher.

130
00:06:15,046 --> 00:06:16,616 A:middle
So why are the icons gray?

131
00:06:17,636 --> 00:06:19,836 A:middle
Well a recorded stack
frame's icon is gray

132
00:06:19,836 --> 00:06:22,176 A:middle
because it is a visual cue

133
00:06:22,666 --> 00:06:25,276 A:middle
to let you know that
it's historical.

134
00:06:26,486 --> 00:06:28,586 A:middle
And because it doesn't
exist in memory anymore,

135
00:06:29,106 --> 00:06:31,966 A:middle
you cannot interact
with it in the console.

136
00:06:31,966 --> 00:06:33,496 A:middle
You cannot run expressions
like [inaudible].

137
00:06:33,496 --> 00:06:37,806 A:middle
And Xcode will not show
you its frame variables

138
00:06:37,806 --> 00:06:40,826 A:middle
because recording the frame
variables would cause the

139
00:06:40,826 --> 00:06:45,156 A:middle
application to blow up the
memory, possibly causing it

140
00:06:45,156 --> 00:06:48,286 A:middle
to be jettisoned on a device.

141
00:06:48,696 --> 00:06:51,346 A:middle
So that wraps up the first
part of Queue Debugging.

142
00:06:52,256 --> 00:06:54,366 A:middle
Moving onto the second part.

143
00:06:55,276 --> 00:07:00,106 A:middle
Xcode by default shows you the
backtraces in the threads view

144

145
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

146
00:06:55,276 --> 00:07:00,106 A:middle
Xcode by default shows you the
backtraces in the threads view

147
00:07:00,186 --> 00:07:01,196 A:middle
in the debug navigator.

148
00:07:01,886 --> 00:07:03,246 A:middle
As you can see here,
Threads 5 --

149
00:07:03,896 --> 00:07:06,306 A:middle
Thread 5 is showing
you its backtrace.

150
00:07:07,116 --> 00:07:09,796 A:middle
So that just means that
a backtrace is organized

151
00:07:09,856 --> 00:07:10,976 A:middle
by its parent threads.

152
00:07:12,576 --> 00:07:14,666 A:middle
There's another equally
interesting view known

153
00:07:14,666 --> 00:07:16,916 A:middle
as Queue's View in
the debug navigator.

154
00:07:16,966 --> 00:07:19,646 A:middle
And if you pay attention
to your top right corner,

155
00:07:19,646 --> 00:07:20,846 A:middle
there's a little control known

156
00:07:20,846 --> 00:07:25,296 A:middle
as the Process View
Option Selector.

157
00:07:26,026 --> 00:07:27,686 A:middle
It is a mouthful,
but it is useful.

158
00:07:29,056 --> 00:07:34,446 A:middle
So if you toggle it to the
Queue's View, Xcode switches you

159
00:07:34,526 --> 00:07:37,086 A:middle
over to emphasize
the relationship

160
00:07:37,086 --> 00:07:39,146 A:middle
between blocks and queues.

161
00:07:41,166 --> 00:07:43,416 A:middle
So in this slide here, you see

162
00:07:43,416 --> 00:07:45,586 A:middle
that the top queue has
one Executing Block.

163
00:07:46,306 --> 00:07:50,706 A:middle
So what about the blocks
that here you have enqueued

164
00:07:50,806 --> 00:07:51,906 A:middle
but not executing yet?

165
00:07:53,166 --> 00:07:54,156 A:middle
Let's look at this scenario.

166
00:07:55,416 --> 00:07:58,236 A:middle
So I'm using a Serial
Queue as an illustration,

167
00:07:58,236 --> 00:08:00,696 A:middle
but this happens with
concurrent queues as well.

168

169
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

170
00:07:58,236 --> 00:08:00,696 A:middle
but this happens with
concurrent queues as well.

171
00:08:01,916 --> 00:08:05,606 A:middle
The green square is your
currently Executing Block.

172
00:08:06,896 --> 00:08:09,356 A:middle
As long as it has not
finished executing,

173
00:08:10,886 --> 00:08:14,366 A:middle
blocks that you submit
subsequently to the queue,

174
00:08:14,366 --> 00:08:15,786 A:middle
will get stacked up behind it.

175
00:08:16,426 --> 00:08:18,646 A:middle
We call those gray
squares the Pending Blocks.

176
00:08:19,266 --> 00:08:22,126 A:middle
So in Xcode 6, we're going

177
00:08:22,126 --> 00:08:26,766 A:middle
to show you the Pending
Blocks as well of a queue.

178
00:08:27,516 --> 00:08:30,926 A:middle
[ Applause ]

179
00:08:31,426 --> 00:08:33,645 A:middle
So in this case, we
have 9 Pending Blocks.

180
00:08:35,196 --> 00:08:38,556 A:middle
The Pending Blocks are like
Executing Block in that

181
00:08:38,556 --> 00:08:42,326 A:middle
if you twist it down,
it will show you the --

182
00:08:42,775 --> 00:08:45,766 A:middle
a backtrace which by definition,
is a recorded backtrace

183
00:08:45,766 --> 00:08:46,776 A:middle
of the enqueuing event.

184
00:08:48,146 --> 00:08:50,336 A:middle
So we hope that by
surfacing this information,

185
00:08:50,336 --> 00:08:52,096 A:middle
you can answer questions like,

186
00:08:53,036 --> 00:08:55,926 A:middle
"How many Pending Blocks have
I submitted to the queue?

187
00:08:56,256 --> 00:08:58,036 A:middle
Am I'm oversaturating
the queue?"

188
00:08:59,256 --> 00:09:01,836 A:middle
And if you have literally
tens and thousands of blocks -

189

190
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

191
00:08:59,256 --> 00:09:01,836 A:middle
And if you have literally
tens and thousands of blocks -

192
00:09:01,836 --> 00:09:06,616 A:middle
Pending Blocks - are there
some that are not needed,

193
00:09:07,766 --> 00:09:10,876 A:middle
because you may be able
to change your algorithm

194
00:09:10,876 --> 00:09:13,756 A:middle
or your granularity so
that you do less work?

195
00:09:14,656 --> 00:09:16,006 A:middle
Now doing less work is important

196
00:09:16,006 --> 00:09:18,116 A:middle
because that would mean
saving battery life

197
00:09:18,116 --> 00:09:19,396 A:middle
on your customers' devices.

198
00:09:19,396 --> 00:09:25,156 A:middle
So on top of that, it
will help us solve a class

199
00:09:25,156 --> 00:09:27,326 A:middle
of programming problems
that I'm going to go

200
00:09:27,326 --> 00:09:28,336 A:middle
into a demonstration now.

201
00:09:29,426 --> 00:09:33,406 A:middle
So, running on the simulator
is an application called Jogr

202
00:09:33,626 --> 00:09:37,106 A:middle
which helps you track
your runs in San Francisco

203
00:09:37,576 --> 00:09:40,976 A:middle
and keep fit while you're
at -- during this WWDC.

204
00:09:41,036 --> 00:09:43,716 A:middle
Well, I know, developers jogging

205
00:09:43,716 --> 00:09:46,156 A:middle
and keeping fit, but
we can all dream.

206
00:09:48,136 --> 00:09:51,386 A:middle
Now, I have a timer here
that tracks your time

207
00:09:51,386 --> 00:09:56,486 A:middle
and your velocity,
and a map of all

208
00:09:56,486 --> 00:09:58,826 A:middle
of the routes that I've done.

209
00:09:58,826 --> 00:10:01,106 A:middle
And I've done exactly
one this year,

210

211
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

212
00:09:58,826 --> 00:10:01,106 A:middle
And I've done exactly
one this year,

213
00:10:01,956 --> 00:10:03,256 A:middle
which is one too many for me.

214
00:10:04,966 --> 00:10:08,096 A:middle
If you click on the date, if you
select the date, it will slide

215
00:10:08,096 --> 00:10:10,926 A:middle
in the detail page
of my velocity graph.

216
00:10:11,836 --> 00:10:16,576 A:middle
So notice that it takes a
little bit of time to slide

217
00:10:16,576 --> 00:10:19,496 A:middle
in the detail page, and I'm
sure you have learned from Apple

218
00:10:19,496 --> 00:10:22,506 A:middle
and your customers that
they want your animation

219
00:10:22,506 --> 00:10:25,556 A:middle
to be smooth: smooth
like butter.

220
00:10:26,326 --> 00:10:27,016 A:middle
So this is not.

221
00:10:29,566 --> 00:10:31,636 A:middle
And I want to figure out why.

222
00:10:32,366 --> 00:10:34,656 A:middle
So things I know to code
pretty well, I'm just going

223
00:10:34,656 --> 00:10:37,986 A:middle
to jump straight into Xcode
to the class known GraphView.

224
00:10:39,446 --> 00:10:41,246 A:middle
GraphView is the class
that draws the graph.

225
00:10:42,546 --> 00:10:45,896 A:middle
And I'm going to jump
straight awakeFromNib by going

226
00:10:45,896 --> 00:10:48,186 A:middle
to the implementation field
of the [inaudible] bar

227
00:10:48,186 --> 00:10:49,166 A:middle
and start typing "awake."

228
00:10:49,956 --> 00:10:52,246 A:middle
There I go.

229
00:10:52,486 --> 00:10:55,446 A:middle
And I've a method here that
creates my velocity path.

230
00:10:56,656 --> 00:10:59,206 A:middle
And I know that it is doing
a lot of heavy-duty work,

231
00:10:59,616 --> 00:11:01,816 A:middle
so let's jump into
the definition

232

233
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

234
00:10:59,616 --> 00:11:01,816 A:middle
so let's jump into
the definition

235
00:11:01,816 --> 00:11:03,106 A:middle
by doing a Command-Click on it.

236
00:11:04,486 --> 00:11:06,006 A:middle
What I see here is,

237
00:11:06,256 --> 00:11:09,016 A:middle
it's spending time fetching the
velocity data from the database,

238
00:11:10,086 --> 00:11:14,746 A:middle
and then it takes a
lock to protect it.

239
00:11:15,006 --> 00:11:18,096 A:middle
And subsequently go
through each data point

240
00:11:18,096 --> 00:11:20,476 A:middle
in the velocity data
to draw the path.

241
00:11:21,246 --> 00:11:23,336 A:middle
And when it's done,
it releases the lock.

242
00:11:23,336 --> 00:11:27,416 A:middle
So it's doing all this
work on the main thread.

243
00:11:27,416 --> 00:11:29,726 A:middle
So it's impeding the
detail page from sliding in.

244
00:11:30,946 --> 00:11:32,676 A:middle
And this looks like
a good candidate

245
00:11:32,676 --> 00:11:34,526 A:middle
to use this dispatch async.

246
00:11:35,516 --> 00:11:37,426 A:middle
So let's do that.

247
00:11:38,296 --> 00:11:39,466 A:middle
Going back to awakeFromNib.

248
00:11:39,466 --> 00:11:42,896 A:middle
And I'm going to paste --

249
00:11:43,086 --> 00:11:46,976 A:middle
pasting a chunk of code which
I don't have, but it's alright.

250

251
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

252
00:12:06,046 --> 00:12:09,576 A:middle
Alright, I'm going to move
the line that creates the path

253
00:12:09,966 --> 00:12:11,786 A:middle
into the dispatch async block.

254
00:12:12,216 --> 00:12:14,456 A:middle
And I'm going to
dispatch the block

255
00:12:14,456 --> 00:12:16,426 A:middle
to a simple queue of the graph.

256
00:12:17,706 --> 00:12:20,896 A:middle
And when I'm done calculating
the path, I will update it

257
00:12:20,896 --> 00:12:22,476 A:middle
on the main thread like usual.

258
00:12:23,326 --> 00:12:25,276 A:middle
So this is a pretty
simple change.

259
00:12:25,826 --> 00:12:33,236 A:middle
Let's rerun by clicking on the
Run button to see if it works.

260
00:12:35,056 --> 00:12:40,306 A:middle
Okay, I'm going to go to the
date so that I can select it.

261
00:12:40,776 --> 00:12:45,016 A:middle
So this time when
I select the date,

262
00:12:45,436 --> 00:12:52,296 A:middle
the detail page should slide
in very quickly, which it does,

263
00:12:53,616 --> 00:12:55,036 A:middle
but my graph is not drawing.

264
00:12:55,796 --> 00:12:59,346 A:middle
So, there are many ways to --

265
00:12:59,346 --> 00:13:02,476 A:middle
you can try to figure out
what is the problem but one

266

267
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

268
00:12:59,346 --> 00:13:02,476 A:middle
you can try to figure out
what is the problem but one

269
00:13:02,476 --> 00:13:05,346 A:middle
of my favorite way is to look
at the state of the application.

270
00:13:05,346 --> 00:13:08,516 A:middle
And to do that, I will
look at the backtraces

271
00:13:08,766 --> 00:13:13,826 A:middle
of the application by
clicking the Pause button

272
00:13:13,826 --> 00:13:14,796 A:middle
in the debug bar.

273
00:13:15,576 --> 00:13:20,996 A:middle
And I know that work
for my graph is done

274
00:13:20,996 --> 00:13:22,146 A:middle
on the Graph Serial Queue,

275
00:13:22,506 --> 00:13:24,806 A:middle
so I found a thread
which is Thread 22.

276
00:13:25,456 --> 00:13:32,116 A:middle
I'm going to twist it
open and you see --

277
00:13:32,116 --> 00:13:36,586 A:middle
you may not be able to see at
the back, but Frame 2 shows

278
00:13:36,586 --> 00:13:38,546 A:middle
that I'm trying to
wait for a lock.

279
00:13:39,576 --> 00:13:40,246 A:middle
It looks like it.

280
00:13:40,306 --> 00:13:43,806 A:middle
I'm going to select
Frame 3 to confirm it.

281
00:13:43,806 --> 00:13:45,626 A:middle
And indeed, I'm waiting
for the lock.

282
00:13:45,906 --> 00:13:49,686 A:middle
So those of us who have faced
this situation before have a

283
00:13:49,686 --> 00:13:52,936 A:middle
pretty standard following
path [inaudible] which is

284
00:13:52,936 --> 00:13:55,406 A:middle
to find a thread
that has the lock.

285
00:13:56,076 --> 00:13:57,446 A:middle
So let's do that.

286
00:13:57,446 --> 00:14:01,116 A:middle
I'm going to show you a nifty
way to show all the backtraces

287

288
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

289
00:13:57,446 --> 00:14:01,116 A:middle
I'm going to show you a nifty
way to show all the backtraces

290
00:14:01,516 --> 00:14:06,926 A:middle
which is to first collapse the
process item and by holding

291
00:14:06,926 --> 00:14:09,296 A:middle
down the Option key,
you can twist it open.

292
00:14:09,926 --> 00:14:13,466 A:middle
So now I'm going to visually
just scan through to look

293
00:14:13,466 --> 00:14:15,706 A:middle
for the thread that
has the lock.

294
00:14:15,706 --> 00:14:22,326 A:middle
Well this is interesting
because besides the Thread 22,

295
00:14:22,326 --> 00:14:24,226 A:middle
which is trying to
acquire the lock,

296
00:14:24,226 --> 00:14:27,276 A:middle
I cannot find a thread
that has the lock.

297
00:14:28,126 --> 00:14:29,326 A:middle
So this is a head scratcher.

298
00:14:29,496 --> 00:14:31,296 A:middle
But what do you know?

299
00:14:31,296 --> 00:14:34,016 A:middle
We just learned something
that may be able to help us.

300
00:14:34,016 --> 00:14:37,276 A:middle
So I'm going to switch over
to Queue Debugging by going

301
00:14:37,276 --> 00:14:39,146 A:middle
to the [inaudible] control.

302
00:14:39,826 --> 00:14:45,646 A:middle
And here I'm going to use
the filter bar to focus

303
00:14:45,646 --> 00:14:47,666 A:middle
on my Graph Serial Queue.

304
00:14:48,306 --> 00:14:50,806 A:middle
So there it is.

305
00:14:52,086 --> 00:14:57,116 A:middle
So, it says here, I have one
running block which is my --

306
00:14:57,236 --> 00:14:59,496 A:middle
the block waiting for the lock.

307

308
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

309
00:15:00,056 --> 00:15:02,896 A:middle
And I have one Pending Block.

310
00:15:03,136 --> 00:15:04,876 A:middle
To show my Pending
Block, I'm going to go

311
00:15:04,876 --> 00:15:08,056 A:middle
to my Debug menu
item, Debug Workflow,

312
00:15:08,226 --> 00:15:11,396 A:middle
and turn on Always Show
Pending Blocks and Queues.

313
00:15:11,956 --> 00:15:14,876 A:middle
Out pops my Pending Block.

314
00:15:14,876 --> 00:15:18,516 A:middle
I'm going to twist it open
and select the first frame

315
00:15:18,956 --> 00:15:19,956 A:middle
which has my source code.

316
00:15:20,486 --> 00:15:24,716 A:middle
So plotAccelerationGraph --

317
00:15:24,716 --> 00:15:27,596 A:middle
Curve, is a method which I
enhanced this morning as well,

318
00:15:28,076 --> 00:15:32,286 A:middle
to use dispatch async so that
I can work off the main thread.

319
00:15:32,886 --> 00:15:35,816 A:middle
And it looks like in
my haste what I did is,

320
00:15:35,816 --> 00:15:39,396 A:middle
I acquired a lock before
I did the dispatch async.

321
00:15:40,006 --> 00:15:43,416 A:middle
So what's going on is this.

322
00:15:43,586 --> 00:15:48,056 A:middle
I have an Execution
Block waiting for a lock,

323
00:15:48,596 --> 00:15:51,396 A:middle
and stacked right after
it, is my Pending Block,

324
00:15:52,406 --> 00:15:54,326 A:middle
which unfortunately
has the lock.

325
00:15:54,566 --> 00:15:58,096 A:middle
So the Pending Block cannot
move because it has to wait

326
00:15:58,096 --> 00:15:59,566 A:middle
for the Execution
Block to finish.

327

328
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

329
00:16:00,326 --> 00:16:05,626 A:middle
So this is a kind of deadlock,
albeit in a non-classical way.

330
00:16:06,306 --> 00:16:10,186 A:middle
So thankfully the
solution is pretty simple.

331
00:16:10,346 --> 00:16:12,516 A:middle
I just have to move the
line that does the locking,

332
00:16:13,516 --> 00:16:18,236 A:middle
closer to the place, where
it's protecting its data,

333
00:16:18,936 --> 00:16:20,106 A:middle
which is velocity data.

334
00:16:20,816 --> 00:16:24,876 A:middle
This insures that it
doesn't try to get a lock

335
00:16:24,876 --> 00:16:27,666 A:middle
until it's dequeued
and start executing.

336
00:16:29,106 --> 00:16:32,256 A:middle
So with this second
round of simple change,

337
00:16:32,946 --> 00:16:33,886 A:middle
let's see if this works.

338
00:16:43,046 --> 00:16:43,896 A:middle
Okay, let's get to the point

339
00:16:43,896 --> 00:16:45,546 A:middle
where I can select
the date again.

340
00:16:46,166 --> 00:16:48,916 A:middle
And voila.

341
00:16:48,956 --> 00:16:51,206 A:middle
Everything looks correct now.

342
00:16:51,886 --> 00:16:54,896 A:middle
So without this Queue Debugging,
what you would have to do -

343
00:16:54,896 --> 00:16:58,026 A:middle
what I would have to do - is
to search for all the places

344
00:16:58,026 --> 00:17:03,536 A:middle
where my velocity data lock is
used and visually look at them

345

346
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

347
00:16:58,026 --> 00:17:03,536 A:middle
where my velocity data lock is
used and visually look at them

348
00:17:03,536 --> 00:17:06,675 A:middle
and reason really hard
about how it's used.

349
00:17:07,286 --> 00:17:08,826 A:middle
And that's error
prone and tedious.

350
00:17:09,766 --> 00:17:11,726 A:middle
In summary, you're going
to get Queue Debugging

351
00:17:11,726 --> 00:17:14,566 A:middle
in Xcode 6, which has two parts.

352
00:17:15,195 --> 00:17:16,986 A:middle
Recorded backtrace is
going to get you --

353
00:17:17,256 --> 00:17:20,346 A:middle
show you backtrace of
the enqueuing event

354
00:17:20,346 --> 00:17:24,476 A:middle
when you're using dispatch
async and Pending Blocks, by --

355
00:17:24,846 --> 00:17:27,016 A:middle
hopefully by surfacing
this information,

356
00:17:27,016 --> 00:17:29,866 A:middle
you can optimize
your use of GCD.

357
00:17:30,756 --> 00:17:33,146 A:middle
With that, let me bring up Troy
to talk about view debugging.

358
00:17:34,516 --> 00:17:40,886 A:middle
[ Applause ]

359
00:17:41,386 --> 00:17:42,396 A:middle
>> Hi, my name is Troy.

360
00:17:42,626 --> 00:17:46,566 A:middle
And thank you for coming to
our Debugging in Xcode 6.

361
00:17:47,116 --> 00:17:49,876 A:middle
As you may know, Xcode
is a fantastic tool

362
00:17:50,396 --> 00:17:52,426 A:middle
for discovering things
about your application

363
00:17:52,816 --> 00:17:54,086 A:middle
that may be hidden
through the debugger.

364
00:17:55,296 --> 00:17:57,566 A:middle
Han Ming just showed
us two new features

365
00:17:57,696 --> 00:18:00,746 A:middle
through the Pending Blocks
and recorded stack traces

366

367
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

368
00:17:57,696 --> 00:18:00,746 A:middle
through the Pending Blocks
and recorded stack traces

369
00:18:01,406 --> 00:18:04,086 A:middle
that are hidden pieces
of information

370
00:18:04,086 --> 00:18:06,716 A:middle
about your application
that Xcode exposes to you.

371
00:18:07,826 --> 00:18:10,086 A:middle
But we all know that
not all of the bugs

372
00:18:10,086 --> 00:18:11,436 A:middle
in our applications are hidden.

373
00:18:11,856 --> 00:18:13,386 A:middle
Some of them are
extremely visible.

374
00:18:13,386 --> 00:18:14,626 A:middle
They're staring us
right in the face,

375
00:18:15,016 --> 00:18:16,686 A:middle
from the user interface
of our applications.

376
00:18:16,686 --> 00:18:20,476 A:middle
And since these are visual
bugs, wouldn't it be great

377
00:18:21,066 --> 00:18:22,816 A:middle
if we could debug
them visually as well?

378
00:18:23,916 --> 00:18:25,406 A:middle
And now in Xcode 6, you can.

379
00:18:26,316 --> 00:18:28,046 A:middle
So what kind of bugs
am I talking about?

380
00:18:28,816 --> 00:18:31,226 A:middle
These are the bugs where you
have a mis-positioned view

381
00:18:31,226 --> 00:18:32,626 A:middle
or clipping is wrong.

382
00:18:33,496 --> 00:18:35,546 A:middle
These are the squished
or the stretched views.

383
00:18:35,626 --> 00:18:37,816 A:middle
And these are the views
that are missing entirely

384
00:18:37,816 --> 00:18:38,846 A:middle
because the visibility

385
00:18:38,846 --> 00:18:42,206 A:middle
or "is hidden" attribute is set
incorrectly in your application.

386
00:18:43,986 --> 00:18:48,676 A:middle
But that's not all
that this new aspect

387
00:18:48,676 --> 00:18:50,126 A:middle
of the debugger in
Xcode helps with.

388
00:18:50,906 --> 00:18:52,166 A:middle
You can use it when
you're not even debugging.

389
00:18:52,306 --> 00:18:53,736 A:middle
Let's say I have an
application like this,

390
00:18:54,676 --> 00:18:59,676 A:middle
and I would like to add
a new button down here.

391

392
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

393
00:19:00,646 --> 00:19:04,476 A:middle
And I don't know, maybe
it's a new code base to me,

394
00:19:04,476 --> 00:19:06,106 A:middle
maybe it's been awhile
since I've read this,

395
00:19:06,106 --> 00:19:08,426 A:middle
I don't know what this
view is behind it.

396
00:19:08,786 --> 00:19:13,406 A:middle
Wouldn't it be great if I
could just click with the mouse

397
00:19:13,406 --> 00:19:14,486 A:middle
and find out what that view is?

398
00:19:14,946 --> 00:19:15,876 A:middle
Well now, you can.

399
00:19:16,956 --> 00:19:21,236 A:middle
This view debugger feature is
integrated all throughout Xcode.

400
00:19:22,126 --> 00:19:24,586 A:middle
So let's take a look at
the Xcode window and figure

401
00:19:24,586 --> 00:19:25,986 A:middle
out where the different
pieces are

402
00:19:26,196 --> 00:19:28,486 A:middle
so that we know what we're
talking about when we're talking

403
00:19:28,716 --> 00:19:30,546 A:middle
about this view debugging
feature.

404
00:19:31,316 --> 00:19:33,256 A:middle
Here is the Xcode window
that we all know and love.

405
00:19:34,286 --> 00:19:35,766 A:middle
When your application
is running,

406
00:19:35,766 --> 00:19:37,566 A:middle
down at the bottom
there's the Debug Bar.

407
00:19:37,566 --> 00:19:40,276 A:middle
This is where you find
your familiar items

408
00:19:40,276 --> 00:19:42,296 A:middle
such as the Pause
and Continue buttons.

409
00:19:42,656 --> 00:19:44,156 A:middle
Well now there's a
new button in there,

410
00:19:44,616 --> 00:19:47,746 A:middle
which is the Debug View
Hierarchy button, right here.

411
00:19:48,176 --> 00:19:50,766 A:middle
Simply click this,
and Xcode is going

412
00:19:50,766 --> 00:19:53,916 A:middle
to import the user
interface of your application

413
00:19:53,916 --> 00:19:56,386 A:middle
into the main editor
window of Xcode.

414
00:19:57,016 --> 00:20:01,436 A:middle
But it's not just imported as
a static image, it's imported

415

416
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

417
00:19:57,016 --> 00:20:01,436 A:middle
But it's not just imported as
a static image, it's imported

418
00:20:01,436 --> 00:20:05,546 A:middle
as separate pieces so that
Xcode can actually explode it

419
00:20:05,546 --> 00:20:10,976 A:middle
out into three dimensions and
rotate it around if you want.

420
00:20:11,046 --> 00:20:14,206 A:middle
Seeing your application in this
3D view is very illuminating.

421
00:20:14,206 --> 00:20:17,406 A:middle
It allows you to
traverse the hierarchy,

422
00:20:17,406 --> 00:20:19,606 A:middle
see what the parent views are,
see where the siblings are.

423
00:20:19,606 --> 00:20:22,146 A:middle
But if you want a more
concrete representation

424
00:20:22,216 --> 00:20:25,946 A:middle
of your view hierarchy, we
turn to the Debug Navigator.

425
00:20:26,956 --> 00:20:28,866 A:middle
This is as Han Ming
talked about,

426
00:20:28,866 --> 00:20:30,616 A:middle
the place where you find
your threads and your queues.

427
00:20:31,626 --> 00:20:33,616 A:middle
And that's available here

428
00:20:33,616 --> 00:20:36,096 A:middle
in this Process View
Option Selector.

429
00:20:36,746 --> 00:20:40,916 A:middle
If you select the View option
in there, now there's threads,

430
00:20:40,916 --> 00:20:44,396 A:middle
queues, and views, down below
we have, your view hierarchy

431
00:20:44,746 --> 00:20:52,106 A:middle
in the application
which is right here.

432
00:20:52,276 --> 00:20:53,816 A:middle
Down below, we have
some filtering options

433
00:20:53,816 --> 00:20:55,546 A:middle
to help you tame that list.

434
00:20:56,286 --> 00:20:58,056 A:middle
We have the Show
Only Primary Views

435
00:20:58,056 --> 00:20:59,736 A:middle
and we have a Show
Only Displayed Views.

436
00:20:59,736 --> 00:21:02,626 A:middle
Let me stop on this second one,
because this one's important.

437

438
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

439
00:20:59,736 --> 00:21:02,626 A:middle
Let me stop on this second one,
because this one's important.

440
00:21:02,626 --> 00:21:04,736 A:middle
If you have a view that's
missing in your application,

441
00:21:05,396 --> 00:21:08,486 A:middle
and maybe the "is
hidden" is set on it.

442
00:21:08,736 --> 00:21:11,476 A:middle
And so Xcode is also going
to hide it in the Xcode UI,

443
00:21:12,016 --> 00:21:14,006 A:middle
but Xcode knows about it.

444
00:21:14,006 --> 00:21:15,236 A:middle
It could show it to you.

445
00:21:15,286 --> 00:21:19,266 A:middle
So, you can simply turn off this
option and Xcode will show all

446
00:21:19,266 --> 00:21:21,016 A:middle
of your views, even the
ones that are hidden.

447
00:21:22,326 --> 00:21:25,566 A:middle
Finally, there's the string
comparison there, which we'll do

448
00:21:25,566 --> 00:21:28,556 A:middle
in an exact match of that
list in the navigator

449
00:21:28,556 --> 00:21:31,556 A:middle
to help you drill down to
exactly the item you're

450
00:21:31,556 --> 00:21:31,976 A:middle
looking for.

451
00:21:33,096 --> 00:21:34,366 A:middle
Now let's turn our attention

452
00:21:34,366 --> 00:21:37,026 A:middle
over to the right hand
side of the Xcode window.

453
00:21:37,316 --> 00:21:38,966 A:middle
This is the Inspector Area.

454
00:21:39,086 --> 00:21:40,366 A:middle
And you might be
familiar with this

455
00:21:40,366 --> 00:21:41,816 A:middle
if you've ever used
an interface builder,

456
00:21:41,816 --> 00:21:42,936 A:middle
because these are very similar.

457
00:21:43,616 --> 00:21:45,126 A:middle
We have an object inspector,

458
00:21:45,436 --> 00:21:46,986 A:middle
and there's a size
inspector as well.

459
00:21:47,966 --> 00:21:51,016 A:middle
Here we see the object
inspector for a UIImageView.

460
00:21:52,336 --> 00:21:54,616 A:middle
And not only that, this is
a specific UIImageView

461
00:21:55,016 --> 00:21:58,336 A:middle
because we're selecting --
we're clicking on one that's

462
00:21:58,506 --> 00:22:00,906 A:middle
in our application, so we
actually have the address

463

464
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

465
00:21:58,506 --> 00:22:00,906 A:middle
in our application, so we
actually have the address

466
00:22:00,906 --> 00:22:03,676 A:middle
of that object as well,
which is Resident in Memory,

467
00:22:03,906 --> 00:22:05,756 A:middle
on your Mac of on
your iOS device.

468
00:22:07,026 --> 00:22:10,606 A:middle
We have the thumbnail and all
the other interesting attributes

469
00:22:10,876 --> 00:22:14,036 A:middle
about that view listed
in this Inspector.

470
00:22:14,686 --> 00:22:16,136 A:middle
Finally, we have
the Size Inspector.

471
00:22:16,136 --> 00:22:17,356 A:middle
This is going to
show you the size

472
00:22:17,356 --> 00:22:18,916 A:middle
and position, as
you might expect.

473
00:22:19,526 --> 00:22:22,916 A:middle
It's also going to show a list
of the auto-layout constraints

474
00:22:22,916 --> 00:22:26,706 A:middle
that are affecting that
view, with two exceptions.

475
00:22:26,706 --> 00:22:29,176 A:middle
Down at the bottom,
you see two constraints

476
00:22:29,176 --> 00:22:30,346 A:middle
which are deemphasized.

477
00:22:30,346 --> 00:22:33,216 A:middle
These are not affecting the
layout of your view currently,

478
00:22:33,456 --> 00:22:34,656 A:middle
but they're still
attached to the view

479
00:22:34,656 --> 00:22:36,216 A:middle
and they still have meaning.

480
00:22:36,376 --> 00:22:40,926 A:middle
In this case, we have
a self.width of 320,

481
00:22:41,416 --> 00:22:43,386 A:middle
and in the parentheses, you
see that's content size.

482
00:22:43,386 --> 00:22:46,876 A:middle
That's because the system added
this implicitly to this view

483
00:22:47,356 --> 00:22:48,806 A:middle
to represent the content size.

484
00:22:49,536 --> 00:22:51,696 A:middle
They're deemphasized because
up above, they're redundant

485
00:22:51,696 --> 00:22:54,146 A:middle
with two explicit
constraints that were added

486
00:22:54,146 --> 00:22:57,646 A:middle
in Interface Builder, and
those also have a width of 320,

487
00:22:57,646 --> 00:22:59,836 A:middle
in this case, but they
might not always match.

488

489
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

490
00:23:00,406 --> 00:23:01,776 A:middle
So this is a great
place to check

491
00:23:01,776 --> 00:23:04,516 A:middle
if you think you're
having constraint issues,

492
00:23:04,516 --> 00:23:06,406 A:middle
as we're going to see
in a demo which I'd

493
00:23:06,406 --> 00:23:10,006 A:middle
like to show you right now.

494
00:23:10,266 --> 00:23:12,116 A:middle
Alright, here we
have the application

495
00:23:12,256 --> 00:23:13,256 A:middle
that Han Ming started with.

496
00:23:14,376 --> 00:23:16,916 A:middle
And if you have super,
eagle eyes, or maybe not,

497
00:23:17,096 --> 00:23:20,346 A:middle
you'll notice that there's a
pretty bad visual bug down here.

498
00:23:20,706 --> 00:23:24,176 A:middle
I wonder if the View Debugging
in Xcode can help us find that.

499
00:23:24,376 --> 00:23:27,536 A:middle
So I'm going to switch
over to Xcode,

500
00:23:27,766 --> 00:23:33,606 A:middle
find this Debug View Hierarchy
button, and simply press it.

501
00:23:33,876 --> 00:23:36,556 A:middle
What's happening now is Xcode's
going through all of the views

502
00:23:36,556 --> 00:23:39,876 A:middle
in the application, and pulling
them back into the Xcode window.

503
00:23:40,556 --> 00:23:43,176 A:middle
Now we see, the user
interface right here.

504
00:23:44,066 --> 00:23:46,466 A:middle
And already, you're
getting a better look

505
00:23:46,466 --> 00:23:48,896 A:middle
at what might be the
issue in this application.

506
00:23:48,896 --> 00:23:51,616 A:middle
You see, some of the
views, some of the images

507
00:23:51,616 --> 00:23:54,676 A:middle
in this UICollectionView,
are outside the view

508
00:23:54,676 --> 00:23:56,096 A:middle
where they are supposed
to be contained.

509
00:23:56,906 --> 00:24:01,466 A:middle
That's a pretty interesting fact
to help diagnose the problem

510

511
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

512
00:23:56,906 --> 00:24:01,466 A:middle
That's a pretty interesting fact
to help diagnose the problem

513
00:24:01,466 --> 00:24:04,936 A:middle
but it doesn't help us solve
the problem, so we're going

514
00:24:04,936 --> 00:24:07,536 A:middle
to have to dig deeper.

515
00:24:09,196 --> 00:24:12,486 A:middle
To explode the View Hierarchy
of you application, all you need

516
00:24:12,486 --> 00:24:14,936 A:middle
to do is simply click and
drag anywhere in the canvas.

517
00:24:16,056 --> 00:24:19,666 A:middle
This allows us to see the
parent-child relationships

518
00:24:19,666 --> 00:24:20,646 A:middle
between some of these views.

519
00:24:21,556 --> 00:24:25,856 A:middle
I have open on the right
hand side, the Assist Editor

520
00:24:25,856 --> 00:24:27,006 A:middle
which is in Automatic Mode.

521
00:24:27,626 --> 00:24:33,416 A:middle
This allows Xcode to track the
file that I click over here

522
00:24:33,416 --> 00:24:35,186 A:middle
in the view debugger,

523
00:24:35,606 --> 00:24:37,936 A:middle
with a source code file
that matches with it.

524
00:24:38,246 --> 00:24:40,406 A:middle
So if I click here, I
get the source code file

525
00:24:40,406 --> 00:24:43,276 A:middle
for UIImageView.

526
00:24:43,276 --> 00:24:48,776 A:middle
I'm going to traverse backwards
up through the hierarchy,

527
00:24:48,986 --> 00:24:50,706 A:middle
until I get to the custom cell

528
00:24:50,706 --> 00:24:52,236 A:middle
that has been written
for this class.

529
00:24:53,026 --> 00:24:55,316 A:middle
The parent of this
UIImageView is a UIView,

530
00:24:55,486 --> 00:24:57,486 A:middle
and this is the Content
View of that cell.

531
00:24:57,976 --> 00:25:01,986 A:middle
And the one behind that is the
Run-Details Collection View Cell

532

533
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

534
00:24:57,976 --> 00:25:01,986 A:middle
And the one behind that is the
Run-Details Collection View Cell

535
00:25:01,986 --> 00:25:03,926 A:middle
which is custom code
in my application.

536
00:25:04,516 --> 00:25:09,876 A:middle
I'm also going to open up
the Inspector here and check

537
00:25:09,876 --> 00:25:12,086 A:middle
out some of the positions
of these views as --

538
00:25:12,086 --> 00:25:14,676 A:middle
because it looks like there's
probably a position bug here.

539
00:25:15,466 --> 00:25:20,256 A:middle
So traversing back up the stack,
starting with one of these views

540
00:25:20,256 --> 00:25:23,626 A:middle
that has a missing image, I'm
going to click here and see

541
00:25:23,626 --> 00:25:25,496 A:middle
that the position is 160 45.

542
00:25:26,406 --> 00:25:32,546 A:middle
Its child is 45 45, because
the position is relative

543
00:25:32,546 --> 00:25:36,486 A:middle
to its parent, but where
is this final view?

544
00:25:37,246 --> 00:25:38,556 A:middle
I'm going to go over
to the Navigator

545
00:25:38,836 --> 00:25:42,126 A:middle
and find the view I have
selected is this UIView,

546
00:25:42,436 --> 00:25:44,496 A:middle
and I can simply find
where its child is.

547
00:25:44,606 --> 00:25:46,706 A:middle
I don't know where it
is in spatial space,

548
00:25:46,736 --> 00:25:50,056 A:middle
but I know where it is in the
real hierarchy of the view.

549
00:25:50,316 --> 00:25:54,626 A:middle
So if I click here, I see
that the position is 160 45.

550
00:25:54,626 --> 00:25:56,506 A:middle
And remember, that's
based on the parent.

551
00:25:57,016 --> 00:26:00,236 A:middle
So what I'm actually looking
at is this view over here.

552

553
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

554
00:25:57,016 --> 00:26:00,236 A:middle
So what I'm actually looking
at is this view over here.

555
00:26:00,236 --> 00:26:01,316 A:middle
I thought that was
a working one,

556
00:26:01,666 --> 00:26:06,816 A:middle
but the view has been shifted
off of the cell and it's --

557
00:26:06,946 --> 00:26:07,966 A:middle
that's the reason it's missing.

558
00:26:09,146 --> 00:26:14,006 A:middle
So let's go back up to the
cell class and take a look

559
00:26:14,006 --> 00:26:17,016 A:middle
at the implementation
of that class.

560
00:26:17,016 --> 00:26:19,926 A:middle
I'm going to Command Click on
the class name here to dive

561
00:26:19,926 --> 00:26:20,816 A:middle
into the implementation.

562
00:26:21,326 --> 00:26:25,596 A:middle
And here you see a fairly simple
implementation for a cell view.

563
00:26:26,126 --> 00:26:28,396 A:middle
All it does, is it
overrides the initWithFrame,

564
00:26:29,296 --> 00:26:33,046 A:middle
it creates a new UIImageView,
and then it adds it as the --

565
00:26:33,046 --> 00:26:36,596 A:middle
a sub view of the Content
View right down here.

566
00:26:37,436 --> 00:26:40,416 A:middle
Thinking about the
information we found earlier.

567
00:26:41,056 --> 00:26:43,746 A:middle
We know that there's a
position issue and I can see

568
00:26:43,746 --> 00:26:48,136 A:middle
that we're passing the frameRect
of the cell to this sub view.

569
00:26:48,946 --> 00:26:49,686 A:middle
That's not what I want.

570
00:26:49,686 --> 00:26:53,186 A:middle
I want the sub view to have
the same bounds as the cell.

571
00:26:53,306 --> 00:26:58,776 A:middle
So instead of frameRect, I'm
going to type self.bounds.

572
00:26:59,246 --> 00:27:00,576 A:middle
This should be enough
to fix our problem,

573

574
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

575
00:26:59,246 --> 00:27:00,576 A:middle
This should be enough
to fix our problem,

576
00:27:00,576 --> 00:27:03,296 A:middle
so I'm going to build and run.

577
00:27:04,366 --> 00:27:06,186 A:middle
Switch over to the simulator.

578
00:27:07,176 --> 00:27:12,506 A:middle
And dive back into
our Run Details View.

579
00:27:14,006 --> 00:27:18,186 A:middle
Sure enough, we have the fully
functioning UICollectionView

580
00:27:18,186 --> 00:27:21,196 A:middle
with all our images,
tightly spaced as expected.

581
00:27:21,906 --> 00:27:24,886 A:middle
Now that that bug's fixed,
I do see another issue.

582
00:27:24,886 --> 00:27:28,576 A:middle
You see, this label
up here, San Fran,

583
00:27:28,576 --> 00:27:30,726 A:middle
is kind of a cheeky
nickname for San Francisco,

584
00:27:30,726 --> 00:27:32,356 A:middle
but this is a serious
running app.

585
00:27:33,156 --> 00:27:36,146 A:middle
This is an app for those
of us that go every morning

586
00:27:36,146 --> 00:27:38,566 A:middle
and we don't call this
fair city San Fran.

587
00:27:38,716 --> 00:27:39,766 A:middle
This is San Francisco.

588
00:27:40,196 --> 00:27:43,916 A:middle
So let's go back to the
View Debugger and see

589
00:27:43,916 --> 00:27:45,636 A:middle
if we can understand what
might be going on there.

590
00:27:54,046 --> 00:27:54,976 A:middle
I'm going to take a moment

591
00:27:54,976 --> 00:27:58,176 A:middle
to admire the fully
functioning, UICollectionView.

592
00:27:58,296 --> 00:27:59,146 A:middle
Looks great.

593
00:27:59,716 --> 00:28:02,436 A:middle
I'm going then turn back
to two dimensional mode.

594

595
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

596
00:27:59,716 --> 00:28:02,436 A:middle
I'm going then turn back
to two dimensional mode.

597
00:28:02,436 --> 00:28:05,046 A:middle
This button down here allows
us to reset the view hierarchy,

598
00:28:05,576 --> 00:28:07,376 A:middle
and I'm going to
click on this label.

599
00:28:07,926 --> 00:28:13,596 A:middle
Alright, I know that I'm using
Auto Layout in this application,

600
00:28:13,596 --> 00:28:16,276 A:middle
so let's go ahead and see if
there's anything having to do

601
00:28:16,276 --> 00:28:17,956 A:middle
with constraints that
might be an issue.

602
00:28:18,516 --> 00:28:22,526 A:middle
Down here is the Show
Constraints button.

603
00:28:22,526 --> 00:28:26,006 A:middle
This, it shows all the
constraints, and it also dims

604
00:28:26,006 --> 00:28:28,656 A:middle
out the views that are not
currently related to those --

605
00:28:28,656 --> 00:28:30,606 A:middle
to that view or its constraints.

606
00:28:30,826 --> 00:28:35,106 A:middle
This allows us to really
focus in on the work at hand.

607
00:28:36,016 --> 00:28:39,996 A:middle
When I zoom in, it's
plain to see

608
00:28:39,996 --> 00:28:42,326 A:middle
that there are two constraints
attached to this label.

609
00:28:43,166 --> 00:28:46,916 A:middle
And if I look over here,
I see the width is 95.

610
00:28:47,876 --> 00:28:51,756 A:middle
There's an explicit constraint
of 95, but down in the bottom,

611
00:28:51,756 --> 00:28:54,586 A:middle
the content size is 109.5.

612
00:28:54,966 --> 00:28:57,796 A:middle
So clearly, somebody added
an explicit constraint

613
00:28:57,796 --> 00:29:01,936 A:middle
in Interface Builder and that's
clipping the implicit size

614

615
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

616
00:28:57,796 --> 00:29:01,936 A:middle
in Interface Builder and that's
clipping the implicit size

617
00:29:02,096 --> 00:29:02,946 A:middle
of that label.

618
00:29:03,706 --> 00:29:06,216 A:middle
So I'm just going to switch
over to my storyboard,

619
00:29:07,516 --> 00:29:10,286 A:middle
find that label, and delete
that explicit constraint.

620
00:29:10,876 --> 00:29:17,106 A:middle
If I had the time to show you
guys, I would add a constraint

621
00:29:17,166 --> 00:29:18,456 A:middle
that properly limited that label

622
00:29:18,456 --> 00:29:20,546 A:middle
so it didn't go beyond
the bounds of the screen,

623
00:29:20,546 --> 00:29:23,486 A:middle
but I'm sure you can find an
Interface Builder session.

624
00:29:23,486 --> 00:29:26,446 A:middle
For example, this afternoon
at 3:15 that will go

625
00:29:27,526 --> 00:29:30,166 A:middle
into more detail about how
to lay out constraints.

626
00:29:31,276 --> 00:29:35,576 A:middle
And then we have the full
string of that label.

627
00:29:36,696 --> 00:29:40,306 A:middle
So we've seen that the View
Debugger, is a fantastic way

628
00:29:40,646 --> 00:29:44,226 A:middle
to look -- take a look
at your application.

629
00:29:44,226 --> 00:29:45,466 A:middle
And I invite you
to do just that.

630
00:29:45,726 --> 00:29:49,816 A:middle
Go back today, just after the
session, open up your computers

631
00:29:49,816 --> 00:29:51,366 A:middle
and just try hitting
the View Debugger button

632
00:29:51,556 --> 00:29:52,356 A:middle
on your application.

633
00:29:52,356 --> 00:29:55,676 A:middle
I think you'll find it
illuminating and the integration

634
00:29:55,676 --> 00:29:57,016 A:middle
with Xcode is fantastic.

635
00:29:57,606 --> 00:29:59,156 A:middle
Now I'd like to turn
it over to Kerry,

636
00:29:59,416 --> 00:30:01,046 A:middle
who's going to teach
you a little bit more

637

638
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

639
00:29:59,416 --> 00:30:01,046 A:middle
who's going to teach
you a little bit more

640
00:30:01,046 --> 00:30:02,326 A:middle
about Quick Look Previews.

641
00:30:03,516 --> 00:30:06,566 A:middle
[ Applause ]

642
00:30:07,066 --> 00:30:07,986 A:middle
>> Thank you, Troy.

643
00:30:08,516 --> 00:30:09,566 A:middle
My name is Kerry.

644
00:30:09,806 --> 00:30:12,866 A:middle
And how is everyone enjoying
the conference so far?

645
00:30:13,516 --> 00:30:15,546 A:middle
[ Applause ]

646
00:30:16,046 --> 00:30:16,316 A:middle
That's great.

647
00:30:16,316 --> 00:30:18,536 A:middle
I know that we are very
excited to be here as well,

648
00:30:18,836 --> 00:30:23,486 A:middle
to show some great new
debugging features in Xcode 6.

649
00:30:23,896 --> 00:30:26,076 A:middle
But first, let's
take a step back.

650
00:30:27,026 --> 00:30:31,076 A:middle
Last year, Xcode 5 debuted
with this great new feature,

651
00:30:31,546 --> 00:30:34,806 A:middle
whereby as you are running and
debugging your application,

652
00:30:35,246 --> 00:30:39,196 A:middle
you can get a live Quick
Look preview of your data.

653
00:30:39,886 --> 00:30:44,006 A:middle
So simply by clicking
on the Quick Look icon

654
00:30:44,006 --> 00:30:46,486 A:middle
in the Debug Bar, you
can get this popover

655
00:30:46,486 --> 00:30:47,676 A:middle
that would show you a preview.

656
00:30:47,966 --> 00:30:51,266 A:middle
You could even, simply by
hovering over the source

657
00:30:51,266 --> 00:30:53,266 A:middle
of a variable in
the Source Editor,

658
00:30:53,856 --> 00:30:57,326 A:middle
get a Quick Look preview right
from there, just by clicking

659
00:30:57,326 --> 00:31:02,306 A:middle
on the Quick Look icon in
the popover that appears.

660

661
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

662
00:30:57,326 --> 00:31:02,306 A:middle
on the Quick Look icon in
the popover that appears.

663
00:31:02,546 --> 00:31:07,196 A:middle
Now, Xcode 5 debuted with
default support for a number

664
00:31:07,196 --> 00:31:11,126 A:middle
of important and common
object types like images

665
00:31:11,466 --> 00:31:15,686 A:middle
and Bezier paths and even
things like map locations.

666
00:31:16,646 --> 00:31:19,326 A:middle
Well, we've gotten a lot of
great feedback from this feature

667
00:31:19,326 --> 00:31:22,426 A:middle
and I know that it's been
very useful to a number

668
00:31:22,426 --> 00:31:23,896 A:middle
of developers including myself.

669
00:31:24,486 --> 00:31:29,826 A:middle
So to build on the success,
in Xcode 6, there is support

670
00:31:29,826 --> 00:31:31,826 A:middle
for two new object types.

671
00:31:33,116 --> 00:31:35,526 A:middle
The first is Views.

672
00:31:36,536 --> 00:31:39,156 A:middle
So whether it be a UIView
or an NSView,

673
00:31:39,886 --> 00:31:44,446 A:middle
you can get a Quick Look preview
of that, simply by clicking

674
00:31:44,446 --> 00:31:48,976 A:middle
in the Variables view and
clicking on the Quick Look icon

675
00:31:48,976 --> 00:31:51,386 A:middle
or my favorite is
just hit the Space Bar

676
00:31:51,456 --> 00:31:53,976 A:middle
and it will bring
up a nice preview.

677
00:31:54,166 --> 00:31:57,436 A:middle
And considering how common
views are in most applications,

678
00:31:58,066 --> 00:32:00,196 A:middle
I think this will be a
very powerful feature.

679

680
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

681
00:31:58,066 --> 00:32:00,196 A:middle
I think this will be a
very powerful feature.

682
00:32:01,756 --> 00:32:06,816 A:middle
Now the second object type
that was added is, well,

683
00:32:06,816 --> 00:32:08,336 A:middle
I honestly don't know.

684
00:32:08,916 --> 00:32:11,406 A:middle
That's because it's
your own custom class.

685
00:32:12,656 --> 00:32:15,646 A:middle
So now for the first
time, if you have a class

686
00:32:16,256 --> 00:32:19,976 A:middle
that does some custom drawing
and perhaps returns a --

687
00:32:19,976 --> 00:32:24,356 A:middle
an image or a Bezier path
or something like that,

688
00:32:25,246 --> 00:32:28,026 A:middle
you can now get a
preview of that as well.

689
00:32:29,016 --> 00:32:32,236 A:middle
Before now, there wasn't
great support for that.

690
00:32:32,416 --> 00:32:34,346 A:middle
So if you were to try
and get a preview,

691
00:32:34,346 --> 00:32:37,126 A:middle
you would get this Default View

692
00:32:37,126 --> 00:32:39,766 A:middle
which had some pertinent
information like the name

693
00:32:39,766 --> 00:32:42,536 A:middle
and the address and the
type, but no preview.

694
00:32:43,556 --> 00:32:46,676 A:middle
So I would like to show
you how to fix that.

695
00:32:46,676 --> 00:32:51,126 A:middle
There's a simple method
that you can implement

696
00:32:51,336 --> 00:32:53,196 A:middle
in your Classes Implementation

697
00:32:53,236 --> 00:32:56,326 A:middle
and it's called
debugQuickLookObject.

698
00:32:57,756 --> 00:33:00,246 A:middle
Now in this class, you can
either call your drawing code

699

700
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

701
00:32:57,756 --> 00:33:00,246 A:middle
Now in this class, you can
either call your drawing code

702
00:33:00,246 --> 00:33:03,566 A:middle
or implement it in there,
but the important point is,

703
00:33:03,646 --> 00:33:05,896 A:middle
from this method,
you return something

704
00:33:05,896 --> 00:33:08,046 A:middle
that Xcode knows how to show.

705
00:33:08,946 --> 00:33:12,376 A:middle
So one of the default supported
types should be returned

706
00:33:12,376 --> 00:33:15,196 A:middle
from this method and then
you'll be good to go.

707
00:33:15,236 --> 00:33:19,186 A:middle
And I would like to
show you that now.

708
00:33:20,416 --> 00:33:22,516 A:middle
So here we have the
Jogr application

709
00:33:22,516 --> 00:33:24,726 A:middle
that we've been seeing
in previous demos.

710
00:33:25,106 --> 00:33:27,036 A:middle
And I'm going to click
the Routes button,

711
00:33:27,696 --> 00:33:30,196 A:middle
and we'll see Han Ming's
run from this morning,

712
00:33:30,836 --> 00:33:33,886 A:middle
if that's indeed the case.

713
00:33:35,576 --> 00:33:38,986 A:middle
Okay, so this class has a --

714
00:33:38,986 --> 00:33:42,456 A:middle
an object class called
RoutePathOverlay

715
00:33:42,936 --> 00:33:47,826 A:middle
which accesses the run data
to generate this Bezier path

716
00:33:47,826 --> 00:33:49,896 A:middle
that they gets overlaid
onto the map.

717
00:33:50,956 --> 00:33:53,206 A:middle
So let's look at that
a little further.

718
00:33:53,206 --> 00:33:57,086 A:middle
Well I'm going to click on the
map and I'm going to hit this --

719
00:33:57,216 --> 00:33:58,896 A:middle
whoa, scrolls really fast.

720
00:33:59,176 --> 00:34:00,596 A:middle
I'm going to hit
this break point.

721

722
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

723
00:33:59,176 --> 00:34:00,596 A:middle
I'm going to hit
this break point.

724
00:34:01,066 --> 00:34:03,496 A:middle
And let's say I'm trying
to debug some issue here,

725
00:34:04,466 --> 00:34:07,226 A:middle
now down in the Variables View,
we can see we've got a number

726
00:34:07,226 --> 00:34:09,376 A:middle
of local variables
like this point.

727
00:34:09,916 --> 00:34:12,835 A:middle
And if I click on
the Quick Look icon,

728
00:34:12,835 --> 00:34:14,806 A:middle
I can see a preview
of the point.

729
00:34:15,096 --> 00:34:16,746 A:middle
This is our route path overlay.

730
00:34:17,436 --> 00:34:20,005 A:middle
And if I click on that, so I'm
going to hit the Space Bar,

731
00:34:20,005 --> 00:34:22,556 A:middle
and what it just comes up
with is just some generic

732
00:34:22,556 --> 00:34:25,106 A:middle
information, but we can
do better than that.

733
00:34:26,315 --> 00:34:27,795 A:middle
So I'm going to stop here.

734
00:34:28,446 --> 00:34:32,186 A:middle
I'm going to go to
our RoutePathOverlay.

735
00:34:32,786 --> 00:34:35,396 A:middle
And I've got the method

736
00:34:35,396 --> 00:34:37,835 A:middle
that I was talking about:
debugQuickLookObject.

737
00:34:38,025 --> 00:34:42,766 A:middle
And it's a sort of a long
title but try and remember.

738
00:34:43,545 --> 00:34:47,096 A:middle
Okay, and if I uncomment
that, what this method does,

739
00:34:47,246 --> 00:34:48,806 A:middle
it's not really important
because it's going

740
00:34:48,806 --> 00:34:51,596 A:middle
to be different for
every custom class,

741
00:34:51,676 --> 00:34:58,076 A:middle
but what it does is it accesses
each of the 364 some odd points

742
00:34:58,206 --> 00:35:00,776 A:middle
of map location for that run.

743

744
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

745
00:34:58,206 --> 00:35:00,776 A:middle
of map location for that run.

746
00:35:01,366 --> 00:35:05,776 A:middle
And then generates a Bezier
path, scales it a little bit,

747
00:35:05,776 --> 00:35:08,656 A:middle
and then returns from
it, a Bezier path,

748
00:35:08,656 --> 00:35:11,386 A:middle
because Xcode 6 knows
how to render

749
00:35:11,646 --> 00:35:15,536 A:middle
or Quick Look preview
a Bezier path.

750
00:35:15,656 --> 00:35:18,836 A:middle
So now that we've
implemented that or enabled it,

751
00:35:18,836 --> 00:35:24,606 A:middle
I'm going to Run
and Debug again.

752
00:35:25,696 --> 00:35:31,706 A:middle
And we'll go to our routes,
and we'll click on the map.

753
00:35:32,266 --> 00:35:37,986 A:middle
And if all goes well, we should
see a nice detailed preview

754
00:35:37,986 --> 00:35:41,086 A:middle
of each of those points
of data from the start

755
00:35:41,116 --> 00:35:46,646 A:middle
until the ambulance picked up
Han Ming when he collapsed.

756
00:35:49,366 --> 00:35:52,486 A:middle
Okay. So, what have
we seen today?

757
00:35:52,756 --> 00:35:56,316 A:middle
We've seen Han Ming show
us how we can very easily

758
00:35:56,316 --> 00:36:00,716 A:middle
and more effectively
debug queues and blocks

759

760
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

761
00:35:56,316 --> 00:36:00,716 A:middle
and more effectively
debug queues and blocks

762
00:36:01,296 --> 00:36:02,836 A:middle
with the new Queue
Debugging feature.

763
00:36:03,426 --> 00:36:07,886 A:middle
And then Troy showed us
how we can more effectively

764
00:36:07,886 --> 00:36:12,006 A:middle
or easily explore, our
application's View Hierarchy.

765
00:36:12,216 --> 00:36:16,326 A:middle
I've used this very effectively
myself several times.

766
00:36:16,516 --> 00:36:17,376 A:middle
It's been very helpful.

767
00:36:17,446 --> 00:36:21,186 A:middle
And then I showed you how
to add Quick Look previews

768
00:36:21,466 --> 00:36:23,336 A:middle
for your own custom classes.

769
00:36:23,726 --> 00:36:28,186 A:middle
And remember, you can
also now preview any view.

770
00:36:28,616 --> 00:36:32,176 A:middle
So for more information, you
can contact our great Developer

771
00:36:32,176 --> 00:36:33,956 A:middle
Tools Evangelist, Dave DeLong.

772
00:36:34,516 --> 00:36:36,786 A:middle
I've also got a link
here to the documentation

773
00:36:36,786 --> 00:36:38,836 A:middle
for Quick Look previews,

774
00:36:38,926 --> 00:36:43,636 A:middle
which documentation will show
you a full list of exactly all

775
00:36:43,636 --> 00:36:46,566 A:middle
of the default supported
types in Xcode 6.

776
00:36:48,286 --> 00:36:50,426 A:middle
And then, don't forget
the developer forums.

777
00:36:51,976 --> 00:36:55,406 A:middle
There's a lot of great
debugging sessions this week,

778
00:36:55,536 --> 00:36:56,846 A:middle
so be sure to check them out.

779
00:36:57,636 --> 00:36:59,346 A:middle
Thank you very much.

780

781
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

782
00:37:00,516 --> 00:37:06,770 A:middle
[ Applause ]

783
