X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:11,516 A:middle
[ Silence ]

2
00:00:12,016 --> 00:00:13,000 A:middle
[ Applause ]

3
00:00:13,186 --> 00:00:13,556 A:middle
>> Thank you.

4
00:00:16,446 --> 00:00:17,286 A:middle
I'm Mike Hess.

5
00:00:17,286 --> 00:00:20,436 A:middle
I'm a software engineer on the
iOS Apps and Frameworks team

6
00:00:20,436 --> 00:00:22,866 A:middle
and I'm here with Johannes
Fortmann to talk to you

7
00:00:22,866 --> 00:00:25,876 A:middle
about building great cloud
documents-based applications.

8
00:00:26,836 --> 00:00:28,006 A:middle
So here we go.

9
00:00:28,086 --> 00:00:30,776 A:middle
We've made some important
changes to iCloud.

10
00:00:30,866 --> 00:00:34,196 A:middle
First, the iCloud daemon has
been completely rewritten

11
00:00:34,196 --> 00:00:35,336 A:middle
on top of CloudKit.

12
00:00:35,966 --> 00:00:37,736 A:middle
We're calling it iCloud Drive.

13
00:00:37,736 --> 00:00:41,026 A:middle
If you're interested
in learning more

14
00:00:41,026 --> 00:00:42,836 A:middle
about CloudKit I encourage you

15
00:00:42,836 --> 00:00:45,496 A:middle
to attend their sessions
and labs.

16
00:00:45,896 --> 00:00:49,606 A:middle
Second, we've added
Windows support to iCloud.

17
00:00:50,176 --> 00:00:53,836 A:middle
Now your users with
Windows devices can access

18
00:00:53,836 --> 00:00:56,916 A:middle
and modify their documents
on their Windows devices.

19
00:00:58,216 --> 00:01:01,796 A:middle
Third, we've added an
iCloud folder into Finder.

20

21
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

22
00:00:58,216 --> 00:01:01,796 A:middle
Third, we've added an
iCloud folder into Finder.

23
00:01:02,706 --> 00:01:05,446 A:middle
Now your users can add
whatever documents they want

24
00:01:05,616 --> 00:01:07,686 A:middle
into their iCloud
folder in Finder

25
00:01:07,916 --> 00:01:10,746 A:middle
and organize them
however they see fit.

26
00:01:11,796 --> 00:01:16,156 A:middle
Fourth, we've added access
to this iCloud folder

27
00:01:16,156 --> 00:01:18,016 A:middle
from within your iOS apps.

28
00:01:18,276 --> 00:01:19,826 A:middle
We'll get into this
a little more later.

29
00:01:19,826 --> 00:01:22,266 A:middle
So what are we going
to cover here today?

30
00:01:22,266 --> 00:01:25,256 A:middle
We're going to start off
by talking about some

31
00:01:25,256 --> 00:01:26,336 A:middle
of the best practices

32
00:01:26,336 --> 00:01:28,366 A:middle
of accessing your
documents in the cloud.

33
00:01:29,666 --> 00:01:32,976 A:middle
Then we're going to move on to
talking about how to discover

34
00:01:32,976 --> 00:01:34,816 A:middle
and list your documents
in the cloud.

35
00:01:35,776 --> 00:01:39,736 A:middle
Next we're going to talk about
displaying thumbnails in your UI

36
00:01:39,736 --> 00:01:41,386 A:middle
when you're listing your
documents in the cloud.

37
00:01:42,316 --> 00:01:46,236 A:middle
Then we're going to talk about
accessing documents from outside

38
00:01:46,236 --> 00:01:49,206 A:middle
of your apps container such
as the shared iCloud folder.

39
00:01:50,506 --> 00:01:53,656 A:middle
And finally we're going to talk
about providing document storage

40
00:01:53,656 --> 00:01:55,956 A:middle
to other applications
from within your app.

41
00:01:56,466 --> 00:01:58,026 A:middle
So what is a document anyways?

42
00:01:59,156 --> 00:02:02,356 A:middle
We're going to define
a document here

43

44
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

45
00:01:59,156 --> 00:02:02,356 A:middle
We're going to define
a document here

46
00:02:02,356 --> 00:02:06,686 A:middle
as a single standalone entity
and it's understood by the user

47
00:02:06,686 --> 00:02:08,205 A:middle
as a single standalone entity.

48
00:02:08,886 --> 00:02:11,396 A:middle
A user might want to modify it

49
00:02:11,886 --> 00:02:13,996 A:middle
or give it a name
that's meaningful to them

50
00:02:14,476 --> 00:02:17,556 A:middle
or send it via email to one of
their friends or colleagues.

51
00:02:18,396 --> 00:02:20,706 A:middle
There are some documents
which we all sort

52
00:02:20,706 --> 00:02:21,976 A:middle
of understand are documents.

53
00:02:22,566 --> 00:02:25,646 A:middle
A keynote document
or a numbers document

54
00:02:25,646 --> 00:02:28,536 A:middle
or a pages document
are clearly documents.

55
00:02:28,986 --> 00:02:32,256 A:middle
But we're also going to consider
something like a chess game

56
00:02:32,256 --> 00:02:34,396 A:middle
to be a document for
this presentation.

57
00:02:35,106 --> 00:02:38,046 A:middle
A user might want to
save the current state

58
00:02:38,046 --> 00:02:41,186 A:middle
of their chess game and email
it to one of their friends

59
00:02:41,186 --> 00:02:42,666 A:middle
so they can pick up
where they left off

60
00:02:42,696 --> 00:02:44,386 A:middle
against some hard AI level.

61
00:02:44,846 --> 00:02:47,366 A:middle
So we're going to consider a
chess game to be a document.

62
00:02:48,126 --> 00:02:50,266 A:middle
Now let's talk about dealing

63
00:02:50,266 --> 00:02:51,536 A:middle
with your documents
in the cloud.

64
00:02:52,306 --> 00:02:55,476 A:middle
So it's important when you're
dealing with your documents

65
00:02:55,476 --> 00:02:58,016 A:middle
in the cloud to use
file coordination.

66
00:02:58,806 --> 00:03:00,366 A:middle
There are several
reasons for this,

67

68
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

69
00:02:58,806 --> 00:03:00,366 A:middle
There are several
reasons for this,

70
00:03:00,366 --> 00:03:02,776 A:middle
but one of the main ones
is to avoid data loss.

71
00:03:03,916 --> 00:03:07,266 A:middle
You may have the simplest
single-threaded application

72
00:03:07,266 --> 00:03:10,556 A:middle
in the world, and you may think
that you're the only one reading

73
00:03:10,626 --> 00:03:12,216 A:middle
from or writing to
your documents,

74
00:03:12,516 --> 00:03:14,016 A:middle
but once you add the iCloud data

75
00:03:14,016 --> 00:03:16,316 A:middle
into the mix that's
no longer the case

76
00:03:16,346 --> 00:03:17,856 A:middle
so use file coordination.

77
00:03:18,636 --> 00:03:21,296 A:middle
Let's take a quick
example of this.

78
00:03:21,646 --> 00:03:24,186 A:middle
Say your app is doing
proper file coordination.

79
00:03:24,856 --> 00:03:26,316 A:middle
You'll write your
changes to disk,

80
00:03:26,896 --> 00:03:29,426 A:middle
the iCloud Drive daemon
will pick up those changes

81
00:03:29,486 --> 00:03:31,426 A:middle
and push them up to
the cloud and down

82
00:03:31,426 --> 00:03:33,066 A:middle
to all the other users' devices.

83
00:03:33,596 --> 00:03:35,056 A:middle
Everything's working
properly here.

84
00:03:35,376 --> 00:03:36,666 A:middle
That's what you want
to have happen.

85
00:03:37,786 --> 00:03:40,356 A:middle
Now let's say you're not using
proper file coordination.

86
00:03:41,966 --> 00:03:44,016 A:middle
You may be writing
your changes to disk,

87
00:03:44,146 --> 00:03:48,016 A:middle
but iCloud Drive may also be
writing changes at the same time

88
00:03:48,166 --> 00:03:49,276 A:middle
for that same document.

89
00:03:49,816 --> 00:03:51,956 A:middle
This could result in
a corrupt document

90
00:03:52,386 --> 00:03:55,946 A:middle
which the iCloud Drive daemon
will again push up to the cloud

91
00:03:55,946 --> 00:03:58,676 A:middle
and down to the other
users' devices which results

92
00:03:58,676 --> 00:04:01,466 A:middle
in data loss everywhere
so use file coordination.

93

94
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

95
00:03:58,676 --> 00:04:01,466 A:middle
in data loss everywhere
so use file coordination.

96
00:04:01,466 --> 00:04:02,216 A:middle
It's very important.

97
00:04:03,466 --> 00:04:04,576 A:middle
There's good news though.

98
00:04:05,276 --> 00:04:07,316 A:middle
UIDocument makes things simple.

99
00:04:08,406 --> 00:04:10,546 A:middle
UIDocument and NSDocument

100
00:04:10,546 --> 00:04:13,196 A:middle
on OS X does all the
heavy lifting for you.

101
00:04:13,626 --> 00:04:15,396 A:middle
It takes care of
file coordination.

102
00:04:15,946 --> 00:04:19,616 A:middle
It also uses background queues
to prevent the file coordination

103
00:04:19,676 --> 00:04:24,526 A:middle
from blocking your apps UI,
and UIDocument provides you

104
00:04:24,526 --> 00:04:26,306 A:middle
with several high-level APIs

105
00:04:26,306 --> 00:04:28,086 A:middle
for whatever use
case you might have.

106
00:04:29,946 --> 00:04:32,836 A:middle
Let's take a quick example
like reading a document

107
00:04:32,836 --> 00:04:37,526 A:middle
from disk with UIDocument.

108
00:04:39,916 --> 00:04:44,856 A:middle
So at the highest level
UIDocument does all

109
00:04:44,856 --> 00:04:46,376 A:middle
of the file coordination for you

110
00:04:46,676 --> 00:04:50,256 A:middle
and in addition reads
your document from disk.

111
00:04:50,256 --> 00:04:53,566 A:middle
If your document is a file
you'll get an NSData object

112
00:04:53,566 --> 00:04:55,526 A:middle
which is the contents
of your file on disk

113
00:04:55,966 --> 00:04:59,246 A:middle
and if the document is a package
you'll get an NSFileWrapper

114
00:04:59,246 --> 00:05:01,496 A:middle
object which represents
your package on disk.

115

116
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

117
00:04:59,246 --> 00:05:01,496 A:middle
object which represents
your package on disk.

118
00:05:01,976 --> 00:05:05,156 A:middle
You just have to override the
LoadFromContentsofType method

119
00:05:05,156 --> 00:05:08,616 A:middle
and then display the contents
of the document to your users.

120
00:05:09,216 --> 00:05:14,236 A:middle
At a slightly lower level
UIDocument still does all

121
00:05:14,236 --> 00:05:15,686 A:middle
of the file coordination
for you,

122
00:05:16,276 --> 00:05:19,376 A:middle
but this time you would an
NSURL back which is the location

123
00:05:19,376 --> 00:05:20,506 A:middle
of your document on disk.

124
00:05:21,216 --> 00:05:23,586 A:middle
You then just have
to read the document

125
00:05:23,586 --> 00:05:25,026 A:middle
and display it to your users.

126
00:05:25,546 --> 00:05:29,276 A:middle
At the lowest level we have an
option that's really provided

127
00:05:29,276 --> 00:05:30,076 A:middle
only for hooking.

128
00:05:31,016 --> 00:05:33,836 A:middle
If you override the
openWithCompletionHandler method

129
00:05:34,106 --> 00:05:36,496 A:middle
you should really invoke
super and implement one

130
00:05:36,496 --> 00:05:37,766 A:middle
of the other two methods.

131
00:05:38,636 --> 00:05:40,346 A:middle
You can override
this method though

132
00:05:40,686 --> 00:05:43,286 A:middle
if you want some custom
application behavior

133
00:05:43,286 --> 00:05:46,016 A:middle
when UIDocument would be
doing the file coordination

134
00:05:46,016 --> 00:05:49,286 A:middle
to read the document from disk.

135
00:05:50,306 --> 00:05:52,876 A:middle
New in IOS 8 we have
some asynchronous file

136
00:05:52,876 --> 00:05:54,256 A:middle
coordination APIs.

137
00:05:55,486 --> 00:05:58,696 A:middle
So the existing file
coordination APIs were

138
00:05:58,696 --> 00:05:59,876 A:middle
completely synchronous.

139

140
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

141
00:06:00,846 --> 00:06:03,616 A:middle
That means you would have to
do your own background queuing

142
00:06:03,656 --> 00:06:07,326 A:middle
to prevent file coordination
from blocking your app.

143
00:06:07,326 --> 00:06:09,756 A:middle
That can be a little
bit tricky to do.

144
00:06:09,906 --> 00:06:12,956 A:middle
So we have some new
file coordinator APIs

145
00:06:12,956 --> 00:06:14,746 A:middle
for asynchronous
file coordination

146
00:06:15,376 --> 00:06:17,916 A:middle
which is the coordinateAccess
WithIntents method.

147
00:06:19,036 --> 00:06:21,216 A:middle
We also have a new
corresponding class

148
00:06:21,636 --> 00:06:26,036 A:middle
which is the NSFileAccessIntent
class

149
00:06:26,576 --> 00:06:29,936 A:middle
which essentially just
contains a URL and some options

150
00:06:29,966 --> 00:06:31,606 A:middle
for your intent of coordination.

151
00:06:32,406 --> 00:06:34,016 A:middle
You pass these in an array

152
00:06:34,066 --> 00:06:35,816 A:middle
to the
coordinateAccessWithIntents

153
00:06:35,816 --> 00:06:39,846 A:middle
method to do your file
coordination operations.

154
00:06:40,406 --> 00:06:42,426 A:middle
Let's take a quick look at
that in some simple code.

155
00:06:44,196 --> 00:06:47,126 A:middle
So this code might be if
I want to copy a document

156
00:06:47,126 --> 00:06:48,516 A:middle
from one location to another.

157
00:06:49,376 --> 00:06:53,006 A:middle
As you can see I
allocate a source intent

158
00:06:53,376 --> 00:06:56,356 A:middle
to read the document where
it currently exists on disk.

159
00:06:57,256 --> 00:07:00,886 A:middle
I then allocate a destination
intent for the location

160

161
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

162
00:06:57,256 --> 00:07:00,886 A:middle
I then allocate a destination
intent for the location

163
00:07:00,886 --> 00:07:02,776 A:middle
that I want to copy
the document to.

164
00:07:03,346 --> 00:07:07,026 A:middle
I pass these to the
file coordinator method

165
00:07:07,026 --> 00:07:11,076 A:middle
of coordinateAccess
WithIntents and at some point

166
00:07:11,076 --> 00:07:13,496 A:middle
in the future my accessor
block will be called

167
00:07:13,496 --> 00:07:14,606 A:middle
on the queue I provide.

168
00:07:15,456 --> 00:07:18,816 A:middle
I then just have to do my
operation in my accessor block.

169
00:07:20,006 --> 00:07:22,876 A:middle
Now it's important when
you do your operation

170
00:07:22,876 --> 00:07:26,456 A:middle
in your accessor block to use
the URLs that are attached

171
00:07:26,736 --> 00:07:28,676 A:middle
to the NSFileAccessIntents

172
00:07:28,976 --> 00:07:31,716 A:middle
because they may have
changed while you were waiting

173
00:07:31,716 --> 00:07:32,626 A:middle
for your coordination.

174
00:07:35,586 --> 00:07:37,406 A:middle
Now let's move on to discovering

175
00:07:37,406 --> 00:07:41,706 A:middle
and listing your
documents in the cloud.

176
00:07:42,546 --> 00:07:46,626 A:middle
So the way to discovery and list
your documents in the cloud is

177
00:07:46,666 --> 00:07:49,706 A:middle
through the existing
NSMetadataQuery APIs.

178
00:07:50,336 --> 00:07:56,956 A:middle
Now in previous versions of iOS
NSMetadataQuery has been slow

179
00:07:56,956 --> 00:07:59,206 A:middle
to pick up your local changes

180
00:07:59,206 --> 00:08:01,606 A:middle
like creates, deletes
and renames.

181

182
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

183
00:07:59,206 --> 00:08:01,606 A:middle
like creates, deletes
and renames.

184
00:08:02,176 --> 00:08:03,456 A:middle
Let's take a quick look at this.

185
00:08:04,286 --> 00:08:07,666 A:middle
So let's say you have your app,
you have a couple of documents

186
00:08:07,666 --> 00:08:10,476 A:middle
in your apps container,
you also have a couple

187
00:08:10,476 --> 00:08:14,486 A:middle
of NSMetadata items from your
NSMetadataQuery which correspond

188
00:08:14,486 --> 00:08:16,786 A:middle
to those documents on disk.

189
00:08:17,206 --> 00:08:19,756 A:middle
Now let's say your app
creates a new document on disk.

190
00:08:20,556 --> 00:08:24,776 A:middle
There might be a long delay
before NSMetadataQuery updates

191
00:08:24,776 --> 00:08:27,946 A:middle
and gives you a new
NSMetadata item corresponding

192
00:08:27,946 --> 00:08:30,026 A:middle
to that newly created
local document.

193
00:08:30,566 --> 00:08:35,686 A:middle
New in iOS 8 NSMetadataQuery
is easier

194
00:08:35,686 --> 00:08:37,416 A:middle
to use directly with stitching.

195
00:08:38,525 --> 00:08:40,466 A:middle
Let's take a look at that.

196
00:08:40,976 --> 00:08:43,885 A:middle
Now let's say your app creates
this new document on disk

197
00:08:43,885 --> 00:08:46,186 A:middle
and is using proper
file coordination.

198
00:08:46,186 --> 00:08:48,876 A:middle
This only works if you create
the document using proper

199
00:08:48,876 --> 00:08:49,776 A:middle
file coordination.

200
00:08:50,506 --> 00:08:54,416 A:middle
We actually have a hook in
your file coordination access

201
00:08:54,856 --> 00:08:58,166 A:middle
which will update the
NSMetadataQuery quickly

202
00:08:58,166 --> 00:09:01,976 A:middle
and automatically to
create a new NSMetadata item

203

204
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

205
00:08:58,166 --> 00:09:01,976 A:middle
and automatically to
create a new NSMetadata item

206
00:09:02,016 --> 00:09:03,546 A:middle
to update your app.

207
00:09:04,036 --> 00:09:06,786 A:middle
That means that you no
longer need two data sources

208
00:09:07,276 --> 00:09:10,676 A:middle
to show your app's UI
one from local changes

209
00:09:10,676 --> 00:09:12,786 A:middle
and one for cloud changes.

210
00:09:13,036 --> 00:09:14,596 A:middle
You just need NSMetadataQuery
[applause].

211
00:09:16,236 --> 00:09:21,216 A:middle
Thank you.

212
00:09:22,676 --> 00:09:26,696 A:middle
Also, NSMetadataQuery can
list non-local documents.

213
00:09:27,496 --> 00:09:30,676 A:middle
You may want to display
some file system attributes

214
00:09:30,676 --> 00:09:34,306 A:middle
about those documents
though to display in your UI

215
00:09:34,306 --> 00:09:35,686 A:middle
when you're listing
your documents.

216
00:09:36,746 --> 00:09:39,546 A:middle
We have a new NSURL API for you

217
00:09:39,986 --> 00:09:42,136 A:middle
which will let you get
file system attributes

218
00:09:42,136 --> 00:09:43,746 A:middle
about those documents which may

219
00:09:43,746 --> 00:09:46,236 A:middle
or may not have their
content available locally.

220
00:09:46,876 --> 00:09:49,276 A:middle
The way to do this is
with the NSURL method,

221
00:09:49,646 --> 00:09:52,126 A:middle
getPromisedItem
ResourceValue:forKey.

222
00:09:53,016 --> 00:09:56,206 A:middle
If you want more than one file
system attribute we also have a

223
00:09:56,206 --> 00:09:58,466 A:middle
bulk method which is
the promisedItemResource

224
00:09:58,466 --> 00:09:59,386 A:middle
ValuesForKeys.

225

226
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

227
00:10:00,146 --> 00:10:05,446 A:middle
You don't need to be
under file coordination

228
00:10:05,596 --> 00:10:08,506 A:middle
when using these methods
for listing your documents.

229
00:10:11,206 --> 00:10:16,046 A:middle
Also, if you are under file
coordination we have some new

230
00:10:16,046 --> 00:10:18,296 A:middle
file coordinator flags
for dealing with metadata.

231
00:10:19,996 --> 00:10:24,376 A:middle
The key difference with these
methods is that the content

232
00:10:24,446 --> 00:10:28,126 A:middle
with these flags that you pass
through your file coordinator is

233
00:10:28,126 --> 00:10:30,366 A:middle
that the content of the
documents does not need

234
00:10:30,366 --> 00:10:34,226 A:middle
to be available locally when
you are doing file coordination

235
00:10:34,226 --> 00:10:35,306 A:middle
using these flags.

236
00:10:36,316 --> 00:10:38,396 A:middle
Now let's move onto
document thumbnails.

237
00:10:39,326 --> 00:10:41,996 A:middle
So we think the best
user experience

238
00:10:42,286 --> 00:10:44,646 A:middle
when you're listing your
documents in your app is

239
00:10:44,646 --> 00:10:46,506 A:middle
to show document previews.

240
00:10:47,086 --> 00:10:49,356 A:middle
This gives your user
more context

241
00:10:50,086 --> 00:10:52,276 A:middle
so that they can
quickly identify

242
00:10:52,276 --> 00:10:55,466 A:middle
which document is meaningful
to them at that point in time.

243
00:10:56,456 --> 00:11:01,036 A:middle
As you can see in this pages
app we have document previews

244

245
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

246
00:10:56,456 --> 00:11:01,036 A:middle
As you can see in this pages
app we have document previews

247
00:11:01,286 --> 00:11:03,866 A:middle
which lets your user
quickly identify

248
00:11:03,866 --> 00:11:05,076 A:middle
which document is which.

249
00:11:05,706 --> 00:11:10,686 A:middle
Now it was possible to show
document previews previously,

250
00:11:10,806 --> 00:11:12,996 A:middle
but it required a
custom implementation.

251
00:11:13,826 --> 00:11:18,506 A:middle
New in iOS 8 we have some new
file system attributes keys

252
00:11:18,506 --> 00:11:21,056 A:middle
for you to display
thumbnails in your app.

253
00:11:21,966 --> 00:11:23,296 A:middle
The main way to do this is

254
00:11:23,296 --> 00:11:25,836 A:middle
with the NSURLThumbnail
DictionaryKey.

255
00:11:26,256 --> 00:11:29,736 A:middle
If you call this on
your document using the

256
00:11:29,736 --> 00:11:32,836 A:middle
getPromisedItem ResourceValue
:forKey method you'll get a

257
00:11:32,836 --> 00:11:35,626 A:middle
dictionary which
contains your thumbnails

258
00:11:35,706 --> 00:11:38,106 A:middle
which you can display
on your UI.

259
00:11:38,526 --> 00:11:41,796 A:middle
The only key in this dictionary
right now is the NSThumbnail

260
00:11:41,796 --> 00:11:47,036 A:middle
2024x1024SizeKey which
corresponds to the UIImage

261
00:11:47,036 --> 00:11:51,066 A:middle
or NSImage which you can
then just display in your UI.

262
00:11:52,176 --> 00:11:54,416 A:middle
Now onto saving document
thumbnails.

263
00:11:55,096 --> 00:11:57,796 A:middle
So the easiest way
to save thumbnails is

264
00:11:57,796 --> 00:11:58,906 A:middle
through UIDocument.

265

266
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

267
00:12:00,046 --> 00:12:03,146 A:middle
If you override the
fileAttributesTo WriteToURL

268
00:12:03,146 --> 00:12:08,196 A:middle
:forSaveOperation method and
have it generate a UIImage

269
00:12:08,546 --> 00:12:09,376 A:middle
which is your thumbnail

270
00:12:09,376 --> 00:12:12,866 A:middle
and return it UIDocument
will automatically write the

271
00:12:12,866 --> 00:12:14,336 A:middle
thumbnail to disk for you

272
00:12:14,706 --> 00:12:17,166 A:middle
and then the iCloud daemon
will go ahead and pick

273
00:12:17,166 --> 00:12:20,096 A:middle
up those changes and push
them up to the cloud.

274
00:12:21,066 --> 00:12:24,036 A:middle
Alternatively, if you're not
using UIDocument you can save

275
00:12:24,036 --> 00:12:28,026 A:middle
your thumbnails manually using
the existing NSURLsetResource

276
00:12:28,026 --> 00:12:30,376 A:middle
Value:forKey method,
but you should really be

277
00:12:30,376 --> 00:12:32,716 A:middle
under file coordination
when you invoke this method.

278
00:12:33,286 --> 00:12:38,326 A:middle
On OS X thumbnails are actually
generated for you automatically.

279
00:12:39,226 --> 00:12:42,686 A:middle
However, if you have a custom
document format you'll need

280
00:12:42,686 --> 00:12:46,226 A:middle
to let Quick Look know
how to display thumbnails

281
00:12:46,226 --> 00:12:48,326 A:middle
for your documents, so you'll
need a Quick Look plug-in

282
00:12:48,546 --> 00:12:49,596 A:middle
to generate your thumbnails.

283
00:12:50,326 --> 00:12:55,256 A:middle
Now let's move onto to
discovery documents outside

284
00:12:55,256 --> 00:12:56,336 A:middle
of your apps container.

285
00:12:56,876 --> 00:13:03,506 A:middle
Now in previous version
of iOS it's been difficult

286

287
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

288
00:12:56,876 --> 00:13:03,506 A:middle
Now in previous version
of iOS it's been difficult

289
00:13:03,506 --> 00:13:06,826 A:middle
for your users to
access documents outside

290
00:13:06,826 --> 00:13:09,076 A:middle
of your apps container
from within your app.

291
00:13:09,326 --> 00:13:11,746 A:middle
Let's take a look at how they
might do this previously.

292
00:13:12,816 --> 00:13:14,216 A:middle
So let's say you have your app.

293
00:13:14,806 --> 00:13:16,876 A:middle
You have direct access
to all the documents

294
00:13:16,876 --> 00:13:18,196 A:middle
in your app's container.

295
00:13:18,566 --> 00:13:19,596 A:middle
There's no problem there.

296
00:13:19,596 --> 00:13:22,136 A:middle
But let's say your user wants

297
00:13:22,136 --> 00:13:26,196 A:middle
to open say document three
from within your app.

298
00:13:26,396 --> 00:13:28,166 A:middle
How might they go
about doing this?

299
00:13:28,776 --> 00:13:31,306 A:middle
Well, one way they might
do this is they would have

300
00:13:31,376 --> 00:13:32,956 A:middle
to launch the other app,

301
00:13:33,426 --> 00:13:36,746 A:middle
then using the UIDocument
interaction controller make a

302
00:13:36,746 --> 00:13:39,266 A:middle
copy of the document from
the other apps container

303
00:13:39,526 --> 00:13:41,066 A:middle
into your app's local container.

304
00:13:41,856 --> 00:13:45,406 A:middle
Only then could they read the
document from within your app.

305
00:13:45,736 --> 00:13:49,466 A:middle
We think a better
user experience is

306
00:13:49,466 --> 00:13:52,116 A:middle
if your app can just
access those documents

307
00:13:52,116 --> 00:13:53,816 A:middle
in the other apps
container directly.

308
00:13:54,426 --> 00:13:56,526 A:middle
So if you have your app again

309
00:13:56,526 --> 00:14:00,406 A:middle
if you can just open those
documents directly the user

310

311
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

312
00:13:56,526 --> 00:14:00,406 A:middle
if you can just open those
documents directly the user

313
00:14:00,406 --> 00:14:00,896 A:middle
is happy.

314
00:14:01,906 --> 00:14:04,096 A:middle
So we think that's a
better user experience.

315
00:14:04,636 --> 00:14:07,646 A:middle
New in iOS 8 there's
a way to do this

316
00:14:07,646 --> 00:14:09,986 A:middle
with a UIDocumentPicker
ViewController.

317
00:14:11,096 --> 00:14:14,376 A:middle
This allows your users to
discover documents outside

318
00:14:14,376 --> 00:14:18,246 A:middle
of your app's sandbox and
lets your users grant your app

319
00:14:18,246 --> 00:14:21,526 A:middle
permission to access
and modify the documents

320
00:14:21,586 --> 00:14:22,476 A:middle
that they have chosen.

321
00:14:23,086 --> 00:14:27,846 A:middle
Now to have your
apps container show

322
00:14:27,846 --> 00:14:30,656 A:middle
up in the document
picker you have to opt-in

323
00:14:31,046 --> 00:14:32,306 A:middle
by marking your container

324
00:14:32,306 --> 00:14:35,856 A:middle
with a NSUbiquitousContainer
IsDocumjentScopePublic

325
00:14:36,946 --> 00:14:39,396 A:middle
to be yes in your info P list.

326
00:14:39,396 --> 00:14:44,566 A:middle
I have a great new UI --
we have a great new UI here

327
00:14:45,196 --> 00:14:47,406 A:middle
which you can display in
your app for your users

328
00:14:47,406 --> 00:14:49,936 A:middle
to choose documents and
I'd like to show you

329
00:14:49,936 --> 00:14:51,376 A:middle
that now with a quick demo.

330
00:14:52,026 --> 00:14:55,106 A:middle
Okay. Let's go ahead
and launch my app.

331
00:14:55,456 --> 00:14:56,286 A:middle
Yeah, the app I've written.

332
00:14:56,286 --> 00:14:58,056 A:middle
It's a simple text editing app.

333
00:14:58,606 --> 00:15:00,856 A:middle
So as you can see, I'm
using NSMetadataQuery

334

335
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

336
00:14:58,606 --> 00:15:00,856 A:middle
So as you can see, I'm
using NSMetadataQuery

337
00:15:00,856 --> 00:15:03,836 A:middle
to list only one document
in my container right now,

338
00:15:04,636 --> 00:15:07,116 A:middle
but I'm using NSMetadataQuery
without file coordination

339
00:15:07,116 --> 00:15:11,026 A:middle
to list my documents and
display a quick simple preview

340
00:15:11,026 --> 00:15:11,676 A:middle
of the documents.

341
00:15:12,306 --> 00:15:14,366 A:middle
Now let's go ahead and launch
up the document picker.

342
00:15:15,256 --> 00:15:17,376 A:middle
So this is our new
document picker UI.

343
00:15:17,376 --> 00:15:21,076 A:middle
As you can see there are
several containers listed here

344
00:15:21,226 --> 00:15:25,746 A:middle
but I also have a document which
lives in the shared icon folder

345
00:15:25,746 --> 00:15:28,036 A:middle
which is listed alongside
my containers.

346
00:15:28,756 --> 00:15:30,746 A:middle
Now I can switch
to list view here.

347
00:15:30,746 --> 00:15:34,396 A:middle
There's a bunch of stuff I can
do, sort by name, tag, state,

348
00:15:34,396 --> 00:15:37,646 A:middle
etc. Now let's go
ahead and like drill

349
00:15:37,646 --> 00:15:42,476 A:middle
down into this text edit
container and select a document

350
00:15:42,476 --> 00:15:44,966 A:middle
from the text edit container.

351
00:15:44,966 --> 00:15:47,996 A:middle
So now I have opened the
document which actually lives

352
00:15:48,056 --> 00:15:49,276 A:middle
in the text edit container.

353
00:15:49,276 --> 00:15:51,436 A:middle
I have not made a
copy of this document.

354
00:15:51,966 --> 00:15:54,896 A:middle
This document still exists in
the text edit container but now

355
00:15:54,896 --> 00:15:59,136 A:middle
that iOS user had granted
my access to it I can edit

356
00:15:59,136 --> 00:16:01,926 A:middle
and access it in the
text edit container.

357

358
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

359
00:15:59,136 --> 00:16:01,926 A:middle
and access it in the
text edit container.

360
00:16:02,976 --> 00:16:05,236 A:middle
Let's go ahead and
x out of this.

361
00:16:05,766 --> 00:16:09,376 A:middle
As you can see, now that
I've granted my app access

362
00:16:09,376 --> 00:16:14,036 A:middle
to this document it has now
updated in the NSMetadataQuery

363
00:16:14,466 --> 00:16:18,296 A:middle
and I can list it alongside
the other documents in my app.

364
00:16:18,836 --> 00:16:21,066 A:middle
I've also annotated
it as you can see

365
00:16:21,066 --> 00:16:24,016 A:middle
with a text edit name just
to tell my user that it lives

366
00:16:24,016 --> 00:16:25,166 A:middle
in the text edit container.

367
00:16:26,026 --> 00:16:33,256 A:middle
Let's take a quick
look at this in code.

368
00:16:33,396 --> 00:16:35,896 A:middle
So this is basically all
the code I had to write

369
00:16:36,386 --> 00:16:38,106 A:middle
to display the document picker.

370
00:16:38,796 --> 00:16:43,566 A:middle
All I have to do is allocate
the document view controller

371
00:16:44,036 --> 00:16:46,566 A:middle
and pass it on array
of the document types

372
00:16:46,566 --> 00:16:47,666 A:middle
that I'm interested in.

373
00:16:48,366 --> 00:16:50,196 A:middle
I have a simple text editing app

374
00:16:50,546 --> 00:16:54,396 A:middle
so I only passed the plain
text UTI as the documents

375
00:16:54,396 --> 00:16:56,086 A:middle
that my app can access.

376
00:16:56,636 --> 00:16:58,356 A:middle
I then just present
the view controller

377
00:16:59,306 --> 00:17:01,866 A:middle
and then implement these
two simple delicate methods

378

379
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

380
00:16:59,306 --> 00:17:01,866 A:middle
and then implement these
two simple delicate methods

381
00:17:02,596 --> 00:17:05,876 A:middle
and finally when the document --
when the user picks a document

382
00:17:05,876 --> 00:17:08,596 A:middle
of a given URL I just load it
and display it to my users.

383
00:17:08,675 --> 00:17:09,496 A:middle
It's super simple.

384
00:17:10,925 --> 00:17:14,866 A:middle
Now if you noticed my
app did not actually show

385
00:17:14,866 --> 00:17:15,896 A:middle
up in the document picker.

386
00:17:16,746 --> 00:17:21,316 A:middle
That's because I
haven't set my container

387
00:17:21,316 --> 00:17:22,945 A:middle
to be a public container yet.

388
00:17:22,945 --> 00:17:25,996 A:middle
Let's take just a quick
look at how to do that.

389
00:17:27,306 --> 00:17:33,836 A:middle
So if I open up my info P list
here, drill down into this.

390
00:17:35,136 --> 00:17:38,816 A:middle
As you can see my document
scope is set to be not public.

391
00:17:39,536 --> 00:17:43,716 A:middle
All I have to do is set this TS

392
00:17:44,356 --> 00:17:47,536 A:middle
and then bump the
bundled version

393
00:17:48,196 --> 00:17:53,206 A:middle
so that the document picker
knows that I have made a change

394
00:17:53,206 --> 00:17:57,286 A:middle
to my info P list and then
my app will be displayed

395
00:17:57,286 --> 00:18:01,356 A:middle
in the document picker so
that other apps can get access

396

397
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

398
00:17:57,286 --> 00:18:01,356 A:middle
in the document picker so
that other apps can get access

399
00:18:01,356 --> 00:18:02,176 A:middle
to my documents.

400
00:18:02,946 --> 00:18:03,296 A:middle
All right.

401
00:18:03,296 --> 00:18:03,966 A:middle
So a quick summary.

402
00:18:04,696 --> 00:18:06,916 A:middle
We've just shown
you how easy it is

403
00:18:06,916 --> 00:18:10,566 A:middle
to display the document
picker inside your app

404
00:18:11,406 --> 00:18:14,946 A:middle
and how easy it is for users
to grant your app access

405
00:18:14,946 --> 00:18:16,986 A:middle
to documents in other
apps' containers

406
00:18:17,076 --> 00:18:18,946 A:middle
such as the shared icon folder.

407
00:18:20,236 --> 00:18:23,126 A:middle
We've also shown you how easy it
is to make your containers show

408
00:18:23,126 --> 00:18:27,126 A:middle
up in the UIDocumentPicker just
by setting a flag to be yes

409
00:18:27,576 --> 00:18:29,086 A:middle
and then bumping
your bundled version.

410
00:18:29,646 --> 00:18:34,986 A:middle
With that I would like to
Johannes Fortmann to the stage

411
00:18:35,186 --> 00:18:37,086 A:middle
who is going to talk
to you about some

412
00:18:37,086 --> 00:18:39,656 A:middle
of the key principals
behind the document picker.

413
00:18:40,046 --> 00:18:41,666 A:middle
Please welcome Johannes
to the stage [applause].

414
00:18:47,066 --> 00:18:47,646 A:middle
>> Thank you Mike.

415
00:18:48,116 --> 00:18:51,806 A:middle
Hi, I'm Johannes from the UIKit
team and I would like to talk

416
00:18:51,806 --> 00:18:56,176 A:middle
to you about some of
the main differences

417
00:18:56,546 --> 00:18:59,226 A:middle
between external
documents and documents

418
00:18:59,256 --> 00:19:00,516 A:middle
that may live in your container.

419

420
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

421
00:18:59,256 --> 00:19:00,516 A:middle
that may live in your container.

422
00:19:01,336 --> 00:19:07,346 A:middle
As you know, your application
right now has access

423
00:19:07,476 --> 00:19:09,106 A:middle
to its own container only.

424
00:19:10,396 --> 00:19:15,326 A:middle
So you're able to read and
write the documents inside your

425
00:19:15,326 --> 00:19:15,956 A:middle
own container.

426
00:19:16,606 --> 00:19:19,696 A:middle
And as you have seen
in Mike's demonstration

427
00:19:19,746 --> 00:19:25,406 A:middle
for other documents what we do
is once the user has chosen this

428
00:19:25,916 --> 00:19:29,526 A:middle
document we save a
so-called document reference

429
00:19:29,976 --> 00:19:30,956 A:middle
into your container.

430
00:19:32,276 --> 00:19:35,266 A:middle
This document reference
will then go and point

431
00:19:35,336 --> 00:19:38,126 A:middle
to your external document.

432
00:19:39,426 --> 00:19:42,326 A:middle
To ease this new concept

433
00:19:42,326 --> 00:19:46,216 A:middle
into your application we
provide a few new features

434
00:19:46,216 --> 00:19:48,566 A:middle
and attributes on
the NSMetadataQuery.

435
00:19:50,556 --> 00:19:53,366 A:middle
You are probably using
the NSMetaDataQuery

436
00:19:53,366 --> 00:19:55,706 A:middle
with the UbiquitousDocuments
Scope right now

437
00:19:56,006 --> 00:19:58,976 A:middle
to list the documents that are
inside your container locally.

438
00:19:59,046 --> 00:20:03,936 A:middle
And even if the user has
granted your application access

439

440
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

441
00:19:59,046 --> 00:20:03,936 A:middle
And even if the user has
granted your application access

442
00:20:03,996 --> 00:20:07,296 A:middle
to a document outside
of your container,

443
00:20:07,736 --> 00:20:10,906 A:middle
even if the user has gotten
your application access

444
00:20:10,976 --> 00:20:14,936 A:middle
to document outside of your
container we will still continue

445
00:20:14,936 --> 00:20:19,006 A:middle
to merely list the documents
that are local to your container

446
00:20:19,006 --> 00:20:21,186 A:middle
as long as you don't
pass a new scope

447
00:20:21,626 --> 00:20:24,276 A:middle
which is the UbiquitousExternal
DocumentScope.

448
00:20:25,096 --> 00:20:27,916 A:middle
The UbiquitousExternal
DocumentScope ensures

449
00:20:27,916 --> 00:20:30,706 A:middle
that you've got an NSMetadata
item that corresponds

450
00:20:30,736 --> 00:20:34,666 A:middle
to the file references
that the user has extended

451
00:20:34,936 --> 00:20:37,446 A:middle
to your application container.

452
00:20:38,646 --> 00:20:43,116 A:middle
Now, these new NSMetadata
items are effectively just

453
00:20:43,116 --> 00:20:44,016 A:middle
like the old ones.

454
00:20:44,446 --> 00:20:47,236 A:middle
They also have an
NSMetadata item URL key

455
00:20:47,566 --> 00:20:51,576 A:middle
and this NSMetadata
item URL key will point

456
00:20:51,806 --> 00:20:57,476 A:middle
to this NSMetadata item URL
key will point to the URL

457
00:20:57,476 --> 00:21:01,126 A:middle
that your document is
actually located at.

458

459
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

460
00:20:57,476 --> 00:21:01,126 A:middle
that your document is
actually located at.

461
00:21:01,466 --> 00:21:04,276 A:middle
That means that if your app is
using the NSMetadata item URL

462
00:21:04,276 --> 00:21:07,256 A:middle
key right now to
access the rile directly

463
00:21:07,256 --> 00:21:09,766 A:middle
that will still work even
with the document reference.

464
00:21:10,316 --> 00:21:14,976 A:middle
You can pass the return value
of getting this key directly

465
00:21:14,976 --> 00:21:19,706 A:middle
to for example a
UIDocument and use that URL

466
00:21:19,876 --> 00:21:23,136 A:middle
to directly access
the external document.

467
00:21:23,796 --> 00:21:26,536 A:middle
Now of course sometimes that
is not actually what you want

468
00:21:26,536 --> 00:21:26,886 A:middle
to do.

469
00:21:27,306 --> 00:21:28,406 A:middle
Sometimes what you're interested

470
00:21:28,406 --> 00:21:32,426 A:middle
in is not the actual document
backing this reference,

471
00:21:32,516 --> 00:21:34,896 A:middle
but rather the reference itself.

472
00:21:35,396 --> 00:21:36,416 A:middle
For example, you may want

473
00:21:36,416 --> 00:21:38,876 A:middle
to display the reference
inside a folder

474
00:21:38,876 --> 00:21:41,546 A:middle
in your application's
container in your UI,

475
00:21:42,086 --> 00:21:44,256 A:middle
or you might even
want to allow the user

476
00:21:44,256 --> 00:21:46,886 A:middle
to move these references
around inside their folder.

477
00:21:48,236 --> 00:21:52,406 A:middle
For that we provide a new key,
and this one is actually new

478
00:21:52,406 --> 00:21:56,896 A:middle
on iOS 8, the UbiquitousItemURL
InLocalContainerKey.

479
00:21:58,186 --> 00:22:01,276 A:middle
This key points to the
actual reference inside your

480

481
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

482
00:21:58,186 --> 00:22:01,276 A:middle
This key points to the
actual reference inside your

483
00:22:01,276 --> 00:22:05,256 A:middle
applicant's container, so the
user can use the file that is

484
00:22:05,256 --> 00:22:07,506 A:middle
at this location
to move it around.

485
00:22:08,976 --> 00:22:10,836 A:middle
Now, there are a few other keys.

486
00:22:11,276 --> 00:22:13,886 A:middle
It may be useful for you
to know whether a file

487
00:22:13,886 --> 00:22:14,936 A:middle
that has been returned

488
00:22:14,936 --> 00:22:17,666 A:middle
by the NSMetadataQuery
is actually external

489
00:22:17,666 --> 00:22:19,916 A:middle
to your application or not --

490
00:22:19,916 --> 00:22:21,336 A:middle
sorry, to your application's
container.

491
00:22:21,996 --> 00:22:25,146 A:middle
And for that we provide the
[inaudible] document key

492
00:22:25,796 --> 00:22:28,736 A:middle
which will return no for
local documents and yes

493
00:22:28,736 --> 00:22:29,926 A:middle
for external documents.

494
00:22:30,416 --> 00:22:34,416 A:middle
And as you've seen in Mike's
demo he showed a little badge

495
00:22:34,416 --> 00:22:39,606 A:middle
or text a label to inform
the user that the document

496
00:22:39,606 --> 00:22:43,196 A:middle
that he's shown that popped
in there was actually not

497
00:22:43,196 --> 00:22:45,336 A:middle
from the local container
but rather from text edit,

498
00:22:46,066 --> 00:22:49,746 A:middle
and to enable you to do that we
have the container display name

499
00:22:49,746 --> 00:22:52,876 A:middle
key, the container display
name key is a localized key

500
00:22:53,286 --> 00:22:59,086 A:middle
that is fit for display
DOS and for example would

501
00:22:59,086 --> 00:23:01,826 A:middle
if you extended a document

502

503
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

504
00:22:59,086 --> 00:23:01,826 A:middle
if you extended a document

505
00:23:01,826 --> 00:23:06,256 A:middle
from text edit would
show text edit's name.

506
00:23:06,586 --> 00:23:06,966 A:middle
All right.

507
00:23:07,526 --> 00:23:09,346 A:middle
So we've got these
document references,

508
00:23:09,346 --> 00:23:10,966 A:middle
but why do you even need these?

509
00:23:12,186 --> 00:23:14,816 A:middle
So the main reason
is for security.

510
00:23:15,806 --> 00:23:19,456 A:middle
We do not generally
allow any app

511
00:23:19,626 --> 00:23:22,396 A:middle
to access any other
app's container.

512
00:23:22,896 --> 00:23:24,756 A:middle
Only the document
picker can do that.

513
00:23:26,026 --> 00:23:30,626 A:middle
The document picker is running
out-of-process, so it's not --

514
00:23:31,606 --> 00:23:35,296 A:middle
it is able and has the
sufficient entitlements

515
00:23:35,326 --> 00:23:38,616 A:middle
to be able to list all of
the document containers.

516
00:23:38,996 --> 00:23:42,466 A:middle
And the only way to
get a document inside

517
00:23:42,466 --> 00:23:45,686 A:middle
of your application is to
use the document picker.

518
00:23:46,946 --> 00:23:50,646 A:middle
To that -- for that purpose we
determine a so-called security

519
00:23:50,646 --> 00:23:54,266 A:middle
scope URL and if you've used
the sandboxing mechanism

520
00:23:54,266 --> 00:23:57,346 A:middle
on OS X you may already
know this concept

521
00:23:57,346 --> 00:23:59,726 A:middle
of a security scope URL.

522
00:23:59,756 --> 00:24:03,336 A:middle
You get a NSURL which has a
tiny bit of information attached

523

524
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

525
00:23:59,756 --> 00:24:03,336 A:middle
You get a NSURL which has a
tiny bit of information attached

526
00:24:03,336 --> 00:24:05,736 A:middle
to it that informs the
kernel [assumed spelling]

527
00:24:06,126 --> 00:24:07,886 A:middle
and of course the owning app

528
00:24:08,626 --> 00:24:13,386 A:middle
that in fact the owning app is
allowed to access this document

529
00:24:13,676 --> 00:24:16,236 A:middle
and is allowed to for
example modify it as well.

530
00:24:17,136 --> 00:24:23,596 A:middle
Now importantly if you
naively were to save this URL

531
00:24:23,596 --> 00:24:26,546 A:middle
for example you would
serialize it into a strain

532
00:24:26,676 --> 00:24:29,626 A:middle
and then de-serialize
it out of the strain.

533
00:24:30,386 --> 00:24:32,446 A:middle
You would lose this
security scope

534
00:24:32,666 --> 00:24:34,846 A:middle
and that is not something
you want to happen

535
00:24:35,396 --> 00:24:38,026 A:middle
because of course the
security scope is what you use

536
00:24:38,026 --> 00:24:39,126 A:middle
to access this URL.

537
00:24:40,006 --> 00:24:42,726 A:middle
Of course you need a way to
get back to the scope URL

538
00:24:43,406 --> 00:24:47,936 A:middle
and the document references
feature is providing one

539
00:24:47,936 --> 00:24:50,256 A:middle
of the ways to get
back to these URLs.

540
00:24:50,746 --> 00:24:55,996 A:middle
If you get a NSURL from the
document reference this NSURL

541
00:24:55,996 --> 00:24:58,776 A:middle
already has the security scope
attached so you can use it

542
00:24:58,896 --> 00:25:02,186 A:middle
with your document or
with the start accessing

543

544
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

545
00:24:58,896 --> 00:25:02,186 A:middle
with your document or
with the start accessing

546
00:25:02,186 --> 00:25:06,446 A:middle
and stop accessing security
scope resource methods on NSURL,

547
00:25:06,446 --> 00:25:08,886 A:middle
but I strongly suggest
that you use UIDocument

548
00:25:08,886 --> 00:25:11,476 A:middle
because that does
all of this for you,

549
00:25:12,246 --> 00:25:15,806 A:middle
for example load
the contents off

550
00:25:16,356 --> 00:25:19,306 A:middle
of the file backed by this URL.

551
00:25:20,416 --> 00:25:23,926 A:middle
Now sometimes enumerating your
documents is not actually what

552
00:25:23,926 --> 00:25:25,556 A:middle
you want to get back
to the document.

553
00:25:26,146 --> 00:25:30,216 A:middle
For example, one thing you might
be using is state restoration

554
00:25:30,726 --> 00:25:32,546 A:middle
and in state restoration
of course what you want

555
00:25:32,546 --> 00:25:37,016 A:middle
to do is pop the user back into
the UI that they saw before.

556
00:25:37,416 --> 00:25:39,866 A:middle
So you instead of
enumerating files

557
00:25:39,916 --> 00:25:42,836 A:middle
that the user had access
previously what you want

558
00:25:42,836 --> 00:25:47,016 A:middle
to do is access a
very specific file.

559
00:25:47,406 --> 00:25:51,636 A:middle
We offer a mechanism to do that
for you, which is a bookmark.

560
00:25:52,356 --> 00:25:55,326 A:middle
The bookmark is also possibly
known to you if you've used it

561
00:25:55,326 --> 00:26:00,036 A:middle
with the sandbox on
OS X, and the bookmark

562

563
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

564
00:25:55,326 --> 00:26:00,036 A:middle
with the sandbox on
OS X, and the bookmark

565
00:26:00,036 --> 00:26:02,886 A:middle
and codes the security
scope alongside the URL

566
00:26:03,576 --> 00:26:05,306 A:middle
so you can use the
bookmark to get back

567
00:26:05,606 --> 00:26:08,586 A:middle
to the security scope URL.

568
00:26:09,856 --> 00:26:14,486 A:middle
We offer API which
already exists.

569
00:26:15,036 --> 00:26:19,756 A:middle
The bookmarkDataWithOptions
API is used for by you

570
00:26:19,756 --> 00:26:25,146 A:middle
on a NSURL instance to create a
bookmark that you can then save.

571
00:26:25,146 --> 00:26:28,466 A:middle
It's basically [inaudible]
that you can then save

572
00:26:28,466 --> 00:26:30,696 A:middle
into a state restoration
archive for example.

573
00:26:31,536 --> 00:26:35,966 A:middle
And of course its counter-part
is a class method on NSURL.

574
00:26:36,246 --> 00:26:39,816 A:middle
The URL bears only bookmark
data which we can then use

575
00:26:40,146 --> 00:26:42,706 A:middle
to resolve this bookmark
into a NSURL

576
00:26:42,706 --> 00:26:46,456 A:middle
that has the scope attached.

577
00:26:47,526 --> 00:26:48,686 A:middle
All right.

578
00:26:48,956 --> 00:26:52,246 A:middle
Now, Mike showed you the
UIDocument picker view

579
00:26:52,246 --> 00:26:56,296 A:middle
controller in the
so-called open mode.

580
00:26:56,946 --> 00:27:00,846 A:middle
In open mode what we will do
is indeed create a bookmark

581

582
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

583
00:26:56,946 --> 00:27:00,846 A:middle
In open mode what we will do
is indeed create a bookmark

584
00:27:01,796 --> 00:27:04,266 A:middle
and a corresponding
security scope URL,

585
00:27:04,836 --> 00:27:07,366 A:middle
hand you back the
security scope URL

586
00:27:07,726 --> 00:27:10,176 A:middle
and of course place
the bookmark,

587
00:27:10,256 --> 00:27:13,306 A:middle
the reference document
inside your app's container.

588
00:27:15,046 --> 00:27:17,516 A:middle
Now sometimes that is not
what you want to do actually.

589
00:27:18,006 --> 00:27:20,236 A:middle
For example, you may
have an application

590
00:27:20,236 --> 00:27:24,216 A:middle
that does not instead of opening
specific documents may also

591
00:27:24,216 --> 00:27:27,696 A:middle
aggregate documents, keynote
for example would be one

592
00:27:27,696 --> 00:27:32,356 A:middle
of these applications in which
you for example might want

593
00:27:32,356 --> 00:27:35,236 A:middle
to open an image from an
application to insert it

594
00:27:35,236 --> 00:27:36,186 A:middle
into your presentation.

595
00:27:36,826 --> 00:27:38,606 A:middle
You'll want to maintain
a persistent reference

596
00:27:38,606 --> 00:27:41,046 A:middle
to that image, but instead
want to copy this image

597
00:27:41,086 --> 00:27:44,596 A:middle
into your presentation
as one piece.

598
00:27:45,266 --> 00:27:47,216 A:middle
And we also support
a mode for that.

599
00:27:47,216 --> 00:27:48,786 A:middle
It's the so-called import mode.

600
00:27:49,386 --> 00:27:51,176 A:middle
Import mode will not
create a bookmark,

601
00:27:51,506 --> 00:27:55,776 A:middle
but instead we'll copy the
file to a temporary location.

602
00:27:56,476 --> 00:27:58,496 A:middle
You will of course
still be granted access

603
00:27:58,496 --> 00:27:59,706 A:middle
to this temporary location,

604

605
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

606
00:28:00,306 --> 00:28:04,336 A:middle
but the file is not persistently
referenced by your application.

607
00:28:04,806 --> 00:28:06,786 A:middle
After your application
terminates

608
00:28:06,786 --> 00:28:11,226 A:middle
for any reason we will clean
out the temporary location

609
00:28:11,476 --> 00:28:13,546 A:middle
and you will no longer
have access so you have

610
00:28:13,546 --> 00:28:16,086 A:middle
to make a copy soon after you
get your delegate call back

611
00:28:16,136 --> 00:28:19,756 A:middle
to actually hang
onto the document.

612
00:28:19,966 --> 00:28:20,336 A:middle
All right.

613
00:28:21,046 --> 00:28:23,076 A:middle
This is reading document
and it is

614
00:28:23,076 --> 00:28:27,326 A:middle
of course a very important part,
but equally as important is

615
00:28:27,326 --> 00:28:29,866 A:middle
of course writing document
and creating new documents.

616
00:28:30,896 --> 00:28:34,666 A:middle
Now as I've mentioned you
will not have general access

617
00:28:34,666 --> 00:28:38,916 A:middle
to containers outside of
your app's own container.

618
00:28:40,196 --> 00:28:43,186 A:middle
But of course you can write
into that container, so,

619
00:28:43,186 --> 00:28:45,606 A:middle
or possibly into a
temporary location.

620
00:28:46,036 --> 00:28:49,286 A:middle
So to create a new
UIDocument that is --

621
00:28:49,286 --> 00:28:52,436 A:middle
sorry, a new document on disk

622
00:28:52,936 --> 00:28:56,346 A:middle
that is exactly what
you want to do.

623
00:28:56,706 --> 00:29:00,266 A:middle
You can then use a special
document picker mode to move

624

625
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

626
00:28:56,706 --> 00:29:00,266 A:middle
You can then use a special
document picker mode to move

627
00:29:00,266 --> 00:29:02,326 A:middle
that document outside
of your app's container

628
00:29:02,686 --> 00:29:05,336 A:middle
but again the user chooses
where to move the document.

629
00:29:06,976 --> 00:29:08,876 A:middle
Let's have a quick
look at how that works.

630
00:29:09,696 --> 00:29:12,776 A:middle
You would of course you
already have a document,

631
00:29:12,776 --> 00:29:16,706 A:middle
Doc 3 in this case, and you
use the initWithURL method

632
00:29:16,706 --> 00:29:21,976 A:middle
on your document picker with the
URL of your existing document

633
00:29:22,606 --> 00:29:25,876 A:middle
to allow the user to
choose a new location.

634
00:29:26,766 --> 00:29:30,726 A:middle
The user now chooses a new
location and we move the file

635
00:29:30,726 --> 00:29:31,996 A:middle
into the new location.

636
00:29:33,206 --> 00:29:36,556 A:middle
We will return a
document reference to you,

637
00:29:37,216 --> 00:29:40,206 A:middle
so you still maintain
access to the document.

638
00:29:40,866 --> 00:29:44,016 A:middle
And this URL is effectively
exactly like one

639
00:29:44,016 --> 00:29:47,066 A:middle
that has been returned to
you by the open mechanism,

640
00:29:47,646 --> 00:29:51,756 A:middle
so you can enumerate this
new document preference

641
00:29:51,806 --> 00:29:53,286 A:middle
in your NSMetadataQuery.

642
00:29:54,426 --> 00:29:57,496 A:middle
Now of course sometimes that
is exactly not what you want.

643
00:29:57,496 --> 00:29:58,636 A:middle
You don't want the reference.

644
00:29:59,266 --> 00:30:03,146 A:middle
So we also have an expert
mode which allows you

645

646
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

647
00:29:59,266 --> 00:30:03,146 A:middle
So we also have an expert
mode which allows you

648
00:30:03,146 --> 00:30:05,236 A:middle
to forego the entire
reference thing.

649
00:30:05,236 --> 00:30:09,366 A:middle
In that case we will make
a copy of your document

650
00:30:09,706 --> 00:30:14,486 A:middle
into another app's container
and that is basically it.

651
00:30:15,226 --> 00:30:18,086 A:middle
Okay. Let me give a
quick summary of how

652
00:30:18,086 --> 00:30:20,916 A:middle
to use document management here.

653
00:30:21,256 --> 00:30:24,826 A:middle
We've seen that you can use the
document reference mechanism

654
00:30:24,826 --> 00:30:30,236 A:middle
to enumerate documents that
have been previously used by,

655
00:30:30,346 --> 00:30:32,066 A:middle
or granted access by the user.

656
00:30:32,906 --> 00:30:35,736 A:middle
We've also seen that you can use
bookmarks for state restoration

657
00:30:36,506 --> 00:30:42,356 A:middle
and we've also shown you quickly
how to use the import open

658
00:30:42,356 --> 00:30:43,686 A:middle
and export and move modes.

659
00:30:45,316 --> 00:30:50,276 A:middle
And all of these of course play
together to enable your user

660
00:30:50,276 --> 00:30:53,366 A:middle
to access all of their iCloud
documents, not merely those

661
00:30:53,406 --> 00:30:54,576 A:middle
that are inside your folder.

662
00:30:56,166 --> 00:30:59,226 A:middle
But you noticed I said all of
your iCloud documents here,

663
00:30:59,996 --> 00:31:05,816 A:middle
and of course your users
may have different locations

664

665
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

666
00:30:59,996 --> 00:31:05,816 A:middle
and of course your users
may have different locations

667
00:31:05,816 --> 00:31:07,276 A:middle
for storing their documents.

668
00:31:07,666 --> 00:31:10,636 A:middle
For example, you may be
part of an enterprise

669
00:31:10,636 --> 00:31:12,696 A:middle
that has their own
storage management system,

670
00:31:13,576 --> 00:31:16,166 A:middle
and of course it would be grand

671
00:31:16,166 --> 00:31:19,436 A:middle
if you could grant
your users access

672
00:31:19,436 --> 00:31:21,256 A:middle
to those documents as well.

673
00:31:21,816 --> 00:31:23,616 A:middle
And for that we are
introducing a new feature,

674
00:31:23,666 --> 00:31:25,796 A:middle
the so-called document
provider extensions.

675
00:31:27,486 --> 00:31:29,996 A:middle
Now, what is a document
provider extension?

676
00:31:30,846 --> 00:31:34,226 A:middle
A document provider extension
is an alternate way for you

677
00:31:34,226 --> 00:31:37,696 A:middle
or a third party to
provide document storage.

678
00:31:38,536 --> 00:31:42,706 A:middle
From the host application's
perspective this works exactly

679
00:31:42,706 --> 00:31:46,056 A:middle
the same way as the pre-existing
iCloud storage location.

680
00:31:47,206 --> 00:31:51,616 A:middle
The user is able to select
one of these storage locations

681
00:31:51,616 --> 00:31:53,476 A:middle
from the document picker

682
00:31:53,476 --> 00:31:57,996 A:middle
and they can use these storage
locations in the exact same mode

683
00:31:57,996 --> 00:32:02,376 A:middle
so they can open documents
and move out documents

684

685
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

686
00:31:57,996 --> 00:32:02,376 A:middle
so they can open documents
and move out documents

687
00:32:02,376 --> 00:32:03,676 A:middle
to the storage locations.

688
00:32:05,036 --> 00:32:10,826 A:middle
We implement these using two
different separate extensions,

689
00:32:11,396 --> 00:32:15,586 A:middle
the first of which is the
so-called document picker

690
00:32:15,716 --> 00:32:19,536 A:middle
extension which provides
a UI view control subclass

691
00:32:20,076 --> 00:32:24,646 A:middle
that is effectively free
form that the user can use

692
00:32:24,646 --> 00:32:28,676 A:middle
to choose a document from
your storage location or from

693
00:32:28,676 --> 00:32:30,416 A:middle
of course from someone
at the storage locations.

694
00:32:31,076 --> 00:32:34,366 A:middle
This UR document picker
subclass is displayed as part

695
00:32:34,366 --> 00:32:36,186 A:middle
of the document picker
view controller

696
00:32:36,336 --> 00:32:38,736 A:middle
so it's effectively
contained inside one

697
00:32:38,736 --> 00:32:42,306 A:middle
of these view controllers just
like the iCloud picker is.

698
00:32:42,766 --> 00:32:45,166 A:middle
There is also a separate
second extension

699
00:32:45,416 --> 00:32:47,446 A:middle
which is the so-called
file provider extension.

700
00:32:48,146 --> 00:32:52,156 A:middle
The file provider extension is
a non-UI extension which deals

701
00:32:52,206 --> 00:32:55,576 A:middle
with actually providing the
files, the [inaudible] cases

702
00:32:55,576 --> 00:33:03,366 A:middle
where you want to provide files
would be for example ensuring

703

704
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

705
00:32:55,576 --> 00:33:03,366 A:middle
where you want to provide files
would be for example ensuring

706
00:33:03,366 --> 00:33:08,606 A:middle
that a file on disk is
current, uploading a file

707
00:33:08,606 --> 00:33:13,856 A:middle
that has been changed by
the user, or enabling us

708
00:33:13,896 --> 00:33:17,076 A:middle
to identify a file,
so the user can save,

709
00:33:17,346 --> 00:33:20,256 A:middle
or the user's app can save a
bookmark for state restoration.

710
00:33:20,856 --> 00:33:24,766 A:middle
The file provider extension --

711
00:33:24,766 --> 00:33:27,256 A:middle
access to the file provider
extension is modulated

712
00:33:27,256 --> 00:33:30,786 A:middle
through file coordination which
means that all accesses that go

713
00:33:30,786 --> 00:33:33,266 A:middle
through file coordination will
automatically do the right thing

714
00:33:33,656 --> 00:33:35,736 A:middle
with regards to providing
access to the file.

715
00:33:35,896 --> 00:33:38,376 A:middle
This is another important case

716
00:33:38,376 --> 00:33:40,726 A:middle
where you absolutely must
use file coordination

717
00:33:40,726 --> 00:33:43,666 A:middle
or everything else --
everything will just not work.

718
00:33:44,976 --> 00:33:45,856 A:middle
All right.

719
00:33:46,056 --> 00:33:50,016 A:middle
Let's have a quick look
at how the data flow works

720
00:33:50,016 --> 00:33:53,616 A:middle
with a file provider
extension specifically

721
00:33:53,616 --> 00:33:55,146 A:middle
when reading a file from disk.

722
00:33:56,306 --> 00:33:59,146 A:middle
Let's say you have a host
app and this host app is used

723
00:33:59,146 --> 00:34:00,876 A:middle
by the user who is trying

724

725
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

726
00:33:59,146 --> 00:34:00,876 A:middle
by the user who is trying

727
00:34:00,876 --> 00:34:03,556 A:middle
to actually open a
document in this case.

728
00:34:04,286 --> 00:34:08,806 A:middle
So the host app through some UI
action is calling the ubiquitous

729
00:34:08,806 --> 00:34:10,306 A:middle
document types in mode method

730
00:34:10,936 --> 00:34:13,186 A:middle
on the UI document
picker view controller,

731
00:34:14,396 --> 00:34:16,025 A:middle
and now the document picker --

732
00:34:16,025 --> 00:34:20,106 A:middle
well, the user inside the
document picker selects a

733
00:34:20,106 --> 00:34:24,996 A:middle
third-party document
picker extension, yours.

734
00:34:26,536 --> 00:34:30,156 A:middle
We instantiate your
UIDocument picker extension

735
00:34:30,606 --> 00:34:33,485 A:middle
and send it prepare for
presentation in mode call.

736
00:34:34,286 --> 00:34:36,775 A:middle
Now this method is
called with the mode

737
00:34:36,775 --> 00:34:38,076 A:middle
that the user has
actually selected

738
00:34:38,076 --> 00:34:40,636 A:middle
and at this point you want

739
00:34:40,636 --> 00:34:43,585 A:middle
to probably display a view
controller that corresponds

740
00:34:43,585 --> 00:34:46,206 A:middle
to the mode that
the user has chosen.

741
00:34:46,206 --> 00:34:48,556 A:middle
For example, for the
open mode you would want

742
00:34:48,556 --> 00:34:51,456 A:middle
to display a view controller
that allows the user

743
00:34:51,456 --> 00:34:56,255 A:middle
to pick a specific document
and of course for the move

744
00:34:56,255 --> 00:34:58,816 A:middle
out mode you will want to
display a view controller

745
00:34:58,816 --> 00:35:03,246 A:middle
that allows them to select a
location instead of a document.

746

747
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

748
00:34:58,816 --> 00:35:03,246 A:middle
that allows them to select a
location instead of a document.

749
00:35:03,436 --> 00:35:03,776 A:middle
All right.

750
00:35:04,686 --> 00:35:10,006 A:middle
The user now goes ahead and uses
your UI to select a document

751
00:35:10,686 --> 00:35:13,716 A:middle
at which point after the user
has confirmed their intentions

752
00:35:14,456 --> 00:35:17,676 A:middle
you have to determine
which location

753
00:35:17,716 --> 00:35:21,056 A:middle
in the file system you want
to store this document in.

754
00:35:21,056 --> 00:35:26,086 A:middle
You can then call the
dismiss grant access --

755
00:35:26,086 --> 00:35:30,106 A:middle
the granting access to
URL method on self, well,

756
00:35:30,106 --> 00:35:35,976 A:middle
that is your document picker
view controller subclass,

757
00:35:36,846 --> 00:35:42,046 A:middle
and thereby inform us
about your intention

758
00:35:42,046 --> 00:35:44,146 A:middle
to actually the user
to access this URL.

759
00:35:45,346 --> 00:35:48,496 A:middle
The document picker will
then call the document picker

760
00:35:48,496 --> 00:35:51,636 A:middle
didPickDocument AtURL
method on its delegate

761
00:35:52,466 --> 00:35:55,576 A:middle
to inform the user app that
the user has just picked

762
00:35:55,576 --> 00:35:56,286 A:middle
this document.

763
00:35:57,646 --> 00:35:59,756 A:middle
Now what the user is
probably wanting to do is

764
00:35:59,906 --> 00:36:01,776 A:middle
to read the document
at this location.

765

766
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

767
00:35:59,906 --> 00:36:01,776 A:middle
to read the document
at this location.

768
00:36:01,776 --> 00:36:04,846 A:middle
It will use the
NSFileCoordinator methods,

769
00:36:05,236 --> 00:36:07,856 A:middle
for example, coordinateReading
ItemAtURL

770
00:36:08,616 --> 00:36:11,696 A:middle
and its file coordinator
that it should ensure

771
00:36:11,696 --> 00:36:13,166 A:middle
that the document
is actually present.

772
00:36:13,986 --> 00:36:17,336 A:middle
NSFileCoordinator will call out
to your file provider extension,

773
00:36:17,336 --> 00:36:19,046 A:middle
that's your tiny
non-UI extension,

774
00:36:19,166 --> 00:36:22,196 A:middle
with the startProvidingItemAtURL
method.

775
00:36:22,996 --> 00:36:25,126 A:middle
This method take a
completion call back

776
00:36:25,126 --> 00:36:29,906 A:middle
which you can call once
you're sure that the item

777
00:36:30,136 --> 00:36:33,106 A:middle
at this specific location
is actually current.

778
00:36:33,806 --> 00:36:39,596 A:middle
So once you call that completion
call back on -- sorry.

779
00:36:40,036 --> 00:36:43,256 A:middle
Once you call that completion
call back the file coordinator

780
00:36:43,256 --> 00:36:45,956 A:middle
will know that it is now
able to unlock the file

781
00:36:46,716 --> 00:36:49,006 A:middle
and it itself can call
its accessorBlock.

782
00:36:50,166 --> 00:36:52,396 A:middle
And now inside your
accessorBlock the user

783
00:36:52,396 --> 00:36:54,936 A:middle
application can use this UR
document like it sees fit,

784
00:36:55,326 --> 00:36:57,686 A:middle
for example using data
with contents of URL

785
00:36:58,076 --> 00:37:00,966 A:middle
to be able to read the file.

786

787
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

788
00:36:58,076 --> 00:37:00,966 A:middle
to be able to read the file.

789
00:37:02,506 --> 00:37:06,236 A:middle
Let's take a quick
look at how security

790
00:37:06,276 --> 00:37:12,256 A:middle
and persistent file access
works for document providers.

791
00:37:12,736 --> 00:37:14,666 A:middle
Unlike the iCloud
document provider,

792
00:37:14,666 --> 00:37:18,546 A:middle
which saves the special document
reference inside an iCloud

793
00:37:18,546 --> 00:37:21,816 A:middle
container the document provider
extensions don't take part

794
00:37:21,816 --> 00:37:23,196 A:middle
in the document reference
mechanism.

795
00:37:24,266 --> 00:37:28,086 A:middle
This is because of course
in this let's say we're

796
00:37:28,086 --> 00:37:30,876 A:middle
in an enterprise setting our
enterprise administration has

797
00:37:30,906 --> 00:37:33,306 A:middle
decided that they do
not want to use iCloud,

798
00:37:33,306 --> 00:37:36,966 A:middle
but of course we still want
this document provider extension

799
00:37:36,966 --> 00:37:41,456 A:middle
mechanism to still work because
our enterprise has given us an

800
00:37:41,456 --> 00:37:46,636 A:middle
application that can be
used to access the files

801
00:37:46,636 --> 00:37:48,156 A:middle
on the enterprise's file server.

802
00:37:49,276 --> 00:37:53,766 A:middle
So it's no good to use iCloud in
this case of course to get back

803
00:37:53,766 --> 00:37:54,976 A:middle
to your document preferences.

804
00:37:55,736 --> 00:37:58,546 A:middle
But of course the bookmark
mechanism will still work.

805
00:37:59,816 --> 00:38:04,796 A:middle
To that end the file provider
is able or has to be able

806

807
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

808
00:37:59,816 --> 00:38:04,796 A:middle
To that end the file provider
is able or has to be able

809
00:38:04,796 --> 00:38:10,896 A:middle
to resolve or resolve
into a file URL

810
00:38:11,216 --> 00:38:12,326 A:middle
and the other way around.

811
00:38:13,556 --> 00:38:18,326 A:middle
Now for security purposes
we have an isolation layer

812
00:38:18,326 --> 00:38:20,136 A:middle
that saves the state information

813
00:38:20,136 --> 00:38:23,486 A:middle
about which application
has been granted access

814
00:38:23,486 --> 00:38:26,716 A:middle
to which identifier --
inside which file provider,

815
00:38:27,686 --> 00:38:31,466 A:middle
and this is also something that
we use these identifiers for.

816
00:38:32,186 --> 00:38:36,536 A:middle
Let's have a quick look at how a
bookmark is created and resolved

817
00:38:36,686 --> 00:38:38,486 A:middle
by a document provider
extension.

818
00:38:39,486 --> 00:38:42,586 A:middle
Let's say we have our host
app and the host app is

819
00:38:42,796 --> 00:38:47,856 A:middle
for some reason going into
the background and just wants

820
00:38:47,856 --> 00:38:52,946 A:middle
to save its state it will call
the bookmarkData WithOptions

821
00:38:52,946 --> 00:38:57,456 A:middle
method on NSURL and NSURL
will call the persistent

822
00:38:57,456 --> 00:39:01,816 A:middle
IdentifierForItemAtURL method
on your file provider extension

823

824
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

825
00:38:57,456 --> 00:39:01,816 A:middle
IdentifierForItemAtURL method
on your file provider extension

826
00:39:01,816 --> 00:39:04,556 A:middle
which can then return
a persistentdentifier.

827
00:39:05,006 --> 00:39:06,686 A:middle
This might be a database key

828
00:39:07,116 --> 00:39:08,936 A:middle
or it might be something
much simpler.

829
00:39:09,366 --> 00:39:12,636 A:middle
It depends on the actual way

830
00:39:12,636 --> 00:39:17,126 A:middle
that your file provider is
actually accessing files.

831
00:39:18,116 --> 00:39:21,546 A:middle
Now at some point it will
return the personal identifier

832
00:39:21,546 --> 00:39:25,116 A:middle
which is just a freeform
NS string to the NSURL

833
00:39:25,516 --> 00:39:29,176 A:middle
and NSURL will package
that up and return it

834
00:39:29,176 --> 00:39:32,126 A:middle
as the opaque data block
that has the bookmark data.

835
00:39:32,606 --> 00:39:37,076 A:middle
At this point our user app
can go and save its state

836
00:39:37,606 --> 00:39:41,366 A:middle
and for example get
terminated in some way,

837
00:39:41,366 --> 00:39:43,746 A:middle
for example the user
reboots 35s.

838
00:39:44,816 --> 00:39:49,946 A:middle
Now at some point later the user
is reopening their app the user

839
00:39:49,946 --> 00:39:54,086 A:middle
app is doing state
restoration and in the process

840
00:39:54,086 --> 00:39:56,056 A:middle
of doing this is calling the URL

841
00:39:56,056 --> 00:39:58,676 A:middle
by resulting bookmark
data on NSURL.

842
00:39:59,826 --> 00:40:04,086 A:middle
We hand the identifier back to
your file provider which can

843

844
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

845
00:39:59,826 --> 00:40:04,086 A:middle
We hand the identifier back to
your file provider which can

846
00:40:04,086 --> 00:40:08,046 A:middle
in the URLForItemWith
PersistentIdentifier method

847
00:40:08,046 --> 00:40:14,406 A:middle
and it can then resolve this
identifier into a NSURL on disk.

848
00:40:14,816 --> 00:40:19,336 A:middle
Now, soon after we call the
providePlaceholder AtURL method

849
00:40:20,066 --> 00:40:23,236 A:middle
which you can use to
provide a small placeholder

850
00:40:23,666 --> 00:40:28,246 A:middle
that can be used
in correspondence

851
00:40:28,246 --> 00:40:33,506 A:middle
with the previously discussed
getPromisedItem ResourceValueby

852
00:40:33,506 --> 00:40:37,256 A:middle
theUser app to merely get
Metadata on this file.

853
00:40:37,766 --> 00:40:43,346 A:middle
But what it can also do at this
point eagerly download the file.

854
00:40:44,426 --> 00:40:47,276 A:middle
We will at least ensure
that you are providing a

855
00:40:47,276 --> 00:40:48,086 A:middle
placeholder though.

856
00:40:49,966 --> 00:40:54,486 A:middle
You pass the NSURL off
the file on disk back.

857
00:40:55,036 --> 00:40:58,856 A:middle
The NSURL method can
now return this NSURL

858
00:40:58,856 --> 00:41:01,806 A:middle
and the host app can use the
getPromisedItem ResourceValue

859

860
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

861
00:40:58,856 --> 00:41:01,806 A:middle
and the host app can use the
getPromisedItem ResourceValue

862
00:41:02,286 --> 00:41:05,996 A:middle
to merely read metadata
or use FileCoordinator AP

863
00:41:05,996 --> 00:41:10,566 A:middle
on the NSURL to access the file.

864
00:41:10,736 --> 00:41:12,616 A:middle
Well, no matter what you
have chosen that we will

865
00:41:12,616 --> 00:41:17,016 A:middle
at least call you to ensure if
the user uses file coordination

866
00:41:17,016 --> 00:41:19,606 A:middle
in this case to load the
actual data from this document

867
00:41:20,056 --> 00:41:23,786 A:middle
to ensure that the file
on disk is current.

868
00:41:23,786 --> 00:41:24,116 A:middle
All right.

869
00:41:24,666 --> 00:41:26,656 A:middle
We've seen how reading
works and how getting back

870
00:41:26,656 --> 00:41:27,686 A:middle
to your documents works.

871
00:41:28,186 --> 00:41:31,286 A:middle
Let's have a quick look at
how writing files works.

872
00:41:31,916 --> 00:41:35,246 A:middle
In this case, the user is using,

873
00:41:35,246 --> 00:41:39,666 A:middle
or the host app is using
the file coordination API

874
00:41:39,666 --> 00:41:42,786 A:middle
to actually write data to disk.

875
00:41:43,796 --> 00:41:47,116 A:middle
So it would do a route
coordinated write

876
00:41:47,796 --> 00:41:50,196 A:middle
to the file inside your
storage apps folder.

877
00:41:50,536 --> 00:41:53,336 A:middle
The file is now changed inside
your storage apps folder.

878
00:41:54,826 --> 00:41:59,306 A:middle
At some point very soon after,
but importantly to note not

879
00:41:59,566 --> 00:42:02,776 A:middle
in a blocking way, so the file
coordination will have succeeded

880

881
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

882
00:41:59,566 --> 00:42:02,776 A:middle
in a blocking way, so the file
coordination will have succeeded

883
00:42:02,776 --> 00:42:06,446 A:middle
by this point, we will
call itemChanged AtURL

884
00:42:06,446 --> 00:42:07,766 A:middle
on your file provider.

885
00:42:07,766 --> 00:42:10,946 A:middle
At this point your
file provider can go

886
00:42:10,946 --> 00:42:13,166 A:middle
and for example initiate
an upload of this file,

887
00:42:13,836 --> 00:42:17,606 A:middle
or at the very least mark it as
being dirty and needing upload,

888
00:42:17,606 --> 00:42:23,886 A:middle
so you don't accidently
overwrite it at a later point.

889
00:42:25,076 --> 00:42:25,616 A:middle
All right.

890
00:42:25,926 --> 00:42:27,926 A:middle
Let's have a quick
look at how that works.

891
00:42:28,446 --> 00:42:34,546 A:middle
What I've done is I've built a
very small sample project using

892
00:42:34,546 --> 00:42:37,146 A:middle
the template that
comes with [inaudible].

893
00:42:37,146 --> 00:42:39,306 A:middle
It's very nice because
it provides you

894
00:42:39,306 --> 00:42:42,806 A:middle
with almost everything
you need at the start.

895
00:42:43,596 --> 00:42:46,636 A:middle
We can use the target here
and use the application

896
00:42:46,636 --> 00:42:50,236 A:middle
and get extension template
for the document picker

897
00:42:50,526 --> 00:42:53,246 A:middle
and basically choose a
name here and it'll set

898
00:42:53,246 --> 00:42:55,226 A:middle
up the two different extensions.

899
00:42:56,306 --> 00:42:59,666 A:middle
Inside my project I just have
the two different extensions,

900

901
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

902
00:43:00,066 --> 00:43:03,146 A:middle
one folder here for
the actual picker.

903
00:43:03,516 --> 00:43:05,926 A:middle
I'm doing a text
snippet picker to go

904
00:43:05,926 --> 00:43:08,286 A:middle
with the text display
app that Mike showed.

905
00:43:09,246 --> 00:43:11,446 A:middle
And inside this I
have a whole bunch

906
00:43:11,446 --> 00:43:14,506 A:middle
of files while are
basically, well,

907
00:43:14,506 --> 00:43:17,386 A:middle
classes to display some
sort of picking UI,

908
00:43:17,386 --> 00:43:20,796 A:middle
but the important
part is my subclass

909
00:43:20,796 --> 00:43:23,106 A:middle
of UIDocumentPicker
ExtensionViewController here.

910
00:43:23,506 --> 00:43:28,796 A:middle
And inside this subclass
the important parts are the

911
00:43:29,086 --> 00:43:32,206 A:middle
prepareForPresentationinMode
method, let me make this big

912
00:43:32,206 --> 00:43:36,326 A:middle
so you can see this, and in this
PresentationinMode method what I

913
00:43:36,386 --> 00:43:41,246 A:middle
want to do is basically
display a specific,

914
00:43:42,006 --> 00:43:44,646 A:middle
in this case I'm using a
collection view controller

915
00:43:44,646 --> 00:43:49,866 A:middle
to display a list of documents
and I'm displaying this.

916
00:43:49,866 --> 00:43:52,776 A:middle
And all of my picking
actually is not handled

917
00:43:52,846 --> 00:43:54,986 A:middle
by my DocumentPicker
ViewController,

918
00:43:55,276 --> 00:43:56,276 A:middle
but by a subclass.

919
00:43:56,736 --> 00:44:00,846 A:middle
Of course I use a delegate
pattern to get back

920

921
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

922
00:43:56,736 --> 00:44:00,846 A:middle
Of course I use a delegate
pattern to get back

923
00:44:00,846 --> 00:44:04,556 A:middle
to my main class once the
user has picked a document

924
00:44:04,676 --> 00:44:07,446 A:middle
and we'll call this method here

925
00:44:07,546 --> 00:44:09,616 A:middle
and inside this method
all I have

926
00:44:09,666 --> 00:44:12,696 A:middle
to do is call the
dismissGrantingAccesstoURL

927
00:44:13,006 --> 00:44:16,086 A:middle
with the file URL that I've
previously written out.

928
00:44:17,306 --> 00:44:23,576 A:middle
Now the document file
provider here is very simple

929
00:44:23,576 --> 00:44:24,206 A:middle
in this case.

930
00:44:25,046 --> 00:44:28,896 A:middle
The interesting method for this
demo is the startProvidingItem

931
00:44:28,896 --> 00:44:32,586 A:middle
withURL method which I implement
to ensure that the snippet

932
00:44:32,586 --> 00:44:36,156 A:middle
at this URL is current and then
call the completion handler.

933
00:44:36,636 --> 00:44:39,836 A:middle
Let's have a quick look at
how that looks on the machine.

934
00:44:40,786 --> 00:44:41,156 A:middle
All right.

935
00:44:41,666 --> 00:44:46,466 A:middle
I've got my demo up here which
is basically since I started

936
00:44:46,516 --> 00:44:47,856 A:middle
from the template
just an empty app.

937
00:44:48,166 --> 00:44:50,766 A:middle
So instead I'm going to
pop off the document picker

938
00:44:51,416 --> 00:44:53,566 A:middle
and you notice I don't
even have any documents

939
00:44:53,566 --> 00:44:58,096 A:middle
in my iCloud account,
but when I pop

940
00:44:58,096 --> 00:45:02,596 A:middle
up this document picker menu
here I see a list including the

941

942
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

943
00:44:58,096 --> 00:45:02,596 A:middle
up this document picker menu
here I see a list including the

944
00:45:02,596 --> 00:45:06,396 A:middle
iCloud document picker and my
SnippetPicker, and if I pop

945
00:45:06,396 --> 00:45:10,056 A:middle
up the SnippetPicker what is
displayed is my SnippetPicker

946
00:45:10,056 --> 00:45:13,236 A:middle
view controller and I
can use that to pick any

947
00:45:13,236 --> 00:45:15,136 A:middle
of these documents
or Snippets in here.

948
00:45:15,956 --> 00:45:20,026 A:middle
So when I pick these with
the exact same sample app

949
00:45:20,026 --> 00:45:24,046 A:middle
that Mike showed you I'm
able to access these Snippets

950
00:45:24,226 --> 00:45:27,446 A:middle
from my little document
picker app.

951
00:45:27,706 --> 00:45:33,876 A:middle
Now when you use the
[inaudible] to try this out note

952
00:45:33,876 --> 00:45:37,276 A:middle
that this Snippet that the
document picker you will create

953
00:45:37,276 --> 00:45:41,176 A:middle
will not show up by default so
you can use the little locations

954
00:45:41,336 --> 00:45:46,646 A:middle
in the navigation bar of
the iCloud document picker.

955
00:45:47,336 --> 00:45:48,976 A:middle
It has a little more pop

956
00:45:48,976 --> 00:45:52,636 A:middle
out where you can enable
the Snippet picker.

957
00:45:52,816 --> 00:45:53,186 A:middle
All right.

958
00:45:54,616 --> 00:45:59,116 A:middle
Now let's switch back to slides.

959

960
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

961
00:46:00,566 --> 00:46:04,106 A:middle
Cool. To summarize the demo,
we've got an Xcode template

962
00:46:04,106 --> 00:46:06,986 A:middle
to get you started with the
document picker mechanism.

963
00:46:07,726 --> 00:46:13,716 A:middle
The document picker, or a
Document Provider will show

964
00:46:13,716 --> 00:46:15,656 A:middle
up right next to
the iCloud picker

965
00:46:15,656 --> 00:46:18,736 A:middle
if the user installs them.

966
00:46:19,856 --> 00:46:25,106 A:middle
And we also have
sample code available

967
00:46:25,106 --> 00:46:29,576 A:middle
on the session home page
that will enable you

968
00:46:29,576 --> 00:46:31,156 A:middle
to quickly test this out.

969
00:46:31,666 --> 00:46:35,776 A:middle
The sample code is basically a
little test app that we wrote

970
00:46:35,846 --> 00:46:41,126 A:middle
to be able to display each
of the document picker modes.

971
00:46:41,276 --> 00:46:45,186 A:middle
Cool. So that's Document
Providers

972
00:46:46,056 --> 00:46:51,166 A:middle
and that almost concludes the
session, but I have a little bit

973
00:46:51,166 --> 00:46:56,686 A:middle
of information for
you to inform you how

974
00:46:56,686 --> 00:47:01,296 A:middle
since we have this new Cloud
Drive mechanism how the

975

976
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

977
00:46:56,686 --> 00:47:01,296 A:middle
since we have this new Cloud
Drive mechanism how the

978
00:47:01,296 --> 00:47:04,066 A:middle
migration story is for that.

979
00:47:04,276 --> 00:47:10,006 A:middle
On iOS 8 the users can either
choose to, once it comes out,

980
00:47:10,266 --> 00:47:13,606 A:middle
choose to use the old
iCloud Documents mechanism,

981
00:47:13,906 --> 00:47:15,776 A:middle
or to migrate to iCloud Drive.

982
00:47:16,556 --> 00:47:21,196 A:middle
On OS X Yosemite we do
not provide the backwards

983
00:47:21,196 --> 00:47:24,776 A:middle
compatibility for the old
iCloud documents mechanism,

984
00:47:25,406 --> 00:47:28,376 A:middle
so the user has to either
choose to migrate to Cloud Drive

985
00:47:29,276 --> 00:47:33,316 A:middle
or they will no longer
receive the updates

986
00:47:34,096 --> 00:47:35,236 A:middle
across their devices.

987
00:47:35,626 --> 00:47:37,866 A:middle
Of course they can choose
to migrate at a later point

988
00:47:37,866 --> 00:47:39,786 A:middle
at which point the
upgrades resume.

989
00:47:40,226 --> 00:47:42,786 A:middle
And of course after
an account is migrated

990
00:47:42,836 --> 00:47:45,516 A:middle
to iCloud Drive only the devices

991
00:47:45,566 --> 00:47:48,806 A:middle
that are actually using iCloud
Drive will propagate changes

992
00:47:49,296 --> 00:47:50,306 A:middle
between each other.

993
00:47:50,856 --> 00:47:55,656 A:middle
For US developers this
is important to know

994
00:47:56,246 --> 00:48:00,986 A:middle
because even though the current
C Build [assumed spelling]

995

996
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

997
00:47:56,246 --> 00:48:00,986 A:middle
because even though the current
C Build [assumed spelling]

998
00:48:00,986 --> 00:48:05,506 A:middle
that you have in your hands
right now is automatically using

999
00:48:05,576 --> 00:48:09,746 A:middle
iCloud Drive the
actual new features,

1000
00:48:10,206 --> 00:48:13,856 A:middle
and thus you can easily test all
of this out, the new features

1001
00:48:13,856 --> 00:48:16,986 A:middle
that we've presented in today's
presentation will only be

1002
00:48:16,986 --> 00:48:19,686 A:middle
available if your user
is using iCloud Drive.

1003
00:48:20,836 --> 00:48:23,936 A:middle
So you have to be aware
of this possibility

1004
00:48:24,686 --> 00:48:29,876 A:middle
in case they have not
actually chosen to migrate.

1005
00:48:30,496 --> 00:48:31,046 A:middle
All right.

1006
00:48:31,906 --> 00:48:36,466 A:middle
To summarize, if you're
just taking one thing away

1007
00:48:36,466 --> 00:48:38,496 A:middle
from today's session it would be

1008
00:48:38,496 --> 00:48:40,066 A:middle
that you should use
file coordination

1009
00:48:40,066 --> 00:48:41,146 A:middle
for document access.

1010
00:48:41,976 --> 00:48:44,216 A:middle
Without using file
coordination none

1011
00:48:44,216 --> 00:48:49,766 A:middle
of these mechanisms can work
and you will probably be

1012
00:48:49,766 --> 00:48:53,886 A:middle
at some point experiencing
data loss on the machines

1013
00:48:53,886 --> 00:48:56,946 A:middle
of your users, which of
course is extremely bad.

1014
00:48:57,726 --> 00:49:01,366 A:middle
We've seen how to discover
and display files not only

1015

1016
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1017
00:48:57,726 --> 00:49:01,366 A:middle
We've seen how to discover
and display files not only

1018
00:49:01,366 --> 00:49:04,336 A:middle
in your own container, but
also using the UIDocumentPicker

1019
00:49:05,196 --> 00:49:07,466 A:middle
which allows you to
access files outside

1020
00:49:07,466 --> 00:49:08,906 A:middle
of your applications'
containers.

1021
00:49:09,556 --> 00:49:11,316 A:middle
We've given a quick overview how

1022
00:49:11,316 --> 00:49:15,746 A:middle
to use document provider
extensions to be able

1023
00:49:15,746 --> 00:49:20,366 A:middle
to integrate your own
company's storage system

1024
00:49:20,796 --> 00:49:23,066 A:middle
into the whole document
access mechanism.

1025
00:49:23,586 --> 00:49:28,486 A:middle
For more information I
would like to guide you

1026
00:49:28,486 --> 00:49:31,036 A:middle
to Dave DeLong, our App
Frameworks Evangelist

1027
00:49:31,936 --> 00:49:35,886 A:middle
and also Jake Behrens
who is the UIKit specific

1028
00:49:35,976 --> 00:49:37,066 A:middle
Frameworks Evangelist.

1029
00:49:38,406 --> 00:49:40,636 A:middle
We have some neat
documentation out.

1030
00:49:40,636 --> 00:49:43,886 A:middle
There is a brand new
iCloud for Developers guide

1031
00:49:44,856 --> 00:49:47,396 A:middle
and we also have guides
for the Document Picker,

1032
00:49:48,306 --> 00:49:51,756 A:middle
and of course also guides for
the extensions mechanisms.

1033
00:49:52,016 --> 00:49:56,686 A:middle
We also have the Apple Developer
Forums where our developers hang

1034
00:49:56,686 --> 00:49:58,516 A:middle
out and will answer questions.

1035

1036
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1037
00:50:00,036 --> 00:50:03,866 A:middle
Related sessions, there
was a very nice session

1038
00:50:03,866 --> 00:50:05,156 A:middle
on introducing CloudKit.

1039
00:50:05,806 --> 00:50:06,546 A:middle
If you're interested

1040
00:50:06,546 --> 00:50:11,236 A:middle
in the technology behind the
new UI Cloud Drive mechanism

1041
00:50:11,456 --> 00:50:12,636 A:middle
that powers all of this.

1042
00:50:13,196 --> 00:50:15,596 A:middle
This session is of course
not entirely necessary

1043
00:50:15,596 --> 00:50:17,486 A:middle
if you merely want to
store your documents

1044
00:50:18,086 --> 00:50:21,086 A:middle
because the CloudKit mechanism
is entirely transparent

1045
00:50:21,206 --> 00:50:24,086 A:middle
from the document
storage perspective.

1046
00:50:24,816 --> 00:50:30,986 A:middle
We also had sessions on creating
extensions for iOS and OS X

1047
00:50:30,986 --> 00:50:34,086 A:middle
and with that thank
you for your time

1048
00:50:34,326 --> 00:50:37,906 A:middle
and I wish you pleasant rest
of the week and a nice bash.

1049
00:50:39,016 --> 00:50:40,650 A:middle
[ Applause ]

1050
