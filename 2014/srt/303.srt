X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:11,576 --> 00:00:12,426 A:middle
>> Good afternoon.

2
00:00:14,516 --> 00:00:18,706 A:middle
[ Applause ]

3
00:00:19,206 --> 00:00:19,716 A:middle
Thanks. Hi.

4
00:00:19,906 --> 00:00:21,166 A:middle
My name is James Wilson.

5
00:00:21,166 --> 00:00:23,336 A:middle
I'm an Engineering Manager
and one of the things

6
00:00:23,336 --> 00:00:25,866 A:middle
that my team works
on is the frameworks

7
00:00:25,866 --> 00:00:29,396 A:middle
that power the App Store
and the iBook store in OS X,

8
00:00:29,396 --> 00:00:31,186 A:middle
which of course includes
StoreKit.

9
00:00:32,326 --> 00:00:36,366 A:middle
And we've run a StoreKit session
at WWDC over the last few years,

10
00:00:36,816 --> 00:00:38,956 A:middle
pretty much since
we debuted StoreKit

11
00:00:38,956 --> 00:00:40,026 A:middle
for doing In-App Purchases.

12
00:00:41,306 --> 00:00:43,576 A:middle
But the session has typically
been aimed at beginners

13
00:00:43,576 --> 00:00:46,286 A:middle
and intermediate level for
developers to get a feel

14
00:00:46,286 --> 00:00:49,076 A:middle
for how they can implement
In-App Purchases using StoreKit.

15
00:00:50,116 --> 00:00:52,776 A:middle
We know obviously from the
absolutely massive uptake

16
00:00:52,886 --> 00:00:55,856 A:middle
of In-App Purchases that it's
time to move on from that.

17
00:00:56,766 --> 00:00:58,516 A:middle
So this year I wanted to
do something different.

18
00:00:58,756 --> 00:01:00,536 A:middle
What we're going to focus
on in this session is how

19

20
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

21
00:00:58,756 --> 00:01:00,536 A:middle
What we're going to focus
on in this session is how

22
00:01:00,536 --> 00:01:03,186 A:middle
to optimize your In-App
Purchase implementation.

23
00:01:03,866 --> 00:01:05,886 A:middle
And the kind of optimization
we are looking at is not

24
00:01:05,886 --> 00:01:08,536 A:middle
so much using less
memory, using less memory,

25
00:01:08,536 --> 00:01:09,836 A:middle
making it faster etcetera.

26
00:01:10,666 --> 00:01:12,206 A:middle
What we're specifically looking

27
00:01:12,206 --> 00:01:13,996 A:middle
at is optimizing
your implementation

28
00:01:13,996 --> 00:01:18,316 A:middle
to be trouble-free, reliable,
smooth, and a great experience

29
00:01:18,316 --> 00:01:20,436 A:middle
for the user every single time.

30
00:01:21,606 --> 00:01:23,706 A:middle
But if you're not
familiar with StoreKit,

31
00:01:24,296 --> 00:01:26,366 A:middle
here's the three key things
that StoreKit does for you.

32
00:01:27,276 --> 00:01:29,836 A:middle
Of course we all know and
love that StoreKit allows us

33
00:01:29,836 --> 00:01:31,586 A:middle
to do In-App Purchases
in our apps.

34
00:01:32,076 --> 00:01:34,366 A:middle
This is for both consumable
and non-consumable items,

35
00:01:34,656 --> 00:01:36,076 A:middle
as well as for subscriptions.

36
00:01:37,566 --> 00:01:39,856 A:middle
One other thing that StoreKit
does is it has this thing called

37
00:01:39,856 --> 00:01:41,796 A:middle
the StoreKit product
sheet, which is a way

38
00:01:41,796 --> 00:01:45,076 A:middle
in which you can sell apps and
other content from the iTunes

39
00:01:45,076 --> 00:01:47,626 A:middle
or the App Store
through your app.

40
00:01:47,626 --> 00:01:49,716 A:middle
And lastly it can be
used for receipt renewal.

41
00:01:49,826 --> 00:01:51,836 A:middle
Not receipts are a
really powerful way

42
00:01:52,146 --> 00:01:55,286 A:middle
that you can enforce your
business model, prevent piracy,

43
00:01:55,526 --> 00:01:58,936 A:middle
etcetera, right within your app
as well as within your service.

44
00:01:59,126 --> 00:02:00,556 A:middle
And StoreKit's involved
there as well.

45

46
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

47
00:01:59,126 --> 00:02:00,556 A:middle
And StoreKit's involved
there as well.

48
00:02:02,036 --> 00:02:07,136 A:middle
Before we launch into optimizing
In-App Purchases using StoreKit,

49
00:02:07,186 --> 00:02:08,996 A:middle
I wanted to cover a few
things that are new this year.

50
00:02:09,586 --> 00:02:12,126 A:middle
The first is that that
StoreKit product sheet

51
00:02:12,126 --> 00:02:16,136 A:middle
that I just mentioned before,
it allows you sell content

52
00:02:16,136 --> 00:02:18,816 A:middle
from other developers or
other apps or content you have

53
00:02:18,816 --> 00:02:20,016 A:middle
in the store through your app.

54
00:02:20,976 --> 00:02:24,246 A:middle
That StoreKit product sheet now
supports the affiliate program.

55
00:02:25,306 --> 00:02:27,246 A:middle
This is really great
for you as a developer.

56
00:02:27,746 --> 00:02:30,626 A:middle
We debuted the product sheet,
I think it was last year.

57
00:02:31,306 --> 00:02:34,026 A:middle
But at that time it was simply a
means by which you could market

58
00:02:34,026 --> 00:02:36,526 A:middle
and sell those other product
and content through your app,

59
00:02:37,276 --> 00:02:39,866 A:middle
but now with the StoreKit
product sheet supporting the

60
00:02:39,866 --> 00:02:41,736 A:middle
affiliate program,
if you're part

61
00:02:41,736 --> 00:02:44,886 A:middle
of that affiliate program you
can get paid for those products

62
00:02:44,886 --> 00:02:47,446 A:middle
that you are selling
through your app.

63
00:02:48,336 --> 00:02:51,846 A:middle
The second new thing that
I wanted to call out is

64
00:02:51,846 --> 00:02:54,256 A:middle
that in StoreKit we're
introducing a new transaction

65
00:02:54,256 --> 00:02:57,446 A:middle
state called deferred and we'll
look at a bit more in a second,

66
00:02:57,446 --> 00:03:00,386 A:middle
but this has come about due
to the ask to buy feature

67

68
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

69
00:02:57,446 --> 00:03:00,386 A:middle
but this has come about due
to the ask to buy feature

70
00:03:00,386 --> 00:03:03,066 A:middle
that was implemented as part
of our family sharing feature.

71
00:03:04,016 --> 00:03:06,676 A:middle
So family sharing allows
you to add up to six members

72
00:03:06,676 --> 00:03:08,246 A:middle
of your family and
form a family,

73
00:03:09,196 --> 00:03:11,646 A:middle
and that family can share
purchases and a payment method.

74
00:03:12,346 --> 00:03:14,306 A:middle
And when you have children as
part of that family that are

75
00:03:14,306 --> 00:03:18,296 A:middle
under 18 you can enable ask to
buy on them so that they can ask

76
00:03:18,296 --> 00:03:20,286 A:middle
for permission to buy
things from the store,

77
00:03:20,286 --> 00:03:22,826 A:middle
as well as In-App
Purchases in your app.

78
00:03:23,436 --> 00:03:24,666 A:middle
And then the parent can approve

79
00:03:24,666 --> 00:03:26,476 A:middle
that purchase remotely
from their devices.

80
00:03:27,246 --> 00:03:29,766 A:middle
So when the transactions in
that state we call it deferred.

81
00:03:29,826 --> 00:03:32,356 A:middle
And that's why we introduced
this new transaction state.

82
00:03:33,766 --> 00:03:35,386 A:middle
We'll touch on this briefly
now and I'm going to look

83
00:03:35,386 --> 00:03:37,296 A:middle
at an example of how to
handle it and what sort

84
00:03:37,296 --> 00:03:39,006 A:middle
of things you should do
in your app later on.

85
00:03:39,006 --> 00:03:41,586 A:middle
But it's called
SKPaymentTransactions

86
00:03:41,586 --> 00:03:42,366 A:middle
StateDeferred.

87
00:03:43,326 --> 00:03:45,526 A:middle
What this means is when
you see a transaction

88
00:03:45,846 --> 00:03:49,256 A:middle
into the deferred state it
means it's neither purchased nor

89
00:03:49,256 --> 00:03:50,406 A:middle
failed, yet.

90
00:03:51,796 --> 00:03:54,486 A:middle
You will receive a further
update about this in the future

91
00:03:54,966 --> 00:03:57,346 A:middle
as in the transaction will
enter that final state

92
00:03:57,346 --> 00:03:58,496 A:middle
of either purchases or failed,

93
00:03:58,496 --> 00:04:01,466 A:middle
but it will be an
indeterminate time

94

95
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

96
00:03:58,496 --> 00:04:01,466 A:middle
but it will be an
indeterminate time

97
00:04:01,656 --> 00:04:03,376 A:middle
between when the purchase begins

98
00:04:03,866 --> 00:04:05,466 A:middle
and when it enters
that final state.

99
00:04:06,616 --> 00:04:09,726 A:middle
The most important message
I want to get across for you

100
00:04:09,726 --> 00:04:12,846 A:middle
as app developers is
that to implement support

101
00:04:12,846 --> 00:04:15,576 A:middle
for handling this deferred
transactions state you need

102
00:04:15,576 --> 00:04:18,286 A:middle
to engineer it in a way that
your app can still be used

103
00:04:18,286 --> 00:04:20,946 A:middle
by the user while it's
in that deferred state.

104
00:04:22,146 --> 00:04:25,516 A:middle
It's also worth mentioning
that we do actually support

105
00:04:25,516 --> 00:04:28,086 A:middle
and allow you to repurchase
that item, that is attempt

106
00:04:28,086 --> 00:04:29,266 A:middle
to make subsequent purchases

107
00:04:29,266 --> 00:04:31,996 A:middle
for that item while the
permission is still pending,

108
00:04:31,996 --> 00:04:34,136 A:middle
or while the transaction's
in that deferred state.

109
00:04:37,206 --> 00:04:39,496 A:middle
Wherever possible though,
especially in regards

110
00:04:39,496 --> 00:04:40,896 A:middle
to the deferred transaction
state,

111
00:04:40,896 --> 00:04:43,356 A:middle
you should let StoreKit
handle the user interaction.

112
00:04:43,666 --> 00:04:46,016 A:middle
We'll handle a lot of the
messaging and dialogues

113
00:04:46,016 --> 00:04:48,116 A:middle
that are required for
the user in regards

114
00:04:48,116 --> 00:04:49,206 A:middle
to the Ask to Buy feature.

115
00:04:50,496 --> 00:04:52,576 A:middle
This is how ask to buy works,

116
00:04:52,576 --> 00:04:55,306 A:middle
so I've got a child device
here and a parent device.

117
00:04:56,056 --> 00:04:58,486 A:middle
When a child wants to
buy something such as one

118
00:04:58,486 --> 00:05:01,216 A:middle
of your In-App Purchases, they
attempt to make the purchase

119

120
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

121
00:04:58,486 --> 00:05:01,216 A:middle
of your In-App Purchases, they
attempt to make the purchase

122
00:05:01,216 --> 00:05:03,626 A:middle
by pressing the Buy button
and they'll be prompted

123
00:05:03,626 --> 00:05:05,656 A:middle
to ask permission for that item.

124
00:05:06,276 --> 00:05:08,876 A:middle
That causes a message to
be sent via the App Store

125
00:05:08,876 --> 00:05:11,356 A:middle
to the parent's device, in
fact all the parent devices

126
00:05:11,396 --> 00:05:12,506 A:middle
or approver's devices.

127
00:05:13,806 --> 00:05:15,116 A:middle
And they receive a notification

128
00:05:15,116 --> 00:05:17,076 A:middle
that this request has
been to buy this item.

129
00:05:17,076 --> 00:05:21,066 A:middle
When it enters that state,
that's when the transaction goes

130
00:05:21,066 --> 00:05:22,326 A:middle
into the deferred state.

131
00:05:23,176 --> 00:05:25,806 A:middle
So once the child has tapped
the button to say yes they want

132
00:05:25,806 --> 00:05:28,406 A:middle
to ask permission, and
the notification is sent

133
00:05:28,406 --> 00:05:29,676 A:middle
out to the approvers' devices,

134
00:05:30,136 --> 00:05:33,726 A:middle
that's when the transaction
becomes deferred.

135
00:05:33,726 --> 00:05:36,716 A:middle
Now once the parent
goes ahead and approves

136
00:05:36,716 --> 00:05:38,696 A:middle
or declines this
purchase request,

137
00:05:39,436 --> 00:05:41,666 A:middle
we'll send a message back
down to the child's device

138
00:05:41,666 --> 00:05:42,816 A:middle
or the requester's device.

139
00:05:43,316 --> 00:05:44,916 A:middle
And at that point, that's

140
00:05:44,916 --> 00:05:47,336 A:middle
when the transaction will
enter the familiar purchases,

141
00:05:47,336 --> 00:05:48,496 A:middle
or failed states.

142
00:05:48,736 --> 00:05:53,056 A:middle
Now let's talk about how

143
00:05:53,056 --> 00:05:55,526 A:middle
to optimize your In-App
Purchase implementation.

144
00:05:57,416 --> 00:06:00,286 A:middle
This next section is what I
call stock it in 60 seconds.

145

146
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

147
00:05:57,416 --> 00:06:00,286 A:middle
This next section is what I
call stock it in 60 seconds.

148
00:06:00,286 --> 00:06:02,366 A:middle
It designed to give you a
really brief introduction

149
00:06:02,366 --> 00:06:03,606 A:middle
to the processes involved

150
00:06:03,746 --> 00:06:05,856 A:middle
in completing an In-App
Purchase using StoreKit.

151
00:06:06,796 --> 00:06:07,516 A:middle
The first thing you've got

152
00:06:07,516 --> 00:06:09,056 A:middle
to do is know what
you're going to sell.

153
00:06:09,186 --> 00:06:12,336 A:middle
You need to load those In-App
Purchase product identifiers.

154
00:06:13,286 --> 00:06:15,016 A:middle
Then once you know what
you're going to sell,

155
00:06:15,116 --> 00:06:16,826 A:middle
in terms of those
product identifiers,

156
00:06:17,296 --> 00:06:18,756 A:middle
you need to ask the App Store

157
00:06:18,756 --> 00:06:20,936 A:middle
for the localized information
about those products.

158
00:06:21,166 --> 00:06:22,896 A:middle
And we do that with
SKProduct request.

159
00:06:23,476 --> 00:06:25,706 A:middle
That gives us back a
bunch of SKProduct objects

160
00:06:25,706 --> 00:06:28,446 A:middle
that we can then go and draw
our really beautiful In-App

161
00:06:28,496 --> 00:06:29,076 A:middle
Purchase UI.

162
00:06:29,076 --> 00:06:32,836 A:middle
Once we've shown our beautiful
In-App Purchase store UI

163
00:06:33,046 --> 00:06:35,256 A:middle
and we've enticed the user
to make that purchase,

164
00:06:35,746 --> 00:06:37,706 A:middle
we proceed on to
converting that product

165
00:06:37,896 --> 00:06:40,286 A:middle
into an SK payment
object and adding

166
00:06:40,286 --> 00:06:41,426 A:middle
that into the payment queue.

167
00:06:43,016 --> 00:06:44,916 A:middle
The payment queue will then
give us updates about how

168
00:06:44,916 --> 00:06:48,326 A:middle
that transaction is progressing
and we will need to process

169
00:06:48,326 --> 00:06:51,236 A:middle
that transaction as it moves to
the purchase or failed state.

170
00:06:52,006 --> 00:06:54,826 A:middle
Assuming they purchase the
item, we then go ahead and make

171
00:06:54,826 --> 00:06:57,276 A:middle
that asset or that content and
feature available to the user.

172
00:06:57,276 --> 00:07:00,366 A:middle
And then lastly we
finish the transaction.

173

174
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

175
00:06:57,276 --> 00:07:00,366 A:middle
And then lastly we
finish the transaction.

176
00:07:01,186 --> 00:07:02,066 A:middle
So that's it.

177
00:07:02,066 --> 00:07:03,496 A:middle
It's a pretty simple process

178
00:07:03,806 --> 00:07:05,676 A:middle
when you string it
together like that.

179
00:07:06,246 --> 00:07:08,366 A:middle
What we've noticed though
is though from all the apps

180
00:07:08,366 --> 00:07:11,536 A:middle
that we see submitted, from all
the apps I've used personally,

181
00:07:11,786 --> 00:07:13,866 A:middle
from the feedback we get from
developers and tech support,

182
00:07:13,866 --> 00:07:15,576 A:middle
as well as from meeting
a lot of developers here

183
00:07:15,576 --> 00:07:20,236 A:middle
at WWDC is we know that there
are definitely some danger zones

184
00:07:20,236 --> 00:07:20,626 A:middle
in here.

185
00:07:21,386 --> 00:07:25,716 A:middle
There's areas of this process
where the problems can crop up,

186
00:07:25,716 --> 00:07:27,656 A:middle
or there's common
pitfalls or got you's.

187
00:07:28,066 --> 00:07:30,676 A:middle
So the focus on this
session is to look at those,

188
00:07:30,676 --> 00:07:31,946 A:middle
and to help you get over those.

189
00:07:32,286 --> 00:07:34,706 A:middle
To really bring your In-App
Purchase implementation

190
00:07:34,796 --> 00:07:35,776 A:middle
up to the next level.

191
00:07:36,526 --> 00:07:38,186 A:middle
We want it to be as
smooth as possible,

192
00:07:38,416 --> 00:07:40,976 A:middle
a great experience
every single time.

193
00:07:41,586 --> 00:07:45,326 A:middle
To start off with let's
look at the user interaction

194
00:07:45,326 --> 00:07:47,736 A:middle
in particularly in
the pre-sales piece

195
00:07:47,736 --> 00:07:48,906 A:middle
of making an In-App Purchase.

196
00:07:49,256 --> 00:07:54,076 A:middle
That is when you're
showing your store UI.

197
00:07:54,116 --> 00:07:55,176 A:middle
Remember the first thing we have

198
00:07:55,226 --> 00:07:56,676 A:middle
to do is know what
we want to sell.

199
00:07:56,676 --> 00:07:59,486 A:middle
We need to load those In-App
Purchase product identifiers

200
00:07:59,486 --> 00:08:00,186 A:middle
from somewhere.

201

202
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

203
00:07:59,486 --> 00:08:00,186 A:middle
from somewhere.

204
00:08:00,736 --> 00:08:03,156 A:middle
Now these are the product
identifiers that you set

205
00:08:03,156 --> 00:08:06,426 A:middle
up in iTunes Connect when you
defined your In-App Purchase

206
00:08:06,526 --> 00:08:07,496 A:middle
saleable items.

207
00:08:07,496 --> 00:08:10,186 A:middle
So there's two options for
how you can load these product

208
00:08:10,186 --> 00:08:11,176 A:middle
identifiers up.

209
00:08:11,976 --> 00:08:15,026 A:middle
One is if you've got a very
static catalog of items

210
00:08:15,026 --> 00:08:17,756 A:middle
that you're selling, that is
you might only have a handful

211
00:08:17,756 --> 00:08:19,626 A:middle
of things you're selling and
you know they won't change

212
00:08:19,626 --> 00:08:20,716 A:middle
throughout the lifetime
of the app,

213
00:08:21,426 --> 00:08:22,566 A:middle
then it might be
simple enough for you

214
00:08:22,566 --> 00:08:25,466 A:middle
to just bake those identifiers
directly into the apps binary,

215
00:08:25,766 --> 00:08:27,836 A:middle
or include it as a pay
list that's part of the app

216
00:08:27,836 --> 00:08:29,146 A:middle
that you submit to the store.

217
00:08:29,796 --> 00:08:31,306 A:middle
That's the simplest
implementation.

218
00:08:32,206 --> 00:08:34,166 A:middle
For a lot of developers though,

219
00:08:34,616 --> 00:08:36,966 A:middle
we know that that doesn't
suit you well enough in terms

220
00:08:36,966 --> 00:08:39,765 A:middle
of giving you enough flexibility
and what we see is that a lot

221
00:08:39,765 --> 00:08:42,246 A:middle
of developers, the first
thing that happens during

222
00:08:42,246 --> 00:08:44,706 A:middle
that In-App Purchase
flow is they make a call

223
00:08:44,706 --> 00:08:48,316 A:middle
to their own service to fetch
that list of product identifiers

224
00:08:48,316 --> 00:08:49,806 A:middle
that they're going to
display to the user.

225
00:08:50,486 --> 00:08:54,376 A:middle
Now if you're doing that, you
need to think really carefully

226
00:08:54,376 --> 00:08:56,376 A:middle
about how you're caching
and loading that data.

227
00:08:56,946 --> 00:09:00,106 A:middle
Because it's the first step
in making an In-App Purchase.

228

229
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

230
00:08:56,946 --> 00:09:00,106 A:middle
Because it's the first step
in making an In-App Purchase.

231
00:09:00,426 --> 00:09:03,206 A:middle
And that In-App Purchase process
is such a fleeting moment

232
00:09:03,206 --> 00:09:06,336 A:middle
of trying to transform the
customer's intrigue and interest

233
00:09:06,806 --> 00:09:09,426 A:middle
into a sale that's
obviously a benefit to you,

234
00:09:09,426 --> 00:09:11,736 A:middle
but is also to help with
their enjoyment and usefulness

235
00:09:11,736 --> 00:09:12,796 A:middle
of the app that they're using.

236
00:09:13,796 --> 00:09:18,456 A:middle
Even more important is the
reliability of those servers

237
00:09:18,456 --> 00:09:20,156 A:middle
that are hosting
your list of products

238
00:09:20,156 --> 00:09:21,006 A:middle
that you're going to sell.

239
00:09:22,106 --> 00:09:23,826 A:middle
You've got to make sure that
if you're going to have them

240
00:09:23,826 --> 00:09:26,076 A:middle
on server and you're going
to make an HTTP request

241
00:09:26,076 --> 00:09:27,526 A:middle
or whatever it might
be to load them,

242
00:09:28,076 --> 00:09:30,966 A:middle
that you have a super
reliable, font tolerant,

243
00:09:31,016 --> 00:09:33,756 A:middle
really performant server
platform that is able

244
00:09:33,756 --> 00:09:36,816 A:middle
to issue those product codes
really, really quickly.

245
00:09:39,596 --> 00:09:45,026 A:middle
Because that's not the way
to start an In-App Purchase.

246
00:09:45,836 --> 00:09:48,946 A:middle
So often when, if I'm playing
games, or I'm using an app

247
00:09:49,106 --> 00:09:50,886 A:middle
and I'm enticed to make
an In-App Purchase,

248
00:09:50,886 --> 00:09:52,396 A:middle
probably because I'm not
doing very well at it,

249
00:09:53,376 --> 00:09:54,956 A:middle
I tap the button to
see what it's about

250
00:09:54,956 --> 00:09:56,336 A:middle
and I'm stuck at a spinner.

251
00:09:57,326 --> 00:09:58,406 A:middle
There's no need for that.

252
00:09:58,746 --> 00:10:01,066 A:middle
If you have to make a network
request in order to enter

253

254
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

255
00:09:58,746 --> 00:10:01,066 A:middle
If you have to make a network
request in order to enter

256
00:10:01,066 --> 00:10:03,246 A:middle
that In-App Purchase
flow, anticipate it

257
00:10:03,246 --> 00:10:03,976 A:middle
and do it ahead of time.

258
00:10:04,046 --> 00:10:06,886 A:middle
For most of you, you
know when it's likely

259
00:10:06,886 --> 00:10:08,196 A:middle
that the user is
going to be presented

260
00:10:08,196 --> 00:10:10,676 A:middle
with these In-App Purchase
offerings, so just ahead

261
00:10:10,676 --> 00:10:12,676 A:middle
of time do those
network requests you need

262
00:10:12,996 --> 00:10:15,306 A:middle
and avoid them getting stuck
at a spindle like this.

263
00:10:15,836 --> 00:10:19,966 A:middle
So how do we load that
product information?

264
00:10:20,376 --> 00:10:22,596 A:middle
You do that -- well sorry once
you've got those identifiers,

265
00:10:22,716 --> 00:10:24,726 A:middle
you've got to load the
product information about them.

266
00:10:25,076 --> 00:10:27,116 A:middle
This is when you transform
that simple identifier

267
00:10:27,116 --> 00:10:28,536 A:middle
that you defined
in iTunes connect

268
00:10:29,096 --> 00:10:31,896 A:middle
to getting the localized product
information, product price

269
00:10:32,076 --> 00:10:34,266 A:middle
from the app-store that
the user is signed into.

270
00:10:35,066 --> 00:10:37,086 A:middle
And you do that using
SKProduct request.

271
00:10:38,486 --> 00:10:41,196 A:middle
You pass into this the set of
identifiers for which you want

272
00:10:41,196 --> 00:10:44,346 A:middle
that localized product
information back.

273
00:10:44,346 --> 00:10:47,036 A:middle
Now when you do this, as I
said just before, always try

274
00:10:47,036 --> 00:10:48,476 A:middle
and anticipate the presentation.

275
00:10:48,946 --> 00:10:50,746 A:middle
This will be another
round trip on the network.

276
00:10:51,326 --> 00:10:54,606 A:middle
There's always, always going
to be some delay there.

277
00:10:54,726 --> 00:10:56,836 A:middle
So it's best if you
can anticipate this,

278
00:10:57,136 --> 00:11:00,726 A:middle
load it just ahead of time, or
at a point in time when you know

279

280
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

281
00:10:57,136 --> 00:11:00,726 A:middle
load it just ahead of time, or
at a point in time when you know

282
00:11:00,726 --> 00:11:02,826 A:middle
that you can safely do that
without interrupting the user.

283
00:11:02,826 --> 00:11:05,966 A:middle
So that you can present that
in-app UI really quickly.

284
00:11:06,896 --> 00:11:09,326 A:middle
Now what you get
back when you make

285
00:11:09,326 --> 00:11:13,546 A:middle
that SKProduct request is a
bunch of SKProduct objects.

286
00:11:14,406 --> 00:11:17,376 A:middle
The SKProduct object will
contain the localized title

287
00:11:17,376 --> 00:11:19,946 A:middle
and description, the
price and locale,

288
00:11:20,626 --> 00:11:22,496 A:middle
and if you're hosting
In-App Purchases with us,

289
00:11:22,856 --> 00:11:25,166 A:middle
then you'll also get back
the content size and version.

290
00:11:25,886 --> 00:11:32,146 A:middle
The most important bit in the
SKProduct object you get back

291
00:11:32,146 --> 00:11:35,096 A:middle
in terms of making for a really
good In-App Purchase experience,

292
00:11:35,646 --> 00:11:38,936 A:middle
is that localized title, and the
localized pricing information.

293
00:11:40,566 --> 00:11:45,216 A:middle
You would be amazed at how
many different ways there are

294
00:11:45,216 --> 00:11:49,116 A:middle
to represent the simple concept
of currency around the world.

295
00:11:50,056 --> 00:11:52,646 A:middle
This is just a very
small subset of examples.

296
00:11:53,496 --> 00:11:57,496 A:middle
This is all different ways
to represent 1234 and56

297
00:11:58,236 --> 00:11:59,566 A:middle
in currencies around the world.

298

299
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

300
00:12:00,476 --> 00:12:02,656 A:middle
Now currency is something that's
always near and dear to people,

301
00:12:02,656 --> 00:12:04,496 A:middle
especially when you're offering
them something for sale.

302
00:12:05,186 --> 00:12:07,166 A:middle
So make sure you can
present the currency

303
00:12:07,466 --> 00:12:09,426 A:middle
for what you're offering
through In-App Purchases

304
00:12:09,776 --> 00:12:12,526 A:middle
in a way that's comfortable
and familiar to that user.

305
00:12:12,866 --> 00:12:16,386 A:middle
It makes for a much, much
nicer experience to make

306
00:12:16,386 --> 00:12:19,416 A:middle
that user feel like they
are first-class experience

307
00:12:19,416 --> 00:12:20,816 A:middle
in your app, regardless

308
00:12:20,816 --> 00:12:22,686 A:middle
of wherever they are
around the world.

309
00:12:23,346 --> 00:12:25,736 A:middle
Here's a neat trick
for doing that.

310
00:12:26,666 --> 00:12:28,636 A:middle
You can show that you
can localize price using

311
00:12:28,636 --> 00:12:29,616 A:middle
NSNumber formatter.

312
00:12:30,456 --> 00:12:32,316 A:middle
Here I've created my
NSNumber formatter

313
00:12:33,096 --> 00:12:35,156 A:middle
and I've set the number
style to be in currency,

314
00:12:35,156 --> 00:12:36,376 A:middle
because that's what
we want to display,

315
00:12:36,896 --> 00:12:38,276 A:middle
but here's where
the magic starts.

316
00:12:39,106 --> 00:12:43,466 A:middle
I set the locale for that number
formatter, to the price locale

317
00:12:43,466 --> 00:12:45,626 A:middle
that I got back from
the SKProduct object.

318
00:12:46,216 --> 00:12:47,346 A:middle
I don't make any assumptions

319
00:12:47,346 --> 00:12:49,076 A:middle
about how the device
is configured,

320
00:12:49,986 --> 00:12:51,076 A:middle
I don't make any assumptions

321
00:12:51,076 --> 00:12:52,656 A:middle
about where the user
might be based

322
00:12:52,656 --> 00:12:56,166 A:middle
on any other criteria
whatsoever, because we want

323
00:12:56,166 --> 00:12:58,556 A:middle
to show the price that's
correct for the App Store

324
00:12:58,556 --> 00:12:59,796 A:middle
that they are signed into.

325

326
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

327
00:13:00,336 --> 00:13:03,256 A:middle
And you get that by using the
price locale that you get back

328
00:13:03,256 --> 00:13:04,636 A:middle
from that SKProduct object.

329
00:13:05,306 --> 00:13:09,246 A:middle
Now the second piece to this
puzzle is when you go to create

330
00:13:09,246 --> 00:13:11,636 A:middle
that formatted string by
calling the string for number,

331
00:13:11,706 --> 00:13:15,026 A:middle
is you should pass into
that the price that you get

332
00:13:15,146 --> 00:13:17,476 A:middle
from that SKProduct object.

333
00:13:18,366 --> 00:13:20,896 A:middle
You see that SKProduct object
has everything you need

334
00:13:21,256 --> 00:13:23,866 A:middle
to present this item
perfectly suited

335
00:13:24,096 --> 00:13:25,866 A:middle
for the user no matter
what region

336
00:13:25,866 --> 00:13:26,826 A:middle
or what country they're in.

337
00:13:27,216 --> 00:13:29,496 A:middle
So use it to make sure that
it's the most comfortable

338
00:13:29,496 --> 00:13:31,156 A:middle
and familiar experience
for the user.

339
00:13:32,066 --> 00:13:36,686 A:middle
But really importantly is
this absolutely no need

340
00:13:36,686 --> 00:13:39,896 A:middle
and you definitely should
not be doing any currency

341
00:13:39,896 --> 00:13:40,926 A:middle
conversion yourself.

342
00:13:41,656 --> 00:13:44,066 A:middle
When the user signs into
the store with their account

343
00:13:44,166 --> 00:13:47,576 A:middle
in their region or country, the
App Store is automatically set

344
00:13:47,576 --> 00:13:50,226 A:middle
up to deliver you the pricing
information that is correct

345
00:13:50,356 --> 00:13:51,526 A:middle
for the region they're in.

346
00:13:52,006 --> 00:13:53,626 A:middle
Don't try to convert
currencies yourself.

347
00:13:56,536 --> 00:13:59,296 A:middle
Another thing that I often
see go wrong is how developers

348
00:13:59,296 --> 00:14:04,186 A:middle
handle errors especially during
this really important pre-sales

349

350
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

351
00:13:59,296 --> 00:14:04,186 A:middle
handle errors especially during
this really important pre-sales

352
00:14:04,276 --> 00:14:05,876 A:middle
part where you're making
the pitch to the user

353
00:14:05,876 --> 00:14:06,866 A:middle
about what they want to buy.

354
00:14:08,076 --> 00:14:10,776 A:middle
The important message here is
that not all errors are equal.

355
00:14:11,996 --> 00:14:13,256 A:middle
I really encourage you

356
00:14:13,256 --> 00:14:15,716 A:middle
to checkout either the In-App
Purchase programming guide,

357
00:14:15,716 --> 00:14:17,066 A:middle
or probably even better,

358
00:14:17,066 --> 00:14:19,026 A:middle
the StoreKit framework
reference guide.

359
00:14:19,366 --> 00:14:23,546 A:middle
Because it will have a fairly
small and easily digestible list

360
00:14:23,896 --> 00:14:26,186 A:middle
of error codes that the
framework may vend to you.

361
00:14:26,966 --> 00:14:29,216 A:middle
Now errors can happen at
a lot of different times.

362
00:14:30,256 --> 00:14:32,686 A:middle
And sometimes that error is
something you, the developer,

363
00:14:32,686 --> 00:14:35,846 A:middle
needs to deal with and message
to the customer, but more often

364
00:14:35,846 --> 00:14:39,576 A:middle
than not it's an error message
to just provide you feedback

365
00:14:39,576 --> 00:14:42,276 A:middle
at your apps level of
what happened during

366
00:14:42,276 --> 00:14:43,146 A:middle
that transaction.

367
00:14:43,776 --> 00:14:46,136 A:middle
More likely than not, we've
already told them what happened.

368
00:14:46,736 --> 00:14:48,556 A:middle
We've already presented
the dialogue to the user.

369
00:14:48,556 --> 00:14:50,526 A:middle
We're already trying to take
them through the process

370
00:14:50,526 --> 00:14:52,296 A:middle
of rectifying whatever
might have gone wrong.

371
00:14:53,376 --> 00:14:55,236 A:middle
So make sure you know what
those error codes are.

372
00:14:55,826 --> 00:14:59,726 A:middle
Check what the code is and know
for sure what errors you need

373
00:14:59,726 --> 00:15:03,236 A:middle
to message the user about
and what you can rely

374

375
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

376
00:14:59,726 --> 00:15:03,236 A:middle
to message the user about
and what you can rely

377
00:15:03,236 --> 00:15:05,146 A:middle
on StoreKit having
taken care of for you.

378
00:15:05,626 --> 00:15:08,556 A:middle
And the most popular example
that I see of this and the one

379
00:15:08,556 --> 00:15:11,446 A:middle
that gets me every single time
I use an app that it does this,

380
00:15:12,506 --> 00:15:14,636 A:middle
is when I'm seeing something
I want to buy in your app,

381
00:15:15,366 --> 00:15:17,266 A:middle
tap the Buy button, I'm
all excited about it.

382
00:15:17,856 --> 00:15:20,326 A:middle
Dialogue comes up to sign
into the store or touch ID.

383
00:15:20,746 --> 00:15:22,506 A:middle
I've done that and
then I get the dialogue

384
00:15:22,506 --> 00:15:23,846 A:middle
to confirm my purchase.

385
00:15:24,226 --> 00:15:26,376 A:middle
And maybe for whatever reason
I've got a bit of cold feet

386
00:15:26,376 --> 00:15:27,486 A:middle
and I hit the Cancel button.

387
00:15:28,856 --> 00:15:32,586 A:middle
So many apps I see then follow
that up with a second dialogue

388
00:15:32,586 --> 00:15:35,676 A:middle
that says purchase failed,
you cancelled the transaction.

389
00:15:37,536 --> 00:15:38,906 A:middle
I know I cancelled
the transaction.

390
00:15:39,546 --> 00:15:40,596 A:middle
I cancelled it.

391
00:15:40,656 --> 00:15:43,806 A:middle
Okay? Yes your app got an
NS error back that told you

392
00:15:43,806 --> 00:15:45,156 A:middle
that they cancelled
the transaction,

393
00:15:45,416 --> 00:15:47,896 A:middle
but you really don't need to go
reinforce the point to the user

394
00:15:47,896 --> 00:15:50,206 A:middle
that they got cold feet and
backed out of the transaction.

395
00:15:51,246 --> 00:15:55,046 A:middle
In fact, it can be really
damaging for your, you know,

396
00:15:55,046 --> 00:15:56,166 A:middle
possibility to keep

397
00:15:56,166 --> 00:15:58,186 A:middle
that momentum going
and make that sale.

398
00:15:58,866 --> 00:16:01,186 A:middle
Because if the first time
through a purchase I'm not sure

399

400
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

401
00:15:58,866 --> 00:16:01,186 A:middle
Because if the first time
through a purchase I'm not sure

402
00:16:01,186 --> 00:16:02,726 A:middle
about it and I decide
to back out,

403
00:16:03,446 --> 00:16:06,096 A:middle
if my experience there wasn't
great, then I'll tell you what,

404
00:16:06,096 --> 00:16:09,346 A:middle
I'm really not convinced that
I should be spending my money

405
00:16:09,346 --> 00:16:11,096 A:middle
on this app if they
can't make a good job

406
00:16:11,326 --> 00:16:14,966 A:middle
of letting me back
out of a purchase.

407
00:16:15,966 --> 00:16:17,146 A:middle
So just being aware of that.

408
00:16:17,146 --> 00:16:19,876 A:middle
It's one of a really good
example of where it's important

409
00:16:19,876 --> 00:16:21,776 A:middle
to know exactly what
these error codes mean.

410
00:16:23,346 --> 00:16:25,286 A:middle
Wherever possible just let us --

411
00:16:25,286 --> 00:16:27,186 A:middle
let StockKit handle
the transaction flow

412
00:16:27,186 --> 00:16:28,026 A:middle
as much as possible.

413
00:16:29,716 --> 00:16:31,836 A:middle
We see an increasing
number of apps starting

414
00:16:31,836 --> 00:16:34,096 A:middle
to introduce dialogs
and messaging ahead

415
00:16:34,096 --> 00:16:35,306 A:middle
of the In-App Purchase flow.

416
00:16:35,826 --> 00:16:37,466 A:middle
If that's something
you feel you need to.

417
00:16:37,716 --> 00:16:40,106 A:middle
That's fine but I'd
strongly encourage you

418
00:16:40,106 --> 00:16:43,286 A:middle
to come along tomorrow to a
session given my Chris Espinosa

419
00:16:43,616 --> 00:16:45,806 A:middle
at 3:15 about apps and kids.

420
00:16:46,226 --> 00:16:48,456 A:middle
It has some really good
tips there about how

421
00:16:48,456 --> 00:16:49,956 A:middle
to handle this sort
of interaction.

422
00:16:52,656 --> 00:16:54,656 A:middle
So now let's move on
to making the purchase.

423
00:16:55,656 --> 00:16:57,306 A:middle
You have done a great job

424
00:16:57,306 --> 00:17:00,056 A:middle
of showing this glorious
In-App Purchase UI to the user.

425

426
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

427
00:16:57,306 --> 00:17:00,056 A:middle
of showing this glorious
In-App Purchase UI to the user.

428
00:17:00,246 --> 00:17:02,336 A:middle
It was perfectly presented
to them, no rough edges,

429
00:17:02,336 --> 00:17:03,486 A:middle
no silly error messages.

430
00:17:03,906 --> 00:17:06,026 A:middle
They've tapped the Buy button
and they want to move forward.

431
00:17:06,955 --> 00:17:12,116 A:middle
So when you go and make that
purchase, this is when you start

432
00:17:12,116 --> 00:17:13,935 A:middle
to really get into
using StoreKit.

433
00:17:14,935 --> 00:17:20,126 A:middle
StoreKit revolves around and is
centered around a payment queue.

434
00:17:20,536 --> 00:17:22,945 A:middle
And the most important
thing you've got to do

435
00:17:22,945 --> 00:17:26,026 A:middle
with that payment queue
is observe it always.

436
00:17:27,326 --> 00:17:29,706 A:middle
The payment queue is where
you'll get all information

437
00:17:29,706 --> 00:17:31,526 A:middle
about how a transaction
is progressing,

438
00:17:32,276 --> 00:17:34,356 A:middle
whether it was purchased
or failed, whether it's

439
00:17:34,356 --> 00:17:36,446 A:middle
in progress, whether
it's deferred.

440
00:17:36,446 --> 00:17:37,386 A:middle
You'll also get information

441
00:17:37,386 --> 00:17:39,246 A:middle
about restored transactions,
etcetera.

442
00:17:40,066 --> 00:17:43,306 A:middle
It should be the center of your
In-App Purchase implementation

443
00:17:43,816 --> 00:17:46,606 A:middle
and it's the only
source of truth for state

444
00:17:46,606 --> 00:17:48,226 A:middle
about transactions
as they occur.

445
00:17:48,616 --> 00:17:52,596 A:middle
There's absolutely no need
for you as a developer to try

446
00:17:52,596 --> 00:17:55,356 A:middle
and integrate some sort of
complicated state machine,

447
00:17:55,356 --> 00:17:58,366 A:middle
or caching of state about
transactions that are in place,

448
00:17:59,216 --> 00:18:03,136 A:middle
because you can get all of that
from the payment queue itself.

449

450
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

451
00:17:59,216 --> 00:18:03,136 A:middle
because you can get all of that
from the payment queue itself.

452
00:18:03,706 --> 00:18:05,776 A:middle
You can get transactions
that are in progress.

453
00:18:06,056 --> 00:18:09,326 A:middle
You can know about the status of
a transaction as it progresses.

454
00:18:09,966 --> 00:18:12,376 A:middle
And if you're hosting In-App
Purchases with it, the queue is

455
00:18:12,376 --> 00:18:14,816 A:middle
where you'll also get that
download status information.

456
00:18:14,906 --> 00:18:20,026 A:middle
I think one of the most common
reasons I see developers attempt

457
00:18:20,026 --> 00:18:24,056 A:middle
to tack on a side cache of
state about In-App Purchases,

458
00:18:24,406 --> 00:18:27,206 A:middle
rather than just holy and
solely trusting the queue is

459
00:18:27,666 --> 00:18:30,826 A:middle
because they feel that in
order to update UI elements,

460
00:18:31,256 --> 00:18:33,566 A:middle
and you know, communicate
the progress

461
00:18:33,566 --> 00:18:35,966 A:middle
of the In-App Purchase flow
through the app that they need

462
00:18:35,966 --> 00:18:39,156 A:middle
to somehow stash that
payment object away or try

463
00:18:39,156 --> 00:18:42,716 A:middle
and tack some extra state on to
it somehow so that they can keep

464
00:18:42,716 --> 00:18:44,846 A:middle
that UI up-to-date
and congruous,

465
00:18:45,156 --> 00:18:48,586 A:middle
but in fact that's not true.

466
00:18:48,586 --> 00:18:50,146 A:middle
And we will see in one
of the examples I'm going

467
00:18:50,146 --> 00:18:51,646 A:middle
to give you how you
can harness the queue

468
00:18:51,886 --> 00:18:55,416 A:middle
and trust only the queue
and still achieve all that.

469
00:18:56,696 --> 00:18:59,056 A:middle
But just as you've got to
rely on the payment queue

470
00:18:59,056 --> 00:19:01,946 A:middle
for all those updates and all
those pieces of information,

471

472
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

473
00:18:59,056 --> 00:19:01,946 A:middle
for all those updates and all
those pieces of information,

474
00:19:02,666 --> 00:19:05,536 A:middle
you also need to be aware
that any and all transactions

475
00:19:05,536 --> 00:19:08,286 A:middle
that appear in the queue
are real and valid.

476
00:19:09,586 --> 00:19:13,106 A:middle
Just because your app didn't
start a payment or your --

477
00:19:13,106 --> 00:19:15,376 A:middle
the running instance of your
app didn't start a payment

478
00:19:15,536 --> 00:19:18,526 A:middle
or for whatever reason
you don't think

479
00:19:18,526 --> 00:19:20,556 A:middle
for some reason this
transaction is valid,

480
00:19:21,466 --> 00:19:23,356 A:middle
then you are likely
leaving your customers

481
00:19:23,356 --> 00:19:25,586 A:middle
out from a real monetary
transaction

482
00:19:25,676 --> 00:19:26,676 A:middle
that has taken place.

483
00:19:27,596 --> 00:19:30,016 A:middle
So make sure you trust
the queue completely.

484
00:19:30,456 --> 00:19:32,236 A:middle
Any and all transactions
that you see in there,

485
00:19:32,236 --> 00:19:34,916 A:middle
any and all updates you
see are real and valid.

486
00:19:35,256 --> 00:19:37,096 A:middle
Now if you're concerned
about how to ensure

487
00:19:37,096 --> 00:19:38,636 A:middle
that they are not
an unauthorized

488
00:19:39,086 --> 00:19:41,936 A:middle
or a fraudulent transaction,
that's a different matter.

489
00:19:42,656 --> 00:19:45,106 A:middle
Please come along on
Friday morning at 10:15,

490
00:19:45,106 --> 00:19:45,886 A:middle
I'm doing a session

491
00:19:45,886 --> 00:19:48,706 A:middle
about preventing unauthorized
transactions using receipts

492
00:19:49,036 --> 00:19:51,516 A:middle
and you'll see that it's the
receipt that holds that source

493
00:19:51,516 --> 00:19:54,276 A:middle
of truth about whether
something was a real valid,

494
00:19:54,356 --> 00:19:55,386 A:middle
monetary transaction.

495
00:19:56,246 --> 00:19:57,416 A:middle
But otherwise for all intents

496
00:19:57,416 --> 00:19:58,976 A:middle
and purposes, we
trust the queue.

497

498
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

499
00:20:00,056 --> 00:20:02,146 A:middle
And how do we do that?

500
00:20:02,316 --> 00:20:04,786 A:middle
On launch, as soon as possible,

501
00:20:04,786 --> 00:20:06,966 A:middle
ideally in your application
deep finish launching,

502
00:20:07,356 --> 00:20:09,686 A:middle
you should be calling
SKPaymetQueue

503
00:20:09,686 --> 00:20:11,026 A:middle
addTransactionObserver.

504
00:20:12,186 --> 00:20:14,946 A:middle
The object you add in there will
be your object that conforms

505
00:20:14,946 --> 00:20:18,236 A:middle
to the SKPaymentQueue observer
protocol and that's your object

506
00:20:18,236 --> 00:20:21,466 A:middle
that forms the center of your
In-App Purchase implementation.

507
00:20:21,906 --> 00:20:23,386 A:middle
It's going to receive
all the updates

508
00:20:23,386 --> 00:20:25,186 A:middle
about how payments are
progressing in the queue

509
00:20:25,256 --> 00:20:27,826 A:middle
and it's how you can handle
everything from dealing

510
00:20:27,826 --> 00:20:30,366 A:middle
with errors, to updating
UI, etcetera.

511
00:20:30,456 --> 00:20:34,866 A:middle
So I'm going to walk you
through a quick example here.

512
00:20:35,936 --> 00:20:38,186 A:middle
Not so much because you need
to get this beginner sort

513
00:20:38,186 --> 00:20:39,886 A:middle
of level information,
but because I want

514
00:20:40,046 --> 00:20:41,146 A:middle
to show you how it leads

515
00:20:41,146 --> 00:20:43,606 A:middle
into a really bad design
pattern and why that's wrong.

516
00:20:43,836 --> 00:20:46,326 A:middle
First thing we've got to do is

517
00:20:46,326 --> 00:20:50,046 A:middle
of course we make this call
making to SKProduct request

518
00:20:50,436 --> 00:20:52,756 A:middle
to get information about the
products we want to sell.

519
00:20:53,946 --> 00:20:57,346 A:middle
Now once we've done that and we
set our delegate and call start,

520
00:20:57,786 --> 00:20:59,726 A:middle
we're going to get that
product information back.

521
00:20:59,726 --> 00:21:01,926 A:middle
We're going to get a bunch
of SKProduct objects.

522

523
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

524
00:20:59,726 --> 00:21:01,926 A:middle
We're going to get a bunch
of SKProduct objects.

525
00:21:02,506 --> 00:21:05,056 A:middle
When the user taps the Buy
button and wants to end

526
00:21:05,056 --> 00:21:09,366 A:middle
that purchase flow, we
take that SKProduct object,

527
00:21:09,466 --> 00:21:11,376 A:middle
and we transform
it into a payment

528
00:21:11,866 --> 00:21:13,856 A:middle
by calling SKPayment
payment with product.

529
00:21:14,696 --> 00:21:17,736 A:middle
One little thing to note here
is I've heard some feedback

530
00:21:17,736 --> 00:21:20,356 A:middle
from DTS in particular is
that they've seen a lot

531
00:21:20,356 --> 00:21:23,736 A:middle
of developers try and handcraft
their own SKProduct objects

532
00:21:24,176 --> 00:21:25,226 A:middle
to create the payment with.

533
00:21:25,816 --> 00:21:27,546 A:middle
That's totally not
the right thing to do.

534
00:21:28,146 --> 00:21:30,096 A:middle
What you need to do is
get your identifiers

535
00:21:30,096 --> 00:21:30,956 A:middle
of what you want to sell.

536
00:21:31,466 --> 00:21:34,376 A:middle
Use SKProduct request to get
that localized information

537
00:21:34,376 --> 00:21:35,836 A:middle
and the SKProduct objects.

538
00:21:36,386 --> 00:21:41,116 A:middle
Then you hand those SKProduct
objects into SKPayment

539
00:21:41,116 --> 00:21:42,096 A:middle
to get the payment object.

540
00:21:42,476 --> 00:21:43,616 A:middle
Don't try to craft your own.

541
00:21:43,616 --> 00:21:46,026 A:middle
You've got to use those
real live SKProduct objects.

542
00:21:47,266 --> 00:21:50,566 A:middle
So the first step was that
we call SKPayment payment

543
00:21:50,636 --> 00:21:51,186 A:middle
with product.

544
00:21:52,016 --> 00:21:54,396 A:middle
The next step is we take
that payment and we add it

545
00:21:54,396 --> 00:21:56,476 A:middle
into our payment queue
to start that process.

546
00:21:58,006 --> 00:22:02,716 A:middle
It's very, very deliberate that
there is no step three here.

547

548
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

549
00:21:58,006 --> 00:22:02,716 A:middle
It's very, very deliberate that
there is no step three here.

550
00:22:03,436 --> 00:22:06,816 A:middle
Because at this point in time
you are completely hands-off

551
00:22:06,816 --> 00:22:09,696 A:middle
and you should step back and let
StoreKit handle this transaction

552
00:22:09,696 --> 00:22:10,076 A:middle
for you.

553
00:22:12,216 --> 00:22:14,106 A:middle
In fact the transaction
will take on a life

554
00:22:14,106 --> 00:22:16,216 A:middle
of its own completely
outside of your app.

555
00:22:16,496 --> 00:22:19,476 A:middle
StoreKit and its background
processes will handle the actual

556
00:22:19,476 --> 00:22:21,876 A:middle
purchasing process, the
dialogues, and the sign

557
00:22:21,876 --> 00:22:24,046 A:middle
in with the user
outside of your app.

558
00:22:24,866 --> 00:22:28,456 A:middle
That means that payment takes
on a life outside of your app,

559
00:22:28,456 --> 00:22:33,236 A:middle
even if your app crashes,
even if your app is quit,

560
00:22:33,786 --> 00:22:37,116 A:middle
or other circumstances
that cause a long delay

561
00:22:37,116 --> 00:22:40,856 A:middle
in that payment process
transacting, it will continue

562
00:22:40,856 --> 00:22:43,076 A:middle
to happen even if your
app's not running.

563
00:22:43,686 --> 00:22:47,946 A:middle
So what we need to do is
we've got to handle the events

564
00:22:47,946 --> 00:22:50,436 A:middle
from the queue to know
where this payment is at.

565
00:22:51,556 --> 00:22:54,506 A:middle
The most important
SKPaymentQueue observer method

566
00:22:54,736 --> 00:22:57,646 A:middle
to implement is payment
queue updated transactions.

567
00:22:58,166 --> 00:23:00,696 A:middle
This is what gets called
every time a payment starts

568

569
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

570
00:22:58,166 --> 00:23:00,696 A:middle
This is what gets called
every time a payment starts

571
00:23:00,696 --> 00:23:02,006 A:middle
progressing through the process

572
00:23:02,006 --> 00:23:05,026 A:middle
of becoming an actual In-App
Purchase that is made.

573
00:23:06,586 --> 00:23:08,556 A:middle
And we can implement
this like this.

574
00:23:09,326 --> 00:23:11,306 A:middle
So here I've got a full
loop that loops over each

575
00:23:11,306 --> 00:23:13,536 A:middle
of those transactions that
I'm receiving an update for,

576
00:23:14,076 --> 00:23:16,376 A:middle
and for each transaction I
set up a switch statement

577
00:23:16,376 --> 00:23:17,866 A:middle
because I want to
particularly know

578
00:23:18,226 --> 00:23:20,026 A:middle
which state this
transaction is in.

579
00:23:20,916 --> 00:23:23,906 A:middle
Then I can do things like
looking for the state

580
00:23:23,906 --> 00:23:26,296 A:middle
of SKPayment transaction
purchased.

581
00:23:26,716 --> 00:23:28,466 A:middle
That means the purchase
has completed

582
00:23:28,466 --> 00:23:29,786 A:middle
and I can unlock
features and content.

583
00:23:29,786 --> 00:23:31,986 A:middle
I can go ahead and
check the receipt,

584
00:23:32,266 --> 00:23:34,296 A:middle
make sure it's a real
monetary transaction,

585
00:23:34,296 --> 00:23:35,716 A:middle
not a fraudulent
one that's occurred

586
00:23:35,966 --> 00:23:38,456 A:middle
and then unlock those features
and content accordingly.

587
00:23:39,926 --> 00:23:45,366 A:middle
But don't do this.

588
00:23:45,576 --> 00:23:48,106 A:middle
Don't set up that pay
statement to look for the state

589
00:23:48,106 --> 00:23:51,316 A:middle
of purchased and then try
and find a matching payment

590
00:23:51,316 --> 00:23:54,346 A:middle
in some side cache that
you've got of payments

591
00:23:54,346 --> 00:23:55,806 A:middle
that you thought
were in progress.

592
00:23:56,826 --> 00:23:59,396 A:middle
Because once you've created that
payment object and thrown it

593
00:23:59,396 --> 00:24:00,996 A:middle
in the payment queue
to start the process,

594

595
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

596
00:23:59,396 --> 00:24:00,996 A:middle
in the payment queue
to start the process,

597
00:24:01,446 --> 00:24:03,076 A:middle
that object should
be dead to you.

598
00:24:03,076 --> 00:24:03,986 A:middle
You should forget about it.

599
00:24:04,876 --> 00:24:06,716 A:middle
You'll get information
about those payments

600
00:24:06,716 --> 00:24:08,296 A:middle
and those transactions
through the queue.

601
00:24:09,706 --> 00:24:12,756 A:middle
So if you did something
like this and tried to fetch

602
00:24:12,756 --> 00:24:14,926 A:middle
that payment out of some cache
that you were maintaining

603
00:24:14,926 --> 00:24:18,336 A:middle
of what you thought was in
progress, and then even worse,

604
00:24:18,936 --> 00:24:21,096 A:middle
did something like
this and said, "Huh?'

605
00:24:21,096 --> 00:24:24,226 A:middle
"I don't know this payment, I've
got no idea where it comes from.

606
00:24:24,266 --> 00:24:26,236 A:middle
I'm just going to ignore
it and skip over it."

607
00:24:27,746 --> 00:24:29,736 A:middle
You will have left
the customer out here.

608
00:24:30,076 --> 00:24:32,646 A:middle
Okay. If something
arrives in the queue,

609
00:24:32,646 --> 00:24:34,776 A:middle
it's because someone
bought something.

610
00:24:35,396 --> 00:24:37,766 A:middle
Even if you don't think it
originated from your app,

611
00:24:38,146 --> 00:24:40,876 A:middle
or the running instance of your
app, there's lots of reasons

612
00:24:40,876 --> 00:24:43,956 A:middle
of why a transaction can
suddenly appear in the queue.

613
00:24:44,266 --> 00:24:45,076 A:middle
They're always real.

614
00:24:45,076 --> 00:24:45,886 A:middle
They're always valid.

615
00:24:45,986 --> 00:24:48,126 A:middle
You should process them.

616
00:24:50,236 --> 00:24:51,166 A:middle
So why not?

617
00:24:51,226 --> 00:24:52,206 A:middle
Why wouldn't we do that?

618
00:24:52,546 --> 00:24:53,946 A:middle
Because what if your
app crashes?

619
00:24:54,336 --> 00:24:56,396 A:middle
Obviously then you've lost
your cache of information.

620
00:24:56,566 --> 00:24:59,486 A:middle
And not only will the user have
to endure a crash in your app,

621

622
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

623
00:25:00,016 --> 00:25:01,196 A:middle
but next time when they launch

624
00:25:01,196 --> 00:25:03,176 A:middle
if you then ignore the
subsequent update you get

625
00:25:03,176 --> 00:25:06,106 A:middle
about the payment, then not only
have they put up with a crash,

626
00:25:06,446 --> 00:25:11,416 A:middle
they've missed out on
what you've sold them.

627
00:25:11,636 --> 00:25:12,456 A:middle
It's just as valid.

628
00:25:12,996 --> 00:25:14,686 A:middle
Always process those
transactions.

629
00:25:15,236 --> 00:25:18,836 A:middle
Now, getting back to what
we talked about before.

630
00:25:18,836 --> 00:25:22,356 A:middle
This new state of the
SKPayment transaction deferred.

631
00:25:23,316 --> 00:25:24,846 A:middle
Here's an example
of how to handle

632
00:25:25,296 --> 00:25:26,736 A:middle
that transaction being deferred.

633
00:25:26,996 --> 00:25:30,026 A:middle
So remember in this
state, a child that's part

634
00:25:30,026 --> 00:25:33,136 A:middle
of a family sharing unit
has asked permission

635
00:25:33,136 --> 00:25:34,306 A:middle
to buy something in your app.

636
00:25:34,306 --> 00:25:36,196 A:middle
And the transaction has moved

637
00:25:36,196 --> 00:25:39,086 A:middle
from SKPayment state
purchasing to deferred.

638
00:25:40,386 --> 00:25:42,556 A:middle
Now when you see
that status come

639
00:25:42,556 --> 00:25:45,186 A:middle
through as SKPaymentTransaction
StateDeferred,

640
00:25:45,996 --> 00:25:47,026 A:middle
here's what you should do.

641
00:25:48,086 --> 00:25:51,316 A:middle
There's three important things
that we'd really encourage you

642
00:25:51,316 --> 00:25:53,866 A:middle
as developers to do in your
handling of this situation.

643
00:25:54,656 --> 00:25:57,606 A:middle
The first is allow the
user to keep using the app.

644
00:25:58,286 --> 00:26:00,986 A:middle
It would be an absolute
buzz-kill for the kids

645

646
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

647
00:25:58,286 --> 00:26:00,986 A:middle
It would be an absolute
buzz-kill for the kids

648
00:26:01,536 --> 00:26:04,516 A:middle
if they are sitting there in
the app, absolutely delighted

649
00:26:04,516 --> 00:26:07,836 A:middle
about the possibility that
mom or dad might just say yes

650
00:26:07,936 --> 00:26:09,196 A:middle
to this purchase
they've asked for,

651
00:26:09,196 --> 00:26:12,146 A:middle
but all the while they
have to sit there waiting.

652
00:26:12,466 --> 00:26:13,466 A:middle
Spinners up.

653
00:26:13,616 --> 00:26:14,906 A:middle
Waiting for permission.

654
00:26:15,216 --> 00:26:16,456 A:middle
They're going to quit.

655
00:26:16,456 --> 00:26:18,146 A:middle
They're going to
go to another app.

656
00:26:18,196 --> 00:26:18,906 A:middle
You're going to lose them.

657
00:26:19,666 --> 00:26:22,316 A:middle
Okay. Make sure they can keep
using the app in some way.

658
00:26:23,316 --> 00:26:25,466 A:middle
Because it may be
some time before

659
00:26:25,466 --> 00:26:26,786 A:middle
that transaction is updated.

660
00:26:27,376 --> 00:26:29,586 A:middle
It could be up to 24
hours before the approval

661
00:26:29,586 --> 00:26:31,456 A:middle
or decline comes
through from the parents.

662
00:26:33,406 --> 00:26:36,566 A:middle
So really don't get them stuck
in that modal purchasing state

663
00:26:36,566 --> 00:26:38,576 A:middle
where they can't do
anything with your app.

664
00:26:38,636 --> 00:26:40,256 A:middle
In fact one way to think

665
00:26:40,256 --> 00:26:43,056 A:middle
of it is you've got a
very captive audience

666
00:26:43,056 --> 00:26:43,936 A:middle
at this point in time.

667
00:26:44,226 --> 00:26:45,946 A:middle
Someone wants something
in your app

668
00:26:45,946 --> 00:26:47,546 A:middle
and they're waiting
for approval for it.

669
00:26:48,406 --> 00:26:49,366 A:middle
Make use of that time.

670
00:26:49,906 --> 00:26:57,406 A:middle
But at the end of any
transaction you perform

671
00:26:57,406 --> 00:26:59,716 A:middle
with StoreKit, whether it
gets purchased or failed.

672

673
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

674
00:27:00,086 --> 00:27:04,286 A:middle
You always must call
FinishTransaction.

675
00:27:05,556 --> 00:27:08,356 A:middle
When you call FinishTransaction
that tells the App Store

676
00:27:08,356 --> 00:27:09,786 A:middle
that you're done with
this transaction.

677
00:27:09,876 --> 00:27:11,506 A:middle
You've seen it, you've
processed it,

678
00:27:11,666 --> 00:27:13,066 A:middle
you don't need to see it again.

679
00:27:13,666 --> 00:27:16,406 A:middle
It removes it from the
queue and then it makes sure

680
00:27:16,406 --> 00:27:19,436 A:middle
that we don't keep calling the
Updated Transaction Method each

681
00:27:19,436 --> 00:27:23,016 A:middle
time on launch or at other
points when your app is running.

682
00:27:23,786 --> 00:27:28,066 A:middle
Now this is most common cause
that I see for bad app behavior

683
00:27:28,066 --> 00:27:32,316 A:middle
on launch, especially things
like really slow launch time,

684
00:27:32,986 --> 00:27:34,526 A:middle
or a launch time
where it launches,

685
00:27:34,526 --> 00:27:36,116 A:middle
then it's hanging
there for a while.

686
00:27:36,706 --> 00:27:39,396 A:middle
Or worst of all when the app
launches and I'm presented

687
00:27:39,396 --> 00:27:41,706 A:middle
with a series of dialogues that
just don't make sense to me

688
00:27:42,496 --> 00:27:45,946 A:middle
because in fact what's happening
is because you didn't remove

689
00:27:45,946 --> 00:27:50,906 A:middle
that transaction from the queue,
when your app launches we get --

690
00:27:50,906 --> 00:27:53,086 A:middle
and you add that
transaction queue observer

691
00:27:53,086 --> 00:27:56,206 A:middle
in the first thing we do is
go and look at the history

692
00:27:56,286 --> 00:27:57,796 A:middle
of transactions that
are still pending

693
00:27:57,796 --> 00:27:59,816 A:middle
and haven't had Transaction
Finished called on them,

694

695
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

696
00:28:00,246 --> 00:28:02,466 A:middle
and we'll go and
replay all those update

697
00:28:02,466 --> 00:28:03,496 A:middle
through to your app.

698
00:28:04,276 --> 00:28:07,066 A:middle
So if you then start
processing them and have reason

699
00:28:07,066 --> 00:28:09,246 A:middle
to message something to
the user and still fail

700
00:28:09,246 --> 00:28:10,516 A:middle
to call FinishTransaction

701
00:28:10,516 --> 00:28:14,726 A:middle
that means every single
time your app launches,

702
00:28:15,236 --> 00:28:16,816 A:middle
it's going to go
through this process.

703
00:28:17,696 --> 00:28:19,296 A:middle
It's a bad user experience
and it's one

704
00:28:19,296 --> 00:28:22,076 A:middle
that gets worse the more
the user uses your app.

705
00:28:22,466 --> 00:28:24,326 A:middle
So always call FinishTransaction

706
00:28:24,646 --> 00:28:26,066 A:middle
to get those items
out of the queue.

707
00:28:27,336 --> 00:28:31,476 A:middle
Two tips about the
SKPaymentQueue object itself.

708
00:28:31,956 --> 00:28:34,006 A:middle
One is going back to this notion

709
00:28:34,006 --> 00:28:36,436 A:middle
that the SKPaymentQueue is
your single source of truth.

710
00:28:37,036 --> 00:28:39,156 A:middle
It has a property on
it called transactions.

711
00:28:39,616 --> 00:28:42,866 A:middle
And you can call that property
and get the list of transactions

712
00:28:42,866 --> 00:28:43,886 A:middle
that are currently inflight.

713
00:28:44,566 --> 00:28:47,216 A:middle
So for example, if
you wanted to --

714
00:28:47,416 --> 00:28:49,646 A:middle
when you show your In-App
Purchase UI make sure

715
00:28:49,646 --> 00:28:52,416 A:middle
that you correctly
represented any items

716
00:28:52,416 --> 00:28:53,426 A:middle
that are still purchasing.

717
00:28:54,046 --> 00:28:55,916 A:middle
You could call transactions
to get the list

718
00:28:56,106 --> 00:28:57,366 A:middle
of payments in progress.

719
00:28:58,056 --> 00:29:00,846 A:middle
As opposed to trying to track
that state yourself on the side.

720

721
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

722
00:28:58,056 --> 00:29:00,846 A:middle
As opposed to trying to track
that state yourself on the side.

723
00:29:01,856 --> 00:29:04,526 A:middle
The other one is keep in mind

724
00:29:04,526 --> 00:29:07,166 A:middle
that in-app purchasing can
be disabled on the device.

725
00:29:07,816 --> 00:29:10,766 A:middle
And it's a really bad experience
for the user if they're enticed

726
00:29:10,986 --> 00:29:13,806 A:middle
to play your game or use
your app enough to want

727
00:29:13,806 --> 00:29:16,356 A:middle
to make an In-App
Purchase then only to find

728
00:29:16,356 --> 00:29:17,926 A:middle
that they get some error
message telling them

729
00:29:17,926 --> 00:29:18,966 A:middle
that that's been disabled.

730
00:29:20,136 --> 00:29:22,146 A:middle
So you can call it
can make payments

731
00:29:22,496 --> 00:29:25,096 A:middle
on SKPyament queue it's a class
method for returning a BOOL

732
00:29:25,096 --> 00:29:28,726 A:middle
to know whether or not In-App
Purchase can actually be made.

733
00:29:28,726 --> 00:29:33,866 A:middle
Now I want to give you a
quick demo of a few things

734
00:29:33,866 --> 00:29:34,806 A:middle
that we've just talked about.

735
00:29:44,646 --> 00:29:49,166 A:middle
Okay. I have here a very,
very simple app for OS X

736
00:29:49,166 --> 00:29:50,986 A:middle
that does an In-App Purchase.

737
00:29:51,756 --> 00:29:53,216 A:middle
Everything I talk
about in this session,

738
00:29:53,216 --> 00:29:55,976 A:middle
including this demo applies
equally to iOS and OS X.

739
00:29:56,396 --> 00:29:58,386 A:middle
StoreKit is the same
on both platforms.

740
00:29:58,576 --> 00:30:00,976 A:middle
But in this app a few
things to call out.

741

742
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

743
00:29:58,576 --> 00:30:00,976 A:middle
But in this app a few
things to call out.

744
00:30:01,166 --> 00:30:03,446 A:middle
In my application
deep finish launching,

745
00:30:03,976 --> 00:30:06,436 A:middle
first thing I'm doing
is I'm adding an object

746
00:30:06,436 --> 00:30:07,616 A:middle
in to observe the queue.

747
00:30:09,156 --> 00:30:12,386 A:middle
And down here you'll see I will
have implemented my payment

748
00:30:12,426 --> 00:30:14,196 A:middle
queue updated transaction
method.

749
00:30:15,066 --> 00:30:18,076 A:middle
It's in here that I start
inspecting and dealing

750
00:30:18,076 --> 00:30:19,356 A:middle
with all those events
that happen

751
00:30:19,716 --> 00:30:21,926 A:middle
as purchases progress
through the queue.

752
00:30:22,426 --> 00:30:24,786 A:middle
I deal with things like
entering the purchasing state,

753
00:30:24,786 --> 00:30:28,116 A:middle
when things first start,
when it gets purchased,

754
00:30:28,536 --> 00:30:29,696 A:middle
where it's failed or restored.

755
00:30:29,696 --> 00:30:33,226 A:middle
So for the sake of this demo,

756
00:30:33,226 --> 00:30:36,106 A:middle
I'm going to run my
really, really simple app.

757
00:30:36,486 --> 00:30:39,086 A:middle
All it does is it sells
a .99 cent banana via an

758
00:30:39,086 --> 00:30:39,816 A:middle
In-App Purchase.

759
00:30:40,116 --> 00:30:40,926 A:middle
Really exciting.

760
00:30:41,166 --> 00:30:43,396 A:middle
I'm going to go ahead
and purchase that.

761
00:30:44,516 --> 00:30:46,276 A:middle
Now as soon as I hit
the Purchase button,

762
00:30:47,076 --> 00:30:48,746 A:middle
before any other
user interaction,

763
00:30:49,056 --> 00:30:52,196 A:middle
I straightaway my
breakpoint was hit that I set

764
00:30:52,456 --> 00:30:54,796 A:middle
in my payment queue
updated transactions method.

765
00:30:55,906 --> 00:30:57,256 A:middle
So that's really
important to know,

766
00:30:57,256 --> 00:31:00,236 A:middle
because if you were thinking you
had to track UI state yourself,

767

768
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

769
00:30:57,256 --> 00:31:00,236 A:middle
because if you were thinking you
had to track UI state yourself,

770
00:31:00,746 --> 00:31:01,886 A:middle
this demonstrates you don't.

771
00:31:02,276 --> 00:31:04,006 A:middle
As soon as that button
was clicked -- bang.

772
00:31:04,496 --> 00:31:07,056 A:middle
We're into the payment queue and
observing an event occurring.

773
00:31:07,646 --> 00:31:10,396 A:middle
And in fact the event that
we're observing is the fact

774
00:31:10,396 --> 00:31:13,696 A:middle
that this payment or this
transaction has entered the

775
00:31:13,696 --> 00:31:14,886 A:middle
state of purchasing.

776
00:31:15,306 --> 00:31:17,296 A:middle
So this would be a time when I
could go and update the state

777
00:31:17,296 --> 00:31:21,026 A:middle
of my Buy buttons whatever else
I need to do to inform the user

778
00:31:21,026 --> 00:31:23,056 A:middle
that yes this transaction
is underway.

779
00:31:23,156 --> 00:31:25,276 A:middle
I'm going to take that
breakpoint out because

780
00:31:25,276 --> 00:31:26,166 A:middle
that can get a big noisy.

781
00:31:26,166 --> 00:31:28,466 A:middle
But let's let the app continue
and see what happens here.

782
00:31:29,356 --> 00:31:31,156 A:middle
So I've been prompted
to sign in.

783
00:31:31,866 --> 00:31:34,396 A:middle
Now one thing to note is
because this is a test app,

784
00:31:34,966 --> 00:31:38,216 A:middle
I'm using the App
Store test environment.

785
00:31:38,756 --> 00:31:40,416 A:middle
That is I have my app signed

786
00:31:40,786 --> 00:31:42,956 A:middle
with my development
certificate as we see here.

787
00:31:44,276 --> 00:31:45,506 A:middle
Scroll down to the code sign.

788
00:31:45,506 --> 00:31:47,666 A:middle
Sometimes it's easy to just
search here for code signing.

789
00:31:48,656 --> 00:31:51,946 A:middle
Of course you need to
set it all and combine.

790
00:31:54,036 --> 00:31:56,336 A:middle
See here my code
signing identity is set

791
00:31:56,336 --> 00:31:57,286 A:middle
to Mac developer.

792
00:31:58,006 --> 00:32:01,256 A:middle
This makes sure that my app is
development-signed when it runs.

793

794
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

795
00:31:58,006 --> 00:32:01,256 A:middle
This makes sure that my app is
development-signed when it runs.

796
00:32:01,256 --> 00:32:03,346 A:middle
That means that when we
start using StoreKit,

797
00:32:03,626 --> 00:32:05,646 A:middle
StoreKit can inspect
our code signature --

798
00:32:05,646 --> 00:32:08,376 A:middle
the code signature of
this app and it can know

799
00:32:08,376 --> 00:32:10,516 A:middle
that because it's
development-signed it needs

800
00:32:10,516 --> 00:32:13,486 A:middle
to talk to the test environment,
not the production App store.

801
00:32:13,866 --> 00:32:16,316 A:middle
And that allows us to test our
In-App Purchase implementation

802
00:32:16,316 --> 00:32:17,856 A:middle
before we have anything
on the store.

803
00:32:17,856 --> 00:32:21,406 A:middle
So I'm going to go ahead
here and enter my password.

804
00:32:23,416 --> 00:32:24,296 A:middle
Cool, yep.

805
00:32:24,296 --> 00:32:27,356 A:middle
I definitely want
to buy this banana.

806
00:32:27,446 --> 00:32:28,706 A:middle
And I've already purchased it.

807
00:32:29,066 --> 00:32:30,336 A:middle
I've done this demo
a few times now.

808
00:32:31,336 --> 00:32:34,406 A:middle
And see here when we
get the final thank you

809
00:32:34,406 --> 00:32:36,736 A:middle
through form StoreKit
and from the App store,

810
00:32:37,166 --> 00:32:39,136 A:middle
we're already back
in in our app,

811
00:32:39,276 --> 00:32:40,636 A:middle
we've got our breakpoint fired

812
00:32:40,916 --> 00:32:43,906 A:middle
in the SKPayment
transaction state purchased.

813
00:32:44,766 --> 00:32:47,236 A:middle
This is where we can then go
ahead and inspect what it was

814
00:32:47,236 --> 00:32:49,986 A:middle
that was bought by looking at
the receipt, unlocking features

815
00:32:49,986 --> 00:32:52,766 A:middle
and content, and then whatever
else we need to do based

816
00:32:52,766 --> 00:32:54,106 A:middle
on this purchase
having occurred.

817
00:32:56,556 --> 00:33:00,496 A:middle
But right now, at this point
because of the breakpoint,

818

819
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

820
00:32:56,556 --> 00:33:00,496 A:middle
But right now, at this point
because of the breakpoint,

821
00:33:01,336 --> 00:33:02,566 A:middle
notice that I have not

822
00:33:02,656 --> 00:33:07,086 A:middle
yet called FinishTransaction
I've made breakpoint right

823
00:33:07,086 --> 00:33:08,176 A:middle
at the point when
I would normally go

824
00:33:08,176 --> 00:33:10,046 A:middle
and check the receipt
to know what they bought

825
00:33:10,936 --> 00:33:12,996 A:middle
and unlock those features
and content accordingly.

826
00:33:14,276 --> 00:33:17,156 A:middle
But what if I hit
the Stop button

827
00:33:17,156 --> 00:33:18,636 A:middle
up here in my app in X code?

828
00:33:19,276 --> 00:33:22,016 A:middle
This is just like what would
happen if my app crashed midway

829
00:33:22,016 --> 00:33:24,436 A:middle
through the In-App
Purchase, or what would happen

830
00:33:24,436 --> 00:33:25,496 A:middle
if user killed your app,

831
00:33:25,496 --> 00:33:27,236 A:middle
or quite your app
during the purchase.

832
00:33:27,236 --> 00:33:28,446 A:middle
Or maybe something
else happened,

833
00:33:28,446 --> 00:33:30,086 A:middle
lost network, whatever
it may be.

834
00:33:31,086 --> 00:33:32,386 A:middle
The important thing is here --

835
00:33:32,876 --> 00:33:36,836 A:middle
let's put this breakpoint back
on, when my app next launches

836
00:33:36,836 --> 00:33:40,146 A:middle
and this applies to iOS and
OS X, watch what happens,

837
00:33:40,676 --> 00:33:45,626 A:middle
on launch I was immediately
taken again

838
00:33:46,056 --> 00:33:48,316 A:middle
into Payment Queue
Updated Transactions.

839
00:33:48,986 --> 00:33:52,276 A:middle
Why? Because that transaction
hadn't finished yet.

840
00:33:52,756 --> 00:33:54,656 A:middle
Your app crashed
midway through handling

841
00:33:54,656 --> 00:33:58,976 A:middle
that even though the user had
paid for what they've bought.

842
00:33:58,976 --> 00:34:01,486 A:middle
So this is why it's so important
to always observe the queue

843

844
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

845
00:33:58,976 --> 00:34:01,486 A:middle
So this is why it's so important
to always observe the queue

846
00:34:01,486 --> 00:34:03,626 A:middle
and handle any and every
transaction that occurs

847
00:34:03,626 --> 00:34:05,676 A:middle
through here in a
way that doesn't rely

848
00:34:05,676 --> 00:34:07,396 A:middle
on you tracking any
state yourself.

849
00:34:08,666 --> 00:34:10,366 A:middle
So this time I'm going
to let this go through.

850
00:34:10,426 --> 00:34:12,826 A:middle
And it goes through
and make sure

851
00:34:12,826 --> 00:34:14,606 A:middle
that we do actually
finish that transaction.

852
00:34:17,126 --> 00:34:18,886 A:middle
One thing I did want to
note, we mentioned before

853
00:34:18,886 --> 00:34:20,166 A:middle
about the updating of UI.

854
00:34:20,806 --> 00:34:22,346 A:middle
Let's go through
this process again.

855
00:34:22,346 --> 00:34:24,045 A:middle
I'm going to set
a breakpoint here

856
00:34:24,045 --> 00:34:26,106 A:middle
on transaction state purchasing.

857
00:34:27,196 --> 00:34:30,866 A:middle
Now when I run this
lets buy a banana again.

858
00:34:31,335 --> 00:34:35,545 A:middle
Just take note of the
fact that this time

859
00:34:35,545 --> 00:34:41,766 A:middle
around my breakpoint here was
called on the main thread.

860
00:34:42,376 --> 00:34:45,176 A:middle
But you shouldn't necessarily
make any assumptions

861
00:34:45,246 --> 00:34:47,656 A:middle
about which thread you
will get the call backs on.

862
00:34:48,466 --> 00:34:50,426 A:middle
So if you're updating
UI elements in here

863
00:34:50,426 --> 00:34:53,005 A:middle
such as setting the button
state, graying things out,

864
00:34:53,005 --> 00:34:54,456 A:middle
anything in UI kit or app kit,

865
00:34:54,926 --> 00:34:56,886 A:middle
make sure you don't make an
assumption about which thread

866
00:34:56,886 --> 00:35:00,006 A:middle
that message comes in on and
dispatch it to main if you have

867

868
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

869
00:34:56,886 --> 00:35:00,006 A:middle
that message comes in on and
dispatch it to main if you have

870
00:35:00,096 --> 00:35:02,246 A:middle
to to work safely with
App Kit and UI kit.

871
00:35:02,246 --> 00:35:06,386 A:middle
Okay, let's go back
to the slides.

872
00:35:06,386 --> 00:35:14,056 A:middle
Let's move on to the
post sales experience.

873
00:35:14,956 --> 00:35:17,216 A:middle
So we showed a beautiful
UI to the user,

874
00:35:17,656 --> 00:35:18,716 A:middle
we enticed them to buy.

875
00:35:19,296 --> 00:35:21,296 A:middle
The buy process was
smooth and seamless.

876
00:35:21,936 --> 00:35:24,886 A:middle
Now you've got to make good
on what they've paid for.

877
00:35:26,376 --> 00:35:29,756 A:middle
In particular you need to
process the transaction

878
00:35:30,286 --> 00:35:31,206 A:middle
through the payment queue.

879
00:35:32,246 --> 00:35:34,916 A:middle
Then you need to make that asset
or content or feature available

880
00:35:34,916 --> 00:35:36,556 A:middle
and this may mean
downloading content.

881
00:35:37,276 --> 00:35:39,686 A:middle
And then of course
finish the transaction.

882
00:35:40,666 --> 00:35:43,476 A:middle
Now in the post-sale experience
there's three key things you're

883
00:35:43,476 --> 00:35:44,356 A:middle
going to want to do.

884
00:35:45,136 --> 00:35:48,776 A:middle
The first is validate the
purchase, verify the receipt

885
00:35:48,776 --> 00:35:51,756 A:middle
from that transaction and
you can verify that on device

886
00:35:51,826 --> 00:35:53,616 A:middle
or on a server to server
level if you're handing

887
00:35:53,616 --> 00:35:54,816 A:middle
out content from servers.

888
00:35:55,466 --> 00:35:57,036 A:middle
And that is your way to confirm

889
00:35:57,036 --> 00:36:00,646 A:middle
that it was a real monetary
transaction that is authentic

890

891
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

892
00:35:57,036 --> 00:36:00,646 A:middle
that it was a real monetary
transaction that is authentic

893
00:36:00,646 --> 00:36:03,476 A:middle
and trusted and occurred with
the production App store.

894
00:36:04,416 --> 00:36:06,776 A:middle
Again, 10:15 Friday come along

895
00:36:06,776 --> 00:36:09,206 A:middle
and let me tell you
all about that.

896
00:36:10,046 --> 00:36:13,476 A:middle
The next thing you want to do
is give them what they paid for.

897
00:36:13,476 --> 00:36:14,646 A:middle
And especially if you have

898
00:36:14,706 --> 00:36:16,566 A:middle
to download content
for that feature.

899
00:36:17,016 --> 00:36:19,056 A:middle
Obviously as apps
become more and more rich

900
00:36:19,056 --> 00:36:21,546 A:middle
in the features they
offer, it often makes sense

901
00:36:21,636 --> 00:36:25,196 A:middle
to have a smaller binary
for the actual app itself

902
00:36:25,266 --> 00:36:27,106 A:middle
and then download extra content

903
00:36:27,106 --> 00:36:28,616 A:middle
as those In-App Purchases
are made.

904
00:36:29,296 --> 00:36:32,226 A:middle
You can host that with us, or
you could have it self-hosted.

905
00:36:32,626 --> 00:36:35,416 A:middle
And then lastly,
depending on the type

906
00:36:35,416 --> 00:36:38,036 A:middle
of transaction there may
be a need to persist state

907
00:36:38,226 --> 00:36:40,936 A:middle
about the transaction
having occurred or be able

908
00:36:40,936 --> 00:36:42,886 A:middle
to handle the situation
where the user needs

909
00:36:42,886 --> 00:36:45,066 A:middle
to restore the previous
transactions

910
00:36:45,066 --> 00:36:45,996 A:middle
that they have made.

911
00:36:47,956 --> 00:36:49,616 A:middle
So a quick word on
receipt validation.

912
00:36:50,686 --> 00:36:52,806 A:middle
When you do the on-device
validation of the receipt,

913
00:36:52,806 --> 00:36:55,106 A:middle
that is confirming that there
was a real monetary transaction

914
00:36:55,106 --> 00:36:57,626 A:middle
with the store, you can then
go and unlock those features

915
00:36:57,626 --> 00:36:59,376 A:middle
and content within
the app itself.

916

917
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

918
00:37:00,726 --> 00:37:03,746 A:middle
But increasingly, like I said we
see developers hosting content

919
00:37:03,746 --> 00:37:06,366 A:middle
either with us or on their
own server infrastructure

920
00:37:06,746 --> 00:37:09,466 A:middle
that is downloaded when
the purchase takes place.

921
00:37:10,176 --> 00:37:13,696 A:middle
If you have your own servers
that are issuing that content

922
00:37:13,926 --> 00:37:15,936 A:middle
out to your users based
on In-App Purchases,

923
00:37:16,526 --> 00:37:19,086 A:middle
of course you want to make sure
that those servers only hand

924
00:37:19,086 --> 00:37:22,416 A:middle
that content out to
real paying customers.

925
00:37:23,526 --> 00:37:26,076 A:middle
And in fact you can to
server to server validation

926
00:37:26,076 --> 00:37:29,026 A:middle
of receipts using Apple's
online validation service.

927
00:37:29,556 --> 00:37:32,686 A:middle
And that will allow you to
restrict that access and be sure

928
00:37:32,686 --> 00:37:34,586 A:middle
that you only hand out
those valuable assets

929
00:37:35,356 --> 00:37:36,186 A:middle
to people who have paid.

930
00:37:37,426 --> 00:37:41,666 A:middle
But what you definitely don't
want to do is try and use

931
00:37:41,666 --> 00:37:44,776 A:middle
that online validation service
directly from the device.

932
00:37:45,326 --> 00:37:46,786 A:middle
Now there was a time
a little while ago

933
00:37:46,786 --> 00:37:48,936 A:middle
when that was kind
of okay to do.

934
00:37:50,166 --> 00:37:53,636 A:middle
But when we introduced iOS 7
we introduce the grand unified

935
00:37:53,636 --> 00:37:54,486 A:middle
receipt format.

936
00:37:55,266 --> 00:37:58,796 A:middle
That unified the receipt format
that we use on iOS and OS X.

937
00:37:58,796 --> 00:38:02,186 A:middle
And it empowered you as the
developer to be able to validate

938

939
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

940
00:37:58,796 --> 00:38:02,186 A:middle
And it empowered you as the
developer to be able to validate

941
00:38:02,186 --> 00:38:04,016 A:middle
that receipt on the
device itself.

942
00:38:04,806 --> 00:38:07,176 A:middle
That way there was no need
for your app to be calling

943
00:38:07,176 --> 00:38:08,866 A:middle
out to Apple's validation
service

944
00:38:09,716 --> 00:38:11,706 A:middle
to get back the information
about that receipt

945
00:38:11,706 --> 00:38:12,606 A:middle
to know if it was valid.

946
00:38:13,986 --> 00:38:15,486 A:middle
So you should no longer be using

947
00:38:15,666 --> 00:38:18,046 A:middle
that validation service
directly from your device.

948
00:38:19,536 --> 00:38:21,346 A:middle
It's okay to do it
from your service

949
00:38:21,736 --> 00:38:22,966 A:middle
to the validation service.

950
00:38:23,326 --> 00:38:25,436 A:middle
But as far as your app
running on a device,

951
00:38:25,886 --> 00:38:27,806 A:middle
it should either validate
the receipt locally,

952
00:38:28,216 --> 00:38:30,746 A:middle
or pass that receipt up
to your service first,

953
00:38:30,856 --> 00:38:34,496 A:middle
then your service can talk to
the Apple validation service

954
00:38:34,756 --> 00:38:35,976 A:middle
to know if the receipt is valid.

955
00:38:37,206 --> 00:38:41,176 A:middle
And those iOS 6 APIs they
are in fact deprecated now,

956
00:38:41,596 --> 00:38:45,986 A:middle
so you really need to
move away from those.

957
00:38:47,416 --> 00:38:49,866 A:middle
Downloading content,
especially in terms

958
00:38:49,866 --> 00:38:52,546 A:middle
of ensuring a very
hassle-free, smooth,

959
00:38:53,026 --> 00:38:55,516 A:middle
and great In-App Purchase
experience every time,

960
00:38:55,906 --> 00:38:58,806 A:middle
downloading content is a really
important area to focus on.

961
00:38:59,486 --> 00:39:01,346 A:middle
At this point in time
the user has paid

962

963
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

964
00:38:59,486 --> 00:39:01,346 A:middle
At this point in time
the user has paid

965
00:39:01,346 --> 00:39:03,316 A:middle
for what you're offering right?

966
00:39:03,396 --> 00:39:05,236 A:middle
They've done their side of
the bargain they've paid you.

967
00:39:06,056 --> 00:39:08,816 A:middle
Now it's up to you to deliver
what they've paid for as quickly

968
00:39:08,816 --> 00:39:11,416 A:middle
and reliably as possible
every single time.

969
00:39:12,386 --> 00:39:14,536 A:middle
One of the great ways
you can do that is

970
00:39:14,536 --> 00:39:16,776 A:middle
by using Apple's hosted
In-App Purchase feature.

971
00:39:17,436 --> 00:39:20,096 A:middle
That allows you to host In-App
Purchase content with us,

972
00:39:20,426 --> 00:39:21,786 A:middle
it's hosted on our servers,

973
00:39:21,786 --> 00:39:24,036 A:middle
which are very scalable,
very reliable.

974
00:39:25,486 --> 00:39:28,006 A:middle
We can download that content
for you in the background,

975
00:39:28,006 --> 00:39:29,266 A:middle
even when your apps not running.

976
00:39:29,496 --> 00:39:31,636 A:middle
So once that purchase is
made, the user can switch

977
00:39:31,636 --> 00:39:34,056 A:middle
around to doing lots of
other things and then

978
00:39:34,056 --> 00:39:35,686 A:middle
when they get back to your app,

979
00:39:35,686 --> 00:39:36,936 A:middle
the content's there
and waiting for them.

980
00:39:36,936 --> 00:39:38,096 A:middle
Great experience for them.

981
00:39:38,636 --> 00:39:42,276 A:middle
And you can have up to 2 GB
per In-App purchasable product.

982
00:39:42,636 --> 00:39:44,696 A:middle
That's not 2 gig total per app.

983
00:39:44,926 --> 00:39:46,906 A:middle
That's 2 gig per
item you are selling

984
00:39:46,906 --> 00:39:47,926 A:middle
through In-App Purchases.

985
00:39:48,146 --> 00:39:52,716 A:middle
Now if you're using the hosted
content it's so simple to use.

986
00:39:53,956 --> 00:39:55,936 A:middle
We're back now in our
payment queue updated

987
00:39:55,936 --> 00:39:56,946 A:middle
transaction method.

988
00:39:57,336 --> 00:39:59,886 A:middle
Looping over our transactions
we're receiving updates for.

989

990
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

991
00:40:00,646 --> 00:40:03,446 A:middle
If you see a transaction
with a downloads property

992
00:40:03,446 --> 00:40:05,886 A:middle
and that download property
contains one or more download

993
00:40:06,496 --> 00:40:07,696 A:middle
and you want to start
downloading

994
00:40:07,696 --> 00:40:10,926 A:middle
that content, watch
this, simple.

995
00:40:11,886 --> 00:40:14,276 A:middle
You simply call SKPaymentQueue
start download

996
00:40:14,276 --> 00:40:16,176 A:middle
and hand those downloads
over to us.

997
00:40:16,666 --> 00:40:18,826 A:middle
StoreKit in the background
process then takes care

998
00:40:18,826 --> 00:40:21,806 A:middle
of downloading that content and
gets it to the user as quickly

999
00:40:21,806 --> 00:40:23,016 A:middle
and seamlessly as possible.

1000
00:40:24,086 --> 00:40:26,296 A:middle
When a download progresses,

1001
00:40:26,676 --> 00:40:30,066 A:middle
you'll also receive updates
via the SKPaymentQueue Observer

1002
00:40:30,066 --> 00:40:32,676 A:middle
Method, payment queue
updated downloads.

1003
00:40:32,776 --> 00:40:35,026 A:middle
This will tell you things like
progress and time remaining,

1004
00:40:35,346 --> 00:40:36,536 A:middle
as well as state and error.

1005
00:40:37,296 --> 00:40:40,696 A:middle
And when it's finished,
you will get a content URL

1006
00:40:40,696 --> 00:40:44,846 A:middle
where you can locate where that
content has been downloaded to.

1007
00:40:45,466 --> 00:40:47,666 A:middle
Now of course there may be many
reason why you want to host

1008
00:40:47,666 --> 00:40:49,856 A:middle
that In-App Purchase content
yourself and that's okay,

1009
00:40:50,676 --> 00:40:52,936 A:middle
but make sure you use the
background download APIs

1010
00:40:52,936 --> 00:40:55,606 A:middle
to download that for
all the same reasons.

1011
00:40:56,486 --> 00:41:00,406 A:middle
If you're using the standard
old NS URL connection

1012

1013
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1014
00:40:56,486 --> 00:41:00,406 A:middle
If you're using the standard
old NS URL connection

1015
00:41:00,746 --> 00:41:02,496 A:middle
to download this
content, there's going

1016
00:41:02,496 --> 00:41:06,326 A:middle
to be some serious limitations
that you run into particularly

1017
00:41:06,326 --> 00:41:08,486 A:middle
around the fact that you can't
guarantee the download will

1018
00:41:08,486 --> 00:41:10,906 A:middle
start straight away depending
on the network conditions,

1019
00:41:11,796 --> 00:41:13,826 A:middle
and the user would
have to sit there

1020
00:41:13,826 --> 00:41:16,556 A:middle
in your app while
the download happens

1021
00:41:16,556 --> 00:41:17,846 A:middle
to guarantee it completes.

1022
00:41:18,496 --> 00:41:19,206 A:middle
That's not good.

1023
00:41:19,606 --> 00:41:23,926 A:middle
But what you can do is
you can us NS URL session

1024
00:41:24,276 --> 00:41:26,226 A:middle
to do the background
download for you.

1025
00:41:27,026 --> 00:41:28,706 A:middle
There's lots of great
documentation available

1026
00:41:28,706 --> 00:41:30,256 A:middle
for this online, but
here's a quick run

1027
00:41:30,256 --> 00:41:31,216 A:middle
through of how this works.

1028
00:41:31,706 --> 00:41:34,506 A:middle
You create your NS URL
session configuration

1029
00:41:34,506 --> 00:41:37,326 A:middle
by giving it a name, I've called
here my background download --

1030
00:41:37,406 --> 00:41:38,326 A:middle
my background session.

1031
00:41:38,886 --> 00:41:41,326 A:middle
And then when we've got
our session configured,

1032
00:41:41,326 --> 00:41:43,486 A:middle
we create the session itself
and we give it a delegate

1033
00:41:43,546 --> 00:41:46,316 A:middle
to get updates about how the
download's going and a queue

1034
00:41:46,316 --> 00:41:47,856 A:middle
on which to receive
those updates.

1035
00:41:48,116 --> 00:41:49,066 A:middle
That's a dispatch queue.

1036
00:41:50,736 --> 00:41:52,166 A:middle
This will be familiar
with anyone that's work

1037
00:41:52,166 --> 00:41:53,736 A:middle
with NS URL connection before.

1038
00:41:54,136 --> 00:41:57,206 A:middle
You create an NS URL request, in
this case I've just created it

1039
00:41:57,206 --> 00:41:58,846 A:middle
with the URL that
I want to download.

1040

1041
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1042
00:42:00,776 --> 00:42:04,396 A:middle
Then simple as this, I create
the download task using

1043
00:42:04,396 --> 00:42:06,396 A:middle
that request and the
download session.

1044
00:42:07,056 --> 00:42:07,846 A:middle
You see what we did there?

1045
00:42:08,166 --> 00:42:09,886 A:middle
We setup a session to
go and download this

1046
00:42:09,886 --> 00:42:10,836 A:middle
for us in the background.

1047
00:42:11,356 --> 00:42:13,826 A:middle
We told it what we wanted to
go and get and then we went

1048
00:42:13,826 --> 00:42:15,166 A:middle
and created the download task.

1049
00:42:15,306 --> 00:42:18,556 A:middle
And now the OS is taking care of
that for us in the background.

1050
00:42:19,376 --> 00:42:22,116 A:middle
You will get updates
via the delegate method

1051
00:42:22,466 --> 00:42:23,846 A:middle
as to how the download
is progressing

1052
00:42:23,846 --> 00:42:25,256 A:middle
so you can update your UI.

1053
00:42:26,276 --> 00:42:28,326 A:middle
But because these can continue

1054
00:42:28,326 --> 00:42:30,116 A:middle
to happen while your
app's not running,

1055
00:42:30,786 --> 00:42:33,566 A:middle
when your app launches you need
to reconnect to any sessions

1056
00:42:33,566 --> 00:42:34,866 A:middle
that might be in progress

1057
00:42:35,136 --> 00:42:37,066 A:middle
or might have finished while
your app wasn't running.

1058
00:42:37,566 --> 00:42:39,026 A:middle
And this is how you do that.

1059
00:42:39,496 --> 00:42:42,276 A:middle
In your application delegate
you should implement application

1060
00:42:42,276 --> 00:42:44,316 A:middle
handle events for
background URL session.

1061
00:42:44,316 --> 00:42:47,396 A:middle
That will get called on
launch so you can re-establish

1062
00:42:47,396 --> 00:42:49,866 A:middle
that session configuration,
get the session itself,

1063
00:42:50,206 --> 00:42:51,276 A:middle
set your delegate again,

1064
00:42:51,606 --> 00:42:53,526 A:middle
and then get those
same progress updates

1065
00:42:53,526 --> 00:42:54,886 A:middle
about how the download is going.

1066
00:42:56,296 --> 00:42:59,056 A:middle
But no matter how you
download the content,

1067
00:42:59,686 --> 00:43:01,386 A:middle
whether you download
it yourself,

1068

1069
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1070
00:42:59,686 --> 00:43:01,386 A:middle
whether you download
it yourself,

1071
00:43:01,566 --> 00:43:04,286 A:middle
whether you download it
via host In-App Purchases,

1072
00:43:05,096 --> 00:43:07,476 A:middle
you must always call
finishTransaction of course,

1073
00:43:07,916 --> 00:43:11,496 A:middle
but you must do that once you've
completely downloaded the asset

1074
00:43:11,836 --> 00:43:13,406 A:middle
and made it available
to the user.

1075
00:43:15,106 --> 00:43:16,616 A:middle
One thing that can
go horribly wrong

1076
00:43:16,616 --> 00:43:18,606 A:middle
from the user's perspective is

1077
00:43:18,606 --> 00:43:20,656 A:middle
if you call finishTransaction
earlier,

1078
00:43:21,826 --> 00:43:23,146 A:middle
before the download is done,

1079
00:43:23,226 --> 00:43:25,316 A:middle
and then something happens
during the download,

1080
00:43:25,876 --> 00:43:27,706 A:middle
they may have no
way to get back,

1081
00:43:28,256 --> 00:43:30,356 A:middle
or get to that purchase
they've just made.

1082
00:43:31,316 --> 00:43:33,646 A:middle
So you call the
finishTransaction once the

1083
00:43:33,646 --> 00:43:35,706 A:middle
content's downloaded and
you've made it available.

1084
00:43:36,066 --> 00:43:37,896 A:middle
That way only then does
it go out of the queue

1085
00:43:37,996 --> 00:43:40,036 A:middle
and only then will you not
receive further updates

1086
00:43:40,036 --> 00:43:41,846 A:middle
about it.

1087
00:43:43,016 --> 00:43:45,476 A:middle
Now restoring transactions,
this is something you have

1088
00:43:45,476 --> 00:43:46,676 A:middle
to offer -- excuse me.

1089
00:43:46,676 --> 00:43:48,576 A:middle
This is something
you have to offer

1090
00:43:49,256 --> 00:43:51,946 A:middle
if you are selling
non-consumable items

1091
00:43:51,946 --> 00:43:53,376 A:middle
or order renewal subscriptions.

1092
00:43:54,336 --> 00:43:57,326 A:middle
Now, non-consumable items,
they're things like game levels

1093
00:43:57,326 --> 00:44:01,276 A:middle
of maps, or run off purchases
that are designed to be used

1094

1095
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1096
00:43:57,326 --> 00:44:01,276 A:middle
of maps, or run off purchases
that are designed to be used

1097
00:44:01,276 --> 00:44:02,616 A:middle
across multiple devices.

1098
00:44:03,926 --> 00:44:06,876 A:middle
Order renewal subscriptions,
they're like your periodicals

1099
00:44:07,216 --> 00:44:09,366 A:middle
where you are setting up
a subscription payment

1100
00:44:09,366 --> 00:44:11,256 A:middle
for ongoing delivery
of new content.

1101
00:44:11,426 --> 00:44:13,536 A:middle
If you're offering
either of those,

1102
00:44:14,306 --> 00:44:16,356 A:middle
you have to make sure
you can offer the ability

1103
00:44:16,596 --> 00:44:18,536 A:middle
to restore previous
transactions.

1104
00:44:18,536 --> 00:44:19,426 A:middle
That is allow the user

1105
00:44:19,426 --> 00:44:21,556 A:middle
to get back what they've
bought before through your app.

1106
00:44:22,146 --> 00:44:25,296 A:middle
Especially if they buy a
new device or otherwise need

1107
00:44:25,296 --> 00:44:27,076 A:middle
to get back what
they've already paid for.

1108
00:44:27,996 --> 00:44:31,196 A:middle
But if you're offering
consumables

1109
00:44:31,196 --> 00:44:32,546 A:middle
and non-renewing subscriptions,

1110
00:44:32,546 --> 00:44:34,566 A:middle
so a consumable might
be something like gas

1111
00:44:34,566 --> 00:44:38,126 A:middle
in a racecar track, gems,
or coins, or currency,

1112
00:44:38,126 --> 00:44:40,726 A:middle
generally an item that's
purchased, then used up,

1113
00:44:40,726 --> 00:44:43,436 A:middle
and ideally purchased
again, and again, and again.

1114
00:44:43,816 --> 00:44:47,006 A:middle
If you're offering
those sorts of items

1115
00:44:47,006 --> 00:44:50,716 A:middle
through In-App Purchase, then
it's up to you, the developer,

1116
00:44:50,716 --> 00:44:51,886 A:middle
to persist that state.

1117
00:44:52,446 --> 00:44:53,756 A:middle
You can't restore those.

1118
00:44:54,666 --> 00:44:56,356 A:middle
Now this comes back to what
I was just saying before

1119
00:44:56,356 --> 00:44:58,266 A:middle
about making sure you
call finishTransaction

1120
00:44:58,266 --> 00:44:59,346 A:middle
at the right point and time.

1121

1122
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1123
00:45:00,086 --> 00:45:02,156 A:middle
Because you get one
shot at a consumable

1124
00:45:02,156 --> 00:45:03,516 A:middle
and non-renewing subscription.

1125
00:45:04,386 --> 00:45:06,736 A:middle
You have to make sure your
app handles the transaction

1126
00:45:06,736 --> 00:45:08,956 A:middle
properly, makes it
available to the user,

1127
00:45:09,396 --> 00:45:11,656 A:middle
and only then calls
finishTransaction,

1128
00:45:11,656 --> 00:45:12,936 A:middle
because you can't restore those.

1129
00:45:12,936 --> 00:45:15,936 A:middle
But for the content
types you can restore,

1130
00:45:16,456 --> 00:45:18,476 A:middle
you call SKPaymentQueue
default queue

1131
00:45:18,746 --> 00:45:20,456 A:middle
restoreCompletedTransactions.

1132
00:45:21,376 --> 00:45:23,506 A:middle
Now what happens
here, is of course,

1133
00:45:23,656 --> 00:45:24,826 A:middle
you need to observe the queue

1134
00:45:25,696 --> 00:45:28,156 A:middle
because you will receive these
delegate callback methods

1135
00:45:28,376 --> 00:45:30,246 A:middle
such as
restorCompletedTransaction

1136
00:45:30,246 --> 00:45:32,216 A:middle
FailedWithError if
things don't go well,

1137
00:45:33,126 --> 00:45:36,026 A:middle
or paymentQueueRestoreCompleted
TransactionFinished.

1138
00:45:36,916 --> 00:45:38,996 A:middle
At that point you can go
and inspect the receipt

1139
00:45:38,996 --> 00:45:42,666 A:middle
to know what purchases were
restored, unlock those features

1140
00:45:42,666 --> 00:45:49,446 A:middle
and content, but, note that this
requires a network connection

1141
00:45:49,536 --> 00:45:53,316 A:middle
and the user will be prompted to
sign into the store if we have

1142
00:45:53,316 --> 00:45:56,466 A:middle
to verify their identity so that
we know exactly what they've

1143
00:45:56,466 --> 00:45:59,896 A:middle
paid for to get you that list
of restored transactions.

1144

1145
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1146
00:46:02,076 --> 00:46:06,026 A:middle
Now just because your app has
to offer restore transactions,

1147
00:46:06,206 --> 00:46:08,666 A:middle
it doesn't mean you should
call it all the time.

1148
00:46:09,486 --> 00:46:10,916 A:middle
Because it requires
a network connection

1149
00:46:10,916 --> 00:46:13,746 A:middle
and because it will
require the user to sign in,

1150
00:46:14,306 --> 00:46:17,436 A:middle
it should be something you do
only when the user asks you to.

1151
00:46:18,266 --> 00:46:20,346 A:middle
I know a lot of developers
think it would make sense

1152
00:46:20,346 --> 00:46:22,496 A:middle
to just call restore
transactions every time the app

1153
00:46:22,496 --> 00:46:25,056 A:middle
launches, because
don't they always want

1154
00:46:25,056 --> 00:46:26,196 A:middle
to get back what
they've paid for?

1155
00:46:27,326 --> 00:46:30,796 A:middle
Yes, but when they
have to sign in to do

1156
00:46:30,796 --> 00:46:34,126 A:middle
that it becomes too much of a
heavy-weight process on launch.

1157
00:46:34,736 --> 00:46:37,126 A:middle
So let the app launch and
offer a graceful way for them

1158
00:46:37,126 --> 00:46:39,896 A:middle
to restore transactions if
you have to do that based

1159
00:46:39,896 --> 00:46:41,296 A:middle
on the content types
you're selling.

1160
00:46:43,656 --> 00:46:45,456 A:middle
So let's wrap this
up with a summary.

1161
00:46:46,686 --> 00:46:49,656 A:middle
This is my recipe for
trouble-free In-App Purchases.

1162
00:46:51,976 --> 00:46:56,276 A:middle
So, when you are loading up
your In-App Purchase product

1163
00:46:56,276 --> 00:46:59,246 A:middle
identifiers, the list of product
identifiers that you're going

1164
00:46:59,246 --> 00:47:03,096 A:middle
to sell or offer to the
user, be very careful

1165

1166
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1167
00:46:59,246 --> 00:47:03,096 A:middle
to sell or offer to the
user, be very careful

1168
00:47:03,096 --> 00:47:05,836 A:middle
about how you choose to host
them and where you host them

1169
00:47:05,836 --> 00:47:07,846 A:middle
if you're not going to bake
them into your app yourself.

1170
00:47:08,546 --> 00:47:11,086 A:middle
Because if that first experience
is a spinner while you want

1171
00:47:11,086 --> 00:47:13,306 A:middle
for that to load, or
even worse an error

1172
00:47:13,306 --> 00:47:14,706 A:middle
because the server
can't be reached,

1173
00:47:15,246 --> 00:47:17,876 A:middle
that totally derails
your sales experience.

1174
00:47:18,896 --> 00:47:21,436 A:middle
Cache appropriately if
you can and avoid delay

1175
00:47:21,436 --> 00:47:24,136 A:middle
in presenting these products
by fetching just ahead of time

1176
00:47:24,136 --> 00:47:25,116 A:middle
if you can anticipate.

1177
00:47:25,546 --> 00:47:28,766 A:middle
A great example of this is if
you've got a racing car game

1178
00:47:28,766 --> 00:47:32,096 A:middle
for example, there's probably
just a lot of conditions

1179
00:47:32,096 --> 00:47:34,226 A:middle
that you can anticipate
around when you're going

1180
00:47:34,226 --> 00:47:35,356 A:middle
to offer In-App Purchases.

1181
00:47:35,356 --> 00:47:37,196 A:middle
Let's say I'm going to
offer an In-App Purchase

1182
00:47:37,756 --> 00:47:39,466 A:middle
that allows the user
to go faster

1183
00:47:39,466 --> 00:47:40,856 A:middle
around the track
next time around,

1184
00:47:41,146 --> 00:47:42,546 A:middle
or somehow upgrades their car.

1185
00:47:42,546 --> 00:47:44,456 A:middle
When are we going to offer that?

1186
00:47:44,886 --> 00:47:47,186 A:middle
Well probably when they come
in dead last in the race,

1187
00:47:47,266 --> 00:47:48,386 A:middle
when they finish last.

1188
00:47:49,086 --> 00:47:52,146 A:middle
So those sorts of things we
could anticipate in code right?

1189
00:47:52,786 --> 00:47:55,486 A:middle
If we know they are about
to cross the finish line

1190
00:47:55,486 --> 00:47:57,336 A:middle
and we know that they're
in a bad position,

1191
00:47:58,396 --> 00:48:00,986 A:middle
just ahead of time go and
grab that product information

1192

1193
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1194
00:47:58,396 --> 00:48:00,986 A:middle
just ahead of time go and
grab that product information

1195
00:48:02,006 --> 00:48:03,446 A:middle
and make sure you've
got it on hand

1196
00:48:03,656 --> 00:48:06,266 A:middle
for when they cross the
finish line in last place

1197
00:48:06,266 --> 00:48:09,056 A:middle
and then you can offer them a
great way to beat their friends

1198
00:48:09,056 --> 00:48:10,776 A:middle
and finish in first
place next time around.

1199
00:48:12,676 --> 00:48:14,856 A:middle
Likewise, the same applies
when you go and fetch

1200
00:48:14,856 --> 00:48:15,956 A:middle
that product information,

1201
00:48:15,956 --> 00:48:18,156 A:middle
the localized product
information from the App Store.

1202
00:48:18,566 --> 00:48:21,196 A:middle
Fetch only the products
you need.

1203
00:48:22,356 --> 00:48:24,996 A:middle
Sure a lot of you have got 10s,
and 10s, maybe even hundreds

1204
00:48:24,996 --> 00:48:27,176 A:middle
of In-App Purchase
identifiers in your app,

1205
00:48:28,496 --> 00:48:32,336 A:middle
but you're probably only going
to offer 3, 4, 5, maybe 6 items

1206
00:48:32,336 --> 00:48:33,876 A:middle
to the user at any
one point in time.

1207
00:48:34,526 --> 00:48:36,886 A:middle
And because this involves a
round trip to the App Store

1208
00:48:36,886 --> 00:48:40,166 A:middle
and network, you only want to
fetch just the products you need

1209
00:48:40,166 --> 00:48:41,996 A:middle
so that this happens
as quickly as possible.

1210
00:48:42,946 --> 00:48:45,426 A:middle
So fetch it just ahead of time,
just like we said before try

1211
00:48:45,426 --> 00:48:47,286 A:middle
and anticipate when you're
going to display this,

1212
00:48:47,636 --> 00:48:49,996 A:middle
fetch just ahead of time
to avoid any delay there.

1213
00:48:50,306 --> 00:48:52,956 A:middle
It just makes for such a smooth
In-App Purchase experience

1214
00:48:53,416 --> 00:48:55,896 A:middle
if the user can go directly
from the point in time

1215
00:48:55,896 --> 00:48:58,506 A:middle
when they may be enticed to buy
something to being able to tap

1216
00:48:58,576 --> 00:48:59,756 A:middle
that Buy button straightaway.

1217

1218
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1219
00:49:01,066 --> 00:49:05,016 A:middle
Now when you show your beautiful
In-App Purchase UI and I've got

1220
00:49:05,016 --> 00:49:07,386 A:middle
to mention earlier today there
was a really great session

1221
00:49:07,386 --> 00:49:09,676 A:middle
called Designing a Great
In-App Purchase experience.

1222
00:49:09,676 --> 00:49:11,416 A:middle
You should really check
out the video of that.

1223
00:49:11,416 --> 00:49:14,656 A:middle
Because it goes far more in
depth about design techniques

1224
00:49:14,656 --> 00:49:17,166 A:middle
about how to provide a great
In-App Purchase experience.

1225
00:49:17,756 --> 00:49:20,366 A:middle
But from a code level make sure

1226
00:49:20,366 --> 00:49:22,746 A:middle
that you ensure proper
localization.

1227
00:49:23,716 --> 00:49:25,736 A:middle
We deal with a global
marketplace.

1228
00:49:26,106 --> 00:49:28,116 A:middle
And just because we're
familiar with a particular way

1229
00:49:28,116 --> 00:49:29,386 A:middle
of representing currency

1230
00:49:29,716 --> 00:49:32,866 A:middle
or a particular display style
doesn't mean everyone else will

1231
00:49:32,866 --> 00:49:35,926 A:middle
like that, let alone want to buy
your app if you get it wrong.

1232
00:49:36,686 --> 00:49:39,386 A:middle
So take care to ensure
great localization.

1233
00:49:39,676 --> 00:49:42,086 A:middle
It makes users feel comfortable
and it makes them feel happy

1234
00:49:42,256 --> 00:49:44,776 A:middle
that the customs they're
familiar with are being enticed

1235
00:49:44,776 --> 00:49:45,916 A:middle
and enjoyed by your app.

1236
00:49:47,406 --> 00:49:48,786 A:middle
Do not convert the
currencies though.

1237
00:49:49,466 --> 00:49:53,356 A:middle
Everything you get back in the
SKProduct object will be correct

1238
00:49:53,356 --> 00:49:55,306 A:middle
for the store that the
user is signed into.

1239
00:49:55,836 --> 00:50:01,316 A:middle
And when they make the
purchase, that is you take

1240

1241
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1242
00:49:55,836 --> 00:50:01,316 A:middle
And when they make the
purchase, that is you take

1243
00:50:01,316 --> 00:50:03,646 A:middle
that SKProduct object,
make and SKPayment throw it

1244
00:50:03,646 --> 00:50:06,636 A:middle
in the payment queue, once
you've added it to the queue,

1245
00:50:06,726 --> 00:50:07,976 A:middle
step back, and be hands-off.

1246
00:50:08,516 --> 00:50:09,796 A:middle
There's no step three, remember?

1247
00:50:10,096 --> 00:50:12,696 A:middle
Create the payment, add it
to the queue, that's it.

1248
00:50:12,696 --> 00:50:16,046 A:middle
Let the payment queue then
drive the further updates.

1249
00:50:16,316 --> 00:50:19,336 A:middle
And then process those updates.

1250
00:50:20,246 --> 00:50:21,776 A:middle
Make sure you verify the receipt

1251
00:50:21,776 --> 00:50:23,696 A:middle
to make sure it's a real
monetary transaction

1252
00:50:23,696 --> 00:50:24,666 A:middle
that happened with the App Store

1253
00:50:24,666 --> 00:50:25,956 A:middle
and that nothing
funny's going on.

1254
00:50:26,476 --> 00:50:28,226 A:middle
Unlock those features
and content as soon

1255
00:50:28,226 --> 00:50:30,436 A:middle
as you possibly can
for a great experience.

1256
00:50:31,126 --> 00:50:34,376 A:middle
And avoid deprecated APIs and
unsafe receipt verification

1257
00:50:34,566 --> 00:50:35,516 A:middle
that could leave you opened

1258
00:50:35,516 --> 00:50:37,426 A:middle
to unauthorized transactions
occurring.

1259
00:50:38,306 --> 00:50:40,506 A:middle
If you've got to
download content

1260
00:50:40,506 --> 00:50:43,626 A:middle
to make a feature available,
get that asset as reliably

1261
00:50:43,626 --> 00:50:44,746 A:middle
and quickly as possible.

1262
00:50:44,946 --> 00:50:46,456 A:middle
Use our In-App Purchases
if you can.

1263
00:50:46,926 --> 00:50:49,106 A:middle
If not, if you're going
to download it yourself.

1264
00:50:49,586 --> 00:50:52,886 A:middle
Make sure you use those
background download APIs.

1265
00:50:54,546 --> 00:50:58,776 A:middle
And lastly make sure you
finish the transaction.

1266
00:50:59,976 --> 00:51:03,476 A:middle
If you need more
information, there is --

1267

1268
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1269
00:50:59,976 --> 00:51:03,476 A:middle
If you need more
information, there is --

1270
00:51:03,476 --> 00:51:05,856 A:middle
we an evangelist mailing list
setup that you're welcome

1271
00:51:05,856 --> 00:51:08,386 A:middle
to email to get help from our
wonderful evangelist team.

1272
00:51:09,136 --> 00:51:11,276 A:middle
There is also the In-App
Purchase programming guide

1273
00:51:11,276 --> 00:51:13,966 A:middle
available online and also the
StoreKit framework reference.

1274
00:51:14,496 --> 00:51:16,006 A:middle
And there's the Apple
developer forums

1275
00:51:16,006 --> 00:51:18,256 A:middle
that are great resources
wealth for discussion and help.

1276
00:51:19,116 --> 00:51:21,416 A:middle
There are some related
session that I mentioned,

1277
00:51:21,846 --> 00:51:23,286 A:middle
Preventing Unauthorized
Purchases

1278
00:51:23,286 --> 00:51:25,236 A:middle
with Receipt that's me
again on Friday morning

1279
00:51:25,416 --> 00:51:26,486 A:middle
up in Pacific Heights.

1280
00:51:27,306 --> 00:51:29,446 A:middle
That's where we'll take you
through how to make sure

1281
00:51:29,446 --> 00:51:30,706 A:middle
that your revenue is protected

1282
00:51:30,996 --> 00:51:32,656 A:middle
and your business
model is enforced

1283
00:51:32,656 --> 00:51:34,216 A:middle
in your app and your service.

1284
00:51:34,446 --> 00:51:36,316 A:middle
If you care about your
revenue come along

1285
00:51:36,316 --> 00:51:38,986 A:middle
and let's talk about it.

1286
00:51:39,066 --> 00:51:41,026 A:middle
Also, designing a great
In-App Purchase experience.

1287
00:51:41,026 --> 00:51:43,536 A:middle
Rachel did an amazing
job this morning in here,

1288
00:51:43,666 --> 00:51:44,776 A:middle
telling developers how

1289
00:51:44,776 --> 00:51:47,316 A:middle
to structure their
In-App Purchase UI

1290
00:51:47,396 --> 00:51:49,086 A:middle
to deliver a great
experience every time.

1291
00:51:49,336 --> 00:51:50,826 A:middle
The video should be
available shortly.

1292
00:51:51,436 --> 00:51:54,176 A:middle
And lastly, Chris Espinosa's
session tomorrow, or Thursday.

1293
00:51:54,556 --> 00:51:57,806 A:middle
He's really good if your app in
particular is targeted at kids.

1294
00:51:58,246 --> 00:51:59,416 A:middle
Thank you very much.

1295

1296
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1297
00:52:00,516 --> 00:52:07,550 A:middle
[ Applause ]

1298
