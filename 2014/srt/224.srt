X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:12,066 --> 00:00:13,726 A:middle
>> Welcome to Core
iOS Application

2
00:00:13,726 --> 00:00:14,826 A:middle
Architectural Patterns.

3
00:00:15,196 --> 00:00:17,016 A:middle
My name is Bill Dudney
and I work on UI kit.

4
00:00:17,016 --> 00:00:18,976 A:middle
Thanks for being here.

5
00:00:19,516 --> 00:00:23,846 A:middle
[ Applause ]

6
00:00:24,346 --> 00:00:25,426 A:middle
>> So exciting!

7
00:00:25,426 --> 00:00:26,686 A:middle
There's so much cool
stuff this year.

8
00:00:29,016 --> 00:00:31,456 A:middle
Okay so by way of introduction,
what we're going to talk

9
00:00:31,456 --> 00:00:35,656 A:middle
about today is sort of the list
of common patterns that we find

10
00:00:35,656 --> 00:00:39,656 A:middle
across all of the frameworks
in iOS and Cocoa Touch.

11
00:00:40,606 --> 00:00:42,326 A:middle
We are also going to
spend some time talking

12
00:00:42,326 --> 00:00:47,006 A:middle
about how we can apply
these patterns to your code.

13
00:00:47,236 --> 00:00:48,766 A:middle
How we can make our
applications better

14
00:00:48,766 --> 00:00:50,506 A:middle
by understanding
these patterns, one,

15
00:00:50,556 --> 00:00:53,546 A:middle
and then applying the concepts
defined in those patterns

16
00:00:53,896 --> 00:00:54,896 A:middle
to the code that we write.

17
00:00:55,346 --> 00:00:59,056 A:middle
All right, so common
patterns in UI kit and beyond.

18
00:00:59,546 --> 00:01:01,426 A:middle
The great thing about
these common patterns is

19

20
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

21
00:00:59,546 --> 00:01:01,426 A:middle
The great thing about
these common patterns is

22
00:01:01,426 --> 00:01:04,046 A:middle
that once you understand
it in one context,

23
00:01:04,116 --> 00:01:07,256 A:middle
the way that we use them
across all of Cocoa Touch ends

24
00:01:07,256 --> 00:01:08,846 A:middle
up being very similar.

25
00:01:09,296 --> 00:01:12,296 A:middle
So when you first look at
the list of documentation,

26
00:01:12,296 --> 00:01:13,576 A:middle
we have all these frameworks.

27
00:01:13,576 --> 00:01:17,086 A:middle
The core video, core audio,
core animation, foundation,

28
00:01:17,236 --> 00:01:18,446 A:middle
core data, and so forth.

29
00:01:18,446 --> 00:01:19,826 A:middle
It can be a little overwhelming.

30
00:01:19,826 --> 00:01:21,926 A:middle
You look at that list
and say holy cow,

31
00:01:21,926 --> 00:01:24,966 A:middle
that's a giant fire hose that
I have to ingest right now.

32
00:01:25,436 --> 00:01:27,426 A:middle
Well the great thing,
though, is that, again,

33
00:01:27,426 --> 00:01:28,806 A:middle
these patterns are used

34
00:01:28,806 --> 00:01:32,756 A:middle
in a common way throughout
this whole stack of frameworks.

35
00:01:32,756 --> 00:01:35,496 A:middle
So when you understand one
pattern in one framework,

36
00:01:35,906 --> 00:01:37,966 A:middle
you can apply that knowledge
across the whole stack

37
00:01:37,966 --> 00:01:40,806 A:middle
of frameworks, so it
really levels out the amount

38
00:01:40,806 --> 00:01:41,966 A:middle
of learning that you have to do.

39
00:01:42,526 --> 00:01:44,466 A:middle
So let's get started
with the first pattern.

40
00:01:44,466 --> 00:01:46,046 A:middle
And that's target action.

41
00:01:46,466 --> 00:01:49,036 A:middle
Now, target action
is a consistent way

42
00:01:49,276 --> 00:01:51,856 A:middle
to connect controls
to custom logic.

43
00:01:52,136 --> 00:01:54,676 A:middle
Things in your user interface
connected to the code

44
00:01:54,676 --> 00:01:57,086 A:middle
that makes your application
what it is.

45
00:01:58,086 --> 00:01:59,756 A:middle
So if you've ever
done this in X code,

46

47
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

48
00:02:00,086 --> 00:02:02,636 A:middle
you have seen target
action in action.

49
00:02:02,856 --> 00:02:04,906 A:middle
When you drag that
connection from the button

50
00:02:05,286 --> 00:02:07,246 A:middle
to your view controller,
it's saying hey,

51
00:02:07,246 --> 00:02:10,576 A:middle
whenever this button is
activated, kickoff this message.

52
00:02:11,826 --> 00:02:14,236 A:middle
Here's an example from
one of our applications.

53
00:02:15,416 --> 00:02:17,006 A:middle
This is the message application.

54
00:02:17,396 --> 00:02:19,556 A:middle
And we have several
buttons on here.

55
00:02:19,896 --> 00:02:21,536 A:middle
That top one, the cancel button.

56
00:02:21,536 --> 00:02:24,146 A:middle
Of course when that's
tapped, that's going

57
00:02:24,146 --> 00:02:27,056 A:middle
to send a cancel message, it's
going to delete the message

58
00:02:27,056 --> 00:02:30,016 A:middle
and get rid of this
Presented View controller.

59
00:02:30,016 --> 00:02:34,676 A:middle
When the user taps on send, it's
going to package up the message,

60
00:02:34,746 --> 00:02:36,596 A:middle
push it off into the
interwebs, it's going to end

61
00:02:36,596 --> 00:02:39,486 A:middle
up in whoever's device you're
having the conversation with.

62
00:02:40,766 --> 00:02:43,686 A:middle
Now, the really cool
thing is these two classes

63
00:02:43,826 --> 00:02:46,516 A:middle
that make these instances, the
classes for these instances,

64
00:02:46,586 --> 00:02:49,356 A:middle
are from completely different
places in the class hierarchy.

65
00:02:49,846 --> 00:02:54,436 A:middle
UI Bar Button item is a
subclass of NS Object.

66
00:02:54,936 --> 00:02:57,436 A:middle
UI Button is a subclass
of UI Control.

67
00:02:57,436 --> 00:03:00,876 A:middle
But both of them apply
this target action paradigm

68

69
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

70
00:02:57,436 --> 00:03:00,876 A:middle
But both of them apply
this target action paradigm

71
00:03:01,176 --> 00:03:03,736 A:middle
so that you don't really
have to think about the fact

72
00:03:03,736 --> 00:03:04,706 A:middle
that they're different classes.

73
00:03:04,826 --> 00:03:08,296 A:middle
They both apply this pattern
in a very consistent way.

74
00:03:08,606 --> 00:03:12,106 A:middle
So once you understand it for
one, you understand it for both.

75
00:03:13,066 --> 00:03:15,816 A:middle
Getting a little more abstract,
talking about target action,

76
00:03:16,186 --> 00:03:19,106 A:middle
the idea is you have a
controller, an initiator,

77
00:03:19,106 --> 00:03:23,476 A:middle
something that kicks
off the message send.

78
00:03:24,476 --> 00:03:27,326 A:middle
That has a target object
that it sends the message to,

79
00:03:27,546 --> 00:03:28,996 A:middle
and then the particular message

80
00:03:28,996 --> 00:03:31,706 A:middle
that it sends is called
the action message.

81
00:03:32,796 --> 00:03:36,236 A:middle
Once you understand this,
again, wherever we use this,

82
00:03:36,236 --> 00:03:38,906 A:middle
it's used in such a consistent
way that if you understand it

83
00:03:38,906 --> 00:03:42,686 A:middle
in one context, you understand
it in all the contexts.

84
00:03:42,966 --> 00:03:45,886 A:middle
So with gesture recognizers,
same thing.

85
00:03:45,886 --> 00:03:48,826 A:middle
A gesture recognizer has
a target and an action,

86
00:03:48,826 --> 00:03:51,736 A:middle
and when you create that gesture
recognizer you specify that,

87
00:03:52,006 --> 00:03:55,156 A:middle
so again, it's exactly the same
kind of concept as what we see

88
00:03:55,506 --> 00:03:56,876 A:middle
with the control objects.

89
00:03:58,696 --> 00:03:59,866 A:middle
So that's target action.

90

91
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

92
00:04:00,346 --> 00:04:03,426 A:middle
A way to specify a
connection between two objects,

93
00:04:03,426 --> 00:04:05,426 A:middle
and get those control objects

94
00:04:05,466 --> 00:04:07,746 A:middle
to invoke custom code
in your application.

95
00:04:08,286 --> 00:04:11,406 A:middle
Next up is the responder chain.

96
00:04:12,626 --> 00:04:16,046 A:middle
The responder chain lets your
application handle events

97
00:04:16,226 --> 00:04:19,356 A:middle
without knowledge of which
particular object is going

98
00:04:19,356 --> 00:04:20,906 A:middle
to be used to handle that event.

99
00:04:22,065 --> 00:04:24,446 A:middle
Responder chain kicks off
with some sort of initiator.

100
00:04:24,446 --> 00:04:26,336 A:middle
It's just some object
in your application

101
00:04:26,646 --> 00:04:28,126 A:middle
that kicks off the process.

102
00:04:28,126 --> 00:04:29,246 A:middle
It could be user action,

103
00:04:29,246 --> 00:04:31,756 A:middle
it could be a control,
or a controller.

104
00:04:32,956 --> 00:04:35,246 A:middle
That sends an action
to the first responder.

105
00:04:35,246 --> 00:04:37,366 A:middle
And that first responder
might respond to it.

106
00:04:37,366 --> 00:04:39,586 A:middle
And if it does, then
the process is done.

107
00:04:39,656 --> 00:04:43,196 A:middle
That responder has handled
that message and it's complete.

108
00:04:43,196 --> 00:04:46,816 A:middle
But if it doesn't, it's going
to ask its next responder, hey,

109
00:04:46,816 --> 00:04:48,226 A:middle
do you respond to this message?

110
00:04:48,306 --> 00:04:50,116 A:middle
And if it does, then of
course it will handle it.

111
00:04:50,166 --> 00:04:53,016 A:middle
But if it doesn't, it keeps
going up the responder chain

112
00:04:53,466 --> 00:04:55,606 A:middle
until it finds some responder

113
00:04:55,606 --> 00:04:58,516 A:middle
that actually implements the
message, whatever that was

114
00:04:58,546 --> 00:04:59,526 A:middle
that was asked to be done.

115
00:04:59,656 --> 00:05:02,966 A:middle
Change the color of a text
field, or copy the contents

116

117
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

118
00:04:59,656 --> 00:05:02,966 A:middle
Change the color of a text
field, or copy the contents

119
00:05:02,966 --> 00:05:05,236 A:middle
of a text field, or
whatever you happen to send

120
00:05:05,576 --> 00:05:06,726 A:middle
up the responder chain.

121
00:05:06,896 --> 00:05:10,776 A:middle
A particular place where we
use this is with motion events.

122
00:05:10,776 --> 00:05:12,296 A:middle
So when the user
shakes the phone,

123
00:05:13,996 --> 00:05:17,396 A:middle
we send this motion
began, motion ended,

124
00:05:17,396 --> 00:05:20,776 A:middle
and motion canceled,
to the responder chain.

125
00:05:21,136 --> 00:05:23,436 A:middle
And so that travels up
the responder chain,

126
00:05:23,436 --> 00:05:25,986 A:middle
looking for the object that
responds to that message.

127
00:05:26,566 --> 00:05:29,566 A:middle
And the great thing is you
can use the responder chain

128
00:05:29,566 --> 00:05:32,106 A:middle
to respond to things like
that, like motion ended,

129
00:05:32,436 --> 00:05:34,516 A:middle
by implementing it
wherever it makes sense

130
00:05:34,566 --> 00:05:35,636 A:middle
in the responder chain.

131
00:05:35,636 --> 00:05:36,556 A:middle
So here's a picture

132
00:05:36,556 --> 00:05:41,136 A:middle
that diagrammatically expresses
what all applications have,

133
00:05:41,136 --> 00:05:42,146 A:middle
which is their responder chain.

134
00:05:42,526 --> 00:05:44,076 A:middle
It starts off in
the view hierarchy,

135
00:05:44,396 --> 00:05:45,616 A:middle
it travels up the view hierarchy

136
00:05:45,616 --> 00:05:47,166 A:middle
until it gets to
a view controller.

137
00:05:47,566 --> 00:05:50,236 A:middle
The view controller, if it
doesn't implement, it passes it

138
00:05:50,236 --> 00:05:52,446 A:middle
up to the window, the
window to the application,

139
00:05:52,446 --> 00:05:55,656 A:middle
and then finally the application
to the application delegate.

140
00:05:56,196 --> 00:05:58,816 A:middle
And that's the responder chain.

141
00:05:58,996 --> 00:06:01,496 A:middle
It lets you build a group
of objects that are going

142

143
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

144
00:05:58,996 --> 00:06:01,496 A:middle
It lets you build a group
of objects that are going

145
00:06:01,496 --> 00:06:03,476 A:middle
to eventually find
out who is responsible

146
00:06:03,476 --> 00:06:06,036 A:middle
for implementing a
particular message.

147
00:06:07,046 --> 00:06:08,996 A:middle
Next up is Composite.

148
00:06:13,636 --> 00:06:16,876 A:middle
Composite lets us
manipulate a group of objects

149
00:06:16,876 --> 00:06:20,276 A:middle
as a single object, and
we use this extensively

150
00:06:20,276 --> 00:06:21,656 A:middle
in the view hierarchy.

151
00:06:22,696 --> 00:06:26,116 A:middle
So I start off with a single
view, created alloc init

152
00:06:26,116 --> 00:06:30,926 A:middle
with frame, I create a new
view, and then call add subview.

153
00:06:31,626 --> 00:06:36,536 A:middle
Now, these two objects, the
parent view in blue here,

154
00:06:36,946 --> 00:06:38,706 A:middle
and the child view,
the one in green,

155
00:06:38,866 --> 00:06:40,646 A:middle
are in this composite
relationship.

156
00:06:40,646 --> 00:06:42,866 A:middle
So now I can treat
the whole hierarchy

157
00:06:42,866 --> 00:06:45,806 A:middle
and I could have hundreds of
views beneath that blue view,

158
00:06:46,206 --> 00:06:50,206 A:middle
but I get to treat all of
them as one Composite object,

159
00:06:50,206 --> 00:06:53,026 A:middle
so I can do things like
move that parent view.

160
00:06:53,106 --> 00:06:56,196 A:middle
And when I do, all of its
subviews move along with it.

161
00:06:56,856 --> 00:06:59,766 A:middle
Same thing with other actions
that I tell that view to do.

162
00:06:59,796 --> 00:07:01,476 A:middle
Move it back and
then I rotate it.

163

164
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

165
00:06:59,796 --> 00:07:01,476 A:middle
Move it back and
then I rotate it.

166
00:07:01,786 --> 00:07:05,216 A:middle
All of the subviews in that
Composite are treated together

167
00:07:05,216 --> 00:07:06,306 A:middle
as one object.

168
00:07:09,986 --> 00:07:14,106 A:middle
We also use the view
hierarchy, as I said earlier,

169
00:07:14,106 --> 00:07:15,186 A:middle
in the responder chain.

170
00:07:15,186 --> 00:07:20,206 A:middle
So as you add child views
to a view, its superview,

171
00:07:20,406 --> 00:07:23,086 A:middle
the new child view that was just
added, its superview becomes

172
00:07:23,086 --> 00:07:25,946 A:middle
that view's next responder,
and so that's how it gets

173
00:07:25,946 --> 00:07:28,306 A:middle
up to the point where it finds a
view that has a view controller.

174
00:07:28,346 --> 00:07:31,206 A:middle
It travels up its
superview hierarchy.

175
00:07:32,196 --> 00:07:35,796 A:middle
And again, we use this same
pattern in multiple places.

176
00:07:36,106 --> 00:07:39,256 A:middle
If you've spent much time
using the UI Dynamics,

177
00:07:39,516 --> 00:07:43,896 A:middle
a dynamic behavior is able to
have a child dynamic behavior,

178
00:07:44,066 --> 00:07:46,096 A:middle
and if you group them
together in a composite

179
00:07:46,096 --> 00:07:48,076 A:middle
by calling Add Child Behavior,

180
00:07:48,076 --> 00:07:52,706 A:middle
then those two behaviors are
treated together as one thing

181
00:07:52,986 --> 00:07:55,466 A:middle
by the physic simulation that's
running in the background.

182
00:07:56,106 --> 00:08:00,336 A:middle
So that's Composite, allowing
us to build a group of objects

183

184
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

185
00:07:56,106 --> 00:08:00,336 A:middle
So that's Composite, allowing
us to build a group of objects

186
00:08:00,416 --> 00:08:04,346 A:middle
into a tree that then we can
treat as one single object.

187
00:08:04,966 --> 00:08:08,966 A:middle
Next up is delegation.

188
00:08:10,276 --> 00:08:14,546 A:middle
That allows us to customize
behavior in our applications

189
00:08:14,886 --> 00:08:18,286 A:middle
without subclassing the
object whose behavior we

190
00:08:18,286 --> 00:08:19,156 A:middle
are customizing.

191
00:08:20,636 --> 00:08:24,556 A:middle
So a great example that you see
in almost every introduction

192
00:08:24,556 --> 00:08:26,586 A:middle
to doing iOS development
is talking

193
00:08:26,586 --> 00:08:28,616 A:middle
about the application delegate.

194
00:08:29,906 --> 00:08:34,796 A:middle
The application is delegating
to the application delegate

195
00:08:34,856 --> 00:08:36,916 A:middle
to customize the way it behaves.

196
00:08:37,015 --> 00:08:38,006 A:middle
So there is a set of methods

197
00:08:38,106 --> 00:08:40,746 A:middle
that the application
delegate protocol specifies,

198
00:08:41,066 --> 00:08:43,035 A:middle
application is going to
go into the background.

199
00:08:43,135 --> 00:08:45,166 A:middle
Application is going to
come into the foreground.

200
00:08:45,626 --> 00:08:49,076 A:middle
Application wants to open
this URL and so forth.

201
00:08:49,566 --> 00:08:51,386 A:middle
All of those methods
that you implement

202
00:08:51,386 --> 00:08:55,486 A:middle
in your delegate customize
the way UI Application acts,

203
00:08:56,206 --> 00:08:58,426 A:middle
but you don't have
to know anything

204
00:08:58,426 --> 00:09:00,356 A:middle
about the details
of UI Application.

205

206
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

207
00:08:58,426 --> 00:09:00,356 A:middle
about the details
of UI Application.

208
00:09:00,826 --> 00:09:04,676 A:middle
So this was a very particular
decision made by UIKit

209
00:09:05,036 --> 00:09:08,376 A:middle
to use this form of delegation.

210
00:09:09,176 --> 00:09:11,976 A:middle
We could have, on the other
hand, we could have asked you

211
00:09:11,976 --> 00:09:14,626 A:middle
to subclass UI Application,
and that would've worked.

212
00:09:14,626 --> 00:09:16,716 A:middle
There's actually GUI frameworks
out there that ask you

213
00:09:16,716 --> 00:09:19,176 A:middle
to subclass the objects that
come out of the GUI framework.

214
00:09:19,956 --> 00:09:23,296 A:middle
But if we asked you to subclass
UI Application, you would have

215
00:09:23,336 --> 00:09:26,446 A:middle
to understand a lot of
detail about UI Application.

216
00:09:26,876 --> 00:09:28,556 A:middle
Which methods are
safe to override?

217
00:09:28,916 --> 00:09:30,876 A:middle
Which methods are
not safe to override.

218
00:09:31,326 --> 00:09:32,926 A:middle
If I do override this method,

219
00:09:33,246 --> 00:09:35,506 A:middle
do I have to call super,
or is that optional?

220
00:09:36,286 --> 00:09:38,566 A:middle
We don't want to put that
cognitive load on you.

221
00:09:38,566 --> 00:09:40,586 A:middle
We don't want you to have
to think about that stuff.

222
00:09:41,016 --> 00:09:46,156 A:middle
So instead, using this idea of
delegation allows us to delegate

223
00:09:46,216 --> 00:09:49,276 A:middle
to your code to say
what do you want custom?

224
00:09:49,376 --> 00:09:53,246 A:middle
What do you want special to have
happen when the application goes

225
00:09:53,246 --> 00:09:55,736 A:middle
into the background or when
it comes into the foreground?

226
00:09:56,286 --> 00:09:59,456 A:middle
That allows you to customize
the way UI Application works

227
00:09:59,456 --> 00:10:02,346 A:middle
without us having to force
you to understand all

228

229
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

230
00:09:59,456 --> 00:10:02,346 A:middle
without us having to force
you to understand all

231
00:10:02,346 --> 00:10:04,086 A:middle
that detail about
UI Application.

232
00:10:04,446 --> 00:10:06,236 A:middle
Now, of course, there's still
a lot of detail that you have

233
00:10:06,236 --> 00:10:09,036 A:middle
to know, but that's what
makes you awesome developers.

234
00:10:09,546 --> 00:10:14,606 A:middle
And again, we use this in many,
many frameworks throughout iOS.

235
00:10:15,176 --> 00:10:15,976 A:middle
Here's just a few.

236
00:10:16,366 --> 00:10:19,136 A:middle
AV Foundation makes
extensive use of delegates.

237
00:10:19,266 --> 00:10:22,486 A:middle
Core animation has
delegates on their layers.

238
00:10:22,656 --> 00:10:24,586 A:middle
Game Kit has a couple
of different classes,

239
00:10:24,586 --> 00:10:26,446 A:middle
including GK session,
that have delegates.

240
00:10:26,886 --> 00:10:29,356 A:middle
And in every case,
that delegate is

241
00:10:29,356 --> 00:10:33,716 A:middle
about customizing the behavior
of those other classes,

242
00:10:33,716 --> 00:10:36,886 A:middle
without you having to
subclass from them.

243
00:10:37,066 --> 00:10:38,616 A:middle
Okay, so that's delegation.

244
00:10:39,376 --> 00:10:42,006 A:middle
Next up is data source.

245
00:10:43,196 --> 00:10:47,526 A:middle
That allows you to customize
data retrieval without having

246
00:10:47,526 --> 00:10:49,716 A:middle
to subclass the object
that needs the data.

247
00:10:50,386 --> 00:10:53,056 A:middle
A common example from UIKit,

248
00:10:53,146 --> 00:10:57,516 A:middle
UITableView has a
UITableViewDataSource.

249
00:10:57,976 --> 00:11:01,406 A:middle
That allows the table view to
know how many sections it has.

250

251
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

252
00:10:57,976 --> 00:11:01,406 A:middle
That allows the table view to
know how many sections it has.

253
00:11:01,506 --> 00:11:03,416 A:middle
How many rows are
in each section?

254
00:11:03,796 --> 00:11:06,526 A:middle
What data belongs in each of the
rows that are in that section?

255
00:11:07,016 --> 00:11:11,616 A:middle
So the table view asks its data
source all these questions.

256
00:11:11,876 --> 00:11:13,226 A:middle
That gives you the chance

257
00:11:13,296 --> 00:11:16,516 A:middle
to customize how the data is
retrieved, where it comes from,

258
00:11:16,516 --> 00:11:18,846 A:middle
and so forth, and provide
it to the table view.

259
00:11:19,206 --> 00:11:21,016 A:middle
But you don't have to
subclass table view.

260
00:11:21,246 --> 00:11:24,406 A:middle
It would be the same situation
subclassing table view

261
00:11:24,406 --> 00:11:26,836 A:middle
and require you to know all
sorts of detail about that,

262
00:11:27,216 --> 00:11:31,866 A:middle
that we didn't want to have
to force you to think through.

263
00:11:32,396 --> 00:11:34,766 A:middle
So here's some other
examples inside the UIKit.

264
00:11:34,896 --> 00:11:38,336 A:middle
Same basic story, UIPickerView
says hey how many things belong

265
00:11:38,336 --> 00:11:39,166 A:middle
in my picker view?

266
00:11:39,216 --> 00:11:40,406 A:middle
PageView controller.

267
00:11:40,406 --> 00:11:42,366 A:middle
Hey, how many things
show up in my page view?

268
00:11:42,696 --> 00:11:44,656 A:middle
Give me the next thing that's
going to show up in here.

269
00:11:45,096 --> 00:11:48,886 A:middle
So again, if you understand
data source in one context,

270
00:11:48,886 --> 00:11:51,096 A:middle
when you see that
word data source,

271
00:11:51,186 --> 00:11:53,266 A:middle
it means the same
thing throughout all

272
00:11:53,266 --> 00:11:54,026 A:middle
of the frameworks.

273
00:11:54,376 --> 00:11:56,316 A:middle
So again, you get to
leverage that learning

274
00:11:56,316 --> 00:11:57,886 A:middle
across all different things.

275
00:11:57,886 --> 00:12:01,636 A:middle
So back to the definition
here of data source.

276

277
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

278
00:11:57,886 --> 00:12:01,636 A:middle
So back to the definition
here of data source.

279
00:12:02,076 --> 00:12:05,026 A:middle
Customize data retrieval
without subclassing.

280
00:12:06,006 --> 00:12:06,996 A:middle
That looks an awful lot

281
00:12:06,996 --> 00:12:09,666 A:middle
like customize behavior
without subclassing.

282
00:12:10,016 --> 00:12:12,866 A:middle
And in fact these two
ideas are really similar.

283
00:12:13,246 --> 00:12:16,206 A:middle
It's the idea of
composing an object rather

284
00:12:16,206 --> 00:12:20,016 A:middle
than extending a class, and so
you use a couple of objects,

285
00:12:20,016 --> 00:12:22,426 A:middle
compose them together
to get custom behavior,

286
00:12:22,776 --> 00:12:24,226 A:middle
rather than subclassing.

287
00:12:24,226 --> 00:12:26,526 A:middle
It's a powerful idea
that we use, like I said,

288
00:12:26,526 --> 00:12:27,746 A:middle
in many different places.

289
00:12:29,046 --> 00:12:30,066 A:middle
So that's data source.

290
00:12:30,066 --> 00:12:34,386 A:middle
It allows you to customize where
data comes from for an object

291
00:12:34,386 --> 00:12:37,046 A:middle
that needs data without having
to subclass that object.

292
00:12:37,476 --> 00:12:42,276 A:middle
All right, next up is
Model View Controller.

293
00:12:42,796 --> 00:12:45,656 A:middle
Model View Controller is in lots
and lots of our documentation,

294
00:12:45,656 --> 00:12:48,356 A:middle
lots of books have
lots of things to say

295
00:12:48,356 --> 00:12:49,456 A:middle
about model view controller.

296
00:12:49,546 --> 00:12:53,236 A:middle
There's probably a definition
for Model View Controller

297
00:12:53,496 --> 00:12:54,756 A:middle
for every person in here.

298
00:12:55,316 --> 00:12:56,976 A:middle
Or maybe more.

299
00:12:57,636 --> 00:13:00,636 A:middle
The way I like to think about it
is Model View Controller gives

300

301
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

302
00:12:57,636 --> 00:13:00,636 A:middle
The way I like to think about it
is Model View Controller gives

303
00:13:00,636 --> 00:13:05,196 A:middle
us a way to organize, to build
an organizational structure

304
00:13:05,496 --> 00:13:08,866 A:middle
around the responsibilities
that our application has.

305
00:13:11,316 --> 00:13:14,056 A:middle
So let's start off
talking about the model.

306
00:13:14,686 --> 00:13:16,496 A:middle
So I like to think of
the model, or the way I

307
00:13:16,496 --> 00:13:17,826 A:middle
like to describe how to think

308
00:13:17,826 --> 00:13:20,236 A:middle
about the model is it's
the data, it's the stuff

309
00:13:20,306 --> 00:13:21,546 A:middle
that makes up your application.

310
00:13:21,546 --> 00:13:23,286 A:middle
And this is typically something

311
00:13:23,286 --> 00:13:25,586 A:middle
that people don't have
trouble getting their heads

312
00:13:25,586 --> 00:13:26,216 A:middle
wrapped around.

313
00:13:26,216 --> 00:13:28,716 A:middle
They typically can look at
what their application is doing

314
00:13:28,716 --> 00:13:31,086 A:middle
and say "Oh, I see,
that's a model object."

315
00:13:32,996 --> 00:13:37,446 A:middle
The view also ends up being a
pretty well understood piece

316
00:13:37,496 --> 00:13:39,536 A:middle
of the MVC puzzle.

317
00:13:39,836 --> 00:13:42,866 A:middle
It's the thing that displays
the information to the user,

318
00:13:43,316 --> 00:13:46,896 A:middle
and takes user interaction,
taps and moves and so forth,

319
00:13:47,086 --> 00:13:49,536 A:middle
and turns those into state
changes on the model--

320
00:13:49,536 --> 00:13:53,576 A:middle
or sorry, and allows the user
to make those kind of gestures,

321
00:13:53,816 --> 00:13:56,976 A:middle
and the controller is then
what's responsible for shuffling

322
00:13:56,976 --> 00:14:00,666 A:middle
that back and forth, so it takes
information from the model,

323

324
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

325
00:13:56,976 --> 00:14:00,666 A:middle
that back and forth, so it takes
information from the model,

326
00:14:00,666 --> 00:14:03,636 A:middle
and shuffles it so that it
can show up in the view,

327
00:14:03,686 --> 00:14:05,826 A:middle
and then takes the user's
interaction in the view

328
00:14:06,006 --> 00:14:09,626 A:middle
and shuffles that back into
state updates on the model side.

329
00:14:10,386 --> 00:14:12,966 A:middle
So that's model view controller.

330
00:14:13,186 --> 00:14:15,426 A:middle
An organizational structure
for how we can think

331
00:14:15,426 --> 00:14:18,116 A:middle
about the objects and
their responsibilities

332
00:14:18,246 --> 00:14:19,316 A:middle
in our applications.

333
00:14:20,536 --> 00:14:23,466 A:middle
So now let's take these
ideas, these set of patterns

334
00:14:23,506 --> 00:14:24,766 A:middle
that we've discussed, and talk

335
00:14:24,766 --> 00:14:28,916 A:middle
about how they apply
in our applications.

336
00:14:28,916 --> 00:14:29,816 A:middle
How they're used.

337
00:14:30,866 --> 00:14:32,856 A:middle
To do that, we're
going to sort of think

338
00:14:32,856 --> 00:14:34,846 A:middle
through a sample application.

339
00:14:36,106 --> 00:14:39,566 A:middle
And when you build an
application, I hope that all

340
00:14:39,566 --> 00:14:42,686 A:middle
of you have downloaded the HIG,
the Human Interface Guidelines.

341
00:14:43,076 --> 00:14:44,396 A:middle
It's in iBooks as well.

342
00:14:44,396 --> 00:14:45,876 A:middle
It's very near the Swift book.

343
00:14:45,876 --> 00:14:48,106 A:middle
If you go look at the
Swift book and then you tap

344
00:14:48,106 --> 00:14:50,756 A:middle
on related books, you should
see the HIG book in there.

345
00:14:51,256 --> 00:14:52,486 A:middle
In there, there's
a whole section

346
00:14:52,486 --> 00:14:53,786 A:middle
where we spend time talking

347
00:14:53,786 --> 00:14:55,286 A:middle
about something called
an application

348
00:14:55,286 --> 00:14:56,326 A:middle
definition statement.

349
00:14:56,836 --> 00:15:00,146 A:middle
Many people who have unfocused
applications aren't able

350

351
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

352
00:14:56,836 --> 00:15:00,146 A:middle
Many people who have unfocused
applications aren't able

353
00:15:00,146 --> 00:15:01,006 A:middle
to come up with this.

354
00:15:01,036 --> 00:15:04,996 A:middle
Their architecture ends up being
very disbursed or whatever,

355
00:15:04,996 --> 00:15:06,066 A:middle
not well thought-through.

356
00:15:06,806 --> 00:15:09,696 A:middle
So I like to tell people to
really spend some time thinking

357
00:15:09,696 --> 00:15:11,756 A:middle
about this 30 second
elevator pitch

358
00:15:11,756 --> 00:15:14,456 A:middle
of what your application
is and who it's for.

359
00:15:14,986 --> 00:15:17,246 A:middle
So our application is
going to allow people

360
00:15:17,246 --> 00:15:19,566 A:middle
to share simple short updates

361
00:15:19,626 --> 00:15:21,396 A:middle
about what's happening
in their lives.

362
00:15:22,056 --> 00:15:24,536 A:middle
So this simple phrase
here has a bunch

363
00:15:24,536 --> 00:15:25,956 A:middle
of architectural implications

364
00:15:25,956 --> 00:15:27,656 A:middle
for what our application
needs to look like.

365
00:15:28,186 --> 00:15:30,346 A:middle
And some requirements
that the application has.

366
00:15:31,346 --> 00:15:33,866 A:middle
So the application
needs to share.

367
00:15:34,416 --> 00:15:36,656 A:middle
So if I'm going to share
some information with you

368
00:15:36,656 --> 00:15:38,416 A:middle
and we happen to be
in different places,

369
00:15:38,506 --> 00:15:41,056 A:middle
we need to have a network, so
I can take that information,

370
00:15:41,106 --> 00:15:42,166 A:middle
push it out to the Internet,

371
00:15:42,166 --> 00:15:44,076 A:middle
and then you're able
to pull it down.

372
00:15:44,736 --> 00:15:47,556 A:middle
It's going to be short updates.

373
00:15:47,626 --> 00:15:49,416 A:middle
That sort of implies
there's going to be a lot,

374
00:15:49,536 --> 00:15:51,996 A:middle
so we have a scrolling
list of information.

375
00:15:52,656 --> 00:15:54,216 A:middle
And then finally,
what's happening,

376
00:15:54,496 --> 00:15:58,326 A:middle
and since it's what's happening
now, it needs to be fast.

377
00:15:59,016 --> 00:16:03,086 A:middle
So we'll call our application
Qwinkle, and here's a few ideas

378

379
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

380
00:15:59,016 --> 00:16:03,086 A:middle
So we'll call our application
Qwinkle, and here's a few ideas

381
00:16:03,116 --> 00:16:06,936 A:middle
of things that this
application needs to do,

382
00:16:06,936 --> 00:16:08,156 A:middle
or we might want it to do.

383
00:16:08,866 --> 00:16:11,416 A:middle
Mark items, edit
post, add photos.

384
00:16:12,266 --> 00:16:14,006 A:middle
So in the process
of sort of thinking

385
00:16:14,006 --> 00:16:15,846 A:middle
through what our
application does

386
00:16:15,846 --> 00:16:17,986 A:middle
and then what the architecture
of it is going to be,

387
00:16:18,266 --> 00:16:19,666 A:middle
this is sort of the process I go

388
00:16:19,666 --> 00:16:21,016 A:middle
through whenever
I'm building an app.

389
00:16:21,596 --> 00:16:23,406 A:middle
What's the application
definition statement?

390
00:16:23,756 --> 00:16:26,876 A:middle
From that, I get a list of
features that I think might fit

391
00:16:26,876 --> 00:16:29,906 A:middle
in that, and then, the
all-important step of figuring

392
00:16:29,906 --> 00:16:31,256 A:middle
out what to say no to.

393
00:16:31,566 --> 00:16:35,376 A:middle
So you have this long list, then
you run it through the filter,

394
00:16:35,376 --> 00:16:37,016 A:middle
of what is my application about?

395
00:16:37,016 --> 00:16:39,376 A:middle
What's the first thing
that I need to focus on?

396
00:16:39,376 --> 00:16:41,676 A:middle
What's the most important
thing that I want to focus on?

397
00:16:42,146 --> 00:16:43,116 A:middle
And so that's going to allow us

398
00:16:43,116 --> 00:16:45,216 A:middle
to drop these last three
entries, and we're just going

399
00:16:45,216 --> 00:16:46,926 A:middle
to focus on these
first four things

400
00:16:47,026 --> 00:16:49,086 A:middle
for how our application
is going to work.

401
00:16:50,196 --> 00:16:52,906 A:middle
So now let's go through and
talk in a little more detail

402
00:16:52,906 --> 00:16:54,146 A:middle
about the application, now

403
00:16:54,146 --> 00:16:55,906 A:middle
that we have a sort
of a picture of it.

404
00:16:56,156 --> 00:16:58,336 A:middle
So here's a wire frame
of the application.

405
00:16:58,756 --> 00:17:00,716 A:middle
We have a list of
updates from our friends.

406

407
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

408
00:16:58,756 --> 00:17:00,716 A:middle
We have a list of
updates from our friends.

409
00:17:01,456 --> 00:17:05,306 A:middle
They have avatars, and then
we have this plus button

410
00:17:05,306 --> 00:17:07,656 A:middle
on the top, where we
can add a new entry.

411
00:17:08,286 --> 00:17:10,796 A:middle
So the first thing to do is sort

412
00:17:10,796 --> 00:17:13,205 A:middle
of spend some time
conceptualizing what does our

413
00:17:13,205 --> 00:17:16,006 A:middle
application look
like through the lens

414
00:17:16,066 --> 00:17:18,195 A:middle
of the Model View
Controller design paradigm.

415
00:17:18,506 --> 00:17:21,126 A:middle
And the first thing I like to
do is talk about the model.

416
00:17:22,496 --> 00:17:27,116 A:middle
And a really good sort of first
cut approach at how to come

417
00:17:27,116 --> 00:17:29,246 A:middle
up with what does the
model look like, I think,

418
00:17:29,356 --> 00:17:32,226 A:middle
is to write down
some user stories,

419
00:17:32,226 --> 00:17:35,246 A:middle
or maybe if you've ever used CRC
cards, like the titles of those,

420
00:17:35,616 --> 00:17:38,916 A:middle
the list of things that you know
that the application is going

421
00:17:38,916 --> 00:17:41,116 A:middle
to have to do, and then
pull the nouns out.

422
00:17:41,186 --> 00:17:44,006 A:middle
So here we have a statement
a user can specify an avatar,

423
00:17:44,936 --> 00:17:48,586 A:middle
well that tells us user and
avatar, these other statements--

424
00:17:48,586 --> 00:17:51,706 A:middle
a user can have an entry,
a user can follow a friend,

425
00:17:52,136 --> 00:17:54,566 A:middle
so there's relationships
between these users.

426
00:17:54,996 --> 00:17:56,796 A:middle
All of these items,
all the nouns

427
00:17:56,796 --> 00:18:00,396 A:middle
out of this list tell us
what the model objects are,

428

429
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

430
00:17:56,796 --> 00:18:00,396 A:middle
out of this list tell us
what the model objects are,

431
00:18:01,406 --> 00:18:03,756 A:middle
and so from that, we come
up with this simple model

432
00:18:03,756 --> 00:18:06,446 A:middle
where we have Qwinkers have
friends, they have avatars,

433
00:18:06,446 --> 00:18:10,286 A:middle
and then they have a list of
Qwinks, so that's the model.

434
00:18:11,116 --> 00:18:12,316 A:middle
Next up is the view.

435
00:18:12,756 --> 00:18:15,466 A:middle
So how we're going to display
this, since we're using UI Kit,

436
00:18:15,466 --> 00:18:17,236 A:middle
we're on top of iOS,
and we're going

437
00:18:17,236 --> 00:18:18,596 A:middle
to make a beautiful application.

438
00:18:18,596 --> 00:18:21,846 A:middle
We're going to use a table view.

439
00:18:22,776 --> 00:18:25,216 A:middle
That table view is
arranged in a composite.

440
00:18:25,216 --> 00:18:27,436 A:middle
Of course you have the
table view at the top.

441
00:18:27,636 --> 00:18:29,456 A:middle
It has a list of
table view cells.

442
00:18:29,506 --> 00:18:32,986 A:middle
Those table view cells have a
text view and an image view.

443
00:18:34,076 --> 00:18:35,886 A:middle
Since they are arranged
in a composite,

444
00:18:35,886 --> 00:18:39,346 A:middle
whenever this table view
scrolls, and I move its bounds,

445
00:18:39,896 --> 00:18:41,706 A:middle
I only have to move
the table view.

446
00:18:41,956 --> 00:18:43,646 A:middle
Aren't you glad you
don't have to iterate

447
00:18:43,646 --> 00:18:46,816 A:middle
through all the table view cells
in your table view and move them

448
00:18:46,816 --> 00:18:47,936 A:middle
by the appropriate amount?

449
00:18:48,806 --> 00:18:51,496 A:middle
I do enough math without
having to do that.

450
00:18:52,276 --> 00:18:53,526 A:middle
All right, so that's the view.

451
00:18:53,736 --> 00:18:56,896 A:middle
Next up is the controller.

452
00:18:57,716 --> 00:19:00,476 A:middle
Now, remember the controller's
role in our application is

453

454
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

455
00:18:57,716 --> 00:19:00,476 A:middle
Now, remember the controller's
role in our application is

456
00:19:00,476 --> 00:19:02,926 A:middle
to shuffle the data between
the model and the view,

457
00:19:02,926 --> 00:19:06,546 A:middle
and then take updates, and
apply that back to the model.

458
00:19:07,746 --> 00:19:10,616 A:middle
So our view controller
is going to act

459
00:19:10,916 --> 00:19:14,126 A:middle
as the data source
for our table view.

460
00:19:14,416 --> 00:19:15,926 A:middle
So we have our UITableView.

461
00:19:15,926 --> 00:19:18,816 A:middle
It has this dotted line
or weak relationship

462
00:19:18,816 --> 00:19:22,756 A:middle
to its view controller, and that
view controller implements the

463
00:19:22,756 --> 00:19:23,916 A:middle
data source protocol.

464
00:19:24,296 --> 00:19:26,716 A:middle
So our view controller is
going to tell the table view,

465
00:19:26,716 --> 00:19:29,236 A:middle
here's the number of sections
and here's the number of rows,

466
00:19:29,696 --> 00:19:31,776 A:middle
based on interacting
with the model.

467
00:19:37,386 --> 00:19:41,806 A:middle
Our view controller will also
be activated, will be told

468
00:19:41,806 --> 00:19:44,056 A:middle
to do things by the
user interface,

469
00:19:44,196 --> 00:19:46,836 A:middle
and will use target action, of
course, to make that connection.

470
00:19:46,836 --> 00:19:48,216 A:middle
So when you tap on
the plus button,

471
00:19:48,656 --> 00:19:49,766 A:middle
it says "what's my target?"

472
00:19:49,766 --> 00:19:52,006 A:middle
Oh, my target is this
object here, which happens

473
00:19:52,006 --> 00:19:53,276 A:middle
to be the Qwinks
view controller,

474
00:19:53,606 --> 00:19:54,776 A:middle
what message should I send?

475
00:19:54,886 --> 00:19:57,326 A:middle
Oh, that's the add
a new entry message.

476
00:19:57,856 --> 00:20:02,376 A:middle
Our view controller is also
responsible for dealing

477

478
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

479
00:19:57,856 --> 00:20:02,376 A:middle
Our view controller is also
responsible for dealing

480
00:20:02,376 --> 00:20:03,606 A:middle
with the networking stuff.

481
00:20:03,716 --> 00:20:06,286 A:middle
So the view controller has
to manage the networking.

482
00:20:06,806 --> 00:20:08,926 A:middle
It has to be able to get
the data from the internet,

483
00:20:09,356 --> 00:20:10,976 A:middle
turn it into objects that we
can display on the screen.

484
00:20:11,066 --> 00:20:14,416 A:middle
We'll talk in more
detail about that shortly.

485
00:20:14,836 --> 00:20:21,416 A:middle
So that is the model
view and controller

486
00:20:21,416 --> 00:20:24,626 A:middle
for this initial scene
in our application.

487
00:20:25,176 --> 00:20:28,046 A:middle
We have our Public
Timeline View Controller,

488
00:20:28,216 --> 00:20:31,296 A:middle
which acts as the data
source for the table view,

489
00:20:31,656 --> 00:20:36,266 A:middle
and is able to get information
from the model and shuffle

490
00:20:36,266 --> 00:20:38,666 A:middle
that into the view
by implementing

491
00:20:38,666 --> 00:20:41,156 A:middle
that table view data
source protocol method.

492
00:20:41,826 --> 00:20:44,786 A:middle
The entry view-- sorry, the
table view, is a composite.

493
00:20:44,786 --> 00:20:47,826 A:middle
When we scroll it, everything
moves together as one.

494
00:20:47,826 --> 00:20:51,306 A:middle
The next piece that
we had talked

495
00:20:51,306 --> 00:20:54,726 A:middle
about was adding a new entry.

496
00:20:55,566 --> 00:20:58,266 A:middle
So when the user is
adding a new entry,

497
00:20:58,266 --> 00:21:01,406 A:middle
we're going to have a new view
controller, and a new view,

498

499
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

500
00:20:58,266 --> 00:21:01,406 A:middle
we're going to have a new view
controller, and a new view,

501
00:21:01,406 --> 00:21:03,236 A:middle
because we have a different
way to present stuff.

502
00:21:03,666 --> 00:21:06,486 A:middle
But the model class, the
set of model classes,

503
00:21:06,486 --> 00:21:07,666 A:middle
is going to be reused.

504
00:21:07,666 --> 00:21:10,596 A:middle
We're going to use the same
classes to represent that data.

505
00:21:11,096 --> 00:21:12,606 A:middle
So it's a different
amount of shuffling,

506
00:21:12,606 --> 00:21:14,116 A:middle
or a different kind
of shuffling, right?

507
00:21:14,146 --> 00:21:17,116 A:middle
Because we're shuffling
data for a particular entry

508
00:21:17,116 --> 00:21:18,806 A:middle
into the view, and
of course the view,

509
00:21:18,806 --> 00:21:21,666 A:middle
what the view does is different,
so there's different stuff

510
00:21:21,666 --> 00:21:22,786 A:middle
for the controller to do.

511
00:21:23,176 --> 00:21:24,876 A:middle
The model class ends
up being the same.

512
00:21:24,876 --> 00:21:27,166 A:middle
So we're able to reuse that.

513
00:21:28,756 --> 00:21:33,926 A:middle
So the user taps on the button,
that sends the action message

514
00:21:33,966 --> 00:21:36,446 A:middle
to its target, which is the
Public Timeline View Controller.

515
00:21:36,956 --> 00:21:41,536 A:middle
We present the add a new
entry, and then these cancel

516
00:21:41,536 --> 00:21:44,536 A:middle
and done buttons would be
connected via target action

517
00:21:44,996 --> 00:21:46,476 A:middle
to the new entry
view controller.

518
00:21:50,396 --> 00:21:52,966 A:middle
Now this view controller
also has

519
00:21:52,966 --> 00:21:54,076 A:middle
to interface with the network.

520
00:21:55,016 --> 00:21:57,556 A:middle
When the user finishes
entering this new entry

521
00:21:57,556 --> 00:21:59,876 A:middle
and they tap the done
button, we need to package

522
00:21:59,876 --> 00:22:01,876 A:middle
up this information, push
it out to the internet,

523

524
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

525
00:21:59,876 --> 00:22:01,876 A:middle
up this information, push
it out to the internet,

526
00:22:01,876 --> 00:22:03,726 A:middle
it's going to live on
some server somewhere.

527
00:22:04,606 --> 00:22:06,666 A:middle
There's a potential
smell going on there,

528
00:22:06,836 --> 00:22:09,616 A:middle
because now we have two
controllers that have

529
00:22:09,676 --> 00:22:11,786 A:middle
to manage the same
kind of stuff,

530
00:22:12,206 --> 00:22:13,776 A:middle
and that's probably not good.

531
00:22:14,236 --> 00:22:15,726 A:middle
We'll talk more about
it shortly.

532
00:22:16,356 --> 00:22:20,236 A:middle
The last piece of taking
our common set of patterns

533
00:22:20,236 --> 00:22:22,286 A:middle
and looking at the way they
work in this application,

534
00:22:23,696 --> 00:22:24,936 A:middle
the UI Application
is, of course,

535
00:22:24,936 --> 00:22:26,926 A:middle
going to have an app
delegate for application,

536
00:22:26,926 --> 00:22:29,476 A:middle
and that's going to handle
things like state restoration,

537
00:22:29,726 --> 00:22:32,526 A:middle
it's going to handle
background downloading,

538
00:22:32,526 --> 00:22:34,546 A:middle
and the application
becoming active and going

539
00:22:34,546 --> 00:22:35,666 A:middle
into the background
and so forth,

540
00:22:35,716 --> 00:22:39,096 A:middle
that whole stack of stuff.

541
00:22:39,316 --> 00:22:42,236 A:middle
So now we have this
built, and change happens.

542
00:22:44,526 --> 00:22:46,926 A:middle
Our users come up with new
things that they want to do.

543
00:22:47,076 --> 00:22:49,496 A:middle
Our designers come to us and
say hey, can you change this,

544
00:22:49,496 --> 00:22:50,956 A:middle
and make this thing
do this other thing?

545
00:22:50,956 --> 00:22:51,606 A:middle
And so forth.

546
00:22:52,626 --> 00:22:54,826 A:middle
So we have our initial
table view controller,

547
00:22:55,346 --> 00:22:58,836 A:middle
and our next set of requirements
that we want to address is

548
00:22:58,876 --> 00:23:01,356 A:middle
to be able to send
private messages.

549

550
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

551
00:22:58,876 --> 00:23:01,356 A:middle
to be able to send
private messages.

552
00:23:02,176 --> 00:23:06,246 A:middle
So now we have our
initial view controller,

553
00:23:06,536 --> 00:23:08,876 A:middle
which has this networking
code in it.

554
00:23:09,236 --> 00:23:12,386 A:middle
What are we going to do about
this new view controller?

555
00:23:12,686 --> 00:23:17,246 A:middle
It also needs to have
networking code in it.

556
00:23:18,046 --> 00:23:21,006 A:middle
This is really starting to be
some pretty smelly code, right?

557
00:23:21,096 --> 00:23:23,476 A:middle
We don't want to
copy and paste this.

558
00:23:23,476 --> 00:23:26,436 A:middle
If we took the understanding
of how to download information

559
00:23:26,436 --> 00:23:28,816 A:middle
from that initial view
controller, we could, of course,

560
00:23:28,996 --> 00:23:31,636 A:middle
copy and paste it into
our new view controller,

561
00:23:32,046 --> 00:23:34,916 A:middle
but then what happens over
time if something changes,

562
00:23:34,916 --> 00:23:36,386 A:middle
a URL changes, or
who knows what else?

563
00:23:36,416 --> 00:23:38,016 A:middle
The interface to
that thing changes,

564
00:23:38,566 --> 00:23:40,546 A:middle
and we have copy
and pasted code.

565
00:23:40,546 --> 00:23:42,296 A:middle
Now when we fix it in
one place, it's not going

566
00:23:42,296 --> 00:23:43,296 A:middle
to get updated in the others.

567
00:23:43,296 --> 00:23:45,246 A:middle
So bad idea.

568
00:23:46,296 --> 00:23:49,306 A:middle
So instead, what we will do is
let's re-factor this and pull

569
00:23:49,306 --> 00:23:53,036 A:middle
that URL code out of the
view controllers and put it

570
00:23:53,036 --> 00:23:54,946 A:middle
into a download service.

571
00:23:57,376 --> 00:23:59,536 A:middle
When we do that re-factoring,
we'll start off

572
00:23:59,536 --> 00:24:00,996 A:middle
with our Public Timeline
View Controller,

573

574
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

575
00:23:59,536 --> 00:24:00,996 A:middle
with our Public Timeline
View Controller,

576
00:24:00,996 --> 00:24:04,036 A:middle
which probably had
the networking code

577
00:24:04,036 --> 00:24:04,846 A:middle
in it to start with.

578
00:24:05,506 --> 00:24:08,306 A:middle
We'll pull all of that
from the view controller

579
00:24:08,466 --> 00:24:10,226 A:middle
into the download service.

580
00:24:10,786 --> 00:24:18,776 A:middle
So we'll call download on that
object, and when it's done,

581
00:24:19,536 --> 00:24:21,386 A:middle
it's going to send
back a response.

582
00:24:21,936 --> 00:24:24,746 A:middle
Now, I put a solid line in here
specifically because I want

583
00:24:24,746 --> 00:24:28,186 A:middle
to talk through the idea of
making a hard relationship

584
00:24:28,186 --> 00:24:29,306 A:middle
between these two things.

585
00:24:30,086 --> 00:24:32,116 A:middle
The Public Timeline
View Controller has

586
00:24:32,116 --> 00:24:33,736 A:middle
to know the download
service, because it's going

587
00:24:33,736 --> 00:24:35,486 A:middle
to be responsible
for creating it,

588
00:24:35,906 --> 00:24:37,236 A:middle
but it's the download service,

589
00:24:37,376 --> 00:24:39,446 A:middle
also has the hard
relationship back

590
00:24:39,516 --> 00:24:41,766 A:middle
to the Public Timeline View
Controller, then we're going

591
00:24:41,766 --> 00:24:43,946 A:middle
to have to add a property
to that download service,

592
00:24:43,946 --> 00:24:45,606 A:middle
and it's going to have
to have a relationship

593
00:24:45,606 --> 00:24:47,156 A:middle
to this Public Timeline
View Controller.

594
00:24:48,176 --> 00:24:49,796 A:middle
When we add a new
view controller,

595
00:24:50,176 --> 00:24:51,376 A:middle
do we add a new property?

596
00:24:51,376 --> 00:24:52,836 A:middle
Like, we don't want
to go down that path.

597
00:24:53,346 --> 00:24:55,256 A:middle
So instead let's make

598
00:24:55,256 --> 00:24:58,916 A:middle
that a weak relationship,
and use delegation.

599

600
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

601
00:25:00,306 --> 00:25:03,386 A:middle
So notice how we took the idea
of delegation that we have

602
00:25:03,956 --> 00:25:06,266 A:middle
in UIKit, and now we're applying

603
00:25:06,266 --> 00:25:08,336 A:middle
that to the code
in our application.

604
00:25:08,936 --> 00:25:11,336 A:middle
We're going to define
a delegate protocol

605
00:25:11,646 --> 00:25:14,686 A:middle
for this download service
to call back to our code,

606
00:25:14,686 --> 00:25:16,946 A:middle
so that we can customize
what happens

607
00:25:16,946 --> 00:25:18,876 A:middle
when that download
service does things,

608
00:25:19,246 --> 00:25:21,126 A:middle
like when it finishes
downloading code,

609
00:25:21,126 --> 00:25:24,586 A:middle
or downloading a JSON
file and so forth.

610
00:25:26,116 --> 00:25:29,816 A:middle
Now, when we need to use
this again, to interface

611
00:25:29,816 --> 00:25:32,926 A:middle
with the private message view
controller, it implements

612
00:25:32,926 --> 00:25:34,466 A:middle
that download service delegate,

613
00:25:34,896 --> 00:25:37,566 A:middle
and the download service
doesn't have to know anything

614
00:25:37,566 --> 00:25:40,106 A:middle
about either of those
types other than the fact

615
00:25:40,296 --> 00:25:42,986 A:middle
that they implement
that protocol.

616
00:25:42,986 --> 00:25:47,006 A:middle
All right, and with that,
let's go take a look

617
00:25:47,006 --> 00:25:47,516 A:middle
at the demo [beep sound].

618
00:25:49,846 --> 00:25:51,356 A:middle
All right, when I
started writing the demo,

619
00:25:51,356 --> 00:25:52,596 A:middle
I sort of went off the deep end,

620
00:25:52,596 --> 00:25:54,566 A:middle
and I tried to build
this whole application,

621
00:25:54,566 --> 00:25:58,506 A:middle
I was building a service, and I
realized this is just too much

622
00:25:58,506 --> 00:26:01,646 A:middle
for us to cover in the last 15
minutes or so that we have left,

623

624
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

625
00:25:58,506 --> 00:26:01,646 A:middle
for us to cover in the last 15
minutes or so that we have left,

626
00:26:01,646 --> 00:26:05,266 A:middle
so instead, what I've done is
I've made a vastly simplified

627
00:26:05,786 --> 00:26:07,326 A:middle
idea of this application.

628
00:26:07,326 --> 00:26:16,556 A:middle
Let me run it for you, and
I'll talk through what it does.

629
00:26:16,806 --> 00:26:22,116 A:middle
So I started with the master
detail template out of X code,

630
00:26:22,576 --> 00:26:25,206 A:middle
which creates for you a table
view, and then that table view,

631
00:26:25,206 --> 00:26:27,026 A:middle
when you tap on items
in there, it navigates

632
00:26:27,026 --> 00:26:28,176 A:middle
to a detailed view controller.

633
00:26:28,496 --> 00:26:30,196 A:middle
I took out the detailed
view controller just

634
00:26:30,196 --> 00:26:32,256 A:middle
so we would have focus on
this one view controller.

635
00:26:33,006 --> 00:26:36,526 A:middle
I added a refresh control,
so that when you pull down,

636
00:26:36,936 --> 00:26:40,536 A:middle
it kicks off the refresh, it
downloads some information,

637
00:26:40,536 --> 00:26:42,726 A:middle
and then it logs in the
background to let us know

638
00:26:42,726 --> 00:26:45,026 A:middle
that it was successful in
downloading that information.

639
00:26:45,286 --> 00:26:47,806 A:middle
So in a real application,
of course, you're going

640
00:26:47,806 --> 00:26:50,456 A:middle
to be processing the JSON that
comes back from that download,

641
00:26:50,456 --> 00:26:51,946 A:middle
and doing all sorts
of fancy stuff.

642
00:26:51,946 --> 00:26:54,206 A:middle
But for our demo, we're
going to be simple,

643
00:26:54,206 --> 00:26:56,306 A:middle
and just have this
download happen.

644
00:26:56,626 --> 00:27:00,916 A:middle
So let's look at the way the
code works over here, briefly.

645

646
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

647
00:26:56,626 --> 00:27:00,916 A:middle
So let's look at the way the
code works over here, briefly.

648
00:27:02,106 --> 00:27:04,076 A:middle
So here's our view controller,

649
00:27:04,076 --> 00:27:07,386 A:middle
and notice it's implementing
all these delegate protocols

650
00:27:07,386 --> 00:27:09,166 A:middle
for the NS URL stuff.

651
00:27:10,026 --> 00:27:13,506 A:middle
We want to move that
from our view controller,

652
00:27:13,506 --> 00:27:15,816 A:middle
over to this new object,
the download service

653
00:27:15,856 --> 00:27:16,716 A:middle
that we're going to implement.

654
00:27:17,076 --> 00:27:21,296 A:middle
We don't want our table view
controller to understand all

655
00:27:21,296 --> 00:27:23,836 A:middle
of this detail about
how networking works.

656
00:27:23,836 --> 00:27:26,306 A:middle
We want to capture that in
one place so we can reuse it.

657
00:27:27,626 --> 00:27:31,286 A:middle
So we're going to go
through all this code here

658
00:27:31,286 --> 00:27:32,986 A:middle
that does all that,
and just move it.

659
00:27:33,246 --> 00:27:34,406 A:middle
Now, I'm not going
to make you sit

660
00:27:34,886 --> 00:27:37,506 A:middle
and watch me type all this stuff
in and copy and paste it in,

661
00:27:37,506 --> 00:27:39,406 A:middle
and have me mess it up
and have it not work.

662
00:27:39,996 --> 00:27:43,306 A:middle
So instead, I have
a bunch of get tags

663
00:27:43,616 --> 00:27:43,936 A:middle
in here [tapping sounds].

664
00:27:45,246 --> 00:27:59,736 A:middle
Awesome! Okay, so our view
controller now no longer has

665
00:27:59,836 --> 00:28:03,326 A:middle
this knowledge about the URL
session and how it works.

666

667
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

668
00:27:59,836 --> 00:28:03,326 A:middle
this knowledge about the URL
session and how it works.

669
00:28:03,326 --> 00:28:05,516 A:middle
We removed all those,
and moved them

670
00:28:05,516 --> 00:28:08,376 A:middle
over to our download service.

671
00:28:08,476 --> 00:28:12,036 A:middle
We also took all that code from
in here that was interfacing

672
00:28:12,036 --> 00:28:16,576 A:middle
with the network, and moved that
over to our download service.

673
00:28:22,116 --> 00:28:26,366 A:middle
And that's the URL that we're
using to download and so forth.

674
00:28:27,246 --> 00:28:31,346 A:middle
So our view controller did
have all this knowledge,

675
00:28:31,716 --> 00:28:35,636 A:middle
and we've moved it over
into our download service.

676
00:28:35,636 --> 00:28:37,926 A:middle
Now the download service
has all that information.

677
00:28:38,546 --> 00:28:43,886 A:middle
Our download service, though,
doesn't have any API on it yet.

678
00:28:44,076 --> 00:28:46,706 A:middle
So we haven't made it so that we
can actually interface with it.

679
00:28:47,006 --> 00:28:51,496 A:middle
Our view controller still has to
manage making the network call.

680
00:28:51,496 --> 00:28:53,986 A:middle
Right? We don't want the
download service just going

681
00:28:53,986 --> 00:28:56,056 A:middle
rogue and downloading stuff
whenever it feels like it.

682
00:28:56,416 --> 00:29:00,056 A:middle
The view controller, being in
control of how things happen

683

684
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

685
00:28:56,416 --> 00:29:00,056 A:middle
The view controller, being in
control of how things happen

686
00:29:00,056 --> 00:29:03,216 A:middle
with the user, taking the
user's input from the screen

687
00:29:03,216 --> 00:29:06,466 A:middle
and turning that into stuff
that happens on the back end,

688
00:29:06,756 --> 00:29:09,106 A:middle
we want the view
controller to be in charge

689
00:29:09,106 --> 00:29:10,046 A:middle
of making that happen.

690
00:29:10,426 --> 00:29:13,326 A:middle
So we need to add a couple of
methods to our download service

691
00:29:13,666 --> 00:29:16,016 A:middle
to allow it to first
do the connection,

692
00:29:16,356 --> 00:29:19,436 A:middle
create the NS URL session,
all the configuration stuff

693
00:29:19,596 --> 00:29:22,186 A:middle
that goes along with that,
and then we also want a method

694
00:29:22,266 --> 00:29:27,136 A:middle
to start that, to kick it off.

695
00:29:27,816 --> 00:29:30,326 A:middle
So we'll do another magic
switcho-change-o [assumed

696
00:29:31,206 --> 00:29:36,956 A:middle
spelling], and our download
service now has these two

697
00:29:36,956 --> 00:29:39,866 A:middle
methods connect and start.

698
00:29:40,836 --> 00:29:44,336 A:middle
In the connect method,

699
00:29:44,336 --> 00:29:48,486 A:middle
we're creating NS URL
session configuration stuff,

700
00:29:48,486 --> 00:29:50,776 A:middle
and then in the start method,
we create the download task

701
00:29:50,776 --> 00:29:51,846 A:middle
and tell that to start.

702
00:29:53,236 --> 00:29:54,966 A:middle
From our master view controller,

703
00:29:55,736 --> 00:30:00,626 A:middle
we are still kicking
off the download

704

705
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

706
00:29:55,736 --> 00:30:00,626 A:middle
we are still kicking
off the download

707
00:30:01,076 --> 00:30:04,126 A:middle
from our refresh
control, and of course,

708
00:30:04,126 --> 00:30:07,446 A:middle
that refresh control uses
target action in order

709
00:30:07,446 --> 00:30:11,506 A:middle
to make the connection between
the control and our custom code.

710
00:30:11,576 --> 00:30:14,456 A:middle
But we've greatly
simplified what's happening

711
00:30:14,456 --> 00:30:15,346 A:middle
in our view controller.

712
00:30:15,346 --> 00:30:18,076 A:middle
Instead of it having any
knowledge about this networking,

713
00:30:18,376 --> 00:30:21,346 A:middle
it only has knowledge
about kicking it off.

714
00:30:21,346 --> 00:30:22,216 A:middle
About starting it.

715
00:30:22,216 --> 00:30:26,336 A:middle
About making it happen.

716
00:30:26,736 --> 00:30:32,376 A:middle
All right, so now we can
run the application again.

717
00:30:32,886 --> 00:30:43,736 A:middle
Now when we pull down, notice
here it's telling us in the log

718
00:30:43,776 --> 00:30:48,466 A:middle
that it finished, but our
refresh item hasn't stopped.

719
00:30:49,446 --> 00:30:51,576 A:middle
So the issue, what's going on,

720
00:30:51,826 --> 00:30:55,186 A:middle
is our downloader now has all
the knowledge about what's going

721
00:30:55,186 --> 00:30:59,276 A:middle
on with the download, but no
one is informing the controller

722
00:30:59,276 --> 00:31:00,826 A:middle
that that happened,
that it's finished.

723

724
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

725
00:30:59,276 --> 00:31:00,826 A:middle
that that happened,
that it's finished.

726
00:31:01,276 --> 00:31:05,196 A:middle
And so it finishes just fine,
but our refresh isn't able

727
00:31:05,196 --> 00:31:08,056 A:middle
to stop, because our view
controller doesn't know

728
00:31:08,056 --> 00:31:09,356 A:middle
that the download is finished.

729
00:31:09,846 --> 00:31:11,246 A:middle
If only we knew a way

730
00:31:11,566 --> 00:31:15,346 A:middle
to customize the behavior
of a reusable class.

731
00:31:16,296 --> 00:31:17,466 A:middle
Of course, we do, right?

732
00:31:17,466 --> 00:31:19,336 A:middle
We use delegation
to make that happen.

733
00:31:19,786 --> 00:31:23,506 A:middle
So now, what we need to do is
create a delegate protocol.

734
00:31:24,096 --> 00:31:27,096 A:middle
We need to create a
property on our downloader

735
00:31:27,506 --> 00:31:30,596 A:middle
to have a delegate
property and make

736
00:31:30,636 --> 00:31:33,776 A:middle
that delegate property
implement that protocol.

737
00:31:34,516 --> 00:31:51,556 A:middle
[ Background Sounds ]

738
00:31:52,056 --> 00:31:56,236 A:middle
>> So our download service
has this method spelled

739
00:31:56,236 --> 00:32:00,346 A:middle
out in the delegate
that says, hey,

740

741
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

742
00:31:56,236 --> 00:32:00,346 A:middle
out in the delegate
that says, hey,

743
00:32:00,346 --> 00:32:04,716 A:middle
the download service did
finish downloading this URL,

744
00:32:04,956 --> 00:32:09,046 A:middle
which is the original URL that
was asked for, it downloaded it

745
00:32:09,196 --> 00:32:13,236 A:middle
to a particular URL, and then
that last R unit is an error,

746
00:32:13,236 --> 00:32:18,486 A:middle
saying everything is fine if
we pass nil there, or hey,

747
00:32:18,486 --> 00:32:20,536 A:middle
something went wrong, and
this is what happened.

748
00:32:20,606 --> 00:32:25,106 A:middle
Now, if we were going to build
a more sophisticated networking

749
00:32:25,106 --> 00:32:26,306 A:middle
stack here, what we'd want

750
00:32:26,306 --> 00:32:29,476 A:middle
to do is provide many
more delegation points.

751
00:32:29,476 --> 00:32:31,286 A:middle
Many more places
for customization.

752
00:32:31,576 --> 00:32:34,896 A:middle
Things like, hey, I need some
authentication information.

753
00:32:35,306 --> 00:32:36,416 A:middle
Other things like that.

754
00:32:36,416 --> 00:32:40,136 A:middle
Or, I have finished downloading
10 bytes out of the 100 bytes

755
00:32:40,136 --> 00:32:41,026 A:middle
that I'm going to download,

756
00:32:41,026 --> 00:32:43,676 A:middle
so you could update the
spinner appropriately

757
00:32:43,846 --> 00:32:45,046 A:middle
from the view controller.

758
00:32:45,626 --> 00:32:48,406 A:middle
But we'll just leave it
at this for right now.

759
00:32:49,106 --> 00:32:58,466 A:middle
And then in our download
service, really important piece

760
00:32:58,466 --> 00:33:03,786 A:middle
of the puzzle is when the URL
session finishes downloading,

761

762
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

763
00:32:58,466 --> 00:33:03,786 A:middle
of the puzzle is when the URL
session finishes downloading,

764
00:33:04,006 --> 00:33:07,846 A:middle
when the, you know, we
kick off the download,

765
00:33:07,846 --> 00:33:09,606 A:middle
and when it finishes, it's going

766
00:33:09,606 --> 00:33:13,066 A:middle
to call back the NS URL download
task is going to call back

767
00:33:13,066 --> 00:33:16,316 A:middle
and say hey, I'm finished,
we need to make sure

768
00:33:16,316 --> 00:33:20,796 A:middle
and tell our delegate
that that happened.

769
00:33:21,356 --> 00:33:25,036 A:middle
That callback goes from
our download session

770
00:33:25,436 --> 00:33:29,196 A:middle
to the view controller, which is
then going to use that knowledge

771
00:33:29,246 --> 00:33:37,626 A:middle
that the download has
finished to end refreshing.

772
00:33:39,776 --> 00:33:44,266 A:middle
We also put the responsibility
of what to do with that document

773
00:33:45,386 --> 00:33:46,556 A:middle
into the view controller.

774
00:33:47,466 --> 00:33:50,306 A:middle
So if you notice up
here, further up,

775
00:33:50,306 --> 00:33:52,686 A:middle
we're doing some file moving
around, taking the file

776
00:33:52,686 --> 00:33:53,606 A:middle
and moving it and so forth,

777
00:33:54,086 --> 00:33:55,966 A:middle
in a real application
this is another place

778
00:33:56,026 --> 00:33:58,236 A:middle
where I would create
another service.

779
00:33:58,636 --> 00:34:02,066 A:middle
Probably something like a
JSON parser, and I would take

780

781
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

782
00:33:58,636 --> 00:34:02,066 A:middle
Probably something like a
JSON parser, and I would take

783
00:34:02,066 --> 00:34:04,726 A:middle
that JSON parser and say,
hey, here's the stuff

784
00:34:04,766 --> 00:34:07,546 A:middle
that just got downloaded,
would you please take care

785
00:34:07,546 --> 00:34:10,735 A:middle
of parsing it and turning
it into real objects,

786
00:34:11,315 --> 00:34:14,216 A:middle
create another delegate
protocol for the JSON parser,

787
00:34:14,826 --> 00:34:17,096 A:middle
and the JSON parser would
call me back and say, hey,

788
00:34:17,096 --> 00:34:18,326 A:middle
everything has finished parsing.

789
00:34:18,326 --> 00:34:21,146 A:middle
And then that's when I
would actually have all the

790
00:34:21,146 --> 00:34:26,735 A:middle
information I need to change the
way the user interface looks.

791
00:34:28,766 --> 00:34:31,366 A:middle
One other thing that
I always like to talk

792
00:34:31,366 --> 00:34:37,016 A:middle
through with developers is we
have stepped over the boundary

793
00:34:37,016 --> 00:34:41,426 A:middle
where we understand and can
start thinking about how UIKit

794
00:34:41,426 --> 00:34:43,056 A:middle
and Foundation are implemented.

795
00:34:43,706 --> 00:34:46,025 A:middle
So let's take a step
back and take a look

796
00:34:46,025 --> 00:34:47,166 A:middle
at our download service.

797
00:34:48,525 --> 00:34:53,275 A:middle
So the download service
specifies

798
00:34:53,275 --> 00:34:55,596 A:middle
that it implements
this set of protocols.

799
00:34:56,996 --> 00:35:01,006 A:middle
Every one of those protocols'
names ends in delegate.

800

801
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

802
00:34:56,996 --> 00:35:01,006 A:middle
Every one of those protocols'
names ends in delegate.

803
00:35:02,246 --> 00:35:04,916 A:middle
The responsibility of
anything that is a delegate is

804
00:35:04,916 --> 00:35:07,796 A:middle
to customize the
behavior of the object

805
00:35:07,936 --> 00:35:09,986 A:middle
for which it is the
delegate, right?

806
00:35:10,416 --> 00:35:12,636 A:middle
So what we are doing
is specifying

807
00:35:12,636 --> 00:35:14,706 A:middle
that we are able to
fulfill that role.

808
00:35:15,076 --> 00:35:17,016 A:middle
Now, in the code, I don't want
to have to go show it to you

809
00:35:17,016 --> 00:35:19,166 A:middle
because there's so much
code there, but in the code,

810
00:35:19,236 --> 00:35:22,326 A:middle
I am making this download
service the delegate

811
00:35:22,476 --> 00:35:25,826 A:middle
of the download task
NS URL session.

812
00:35:26,486 --> 00:35:29,296 A:middle
So imagine with me, if you
will, what the code looks

813
00:35:29,296 --> 00:35:34,146 A:middle
like in NS URL session
or in NS download task.

814
00:35:35,956 --> 00:35:38,546 A:middle
There's got to be a chunk
of code in there somewhere

815
00:35:38,956 --> 00:35:41,196 A:middle
that does something
very similar to this.

816
00:35:41,196 --> 00:35:44,946 A:middle
I hope that helps
you think through,

817
00:35:44,946 --> 00:35:47,126 A:middle
like how does the
puzzle fit together?

818
00:35:47,126 --> 00:35:48,086 A:middle
How does all this work?

819
00:35:48,576 --> 00:35:51,466 A:middle
We do the same things
that I'm asking you to do.

820
00:35:51,946 --> 00:35:55,896 A:middle
We define a protocol that says
here's the customization path,

821
00:35:55,896 --> 00:35:58,396 A:middle
here's the customization
points that you have

822
00:35:58,396 --> 00:35:59,696 A:middle
for this reusable object.

823

824
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

825
00:36:00,236 --> 00:36:02,506 A:middle
If you implement this method,

826
00:36:02,896 --> 00:36:05,146 A:middle
I will call it, at
a particular time.

827
00:36:05,736 --> 00:36:08,036 A:middle
Now you're building that
for your own application.

828
00:36:08,426 --> 00:36:11,006 A:middle
You're defining this download
service delegate protocol.

829
00:36:11,006 --> 00:36:14,596 A:middle
And it has a single method in
it right now that says, hey,

830
00:36:14,596 --> 00:36:17,476 A:middle
I finished downloading this
stuff to this particular URL.

831
00:36:17,476 --> 00:36:20,586 A:middle
That would be a perfect place
for us, as I said earlier,

832
00:36:20,656 --> 00:36:24,286 A:middle
to take that URL, pass
it off to a JSON parser,

833
00:36:24,676 --> 00:36:26,876 A:middle
let the JSON parser crunch
on it for a little while,

834
00:36:26,936 --> 00:36:30,036 A:middle
perhaps put the data through
core data into a database,

835
00:36:30,466 --> 00:36:33,526 A:middle
message us back and say yes, all
that information has been parsed

836
00:36:33,866 --> 00:36:35,876 A:middle
and all that information is
sitting in your database,

837
00:36:35,876 --> 00:36:37,456 A:middle
and you're ready to
update your table view.

838
00:36:38,206 --> 00:36:44,826 A:middle
Okay, so one last piece
of stuff in the demo here

839
00:36:44,826 --> 00:36:47,436 A:middle
that I'm not particularly
happy with.

840
00:36:48,236 --> 00:36:52,366 A:middle
Well, let me go ahead and
run it again just for fun,

841
00:36:52,366 --> 00:36:53,366 A:middle
so we can see it stopping.

842
00:36:54,536 --> 00:36:58,816 A:middle
So now we're back
to the functionality

843
00:36:58,816 --> 00:37:00,956 A:middle
that we had before we
started hacking and slashing

844

845
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

846
00:36:58,816 --> 00:37:00,956 A:middle
that we had before we
started hacking and slashing

847
00:37:00,956 --> 00:37:02,706 A:middle
and doing surgery
on our application.

848
00:37:03,496 --> 00:37:03,786 A:middle
All right.

849
00:37:03,786 --> 00:37:06,916 A:middle
So one last, like I said, one
last piece of stuff in here

850
00:37:06,916 --> 00:37:08,506 A:middle
that I'm not particularly
happy with.

851
00:37:08,506 --> 00:37:11,186 A:middle
If we go up here in the
download service, and I glanced

852
00:37:11,186 --> 00:37:14,206 A:middle
over this earlier, because
I didn't want to confuse

853
00:37:14,206 --> 00:37:15,086 A:middle
where we were in the talk.

854
00:37:15,636 --> 00:37:17,776 A:middle
If we go in the download
service, we see this thing

855
00:37:17,776 --> 00:37:21,436 A:middle
where we're calling out to UI
application, shared application,

856
00:37:21,696 --> 00:37:22,536 A:middle
give me your delegate.

857
00:37:22,536 --> 00:37:25,766 A:middle
And then we're casting that
to a class that we know about,

858
00:37:25,766 --> 00:37:27,486 A:middle
and we had to import
that header file.

859
00:37:27,986 --> 00:37:31,406 A:middle
So now we've made our
download service dependent

860
00:37:31,766 --> 00:37:33,146 A:middle
on our application delegate.

861
00:37:34,376 --> 00:37:36,056 A:middle
That is, that's smelly code.

862
00:37:36,246 --> 00:37:37,076 A:middle
You don't want to do that.

863
00:37:37,546 --> 00:37:38,676 A:middle
Because your app delegate,

864
00:37:39,066 --> 00:37:42,606 A:middle
its responsibility is
not providing information

865
00:37:42,606 --> 00:37:43,836 A:middle
to download services.

866
00:37:44,326 --> 00:37:46,406 A:middle
The application delegate
is supposed to be

867
00:37:46,406 --> 00:37:48,636 A:middle
about maintaining
the relationship

868
00:37:48,716 --> 00:37:51,966 A:middle
between your application
and the rest of the OS.

869
00:37:52,406 --> 00:37:55,486 A:middle
The methods on there are
things like I'm about to go

870
00:37:55,486 --> 00:37:58,046 A:middle
in the background, I came
back from the background.

871
00:37:58,346 --> 00:38:00,216 A:middle
That's the stuff
that you should focus

872

873
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

874
00:37:58,346 --> 00:38:00,216 A:middle
That's the stuff
that you should focus

875
00:38:00,216 --> 00:38:01,806 A:middle
on for your application
delegate.

876
00:38:02,196 --> 00:38:05,156 A:middle
I see this pattern repeated
in many people's code,

877
00:38:05,396 --> 00:38:06,976 A:middle
and it's a really bad idea.

878
00:38:07,086 --> 00:38:09,596 A:middle
If you're casting
shared application,

879
00:38:09,596 --> 00:38:11,566 A:middle
application delegate
to your class,

880
00:38:11,596 --> 00:38:14,246 A:middle
and then you're sending it
messages, that's a bad idea.

881
00:38:14,786 --> 00:38:18,976 A:middle
So let's do a little bit
more clean up to fix that up.

882
00:38:19,516 --> 00:38:26,836 A:middle
[ Background Sounds ]

883
00:38:27,336 --> 00:38:29,626 A:middle
>> So a couple things
that we did.

884
00:38:30,776 --> 00:38:35,096 A:middle
The first part is adding
an additional call-back

885
00:38:35,096 --> 00:38:36,596 A:middle
into our delegate protocol.

886
00:38:37,076 --> 00:38:38,096 A:middle
So we added a new method,

887
00:38:38,166 --> 00:38:41,256 A:middle
download service did
finish with identifier.

888
00:38:41,726 --> 00:38:45,146 A:middle
So that's going to let the
download services delegate know

889
00:38:45,696 --> 00:38:49,496 A:middle
that this download has
finished that's related

890
00:38:49,496 --> 00:38:51,766 A:middle
to this particular identifier.

891
00:38:51,766 --> 00:38:55,886 A:middle
And we're going to call
that in the same place

892
00:38:55,916 --> 00:39:00,366 A:middle
where we were calling out to
the UI Application delegate.

893

894
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

895
00:38:55,916 --> 00:39:00,366 A:middle
where we were calling out to
the UI Application delegate.

896
00:39:04,356 --> 00:39:08,876 A:middle
Then, in our view controller,
in the implementation

897
00:39:08,956 --> 00:39:12,276 A:middle
of that additional delegate
method, we're going to invoke

898
00:39:12,846 --> 00:39:14,706 A:middle
that background session
completion handler.

899
00:39:15,466 --> 00:39:18,006 A:middle
And not to go too far into
the details around there,

900
00:39:18,006 --> 00:39:20,706 A:middle
because it's not germane to
talking about delegation,

901
00:39:20,706 --> 00:39:23,286 A:middle
but that's just a call-back
that we tell the OS.

902
00:39:23,576 --> 00:39:25,476 A:middle
Hey, we're finished
processing this download

903
00:39:25,476 --> 00:39:27,546 A:middle
and you can take a new
snapshot of the application.

904
00:39:28,056 --> 00:39:31,346 A:middle
I have a link to the talk on
NS URL session from last year,

905
00:39:31,626 --> 00:39:34,066 A:middle
and there was also one this
year that has a lot more detail

906
00:39:34,066 --> 00:39:35,036 A:middle
about how all that works.

907
00:39:36,056 --> 00:39:38,076 A:middle
Now we have gotten
rid of the dependence

908
00:39:38,076 --> 00:39:41,416 A:middle
from our download service
to our application delegate.

909
00:39:41,756 --> 00:39:45,196 A:middle
So we no longer have this sort
of marrying of these ideas

910
00:39:45,526 --> 00:39:47,666 A:middle
or placing too much
responsibility

911
00:39:47,666 --> 00:39:48,976 A:middle
on the application delegate.

912
00:39:49,406 --> 00:39:51,986 A:middle
The application delegate is
responsible for one thing.

913
00:39:52,406 --> 00:39:53,936 A:middle
Keep it focused on
that one thing,

914
00:39:53,936 --> 00:39:55,126 A:middle
and don't start spreading it

915
00:39:55,126 --> 00:39:57,846 A:middle
out throughout your whole
application and using it

916
00:39:57,846 --> 00:39:58,946 A:middle
for many different things

917
00:39:58,946 --> 00:40:02,016 A:middle
that do not include its
set of responsibilities.

918

919
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

920
00:39:58,946 --> 00:40:02,016 A:middle
that do not include its
set of responsibilities.

921
00:40:04,306 --> 00:40:08,956 A:middle
So in summary, there are
lots of frameworks in iOS.

922
00:40:09,756 --> 00:40:13,356 A:middle
But the cool thing is that once
you understand these common

923
00:40:13,356 --> 00:40:15,416 A:middle
patterns that are used
throughout all these frameworks,

924
00:40:15,496 --> 00:40:19,206 A:middle
delegation, data source,
target action, responder chain.

925
00:40:19,206 --> 00:40:22,256 A:middle
Once you understand that in
one place, you understand

926
00:40:22,256 --> 00:40:24,756 A:middle
across the whole
stack of frameworks.

927
00:40:24,836 --> 00:40:26,406 A:middle
So you get to leverage
your learning,

928
00:40:26,786 --> 00:40:30,366 A:middle
understanding these patterns
gives you power to use all

929
00:40:30,366 --> 00:40:31,936 A:middle
of these frameworks
in your application.

930
00:40:33,066 --> 00:40:34,496 A:middle
And the next thing
I want to say,

931
00:40:34,526 --> 00:40:38,586 A:middle
in terms of summary,
is just go for it.

932
00:40:38,586 --> 00:40:41,756 A:middle
There-- I have talked to many
other developers who spend time

933
00:40:41,846 --> 00:40:44,236 A:middle
like fretting about, "is
this thing a controller?

934
00:40:44,236 --> 00:40:45,346 A:middle
Is this thing a model?

935
00:40:45,346 --> 00:40:46,116 A:middle
Is this thing a view?"

936
00:40:46,596 --> 00:40:47,536 A:middle
Just go for it.

937
00:40:47,886 --> 00:40:48,556 A:middle
Build stuff.

938
00:40:48,646 --> 00:40:51,836 A:middle
Go out there and make amazing
stuff you can always re-factor

939
00:40:51,836 --> 00:40:55,286 A:middle
it like we did here, not quite
live on stage, but pretty close.

940
00:40:55,396 --> 00:40:56,606 A:middle
You can always do that.

941
00:40:56,606 --> 00:41:00,136 A:middle
So just make stuff and you will
learn so much from doing that.

942

943
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

944
00:40:56,606 --> 00:41:00,136 A:middle
So just make stuff and you will
learn so much from doing that.

945
00:41:00,586 --> 00:41:02,916 A:middle
All right, so for
more information,

946
00:41:02,916 --> 00:41:04,126 A:middle
you can talk to my buddy, Jake.

947
00:41:04,656 --> 00:41:06,336 A:middle
There's also the DEV
[assumed spelling] forums.

948
00:41:07,326 --> 00:41:09,366 A:middle
Here's a link to those
related sessions I was telling

949
00:41:09,366 --> 00:41:09,766 A:middle
you about.

950
00:41:09,766 --> 00:41:11,006 A:middle
The talk this afternoon

951
00:41:11,476 --> 00:41:13,646 A:middle
on Advanced iOS Application
Architecture

952
00:41:13,646 --> 00:41:16,326 A:middle
and Patterns has tons of
fantastic stuff in it,

953
00:41:16,326 --> 00:41:19,946 A:middle
and it's got a little bit of
information about Swift and some

954
00:41:19,946 --> 00:41:21,556 A:middle
of the new patterns that
we're going to see emerge

955
00:41:21,606 --> 00:41:24,356 A:middle
because of the new language,
which I'm really excited about.

956
00:41:24,596 --> 00:41:27,456 A:middle
And then here are two other
talks from previous years

957
00:41:27,456 --> 00:41:28,496 A:middle
that have more information.

958
00:41:28,756 --> 00:41:30,296 A:middle
Thank you very much
for being here,

959
00:41:30,296 --> 00:41:35,626 A:middle
and I hope you have a great
rest of your WWDC [applause].

960
00:41:36,016 --> 00:41:38,000 A:middle
[ Silence ]

961
