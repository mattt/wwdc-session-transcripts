X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:14,476 --> 00:00:17,336 A:middle
>> Hello! Welcome
to Session 711.

2
00:00:18,906 --> 00:00:21,846 A:middle
Now, who's here to learn
how to incorporate Touch ID

3
00:00:21,846 --> 00:00:22,856 A:middle
into their application?

4
00:00:23,106 --> 00:00:24,766 A:middle
[Applause] All right!

5
00:00:30,256 --> 00:00:31,566 A:middle
Today, we're going to talk

6
00:00:31,566 --> 00:00:33,776 A:middle
about some exciting new
features we've added based

7
00:00:33,776 --> 00:00:34,416 A:middle
on the Keychain.

8
00:00:34,796 --> 00:00:37,376 A:middle
Now, this session is
mainly focused on iOS

9
00:00:37,376 --> 00:00:39,676 A:middle
and not so much on OS X.

10
00:00:40,086 --> 00:00:42,946 A:middle
Let's get started
with what we expect

11
00:00:42,946 --> 00:00:46,816 A:middle
to go over in this session.

12
00:00:48,136 --> 00:00:49,286 A:middle
Now, for those of
you who are new

13
00:00:49,286 --> 00:00:50,656 A:middle
and never used the
Keychain before,

14
00:00:50,996 --> 00:00:53,466 A:middle
we're going to do a quick
recap of the Keychain,

15
00:00:54,056 --> 00:00:56,896 A:middle
and how your application
interacts with the Keychain.

16
00:00:57,396 --> 00:01:00,606 A:middle
Then we're going to talk about
the additional new features

17

18
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

19
00:00:57,396 --> 00:01:00,606 A:middle
Then we're going to talk about
the additional new features

20
00:01:01,706 --> 00:01:03,226 A:middle
and show you how
those features fit in,

21
00:01:03,396 --> 00:01:04,965 A:middle
like a new data protection
class.

22
00:01:04,965 --> 00:01:10,786 A:middle
Then we're going to talk about
Access Control Lists, and then,

23
00:01:10,786 --> 00:01:14,496 A:middle
last year, with the release
of iPhone 5s and Touch ID,

24
00:01:14,496 --> 00:01:17,306 A:middle
many of you have asked, "Hey,
how can I incorporate Touch ID

25
00:01:17,306 --> 00:01:18,336 A:middle
into my own application?"

26
00:01:18,956 --> 00:01:20,956 A:middle
We're going to go over
that, but first we're going

27
00:01:20,956 --> 00:01:22,796 A:middle
to do a quick recap of
what the Keychain is.

28
00:01:24,536 --> 00:01:28,616 A:middle
Now, the Keychain is a database,
and that database has rows,

29
00:01:28,616 --> 00:01:30,556 A:middle
and those rows we
call Keychain items.

30
00:01:30,556 --> 00:01:33,526 A:middle
Now, those Keychain
items have values,

31
00:01:33,526 --> 00:01:35,196 A:middle
and those values are encrypted.

32
00:01:36,106 --> 00:01:39,736 A:middle
Now, we allow you to describe
Keychain items with a set

33
00:01:39,736 --> 00:01:42,756 A:middle
of attributes, so that we can
efficiently find them later.

34
00:01:43,276 --> 00:01:47,846 A:middle
Now, the Keychain is really
good about storing user secrets

35
00:01:47,846 --> 00:01:51,746 A:middle
in the database, but it's not so
good about storing large files.

36
00:01:52,976 --> 00:01:55,656 A:middle
And, for that, we provide
another interface called

37
00:01:55,656 --> 00:01:56,446 A:middle
Common Crypto.

38
00:01:57,066 --> 00:02:00,216 A:middle
Now, with that interface
we allow you

39

40
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

41
00:01:57,066 --> 00:02:00,216 A:middle
Now, with that interface
we allow you

42
00:02:00,216 --> 00:02:01,636 A:middle
to create a bulk encryption key,

43
00:02:01,746 --> 00:02:04,736 A:middle
and then encrypt your large
files and your bulk data,

44
00:02:04,736 --> 00:02:06,596 A:middle
and then store that
bulk encryption key

45
00:02:06,596 --> 00:02:07,306 A:middle
into the Keychain.

46
00:02:07,526 --> 00:02:10,496 A:middle
Now, let's take a moment
and talk about some

47
00:02:10,496 --> 00:02:12,626 A:middle
of the security guarantees
that the Keychain provides.

48
00:02:13,896 --> 00:02:16,596 A:middle
Now, all of your Keychain
items are protected

49
00:02:16,596 --> 00:02:17,796 A:middle
by the user's pass code.

50
00:02:18,936 --> 00:02:21,716 A:middle
In addition, they're
protected by a device secret.

51
00:02:22,506 --> 00:02:25,506 A:middle
Now, every device in
the factory comes baked

52
00:02:25,506 --> 00:02:27,886 A:middle
in with a unique secret,
only known to that device.

53
00:02:28,466 --> 00:02:30,686 A:middle
Now, this is good because if
the Keychain is ever removed

54
00:02:30,686 --> 00:02:38,206 A:middle
from the device, this prevents
access to the user's secrets.

55
00:02:38,206 --> 00:02:41,266 A:middle
Now, the Keychain was also
fundamentally designed

56
00:02:41,526 --> 00:02:46,606 A:middle
to keep your secrets
protected on disk.

57
00:02:46,606 --> 00:02:50,396 A:middle
And also, by default, when the
user's not using the device.

58
00:02:50,726 --> 00:02:53,076 A:middle
And so what this
means is, by default,

59
00:02:53,076 --> 00:02:54,686 A:middle
Keychain items only
are available

60
00:02:54,686 --> 00:02:56,546 A:middle
when the user authenticates
to the device,

61
00:02:56,546 --> 00:03:00,716 A:middle
and are no longer available
after the user locks the device.

62

63
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

64
00:02:56,546 --> 00:03:00,716 A:middle
and are no longer available
after the user locks the device.

65
00:03:02,296 --> 00:03:06,016 A:middle
Now, all Keychain items also
go into encrypted backups.

66
00:03:06,516 --> 00:03:08,486 A:middle
So, if the user ever
loses their device,

67
00:03:08,976 --> 00:03:11,206 A:middle
or upgrades to a new
device, they can restore

68
00:03:11,206 --> 00:03:14,126 A:middle
that encrypted backup and get
all of their user secrets back.

69
00:03:16,626 --> 00:03:19,916 A:middle
One of the fundamental
designs of the Keychain is also

70
00:03:19,916 --> 00:03:21,346 A:middle
to enforce access control.

71
00:03:22,386 --> 00:03:27,476 A:middle
Now, what this does is it
allows your application access

72
00:03:27,476 --> 00:03:29,036 A:middle
to its portion of the Keychain,

73
00:03:29,036 --> 00:03:31,536 A:middle
while preventing other
applications access

74
00:03:31,536 --> 00:03:32,446 A:middle
to the same secrets.

75
00:03:32,936 --> 00:03:34,926 A:middle
Now, I'd like to take a moment

76
00:03:34,926 --> 00:03:37,856 A:middle
and show how your application
interacts with the Keychain.

77
00:03:38,166 --> 00:03:41,866 A:middle
And, in order for your
application to call

78
00:03:41,866 --> 00:03:44,066 A:middle
in to the Keychain,
it first needs to link

79
00:03:44,066 --> 00:03:45,646 A:middle
against the security framework.

80
00:03:46,626 --> 00:03:48,976 A:middle
Now, the security
framework provides a set

81
00:03:48,976 --> 00:03:54,206 A:middle
of APIs called secItem, which
work on both iOS and OS X.

82
00:03:55,056 --> 00:03:59,996 A:middle
And now these are a set of
CAPIs that work systemwide.

83

84
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

85
00:04:02,466 --> 00:04:05,466 A:middle
Now, when your application
calls in to a secItem interface,

86
00:04:05,466 --> 00:04:06,906 A:middle
it actually sends that request

87
00:04:06,906 --> 00:04:08,746 A:middle
out to our process
called securityd.

88
00:04:08,866 --> 00:04:11,076 A:middle
So, all Keychain
interactions happen outside

89
00:04:11,076 --> 00:04:12,106 A:middle
of your process space.

90
00:04:13,446 --> 00:04:16,536 A:middle
But what you might not be
aware is securityd doesn't have

91
00:04:16,536 --> 00:04:19,396 A:middle
everything required to actually
decrypt that Keychain item.

92
00:04:19,396 --> 00:04:21,446 A:middle
And that's where the
Secure enclave comes in.

93
00:04:21,836 --> 00:04:26,026 A:middle
Now, the Secure enclave is a
security code processor built

94
00:04:26,026 --> 00:04:27,306 A:middle
on top of the Apple A7 chip,

95
00:04:27,306 --> 00:04:30,596 A:middle
and was first introduced
with the iPhone 5s.

96
00:04:32,036 --> 00:04:34,136 A:middle
Now, some of its
main operations are

97
00:04:34,136 --> 00:04:35,996 A:middle
to handle all Touch
ID operations.

98
00:04:36,056 --> 00:04:38,796 A:middle
In addition, it handles all
cryptographic operations

99
00:04:38,796 --> 00:04:39,716 A:middle
for data protection.

100
00:04:41,946 --> 00:04:47,996 A:middle
Now, it also guarantees the
integrity of data protection

101
00:04:47,996 --> 00:04:49,856 A:middle
in the event that the
kernel is compromised.

102
00:04:50,196 --> 00:04:53,916 A:middle
And, for this reason, we put
all of the device secrets

103
00:04:53,916 --> 00:04:55,806 A:middle
and passcode secrets
into the Secure enclave.

104
00:04:56,166 --> 00:04:59,566 A:middle
Now, let me show
you what happens

105
00:04:59,566 --> 00:05:01,806 A:middle
when your application makes
a request into the Keychain.

106

107
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

108
00:04:59,566 --> 00:05:01,806 A:middle
when your application makes
a request into the Keychain.

109
00:05:02,346 --> 00:05:07,236 A:middle
First, it sends its query
to the secItem interface,

110
00:05:07,236 --> 00:05:09,146 A:middle
which sends the request
over to securityd.

111
00:05:09,466 --> 00:05:11,576 A:middle
Securityd then will
search the Keychain to see

112
00:05:11,576 --> 00:05:14,076 A:middle
if it finds an item, but
the item that's returned

113
00:05:14,076 --> 00:05:14,796 A:middle
is encrypted.

114
00:05:15,686 --> 00:05:20,356 A:middle
So this encrypted item gets sent
to the Secure enclave, which may

115
00:05:20,356 --> 00:05:22,156 A:middle
or may not be able
to decrypt the item,

116
00:05:22,156 --> 00:05:25,536 A:middle
depending on the
state of the device.

117
00:05:25,536 --> 00:05:27,986 A:middle
Once the item is decrypted,
it then gets sent back

118
00:05:27,986 --> 00:05:32,186 A:middle
to securityd, and then the
user secret gets sent back

119
00:05:32,216 --> 00:05:33,016 A:middle
to your application.

120
00:05:33,386 --> 00:05:37,436 A:middle
Now, I'd like to take
a moment and look

121
00:05:37,436 --> 00:05:41,486 A:middle
at the secItem interface, and
show you how easy it is to add

122
00:05:41,486 --> 00:05:43,086 A:middle
and retrieve items
from the Keychain.

123
00:05:45,216 --> 00:05:47,546 A:middle
In order to add an item,
and in these examples,

124
00:05:47,546 --> 00:05:49,106 A:middle
what I'll do is I'll
show you how to call

125
00:05:49,106 --> 00:05:50,956 A:middle
into the C Interfaces,
with Objective-C.

126
00:05:51,806 --> 00:05:54,886 A:middle
And in order to add an
item, it's as simple

127
00:05:54,886 --> 00:05:57,616 A:middle
as creating an NSDictionary
with a set of attributes

128
00:05:57,616 --> 00:05:59,076 A:middle
that describe your
Keychain item.

129
00:05:59,956 --> 00:06:02,676 A:middle
In addition to the
attributes, you also need

130

131
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

132
00:05:59,956 --> 00:06:02,676 A:middle
In addition to the
attributes, you also need

133
00:06:02,676 --> 00:06:05,336 A:middle
to pass your secret that
you want to protect.

134
00:06:05,506 --> 00:06:06,426 A:middle
The encrypted payload.

135
00:06:07,066 --> 00:06:09,156 A:middle
And pass this dictionary
to secItemAdd.

136
00:06:10,336 --> 00:06:11,896 A:middle
Now, it's really important

137
00:06:11,896 --> 00:06:13,706 A:middle
that when you use the
secItemAdd interface,

138
00:06:13,826 --> 00:06:15,476 A:middle
that you also check
the return codes

139
00:06:15,476 --> 00:06:17,146 A:middle
to make sure you don't
get any errors back.

140
00:06:17,376 --> 00:06:18,966 A:middle
Because, just like any database,

141
00:06:19,346 --> 00:06:21,986 A:middle
attempting to add the
same Keychain item

142
00:06:22,026 --> 00:06:24,246 A:middle
to the database will
result in a duplicate error,

143
00:06:24,716 --> 00:06:27,226 A:middle
so these attributes make
that Keychain item unique.

144
00:06:27,376 --> 00:06:30,266 A:middle
Now, let me show you how

145
00:06:30,266 --> 00:06:31,866 A:middle
to retrieve items
from the database.

146
00:06:32,396 --> 00:06:35,356 A:middle
In order to retrieve
items, you have to call

147
00:06:35,516 --> 00:06:38,976 A:middle
into the secItemCopy
interface, and similar to add,

148
00:06:39,566 --> 00:06:44,066 A:middle
you need to specify the set
of attributes that are used

149
00:06:44,066 --> 00:06:45,276 A:middle
to describe your Keychain item.

150
00:06:45,416 --> 00:06:49,876 A:middle
In addition, you need to
specify kSecReturnData,

151
00:06:50,426 --> 00:06:53,916 A:middle
and what this does is it
instructs a secItem copy

152
00:06:53,916 --> 00:06:56,626 A:middle
matching to actually
return the user secret.

153
00:06:56,796 --> 00:06:58,426 A:middle
If you don't specify this,

154
00:06:58,426 --> 00:07:00,716 A:middle
secItemCopyMatching
will only let you know

155

156
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

157
00:06:58,426 --> 00:07:00,716 A:middle
secItemCopyMatching
will only let you know

158
00:07:00,716 --> 00:07:02,386 A:middle
that the user secret existed.

159
00:07:02,836 --> 00:07:07,146 A:middle
Now, just like any
database, we allow you

160
00:07:07,146 --> 00:07:09,076 A:middle
to update your existing
Keychain items.

161
00:07:10,036 --> 00:07:13,376 A:middle
In order to update, first,
it takes two dictionaries.

162
00:07:13,526 --> 00:07:14,566 A:middle
Two NSDictionaries.

163
00:07:14,906 --> 00:07:18,556 A:middle
One to specify the attributes
of the item that you're trying

164
00:07:18,556 --> 00:07:20,096 A:middle
to find, and then
a second dictionary

165
00:07:20,096 --> 00:07:21,986 A:middle
to specify the changes
that you'd like to make

166
00:07:21,986 --> 00:07:24,986 A:middle
to that Keychain item.

167
00:07:24,986 --> 00:07:27,926 A:middle
And, of course, when the secrets
are no longer necessary inside

168
00:07:27,926 --> 00:07:29,426 A:middle
of the database, we allow you

169
00:07:29,426 --> 00:07:31,476 A:middle
to delete those secrets
from the database.

170
00:07:33,036 --> 00:07:36,806 A:middle
And we highly recommend, as
best practice, to update,

171
00:07:37,146 --> 00:07:41,126 A:middle
use secItemUpdate to modify
your items instead of deleting

172
00:07:41,156 --> 00:07:42,986 A:middle
and re-adding your
items to the database.

173
00:07:43,376 --> 00:07:46,486 A:middle
And this allows you to keep
any established access control

174
00:07:46,486 --> 00:07:48,686 A:middle
that you've previously
added to an item.

175
00:07:48,966 --> 00:07:54,976 A:middle
Now that I've shown you
how to simply add items

176
00:07:54,976 --> 00:07:57,816 A:middle
to the Keychain, I'd like to
show you what a simple workflow

177
00:07:57,816 --> 00:07:59,456 A:middle
would look like in
your own application.

178
00:07:59,776 --> 00:08:06,006 A:middle
What your application might do
is first it's going to query

179

180
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

181
00:07:59,776 --> 00:08:06,006 A:middle
What your application might do
is first it's going to query

182
00:08:06,006 --> 00:08:08,276 A:middle
in to the Keychain to
see if a password exists.

183
00:08:08,416 --> 00:08:10,206 A:middle
If a password exists, great.

184
00:08:10,206 --> 00:08:12,066 A:middle
And it works, great.

185
00:08:12,066 --> 00:08:12,476 A:middle
You're done.

186
00:08:12,576 --> 00:08:15,946 A:middle
Right? However, if you
query into the Keychain

187
00:08:16,146 --> 00:08:19,156 A:middle
and no password exists in
the Keychain, you may need

188
00:08:19,156 --> 00:08:21,916 A:middle
to prompt the user at
this point for a password.

189
00:08:23,246 --> 00:08:25,906 A:middle
And once you've prompted for
the password and verified it,

190
00:08:26,296 --> 00:08:28,286 A:middle
you'll then need to add
that to the database,

191
00:08:28,966 --> 00:08:31,946 A:middle
so that the next time the user
goes to use your application,

192
00:08:32,116 --> 00:08:34,446 A:middle
you don't need to nag the
user for the password again.

193
00:08:34,775 --> 00:08:39,346 A:middle
Now, you might run into a
situation where the password

194
00:08:39,446 --> 00:08:41,645 A:middle
in the database no longer
works for the service

195
00:08:41,645 --> 00:08:42,395 A:middle
that you're protecting.

196
00:08:42,756 --> 00:08:48,476 A:middle
And in those situations, you may
need to prompt the user again

197
00:08:48,476 --> 00:08:49,466 A:middle
for a better password.

198
00:08:49,646 --> 00:08:52,646 A:middle
And once you've verified that
better password, go ahead

199
00:08:52,646 --> 00:08:55,206 A:middle
and update that in the
database so that later,

200
00:08:55,206 --> 00:08:57,966 A:middle
when your application needs it
again, it can use that password.

201

202
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

203
00:09:01,236 --> 00:09:03,966 A:middle
Now, as I mentioned before,
the Keychain is really good

204
00:09:03,966 --> 00:09:05,836 A:middle
about protecting
your secrets on disk.

205
00:09:06,706 --> 00:09:08,976 A:middle
And it is also your
responsibility,

206
00:09:08,976 --> 00:09:11,536 A:middle
as application developers,
to protect the secrets

207
00:09:11,536 --> 00:09:13,036 A:middle
that you retrieve
from the database.

208
00:09:13,616 --> 00:09:18,816 A:middle
And it's best practice that you
handle those secrets with care,

209
00:09:20,026 --> 00:09:22,086 A:middle
meaning, you know, only hold

210
00:09:22,086 --> 00:09:23,816 A:middle
on to the secret as
long as necessary.

211
00:09:24,126 --> 00:09:26,796 A:middle
Don't save it often to a global
variable because it's easy

212
00:09:26,796 --> 00:09:29,856 A:middle
to do, or don't retrieve it from
the database and save it off

213
00:09:29,856 --> 00:09:31,236 A:middle
into a Plist or a file.

214
00:09:32,646 --> 00:09:37,856 A:middle
Now that I've done the
quick recap of the Keychain,

215
00:09:37,976 --> 00:09:42,596 A:middle
I'd like to talk a little bit
about our access control story.

216
00:09:44,386 --> 00:09:48,136 A:middle
Now, when the Keychain was
first introduced on OS X,

217
00:09:49,246 --> 00:09:54,226 A:middle
it was-we first allowed,
or we first introduced it

218
00:09:54,226 --> 00:09:58,206 A:middle
with kSecAttrAccess, which was
a form of access control based

219
00:09:58,206 --> 00:09:59,536 A:middle
on the application itself.

220
00:09:59,536 --> 00:10:03,926 A:middle
Now, with the iOS, we
introduced kSecAttrAccessGroup.

221

222
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

223
00:09:59,536 --> 00:10:03,926 A:middle
Now, with the iOS, we
introduced kSecAttrAccessGroup.

224
00:10:04,356 --> 00:10:08,206 A:middle
And what this was, was a form
of access control based off

225
00:10:08,206 --> 00:10:09,666 A:middle
of code signing and
entitlements.

226
00:10:09,746 --> 00:10:13,336 A:middle
And then we added
kSecAttrAccessible.

227
00:10:14,746 --> 00:10:16,746 A:middle
Now, this isn't so
much about who,

228
00:10:16,746 --> 00:10:19,146 A:middle
but more of when are
your items available?

229
00:10:19,356 --> 00:10:22,336 A:middle
When can the Secure enclave
be able to decrypt those items

230
00:10:22,336 --> 00:10:24,796 A:middle
and return that secret
back to your application?

231
00:10:24,936 --> 00:10:29,116 A:middle
And today we'd like to
introduce to you a new form

232
00:10:29,116 --> 00:10:32,426 A:middle
of access control called
kSecAttrAccess Control.

233
00:10:33,496 --> 00:10:37,276 A:middle
And this is more about
getting user consent to be able

234
00:10:37,276 --> 00:10:39,206 A:middle
to use those Keychain
items as they're stored,

235
00:10:39,616 --> 00:10:41,556 A:middle
and Libor will be up
on the stage to talk

236
00:10:41,556 --> 00:10:44,226 A:middle
about that in a moment.

237
00:10:44,226 --> 00:10:47,866 A:middle
Now, last year, with the
release of iCloud Keychain,

238
00:10:48,926 --> 00:10:51,326 A:middle
we really needed a
common interface.

239
00:10:51,716 --> 00:10:54,536 A:middle
So, what some of you may not
know is we actually ported the

240
00:10:54,536 --> 00:10:56,576 A:middle
iOS Keychain to OS X last year.

241
00:10:57,766 --> 00:11:00,926 A:middle
And so, when you call in
to the OS X interface,

242

243
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

244
00:10:57,766 --> 00:11:00,926 A:middle
And so, when you call in
to the OS X interface,

245
00:11:00,926 --> 00:11:03,786 A:middle
secItem interface, and specify
the synchronizable attribute,

246
00:11:04,286 --> 00:11:07,266 A:middle
you're actually taking
advantage of all of the features

247
00:11:07,266 --> 00:11:12,976 A:middle
that we're introducing
to the Keychain.

248
00:11:13,266 --> 00:11:15,626 A:middle
Now, I'd like to
take a moment and dig

249
00:11:15,626 --> 00:11:17,156 A:middle
into the accessible attribute.

250
00:11:17,606 --> 00:11:23,176 A:middle
Now, like I said, by default,
when you add Keychain items

251
00:11:23,176 --> 00:11:25,416 A:middle
to the database, they
default to WhenUnlocked.

252
00:11:26,586 --> 00:11:30,836 A:middle
And again, when the user
authenticates to the device,

253
00:11:31,026 --> 00:11:33,926 A:middle
these Keychain items
become available,

254
00:11:34,896 --> 00:11:36,466 A:middle
and when the user
locks the device,

255
00:11:36,466 --> 00:11:38,386 A:middle
the Keychain items are
no longer available.

256
00:11:38,506 --> 00:11:41,646 A:middle
So, what we do is we actually
securely erase those secrets

257
00:11:41,646 --> 00:11:44,216 A:middle
that are used to protect those
items in the Secure enclave.

258
00:11:45,836 --> 00:11:48,886 A:middle
And now, this works great for
the majority of applications,

259
00:11:49,556 --> 00:11:51,556 A:middle
however, if you have an
application that runs

260
00:11:51,556 --> 00:11:53,746 A:middle
in the background, this can
be a little inconvenient,

261
00:11:54,496 --> 00:11:57,006 A:middle
so we did introduce another
data protection class

262
00:11:57,216 --> 00:11:59,766 A:middle
AfterFirstUnlock, and
what this means is

263

264
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

265
00:12:00,396 --> 00:12:03,116 A:middle
that your Keychain items
will become available

266
00:12:03,116 --> 00:12:05,446 A:middle
after the user has first
authenticated to the device.

267
00:12:05,546 --> 00:12:08,686 A:middle
But this also has one drawback,
is-the secrets that are used

268
00:12:08,686 --> 00:12:12,016 A:middle
in the Secure enclave to protect
these Keychain items do not go

269
00:12:12,016 --> 00:12:13,576 A:middle
away after you lock the device.

270
00:12:15,946 --> 00:12:17,656 A:middle
Now, we also provide
a stricter variant

271
00:12:17,656 --> 00:12:19,226 A:middle
of these two data
protection classes

272
00:12:19,226 --> 00:12:22,696 A:middle
that are this device only, and
so when these Keychain items go

273
00:12:22,696 --> 00:12:27,326 A:middle
into an encrypted backup, you
will only be able to restore

274
00:12:27,326 --> 00:12:28,246 A:middle
that encrypted backup,

275
00:12:28,336 --> 00:12:30,606 A:middle
these Keychain items will only
come back when you restore

276
00:12:30,606 --> 00:12:32,396 A:middle
that encrypted backup
to the same device

277
00:12:32,486 --> 00:12:37,036 A:middle
and will not successfully
restore to a new device.

278
00:12:37,036 --> 00:12:41,276 A:middle
Now, a feature we get asked
for all the time is, "Hey,

279
00:12:41,276 --> 00:12:43,546 A:middle
it would be really
nice if we knew

280
00:12:43,546 --> 00:12:45,226 A:middle
if a passcode was
set on a device."

281
00:12:46,206 --> 00:12:49,466 A:middle
How many of you have been
looking for a feature like that?

282
00:12:52,416 --> 00:12:54,826 A:middle
[Applause] Well, we're still
not going to provide an API

283
00:12:54,926 --> 00:12:59,796 A:middle
like that [laughter], but
we have something better.

284

285
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

286
00:13:01,046 --> 00:13:02,596 A:middle
See, we never really
felt comfortable

287
00:13:02,596 --> 00:13:05,766 A:middle
about providing an API that
said, "Hey, a passcode is set

288
00:13:05,766 --> 00:13:08,226 A:middle
on the device," because what
happens if your application said

289
00:13:08,536 --> 00:13:09,876 A:middle
"Oh, a passcode is
set, now I'm going

290
00:13:09,876 --> 00:13:11,376 A:middle
to store all my secrets
on the device."

291
00:13:11,456 --> 00:13:14,866 A:middle
And then, later, the user
goes and removes a passcode

292
00:13:14,866 --> 00:13:17,266 A:middle
from the device, and
now you're sort of left

293
00:13:17,266 --> 00:13:18,446 A:middle
in a situation you never wanted.

294
00:13:18,996 --> 00:13:23,186 A:middle
And for that reason, we probably
still won't provide such an API,

295
00:13:23,186 --> 00:13:24,846 A:middle
but we have something better.

296
00:13:25,026 --> 00:13:28,226 A:middle
Today, I'd like to introduce to
you a new data protection class

297
00:13:28,696 --> 00:13:30,186 A:middle
that is WhenPasscodeSet.

298
00:13:31,276 --> 00:13:33,816 A:middle
Now, this has all of
the same properties

299
00:13:33,896 --> 00:13:38,916 A:middle
as WhenUnlocked [applause].

300
00:13:40,596 --> 00:13:44,356 A:middle
Meaning, these Keychain items
will not be available unless the

301
00:13:44,356 --> 00:13:48,226 A:middle
user authenticates the
device, and will-I'm sorry,

302
00:13:48,226 --> 00:13:50,676 A:middle
will be available after the
user authenticates the device,

303
00:13:50,676 --> 00:13:55,646 A:middle
and will no longer be available
when the user locks the device.

304
00:13:55,646 --> 00:13:58,806 A:middle
Now, it has a few other security
properties we'll talk about.

305
00:13:59,926 --> 00:14:03,016 A:middle
So, if the passcode is
not set on a device,

306

307
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

308
00:13:59,926 --> 00:14:03,016 A:middle
So, if the passcode is
not set on a device,

309
00:14:03,016 --> 00:14:05,126 A:middle
and you try to use this
new data protection class,

310
00:14:05,126 --> 00:14:11,296 A:middle
you'll actually get an error
back, and so it only allows you

311
00:14:11,296 --> 00:14:14,676 A:middle
to store Keychain items if a
passcode is set on the device.

312
00:14:16,916 --> 00:14:21,826 A:middle
Now what happens to
items that get stored

313
00:14:21,826 --> 00:14:22,946 A:middle
when a passcode is set?

314
00:14:23,676 --> 00:14:27,286 A:middle
Now, all items that get stored,
or if you remove the passcode

315
00:14:27,286 --> 00:14:31,496 A:middle
from the device, then what we
do is we actually securely erase

316
00:14:31,496 --> 00:14:34,326 A:middle
the key that is protecting
those Keychain items

317
00:14:34,326 --> 00:14:39,306 A:middle
in the Secure enclave,
cryptographically preventing us

318
00:14:39,306 --> 00:14:42,106 A:middle
from ever decrypting those
Keychain items again.

319
00:14:43,516 --> 00:14:46,866 A:middle
[ Applause ]

320
00:14:47,366 --> 00:14:53,216 A:middle
Now, this new data protection
also has a few drawbacks.

321
00:14:54,606 --> 00:14:58,606 A:middle
So, this data protection
class will not go into

322
00:14:58,606 --> 00:15:00,336 A:middle
or will not sync
to other devices

323

324
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

325
00:14:58,606 --> 00:15:00,336 A:middle
or will not sync
to other devices

326
00:15:00,476 --> 00:15:03,006 A:middle
when you have iCloud
syncing turned on,

327
00:15:03,726 --> 00:15:04,866 A:middle
or iCloud Keychain enabled.

328
00:15:05,716 --> 00:15:10,106 A:middle
And also will not go
into encrypted backups.

329
00:15:10,586 --> 00:15:12,006 A:middle
So, we highly recommend
that you stick

330
00:15:12,006 --> 00:15:14,496 A:middle
with our default
WhenUnlocked, and only switch

331
00:15:14,496 --> 00:15:15,566 A:middle
to WhenPasscodeSet

332
00:15:15,566 --> 00:15:18,606 A:middle
if the application
truly requires this type

333
00:15:18,606 --> 00:15:19,606 A:middle
of security guarantee.

334
00:15:21,276 --> 00:15:24,806 A:middle
And now, I'd like to turn
the time over to Libor,

335
00:15:24,806 --> 00:15:26,046 A:middle
so he can continue talking

336
00:15:26,046 --> 00:15:27,966 A:middle
about some additional
features based on the Keychain.

337
00:15:28,306 --> 00:15:28,676 A:middle
Libor?

338
00:15:29,236 --> 00:15:29,766 A:middle
>> Thank you, Wade.

339
00:15:30,096 --> 00:15:33,736 A:middle
So, now you know how to use
Keychain in your application.

340
00:15:33,816 --> 00:15:36,216 A:middle
So, let me talk about a
new, exciting feature,

341
00:15:36,636 --> 00:15:39,016 A:middle
which allows you to use
Touch ID with Keychain,

342
00:15:39,016 --> 00:15:40,406 A:middle
and not only with Keychain.

343
00:15:41,156 --> 00:15:43,416 A:middle
I really hope that you
will like this feature,

344
00:15:43,416 --> 00:15:45,696 A:middle
and I hope that you will
use it in many applications.

345
00:15:46,206 --> 00:15:48,016 A:middle
So, let's see how
to use that feature.

346
00:15:49,586 --> 00:15:51,376 A:middle
Before I will start
with Touch ID,

347
00:15:51,376 --> 00:15:54,196 A:middle
and I know that you are waiting
for that, I will have to start

348
00:15:54,196 --> 00:15:56,736 A:middle
with Keychain Item
Access Control Lists.

349
00:15:57,806 --> 00:16:00,726 A:middle
Keychain item Access
Control List, or ACL,

350

351
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

352
00:15:57,806 --> 00:16:00,726 A:middle
Keychain item Access
Control List, or ACL,

353
00:16:01,346 --> 00:16:04,706 A:middle
is a new Keychain item
attribute which you can use

354
00:16:04,776 --> 00:16:08,056 A:middle
to set accessibility
and authentication

355
00:16:08,056 --> 00:16:09,686 A:middle
for each Keychain item.

356
00:16:10,546 --> 00:16:13,516 A:middle
And that means that you
can control not only

357
00:16:13,626 --> 00:16:15,556 A:middle
when the Keychain
item is available,

358
00:16:15,666 --> 00:16:19,336 A:middle
based on device state, but
also what has to happen

359
00:16:19,446 --> 00:16:21,306 A:middle
when this Keychain
item is accessed.

360
00:16:22,086 --> 00:16:25,606 A:middle
So, I will have to talk about
authentication, how it's done,

361
00:16:26,046 --> 00:16:28,656 A:middle
and how you can use it
with Touch ID and passcode.

362
00:16:29,356 --> 00:16:31,666 A:middle
But before we start
with the details,

363
00:16:32,116 --> 00:16:33,646 A:middle
let's have a look at the result.

364
00:16:34,226 --> 00:16:36,716 A:middle
What the user will see when
they use this new feature.

365
00:16:37,856 --> 00:16:42,006 A:middle
So, this is the new Touch
ID authentication screen,

366
00:16:42,396 --> 00:16:45,656 A:middle
which will be presented to
the user any time he will try

367
00:16:45,656 --> 00:16:48,716 A:middle
to access Keychain
items protected by ACL

368
00:16:49,006 --> 00:16:50,546 A:middle
on a phone with Touch ID.

369
00:16:51,276 --> 00:16:54,666 A:middle
I will talk about
the user interface

370
00:16:54,816 --> 00:16:56,086 A:middle
in much more detail later,

371
00:16:56,086 --> 00:16:58,026 A:middle
and you will also
see it in the demo.

372
00:16:58,316 --> 00:17:01,126 A:middle
So, let's see, what are
the changes you have to do

373

374
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

375
00:16:58,316 --> 00:17:01,126 A:middle
So, let's see, what are
the changes you have to do

376
00:17:01,596 --> 00:17:02,786 A:middle
to adopt this new feature?

377
00:17:03,316 --> 00:17:07,415 A:middle
You already know that we have
a new Keychain item attribute

378
00:17:07,886 --> 00:17:12,766 A:middle
called Access Control, and this
Access Control attribute holds

379
00:17:12,856 --> 00:17:14,226 A:middle
the ACL.

380
00:17:14,376 --> 00:17:17,965 A:middle
ACL itself is represented
by secAccessControl object,

381
00:17:18,776 --> 00:17:21,876 A:middle
and to be able to create this
object, you have to define

382
00:17:22,276 --> 00:17:25,886 A:middle
which authentication and which
accessibility you require

383
00:17:25,886 --> 00:17:26,856 A:middle
for that item.

384
00:17:27,136 --> 00:17:29,766 A:middle
So, let's see what
options you have.

385
00:17:30,256 --> 00:17:32,366 A:middle
The accessibility
is pretty easy.

386
00:17:33,146 --> 00:17:34,636 A:middle
You already know accessibility,

387
00:17:34,636 --> 00:17:38,706 A:middle
because to set accessibility you
will use the same accessibility

388
00:17:38,706 --> 00:17:41,336 A:middle
classes and constants
which you are now using

389
00:17:41,486 --> 00:17:43,176 A:middle
with accessible attribute.

390
00:17:43,596 --> 00:17:45,346 A:middle
And the behavior
will be the same.

391
00:17:46,016 --> 00:17:49,476 A:middle
So, the item will be
available based on the device,

392
00:17:49,476 --> 00:17:55,976 A:middle
if it's unlocked or locked, and
the behavior keeps the same,

393
00:17:56,436 --> 00:17:58,506 A:middle
what's added is authentication.

394
00:17:59,316 --> 00:18:01,326 A:middle
Authentication is
the new component,

395

396
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

397
00:17:59,316 --> 00:18:01,326 A:middle
Authentication is
the new component,

398
00:18:01,326 --> 00:18:06,906 A:middle
and to specify authentication
you have to provide policy.

399
00:18:07,586 --> 00:18:11,586 A:middle
And policy defines what
authentication methods have

400
00:18:11,666 --> 00:18:16,646 A:middle
to be satisfied or done before
the Keychain item is decrypted

401
00:18:16,926 --> 00:18:19,086 A:middle
and returned back
to your application.

402
00:18:20,106 --> 00:18:23,116 A:middle
So, for now, we have
user presence, policy.

403
00:18:23,796 --> 00:18:26,876 A:middle
So, let's see how this
policy is implemented

404
00:18:26,996 --> 00:18:28,746 A:middle
and how it's used by Keychain.

405
00:18:29,356 --> 00:18:35,176 A:middle
The policy is enforced
and controlled

406
00:18:35,176 --> 00:18:38,696 A:middle
by operating system security
domain, and that means that,

407
00:18:38,696 --> 00:18:43,326 A:middle
for example, on an iPhone,
iPhone 5s, it is Secure enclave

408
00:18:43,376 --> 00:18:48,126 A:middle
which controls what
authentication has to be done,

409
00:18:48,346 --> 00:18:52,166 A:middle
and what is the best security

410
00:18:52,456 --> 00:18:54,046 A:middle
for that authentication
operation.

411
00:18:54,616 --> 00:18:58,116 A:middle
And that allows us to have
the highest possible security

412
00:18:58,516 --> 00:19:00,866 A:middle
for given device configuration.

413

414
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

415
00:18:58,516 --> 00:19:00,866 A:middle
for given device configuration.

416
00:19:01,886 --> 00:19:05,816 A:middle
So, let's see how the device
configuration influences

417
00:19:05,816 --> 00:19:06,906 A:middle
policy evaluation.

418
00:19:07,896 --> 00:19:11,266 A:middle
So, the easiest case is
device without any passcode.

419
00:19:12,296 --> 00:19:15,926 A:middle
And the result of
policy evaluation

420
00:19:15,976 --> 00:19:17,796 A:middle
in this case is easy to predict.

421
00:19:17,796 --> 00:19:19,596 A:middle
We are talking about
security here,

422
00:19:20,006 --> 00:19:22,466 A:middle
so the policy evaluation
will always fail,

423
00:19:22,566 --> 00:19:24,756 A:middle
and you will have no
access to your data.

424
00:19:26,006 --> 00:19:29,796 A:middle
A little bit more interesting
example is device with passcode.

425
00:19:30,736 --> 00:19:33,026 A:middle
And because we have
the passcode, again,

426
00:19:33,026 --> 00:19:35,086 A:middle
the result is pretty
easy to predict

427
00:19:35,136 --> 00:19:37,076 A:middle
because the passcode
will be necessary

428
00:19:37,426 --> 00:19:39,416 A:middle
to decrypt your Keychain
item data.

429
00:19:39,416 --> 00:19:44,906 A:middle
And the user will have to enter
device passcode each time you

430
00:19:44,906 --> 00:19:46,766 A:middle
are accessing the Keychain item.

431
00:19:47,166 --> 00:19:52,416 A:middle
This is secure, but the
usability can be improved.

432
00:19:53,076 --> 00:19:56,186 A:middle
And we-here we are finally
getting to Touch ID.

433
00:19:56,776 --> 00:19:59,216 A:middle
Because on devices
with Touch ID,

434
00:19:59,216 --> 00:20:00,826 A:middle
and with registered
fingerprints,

435

436
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

437
00:19:59,216 --> 00:20:00,826 A:middle
and with registered
fingerprints,

438
00:20:01,516 --> 00:20:04,906 A:middle
the user presence policy
will prefer Touch ID

439
00:20:05,756 --> 00:20:08,056 A:middle
and will allow you
to use Touch ID

440
00:20:08,056 --> 00:20:10,356 A:middle
to decrypt your Keychain items.

441
00:20:11,436 --> 00:20:14,096 A:middle
This is great, but there
might be some cases

442
00:20:14,166 --> 00:20:15,946 A:middle
where you cannot use Touch ID.

443
00:20:15,946 --> 00:20:20,116 A:middle
For example, you lend the device
to someone, to try the Touch ID,

444
00:20:20,116 --> 00:20:22,656 A:middle
and the Touch ID is
now in a disabled state

445
00:20:22,656 --> 00:20:24,406 A:middle
because he tried
it so many times.

446
00:20:24,906 --> 00:20:28,086 A:middle
So, for that, the user
presence policy allows

447
00:20:28,086 --> 00:20:29,916 A:middle
to use a backup mechanism.

448
00:20:30,376 --> 00:20:33,056 A:middle
And this backup mechanism
is device passcode.

449
00:20:33,056 --> 00:20:36,486 A:middle
Actually, the user
can decide if he wants

450
00:20:36,486 --> 00:20:38,066 A:middle
to use passcode or Touch ID.

451
00:20:39,046 --> 00:20:42,026 A:middle
But a Touch ID will be always
preferred in this case,

452
00:20:42,726 --> 00:20:45,806 A:middle
and because it's preferred, and
it's the interesting option.

453
00:20:45,806 --> 00:20:47,996 A:middle
So, let's see how
Touch ID works,

454
00:20:47,996 --> 00:20:50,306 A:middle
and what's the security
of this solution?

455
00:20:53,276 --> 00:20:57,366 A:middle
You all know Touch ID from
your iPhone 5s device unlock,

456
00:20:57,736 --> 00:21:01,366 A:middle
and you know that it's an
easy-to-use authentication

457

458
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

459
00:20:57,736 --> 00:21:01,366 A:middle
and you know that it's an
easy-to-use authentication

460
00:21:01,366 --> 00:21:05,406 A:middle
mechanism, and it does not
require much interaction

461
00:21:05,406 --> 00:21:06,086 A:middle
from the user.

462
00:21:06,506 --> 00:21:10,656 A:middle
So why not use it for
Keychain protection?

463
00:21:11,496 --> 00:21:14,676 A:middle
The obvious question you will
ask is what about the security?

464
00:21:15,466 --> 00:21:17,476 A:middle
Well, the answer is simple.

465
00:21:17,956 --> 00:21:18,906 A:middle
Secure enclave.

466
00:21:20,066 --> 00:21:25,666 A:middle
The Secure enclave contains
all the Touch ID data,

467
00:21:26,366 --> 00:21:30,676 A:middle
and the Secure enclave also does
all the Touch ID operations.

468
00:21:31,596 --> 00:21:34,116 A:middle
And because the Secure
enclave was created

469
00:21:34,806 --> 00:21:37,336 A:middle
to protect all the
data, even in case

470
00:21:37,726 --> 00:21:41,616 A:middle
that the kernel has been
compromised, all the components,

471
00:21:41,616 --> 00:21:44,846 A:middle
which are running inside Secure
enclave, can trust each other,

472
00:21:45,116 --> 00:21:48,196 A:middle
and can trust the data, which
are protected by Secure enclave.

473
00:21:49,106 --> 00:21:53,246 A:middle
And, fortunately, the Keychain
key operations are running also

474
00:21:53,246 --> 00:21:54,226 A:middle
in Secure enclave.

475
00:21:54,396 --> 00:21:59,856 A:middle
You have seen the example Wade
was showing, and in the case

476
00:21:59,856 --> 00:22:03,636 A:middle
of Touch ID, the Keychain key
operations can use the policy

477

478
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

479
00:21:59,856 --> 00:22:03,636 A:middle
of Touch ID, the Keychain key
operations can use the policy

480
00:22:04,096 --> 00:22:07,486 A:middle
evaluation result, or the
Touch ID match result,

481
00:22:07,836 --> 00:22:11,536 A:middle
and use that for
authorizing the Keychain item

482
00:22:11,536 --> 00:22:12,756 A:middle
decryption operation.

483
00:22:13,856 --> 00:22:17,486 A:middle
So, this way the Keychain
can protect your items

484
00:22:17,486 --> 00:22:18,916 A:middle
and still use the Touch ID.

485
00:22:19,796 --> 00:22:24,016 A:middle
But the matching is not the
only service the Secure enclave

486
00:22:24,106 --> 00:22:25,696 A:middle
provides to Touch ID.

487
00:22:26,566 --> 00:22:31,416 A:middle
Secure enclave also
enforces Touch ID policies,

488
00:22:31,946 --> 00:22:35,556 A:middle
and one of these policies
is really important for us

489
00:22:35,986 --> 00:22:38,226 A:middle
and is the counter
for failed matches.

490
00:22:39,116 --> 00:22:44,316 A:middle
After several failed matches, it
is Secure enclave that decides

491
00:22:44,316 --> 00:22:46,306 A:middle
that the Touch ID
should be disabled,

492
00:22:46,666 --> 00:22:47,876 A:middle
and that it cannot be used

493
00:22:47,976 --> 00:22:50,016 A:middle
for any other authentication
operation.

494
00:22:50,596 --> 00:22:53,326 A:middle
And you are used to that
from the device unlock,

495
00:22:53,766 --> 00:22:56,106 A:middle
where you have to enter
your device passcode

496
00:22:56,106 --> 00:22:58,296 A:middle
after several unsuccessful
tries,

497
00:22:59,086 --> 00:23:01,476 A:middle
and the Keychain is
exactly the same case.

498

499
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

500
00:22:59,086 --> 00:23:01,476 A:middle
and the Keychain is
exactly the same case.

501
00:23:02,006 --> 00:23:05,376 A:middle
So, once the Touch ID is
disabled, the only way how

502
00:23:05,376 --> 00:23:08,516 A:middle
to get to your Keychain item
is using the device passcode.

503
00:23:09,296 --> 00:23:12,866 A:middle
And the device passcode will
also enable the Touch ID,

504
00:23:12,866 --> 00:23:15,636 A:middle
so the next Keychain
operation will be able

505
00:23:15,636 --> 00:23:17,056 A:middle
to use Touch ID again.

506
00:23:18,316 --> 00:23:21,686 A:middle
This all is supported
by a new framework

507
00:23:21,766 --> 00:23:23,276 A:middle
called LocalAuthentication.

508
00:23:23,626 --> 00:23:24,936 A:middle
And we will be talking

509
00:23:24,936 --> 00:23:28,086 A:middle
about LocalAuthentication a
little bit later, but, for now,

510
00:23:28,726 --> 00:23:30,456 A:middle
let's see how
LocalAuthentication

511
00:23:30,456 --> 00:23:34,066 A:middle
and Keychain work together
with Secure enclave.

512
00:23:35,356 --> 00:23:40,756 A:middle
So, here we have an application
which tries to use Keychain API.

513
00:23:41,466 --> 00:23:45,406 A:middle
The request is sent to the
operating system service,

514
00:23:45,406 --> 00:23:46,746 A:middle
which takes care
of the Keychain,

515
00:23:47,356 --> 00:23:49,756 A:middle
and this service
communicates with Secure enclave

516
00:23:49,756 --> 00:23:51,566 A:middle
to decrypt the Keychain items.

517
00:23:52,006 --> 00:23:53,406 A:middle
This is what Wade was showing.

518
00:23:53,876 --> 00:23:55,136 A:middle
And this is the standard flow.

519
00:23:55,676 --> 00:23:58,886 A:middle
So, what happens when you
use the item with ACL?

520

521
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

522
00:24:00,066 --> 00:24:03,686 A:middle
In such case, the
Keychain service will start

523
00:24:03,686 --> 00:24:05,346 A:middle
LocalAuthentication service,

524
00:24:05,456 --> 00:24:08,546 A:middle
and the LocalAuthentication
service is responsible

525
00:24:08,966 --> 00:24:11,786 A:middle
for displaying correct
user interface,

526
00:24:12,346 --> 00:24:15,096 A:middle
based on information
from Secure enclave.

527
00:24:15,186 --> 00:24:17,766 A:middle
Because Secure enclave
is the component

528
00:24:17,766 --> 00:24:20,366 A:middle
which is actually
controlling the policy

529
00:24:20,366 --> 00:24:25,506 A:middle
and telling LocalAuthentication
what authentication should be

530
00:24:25,506 --> 00:24:26,256 A:middle
actually started.

531
00:24:27,536 --> 00:24:31,666 A:middle
And once the user provides
his fingerprint, or passcode,

532
00:24:33,086 --> 00:24:37,306 A:middle
the Secure enclave can authorize
the operation in Keychain

533
00:24:37,786 --> 00:24:39,506 A:middle
and the Keychain will
decrypt your data

534
00:24:39,626 --> 00:24:40,766 A:middle
and send them back to you.

535
00:24:42,136 --> 00:24:45,816 A:middle
I was mentioning user interface
here, and that it's the task

536
00:24:45,816 --> 00:24:48,876 A:middle
of LocalAuthentication,
so let's have a look

537
00:24:49,066 --> 00:24:50,646 A:middle
at the user interface.

538
00:24:52,216 --> 00:24:57,046 A:middle
We have a new user, we have
a new standard user interface

539
00:24:57,076 --> 00:24:58,966 A:middle
for Touch ID authentication,

540
00:24:59,236 --> 00:25:01,946 A:middle
and we have also a new
standard user interface

541

542
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

543
00:24:59,236 --> 00:25:01,946 A:middle
and we have also a new
standard user interface

544
00:25:01,946 --> 00:25:03,616 A:middle
for device passcode entering.

545
00:25:04,296 --> 00:25:08,016 A:middle
And the dialogue is
relatively simple.

546
00:25:08,116 --> 00:25:10,526 A:middle
It contains just the
name of your application,

547
00:25:10,526 --> 00:25:12,576 A:middle
which is provided by
the operating system,

548
00:25:12,916 --> 00:25:15,346 A:middle
and two buttons,
which are allowing

549
00:25:15,346 --> 00:25:16,906 A:middle
to cancel this operation

550
00:25:17,176 --> 00:25:21,596 A:middle
or to use the fallback
mechanism using passcode.

551
00:25:22,316 --> 00:25:26,246 A:middle
Your application
actually has a possibility

552
00:25:26,246 --> 00:25:27,886 A:middle
to extend this user interface.

553
00:25:28,266 --> 00:25:30,926 A:middle
You can add an additional string

554
00:25:31,176 --> 00:25:33,736 A:middle
which describes why you
are doing this operation.

555
00:25:34,346 --> 00:25:38,466 A:middle
And we are actually recommending
you to use this string,

556
00:25:38,466 --> 00:25:41,386 A:middle
because the user should know why
you are calling this operation,

557
00:25:41,386 --> 00:25:44,366 A:middle
why he is prompted for
Touch ID or passcode.

558
00:25:45,246 --> 00:25:50,316 A:middle
And, of course, on devices
without Touch ID, or on devices

559
00:25:50,796 --> 00:25:53,486 A:middle
without any Touch
ID enrolled fingers,

560
00:25:54,256 --> 00:26:00,376 A:middle
we have the standard passcode
entry screen which is also shown

561

562
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

563
00:25:54,256 --> 00:26:00,376 A:middle
we have the standard passcode
entry screen which is also shown

564
00:26:00,376 --> 00:26:05,996 A:middle
in case that the Touch ID is
disabled, or when user decided

565
00:26:05,996 --> 00:26:08,756 A:middle
that he will use passcode
instead of Touch ID

566
00:26:08,756 --> 00:26:09,996 A:middle
on the previous screen.

567
00:26:11,896 --> 00:26:14,426 A:middle
Because this authentication has

568
00:26:14,426 --> 00:26:18,366 A:middle
to happen during the
Keychain item processing,

569
00:26:18,786 --> 00:26:21,016 A:middle
it means that the
calls to Keychain,

570
00:26:21,466 --> 00:26:25,216 A:middle
which will return the
ACL protected items,

571
00:26:25,216 --> 00:26:26,046 A:middle
will be blocking.

572
00:26:26,046 --> 00:26:28,186 A:middle
So, you have to deal with
that, and we will talk

573
00:26:28,186 --> 00:26:30,676 A:middle
about that a little bit later.

574
00:26:31,316 --> 00:26:35,146 A:middle
So, this is all about the
authentication and Touch ID

575
00:26:35,146 --> 00:26:36,256 A:middle
and the user interface.

576
00:26:36,616 --> 00:26:39,516 A:middle
So, let's return back
to the accessibility,

577
00:26:40,796 --> 00:26:43,826 A:middle
and accessibility you
already know, so I will not go

578
00:26:43,826 --> 00:26:46,146 A:middle
through the details, and I
will not repeat what Wade

579
00:26:46,146 --> 00:26:46,826 A:middle
already said.

580
00:26:47,896 --> 00:26:51,176 A:middle
But I have a couple of
recommendations, because ACL

581
00:26:51,176 --> 00:26:54,126 A:middle
and the accessibility
are connected,

582
00:26:54,126 --> 00:26:56,456 A:middle
and there are some
implications of using them.

583
00:26:56,566 --> 00:27:00,566 A:middle
And one of the implications is
that we need the user interface.

584

585
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

586
00:26:56,566 --> 00:27:00,566 A:middle
And one of the implications is
that we need the user interface.

587
00:27:00,566 --> 00:27:01,836 A:middle
The user has to authenticate.

588
00:27:02,056 --> 00:27:03,306 A:middle
So, the obvious choice

589
00:27:03,736 --> 00:27:08,936 A:middle
of the accessibility class is
WhenUnlocked, or the new one,

590
00:27:08,936 --> 00:27:10,706 A:middle
WhenUnlocked and PasscodeSet.

591
00:27:11,106 --> 00:27:11,866 A:middle
Both are good.

592
00:27:11,866 --> 00:27:13,886 A:middle
The second one is a
little bit more straight,

593
00:27:14,226 --> 00:27:16,196 A:middle
because it deletes
your data in case

594
00:27:16,636 --> 00:27:17,966 A:middle
that the passcode was removed.

595
00:27:18,836 --> 00:27:20,516 A:middle
But you can use both,
and actually,

596
00:27:20,846 --> 00:27:22,696 A:middle
even if you remove
your passcode,

597
00:27:22,836 --> 00:27:26,136 A:middle
the WhenUnlocked class
will not allow the user

598
00:27:26,136 --> 00:27:30,176 A:middle
to access the data, because
the data are protected also

599
00:27:30,176 --> 00:27:32,056 A:middle
by the user presence policy.

600
00:27:32,256 --> 00:27:34,876 A:middle
So, the accessibility and
the policy work together,

601
00:27:35,246 --> 00:27:39,046 A:middle
and both need to be
satisfied to get the data.

602
00:27:39,106 --> 00:27:41,936 A:middle
So, you can choose,
and now you know how

603
00:27:41,936 --> 00:27:44,406 A:middle
to set the accessibility
and what you can use

604
00:27:44,406 --> 00:27:45,686 A:middle
for the authentication.

605
00:27:46,486 --> 00:27:51,726 A:middle
So, let's see how the changes in
your source code will look like.

606
00:27:52,556 --> 00:27:57,766 A:middle
This is a simple example of
secret-of storing a secret.

607
00:27:58,246 --> 00:27:59,686 A:middle
Wade was already
talking about that,

608
00:27:59,686 --> 00:28:02,676 A:middle
and it's actually the same
example Wade was showing,

609

610
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

611
00:27:59,686 --> 00:28:02,676 A:middle
and it's actually the same
example Wade was showing,

612
00:28:02,676 --> 00:28:05,626 A:middle
so you know all the
components of the dictionary.

613
00:28:06,616 --> 00:28:11,616 A:middle
And to use the ACL, the
only thing you have to do is

614
00:28:11,686 --> 00:28:14,486 A:middle
to create the new
access control object,

615
00:28:15,056 --> 00:28:20,046 A:middle
and set the accessibility
and authentication,

616
00:28:21,146 --> 00:28:22,906 A:middle
and once you have this object,

617
00:28:23,596 --> 00:28:25,566 A:middle
you can use it inside
the dictionary.

618
00:28:26,696 --> 00:28:28,356 A:middle
And by calling the secItemAdd,

619
00:28:28,706 --> 00:28:32,376 A:middle
you will create the
new ACL protected item.

620
00:28:33,566 --> 00:28:34,616 A:middle
That's all you have to do.

621
00:28:34,766 --> 00:28:36,386 A:middle
This is really the only change.

622
00:28:37,146 --> 00:28:40,856 A:middle
And once you have the item
stored, you can read the item.

623
00:28:41,716 --> 00:28:46,376 A:middle
And to read the secret,
here we have the example

624
00:28:46,376 --> 00:28:47,916 A:middle
from Wade's slide as well.

625
00:28:48,536 --> 00:28:50,956 A:middle
And already this
example will work.

626
00:28:50,956 --> 00:28:52,126 A:middle
It will do everything.

627
00:28:52,126 --> 00:28:55,176 A:middle
It will add the user for the
authentication-you don't need

628
00:28:55,176 --> 00:28:56,056 A:middle
to do any changes.

629
00:28:56,556 --> 00:28:58,806 A:middle
But I would suggest to
do at least one change,

630
00:28:58,806 --> 00:29:00,926 A:middle
and that is the addition
of the operation prompt.

631

632
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

633
00:28:58,806 --> 00:29:00,926 A:middle
and that is the addition
of the operation prompt.

634
00:29:00,926 --> 00:29:04,256 A:middle
Because contrary to
the previous cases,

635
00:29:04,256 --> 00:29:07,076 A:middle
where you were just reading
the secret in your application,

636
00:29:07,316 --> 00:29:09,836 A:middle
here you are asking the
user for some action,

637
00:29:10,256 --> 00:29:11,796 A:middle
so the user should be informed.

638
00:29:12,736 --> 00:29:17,596 A:middle
And all the magic happens in
the secItemCopyMatching call.

639
00:29:18,496 --> 00:29:22,126 A:middle
This call will start the
LocalAuthentication service,

640
00:29:22,636 --> 00:29:25,496 A:middle
and the LocalAuthentication
service will start the

641
00:29:25,496 --> 00:29:26,306 A:middle
user interface.

642
00:29:27,246 --> 00:29:30,956 A:middle
And here, the user will have
to touch or enter the passcode

643
00:29:31,656 --> 00:29:34,816 A:middle
to actually decrypt
your Keychain item.

644
00:29:35,566 --> 00:29:36,976 A:middle
And once the item
is returned back

645
00:29:36,976 --> 00:29:38,456 A:middle
to your application,
you can use it.

646
00:29:38,696 --> 00:29:41,326 A:middle
But, as you saw, the
call is blocking.

647
00:29:41,706 --> 00:29:46,216 A:middle
So I would suggest to use it
inside a dispatch async block,

648
00:29:46,516 --> 00:29:49,226 A:middle
so you are not blocking
your main queue for example.

649
00:29:49,986 --> 00:29:53,226 A:middle
And that's actually
all you have to do.

650
00:29:53,626 --> 00:29:55,096 A:middle
No other changes are necessary.

651
00:29:55,326 --> 00:29:59,096 A:middle
So, now you know what
is the authentication,

652
00:29:59,096 --> 00:30:02,266 A:middle
how to do the changes in
your code, so let's talk

653

654
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

655
00:29:59,096 --> 00:30:02,266 A:middle
how to do the changes in
your code, so let's talk

656
00:30:02,266 --> 00:30:06,186 A:middle
about some things to keep in
mind when you are using ACLs,

657
00:30:06,186 --> 00:30:09,826 A:middle
because this is quite
a new concept.

658
00:30:10,856 --> 00:30:15,046 A:middle
You already see that we need the
application to be foreground.

659
00:30:15,456 --> 00:30:19,516 A:middle
Actually, if it happens, and
you will call a Keychain item

660
00:30:19,516 --> 00:30:20,966 A:middle
operation, Keychain operation

661
00:30:21,376 --> 00:30:24,896 A:middle
when you are a background
application, the call will fail

662
00:30:24,896 --> 00:30:28,666 A:middle
in case that there is
some ACL protected item.

663
00:30:29,256 --> 00:30:32,636 A:middle
And an important
thing to remember is

664
00:30:33,166 --> 00:30:37,726 A:middle
that any query may contain
actually ACL protected items.

665
00:30:38,226 --> 00:30:41,486 A:middle
So, that means that also
secItemAdd or, of course,

666
00:30:41,486 --> 00:30:45,916 A:middle
secItemUpdate may ask the
user for authentication

667
00:30:46,136 --> 00:30:48,856 A:middle
because there might be some
ACL protected item already.

668
00:30:49,716 --> 00:30:51,286 A:middle
What's not so obvious is

669
00:30:51,656 --> 00:30:54,576 A:middle
that the Keychain is,
in fact, a database.

670
00:30:54,576 --> 00:30:57,756 A:middle
And as a database, it can
return multiple results.

671
00:30:58,116 --> 00:31:01,446 A:middle
So, in case that you are used
to using quite broad queries,

672

673
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

674
00:30:58,116 --> 00:31:01,446 A:middle
So, in case that you are used
to using quite broad queries,

675
00:31:02,446 --> 00:31:04,456 A:middle
you may get the situation

676
00:31:04,456 --> 00:31:07,686 A:middle
that the query will contain
the ACL protected item,

677
00:31:08,286 --> 00:31:10,426 A:middle
and in such case, the
user will be asked

678
00:31:10,456 --> 00:31:11,596 A:middle
for authentication as well.

679
00:31:12,506 --> 00:31:15,846 A:middle
So, first of all, you should not
use broad queries if possible,

680
00:31:16,256 --> 00:31:17,996 A:middle
but if you need help with that,

681
00:31:18,466 --> 00:31:20,656 A:middle
we have a special no
authentication mode

682
00:31:20,956 --> 00:31:23,856 A:middle
which allows you
to ask the Keychain

683
00:31:24,476 --> 00:31:26,456 A:middle
to suppress the user interface,

684
00:31:26,666 --> 00:31:28,676 A:middle
and Keychain will
just let you know

685
00:31:28,936 --> 00:31:32,886 A:middle
that this particular query
would require authentication.

686
00:31:36,776 --> 00:31:42,856 A:middle
Last, but not least, these
ACL protected items are not

687
00:31:42,856 --> 00:31:44,956 A:middle
synchronizable and
are not backup.

688
00:31:45,216 --> 00:31:47,486 A:middle
These are really
device-only items.

689
00:31:48,356 --> 00:31:50,936 A:middle
So this is all about
the Keychain.

690
00:31:51,526 --> 00:31:53,576 A:middle
You can see that it's
pretty easy to use,

691
00:31:53,576 --> 00:31:55,176 A:middle
the Touch ID, with Keychain.

692
00:31:55,636 --> 00:31:58,996 A:middle
And also the security of
the solution is quite high.

693
00:31:59,716 --> 00:32:02,406 A:middle
And we are talking about
LocalAuthentication,

694

695
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

696
00:31:59,716 --> 00:32:02,406 A:middle
And we are talking about
LocalAuthentication,

697
00:32:02,806 --> 00:32:06,666 A:middle
so let's see how you can
use LocalAuthentication

698
00:32:06,666 --> 00:32:07,416 A:middle
in your code.

699
00:32:08,186 --> 00:32:10,256 A:middle
You have seen how
it participates

700
00:32:10,256 --> 00:32:13,226 A:middle
on Keychain decryption
for Keychain,

701
00:32:13,356 --> 00:32:16,216 A:middle
and how it works together
with Secure enclave.

702
00:32:17,156 --> 00:32:23,476 A:middle
So, let's talk about the
features you can use inside your

703
00:32:23,476 --> 00:32:24,236 A:middle
own application.

704
00:32:24,886 --> 00:32:27,596 A:middle
LocalAuthentication was
created as a mechanism

705
00:32:27,596 --> 00:32:30,236 A:middle
to collection credentials
like device passcode

706
00:32:30,236 --> 00:32:33,006 A:middle
or start authentication
operations like Touch ID,

707
00:32:33,836 --> 00:32:36,046 A:middle
and to work together
with Secure enclave

708
00:32:36,046 --> 00:32:37,536 A:middle
and other system components

709
00:32:37,786 --> 00:32:40,066 A:middle
to finish the authentication
of user.

710
00:32:40,966 --> 00:32:45,116 A:middle
But it's a generic policy
evaluation mechanism as well.

711
00:32:45,596 --> 00:32:49,586 A:middle
So any application can call
policy evaluation inside

712
00:32:49,586 --> 00:32:51,906 A:middle
secure-inside
LocalAuthentication,

713
00:32:52,286 --> 00:32:56,456 A:middle
and LocalAuthentication will
start the operation inside

714
00:32:56,596 --> 00:32:58,826 A:middle
Secure enclave, and this way,

715
00:32:58,896 --> 00:33:02,526 A:middle
you can initiate the Touch ID
operation and gather the result,

716

717
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

718
00:32:58,896 --> 00:33:02,526 A:middle
you can initiate the Touch ID
operation and gather the result,

719
00:33:02,526 --> 00:33:05,356 A:middle
even without contact
with Secure enclave.

720
00:33:06,496 --> 00:33:12,316 A:middle
So, to get a better idea, let's
talk about some use cases,

721
00:33:12,316 --> 00:33:15,246 A:middle
where you would use
LocalAuthentication instead

722
00:33:15,246 --> 00:33:17,306 A:middle
of the Keychain case.

723
00:33:18,886 --> 00:33:23,236 A:middle
For example, you may want to
verify that a user is enrolled.

724
00:33:23,526 --> 00:33:26,016 A:middle
This is something
LocalAuthentication allows you.

725
00:33:26,766 --> 00:33:29,326 A:middle
And you may want to
verify it because you want

726
00:33:29,326 --> 00:33:31,186 A:middle
to enable some feature
of your application,

727
00:33:31,186 --> 00:33:34,496 A:middle
or you want to do some
kind of parental control,

728
00:33:34,496 --> 00:33:36,526 A:middle
because you want to
be sure that the owner

729
00:33:36,526 --> 00:33:37,816 A:middle
of the device is present.

730
00:33:38,226 --> 00:33:40,846 A:middle
For these cases, you can
use LocalAuthentication.

731
00:33:41,666 --> 00:33:44,586 A:middle
Or you may want to
extend your application

732
00:33:44,666 --> 00:33:46,306 A:middle
authentication mechanisms.

733
00:33:47,036 --> 00:33:50,566 A:middle
Well, you can use Touch ID
as a first factor instead

734
00:33:51,376 --> 00:33:53,356 A:middle
of your password or pin.

735
00:33:54,206 --> 00:33:58,116 A:middle
And this is more a
task for the Keychain,

736
00:33:58,236 --> 00:34:02,636 A:middle
but in case that you do not
want to use device passcode,

737

738
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

739
00:33:58,236 --> 00:34:02,636 A:middle
but in case that you do not
want to use device passcode,

740
00:34:02,966 --> 00:34:05,376 A:middle
you can use LocalAuthentication
and you will see how.

741
00:34:06,146 --> 00:34:09,676 A:middle
Or you may want to use Touch ID
as a second factor in addition

742
00:34:09,676 --> 00:34:11,326 A:middle
to your authentication.

743
00:34:11,326 --> 00:34:16,196 A:middle
And then the LocalAuthentication
is also the best choice for you.

744
00:34:17,246 --> 00:34:21,556 A:middle
I was talking about the
difference between Keychain

745
00:34:21,556 --> 00:34:23,096 A:middle
and LocalAuthentication
a little bit,

746
00:34:23,896 --> 00:34:26,335 A:middle
so let's see what
the security is

747
00:34:26,896 --> 00:34:28,496 A:middle
to set the expectations right.

748
00:34:29,366 --> 00:34:31,966 A:middle
The security of
LocalAuthentication

749
00:34:31,966 --> 00:34:34,716 A:middle
and the Keychain solution
with Touch ID is different.

750
00:34:35,036 --> 00:34:39,025 A:middle
Because, in Keychain's case,
it's the Secure enclave

751
00:34:39,025 --> 00:34:43,406 A:middle
which is the trusted component,
and the trust is really

752
00:34:43,406 --> 00:34:46,326 A:middle
between the operating
system and Secure enclave.

753
00:34:46,976 --> 00:34:49,666 A:middle
With LocalAuthentication,
the trust is

754
00:34:49,666 --> 00:34:52,085 A:middle
between your application
and operating system.

755
00:34:52,656 --> 00:34:55,275 A:middle
There are no secrets which
will be stored in case

756
00:34:55,275 --> 00:34:56,876 A:middle
of the LocalAuthentication.

757
00:34:57,666 --> 00:35:00,466 A:middle
And that also means that
you have no direct access

758

759
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

760
00:34:57,666 --> 00:35:00,466 A:middle
And that also means that
you have no direct access

761
00:35:00,466 --> 00:35:03,816 A:middle
to Secure enclave, you have
just the access to the results.

762
00:35:03,816 --> 00:35:07,396 A:middle
And, of course, and I
want to emphasize this,

763
00:35:08,066 --> 00:35:10,626 A:middle
you have no access to the
registered fingerprints.

764
00:35:11,676 --> 00:35:12,996 A:middle
The registered fingerprints

765
00:35:13,656 --> 00:35:18,216 A:middle
and the fingerprint images are
all owned by Secure enclave.

766
00:35:18,326 --> 00:35:20,696 A:middle
The Secure enclave
is the only owner

767
00:35:21,466 --> 00:35:25,696 A:middle
and no other system component
can access this information,

768
00:35:25,936 --> 00:35:29,246 A:middle
not even kernel has any
access to fingerprint image

769
00:35:29,246 --> 00:35:30,616 A:middle
or registered fingerprints.

770
00:35:31,126 --> 00:35:33,946 A:middle
So, it means that you
will also never get access

771
00:35:34,026 --> 00:35:37,556 A:middle
to the registered fingers, or to
the management of these fingers.

772
00:35:39,736 --> 00:35:43,316 A:middle
Let's see how this looks
from the API perspective.

773
00:35:43,916 --> 00:35:46,806 A:middle
So, you already know that you
can use LocalAuthentication

774
00:35:46,886 --> 00:35:48,606 A:middle
to invoke Touch ID operation.

775
00:35:49,026 --> 00:35:51,946 A:middle
So, how to do that?

776
00:35:52,056 --> 00:35:54,846 A:middle
We have two new functions.

777
00:35:55,336 --> 00:35:58,206 A:middle
One is canEvaluatePolicy
and one is evaluatePolicy.

778
00:35:58,206 --> 00:36:00,766 A:middle
And the first one just checks

779

780
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

781
00:35:58,206 --> 00:36:00,766 A:middle
And the first one just checks

782
00:36:00,766 --> 00:36:04,166 A:middle
if the policy can be ever
evaluated on this device.

783
00:36:04,606 --> 00:36:07,416 A:middle
So, in the case of the Touch
ID, it will just tell you

784
00:36:07,746 --> 00:36:09,756 A:middle
if the device is
Touch ID enabled,

785
00:36:09,756 --> 00:36:11,896 A:middle
and if there are any
fingerprints enrolled.

786
00:36:12,736 --> 00:36:16,636 A:middle
The Evaluate call then starts
the authentication operation

787
00:36:17,386 --> 00:36:19,356 A:middle
and shows the necessary
user interface.

788
00:36:20,596 --> 00:36:23,836 A:middle
And the result, which you will
get, is just plain "yes" or "no"

789
00:36:23,836 --> 00:36:25,636 A:middle
from this Evaluate
Policy function.

790
00:36:26,896 --> 00:36:28,096 A:middle
Let's see what policy we have.

791
00:36:28,426 --> 00:36:32,806 A:middle
So, this is the policy you
can use to show the Touch ID.

792
00:36:33,716 --> 00:36:36,206 A:middle
And contrary to the
Keychain case,

793
00:36:36,206 --> 00:36:37,566 A:middle
and I was already mentioning,

794
00:36:37,566 --> 00:36:40,756 A:middle
that there's no passcode
for back mechanism.

795
00:36:41,216 --> 00:36:42,966 A:middle
But, your application has

796
00:36:43,006 --> 00:36:45,456 A:middle
to provide its own
password entry UI,

797
00:36:45,456 --> 00:36:48,566 A:middle
and your own fallback
mechanism, to allow the user

798
00:36:48,566 --> 00:36:49,976 A:middle
to skip this operation.

799
00:36:50,606 --> 00:36:52,736 A:middle
You should already have
some mechanism like that,

800
00:36:53,016 --> 00:36:55,266 A:middle
because you are just
extending your application.

801
00:36:55,556 --> 00:36:58,256 A:middle
So, this is the way how
to reuse this mechanism.

802
00:36:59,056 --> 00:37:03,176 A:middle
And as with Keychain, there are
some things you should remember

803

804
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

805
00:36:59,056 --> 00:37:03,176 A:middle
And as with Keychain, there are
some things you should remember

806
00:37:03,176 --> 00:37:05,936 A:middle
when using LocalAuthentication.

807
00:37:07,276 --> 00:37:09,616 A:middle
Again, because of the
need to authenticate,

808
00:37:09,666 --> 00:37:12,466 A:middle
you have to be a foreground
application to use this API.

809
00:37:12,466 --> 00:37:16,816 A:middle
And you have to also
account with the possibility

810
00:37:16,816 --> 00:37:19,006 A:middle
that the policy evaluation
will always fail,

811
00:37:19,006 --> 00:37:21,456 A:middle
even if it would be
theoretically possible

812
00:37:21,696 --> 00:37:25,446 A:middle
on that device to evaluate the
policy, because, for example,

813
00:37:25,446 --> 00:37:29,626 A:middle
if Touch ID is present,
but it's in the local state

814
00:37:29,626 --> 00:37:32,566 A:middle
or there might be some
other configuration setting

815
00:37:32,646 --> 00:37:35,216 A:middle
which will prevent the user
to use the authentication.

816
00:37:35,216 --> 00:37:38,536 A:middle
So, you should use your
own fallback mechanism,

817
00:37:38,686 --> 00:37:40,646 A:middle
and your application
is really required

818
00:37:40,646 --> 00:37:42,316 A:middle
to do that, and we will see how.

819
00:37:42,926 --> 00:37:49,836 A:middle
Let's see the real examples,
how this is done in your code.

820
00:37:50,086 --> 00:37:52,666 A:middle
So, the canEvaluatePolicy
call to check

821
00:37:52,666 --> 00:37:54,336 A:middle
if the Touch ID is enabled

822
00:37:54,336 --> 00:37:57,246 A:middle
or any fingerprints are
registered is really simple.

823
00:37:57,446 --> 00:37:59,776 A:middle
It's just single call
which is not blocking,

824

825
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

826
00:38:00,146 --> 00:38:01,896 A:middle
it does not need
any user interface,

827
00:38:01,946 --> 00:38:03,336 A:middle
so you can call it any time.

828
00:38:04,236 --> 00:38:08,506 A:middle
And the actual call which
shows the user interface

829
00:38:08,886 --> 00:38:12,586 A:middle
and starts the operation
inside Secure enclave is

830
00:38:12,586 --> 00:38:13,956 A:middle
the evaluatePolicy.

831
00:38:14,646 --> 00:38:17,296 A:middle
And to call evaluatePolicy
you need two things.

832
00:38:17,646 --> 00:38:20,326 A:middle
First of all, you need to
specify the policy that's clear.

833
00:38:21,096 --> 00:38:23,936 A:middle
But you have to also specify
your localized reason,

834
00:38:23,936 --> 00:38:26,226 A:middle
and in this case, this
is really mandatory.

835
00:38:26,496 --> 00:38:30,356 A:middle
We do not accept any nil
or empty string here,

836
00:38:30,676 --> 00:38:34,346 A:middle
because we want the user to know
not only what application is

837
00:38:34,626 --> 00:38:37,026 A:middle
calling this operation,
but also why.

838
00:38:37,906 --> 00:38:40,796 A:middle
And the result is then returned
in a simple reply block.

839
00:38:41,576 --> 00:38:44,406 A:middle
So, let's see what happens
when you call this function.

840
00:38:45,036 --> 00:38:47,966 A:middle
The user will see
a user interface

841
00:38:47,966 --> 00:38:49,956 A:middle
which is similar to
the Keychain case.

842
00:38:50,646 --> 00:38:53,396 A:middle
We can see that there is again
the name of your application,

843
00:38:53,616 --> 00:38:56,686 A:middle
and also the reason
string, and two buttons.

844
00:38:57,186 --> 00:39:00,576 A:middle
And the main difference is
in the enter password button,

845

846
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

847
00:38:57,186 --> 00:39:00,576 A:middle
And the main difference is
in the enter password button,

848
00:39:00,916 --> 00:39:04,686 A:middle
and also in the behavior
of this dialogue.

849
00:39:05,286 --> 00:39:08,526 A:middle
In case of Keychain, you could
use a passcode or the Touch ID

850
00:39:08,526 --> 00:39:11,056 A:middle
to satisfy the authentication.

851
00:39:11,416 --> 00:39:13,176 A:middle
In the case of
LocalAuthentication,

852
00:39:13,176 --> 00:39:16,846 A:middle
the only way how to
successfully authenticate is

853
00:39:16,846 --> 00:39:18,386 A:middle
to use your fingerprint.

854
00:39:19,276 --> 00:39:21,536 A:middle
And both enter password

855
00:39:21,536 --> 00:39:24,776 A:middle
and cancel buttons will
actually dismiss this dialogue

856
00:39:24,776 --> 00:39:27,216 A:middle
and return control
to your application.

857
00:39:27,796 --> 00:39:32,006 A:middle
So, your application has to
process these return values.

858
00:39:32,666 --> 00:39:34,276 A:middle
And when this happens,

859
00:39:34,586 --> 00:39:37,616 A:middle
so in case that the
user used the finger

860
00:39:37,616 --> 00:39:39,716 A:middle
and he was successfully
authenticated,

861
00:39:39,716 --> 00:39:42,366 A:middle
you will get success,
and that means

862
00:39:42,366 --> 00:39:44,166 A:middle
that the Touch ID
was really used,

863
00:39:44,426 --> 00:39:48,046 A:middle
and you can use this information

864
00:39:48,436 --> 00:39:50,976 A:middle
to change the behavior
of your application.

865
00:39:52,186 --> 00:39:53,986 A:middle
In case that this fails,

866
00:39:54,116 --> 00:39:55,956 A:middle
you have to check
for the error codes.

867
00:39:56,596 --> 00:40:01,656 A:middle
And you have to check if user
used the enter password button,

868

869
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

870
00:39:56,596 --> 00:40:01,656 A:middle
And you have to check if user
used the enter password button,

871
00:40:02,066 --> 00:40:04,856 A:middle
and react by showing your own UI

872
00:40:05,266 --> 00:40:08,006 A:middle
with your own password
for back mechanism.

873
00:40:08,406 --> 00:40:13,786 A:middle
And, of course, the cancel has
to be processed the same way.

874
00:40:14,016 --> 00:40:17,546 A:middle
So, this is how it looks
from the source code.

875
00:40:17,836 --> 00:40:24,506 A:middle
So, let's see a short demo,
which will show the Keychain

876
00:40:25,056 --> 00:40:28,736 A:middle
and Touch ID on a real phone.

877
00:40:29,606 --> 00:40:32,866 A:middle
So, here we have a
Keychain demo application.

878
00:40:33,636 --> 00:40:36,326 A:middle
This demo application
will be-the sources

879
00:40:36,326 --> 00:40:40,076 A:middle
for the demo application will
be available after this session,

880
00:40:40,076 --> 00:40:43,376 A:middle
so you can try it and you
can experiment with that.

881
00:40:44,216 --> 00:40:45,916 A:middle
And let me show the features.

882
00:40:46,996 --> 00:40:49,136 A:middle
It's really very simple.

883
00:40:49,426 --> 00:40:53,316 A:middle
For the Keychain, I have
just four functions here

884
00:40:53,316 --> 00:40:54,106 A:middle
which I can try.

885
00:40:54,696 --> 00:40:57,536 A:middle
So, let me start
with adding the item,

886
00:40:57,916 --> 00:41:02,306 A:middle
and by adding the item using
secItemAdd, I created an item

887

888
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

889
00:40:57,916 --> 00:41:02,306 A:middle
and by adding the item using
secItemAdd, I created an item

890
00:41:02,516 --> 00:41:04,266 A:middle
which is protected by ACL.

891
00:41:05,126 --> 00:41:08,896 A:middle
And I used exactly the same code
as I was showing in the slide.

892
00:41:09,806 --> 00:41:14,996 A:middle
And to read that item, I can
ask for the secCopyItemMatching

893
00:41:14,996 --> 00:41:17,046 A:middle
for the items, and
I am presented

894
00:41:17,046 --> 00:41:19,216 A:middle
by the Touch ID user interface.

895
00:41:19,376 --> 00:41:22,766 A:middle
So, let me try, for
example, a wrong finger,

896
00:41:22,846 --> 00:41:25,306 A:middle
to see how the operation
looks like when it fails.

897
00:41:26,006 --> 00:41:27,426 A:middle
So, this is not an
enrolled finger,

898
00:41:27,426 --> 00:41:29,446 A:middle
so it asks me to try again.

899
00:41:29,886 --> 00:41:33,806 A:middle
And I will use an enrolled
finger to get the secret back.

900
00:41:34,616 --> 00:41:37,616 A:middle
And I got the secret which
I stored using secItemAdd,

901
00:41:38,506 --> 00:41:40,266 A:middle
so I want to update the secret.

902
00:41:40,826 --> 00:41:44,426 A:middle
And because the item is there,
I will be calling the update,

903
00:41:44,766 --> 00:41:48,076 A:middle
I am again asked for
Touch ID or passcode.

904
00:41:48,546 --> 00:41:51,016 A:middle
And the message is changed here,

905
00:41:51,016 --> 00:41:54,776 A:middle
so I am informing the user
what's actually going on.

906
00:41:55,396 --> 00:41:58,686 A:middle
So, I will use again a correct
finger to update the item,

907
00:41:59,256 --> 00:42:02,426 A:middle
and to check that, I will
do this operation again,

908

909
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

910
00:41:59,256 --> 00:42:02,426 A:middle
and to check that, I will
do this operation again,

911
00:42:02,426 --> 00:42:06,416 A:middle
but this time I decided
that I want to use passcode.

912
00:42:06,716 --> 00:42:08,426 A:middle
So, I will enter the passcode.

913
00:42:08,996 --> 00:42:12,526 A:middle
And as you can see, the
passcode is also able

914
00:42:12,526 --> 00:42:16,146 A:middle
to decrypt your item and
return it back to you.

915
00:42:16,616 --> 00:42:19,266 A:middle
So, it's very simple from
the developer's perspective,

916
00:42:19,626 --> 00:42:22,776 A:middle
and it's very simple and
natural from user perspective,

917
00:42:22,776 --> 00:42:26,146 A:middle
because users are used to
similar screens already

918
00:42:26,516 --> 00:42:30,086 A:middle
from the payments for app store.

919
00:42:32,356 --> 00:42:36,356 A:middle
For LocalAuthentication,
we are just two functions.

920
00:42:36,356 --> 00:42:39,606 A:middle
One is canEvaluatePolicy, and
the result will be, of course,

921
00:42:40,106 --> 00:42:42,316 A:middle
success because you
saw that I am enrolled

922
00:42:42,456 --> 00:42:43,526 A:middle
and everything is working.

923
00:42:44,206 --> 00:42:50,176 A:middle
And policy evaluation actually
shows the user interface,

924
00:42:50,896 --> 00:42:52,766 A:middle
which contains enter
password and cancel.

925
00:42:53,116 --> 00:42:57,526 A:middle
So first of all, I want to
see how it works successfully.

926
00:42:58,006 --> 00:43:02,496 A:middle
And I can try also to
press the enter password.

927

928
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

929
00:42:58,006 --> 00:43:02,496 A:middle
And I can try also to
press the enter password.

930
00:43:02,956 --> 00:43:05,146 A:middle
And here, I don't see
any user interface,

931
00:43:05,146 --> 00:43:06,346 A:middle
because the user interface has

932
00:43:06,346 --> 00:43:08,056 A:middle
to be provided by
our application.

933
00:43:08,376 --> 00:43:12,566 A:middle
What I see is an error
which tells the application

934
00:43:12,606 --> 00:43:16,106 A:middle
to show its own fallback
mechanism and to take care

935
00:43:16,106 --> 00:43:17,416 A:middle
of the backup mechanism.

936
00:43:18,256 --> 00:43:21,326 A:middle
So, this is all about the APIs.

937
00:43:21,326 --> 00:43:26,136 A:middle
I have just a couple,
few things, as a summary.

938
00:43:26,676 --> 00:43:29,616 A:middle
Any time you need to
store a user secret,

939
00:43:30,506 --> 00:43:31,926 A:middle
you should use Keychain.

940
00:43:31,926 --> 00:43:34,756 A:middle
The Keychain is here for
user secrets and keys,

941
00:43:35,186 --> 00:43:38,986 A:middle
and it's really operating
system protected database,

942
00:43:39,276 --> 00:43:41,706 A:middle
which you should
use for any secrets,

943
00:43:42,496 --> 00:43:44,826 A:middle
and it has Secure
enclave protection.

944
00:43:44,826 --> 00:43:47,456 A:middle
So, it's the highest
security you can achieve.

945
00:43:48,556 --> 00:43:51,466 A:middle
We have also a couple
of new features,

946
00:43:51,796 --> 00:43:53,706 A:middle
which we added in this release.

947
00:43:54,536 --> 00:43:58,096 A:middle
And you can use the
new accessibility class

948
00:43:59,136 --> 00:44:03,156 A:middle
to protect your items, and
to delete your items in case

949

950
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

951
00:43:59,136 --> 00:44:03,156 A:middle
to protect your items, and
to delete your items in case

952
00:44:03,276 --> 00:44:05,596 A:middle
that the passcode is
removed on the device.

953
00:44:06,476 --> 00:44:11,426 A:middle
We have also the new
Keychain item ACL mechanism,

954
00:44:12,176 --> 00:44:15,556 A:middle
which allows you to define what
authentication has to happen

955
00:44:15,556 --> 00:44:17,826 A:middle
when you are accessing
your Keychain items.

956
00:44:18,196 --> 00:44:21,276 A:middle
And you can use it currently
with Touch ID and passcode

957
00:44:21,426 --> 00:44:23,196 A:middle
to protect your Keychain items.

958
00:44:24,246 --> 00:44:27,186 A:middle
And we also have a new
LocalAuthentication framework,

959
00:44:27,906 --> 00:44:32,036 A:middle
which allows you to start the
Touch ID operation directly

960
00:44:32,036 --> 00:44:33,116 A:middle
from your application.

961
00:44:34,166 --> 00:44:36,856 A:middle
And to get more information
about this,

962
00:44:38,076 --> 00:44:40,736 A:middle
you can send your
e-mails to Paul Danbold,

963
00:44:41,186 --> 00:44:43,206 A:middle
or you should check
the documentation.

964
00:44:43,206 --> 00:44:46,166 A:middle
There will be documentation
describing LocalAuthentication

965
00:44:46,166 --> 00:44:47,116 A:middle
and the new changes.

966
00:44:47,856 --> 00:44:50,726 A:middle
And I suggest you to read
the Security White Paper,

967
00:44:50,726 --> 00:44:53,576 A:middle
because this is really a
great source of information

968
00:44:53,576 --> 00:44:56,086 A:middle
about Secure enclave
and security in general.

969
00:44:56,086 --> 00:44:59,216 A:middle
And it will tell you also
how Touch ID is done.

970

971
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

972
00:45:00,066 --> 00:45:00,876 A:middle
And, of course,

973
00:45:00,876 --> 00:45:05,366 A:middle
Apple Development Forums are
the great source of information,

974
00:45:05,456 --> 00:45:09,366 A:middle
so ask your questions there.

975
00:45:09,566 --> 00:45:14,086 A:middle
We have also one related session
tomorrow, it's the User Privacy

976
00:45:14,086 --> 00:45:17,306 A:middle
in iOS and OS X, so you
might find this interesting.

977
00:45:17,946 --> 00:45:19,736 A:middle
So, tomorrow, here in Nob Hill.

978
00:45:20,016 --> 00:45:21,026 A:middle
Thank you very much.

979
00:45:21,286 --> 00:45:22,376 A:middle
I'll be looking forward

980
00:45:22,376 --> 00:45:23,736 A:middle
to meeting you in
the security labs.

981
00:45:24,286 --> 00:45:25,606 A:middle
And yeah, see you there.

982
00:45:26,516 --> 00:45:29,470 A:middle
[ Applause ]

983
