X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:11,206 --> 00:00:13,596 A:middle
>> Hi. Welcome to
Swift Playgrounds.

2
00:00:13,926 --> 00:00:16,315 A:middle
I'm Rick Ballard and with
me today is my colleague

3
00:00:16,315 --> 00:00:17,086 A:middle
Connor Wakamo.

4
00:00:17,356 --> 00:00:18,956 A:middle
We're both Engineers
in the Xcode Team

5
00:00:18,956 --> 00:00:21,136 A:middle
and we've been working hard
to bring Playgrounds to life.

6
00:00:22,406 --> 00:00:24,496 A:middle
We introduced Playgrounds
to the world Monday morning

7
00:00:24,496 --> 00:00:25,606 A:middle
and you saw a little bit more

8
00:00:25,606 --> 00:00:27,766 A:middle
about them Monday
afternoon and yesterday.

9
00:00:28,156 --> 00:00:30,216 A:middle
Well, today we're going to
go into a lot more depth.

10
00:00:30,496 --> 00:00:33,626 A:middle
We're going to start out today
with some conceptual background,

11
00:00:33,906 --> 00:00:36,916 A:middle
what Playgrounds actually are
and what you can use them for.

12
00:00:37,096 --> 00:00:39,236 A:middle
And then we'll show you examples
of how to use Playgrounds

13
00:00:39,236 --> 00:00:42,196 A:middle
for learning, exploration,
and visualization

14
00:00:42,196 --> 00:00:43,296 A:middle
of the results of your code.

15
00:00:44,206 --> 00:00:46,836 A:middle
We'll show you how you can
use your own custom resources

16
00:00:46,836 --> 00:00:49,526 A:middle
with your Playgrounds,
and how to use Playgrounds

17
00:00:49,526 --> 00:00:51,346 A:middle
for algorithm development
and development

18
00:00:51,346 --> 00:00:52,946 A:middle
of other separable
pieces of code.

19
00:00:53,896 --> 00:00:56,046 A:middle
We'll introduce the
XCPlayground framework

20
00:00:56,196 --> 00:00:58,516 A:middle
which includes some
really powerful utilities

21
00:00:58,516 --> 00:01:00,276 A:middle
that you can use to
enhance your Playgrounds.

22

23
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

24
00:00:58,516 --> 00:01:00,276 A:middle
that you can use to
enhance your Playgrounds.

25
00:01:00,836 --> 00:01:03,376 A:middle
And we'll show you how you can
develop your own Custom Quick

26
00:01:03,376 --> 00:01:06,906 A:middle
Looks, so that you can visualize
your own classes the same way

27
00:01:06,906 --> 00:01:09,466 A:middle
you visualize the classes
that come with the frameworks.

28
00:01:10,596 --> 00:01:11,996 A:middle
Next, we'll show
you a great demo

29
00:01:11,996 --> 00:01:15,046 A:middle
of how awesome Playgrounds are
for developing custom views

30
00:01:15,226 --> 00:01:17,136 A:middle
and in any other kind
of custom drawing

31
00:01:17,516 --> 00:01:20,286 A:middle
and we'll show you how you can
use your own asynchronous code

32
00:01:20,286 --> 00:01:21,116 A:middle
with Playgrounds.

33
00:01:22,046 --> 00:01:24,026 A:middle
Finally, we'll finish up
today with a little bit

34
00:01:24,026 --> 00:01:26,136 A:middle
about the limitations that
Playgrounds have today.

35
00:01:28,196 --> 00:01:29,936 A:middle
So what exactly are Playgrounds?

36
00:01:30,516 --> 00:01:33,716 A:middle
Playgrounds are a new type of
document introduced in Xcode 6

37
00:01:33,716 --> 00:01:36,516 A:middle
and they're actually a file
wrapper containing a few

38
00:01:36,516 --> 00:01:37,306 A:middle
useful things.

39
00:01:37,946 --> 00:01:39,546 A:middle
First of all is your Swift code.

40
00:01:39,736 --> 00:01:42,516 A:middle
The code that would be
run and the result are,

41
00:01:42,516 --> 00:01:45,436 A:middle
and generate results to display
automatically every time you

42
00:01:45,436 --> 00:01:46,526 A:middle
edit your Playground file.

43
00:01:47,696 --> 00:01:50,016 A:middle
Swift Playgrounds also
can contain a folder

44
00:01:50,016 --> 00:01:52,946 A:middle
of embedded resources which
are made available to your code

45
00:01:53,316 --> 00:01:55,526 A:middle
or your Playground can
reference resources elsewhere

46
00:01:55,526 --> 00:01:57,046 A:middle
on your system you
want to make available.

47
00:01:58,146 --> 00:02:01,006 A:middle
Finally, your Playground
can contain a timeline full

48

49
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

50
00:01:58,146 --> 00:02:01,006 A:middle
Finally, your Playground
can contain a timeline full

51
00:02:01,006 --> 00:02:03,716 A:middle
of timeline items that
provide useful visualization

52
00:02:03,716 --> 00:02:06,266 A:middle
of your results beyond what
you see in the sidebar.

53
00:02:08,015 --> 00:02:09,756 A:middle
When you first open
a Playground,

54
00:02:09,756 --> 00:02:12,616 A:middle
we show the Playground Editor
with your Swift code on the left

55
00:02:12,616 --> 00:02:15,836 A:middle
and the results sidebar on
the right showing the result

56
00:02:15,836 --> 00:02:17,526 A:middle
of every expression
in your code.

57
00:02:18,606 --> 00:02:21,986 A:middle
Every time you edit your source,
we rerun your Playground source

58
00:02:21,986 --> 00:02:25,266 A:middle
from the top to the bottom
and present the new results

59
00:02:25,306 --> 00:02:27,106 A:middle
from that run in the sidebar.

60
00:02:28,256 --> 00:02:29,606 A:middle
This is the basic editor mode.

61
00:02:30,356 --> 00:02:33,516 A:middle
But if you go into the assistant
editor mode we'll show the

62
00:02:33,516 --> 00:02:35,866 A:middle
Timeline Assistant by
default which allows you

63
00:02:35,866 --> 00:02:37,906 A:middle
to visualize your
results in more detail.

64
00:02:38,456 --> 00:02:40,766 A:middle
For example, you can
display the value history

65
00:02:40,986 --> 00:02:42,156 A:middle
from a line in your code.

66
00:02:42,516 --> 00:02:44,516 A:middle
In this case, since
it's a numeric value,

67
00:02:44,676 --> 00:02:47,266 A:middle
we'll draw a graph of
that value over time

68
00:02:47,336 --> 00:02:49,806 A:middle
since it was iterated
multiple times in a loop.

69
00:02:50,486 --> 00:02:53,316 A:middle
If you're looking for console
output like that from Print Man,

70
00:02:53,346 --> 00:02:55,356 A:middle
you'll also find that in
the Timeline Assistant.

71
00:02:56,126 --> 00:02:58,296 A:middle
There are a couple
other useful things you,

72
00:02:58,296 --> 00:02:59,296 A:middle
I want to call out here.

73
00:02:59,636 --> 00:03:02,046 A:middle
In the lower right hand
corner, there's a time-stepper.

74

75
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

76
00:02:59,636 --> 00:03:02,046 A:middle
In the lower right hand
corner, there's a time-stepper.

77
00:03:02,086 --> 00:03:05,506 A:middle
And this controls how long your
Playground will continue to run

78
00:03:05,746 --> 00:03:07,426 A:middle
after the top of a
source is finished

79
00:03:07,726 --> 00:03:10,676 A:middle
if you're using live views
or indefinite execution.

80
00:03:10,936 --> 00:03:13,346 A:middle
And I'll explain what both of
those are a little later on.

81
00:03:14,826 --> 00:03:18,266 A:middle
There's also a slider which
allows you to go back in time

82
00:03:18,526 --> 00:03:20,916 A:middle
and view results in the
timeline from a specific point

83
00:03:20,916 --> 00:03:22,286 A:middle
in your Playground execution.

84
00:03:22,596 --> 00:03:25,426 A:middle
So here, you can see we're
viewing a numeric result

85
00:03:25,626 --> 00:03:27,296 A:middle
from partway through the
Playground execution.

86
00:03:27,656 --> 00:03:30,056 A:middle
But you'll find this is
very useful with live views

87
00:03:30,056 --> 00:03:32,356 A:middle
as it allows you to scrub
back through the recording

88
00:03:32,356 --> 00:03:35,086 A:middle
of that view and see exactly
what your animation was doing

89
00:03:35,086 --> 00:03:36,356 A:middle
at a specific point in time.

90
00:03:36,466 --> 00:03:39,766 A:middle
So that's what Playgrounds are.

91
00:03:39,766 --> 00:03:42,106 A:middle
Let's talk a little bit about
what you can use them for.

92
00:03:42,756 --> 00:03:44,066 A:middle
We think your first great use

93
00:03:44,066 --> 00:03:45,656 A:middle
of Playgrounds is
going to be learning.

94
00:03:45,846 --> 00:03:48,406 A:middle
We've introduced a brand new
language for you to learn

95
00:03:48,476 --> 00:03:50,966 A:middle
and we think the best way to
get started is just to open

96
00:03:50,966 --> 00:03:53,506 A:middle
up a Playground and
dive in and play around.

97
00:03:53,576 --> 00:03:58,496 A:middle
Our documentation also includes
a special interactive Playground

98
00:03:58,496 --> 00:03:59,696 A:middle
called the Swift Tour.

99
00:03:59,846 --> 00:04:02,436 A:middle
This allows you to
see documentation

100

101
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

102
00:03:59,846 --> 00:04:02,436 A:middle
This allows you to
see documentation

103
00:04:02,666 --> 00:04:05,856 A:middle
and Playground Editor side
by side in the same editor.

104
00:04:05,856 --> 00:04:08,396 A:middle
So you can read about how
to do something and try it

105
00:04:08,396 --> 00:04:10,306 A:middle
out right there without
leaving the editor.

106
00:04:11,756 --> 00:04:14,696 A:middle
Finally, we think Playgrounds
are a fantastic way for people

107
00:04:14,696 --> 00:04:16,426 A:middle
to learn how to program
in the first place.

108
00:04:16,856 --> 00:04:19,826 A:middle
Beginners don't have to learn
how to configure a project

109
00:04:19,826 --> 00:04:21,906 A:middle
and target and build
and run and debug.

110
00:04:22,146 --> 00:04:24,456 A:middle
They can just type code
into a Playground Editor

111
00:04:24,586 --> 00:04:26,006 A:middle
and immediately see the results.

112
00:04:26,006 --> 00:04:28,766 A:middle
So if you know anyone who
wants to learn how to program,

113
00:04:28,766 --> 00:04:31,256 A:middle
we encourage you to suggest
trying it in a Playground.

114
00:04:31,736 --> 00:04:33,146 A:middle
We think Playgrounds
are also going to be

115
00:04:33,146 --> 00:04:35,066 A:middle
in indispensable
tool in your toolbox

116
00:04:35,216 --> 00:04:36,836 A:middle
for everyday code development.

117
00:04:37,436 --> 00:04:39,026 A:middle
If you're developing
an algorithm

118
00:04:39,026 --> 00:04:40,686 A:middle
or any other separable
chunk of code,

119
00:04:41,126 --> 00:04:42,976 A:middle
you should consider
starting it on a Playground,

120
00:04:43,226 --> 00:04:45,226 A:middle
working on it there until
you have it how you want it,

121
00:04:45,226 --> 00:04:47,916 A:middle
and then dragging that
code into your project

122
00:04:48,166 --> 00:04:49,496 A:middle
for use in your application.

123
00:04:50,786 --> 00:04:53,266 A:middle
Any sort of drawing code
you want to do is also great

124
00:04:53,266 --> 00:04:55,796 A:middle
in a Playground because you
can immediately see the visual

125
00:04:55,796 --> 00:04:57,606 A:middle
result of what your
code is doing.

126
00:04:57,826 --> 00:04:59,346 A:middle
And every time you
change your code,

127
00:04:59,496 --> 00:05:02,216 A:middle
you can immediately see how
that affects the visual result.

128

129
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

130
00:04:59,496 --> 00:05:02,216 A:middle
you can immediately see how
that affects the visual result.

131
00:05:03,266 --> 00:05:06,726 A:middle
Finally, processing code like
value transformers or a sequence

132
00:05:06,726 --> 00:05:08,826 A:middle
of image filters are
great in Playgrounds

133
00:05:08,826 --> 00:05:11,496 A:middle
because you can visualize
the result at every step

134
00:05:11,496 --> 00:05:12,916 A:middle
of the transformation process.

135
00:05:12,986 --> 00:05:15,086 A:middle
And when you change
something, you can see how

136
00:05:15,086 --> 00:05:17,466 A:middle
that change ripples
through all your results.

137
00:05:18,436 --> 00:05:19,236 A:middle
We think you'll find

138
00:05:19,236 --> 00:05:22,206 A:middle
that Playgrounds are fertile
ground for experimentation.

139
00:05:22,386 --> 00:05:24,556 A:middle
And in particular,
any time you're trying

140
00:05:24,556 --> 00:05:26,966 A:middle
to learn some new
API, you should try it

141
00:05:26,966 --> 00:05:29,496 A:middle
out on a Playground because you
can immediately see how it works

142
00:05:29,496 --> 00:05:30,706 A:middle
and what results it gives you.

143
00:05:31,346 --> 00:05:34,146 A:middle
You don't need a project, you
don't need to build and run.

144
00:05:34,446 --> 00:05:37,536 A:middle
You just open up even a
standalone Playground document,

145
00:05:37,776 --> 00:05:39,796 A:middle
type in your code,
and see what happens.

146
00:05:40,436 --> 00:05:42,666 A:middle
I'm sure all of you
have many a time gone

147
00:05:42,666 --> 00:05:45,646 A:middle
to create a new project from
the application template,

148
00:05:45,836 --> 00:05:48,216 A:middle
and gone to find
applicationDidFinishLaunching,

149
00:05:48,216 --> 00:05:50,346 A:middle
just to put a line of
code and to try some API.

150
00:05:50,346 --> 00:05:52,916 A:middle
Oh, and then you probably
have to NSLog it too

151
00:05:52,916 --> 00:05:54,116 A:middle
so you can see what happened.

152
00:05:54,336 --> 00:05:55,786 A:middle
You don't have to
do that anymore.

153
00:05:55,986 --> 00:05:58,236 A:middle
Now you can just open
up a Playground and try

154
00:05:58,236 --> 00:05:59,616 A:middle
out the API you want to try.

155

156
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

157
00:06:00,736 --> 00:06:03,126 A:middle
In fact, we'd recommend you
consider keeping a Playground

158
00:06:03,126 --> 00:06:05,076 A:middle
in your doc at all
times for quick access.

159
00:06:05,356 --> 00:06:06,056 A:middle
So anytime you want

160
00:06:06,056 --> 00:06:08,066 A:middle
to try something it's right
there at your fingertips.

161
00:06:09,196 --> 00:06:12,196 A:middle
So with all that said, let's
dive in and take a look

162
00:06:12,196 --> 00:06:13,306 A:middle
in an actual Playground.

163
00:06:13,486 --> 00:06:16,186 A:middle
To do that, I'm going to invite
my colleague Connor up on stage.

164
00:06:17,316 --> 00:06:17,946 A:middle
>> Thank you, Rick.

165
00:06:18,236 --> 00:06:19,076 A:middle
Hello everyone.

166
00:06:19,216 --> 00:06:20,016 A:middle
My name is Connor.

167
00:06:20,186 --> 00:06:21,926 A:middle
I'm an Engineer on
the Xcode Team.

168
00:06:22,126 --> 00:06:24,156 A:middle
And today I'll be talking to
you about how you can work

169
00:06:24,156 --> 00:06:26,436 A:middle
with Playgrounds as well
as some of the things

170
00:06:26,436 --> 00:06:28,496 A:middle
which we think Playgrounds
will be really great for.

171
00:06:29,636 --> 00:06:30,906 A:middle
Now, Rick has already
covered many

172
00:06:30,906 --> 00:06:32,766 A:middle
of the basic concepts
behind Playgrounds.

173
00:06:33,196 --> 00:06:35,176 A:middle
And so I think really the best
way to show you how to work

174
00:06:35,176 --> 00:06:36,616 A:middle
with Playgrounds
is actually just

175
00:06:36,616 --> 00:06:37,976 A:middle
by jumping straight into a demo.

176
00:06:38,286 --> 00:06:39,426 A:middle
So, let's go ahead and do that.

177
00:06:40,246 --> 00:06:42,356 A:middle
So here I am at the demo
machine and I'm just going

178
00:06:42,356 --> 00:06:44,096 A:middle
to go ahead and launch Xcode.

179
00:06:46,276 --> 00:06:48,796 A:middle
Now you'll notice here
that on the Welcome window

180
00:06:48,796 --> 00:06:51,446 A:middle
for Xcode we've added this
brand new "Get started

181
00:06:51,446 --> 00:06:52,506 A:middle
with a Playground" button.

182
00:06:52,686 --> 00:06:54,866 A:middle
It's that way we want to
make it really easy for you

183
00:06:54,866 --> 00:06:55,976 A:middle
to just get started with one.

184
00:06:56,236 --> 00:06:57,316 A:middle
So I'll just click on that.

185
00:06:58,226 --> 00:07:00,106 A:middle
We'll create a Playground
and I'll just give it a name

186

187
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

188
00:06:58,226 --> 00:07:00,106 A:middle
We'll create a Playground
and I'll just give it a name

189
00:07:00,106 --> 00:07:00,976 A:middle
and a place to save it.

190
00:07:01,036 --> 00:07:02,626 A:middle
So "MyPlayground"
is fine and putting

191
00:07:02,626 --> 00:07:03,826 A:middle
on the desktop is fine as well.

192
00:07:03,966 --> 00:07:08,136 A:middle
So let's say create, and then we
have here our Playground itself.

193
00:07:08,136 --> 00:07:10,446 A:middle
So, you notice that
we're importing Cocoa,

194
00:07:10,536 --> 00:07:12,566 A:middle
so we have full access
to the Cocoa APIs.

195
00:07:12,566 --> 00:07:15,626 A:middle
And then we are also
creating a string

196
00:07:16,116 --> 00:07:17,666 A:middle
and we're assigning
the value, "Hello,

197
00:07:17,666 --> 00:07:21,106 A:middle
Playground" to that string.

198
00:07:21,436 --> 00:07:24,446 A:middle
You'll notice that in the result
sidebar we're seeing the result

199
00:07:24,446 --> 00:07:24,746 A:middle
of that.

200
00:07:24,746 --> 00:07:27,246 A:middle
So in this case we're seeing
the string, "Hello, Playground".

201
00:07:27,866 --> 00:07:30,106 A:middle
So OK. So that's kind
of the basic idea.

202
00:07:30,416 --> 00:07:31,946 A:middle
Let's try something
with numbers.

203
00:07:32,566 --> 00:07:37,576 A:middle
So let's say, for i in 0 to
10, let's just say, i times i.

204
00:07:37,936 --> 00:07:41,016 A:middle
You see there that
we execute the code

205
00:07:41,016 --> 00:07:43,756 A:middle
and we're getting an
indicator in the result sidebar

206
00:07:43,956 --> 00:07:45,696 A:middle
that we've executed
that code 10 times.

207
00:07:46,196 --> 00:07:48,526 A:middle
So, OK, let's try
bumping that up to 100.

208
00:07:48,966 --> 00:07:50,746 A:middle
We'll let it run
and we'll see there

209
00:07:50,746 --> 00:07:52,296 A:middle
that we immediately
get an indication

210
00:07:52,296 --> 00:07:54,316 A:middle
that this code has
executed 100 times.

211
00:07:55,226 --> 00:07:57,156 A:middle
Now, knowing that is
very useful information

212
00:07:57,156 --> 00:07:59,426 A:middle
but sometimes you actually
want to see the value there.

213
00:07:59,706 --> 00:08:01,066 A:middle
And we have support
for that as well.

214

215
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

216
00:07:59,706 --> 00:08:01,066 A:middle
And we have support
for that as well.

217
00:08:02,036 --> 00:08:04,596 A:middle
So OK, I'll just hover over
this result, and you'll see

218
00:08:04,596 --> 00:08:06,216 A:middle
that we're highlighting
the line of code

219
00:08:06,376 --> 00:08:07,966 A:middle
with which it is associated.

220
00:08:08,446 --> 00:08:10,006 A:middle
And we're also showing
this button here.

221
00:08:10,246 --> 00:08:12,106 A:middle
That's called the
Value History button.

222
00:08:12,496 --> 00:08:13,636 A:middle
And if I go ahead
and click on it,

223
00:08:13,996 --> 00:08:16,726 A:middle
we'll open up the assistant
editor into the timeline mode.

224
00:08:16,836 --> 00:08:19,836 A:middle
This is the place where you can
see results over time as well

225
00:08:19,836 --> 00:08:21,476 A:middle
as a place for you to
store results which you

226
00:08:21,476 --> 00:08:22,566 A:middle
like to see persistently.

227
00:08:22,966 --> 00:08:26,386 A:middle
So in this case, we're showing
the graph for i times i.

228
00:08:26,716 --> 00:08:28,516 A:middle
And we've seen this, you know,
this nice little curve here.

229
00:08:28,916 --> 00:08:33,525 A:middle
So OK, so that's kind of the
basics of using the timeline

230
00:08:33,576 --> 00:08:35,456 A:middle
and calculating numbers.

231
00:08:35,456 --> 00:08:37,346 A:middle
Let's try something a
little bit more interesting.

232
00:08:37,496 --> 00:08:40,256 A:middle
Let's go ahead and do
something with AppKit.

233
00:08:40,256 --> 00:08:41,936 A:middle
So let's first start
up by creating a color.

234
00:08:42,216 --> 00:08:46,526 A:middle
So you let color equals
NSColor.blueColor.

235
00:08:47,036 --> 00:08:49,496 A:middle
You'll see there that
we're now showing

236
00:08:49,496 --> 00:08:52,286 A:middle
in the result sidebar a color
swatch indicating what the color

237
00:08:52,286 --> 00:08:54,986 A:middle
is as well as indicators
of all of the components

238
00:08:55,086 --> 00:08:55,986 A:middle
which make up that color.

239
00:08:56,536 --> 00:08:58,826 A:middle
So I can, you know,
take this color

240
00:08:58,826 --> 00:09:00,466 A:middle
and let's create another
attributed string using it.

241

242
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

243
00:08:58,826 --> 00:09:00,466 A:middle
and let's create another
attributed string using it.

244
00:09:00,556 --> 00:09:05,016 A:middle
So let's say, let attrStr
equals NSAttributedString.

245
00:09:05,846 --> 00:09:09,436 A:middle
And we'll pass it in the string
in an attributes dictionary.

246
00:09:09,756 --> 00:09:11,116 A:middle
So we'll use the
string we already have

247
00:09:12,086 --> 00:09:13,386 A:middle
and we'll create a dictionary.

248
00:09:14,016 --> 00:09:17,656 A:middle
So we'll say
NSForegroundColorAttributeName

249
00:09:17,656 --> 00:09:19,006 A:middle
and we'll pass it
the color we have.

250
00:09:19,326 --> 00:09:22,576 A:middle
And then I'll say,
NSFontAttributeName,

251
00:09:22,816 --> 00:09:24,126 A:middle
I'll just pass it a font.

252
00:09:24,126 --> 00:09:26,496 A:middle
So I'll say, NSFont,
systemFontOfSize

253
00:09:26,496 --> 00:09:28,636 A:middle
and then let's go to something
fairly big, so I'll just put

254
00:09:28,636 --> 00:09:30,126 A:middle
in 42, see what that looks like.

255
00:09:31,026 --> 00:09:32,636 A:middle
So, OK. So here, you notice

256
00:09:32,636 --> 00:09:34,066 A:middle
that we're getting a
result for this as well.

257
00:09:34,066 --> 00:09:36,676 A:middle
You're seeing that we're showing
the plain text representation

258
00:09:36,676 --> 00:09:38,616 A:middle
of this, as well as
an icon indicating

259
00:09:38,876 --> 00:09:40,696 A:middle
that it is an attributed string.

260
00:09:41,726 --> 00:09:42,606 A:middle
Now, that's great.

261
00:09:42,606 --> 00:09:44,216 A:middle
You know, we know that
this code is executed.

262
00:09:44,746 --> 00:09:46,636 A:middle
But I really want to see what
the actual value is there.

263
00:09:46,636 --> 00:09:48,676 A:middle
See how the attributed
string looks itself

264
00:09:49,086 --> 00:09:50,226 A:middle
and we support that as well.

265
00:09:50,446 --> 00:09:53,006 A:middle
So I can just hover over
the result and in addition

266
00:09:53,006 --> 00:09:54,296 A:middle
to the Value History button,

267
00:09:54,596 --> 00:09:56,006 A:middle
you'll see that we have
a Quick Look button.

268
00:09:56,126 --> 00:09:59,376 A:middle
And so if I go ahead and click
on that we'll show a Quick Look

269
00:09:59,376 --> 00:10:02,786 A:middle
of that value to show you
the full representation of it

270

271
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

272
00:09:59,376 --> 00:10:02,786 A:middle
of that value to show you
the full representation of it

273
00:10:02,786 --> 00:10:04,616 A:middle
as it was created in
the Playground source.

274
00:10:05,816 --> 00:10:08,016 A:middle
So, OK, that's colors
and strings.

275
00:10:08,016 --> 00:10:09,306 A:middle
Let's try something with images.

276
00:10:09,426 --> 00:10:10,316 A:middle
Let's actually start

277
00:10:10,316 --> 00:10:11,866 A:middle
up by creating an
array of image names.

278
00:10:12,016 --> 00:10:14,736 A:middle
So I'll say, let
imageNames equals,

279
00:10:14,796 --> 00:10:17,536 A:middle
we'll put in an array there
and, I know it's something to do

280
00:10:17,536 --> 00:10:20,426 A:middle
with like NSImageNameUser
or accounts

281
00:10:20,426 --> 00:10:21,436 A:middle
or something in that line.

282
00:10:21,436 --> 00:10:24,226 A:middle
So I'm just going to create
an array with imageNames

283
00:10:24,226 --> 00:10:27,516 A:middle
that I think it could
be, the ImageNameUser,

284
00:10:28,676 --> 00:10:34,346 A:middle
NameUserAccounts,
NSImageNameUserGroup.

285
00:10:34,476 --> 00:10:37,906 A:middle
It's OK. We run the
code and you notice

286
00:10:37,936 --> 00:10:39,536 A:middle
that we now have an
array of strings.

287
00:10:39,656 --> 00:10:42,386 A:middle
We actually want to
see an array of images

288
00:10:42,506 --> 00:10:43,576 A:middle
and that's very easy to do.

289
00:10:43,576 --> 00:10:44,506 A:middle
I can just say something like,

290
00:10:44,996 --> 00:10:47,686 A:middle
let images equals
imageNames.map.

291
00:10:48,346 --> 00:10:51,796 A:middle
I'll pass it a trailing closure
to just say, NSImage named,

292
00:10:51,796 --> 00:10:54,736 A:middle
pass it the positional
argument $0.

293
00:10:54,736 --> 00:10:57,646 A:middle
And you'll notice there that
we're now seeing that this line

294
00:10:57,646 --> 00:10:59,186 A:middle
of code executed 4 times.

295
00:10:59,696 --> 00:11:01,336 A:middle
And so, basically
we can see that,

296

297
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

298
00:10:59,696 --> 00:11:01,336 A:middle
And so, basically
we can see that,

299
00:11:01,336 --> 00:11:02,766 A:middle
you know, OK, that makes sense.

300
00:11:02,846 --> 00:11:04,866 A:middle
We're executing this
line of code 3 times

301
00:11:04,866 --> 00:11:06,136 A:middle
for the trailing closure itself.

302
00:11:06,556 --> 00:11:09,066 A:middle
Then we're executing it once
for the assignment to images.

303
00:11:09,876 --> 00:11:12,286 A:middle
Actually, I only want to
see the images array itself

304
00:11:12,286 --> 00:11:14,516 A:middle
and we have a nice little trick
for doing that in a Playground.

305
00:11:15,016 --> 00:11:16,736 A:middle
You just go ahead and put
the thing that you want

306
00:11:16,736 --> 00:11:18,146 A:middle
to see on a line by itself.

307
00:11:18,476 --> 00:11:20,886 A:middle
So there you see, you know,
we've put images there,

308
00:11:20,966 --> 00:11:24,626 A:middle
we rerun the code, and we're
seeing the images array.

309
00:11:24,706 --> 00:11:27,336 A:middle
I can Quick Look that and
I can see, "Oh, you know,

310
00:11:27,476 --> 00:11:28,646 A:middle
here's the image that
I'm looking for."

311
00:11:29,076 --> 00:11:32,126 A:middle
And so, I'll just get
that image and say,

312
00:11:32,126 --> 00:11:35,666 A:middle
let image equals images at 0.

313
00:11:35,786 --> 00:11:36,386 A:middle
We'll rerun it.

314
00:11:36,386 --> 00:11:38,696 A:middle
I'll Quick Look to make sure
it's OK and in fact, yeah,

315
00:11:38,696 --> 00:11:39,696 A:middle
that's the one that
I'm looking for.

316
00:11:40,996 --> 00:11:43,066 A:middle
Let's go ahead and put
this into an image view.

317
00:11:43,386 --> 00:11:47,436 A:middle
So I'll say, let
imageView equal NSImageView.

318
00:11:48,666 --> 00:11:51,106 A:middle
We'll pass our self a
frame, so let's say NSRect.

319
00:11:52,166 --> 00:11:54,246 A:middle
We'll say 0 for the origin

320
00:11:54,246 --> 00:11:55,566 A:middle
because we don't
really care about that.

321
00:11:55,986 --> 00:11:58,656 A:middle
Then we'll also say 512
by 512 for the size.

322
00:11:59,096 --> 00:12:01,546 A:middle
Now I'm going to go ahead
and put this ImageView

323

324
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

325
00:11:59,096 --> 00:12:01,546 A:middle
Now I'm going to go ahead
and put this ImageView

326
00:12:01,546 --> 00:12:02,536 A:middle
on its own line as well.

327
00:12:02,976 --> 00:12:05,796 A:middle
So I can show this
result in the timeline.

328
00:12:06,756 --> 00:12:08,886 A:middle
And this is a neat little
way of building something up.

329
00:12:08,926 --> 00:12:12,036 A:middle
You take the, you start
creating the object

330
00:12:12,536 --> 00:12:15,276 A:middle
and then you put another line
where we show it as a result.

331
00:12:15,536 --> 00:12:17,156 A:middle
Anyway, I can add some
code in between there

332
00:12:17,156 --> 00:12:18,926 A:middle
to see how it builds
up over time.

333
00:12:19,486 --> 00:12:20,676 A:middle
So you see here that
we're starting

334
00:12:20,676 --> 00:12:22,186 A:middle
out with just this empty
imageView, you know,

335
00:12:22,186 --> 00:12:23,386 A:middle
we're not seeing any
interesting there.

336
00:12:23,456 --> 00:12:26,226 A:middle
So let's go ahead add our
image to the imageView.

337
00:12:26,846 --> 00:12:29,866 A:middle
So let's say, imageView.image
equals image.

338
00:12:30,376 --> 00:12:33,686 A:middle
And we'll re-execute and
we'll see here now that we're

339
00:12:33,686 --> 00:12:34,886 A:middle
in fact showing the image there

340
00:12:34,886 --> 00:12:36,566 A:middle
but it's not filling
the full imageView.

341
00:12:36,656 --> 00:12:37,616 A:middle
It's not doing what we expect.

342
00:12:37,616 --> 00:12:40,606 A:middle
That's because we haven't set up
the image scaling appropriately.

343
00:12:41,026 --> 00:12:42,116 A:middle
So we'll set that as well.

344
00:12:44,956 --> 00:12:49,866 A:middle
Say imageScaling equals
ImageScaleProportionally

345
00:12:49,866 --> 00:12:54,396 A:middle
UpOrDown. And we'll
re-execute and now you'll see

346
00:12:54,396 --> 00:12:56,916 A:middle
that we're seeing the image
at full size in the imageView.

347
00:12:56,996 --> 00:12:57,966 A:middle
We're seeing what we expect.

348
00:12:58,756 --> 00:12:59,546 A:middle
And it's OK.

349
00:12:59,626 --> 00:13:01,866 A:middle
That's how you can work
with system resources.

350

351
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

352
00:12:59,626 --> 00:13:01,866 A:middle
That's how you can work
with system resources.

353
00:13:02,396 --> 00:13:04,166 A:middle
But I'm sure you have many
resources of your own that you'd

354
00:13:04,166 --> 00:13:05,356 A:middle
like to use in Playgrounds
as well.

355
00:13:05,656 --> 00:13:06,636 A:middle
And we support that too.

356
00:13:06,896 --> 00:13:08,836 A:middle
So I'm just going to
go ahead and I'm going

357
00:13:08,836 --> 00:13:10,586 A:middle
to show the final inspector.

358
00:13:11,136 --> 00:13:14,896 A:middle
It will slide in on the
right hand of my Playground.

359
00:13:15,326 --> 00:13:16,576 A:middle
And you'll notice
here that we're,

360
00:13:16,696 --> 00:13:18,826 A:middle
we have this new section
called Playground Settings

361
00:13:18,826 --> 00:13:21,316 A:middle
which is shown whenever you're
viewing a Playground document.

362
00:13:21,976 --> 00:13:23,006 A:middle
You can select the platform

363
00:13:23,006 --> 00:13:24,886 A:middle
against which the
Playground should execute.

364
00:13:24,886 --> 00:13:26,756 A:middle
And, you know, OS X is
what we're doing right now.

365
00:13:26,756 --> 00:13:27,916 A:middle
But we also support iOS.

366
00:13:28,726 --> 00:13:31,116 A:middle
And you can select a
path for resources.

367
00:13:31,596 --> 00:13:33,566 A:middle
This defaults to none
but you can select one

368
00:13:33,566 --> 00:13:35,406 A:middle
if you have resources
that you're interested in.

369
00:13:35,906 --> 00:13:39,196 A:middle
In this case, I'm just going to
say I have a folder of resources

370
00:13:39,196 --> 00:13:40,736 A:middle
on my desktop so I'm
just going to say,

371
00:13:41,166 --> 00:13:42,806 A:middle
let's use the Absolute
Path option.

372
00:13:43,406 --> 00:13:45,176 A:middle
I can then go ahead
and choose that.

373
00:13:46,476 --> 00:13:48,916 A:middle
So let's say here's my resources
folder, I'll choose that.

374
00:13:49,516 --> 00:13:53,466 A:middle
And then once I made that choice
I'm actually going to go ahead

375
00:13:53,466 --> 00:13:55,686 A:middle
and hide the Utilities area.

376
00:13:56,266 --> 00:13:59,976 A:middle
And to access the images
themselves, I just use,

377
00:13:59,976 --> 00:14:02,446 A:middle
you know, NSBundle API, you
know, the resources show

378

379
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

380
00:13:59,976 --> 00:14:02,446 A:middle
you know, NSBundle API, you
know, the resources show

381
00:14:02,446 --> 00:14:03,946 A:middle
up as resources for
the main bundle.

382
00:14:04,026 --> 00:14:08,776 A:middle
So I can say something like "let
myImage equals NSImage, named".

383
00:14:09,086 --> 00:14:10,866 A:middle
I have an image in
here that's just called

384
00:14:11,016 --> 00:14:14,406 A:middle
"Xcode" so let's grab that.

385
00:14:14,546 --> 00:14:16,006 A:middle
We'll re-execute
and you'll notice

386
00:14:16,006 --> 00:14:18,136 A:middle
that now we're getting
the image result here.

387
00:14:18,536 --> 00:14:20,806 A:middle
And click, click to confirm
that it's what I think it is.

388
00:14:20,806 --> 00:14:23,076 A:middle
And in fact, it is, we're
seeing the Xcode icon there.

389
00:14:23,076 --> 00:14:24,886 A:middle
And now I'm just going to have

390
00:14:24,886 --> 00:14:26,886 A:middle
that imageView show
the Xcode icon instead.

391
00:14:27,056 --> 00:14:30,806 A:middle
So, I'll say, "imageView.image
equals myImage".

392
00:14:32,056 --> 00:14:34,846 A:middle
We'll re-execute and now
you're seeing this new result,

393
00:14:34,846 --> 00:14:36,166 A:middle
let's add it to the
timeline as well.

394
00:14:37,036 --> 00:14:39,556 A:middle
So you can see here that
we have what we expected.

395
00:14:39,656 --> 00:14:41,796 A:middle
The Xcode icon is showing
up in our imageView.

396
00:14:42,156 --> 00:14:43,596 A:middle
You'll probably also notice

397
00:14:43,626 --> 00:14:45,476 A:middle
that we're still seeing
the older version here

398
00:14:45,846 --> 00:14:47,906 A:middle
with the user icon
in the imageView.

399
00:14:48,356 --> 00:14:51,276 A:middle
And that's because Playgrounds
actually capture results

400
00:14:51,276 --> 00:14:52,706 A:middle
on every single line
of execution.

401
00:14:52,706 --> 00:14:54,806 A:middle
So you can do these
kinds of comparisons.

402
00:14:55,066 --> 00:14:57,006 A:middle
So like for instance, you know,
let's look at the imageView

403
00:14:57,006 --> 00:14:57,856 A:middle
when we first create it.

404
00:14:57,966 --> 00:14:58,626 A:middle
And it's empty.

405
00:14:59,376 --> 00:15:01,836 A:middle
Then I added the
user icon to there.

406

407
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

408
00:14:59,376 --> 00:15:01,836 A:middle
Then I added the
user icon to there.

409
00:15:01,916 --> 00:15:03,656 A:middle
And so, we see that
earlier version that we saw

410
00:15:03,656 --> 00:15:05,296 A:middle
where it's small in the center.

411
00:15:06,336 --> 00:15:08,056 A:middle
Then I set the image
scaling appropriately

412
00:15:08,336 --> 00:15:09,916 A:middle
and it's now filling
full image view.

413
00:15:10,646 --> 00:15:12,786 A:middle
Finally, I updated it to
use myImage and we're seeing

414
00:15:12,786 --> 00:15:14,266 A:middle
that it's showing
the Xcode icon.

415
00:15:14,556 --> 00:15:16,476 A:middle
And that's great, so that you
don't have, you know, go back

416
00:15:16,476 --> 00:15:18,196 A:middle
and see what happened
at a particular point.

417
00:15:18,196 --> 00:15:20,796 A:middle
We're capturing the data for
you as your Playground executes.

418
00:15:20,856 --> 00:15:24,066 A:middle
So I think that about covers
the basics, so let's go back

419
00:15:24,066 --> 00:15:26,576 A:middle
to slides and talk a little
bit more about Playgrounds.

420
00:15:27,236 --> 00:15:29,126 A:middle
So one of the key ideas
that you saw there is

421
00:15:29,126 --> 00:15:31,066 A:middle
that Playgrounds will
automatically execute.

422
00:15:31,436 --> 00:15:33,536 A:middle
You just type in some code
and you'll see the results

423
00:15:33,536 --> 00:15:34,586 A:middle
in a sidebar on the right.

424
00:15:36,206 --> 00:15:38,576 A:middle
Additionally, you saw that
we can add a value history

425
00:15:38,576 --> 00:15:39,346 A:middle
to the timeline.

426
00:15:39,696 --> 00:15:42,296 A:middle
So here we have a line of
code which executed 100 times.

427
00:15:42,376 --> 00:15:43,916 A:middle
And if I hover over that result,

428
00:15:44,196 --> 00:15:45,436 A:middle
you'll see this Value
History button.

429
00:15:46,076 --> 00:15:48,046 A:middle
If I click it, we'll switch
into the assistant editor

430
00:15:48,046 --> 00:15:50,146 A:middle
and we'll show that as
a history of that value.

431
00:15:51,456 --> 00:15:54,236 A:middle
Additionally, many values in
the Playground have Quick Looks.

432
00:15:54,366 --> 00:15:54,946 A:middle
All right.

433
00:15:54,946 --> 00:15:56,786 A:middle
So in this case we have
an attributed string.

434
00:15:56,896 --> 00:15:59,196 A:middle
We don't see the full
representation of the sidebar,

435
00:15:59,196 --> 00:16:00,416 A:middle
just kind of the
plain text of it.

436

437
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

438
00:15:59,196 --> 00:16:00,416 A:middle
just kind of the
plain text of it.

439
00:16:00,926 --> 00:16:02,356 A:middle
But if I click on the
Quick Look button,

440
00:16:02,426 --> 00:16:04,666 A:middle
we'll see the attributed
string as it was created

441
00:16:04,666 --> 00:16:05,756 A:middle
in the Playground source.

442
00:16:07,186 --> 00:16:08,366 A:middle
We support many different types

443
00:16:08,396 --> 00:16:09,596 A:middle
for Quick Looks in
the Playground.

444
00:16:09,596 --> 00:16:14,356 A:middle
We support colors, strings --
both plain text and attributed.

445
00:16:15,326 --> 00:16:18,016 A:middle
We can show images, views,

446
00:16:18,246 --> 00:16:20,526 A:middle
in this case we'll capture
a snapshot of the view

447
00:16:20,526 --> 00:16:21,976 A:middle
at that point in time.

448
00:16:22,426 --> 00:16:24,066 A:middle
We can show arrays
and dictionaries

449
00:16:24,506 --> 00:16:26,446 A:middle
as we'll show a structured
version of the array

450
00:16:26,446 --> 00:16:28,046 A:middle
or dictionary, ah,
like you might see

451
00:16:28,046 --> 00:16:29,336 A:middle
in the variables
view on the debugger.

452
00:16:30,676 --> 00:16:32,526 A:middle
We can show points,
rects, and sizes.

453
00:16:32,526 --> 00:16:34,666 A:middle
We'll kind of create a graphical
representation of those.

454
00:16:35,766 --> 00:16:38,966 A:middle
We can show Bézier paths, so
both NSBezierPath on the Mac

455
00:16:38,966 --> 00:16:41,466 A:middle
and UIBezierPath on iOS.

456
00:16:42,036 --> 00:16:45,546 A:middle
We can show URLs, for this we'll
take the plain text of the URL

457
00:16:45,546 --> 00:16:46,186 A:middle
and show it in the sidebar.

458
00:16:46,186 --> 00:16:48,396 A:middle
But if you Quick Look, it
will show you a web view

459
00:16:48,396 --> 00:16:49,696 A:middle
with the contents of that URL.

460
00:16:50,076 --> 00:16:52,266 A:middle
And finally, for types

461
00:16:52,266 --> 00:16:54,196 A:middle
if we don't have a native
Quick Look representation,

462
00:16:54,516 --> 00:16:57,626 A:middle
we can usually get a
structured view of it, again,

463
00:16:57,626 --> 00:16:59,756 A:middle
like you would see in the
variables view in the debugger.

464

465
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

466
00:17:00,276 --> 00:17:02,686 A:middle
So here I have an
object of a class

467
00:17:02,686 --> 00:17:03,886 A:middle
that I created in
the Playground.

468
00:17:04,336 --> 00:17:06,586 A:middle
And it is, it has a
couple of properties,

469
00:17:06,586 --> 00:17:08,226 A:middle
a foo property and
a bar property.

470
00:17:08,435 --> 00:17:10,106 A:middle
And you're seeing the
values of those at that line

471
00:17:10,106 --> 00:17:11,266 A:middle
of code when it executed.

472
00:17:11,516 --> 00:17:15,086 A:middle
In this demo, I also showed
you how you can use your own

473
00:17:15,086 --> 00:17:16,346 A:middle
resources with Playgrounds.

474
00:17:16,516 --> 00:17:17,766 A:middle
And this is actually
fairly easy.

475
00:17:17,945 --> 00:17:20,606 A:middle
So you just go ahead and
show the file inspector.

476
00:17:21,665 --> 00:17:24,236 A:middle
You select a location
for Playground resources.

477
00:17:24,236 --> 00:17:25,626 A:middle
And for this we have
three options.

478
00:17:26,165 --> 00:17:29,266 A:middle
We've got an Absolute Path
option which basically says,

479
00:17:29,326 --> 00:17:31,166 A:middle
"OK, I've got this folder
of resources somewhere

480
00:17:31,166 --> 00:17:32,826 A:middle
on my computer and
I'd like to show it

481
00:17:32,826 --> 00:17:34,226 A:middle
and use it with the Playground."

482
00:17:34,776 --> 00:17:38,346 A:middle
We have a Relative to
Playground path option.

483
00:17:38,746 --> 00:17:39,816 A:middle
And this is really great

484
00:17:39,816 --> 00:17:41,606 A:middle
if you're checking your
Playground into SCM.

485
00:17:41,606 --> 00:17:44,006 A:middle
Because you can say, "Oh, you
know, here's this Playground

486
00:17:44,006 --> 00:17:46,086 A:middle
and here's this folder of
resources that's next to it,

487
00:17:46,306 --> 00:17:48,546 A:middle
I can set this up and then when
you use other people to check

488
00:17:48,546 --> 00:17:52,486 A:middle
out your repository, then it
will automatically be able

489
00:17:52,486 --> 00:17:54,046 A:middle
to use the Playground
with its resources."

490
00:17:54,726 --> 00:17:57,696 A:middle
Finally, we support an
Inside Playground option.

491
00:17:57,696 --> 00:17:58,956 A:middle
And this is great
if you're sharing

492
00:17:58,956 --> 00:18:00,436 A:middle
in ways other than via SCM.

493

494
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

495
00:17:58,956 --> 00:18:00,436 A:middle
in ways other than via SCM.

496
00:18:00,436 --> 00:18:03,796 A:middle
Because you can just say, "I
want to store my resources

497
00:18:03,796 --> 00:18:06,286 A:middle
in my Playground" and you can
email that out to other people

498
00:18:06,476 --> 00:18:08,466 A:middle
and see, when they open
it, they'll be able

499
00:18:08,466 --> 00:18:10,246 A:middle
to see those resources
immediately.

500
00:18:12,526 --> 00:18:14,506 A:middle
Once you have made
the selection,

501
00:18:14,776 --> 00:18:17,406 A:middle
to access these resources
in your Playground source,

502
00:18:17,516 --> 00:18:18,966 A:middle
you just use things like,

503
00:18:18,966 --> 00:18:21,706 A:middle
NSBundle.pathForResource
ofType and NSImage named.

504
00:18:22,086 --> 00:18:24,416 A:middle
The resources just show
up as the resources

505
00:18:24,416 --> 00:18:26,766 A:middle
for the main bundle during
Playground execution.

506
00:18:27,066 --> 00:18:31,816 A:middle
So, now that we have the
basics out of the way,

507
00:18:32,256 --> 00:18:34,016 A:middle
I think I'd like to start
talking to you about some

508
00:18:34,016 --> 00:18:35,836 A:middle
of the use cases for
which Playgrounds would be

509
00:18:35,836 --> 00:18:36,256 A:middle
really great.

510
00:18:36,626 --> 00:18:38,746 A:middle
And the first of these
is Experimentation.

511
00:18:39,256 --> 00:18:42,026 A:middle
I'm sure that all of you
out there have a folder

512
00:18:42,026 --> 00:18:43,656 A:middle
on your computer which
looks something like this.

513
00:18:43,656 --> 00:18:46,046 A:middle
It's just a bunch of
Xcode projects created

514
00:18:46,046 --> 00:18:49,056 A:middle
from the template that are,
you know, maybe 1 or 2 changes

515
00:18:49,056 --> 00:18:51,376 A:middle
to see how something works
or to test out an idea.

516
00:18:52,236 --> 00:18:54,016 A:middle
It's actually isn't
that easy of a process.

517
00:18:54,016 --> 00:18:55,216 A:middle
You know, you have to
do many different --

518
00:18:55,216 --> 00:18:58,676 A:middle
you have to first choose the
right project template then find

519
00:18:58,676 --> 00:19:01,706 A:middle
the right file in that project
to edit which may be easy

520

521
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

522
00:18:58,676 --> 00:19:01,706 A:middle
the right file in that project
to edit which may be easy

523
00:19:01,706 --> 00:19:03,646 A:middle
or maybe not depending on
which template you chose.

524
00:19:04,356 --> 00:19:06,666 A:middle
You'd have to do what you're
trying to do in the first place,

525
00:19:06,666 --> 00:19:07,636 A:middle
and that's write some code.

526
00:19:08,726 --> 00:19:10,016 A:middle
Once you've written
something, you then have

527
00:19:10,056 --> 00:19:11,156 A:middle
to build your project.

528
00:19:11,906 --> 00:19:13,756 A:middle
You then run whatever you built.

529
00:19:13,926 --> 00:19:15,936 A:middle
And for iOS that may
involve deploying

530
00:19:15,936 --> 00:19:17,306 A:middle
to a simulator or to a device.

531
00:19:18,476 --> 00:19:20,356 A:middle
And if you didn't get it right
the first time, you'd then have

532
00:19:20,396 --> 00:19:22,556 A:middle
to redo this, stop in
the debugger and step

533
00:19:22,556 --> 00:19:25,416 A:middle
through your code to figure out
where things are going wrong.

534
00:19:25,416 --> 00:19:27,726 A:middle
We think Playgrounds can
handle this a whole lot better.

535
00:19:28,056 --> 00:19:29,896 A:middle
That's because there's
really only 2 steps.

536
00:19:29,896 --> 00:19:31,596 A:middle
You would just, say, get started

537
00:19:31,596 --> 00:19:33,856 A:middle
with a Playground
and write your code.

538
00:19:34,406 --> 00:19:35,806 A:middle
Once you start writing
your code,

539
00:19:35,806 --> 00:19:38,326 A:middle
we'll automatically execute it
for you and show you the results

540
00:19:38,326 --> 00:19:40,516 A:middle
in the sidebar so you can see
where things are going wrong.

541
00:19:40,926 --> 00:19:44,296 A:middle
So now, I think I'd
like to show you a demo

542
00:19:44,296 --> 00:19:45,136 A:middle
of what this looks like.

543
00:19:45,136 --> 00:19:46,516 A:middle
So let's go back to
the demo machine.

544
00:19:46,836 --> 00:19:47,396 A:middle
So here I am.

545
00:19:47,396 --> 00:19:49,576 A:middle
I'm going to go ahead and
just launch Xcode again.

546
00:19:50,896 --> 00:19:53,166 A:middle
And this time I'm going to
create an iOS-based Playground.

547
00:19:53,226 --> 00:19:59,686 A:middle
So I'll say, File, New File,
and I'll say, iOS Playground.

548

549
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

550
00:20:00,306 --> 00:20:02,356 A:middle
And I want to actually test

551
00:20:02,356 --> 00:20:04,846 A:middle
out how the UITableViewCell
style API works.

552
00:20:05,086 --> 00:20:07,206 A:middle
So, I'm just going to call
and create this Playground

553
00:20:07,206 --> 00:20:10,296 A:middle
and call it TestTableViewCell.

554
00:20:10,806 --> 00:20:13,376 A:middle
Save it to the desktop, and OK.

555
00:20:13,376 --> 00:20:15,066 A:middle
So, here we have
our iOS Playground.

556
00:20:15,626 --> 00:20:18,796 A:middle
It's, you know, importing UIKit,
but otherwise, it's the same,

557
00:20:18,796 --> 00:20:20,776 A:middle
we're just creating a string
and assigning it to a variable.

558
00:20:22,086 --> 00:20:24,766 A:middle
So, if I want to use a
UITableViewCell style,

559
00:20:25,016 --> 00:20:26,486 A:middle
I need a UITableViewCell.

560
00:20:26,696 --> 00:20:29,256 A:middle
And the best way to show
that is with a UITableView.

561
00:20:29,656 --> 00:20:31,226 A:middle
In order to get those cells

562
00:20:31,226 --> 00:20:33,266 A:middle
into my UITableView,
I need a data source.

563
00:20:33,566 --> 00:20:35,626 A:middle
So, let's just go ahead and
implement a data source.

564
00:20:36,096 --> 00:20:38,926 A:middle
So I'll say "class DataSource".

565
00:20:40,046 --> 00:20:42,766 A:middle
We'll inherit from
NSObject and we'll conform

566
00:20:42,766 --> 00:20:45,756 A:middle
to the UITableViewDataSource
protocol.

567
00:20:46,006 --> 00:20:50,046 A:middle
Notice now that we're getting
an issue here and that's

568
00:20:50,046 --> 00:20:52,256 A:middle
because the DataSource we've
created does not actually

569
00:20:52,256 --> 00:20:54,036 A:middle
conform to
UITableViewDataSource.

570
00:20:54,606 --> 00:20:55,806 A:middle
And, you know, that's expected.

571
00:20:55,806 --> 00:20:57,386 A:middle
We haven't actually
implemented any methods yet.

572
00:20:58,196 --> 00:21:01,106 A:middle
So, I'm actually going to
jump to the declaration

573

574
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

575
00:20:58,196 --> 00:21:01,106 A:middle
So, I'm actually going to
jump to the declaration

576
00:21:01,106 --> 00:21:04,216 A:middle
of UITableViewDataSource by
command-option-clicking on it.

577
00:21:05,066 --> 00:21:06,766 A:middle
We see that we then open
the assistant editor.

578
00:21:07,196 --> 00:21:09,486 A:middle
And instead of showing
you UITableView.h,

579
00:21:09,706 --> 00:21:13,576 A:middle
we're going to show you a
Swift version of that header.

580
00:21:14,166 --> 00:21:16,246 A:middle
So, in this case, we're seeing,
you know, here's our protocol.

581
00:21:16,486 --> 00:21:18,926 A:middle
We're seeing that we need to
implement these two methods.

582
00:21:19,426 --> 00:21:22,226 A:middle
And so, OK, I'm just going to
take this one, this first one

583
00:21:22,446 --> 00:21:25,226 A:middle
to tell the TableView the
number of rows per section.

584
00:21:25,226 --> 00:21:27,636 A:middle
I'm going to copy
and paste it in here.

585
00:21:28,186 --> 00:21:31,616 A:middle
And then I'm just going to start
things out, return 1 from this.

586
00:21:33,146 --> 00:21:34,676 A:middle
So, OK. So that's
the number of rows.

587
00:21:34,906 --> 00:21:38,976 A:middle
Let's also provide the cell.

588
00:21:39,196 --> 00:21:42,086 A:middle
And OK, let's just go ahead
and create our UITableViewCell.

589
00:21:42,706 --> 00:21:45,966 A:middle
Let's say let cell
equals UITableViewCell.

590
00:21:47,026 --> 00:21:48,746 A:middle
I need to fix this typo.

591
00:21:50,286 --> 00:21:54,596 A:middle
Here, we'll say the style, we'll
just say the default style.

592
00:21:55,136 --> 00:21:56,646 A:middle
And then for the
reuseIdentifier,

593
00:21:56,836 --> 00:21:59,256 A:middle
we aren't actually going
to be reusing these cells

594
00:21:59,256 --> 00:22:01,416 A:middle
so we can just pass
nil for this parameter.

595

596
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

597
00:21:59,256 --> 00:22:01,416 A:middle
so we can just pass
nil for this parameter.

598
00:22:01,416 --> 00:22:03,986 A:middle
And OK, so there
we have our cell.

599
00:22:04,116 --> 00:22:05,706 A:middle
Let's go ahead and configure it.

600
00:22:06,086 --> 00:22:11,816 A:middle
So, I can say something like
cell.textLabel.text equals Text.

601
00:22:12,836 --> 00:22:14,376 A:middle
OK. So that's the text label.

602
00:22:14,376 --> 00:22:15,436 A:middle
We'll see what that looks like.

603
00:22:16,026 --> 00:22:18,926 A:middle
UITableViewCell may also
have a detail text label.

604
00:22:18,976 --> 00:22:20,426 A:middle
But that's not guaranteed
to be the case.

605
00:22:20,516 --> 00:22:22,396 A:middle
So I'm going to explicitly
handle the fact

606
00:22:22,396 --> 00:22:23,136 A:middle
that it's an optional.

607
00:22:23,296 --> 00:22:24,316 A:middle
So, I can say something like

608
00:22:24,786 --> 00:22:30,156 A:middle
"if let detailTextLabel
equals cell.DetailTextLabel".

609
00:22:30,676 --> 00:22:34,846 A:middle
And so, if the code inside
of this "if" executes,

610
00:22:34,846 --> 00:22:36,716 A:middle
then we'll know that we
have a detailTextLabel.

611
00:22:36,816 --> 00:22:37,796 A:middle
So, I can say something like,

612
00:22:38,366 --> 00:22:43,516 A:middle
detailTextLabel.text
equals Detail Text,

613
00:22:43,776 --> 00:22:45,186 A:middle
and we know that this is safe.

614
00:22:45,186 --> 00:22:47,866 A:middle
We're not going to accidentally
try to assign a property to nil.

615
00:22:48,336 --> 00:22:50,646 A:middle
So now that we've configured
our UITableViewCell,

616
00:22:50,646 --> 00:22:51,916 A:middle
I can just go ahead
and return that.

617
00:22:52,536 --> 00:22:55,966 A:middle
You can see now that we
no longer have an issue

618
00:22:56,036 --> 00:22:56,846 A:middle
in our Playground.

619
00:22:57,156 --> 00:22:59,366 A:middle
But we're also not getting
any results in the sidebar.

620
00:22:59,406 --> 00:23:01,806 A:middle
That's because we haven't
actually instantiated our

621

622
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

623
00:22:59,406 --> 00:23:01,806 A:middle
That's because we haven't
actually instantiated our

624
00:23:01,936 --> 00:23:02,466 A:middle
data source.

625
00:23:02,666 --> 00:23:06,466 A:middle
So, I'll just say something like
DataSource equals DataSource

626
00:23:07,086 --> 00:23:09,896 A:middle
and then I can, you know,
I'll just create a TableView

627
00:23:09,936 --> 00:23:11,746 A:middle
and tell it to use
our DataSource.

628
00:23:13,026 --> 00:23:15,986 A:middle
So, let tableView
equals UITableView.

629
00:23:16,546 --> 00:23:20,296 A:middle
We'll pass it a frame
so, CGRect.

630
00:23:21,236 --> 00:23:23,326 A:middle
Again, we don't care
about the origin.

631
00:23:23,906 --> 00:23:25,436 A:middle
I'll pass 320 for the width,

632
00:23:25,436 --> 00:23:27,166 A:middle
and for the height we just
need enough to be able

633
00:23:27,166 --> 00:23:29,556 A:middle
to show all the cells
we care about.

634
00:23:29,556 --> 00:23:30,786 A:middle
So, I'll just say
something like 240.

635
00:23:31,736 --> 00:23:33,336 A:middle
Finally, we'll pass
a style of Plain.

636
00:23:33,806 --> 00:23:37,026 A:middle
We'll then tell the tableView
to use our DataSource.

637
00:23:37,546 --> 00:23:42,036 A:middle
And then, we will tell the
tableView to reload data.

638
00:23:42,666 --> 00:23:44,996 A:middle
Let that Playground execute.

639
00:23:45,226 --> 00:23:49,616 A:middle
And once it's finished
executing, we'll be able

640
00:23:49,616 --> 00:23:51,336 A:middle
to see the tableView
we've created.

641
00:23:51,416 --> 00:23:53,376 A:middle
So, I'm going to just go ahead
and add this to the timeline.

642
00:23:53,406 --> 00:23:56,286 A:middle
We can see here that we've
created our tableView, you know,

643
00:23:56,286 --> 00:23:57,566 A:middle
we're seeing the
cell that we want,

644
00:23:57,766 --> 00:23:58,786 A:middle
with the text that we want.

645
00:23:59,676 --> 00:24:01,556 A:middle
So, OK. So that, you know,
gets us up and running.

646

647
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

648
00:23:59,676 --> 00:24:01,556 A:middle
So, OK. So that, you know,
gets us up and running.

649
00:24:01,556 --> 00:24:04,456 A:middle
But actually I want
to see the styles

650
00:24:04,516 --> 00:24:05,966 A:middle
for all the styles that we have.

651
00:24:06,436 --> 00:24:08,856 A:middle
So, I'm going to jump
back to the declaration

652
00:24:08,856 --> 00:24:10,306 A:middle
of UITableViewCell style.

653
00:24:10,616 --> 00:24:12,766 A:middle
And you can see here
that there are 4 options.

654
00:24:12,856 --> 00:24:16,036 A:middle
So I'm going to change this
1 to a 4, so if 4 rows.

655
00:24:16,186 --> 00:24:18,386 A:middle
Instead of always
passing the default style,

656
00:24:18,386 --> 00:24:20,206 A:middle
I'm going to conditionalize
it based on the row

657
00:24:20,206 --> 00:24:21,056 A:middle
that we're currently at.

658
00:24:21,666 --> 00:24:25,126 A:middle
So, I'll say let row
equals IndexPath.row.

659
00:24:25,126 --> 00:24:29,146 A:middle
And I'll say something
like let style equals

660
00:24:29,146 --> 00:24:33,306 A:middle
UITableViewCellStyle.fromRaw.

661
00:24:34,376 --> 00:24:35,116 A:middle
I'll pass the row.

662
00:24:35,836 --> 00:24:40,606 A:middle
This fromRaw will convert the
UITable, the raw row integer

663
00:24:40,836 --> 00:24:42,896 A:middle
into a UITableViewCell
style optional.

664
00:24:43,456 --> 00:24:46,506 A:middle
And we confirm that by using
quick help and we can say that,

665
00:24:46,506 --> 00:24:48,456 A:middle
"Oh, yes in fact, this
style is an optional

666
00:24:48,456 --> 00:24:49,716 A:middle
UITableViewCell style."

667
00:24:50,206 --> 00:24:51,526 A:middle
If we were to pass
this directly here,

668
00:24:51,526 --> 00:24:55,716 A:middle
we would get an error
as you can see here.

669
00:24:55,716 --> 00:24:58,376 A:middle
We need to explicitly handle
the fact that this could be nil.

670
00:24:58,446 --> 00:25:02,136 A:middle
You know, the UITableViewCell
initializer doesn't expect that.

671

672
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

673
00:24:58,446 --> 00:25:02,136 A:middle
You know, the UITableViewCell
initializer doesn't expect that.

674
00:25:02,586 --> 00:25:04,606 A:middle
So, let's go ahead
and check that.

675
00:25:04,606 --> 00:25:07,306 A:middle
So we'll say, if we have
a style, let's unwrap it,

676
00:25:07,976 --> 00:25:09,796 A:middle
otherwise you just
use the default style.

677
00:25:10,846 --> 00:25:12,636 A:middle
It's OK. Now that
we've handled that,

678
00:25:13,026 --> 00:25:15,626 A:middle
let the Playground
re-execute and let's jump back

679
00:25:15,626 --> 00:25:16,936 A:middle
to the timeline using
the jump bar.

680
00:25:17,496 --> 00:25:20,836 A:middle
And once it's re-executed,
we'll notice here

681
00:25:20,836 --> 00:25:24,976 A:middle
that we're now seeing all the
different UITableViewCell styles

682
00:25:25,036 --> 00:25:25,786 A:middle
in our tableView.

683
00:25:26,226 --> 00:25:27,916 A:middle
And so now, I have a Playground
which I can, you know,

684
00:25:27,916 --> 00:25:29,956 A:middle
share with my co-workers or
just keep it as a reference

685
00:25:29,956 --> 00:25:32,216 A:middle
for myself to see what
each UITableViewCell style

686
00:25:32,216 --> 00:25:32,606 A:middle
looks like.

687
00:25:33,176 --> 00:25:34,346 A:middle
Let's go back to slides now.

688
00:25:34,556 --> 00:25:36,916 A:middle
So that showed you how
great Playgrounds are

689
00:25:36,916 --> 00:25:37,916 A:middle
for experimentation.

690
00:25:37,956 --> 00:25:39,686 A:middle
You just get started
with an idea,

691
00:25:39,946 --> 00:25:41,606 A:middle
write some code, and
see how it works.

692
00:25:41,676 --> 00:25:44,356 A:middle
And now I'd like to invite
Rick back on stage to talk

693
00:25:44,356 --> 00:25:46,326 A:middle
about another great idea
we have for Playgrounds

694
00:25:46,326 --> 00:25:47,946 A:middle
and that's Algorithm
Development.

695
00:25:48,186 --> 00:25:48,386 A:middle
Rick?

696
00:25:49,056 --> 00:25:51,296 A:middle
>> Thanks, Connor.

697
00:25:51,786 --> 00:25:55,586 A:middle
Developing algorithms and any
other separable pieces of code

698
00:25:55,586 --> 00:25:57,386 A:middle
in a Playground is
a great way to go.

699
00:25:57,596 --> 00:26:00,136 A:middle
And so to show you that, I'm
going to dive right into a demo.

700

701
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

702
00:25:57,596 --> 00:26:00,136 A:middle
And so to show you that, I'm
going to dive right into a demo.

703
00:26:00,356 --> 00:26:03,456 A:middle
So what we're going to do today
is implement insertion sort,

704
00:26:03,456 --> 00:26:04,796 A:middle
a fairly straightforward sort.

705
00:26:04,796 --> 00:26:07,246 A:middle
We're going to create a brand
new Playground to do that.

706
00:26:07,246 --> 00:26:09,716 A:middle
So I'll just say get
started with a Playground,

707
00:26:09,876 --> 00:26:12,086 A:middle
and we'll call the
Playground InsertionSort

708
00:26:13,456 --> 00:26:14,486 A:middle
and save it on the desktop.

709
00:26:15,636 --> 00:26:17,486 A:middle
If you're not familiar
with insertion sort,

710
00:26:17,586 --> 00:26:19,886 A:middle
imagine that you have a hand of
cards and you want to put them

711
00:26:19,886 --> 00:26:21,916 A:middle
in order with the
lowest values in the left

712
00:26:22,176 --> 00:26:23,536 A:middle
and the highest values
on the right.

713
00:26:23,956 --> 00:26:26,216 A:middle
One way you might do that
is, start with the second

714
00:26:26,216 --> 00:26:29,076 A:middle
to leftmost card and compare
its value to the leftmost card.

715
00:26:29,486 --> 00:26:31,256 A:middle
If it's less, you'd
swap the position

716
00:26:31,256 --> 00:26:32,376 A:middle
of the two cards in your hand.

717
00:26:33,106 --> 00:26:35,406 A:middle
You'd then look at the third
to leftmost card and compare it

718
00:26:35,406 --> 00:26:36,556 A:middle
to the second to leftmost.

719
00:26:36,866 --> 00:26:39,596 A:middle
If it's less, you'd swap it,
compare it to the leftmost card,

720
00:26:39,836 --> 00:26:43,136 A:middle
swap it if needed, and go
on doing this for every card

721
00:26:43,136 --> 00:26:45,646 A:middle
in your hand until every
card had reached the correct,

722
00:26:45,646 --> 00:26:46,376 A:middle
sorted position.

723
00:26:46,706 --> 00:26:48,306 A:middle
When you're done, your
hand will be in order.

724
00:26:49,256 --> 00:26:51,756 A:middle
So, let's implement
that in a Playground.

725
00:26:52,016 --> 00:26:53,606 A:middle
To start with, we
need some random data

726
00:26:53,606 --> 00:26:54,586 A:middle
that we're going to sort.

727
00:26:55,006 --> 00:26:56,836 A:middle
So, I'm going to go
ahead and I'm going

728
00:26:56,836 --> 00:26:58,346 A:middle
to declare an array of data.

729
00:26:58,506 --> 00:27:00,506 A:middle
I'm going to use var
because this needs

730

731
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

732
00:26:58,506 --> 00:27:00,506 A:middle
I'm going to use var
because this needs

733
00:27:00,506 --> 00:27:03,126 A:middle
to be a mutable array, so I
can add to it and sort it.

734
00:27:03,126 --> 00:27:06,786 A:middle
And we'll just make an empty
array of ints to start with.

735
00:27:07,156 --> 00:27:09,926 A:middle
And I could say for
i in 0 through 20,

736
00:27:09,926 --> 00:27:11,506 A:middle
because maybe I want
20 data points.

737
00:27:11,666 --> 00:27:14,436 A:middle
I can say data.append
to add a new element.

738
00:27:14,436 --> 00:27:17,776 A:middle
And let's use the
arc4random function

739
00:27:17,776 --> 00:27:19,116 A:middle
to generate a random number.

740
00:27:19,616 --> 00:27:21,376 A:middle
That doesn't return a
Swift Int, so we're going

741
00:27:21,376 --> 00:27:23,286 A:middle
to cast it explicitly
to a Swift Int.

742
00:27:23,726 --> 00:27:27,536 A:middle
And we'll modulus it by 100 to
get a number between 0 and 99.

743
00:27:28,246 --> 00:27:29,646 A:middle
So if I look at data here,

744
00:27:29,986 --> 00:27:31,776 A:middle
you can see I have a
result here on the right.

745
00:27:32,306 --> 00:27:35,396 A:middle
Here's an array of what look
like pretty random numbers.

746
00:27:35,796 --> 00:27:37,966 A:middle
You'll also notice if I edit
the Playground source again it

747
00:27:37,966 --> 00:27:40,626 A:middle
reruns and I get a different
array of random numbers.

748
00:27:41,356 --> 00:27:42,716 A:middle
Ah, OK, so that's great.

749
00:27:43,176 --> 00:27:46,156 A:middle
Well, it's nice to be able
to generate random data

750
00:27:46,156 --> 00:27:47,636 A:middle
but I probably don't
want it to change

751
00:27:47,636 --> 00:27:49,296 A:middle
on me every time I edit
the Playground source

752
00:27:49,296 --> 00:27:51,276 A:middle
because that might make it
hard to develop my algorithm.

753
00:27:51,276 --> 00:27:54,866 A:middle
So, let's grab this random
data and use it every time.

754
00:27:55,516 --> 00:27:57,806 A:middle
To do that, I'm going to
click over the result sidebar

755
00:27:57,956 --> 00:28:02,836 A:middle
and use command-A to select
this data, command-C to copy it,

756

757
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

758
00:27:57,956 --> 00:28:02,836 A:middle
and use command-A to select
this data, command-C to copy it,

759
00:28:03,246 --> 00:28:06,156 A:middle
and then I'm just going to paste
this in here as array literal.

760
00:28:06,286 --> 00:28:09,186 A:middle
And now I can work off the
same random data every time.

761
00:28:10,256 --> 00:28:12,496 A:middle
OK. So, let's start
implementing our algorithm.

762
00:28:12,896 --> 00:28:14,386 A:middle
The first thing we
need is a function

763
00:28:14,386 --> 00:28:16,926 A:middle
to swap two points
of data in our array.

764
00:28:17,206 --> 00:28:19,176 A:middle
There actually is a
built-in function called swap

765
00:28:19,176 --> 00:28:19,826 A:middle
for this already.

766
00:28:19,826 --> 00:28:22,186 A:middle
But for the sake of argument,
we'll implement it ourselves.

767
00:28:22,296 --> 00:28:23,596 A:middle
So, I'm going to say func.

768
00:28:23,596 --> 00:28:25,136 A:middle
I'll call mine exchange.

769
00:28:25,496 --> 00:28:29,376 A:middle
You know, we're going to make
this a generic because, well,

770
00:28:29,376 --> 00:28:30,526 A:middle
we have an array of ints.

771
00:28:30,976 --> 00:28:34,016 A:middle
Our insertion sort should
be able to work on any type.

772
00:28:34,016 --> 00:28:37,006 A:middle
So, any type at least as
long as it's comparable.

773
00:28:37,006 --> 00:28:39,296 A:middle
One element can be
compared as greater

774
00:28:39,296 --> 00:28:40,346 A:middle
than or less than another.

775
00:28:40,816 --> 00:28:43,036 A:middle
So, we'll mostly work on
comparable types here,

776
00:28:43,296 --> 00:28:45,046 A:middle
the exchange function
can work on any type

777
00:28:45,086 --> 00:28:46,396 A:middle
because we just are
swapping types.

778
00:28:46,476 --> 00:28:48,816 A:middle
So this is an exchange
using a type D.

779
00:28:48,816 --> 00:28:55,336 A:middle
And it's going to take an
array of T and two indexes

780
00:28:55,956 --> 00:28:58,206 A:middle
which we're going to
exchange in the array.

781
00:28:58,936 --> 00:29:02,066 A:middle
So, the simplest way to exchange
these objects is to assign one

782

783
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

784
00:28:58,936 --> 00:29:02,066 A:middle
So, the simplest way to exchange
these objects is to assign one

785
00:29:02,066 --> 00:29:04,636 A:middle
to a temporary variable,
assign the second to the first,

786
00:29:04,636 --> 00:29:06,726 A:middle
and assign the temporary
variable to the second.

787
00:29:06,796 --> 00:29:09,866 A:middle
So, we can say let
temp equals data of i.

788
00:29:09,866 --> 00:29:13,226 A:middle
Data of i equals data of j.

789
00:29:13,296 --> 00:29:15,786 A:middle
And data of j equals temp.

790
00:29:17,156 --> 00:29:18,776 A:middle
OK. I think we've
implemented this correctly

791
00:29:18,776 --> 00:29:20,266 A:middle
but let's try it and find out.

792
00:29:20,266 --> 00:29:23,606 A:middle
I can say exchange,
pass my data array

793
00:29:24,286 --> 00:29:27,246 A:middle
and we'll say exchange the 0th
element with the second element.

794
00:29:27,506 --> 00:29:29,526 A:middle
And then we'll take a look
at our array when we're done.

795
00:29:30,186 --> 00:29:34,006 A:middle
So, before, element 0 was
12, and element 2 was 15,

796
00:29:34,406 --> 00:29:37,126 A:middle
now element 0 is 15
and element 2 is 12.

797
00:29:37,186 --> 00:29:39,346 A:middle
So, it looks like
exchange works properly.

798
00:29:40,466 --> 00:29:43,666 A:middle
OK. The next thing we need is
a function to, given an index,

799
00:29:43,766 --> 00:29:45,176 A:middle
look at the data
point of that index,

800
00:29:45,486 --> 00:29:48,486 A:middle
compare it to the data point
to its left; if it's less,

801
00:29:48,486 --> 00:29:51,096 A:middle
exchange them and keep
comparing and exchanging

802
00:29:51,096 --> 00:29:53,316 A:middle
until it reaches the correct
position in the array.

803
00:29:53,956 --> 00:29:56,796 A:middle
So, let's call this
function swapLeft.

804
00:29:59,296 --> 00:30:00,936 A:middle
Again, it's a generic
but this time we need

805

806
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

807
00:29:59,296 --> 00:30:00,936 A:middle
Again, it's a generic
but this time we need

808
00:30:00,936 --> 00:30:01,956 A:middle
to actually do a comparison.

809
00:30:02,076 --> 00:30:06,546 A:middle
So, we're going to say our type
D is comparable and we're going

810
00:30:06,546 --> 00:30:11,086 A:middle
to pass an array of T and an
index of the data point we want

811
00:30:11,086 --> 00:30:12,196 A:middle
to start swapping left.

812
00:30:13,236 --> 00:30:15,726 A:middle
OK. So, let's implement
this, we're going to start

813
00:30:15,726 --> 00:30:18,006 A:middle
with our index and go
back to position 1,

814
00:30:18,376 --> 00:30:20,946 A:middle
not 0 because there's nothing
to the left of 0 to swap.

815
00:30:20,946 --> 00:30:24,136 A:middle
So, I'm going to say
for i in, and, you know,

816
00:30:24,176 --> 00:30:26,366 A:middle
I could do a range
from 1 to index

817
00:30:26,716 --> 00:30:28,596 A:middle
but what I really
want is index to 1.

818
00:30:28,596 --> 00:30:32,716 A:middle
So I'm going to reverse
the range with reverse 1.

819
00:30:33,126 --> 00:30:35,686 A:middle
3 dots makes it a
fully closed range

820
00:30:35,686 --> 00:30:37,586 A:middle
which means it will go
all the way to index.

821
00:30:38,056 --> 00:30:41,116 A:middle
So, since I'm reversing this, it
goes from index and ends at 1.

822
00:30:42,256 --> 00:30:44,936 A:middle
And for each of these data
points, I'm just going to say

823
00:30:44,936 --> 00:30:49,476 A:middle
if data of i is less
than data of i minus 1,

824
00:30:51,796 --> 00:30:56,616 A:middle
exchange data i and i minus 1.

825
00:30:57,266 --> 00:31:00,056 A:middle
OK. If it's not less
than data of i minus 1,

826

827
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

828
00:30:57,266 --> 00:31:00,056 A:middle
OK. If it's not less
than data of i minus 1,

829
00:31:00,186 --> 00:31:02,046 A:middle
it must have reached the
correct sort of position

830
00:31:02,046 --> 00:31:03,406 A:middle
in the array, so
we can stop there.

831
00:31:03,786 --> 00:31:05,286 A:middle
So, let's say else break.

832
00:31:06,526 --> 00:31:08,236 A:middle
OK. Let's try this function out.

833
00:31:08,696 --> 00:31:13,716 A:middle
I'm going to go ahead and
say swapLeft, pass data,

834
00:31:14,006 --> 00:31:17,396 A:middle
and let's pass element
1, 2, 3, 4, 5, 6.

835
00:31:17,396 --> 00:31:19,206 A:middle
Let's pass element 6 left.

836
00:31:19,506 --> 00:31:23,666 A:middle
Oops! And look at our data.

837
00:31:23,666 --> 00:31:25,596 A:middle
And you can see the 0
has moved all the way

838
00:31:25,596 --> 00:31:27,956 A:middle
from the 6th position to
the beginning of the array

839
00:31:27,956 --> 00:31:29,546 A:middle
and everything's been
moved to the right.

840
00:31:29,546 --> 00:31:31,776 A:middle
So it looks like this
function is working great too.

841
00:31:32,566 --> 00:31:35,516 A:middle
OK. The last thing we need is
to actually implement the sort,

842
00:31:35,596 --> 00:31:36,666 A:middle
so this should be pretty simple.

843
00:31:36,976 --> 00:31:38,506 A:middle
We'll call our function isort,

844
00:31:38,996 --> 00:31:41,566 A:middle
works again on type
T that is comparable.

845
00:31:42,046 --> 00:31:43,946 A:middle
And we can just pass
an array of T

846
00:31:44,026 --> 00:31:45,406 A:middle
and it will sort
the whole array.

847
00:31:45,866 --> 00:31:49,426 A:middle
To do this, I'm just going to
say for i in 1 (we're starting

848
00:31:49,426 --> 00:31:52,016 A:middle
at 1 because there's nothing
to the left of 0 to sort to)

849
00:31:52,826 --> 00:32:01,476 A:middle
to data.count, swapLeft,
data and i.

850

851
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

852
00:31:52,826 --> 00:32:01,476 A:middle
to data.count, swapLeft,
data and i.

853
00:32:02,356 --> 00:32:06,606 A:middle
So, let's try it
out, isort data.

854
00:32:06,796 --> 00:32:08,646 A:middle
And we'll look our data
array when we're done.

855
00:32:09,016 --> 00:32:11,286 A:middle
And you can see it did a whole
bunch of assignments up here.

856
00:32:11,576 --> 00:32:14,476 A:middle
And now here's our
final array and it looks

857
00:32:14,476 --> 00:32:15,816 A:middle
like this is in sorted order.

858
00:32:16,056 --> 00:32:18,156 A:middle
So, we've correctly
implemented insertion sort.

859
00:32:18,376 --> 00:32:21,556 A:middle
So, this is great for a simple
algorithm like insertion sort.

860
00:32:21,556 --> 00:32:22,356 A:middle
That wasn't too hard.

861
00:32:22,656 --> 00:32:24,786 A:middle
But you know if I was doing
something more complicated,

862
00:32:24,966 --> 00:32:26,806 A:middle
it might be nice to
have more visibility

863
00:32:26,806 --> 00:32:28,456 A:middle
into exactly what's
going on here.

864
00:32:28,716 --> 00:32:31,076 A:middle
So, let's look at how we
might visualize our results

865
00:32:31,076 --> 00:32:31,866 A:middle
in more detail.

866
00:32:32,586 --> 00:32:35,456 A:middle
Well to start out with, let's
draw a graph of the results

867
00:32:35,486 --> 00:32:37,106 A:middle
of the data at the beginning.

868
00:32:37,466 --> 00:32:40,036 A:middle
To do that, I'm just going to
say for x in data (to iterate

869
00:32:40,036 --> 00:32:42,836 A:middle
through every data point)
and just print out x.

870
00:32:44,116 --> 00:32:46,346 A:middle
And so, you'll see there
are 20 data points here.

871
00:32:46,346 --> 00:32:47,866 A:middle
So this line executed 20 times.

872
00:32:48,176 --> 00:32:50,156 A:middle
And if I click on the
Value History button,

873
00:32:51,106 --> 00:32:54,216 A:middle
I get a nice graph here showing
my data at the beginning and,

874
00:32:54,216 --> 00:32:55,736 A:middle
boy, that does look random.

875
00:32:56,456 --> 00:33:00,506 A:middle
OK. So, now I want
to try to print

876

877
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

878
00:32:56,456 --> 00:33:00,506 A:middle
OK. So, now I want
to try to print

879
00:33:00,506 --> 00:33:03,136 A:middle
out another graph every
time swapLeft is called,

880
00:33:03,136 --> 00:33:05,196 A:middle
so I can see what's
happening to the graph

881
00:33:05,456 --> 00:33:07,176 A:middle
over iterations of swapLeft.

882
00:33:07,666 --> 00:33:09,596 A:middle
And I could put this
"for" statement in the end

883
00:33:09,596 --> 00:33:12,096 A:middle
of swapLeft again and
show the Value History.

884
00:33:12,486 --> 00:33:15,036 A:middle
But again, in Value History
Timeline item for given,

885
00:33:15,036 --> 00:33:18,036 A:middle
a line is going to show all
the data from that line.

886
00:33:18,346 --> 00:33:19,886 A:middle
So, each time swapLeft
is called,

887
00:33:19,886 --> 00:33:22,606 A:middle
its data would be
appended to the same graph.

888
00:33:22,896 --> 00:33:23,736 A:middle
That's not what I want.

889
00:33:23,736 --> 00:33:25,476 A:middle
I want a new graph,
every time it's called.

890
00:33:25,886 --> 00:33:28,406 A:middle
So to do that, we're going to
need a new tool in our toolbox.

891
00:33:28,576 --> 00:33:30,576 A:middle
I'm going to go back to
slides and show you that.

892
00:33:31,026 --> 00:33:33,096 A:middle
With Playgrounds, we're
shipping a new framework called

893
00:33:33,096 --> 00:33:36,156 A:middle
XCPlayground and it contains
some very useful utilities

894
00:33:36,206 --> 00:33:37,766 A:middle
for enhancing your Playgrounds.

895
00:33:38,506 --> 00:33:42,136 A:middle
Right now, we have API for
manually capturing values

896
00:33:42,166 --> 00:33:45,566 A:middle
to display in timeline items,
showing your views live

897
00:33:46,006 --> 00:33:48,496 A:middle
and extending execution
for asynchronous code.

898
00:33:49,536 --> 00:33:51,076 A:middle
Right now, we're
going to use the API

899
00:33:51,076 --> 00:33:52,826 A:middle
for manually capturing values.

900
00:33:53,796 --> 00:33:56,436 A:middle
That API is called
XCPCaptureValue.

901
00:33:56,976 --> 00:34:00,006 A:middle
It's a function that takes an
identifier, which is a string,

902

903
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

904
00:33:56,976 --> 00:34:00,006 A:middle
It's a function that takes an
identifier, which is a string,

905
00:34:00,416 --> 00:34:02,156 A:middle
and your value, which
is of any type.

906
00:34:03,416 --> 00:34:06,286 A:middle
When you pass it -- your value
-- it will take that value

907
00:34:06,286 --> 00:34:08,206 A:middle
and put it in a timeline
item for you.

908
00:34:08,826 --> 00:34:12,996 A:middle
So, the identifier that you pass
it identifies what timeline item

909
00:34:12,996 --> 00:34:14,545 A:middle
you want that value to go to.

910
00:34:15,056 --> 00:34:17,186 A:middle
If you call this function
on different lines

911
00:34:17,186 --> 00:34:18,786 A:middle
but pass the same identifier,

912
00:34:19,106 --> 00:34:20,735 A:middle
the values from those
different lines will go

913
00:34:20,735 --> 00:34:22,076 A:middle
to the same timeline item.

914
00:34:22,676 --> 00:34:25,775 A:middle
Conversely, and what we want
here, if you have one line

915
00:34:25,775 --> 00:34:28,786 A:middle
that calls XCPCaptureValue
but it's called multiple times

916
00:34:28,786 --> 00:34:29,886 A:middle
with different identifiers

917
00:34:29,886 --> 00:34:31,556 A:middle
and it passes those
different identifiers,

918
00:34:31,876 --> 00:34:34,396 A:middle
that one line can generate
multiple different timeline

919
00:34:34,396 --> 00:34:36,045 A:middle
items (or grabs, in our case).

920
00:34:36,735 --> 00:34:40,005 A:middle
That identifier is also shown
as the name of the timeline item

921
00:34:40,005 --> 00:34:42,156 A:middle
so you can easily see
what data is what.

922
00:34:43,005 --> 00:34:45,436 A:middle
The value pass can be
anything, because it's a generic

923
00:34:45,696 --> 00:34:48,126 A:middle
but it helps if it's a type
of value that we know how

924
00:34:48,126 --> 00:34:49,255 A:middle
to Quick Look appropriately.

925
00:34:50,076 --> 00:34:51,716 A:middle
So, let's go back
and give this a shot.

926
00:34:51,746 --> 00:34:54,606 A:middle
So to start out with, I
need to import XCPlayground

927
00:34:54,606 --> 00:34:59,946 A:middle
to make this API available
and I'm going to go ahead

928
00:34:59,946 --> 00:35:01,186 A:middle
and define a new function.

929

930
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

931
00:34:59,946 --> 00:35:01,186 A:middle
and define a new function.

932
00:35:02,586 --> 00:35:04,506 A:middle
I'll call it visualize
and it's a generic.

933
00:35:04,856 --> 00:35:09,776 A:middle
And it will take an array of
type T and I'm going to use this

934
00:35:09,776 --> 00:35:11,806 A:middle
"for" loop in it, so
I'll just indent that

935
00:35:11,806 --> 00:35:12,796 A:middle
and close the function.

936
00:35:13,516 --> 00:35:15,726 A:middle
But instead of just
printing out x, what we want

937
00:35:15,726 --> 00:35:16,946 A:middle
to do is capture that value.

938
00:35:16,946 --> 00:35:18,836 A:middle
So, I'll call XCPCaptureValue.

939
00:35:19,456 --> 00:35:21,826 A:middle
I need an identifier, so
let's add one to our function.

940
00:35:21,826 --> 00:35:26,616 A:middle
So, identifier is a
string and we could pass

941
00:35:26,616 --> 00:35:30,466 A:middle
that identifier,
and our value is x.

942
00:35:31,386 --> 00:35:34,656 A:middle
OK. So let's try this function
out and visualize the data

943
00:35:34,656 --> 00:35:38,026 A:middle
at the start of our sort
and we'll label it Start

944
00:35:38,026 --> 00:35:39,976 A:middle
as the identifier just
so we know what's what.

945
00:35:39,976 --> 00:35:44,196 A:middle
And here you can see it ran and
here's our data at the start.

946
00:35:44,196 --> 00:35:45,946 A:middle
So that's a good start.

947
00:35:46,866 --> 00:35:49,316 A:middle
So now, we're going to go
ahead and visualize our data

948
00:35:49,316 --> 00:35:51,356 A:middle
after every iteration
of swapLeft.

949
00:35:51,356 --> 00:35:55,106 A:middle
So, I can call visualize,
I'll pass data as it is

950
00:35:55,106 --> 00:35:56,496 A:middle
after this iteration
of swapLeft.

951
00:35:56,946 --> 00:36:00,736 A:middle
And for our identifier, let's
label it after the iteration,

952

953
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

954
00:35:56,946 --> 00:36:00,736 A:middle
And for our identifier, let's
label it after the iteration,

955
00:36:01,056 --> 00:36:02,906 A:middle
the number of times
that swapLeft is called,

956
00:36:03,816 --> 00:36:05,716 A:middle
which is the index parameter.

957
00:36:06,096 --> 00:36:08,556 A:middle
And so, I'm going
to let this run now.

958
00:36:08,866 --> 00:36:11,326 A:middle
And you can see that it's
generated multiple graphs

959
00:36:11,606 --> 00:36:14,036 A:middle
labeled after the
iteration that we're on.

960
00:36:14,316 --> 00:36:15,976 A:middle
So, now we can just
scroll through here

961
00:36:15,976 --> 00:36:20,456 A:middle
and see what's happening to our
data over time as swapLeft runs

962
00:36:20,496 --> 00:36:21,906 A:middle
and the sort completes.

963
00:36:22,036 --> 00:36:24,706 A:middle
You can see it looks like our
data is getting sorted piece

964
00:36:24,706 --> 00:36:25,326 A:middle
by piece.

965
00:36:26,366 --> 00:36:28,876 A:middle
And so, at the end, we
have a nicely-sorted array.

966
00:36:29,396 --> 00:36:32,606 A:middle
So there, we can easily
visualize exactly what's going

967
00:36:32,606 --> 00:36:33,656 A:middle
on with our algorithm.

968
00:36:33,946 --> 00:36:35,746 A:middle
We think you'll find
this very, very useful.

969
00:36:37,886 --> 00:36:39,886 A:middle
OK. Let's move on
to another example.

970
00:36:39,886 --> 00:36:42,606 A:middle
I've got a heap Playground
I made here earlier.

971
00:36:43,136 --> 00:36:45,346 A:middle
And it's got this
HeapGrapher class at the top

972
00:36:45,346 --> 00:36:46,416 A:middle
which I'll explain in a moment.

973
00:36:46,726 --> 00:36:49,756 A:middle
But the meat of this class
is my heap class which,

974
00:36:49,886 --> 00:36:52,356 A:middle
if you're not familiar with
a heap, a heap is a type

975
00:36:52,356 --> 00:36:55,176 A:middle
of balanced binary
tree where the value

976
00:36:55,176 --> 00:36:57,416 A:middle
of every node is
greater than or equal

977
00:36:57,416 --> 00:36:58,766 A:middle
to the value of its children.

978

979
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

980
00:37:00,286 --> 00:37:02,526 A:middle
Heaps are often used to
implement priority queues,

981
00:37:02,526 --> 00:37:03,616 A:middle
because it's very efficient

982
00:37:03,616 --> 00:37:05,606 A:middle
to remove the highest
priority item, that's the top

983
00:37:05,606 --> 00:37:08,466 A:middle
of the tree, and it's also
efficient to insert new items

984
00:37:08,466 --> 00:37:10,776 A:middle
into the correct position of
the tree for their priority.

985
00:37:11,906 --> 00:37:14,706 A:middle
We're implementing our heap
with an underlying array

986
00:37:14,706 --> 00:37:16,046 A:middle
to represent the tree.

987
00:37:16,286 --> 00:37:20,386 A:middle
And in our array, the tree
noted index i has children

988
00:37:20,386 --> 00:37:23,576 A:middle
at indexes i times 2
and i times 2 plus 1.

989
00:37:24,696 --> 00:37:25,746 A:middle
So you can see down here

990
00:37:25,746 --> 00:37:27,756 A:middle
at the bottom we've
got some random data

991
00:37:27,756 --> 00:37:28,906 A:middle
that we seeded ourselves with.

992
00:37:29,386 --> 00:37:31,756 A:middle
And we've created a new
heap with that data.

993
00:37:31,756 --> 00:37:35,036 A:middle
And we "heapified the heap,"
which is to say, put that data

994
00:37:35,036 --> 00:37:36,696 A:middle
into correctly heap-sorted
order.

995
00:37:37,786 --> 00:37:39,876 A:middle
On the right, in
the results sidebar,

996
00:37:40,206 --> 00:37:42,236 A:middle
you can see our default
treatment

997
00:37:42,236 --> 00:37:44,816 A:middle
of this custom class is to
show the name of the class

998
00:37:44,866 --> 00:37:45,956 A:middle
and show its properties.

999
00:37:45,956 --> 00:37:47,866 A:middle
In this case, it has
one property which is

1000
00:37:47,866 --> 00:37:50,996 A:middle
that heap array and here it
is before it's been heapified,

1001
00:37:50,996 --> 00:37:52,136 A:middle
when it's not a correct heap.

1002
00:37:52,856 --> 00:37:54,536 A:middle
And here it is after
it's been heapified,

1003
00:37:54,536 --> 00:37:56,146 A:middle
when it's purportedly
a correct heap.

1004
00:37:56,456 --> 00:37:59,206 A:middle
But you know, it's really
hard to tell looking

1005
00:37:59,206 --> 00:38:01,456 A:middle
at this array whether
that's a correct heap.

1006

1007
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1008
00:37:59,206 --> 00:38:01,456 A:middle
at this array whether
that's a correct heap.

1009
00:38:01,456 --> 00:38:03,726 A:middle
This array represents
a tree and, you know,

1010
00:38:03,726 --> 00:38:05,666 A:middle
not so good at visualizing,
"Hh, well, here's I,

1011
00:38:05,666 --> 00:38:07,806 A:middle
and here's i times 2,
and yeah, that's less..."

1012
00:38:07,986 --> 00:38:11,016 A:middle
Wouldn't it be much better if
I could just visualize this

1013
00:38:11,226 --> 00:38:13,746 A:middle
as a tree everywhere
my heap is referenced

1014
00:38:13,746 --> 00:38:14,716 A:middle
to my Playground source?

1015
00:38:15,426 --> 00:38:16,626 A:middle
So let's see how to do that.

1016
00:38:17,286 --> 00:38:19,366 A:middle
In order to visualize
my own custom class,

1017
00:38:19,656 --> 00:38:22,026 A:middle
we're going to implement
Custom Quick Look Support

1018
00:38:22,176 --> 00:38:23,146 A:middle
for this class.

1019
00:38:23,446 --> 00:38:27,706 A:middle
Our Custom Quick Look Support
allows you to add Quick Looks

1020
00:38:27,936 --> 00:38:31,436 A:middle
for subclasses of
NSObject only (right now).

1021
00:38:31,876 --> 00:38:35,486 A:middle
And to do it, you implement
the debugQuickLookObject method

1022
00:38:36,086 --> 00:38:37,466 A:middle
which takes no parameters

1023
00:38:37,706 --> 00:38:39,716 A:middle
and returns any object
as an optional.

1024
00:38:39,716 --> 00:38:42,806 A:middle
And you're going to return
the value that you want

1025
00:38:42,806 --> 00:38:44,796 A:middle
to represent your
object as its Quick Look.

1026
00:38:45,676 --> 00:38:49,526 A:middle
So, right now, that
value (the values

1027
00:38:49,526 --> 00:38:53,726 A:middle
that we support here) are
colors, strings (both plain

1028
00:38:53,726 --> 00:38:57,516 A:middle
and attributed),
images, and Bézier paths.

1029
00:38:57,516 --> 00:39:00,256 A:middle
So, for your Custom Quick Looks
you can use any of these types.

1030

1031
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1032
00:38:57,516 --> 00:39:00,256 A:middle
So, for your Custom Quick Looks
you can use any of these types.

1033
00:39:01,196 --> 00:39:04,076 A:middle
So, let's try it out.

1034
00:39:04,336 --> 00:39:07,716 A:middle
OK. So I mentioned before I
had a little HeapGrapher class

1035
00:39:07,716 --> 00:39:08,246 A:middle
that I wrote.

1036
00:39:08,446 --> 00:39:10,626 A:middle
That's a little class that knows
how to take an array and draw it

1037
00:39:10,626 --> 00:39:11,916 A:middle
as a tree, so we're
going to use that.

1038
00:39:12,426 --> 00:39:15,736 A:middle
We'll implement our
debugQuickLookObject method.

1039
00:39:16,086 --> 00:39:20,996 A:middle
It takes any, or returns
any object as an optional

1040
00:39:20,996 --> 00:39:25,726 A:middle
and we're just going to create
one of our HeapGraphers.

1041
00:39:25,846 --> 00:39:30,696 A:middle
And this HeapGrapher knows
how to generate an NSImage

1042
00:39:30,696 --> 00:39:33,256 A:middle
which is one of the Custom Quick
Look types, supported types.

1043
00:39:33,356 --> 00:39:35,556 A:middle
So, we're just going to
return the image it generates

1044
00:39:35,556 --> 00:39:39,066 A:middle
with g.graphHeap and
pass self.heaparray.

1045
00:39:40,376 --> 00:39:42,536 A:middle
And now, when this runs, instead

1046
00:39:42,536 --> 00:39:44,916 A:middle
of showing the default
representation for our class,

1047
00:39:45,206 --> 00:39:47,536 A:middle
it shows our custom Quick
Look representation,

1048
00:39:47,536 --> 00:39:48,286 A:middle
which is an image.

1049
00:39:48,656 --> 00:39:50,176 A:middle
And so when I click
the Quick Look button,

1050
00:39:50,486 --> 00:39:53,786 A:middle
you can see here it's
drawing my heap as a tree.

1051
00:39:54,146 --> 00:39:56,346 A:middle
This is before it's been
heapified when you can see,

1052
00:39:56,346 --> 00:39:59,096 A:middle
for example, 78 is less than 89.

1053
00:39:59,096 --> 00:39:59,976 A:middle
So this is not a correct heap.

1054

1055
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1056
00:40:00,766 --> 00:40:03,776 A:middle
But if I Quick Look it
after it's been heapified,

1057
00:40:04,066 --> 00:40:07,976 A:middle
I can now go, oh great, 91
is greater than 86 and 89,

1058
00:40:08,266 --> 00:40:12,176 A:middle
86 is greater than 84 and
79, and so on and so forth,

1059
00:40:12,176 --> 00:40:14,576 A:middle
and I can really
easily visually verify

1060
00:40:14,776 --> 00:40:15,926 A:middle
that this is a correct heap.

1061
00:40:16,136 --> 00:40:19,666 A:middle
So that's how you can Quick Look
your own classes in Playgrounds

1062
00:40:19,666 --> 00:40:21,406 A:middle
and we think you'll
find that very useful.

1063
00:40:21,406 --> 00:40:22,026 A:middle
All right.

1064
00:40:22,116 --> 00:40:24,796 A:middle
Next, we'd like to move on to
showing you how great it is

1065
00:40:24,796 --> 00:40:26,366 A:middle
to do Custom View Development

1066
00:40:26,366 --> 00:40:28,476 A:middle
and other drawing
development in Playground.

1067
00:40:28,676 --> 00:40:30,656 A:middle
And to do that, I'm going
to hand it over to Connor.

1068
00:40:31,256 --> 00:40:31,876 A:middle
>> Thank you, Rick.

1069
00:40:32,206 --> 00:40:36,396 A:middle
Another great use case we
think Playgrounds will be used

1070
00:40:36,396 --> 00:40:37,846 A:middle
for is Custom View Development.

1071
00:40:38,236 --> 00:40:40,536 A:middle
And that's because you can
just start writing some code

1072
00:40:40,716 --> 00:40:43,366 A:middle
and see the actual view
as it's being drawn

1073
00:40:43,366 --> 00:40:45,106 A:middle
and as you're starting to
build up your drawing code.

1074
00:40:45,426 --> 00:40:47,536 A:middle
So for this I have a goal.

1075
00:40:47,626 --> 00:40:49,206 A:middle
I want to take this
Playground icon

1076
00:40:49,206 --> 00:40:50,386 A:middle
and add some animation to it.

1077
00:40:50,936 --> 00:40:52,756 A:middle
The icon that we
have is really great.

1078
00:40:52,876 --> 00:40:54,746 A:middle
It conveys the playfulness
of Playgrounds.

1079
00:40:54,786 --> 00:40:57,556 A:middle
But unlike Playgrounds
themselves, it's static.

1080
00:40:57,616 --> 00:40:59,476 A:middle
There's nothing dynamic
about it.

1081
00:40:59,906 --> 00:41:02,336 A:middle
And so, I'm going to try
to add animation to this.

1082

1083
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1084
00:40:59,906 --> 00:41:02,336 A:middle
And so, I'm going to try
to add animation to this.

1085
00:41:02,476 --> 00:41:04,026 A:middle
And what better way
to do it than when

1086
00:41:04,026 --> 00:41:04,996 A:middle
in a Playground itself?

1087
00:41:05,076 --> 00:41:06,916 A:middle
So, let's jump over to the demo.

1088
00:41:07,616 --> 00:41:11,016 A:middle
So OK, here I'm going to go
ahead and open up a Playground

1089
00:41:11,016 --> 00:41:11,826 A:middle
that I've already started.

1090
00:41:12,376 --> 00:41:16,686 A:middle
So, OK. So here we've
got a Playground.

1091
00:41:16,686 --> 00:41:19,576 A:middle
We've got our subclass of NSView
called PlaygroundIconView.

1092
00:41:20,186 --> 00:41:22,416 A:middle
It has a few layers.

1093
00:41:23,106 --> 00:41:26,636 A:middle
It's got these three instance,
er, these three instance methods

1094
00:41:26,636 --> 00:41:28,506 A:middle
which actually do the
setup of those layers.

1095
00:41:28,586 --> 00:41:30,066 A:middle
You see that they're
unimplemented right now

1096
00:41:30,066 --> 00:41:31,346 A:middle
and we'll come back
to that in a moment.

1097
00:41:31,766 --> 00:41:36,266 A:middle
I also have an extension of
NSColor which defines a couple

1098
00:41:36,266 --> 00:41:38,506 A:middle
of colors for the
Playground icon itself.

1099
00:41:39,016 --> 00:41:43,956 A:middle
I then have a helper function
to convert an NSBezierPath

1100
00:41:44,306 --> 00:41:46,596 A:middle
to a CGPath for use
with CAShapeLayer.

1101
00:41:47,256 --> 00:41:49,616 A:middle
Finally, I just go ahead
and create an instance

1102
00:41:49,616 --> 00:41:50,786 A:middle
of my PlaygroundIconView.

1103
00:41:51,276 --> 00:41:52,646 A:middle
And then, I put it
on a separate line

1104
00:41:52,646 --> 00:41:53,936 A:middle
so I can add some stuff later.

1105
00:41:54,316 --> 00:41:57,026 A:middle
Let's go ahead and show
that in the timeline.

1106
00:41:58,306 --> 00:41:59,566 A:middle
So, OK. So you'll see now

1107
00:41:59,566 --> 00:42:01,246 A:middle
that we've just got
ourselves an empty view here.

1108

1109
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1110
00:41:59,566 --> 00:42:01,246 A:middle
that we've just got
ourselves an empty view here.

1111
00:42:04,096 --> 00:42:05,636 A:middle
So yes, we have an
empty view here.

1112
00:42:06,986 --> 00:42:08,736 A:middle
We actually just
now need to go ahead

1113
00:42:08,736 --> 00:42:10,536 A:middle
and implement these
setup functions.

1114
00:42:11,026 --> 00:42:12,716 A:middle
So let's go ahead and do that.

1115
00:42:13,126 --> 00:42:14,616 A:middle
So we'll start out
by creating the path

1116
00:42:14,846 --> 00:42:15,986 A:middle
for the background layer.

1117
00:42:19,516 --> 00:42:22,026 A:middle
So you can see here we're
creating NSBezierPath

1118
00:42:22,026 --> 00:42:24,006 A:middle
and we can Quick Look it to
make sure it looks right.

1119
00:42:24,006 --> 00:42:25,766 A:middle
And in fact, yeah,
that looks more or less

1120
00:42:25,766 --> 00:42:26,936 A:middle
like the Playground icon.

1121
00:42:27,496 --> 00:42:29,326 A:middle
So let's tell, let's
setup our layer.

1122
00:42:29,986 --> 00:42:33,456 A:middle
So OK, now we're
setting up the layer.

1123
00:42:33,866 --> 00:42:35,296 A:middle
You can see here in the timeline

1124
00:42:35,296 --> 00:42:38,236 A:middle
that we're now drawing the
layer where, you know...

1125
00:42:38,236 --> 00:42:40,016 A:middle
We have the background, we've
got the little border there,

1126
00:42:40,016 --> 00:42:41,806 A:middle
and so, OK, we've got
our background set up.

1127
00:42:42,546 --> 00:42:45,476 A:middle
Let's also do the seesaw base
and we'll do the same thing.

1128
00:42:45,526 --> 00:42:49,556 A:middle
We'll create a path for that.

1129
00:42:49,556 --> 00:42:51,506 A:middle
And we'll let it execute
and we'll see here,

1130
00:42:51,506 --> 00:42:52,676 A:middle
let's Quick Look, make sure...

1131
00:42:52,846 --> 00:42:54,426 A:middle
Yeah, that looks more or
less like the little base

1132
00:42:54,466 --> 00:42:56,446 A:middle
that we have for the
play- ...for the seesaw.

1133
00:42:57,266 --> 00:42:59,406 A:middle
So let's set up the
layer itself as well.

1134
00:42:59,916 --> 00:43:02,656 A:middle
And there, we just
make that change

1135

1136
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1137
00:42:59,916 --> 00:43:02,656 A:middle
And there, we just
make that change

1138
00:43:02,656 --> 00:43:04,686 A:middle
and immediately get the feedback
of seeing what that looks

1139
00:43:04,686 --> 00:43:06,046 A:middle
like when drawn in our view.

1140
00:43:06,606 --> 00:43:08,796 A:middle
Let's also do the seesaw layer.

1141
00:43:08,876 --> 00:43:10,436 A:middle
I've got some code here
to set that up as well.

1142
00:43:11,376 --> 00:43:14,346 A:middle
You see here that we're just,
you know, have a closure

1143
00:43:14,346 --> 00:43:15,966 A:middle
which will create the
child layer itself.

1144
00:43:15,966 --> 00:43:19,626 A:middle
We then create a couple
of layers for the children

1145
00:43:19,626 --> 00:43:23,366 A:middle
on each side of the seesaw, and
then we set up the bench itself

1146
00:43:23,366 --> 00:43:25,646 A:middle
and then add those layers
to our seesaw layer.

1147
00:43:26,016 --> 00:43:28,806 A:middle
So, OK. So now we've
got ourselves something

1148
00:43:28,806 --> 00:43:30,546 A:middle
that looks kind of like
the Playground icon.

1149
00:43:31,056 --> 00:43:33,426 A:middle
But like the icon itself,
it's not animating.

1150
00:43:33,666 --> 00:43:35,446 A:middle
So let's go ahead and
add support for animation

1151
00:43:35,446 --> 00:43:36,546 A:middle
to our PlaygroundIconView.

1152
00:43:37,296 --> 00:43:40,476 A:middle
I have a snippet
for that as well.

1153
00:43:40,586 --> 00:43:42,186 A:middle
And so, let's walk
through what this is doing.

1154
00:43:43,016 --> 00:43:46,006 A:middle
I define a constant for the
maximum angle of the seesaw.

1155
00:43:46,066 --> 00:43:47,546 A:middle
I've, you know, worked
through this and I think pi

1156
00:43:47,546 --> 00:43:48,636 A:middle
over 12 is about right.

1157
00:43:49,136 --> 00:43:52,456 A:middle
I also have a property for the
current angle of the seesaw

1158
00:43:52,456 --> 00:43:54,096 A:middle
after any pending
animation is finished.

1159
00:43:54,586 --> 00:43:57,756 A:middle
And then have a property
which determines whether

1160
00:43:57,756 --> 00:43:58,856 A:middle
or not it should be animating.

1161
00:43:58,896 --> 00:44:01,356 A:middle
It starts out as false
but we have this code here

1162

1163
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1164
00:43:58,896 --> 00:44:01,356 A:middle
It starts out as false
but we have this code here

1165
00:44:01,356 --> 00:44:03,946 A:middle
which executes whenever
this is set to say, "Well,

1166
00:44:03,946 --> 00:44:06,576 A:middle
if the animation state
has changed and we're told

1167
00:44:06,576 --> 00:44:08,706 A:middle
to animate, then just
start animating depending

1168
00:44:08,706 --> 00:44:10,766 A:middle
on the current angle
of the seesaw."

1169
00:44:11,626 --> 00:44:12,986 A:middle
I then have this helper method

1170
00:44:13,046 --> 00:44:15,666 A:middle
for actually performing
the animation itself.

1171
00:44:15,666 --> 00:44:18,386 A:middle
So we just, you know, go ahead
and create a CABasicAnimation,

1172
00:44:18,386 --> 00:44:20,976 A:middle
set a couple of values,
set our timing function

1173
00:44:20,976 --> 00:44:23,096 A:middle
to match what a seesaw
would actually look like.

1174
00:44:23,096 --> 00:44:26,186 A:middle
Set the duration to what
was passed in which defaults

1175
00:44:26,186 --> 00:44:29,296 A:middle
to 1-1/2 seconds, but can
be customized depending

1176
00:44:29,296 --> 00:44:30,816 A:middle
on the angle of the seesaw.

1177
00:44:31,356 --> 00:44:34,596 A:middle
We then add the animation
to our seesaw layer.

1178
00:44:35,156 --> 00:44:37,696 A:middle
We set the underlying transform
property of that seesaw layer,

1179
00:44:37,696 --> 00:44:40,156 A:middle
so that once the animation
completes it looks correct.

1180
00:44:40,756 --> 00:44:42,466 A:middle
And then we update our
current seesaw angle

1181
00:44:42,466 --> 00:44:43,466 A:middle
property accordingly.

1182
00:44:44,566 --> 00:44:47,416 A:middle
Finally, we have, uh, we
implement the "animationDidStop,

1183
00:44:47,416 --> 00:44:48,846 A:middle
finished" delegate callback.

1184
00:44:48,846 --> 00:44:50,906 A:middle
Or basically say
that if we finished

1185
00:44:50,906 --> 00:44:52,556 A:middle
and we're still supposed
to still be animating,

1186
00:44:52,906 --> 00:44:54,886 A:middle
then just go ahead and
animate to the opposite angle

1187
00:44:54,886 --> 00:44:57,336 A:middle
of what we currently are at.

1188
00:44:57,336 --> 00:45:00,026 A:middle
So, OK. Let's go ahead and tell
this view to start animating.

1189

1190
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1191
00:44:57,336 --> 00:45:00,026 A:middle
So, OK. Let's go ahead and tell
this view to start animating.

1192
00:45:04,766 --> 00:45:07,646 A:middle
So we'll do that and you'll
notice that after it reruns,

1193
00:45:08,146 --> 00:45:10,326 A:middle
we seeing the view update
it's look, you know,

1194
00:45:10,326 --> 00:45:12,336 A:middle
so we see that it
tilted over to the side.

1195
00:45:12,336 --> 00:45:14,206 A:middle
We're not seeing the
animation itself.

1196
00:45:14,586 --> 00:45:15,876 A:middle
And for that, we're
going to need some help

1197
00:45:15,926 --> 00:45:17,166 A:middle
from the XCPlayground framework.

1198
00:45:17,266 --> 00:45:18,476 A:middle
So, let's switch back the slides

1199
00:45:18,536 --> 00:45:19,396 A:middle
to see what that
could look like.

1200
00:45:20,036 --> 00:45:21,646 A:middle
So the second piece
of functionality

1201
00:45:21,646 --> 00:45:24,056 A:middle
which the XCPlayground framework
provides is the ability

1202
00:45:24,056 --> 00:45:25,776 A:middle
to show live views
in the timeline.

1203
00:45:26,616 --> 00:45:29,336 A:middle
And you do that by calling
this XCPShowView function.

1204
00:45:29,646 --> 00:45:32,186 A:middle
It takes an identifier and the
view that you want to show.

1205
00:45:32,716 --> 00:45:34,996 A:middle
After calling it, we'll show the
view live while the Playground

1206
00:45:34,996 --> 00:45:36,956 A:middle
executes and then
we'll record frames

1207
00:45:36,956 --> 00:45:38,016 A:middle
as the Playground executes

1208
00:45:38,086 --> 00:45:40,606 A:middle
so you can play them back
once execution finishes.

1209
00:45:41,216 --> 00:45:44,606 A:middle
The identifier you pass to this
function must be unique inside

1210
00:45:44,606 --> 00:45:45,276 A:middle
of the Playground.

1211
00:45:45,556 --> 00:45:46,686 A:middle
That's because this
is how we refer

1212
00:45:46,686 --> 00:45:48,486 A:middle
to the live view
internally in Xcode.

1213
00:45:48,906 --> 00:45:51,356 A:middle
And it is also what
we'd show as the title

1214
00:45:51,356 --> 00:45:52,816 A:middle
for the live view
in the timeline.

1215
00:45:54,056 --> 00:45:56,306 A:middle
The view pass must also
not have a superview.

1216
00:45:56,306 --> 00:45:58,926 A:middle
This is because we will add
it to our own view hierarchy

1217
00:45:59,246 --> 00:46:01,086 A:middle
and it would generally not
produce the results you're

1218

1219
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1220
00:45:59,246 --> 00:46:01,086 A:middle
and it would generally not
produce the results you're

1221
00:46:01,086 --> 00:46:01,596 A:middle
looking for.

1222
00:46:02,976 --> 00:46:05,426 A:middle
So with this in our toolbox,
let's jump back to the demo

1223
00:46:05,426 --> 00:46:06,246 A:middle
and see how it's used.

1224
00:46:06,246 --> 00:46:08,906 A:middle
So I'm going to go
ahead and just go ahead

1225
00:46:08,906 --> 00:46:10,116 A:middle
and import XCPlayground.

1226
00:46:10,676 --> 00:46:15,976 A:middle
And then down here, instead
of just having this view item,

1227
00:46:15,976 --> 00:46:17,626 A:middle
I'm going to remove
that from the timeline.

1228
00:46:17,896 --> 00:46:21,646 A:middle
I'm going to say
something like XCPShowView

1229
00:46:22,246 --> 00:46:23,296 A:middle
and pass an identifier.

1230
00:46:23,296 --> 00:46:25,136 A:middle
It can be anything as
long as it's unique.

1231
00:46:25,136 --> 00:46:28,916 A:middle
So I'll say Playground
Icon View.

1232
00:46:29,326 --> 00:46:30,966 A:middle
And then I'll pass the
view that we've created.

1233
00:46:32,296 --> 00:46:33,786 A:middle
So, we'll just let
that re-execute.

1234
00:46:34,286 --> 00:46:35,616 A:middle
And you see there
that in the timeline,

1235
00:46:35,616 --> 00:46:37,836 A:middle
we're showing the view
live as it's animating.

1236
00:46:37,836 --> 00:46:41,556 A:middle
You-all also probably noticed
this little timeout field

1237
00:46:41,556 --> 00:46:41,946 A:middle
down here.

1238
00:46:42,086 --> 00:46:44,666 A:middle
And that lets us specify
the amount of time

1239
00:46:44,666 --> 00:46:46,526 A:middle
which we'll let the
Playground continue executing

1240
00:46:46,526 --> 00:46:48,906 A:middle
after we reach the end of
execution of the top of a code.

1241
00:46:49,746 --> 00:46:52,476 A:middle
Now, it defaults to 30 seconds
but I'm going to adjust this

1242
00:46:52,516 --> 00:46:54,166 A:middle
down since I know my
animation only takes

1243
00:46:54,166 --> 00:46:55,536 A:middle
about a second and a half.

1244
00:46:55,536 --> 00:46:57,886 A:middle
So I'll do 10 seconds to
get a few times around.

1245
00:46:58,206 --> 00:47:00,886 A:middle
After we edit that,
we'll rerun it.

1246

1247
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1248
00:46:58,206 --> 00:47:00,886 A:middle
After we edit that,
we'll rerun it.

1249
00:47:01,506 --> 00:47:03,366 A:middle
And so that's great, you
know, we see it running there.

1250
00:47:03,526 --> 00:47:06,516 A:middle
And I'd like to show how you
can integrate XCPShowView

1251
00:47:06,516 --> 00:47:09,186 A:middle
with the XCPCaptureValue
API we mentioned earlier.

1252
00:47:10,346 --> 00:47:13,526 A:middle
And so, what I'm going to do,
I'm going to capture the angle

1253
00:47:13,526 --> 00:47:15,566 A:middle
of the seesaw, or
of the left edge

1254
00:47:15,566 --> 00:47:19,516 A:middle
of the seesaw as
we're animating.

1255
00:47:19,766 --> 00:47:22,346 A:middle
So here, I'm just going
to say XCPCaptureValue.

1256
00:47:23,226 --> 00:47:28,086 A:middle
I'll pass Left Seesaw
Position and I'll just pass 0

1257
00:47:28,086 --> 00:47:29,626 A:middle
because we know at
this point that it's,

1258
00:47:29,686 --> 00:47:31,326 A:middle
you know, it's flat on there.

1259
00:47:32,436 --> 00:47:34,266 A:middle
Then you can take this and
I'm going to put it in our

1260
00:47:34,266 --> 00:47:36,016 A:middle
"animationDidStop,
finished" callback.

1261
00:47:36,126 --> 00:47:40,356 A:middle
Now I'm going to just pass the
negative currentSeesawAngle.

1262
00:47:41,366 --> 00:47:43,296 A:middle
That's just because that's
what we need to do in order

1263
00:47:43,296 --> 00:47:45,806 A:middle
to get the left position
of the seesaw.

1264
00:47:45,906 --> 00:47:47,756 A:middle
That is how the angle works
out for the transform.

1265
00:47:48,216 --> 00:47:50,716 A:middle
So you see here that
as we're executing,

1266
00:47:50,716 --> 00:47:52,616 A:middle
we're getting the graph kind
of building up over time.

1267
00:47:53,046 --> 00:47:54,646 A:middle
And then once execution
finishes,

1268
00:47:54,776 --> 00:47:56,476 A:middle
the graph will snap
back into place and kind

1269
00:47:56,476 --> 00:47:59,166 A:middle
of show you the best view of
the data that it collected.

1270

1271
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1272
00:48:00,196 --> 00:48:02,606 A:middle
It's OK. You probably
also noticed this slider

1273
00:48:02,606 --> 00:48:03,276 A:middle
became active.

1274
00:48:03,746 --> 00:48:05,296 A:middle
And so, I can just go
ahead and take that

1275
00:48:05,296 --> 00:48:06,786 A:middle
and drag it through here.

1276
00:48:07,206 --> 00:48:09,596 A:middle
And you'll notice that we're
updating the graph at the bottom

1277
00:48:09,596 --> 00:48:11,656 A:middle
but we're also showing you
the animation, you know,

1278
00:48:11,756 --> 00:48:12,936 A:middle
as it went through in time.

1279
00:48:13,006 --> 00:48:15,296 A:middle
So this is, you know, a
fairly basic animation

1280
00:48:15,296 --> 00:48:17,296 A:middle
and it's doing what we
expected but, you know,

1281
00:48:17,556 --> 00:48:19,086 A:middle
if you had something
more complex and you want

1282
00:48:19,086 --> 00:48:21,056 A:middle
to just kind of take a look
at just a small portion

1283
00:48:21,056 --> 00:48:23,066 A:middle
of your animation, you
could do that as well.

1284
00:48:23,666 --> 00:48:25,486 A:middle
And I can also do
something like, you know,

1285
00:48:25,536 --> 00:48:26,996 A:middle
click on one of these points.

1286
00:48:26,996 --> 00:48:27,726 A:middle
So I can click there.

1287
00:48:27,726 --> 00:48:30,066 A:middle
We can see it, you know, that
the two things are in sync.

1288
00:48:30,066 --> 00:48:30,656 A:middle
I click there.

1289
00:48:30,656 --> 00:48:31,516 A:middle
It updates the point.

1290
00:48:31,516 --> 00:48:34,256 A:middle
I can use the arrow keys to
go through the graph's points

1291
00:48:34,256 --> 00:48:35,596 A:middle
and see that, OK,
yeah, you know,

1292
00:48:35,596 --> 00:48:38,296 A:middle
we're doing what
we expect it to do.

1293
00:48:38,526 --> 00:48:41,056 A:middle
And so, that's how you can
show live views in the timeline

1294
00:48:41,306 --> 00:48:42,916 A:middle
with the XCPlayground framework.

1295
00:48:43,246 --> 00:48:44,206 A:middle
Let's go back to the slides now.

1296
00:48:44,846 --> 00:48:45,696 A:middle
Now, I'd like to talk to you

1297
00:48:45,696 --> 00:48:47,256 A:middle
about how you can
use asynchronous code

1298
00:48:47,256 --> 00:48:48,016 A:middle
in your Playgrounds.

1299
00:48:48,146 --> 00:48:49,976 A:middle
You got a little taste of
this in the demo before.

1300
00:48:49,976 --> 00:48:51,726 A:middle
But I'd like to go into a
little bit more detail now.

1301
00:48:53,076 --> 00:48:54,306 A:middle
The third piece of functionality

1302
00:48:54,306 --> 00:48:57,076 A:middle
which the XCPlayground framework
provides is the ability

1303
00:48:57,076 --> 00:48:58,316 A:middle
to extend execution.

1304
00:48:59,626 --> 00:49:02,086 A:middle
By default, execution terminates
once all top-level code

1305

1306
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1307
00:48:59,626 --> 00:49:02,086 A:middle
By default, execution terminates
once all top-level code

1308
00:49:02,086 --> 00:49:02,836 A:middle
has executed.

1309
00:49:03,336 --> 00:49:05,256 A:middle
XCPlayground, though,
provides API

1310
00:49:05,426 --> 00:49:07,006 A:middle
for extending execution
indefinitely.

1311
00:49:07,226 --> 00:49:09,186 A:middle
That's this
XCPSetExecutionShould

1312
00:49:09,186 --> 00:49:10,546 A:middle
ContinueIndefinitely function.

1313
00:49:10,976 --> 00:49:13,456 A:middle
You should know that this is
actually not quite indefinite.

1314
00:49:13,456 --> 00:49:17,306 A:middle
The execution time is controlled
by the timeline's timeout

1315
00:49:17,306 --> 00:49:18,906 A:middle
which defaults to 30 seconds.

1316
00:49:19,656 --> 00:49:22,786 A:middle
Additionally, execution
will be terminated

1317
00:49:22,786 --> 00:49:24,686 A:middle
if you edit the Playground
while it's running.

1318
00:49:25,056 --> 00:49:27,716 A:middle
This is so that we can show
you up to date results rather

1319
00:49:27,716 --> 00:49:29,776 A:middle
than let, leaving you a
stale results while we wait

1320
00:49:29,776 --> 00:49:31,346 A:middle
for an earlier execution
to finish.

1321
00:49:32,746 --> 00:49:34,786 A:middle
Additionally, as you saw
on the last demo, you know,

1322
00:49:34,786 --> 00:49:35,956 A:middle
we didn't actually
call this function,

1323
00:49:35,956 --> 00:49:38,236 A:middle
but we saw that execution
continued

1324
00:49:38,236 --> 00:49:40,636 A:middle
after we reached the
end of top-level code.

1325
00:49:41,156 --> 00:49:43,166 A:middle
That's because XCPShowView
implicitly

1326
00:49:43,166 --> 00:49:45,106 A:middle
calls XCPSetExecutionShould

1327
00:49:45,106 --> 00:49:46,126 A:middle
ContinueIndefinitely.

1328
00:49:46,326 --> 00:49:48,786 A:middle
You should just think
about this as if nothing

1329
00:49:48,786 --> 00:49:50,356 A:middle
in the Playground
source has told Xcode

1330
00:49:50,356 --> 00:49:51,836 A:middle
that the Playground
used to stay alive,

1331
00:49:52,296 --> 00:49:54,636 A:middle
then the Playground will stop
executing once we reach the end

1332
00:49:54,636 --> 00:49:55,786 A:middle
of top-level code.

1333
00:49:56,336 --> 00:49:58,146 A:middle
So now, I'd like to show you
a quick demo of what it's

1334
00:49:58,146 --> 00:49:59,856 A:middle
like to use asynchronous
code in Playgrounds.

1335

1336
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1337
00:50:00,076 --> 00:50:02,826 A:middle
So here I am back here
and I have a Playground

1338
00:50:02,826 --> 00:50:04,596 A:middle
which uses asynchronous code.

1339
00:50:05,316 --> 00:50:07,886 A:middle
We create, uh, we have
our session delegate

1340
00:50:07,986 --> 00:50:09,666 A:middle
which is an
NSURLSessionDelegate.

1341
00:50:10,216 --> 00:50:11,206 A:middle
It has a few callbacks.

1342
00:50:11,686 --> 00:50:13,146 A:middle
And then we also just, you know,

1343
00:50:13,496 --> 00:50:14,626 A:middle
create an instance
of our delegate.

1344
00:50:14,626 --> 00:50:16,356 A:middle
We created an NSURLSession.

1345
00:50:17,036 --> 00:50:20,476 A:middle
And then create a data task
to download the contents

1346
00:50:20,476 --> 00:50:21,546 A:middle
of the Apple home page.

1347
00:50:21,826 --> 00:50:23,886 A:middle
We then tell the
data task to resume.

1348
00:50:24,736 --> 00:50:25,576 A:middle
And you noticed that, you know,

1349
00:50:25,576 --> 00:50:27,006 A:middle
the Playground itself
has executed

1350
00:50:27,486 --> 00:50:29,506 A:middle
but we're not receiving
any results up here.

1351
00:50:29,636 --> 00:50:31,846 A:middle
And if I open up the
assistant editor, you'll notice

1352
00:50:33,276 --> 00:50:36,246 A:middle
that we haven't received any
console output even though they

1353
00:50:36,246 --> 00:50:39,276 A:middle
were clearly logging here that
we've received some bytes.

1354
00:50:40,826 --> 00:50:41,956 A:middle
And this is because nothing

1355
00:50:41,956 --> 00:50:43,796 A:middle
in the Playground has
told the Playground

1356
00:50:43,796 --> 00:50:45,066 A:middle
that it should continue
executing.

1357
00:50:45,536 --> 00:50:49,686 A:middle
So we call task.resume, we
resume the task and then as soon

1358
00:50:49,686 --> 00:50:51,656 A:middle
as that finishes, we hit
the end of top-level code

1359
00:50:51,996 --> 00:50:53,746 A:middle
and the Playground
just stops executing.

1360
00:50:54,106 --> 00:50:57,226 A:middle
Let's go ahead and say
import XCPlayground.

1361
00:50:58,226 --> 00:51:00,716 A:middle
And then we can say
XCPSetExecution

1362

1363
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1364
00:50:58,226 --> 00:51:00,716 A:middle
And then we can say
XCPSetExecution

1365
00:51:00,716 --> 00:51:04,676 A:middle
ShouldContinue,
XCPSetExecutionShould

1366
00:51:04,676 --> 00:51:05,716 A:middle
ContinueIndefinitely.

1367
00:51:05,886 --> 00:51:08,346 A:middle
This takes a Bool but
that defaults to true,

1368
00:51:08,486 --> 00:51:10,196 A:middle
so you typically don't need
to pass anything there.

1369
00:51:10,196 --> 00:51:11,136 A:middle
And I won't do that here.

1370
00:51:11,956 --> 00:51:13,976 A:middle
You'll now notice that, you
know, we were receiving results

1371
00:51:13,976 --> 00:51:15,936 A:middle
from here and we're also
seeing the console output

1372
00:51:15,936 --> 00:51:17,776 A:middle
that we expect in the timeline.

1373
00:51:18,496 --> 00:51:20,696 A:middle
So OK, that's how you
use asynchronous code

1374
00:51:20,696 --> 00:51:21,256 A:middle
in Playgrounds.

1375
00:51:21,446 --> 00:51:22,356 A:middle
Let's go back to slides now.

1376
00:51:23,066 --> 00:51:25,096 A:middle
There are a few alternatives
but we really think

1377
00:51:25,096 --> 00:51:28,306 A:middle
that you should typically
use XCPSetExecutionShould

1378
00:51:28,306 --> 00:51:29,696 A:middle
ContinueIndefinitely
when you're trying

1379
00:51:29,696 --> 00:51:31,476 A:middle
to use asynchronous
code in Playgrounds.

1380
00:51:31,606 --> 00:51:33,316 A:middle
If that won't work
for you though,

1381
00:51:33,316 --> 00:51:34,816 A:middle
you can use other
methods for waiting

1382
00:51:34,816 --> 00:51:36,566 A:middle
for asynchronous
operations to finish.

1383
00:51:37,036 --> 00:51:39,086 A:middle
Basically, you just need to make
sure you don't reach the end

1384
00:51:39,086 --> 00:51:41,166 A:middle
of top-level code before
your operation completes.

1385
00:51:42,286 --> 00:51:44,376 A:middle
Before we leave today, I'd like
to talk to you a little bit

1386
00:51:44,376 --> 00:51:46,456 A:middle
about some of the limitations
we have with Playgrounds.

1387
00:51:47,696 --> 00:51:49,616 A:middle
First off, you should
not use performance, uh,

1388
00:51:49,616 --> 00:51:51,386 A:middle
Playgrounds for any
performance testing.

1389
00:51:51,756 --> 00:51:53,356 A:middle
That's because the
logging of results

1390
00:51:53,356 --> 00:51:55,506 A:middle
in the Playground will
generally dominate the runtime,

1391
00:51:55,746 --> 00:51:57,076 A:middle
not your actual code.

1392
00:51:57,556 --> 00:51:59,806 A:middle
This means that the performance
will be dependent on the number

1393
00:51:59,806 --> 00:52:02,506 A:middle
of lines of code executed,
not the actual performance

1394

1395
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1396
00:51:59,806 --> 00:52:02,506 A:middle
of lines of code executed,
not the actual performance

1397
00:52:02,506 --> 00:52:04,036 A:middle
of whatever it is
you are developing.

1398
00:52:04,376 --> 00:52:06,456 A:middle
And that's not necessarily
what you'd expect.

1399
00:52:07,706 --> 00:52:10,306 A:middle
Instead we'd suggest that
you use the XCTest framework

1400
00:52:10,606 --> 00:52:12,386 A:middle
to create performance
tests in a test bundle

1401
00:52:12,386 --> 00:52:14,276 A:middle
where you can get
more accurate results.

1402
00:52:15,126 --> 00:52:17,556 A:middle
We have a session later this
week called Testing in Xcode 6

1403
00:52:17,556 --> 00:52:18,956 A:middle
which will go into
this in more detail.

1404
00:52:21,006 --> 00:52:23,186 A:middle
There are few more
limitations with Playgrounds.

1405
00:52:23,606 --> 00:52:24,866 A:middle
Playgrounds cannot
be used for things

1406
00:52:24,866 --> 00:52:27,036 A:middle
which require user interaction.

1407
00:52:27,636 --> 00:52:29,526 A:middle
So we have great support
for showing live views

1408
00:52:29,776 --> 00:52:31,646 A:middle
but you can only see them,
you can't touch them.

1409
00:52:31,646 --> 00:52:35,236 A:middle
We also do not support using
Playgrounds for anything

1410
00:52:35,236 --> 00:52:36,726 A:middle
which require custom
entitlements.

1411
00:52:38,016 --> 00:52:40,206 A:middle
For iOS Playgrounds, we
only support executing

1412
00:52:40,206 --> 00:52:41,146 A:middle
against the simulator.

1413
00:52:41,406 --> 00:52:44,186 A:middle
So anything which requires a
device will not be supported

1414
00:52:44,186 --> 00:52:44,896 A:middle
with Playgrounds.

1415
00:52:46,046 --> 00:52:48,556 A:middle
And finally, we do not
support using your own app

1416
00:52:48,556 --> 00:52:50,956 A:middle
or framework code in a
Playground unless it's something

1417
00:52:50,956 --> 00:52:53,026 A:middle
that you can just copy and paste
into the Playground source.

1418
00:52:53,416 --> 00:52:55,806 A:middle
Basically, you can only use
things in the standard library,

1419
00:52:56,106 --> 00:52:59,036 A:middle
in the SDK, or that's in the
Playground source itself.

1420
00:52:59,516 --> 00:53:02,826 A:middle
You can get around some of these
limitations by using the REPL.

1421

1422
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1423
00:52:59,516 --> 00:53:02,826 A:middle
You can get around some of these
limitations by using the REPL.

1424
00:53:03,456 --> 00:53:05,766 A:middle
The REPL is the command
line interface to Swift

1425
00:53:05,766 --> 00:53:09,216 A:middle
and it works this way because
the REPL can actually execute

1426
00:53:09,216 --> 00:53:10,166 A:middle
in your own process.

1427
00:53:10,416 --> 00:53:13,216 A:middle
You just stop at a breakpoint,
and then at the LLDB prompt,

1428
00:53:13,216 --> 00:53:15,926 A:middle
you execute the REPL command
and you'll just be dropped

1429
00:53:15,926 --> 00:53:17,316 A:middle
down right into the Swift REPL.

1430
00:53:18,606 --> 00:53:21,186 A:middle
Playgrounds though provide a
richer experience than the REPL.

1431
00:53:21,236 --> 00:53:23,286 A:middle
And that's because we will
automatically execute your code

1432
00:53:23,286 --> 00:53:24,106 A:middle
from a known state.

1433
00:53:24,456 --> 00:53:27,666 A:middle
That means, you know, you make a
single edit to a line and then,

1434
00:53:27,666 --> 00:53:29,096 A:middle
you know, we just
rerun it from 0.

1435
00:53:29,706 --> 00:53:31,716 A:middle
Whereas with the REPL, if
you wanted to make an edit

1436
00:53:31,716 --> 00:53:33,926 A:middle
to something earlier in the
source that you had entered,

1437
00:53:33,926 --> 00:53:35,366 A:middle
you have to, you know,
get the process back

1438
00:53:35,366 --> 00:53:37,776 A:middle
into the state then, you
know, reenter the REPL,

1439
00:53:37,776 --> 00:53:39,706 A:middle
retype everything
making that one change

1440
00:53:39,706 --> 00:53:41,046 A:middle
to see how it affects things.

1441
00:53:41,976 --> 00:53:43,856 A:middle
Playgrounds also supports some
of these higher level futures

1442
00:53:43,856 --> 00:53:47,256 A:middle
like Quick Looks and a timeline
which we do not support, uh,

1443
00:53:47,256 --> 00:53:48,486 A:middle
which the REPL does not support.

1444
00:53:49,796 --> 00:53:51,726 A:middle
If you'd like to learn
more about the REPL,

1445
00:53:51,806 --> 00:53:55,066 A:middle
you can go to the Introduction
to LLDB and the Swift REPL talk.

1446
00:53:55,426 --> 00:53:58,166 A:middle
And we'll go into much more
detail about how the REPL works.

1447
00:53:58,736 --> 00:54:02,786 A:middle
In summary, we think Playgrounds
are a great way to play

1448

1449
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1450
00:53:58,736 --> 00:54:02,786 A:middle
In summary, we think Playgrounds
are a great way to play

1451
00:54:02,786 --> 00:54:05,346 A:middle
with Swift, with Cocoa
and with Cocoa Touch.

1452
00:54:05,846 --> 00:54:07,906 A:middle
We think you can use them
for things like learning,

1453
00:54:07,986 --> 00:54:11,336 A:middle
exploration and visualization
and frankly probably tons

1454
00:54:11,336 --> 00:54:12,906 A:middle
of things which we haven't
even thought of yet.

1455
00:54:13,716 --> 00:54:16,316 A:middle
The XCPlayground
framework provides APIs

1456
00:54:16,316 --> 00:54:18,376 A:middle
for using your Playgrounds
for more advanced things.

1457
00:54:18,446 --> 00:54:20,906 A:middle
So you can do things like
manually capture values

1458
00:54:20,906 --> 00:54:22,546 A:middle
with the XCPCaptureValue API.

1459
00:54:23,406 --> 00:54:26,696 A:middle
You can show live views in the
timeline by calling XCPShowView.

1460
00:54:27,186 --> 00:54:29,046 A:middle
And then you can
also extend execution

1461
00:54:29,046 --> 00:54:32,206 A:middle
for asynchronous operations
with the XCPSetExecutionShould

1462
00:54:32,206 --> 00:54:33,656 A:middle
ContinueIndefinitely function.

1463
00:54:34,656 --> 00:54:36,616 A:middle
Finally, we'd really like to
just encourage you to go out

1464
00:54:36,616 --> 00:54:37,576 A:middle
and give Playgrounds a try.

1465
00:54:37,576 --> 00:54:39,516 A:middle
I think, you know,
they're really approachable

1466
00:54:39,756 --> 00:54:41,026 A:middle
and if you just sit
down with them

1467
00:54:41,026 --> 00:54:42,796 A:middle
for a little bit you'll
find a number of great ways

1468
00:54:42,796 --> 00:54:44,736 A:middle
to integrate them into
your development process.

1469
00:54:46,066 --> 00:54:48,586 A:middle
For more information, you can
contact our Developer Tools

1470
00:54:48,586 --> 00:54:49,686 A:middle
Evangelist, Dave DeLong.

1471
00:54:49,686 --> 00:54:51,466 A:middle
We also have some
information about Playgrounds

1472
00:54:51,466 --> 00:54:53,286 A:middle
in the Source Editor
Help for Xcode 6.

1473
00:54:53,356 --> 00:54:55,316 A:middle
You can also ask
questions about Playgrounds

1474
00:54:55,316 --> 00:54:56,896 A:middle
on the Apple Developer Forums.

1475
00:54:57,526 --> 00:55:01,146 A:middle
We have several related
sessions about Swift this week.

1476

1477
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1478
00:54:57,526 --> 00:55:01,146 A:middle
We have several related
sessions about Swift this week.

1479
00:55:01,146 --> 00:55:04,846 A:middle
So there was an Introduction
to Swift session yesterday,

1480
00:55:04,916 --> 00:55:06,016 A:middle
which you can catch
on the video.

1481
00:55:06,016 --> 00:55:08,906 A:middle
We also have an Intermediate
Swift session later

1482
00:55:08,906 --> 00:55:09,626 A:middle
this afternoon.

1483
00:55:10,156 --> 00:55:12,946 A:middle
There's also an Advanced
Swift session tomorrow

1484
00:55:12,946 --> 00:55:13,806 A:middle
which you'll be able to see.

1485
00:55:14,796 --> 00:55:15,896 A:middle
We had an Integrating Swift

1486
00:55:15,896 --> 00:55:18,716 A:middle
with Objective-C session
earlier this morning

1487
00:55:18,716 --> 00:55:19,726 A:middle
which you can catch on video.

1488
00:55:20,046 --> 00:55:22,756 A:middle
And we also have a
Swift Interoperability

1489
00:55:22,756 --> 00:55:24,576 A:middle
in Depth session
later this afternoon.

1490
00:55:25,026 --> 00:55:27,176 A:middle
Finally, if you'd like to learn
more about the Swift REPL,

1491
00:55:27,176 --> 00:55:28,876 A:middle
you can go to the
Introduction to LLDB

1492
00:55:28,876 --> 00:55:30,016 A:middle
and the Swift REPL session.

1493
00:55:30,246 --> 00:55:31,236 A:middle
Thank you all for coming

1494
00:55:31,236 --> 00:55:33,266 A:middle
and I hope you have a
great week here at WWDC.

1495
