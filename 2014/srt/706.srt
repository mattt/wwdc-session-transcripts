X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:11,456 --> 00:00:12,976 A:middle
>> Hello and good afternoon.

2
00:00:13,516 --> 00:00:18,886 A:middle
[ Applause ]

3
00:00:19,386 --> 00:00:22,256 A:middle
Welcome to our session on
What's New in Core Location.

4
00:00:22,836 --> 00:00:24,696 A:middle
My name is Stephen
Rhee and I work

5
00:00:24,696 --> 00:00:25,936 A:middle
on the Core Location framework.

6
00:00:26,686 --> 00:00:32,806 A:middle
So Core Location is available
on both iOS and OS X but today,

7
00:00:32,966 --> 00:00:34,296 A:middle
the new features that
we're going to be talking

8
00:00:34,296 --> 00:00:36,536 A:middle
about today are specifically
for iOS.

9
00:00:37,586 --> 00:00:40,226 A:middle
Now some of you may be
new to Core Location

10
00:00:40,626 --> 00:00:41,966 A:middle
or even iOS, in general.

11
00:00:43,056 --> 00:00:44,336 A:middle
This will not be a review

12
00:00:44,606 --> 00:00:46,466 A:middle
of existing Core
Location functionality.

13
00:00:47,046 --> 00:00:48,656 A:middle
For that, we recommend
that you go

14
00:00:48,656 --> 00:00:53,146 A:middle
to our past WWDC
presentations online or check

15
00:00:53,146 --> 00:00:55,826 A:middle
out our great documentation
also available online.

16
00:00:56,376 --> 00:00:59,056 A:middle
Also, we'll be having a
lab session this Thursday,

17
00:00:59,396 --> 00:01:01,316 A:middle
so I recommend you all
come out and join us there

18

19
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

20
00:00:59,396 --> 00:01:01,316 A:middle
so I recommend you all
come out and join us there

21
00:01:01,316 --> 00:01:04,436 A:middle
with any questions that
you have for us; however,

22
00:01:04,436 --> 00:01:07,336 A:middle
I think that today will
still be equally applicable

23
00:01:07,336 --> 00:01:10,146 A:middle
and interesting to those
of you who are new to iOS

24
00:01:10,146 --> 00:01:12,236 A:middle
and Core Location, to those

25
00:01:12,236 --> 00:01:14,276 A:middle
who are seasoned app
developers familiar

26
00:01:14,276 --> 00:01:16,246 A:middle
with both iOS and Core Location.

27
00:01:17,356 --> 00:01:20,186 A:middle
So what's new in Core
Location and iOS 8?

28
00:01:20,716 --> 00:01:27,826 A:middle
Today we're going to be location
authorization, visit monitoring,

29
00:01:28,686 --> 00:01:32,376 A:middle
and finally what's new is
indoor positioning; however,

30
00:01:32,436 --> 00:01:34,786 A:middle
we won't have time to talk
about that in this session

31
00:01:35,146 --> 00:01:37,176 A:middle
but directly following
this session here

32
00:01:37,176 --> 00:01:39,606 A:middle
in Marina [phonetic],
there'll be a dedicated session

33
00:01:39,606 --> 00:01:40,666 A:middle
to indoor positioning,

34
00:01:40,966 --> 00:01:44,826 A:middle
so I recommend you all
stick around for that.

35
00:01:45,006 --> 00:01:46,776 A:middle
So before we go on,
I'd like to start

36
00:01:46,776 --> 00:01:49,836 A:middle
with a brief history
of location on iOS.

37
00:01:51,056 --> 00:01:55,876 A:middle
Location was first introduced
in iOS 2 and then in iOS 3,

38
00:01:55,876 --> 00:01:57,686 A:middle
we added the ability
get heading updates.

39
00:01:58,986 --> 00:02:01,806 A:middle
In iOS 4, with the
introduction of multitasking,

40

41
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

42
00:01:58,986 --> 00:02:01,806 A:middle
In iOS 4, with the
introduction of multitasking,

43
00:02:02,206 --> 00:02:04,286 A:middle
came a whole slew
of new functionality

44
00:02:04,286 --> 00:02:08,076 A:middle
for location including
continuous background location,

45
00:02:08,386 --> 00:02:09,226 A:middle
which allows your app

46
00:02:09,946 --> 00:02:12,856 A:middle
to get continuous location
updates while in the background,

47
00:02:13,496 --> 00:02:16,076 A:middle
and region monitoring,
also known as geofencing,

48
00:02:16,406 --> 00:02:18,856 A:middle
which allows your app to
be launched and notified

49
00:02:19,326 --> 00:02:22,126 A:middle
when the user enters or
exits a predefined region,

50
00:02:22,816 --> 00:02:25,716 A:middle
to significant location changes,
which also allows your app

51
00:02:25,716 --> 00:02:27,066 A:middle
to be launched and notified

52
00:02:27,376 --> 00:02:29,916 A:middle
when the user's location
has changed significantly.

53
00:02:31,416 --> 00:02:34,776 A:middle
In iOS 5, we introduced
new APIs for geocoding,

54
00:02:35,096 --> 00:02:36,356 A:middle
both forward and reverse.

55
00:02:37,066 --> 00:02:39,636 A:middle
This allows you to take a
position that is a latitude

56
00:02:39,636 --> 00:02:42,176 A:middle
and longitude and
convert it to an address

57
00:02:42,176 --> 00:02:43,776 A:middle
or place mark and vice versa.

58
00:02:44,436 --> 00:02:48,436 A:middle
In iOS 6, we introduced
a power-efficient means

59
00:02:48,436 --> 00:02:49,716 A:middle
of getting location updates,

60
00:02:50,046 --> 00:02:52,216 A:middle
referred to as deferred
location updates,

61
00:02:52,766 --> 00:02:55,216 A:middle
in which locations will be
batched up and delivered

62
00:02:55,216 --> 00:02:56,256 A:middle
to your application

63
00:02:56,746 --> 00:03:00,006 A:middle
at a app-specified time
and/or distance interval.

64

65
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

66
00:02:56,746 --> 00:03:00,006 A:middle
at a app-specified time
and/or distance interval.

67
00:03:00,736 --> 00:03:05,416 A:middle
And just last year in iOS 7, we
introduced iBeacon technology,

68
00:03:05,626 --> 00:03:06,886 A:middle
which has really
been taking off.

69
00:03:07,496 --> 00:03:10,776 A:middle
This allows you to determine
proximity via ranging

70
00:03:10,776 --> 00:03:15,146 A:middle
and region monitoring APIs,
which brings us to iOS 8,

71
00:03:15,146 --> 00:03:16,726 A:middle
which is what we're here
to talk about today.

72
00:03:17,436 --> 00:03:20,266 A:middle
As you can see, location
functionality has been growing

73
00:03:20,366 --> 00:03:22,776 A:middle
in iOS, as have the
number of apps

74
00:03:22,936 --> 00:03:24,306 A:middle
that you guys have
been developing.

75
00:03:25,226 --> 00:03:30,146 A:middle
In fact, there are over 680,000
apps using location on iOS.

76
00:03:31,136 --> 00:03:34,066 A:middle
These are all kinds of apps
ranging from navigation

77
00:03:34,066 --> 00:03:37,936 A:middle
to help users find their
way home, to travel apps,

78
00:03:38,216 --> 00:03:40,956 A:middle
to help users find interesting
things to do around them,

79
00:03:41,986 --> 00:03:43,646 A:middle
to fitness apps to allow users

80
00:03:43,646 --> 00:03:47,426 A:middle
to track their exercise
sessions, and shopping apps

81
00:03:47,586 --> 00:03:50,146 A:middle
to help users find stores
and deals around them,

82
00:03:51,296 --> 00:03:54,476 A:middle
to social apps to allow users
to interact with their friends,

83
00:03:55,286 --> 00:03:58,376 A:middle
and even gaming apps to
allow interesting uses

84
00:03:58,486 --> 00:03:59,376 A:middle
of their location.

85
00:03:59,476 --> 00:04:05,226 A:middle
So what does location look
like on the device today?

86

87
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

88
00:03:59,476 --> 00:04:05,226 A:middle
So what does location look
like on the device today?

89
00:04:05,226 --> 00:04:09,086 A:middle
There's a visual
indication of location

90
00:04:09,086 --> 00:04:11,876 A:middle
in use via the status
bar location arrow icon.

91
00:04:12,796 --> 00:04:15,786 A:middle
This can be solid, as we see
here in the example of maps,

92
00:04:16,016 --> 00:04:17,966 A:middle
which is displaying the
user's current location.

93
00:04:18,716 --> 00:04:20,986 A:middle
Generally, the solid arrow
indicates that location

94
00:04:21,166 --> 00:04:24,176 A:middle
or ranging, or significant
location changes is in use.

95
00:04:25,146 --> 00:04:31,236 A:middle
Here, even on the home screen,

96
00:04:31,546 --> 00:04:33,626 A:middle
if there's an application
using location

97
00:04:33,626 --> 00:04:36,036 A:middle
or significant location
changes in the background,

98
00:04:36,466 --> 00:04:37,966 A:middle
the solid arrow will remain lit.

99
00:04:38,876 --> 00:04:41,416 A:middle
In addition to the solid arrow,
we have the hollow arrow,

100
00:04:41,736 --> 00:04:44,306 A:middle
which indicates that
region monitoring is in use.

101
00:04:44,736 --> 00:04:47,206 A:middle
Here, we see a traditional
example of region monitoring,

102
00:04:47,206 --> 00:04:49,906 A:middle
the Reminders app, which
uses region monitoring

103
00:04:49,906 --> 00:04:52,786 A:middle
to deliver reminders
when the user has entered

104
00:04:52,786 --> 00:04:54,676 A:middle
or exited a pre-defined
location.

105
00:04:55,236 --> 00:04:58,306 A:middle
And again on the home screen,

106
00:04:58,586 --> 00:05:00,436 A:middle
if there are still apps
using region monitoring

107

108
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

109
00:04:58,586 --> 00:05:00,436 A:middle
if there are still apps
using region monitoring

110
00:05:00,436 --> 00:05:02,716 A:middle
in the background, the
hollow arrow will remain

111
00:05:02,716 --> 00:05:03,996 A:middle
in the status bar indicating

112
00:05:03,996 --> 00:05:05,716 A:middle
that region monitoring
is still in use.

113
00:05:06,266 --> 00:05:10,866 A:middle
Next, the user can control
and get a finer picture

114
00:05:10,866 --> 00:05:13,906 A:middle
of location usage via the
Location Services settings.

115
00:05:14,426 --> 00:05:18,216 A:middle
This is the Settings app under
Privacy, Location Services.

116
00:05:19,156 --> 00:05:23,136 A:middle
At the top we provide global
control of location services.

117
00:05:23,776 --> 00:05:27,336 A:middle
And down below, we provide
individual per app control

118
00:05:27,336 --> 00:05:28,266 A:middle
of location.

119
00:05:29,456 --> 00:05:32,366 A:middle
In addition, per app,
we provide an indication

120
00:05:32,366 --> 00:05:34,316 A:middle
of location usage by that app.

121
00:05:34,846 --> 00:05:37,796 A:middle
This can be indicated by a
solid purple arrow indicating

122
00:05:37,796 --> 00:05:39,526 A:middle
that location has
recently been used,

123
00:05:40,476 --> 00:05:44,056 A:middle
to a solid gray arrow indicating
that location has been used

124
00:05:44,216 --> 00:05:49,086 A:middle
within the last 24 hours, or a
hollow purple arrow indicating

125
00:05:49,086 --> 00:05:51,826 A:middle
that region monitoring
is in use by the app.

126
00:05:53,656 --> 00:05:55,846 A:middle
So what does authorization
look like today?

127
00:05:56,726 --> 00:05:58,646 A:middle
Authorization is
a single request

128
00:05:58,916 --> 00:06:01,666 A:middle
that is prompted
implicitly on first usage

129

130
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

131
00:05:58,916 --> 00:06:01,666 A:middle
that is prompted
implicitly on first usage

132
00:06:01,666 --> 00:06:02,816 A:middle
of location by your app.

133
00:06:03,526 --> 00:06:06,596 A:middle
This is for all location
functionality including location

134
00:06:06,596 --> 00:06:09,266 A:middle
directly in the app,
location from the background,

135
00:06:09,876 --> 00:06:11,806 A:middle
location use via
region monitoring,

136
00:06:12,176 --> 00:06:13,786 A:middle
and significant location
changes.

137
00:06:14,336 --> 00:06:18,656 A:middle
The text is also
customizable by the app.

138
00:06:19,146 --> 00:06:22,266 A:middle
Here we see a camera would like
to use your current location

139
00:06:22,446 --> 00:06:24,776 A:middle
with a description of
why camera uses location.

140
00:06:25,866 --> 00:06:27,536 A:middle
When location was
first introduced,

141
00:06:28,116 --> 00:06:30,586 A:middle
the request for the user's
current location was pretty

142
00:06:30,586 --> 00:06:34,046 A:middle
clear; however, with the
advent of multitasking

143
00:06:34,456 --> 00:06:37,346 A:middle
and all the powerful location
functionality that we talked

144
00:06:37,346 --> 00:06:40,436 A:middle
about was introduced allowing
you to create very cool

145
00:06:40,436 --> 00:06:44,066 A:middle
and powerful apps, we felt that
the user could use more clarity

146
00:06:44,116 --> 00:06:46,826 A:middle
of when location is being
used and more importantly,

147
00:06:46,896 --> 00:06:48,826 A:middle
we felt that your apps
could benefit too.

148
00:06:49,806 --> 00:06:53,536 A:middle
We don't want the user to
disable location, overall,

149
00:06:53,536 --> 00:06:56,006 A:middle
either globally or for
your app, disabling some

150
00:06:56,006 --> 00:06:59,136 A:middle
of the cool functionality that
you've developed using location.

151
00:06:59,726 --> 00:07:02,486 A:middle
We want them to understand
exactly how location is being

152

153
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

154
00:06:59,726 --> 00:07:02,486 A:middle
We want them to understand
exactly how location is being

155
00:07:02,486 --> 00:07:04,786 A:middle
used, so ultimately
they can make better,

156
00:07:05,096 --> 00:07:07,676 A:middle
more informed decisions and
we believe that this is better

157
00:07:07,676 --> 00:07:09,706 A:middle
for battery and better
for privacy.

158
00:07:10,286 --> 00:07:13,406 A:middle
So to that end, we're
changing the way

159
00:07:13,696 --> 00:07:17,726 A:middle
that location services
works in iOS 8.

160
00:07:17,986 --> 00:07:20,766 A:middle
We started by looking at
first at all the functionality

161
00:07:20,766 --> 00:07:23,826 A:middle
that location services
provides and categorized it

162
00:07:23,906 --> 00:07:27,396 A:middle
into continuous updates,
which includes location,

163
00:07:27,826 --> 00:07:29,936 A:middle
background location,
and ranging,

164
00:07:30,806 --> 00:07:33,326 A:middle
and also location
monitoring or events,

165
00:07:33,736 --> 00:07:36,926 A:middle
which may launch the application
to deliver callbacks.

166
00:07:37,246 --> 00:07:38,736 A:middle
This includes region monitoring

167
00:07:38,836 --> 00:07:40,456 A:middle
and significant location
changes.

168
00:07:41,036 --> 00:07:44,696 A:middle
And we broke it down into
two authorization types,

169
00:07:45,116 --> 00:07:46,566 A:middle
the first being Always.

170
00:07:47,046 --> 00:07:50,786 A:middle
This is just like what location
authorization provided in iOS 7.

171
00:07:51,126 --> 00:07:53,556 A:middle
It provided both access
to continuous updates

172
00:07:53,956 --> 00:07:55,836 A:middle
and location monitoring even

173
00:07:55,836 --> 00:07:57,366 A:middle
when the app is in
the background.

174
00:07:58,716 --> 00:08:01,676 A:middle
But then we also introduced
WhenInUse, which is only

175

176
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

177
00:07:58,716 --> 00:08:01,676 A:middle
But then we also introduced
WhenInUse, which is only

178
00:08:01,676 --> 00:08:04,716 A:middle
for continuous updates
and it's only

179
00:08:04,716 --> 00:08:07,496 A:middle
when the app is clearly
in use by the user.

180
00:08:07,496 --> 00:08:11,486 A:middle
So let's take a closer look
at Background Location.

181
00:08:11,936 --> 00:08:15,216 A:middle
Starting with continuous
background location,

182
00:08:15,636 --> 00:08:16,896 A:middle
which is specified statically

183
00:08:16,896 --> 00:08:20,346 A:middle
by the app either via the
Capabilities tab in Xcode

184
00:08:20,686 --> 00:08:22,466 A:middle
for background modes,
location updates

185
00:08:22,916 --> 00:08:26,286 A:middle
or via your app's information
property list via the UI

186
00:08:26,286 --> 00:08:29,186 A:middle
Background Mode key
specifying a value of location.

187
00:08:30,096 --> 00:08:33,296 A:middle
This, as before, must be started
in the foreground, otherwise

188
00:08:33,466 --> 00:08:35,936 A:middle
or if your app is using
significant location changes.

189
00:08:36,716 --> 00:08:39,986 A:middle
And this is available with
WhenInUse location authorization

190
00:08:40,426 --> 00:08:44,035 A:middle
because now in iOS 8,
we'll provide an indication

191
00:08:44,035 --> 00:08:46,966 A:middle
in the status bar that
your app is using location.

192
00:08:48,436 --> 00:08:50,776 A:middle
This is just like the
status bar for navigation,

193
00:08:51,106 --> 00:08:52,876 A:middle
when navigation is
running in the background.

194
00:08:53,576 --> 00:08:56,736 A:middle
Here, we'll indicate which
app is using location and,

195
00:08:56,736 --> 00:08:58,496 A:middle
if there are multiple,
we'll indicate the number

196
00:08:58,496 --> 00:09:01,926 A:middle
of apps using location, and the
user can tap on the status bar

197

198
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

199
00:08:58,496 --> 00:09:01,926 A:middle
of apps using location, and the
user can tap on the status bar

200
00:09:01,926 --> 00:09:04,876 A:middle
to quickly return to the most
recent app using location

201
00:09:04,876 --> 00:09:07,196 A:middle
in the background.

202
00:09:07,196 --> 00:09:10,036 A:middle
One note is that if the
application is authorized

203
00:09:10,036 --> 00:09:14,226 A:middle
for Always location access, the
status bar will not be presented

204
00:09:14,626 --> 00:09:17,186 A:middle
because the user has
granted access for that app

205
00:09:17,606 --> 00:09:21,496 A:middle
to use location at any time,
which is what is needed in order

206
00:09:21,496 --> 00:09:24,066 A:middle
to access location anytime
from the background.

207
00:09:24,486 --> 00:09:27,256 A:middle
For example, when your app
is running the background due

208
00:09:27,256 --> 00:09:30,966 A:middle
to Background App Refresh or
due to region monitoring or due

209
00:09:30,966 --> 00:09:32,516 A:middle
to significant location changes,

210
00:09:33,016 --> 00:09:35,586 A:middle
this requires explicitly
Always authorization.

211
00:09:37,396 --> 00:09:38,996 A:middle
So on the topic of multitasking,

212
00:09:39,286 --> 00:09:41,506 A:middle
I'd like to clarify
location behavior.

213
00:09:42,336 --> 00:09:44,636 A:middle
When the user quits an
app from the App switcher,

214
00:09:45,006 --> 00:09:47,666 A:middle
this will immediately stop
Continuous Background Location;

215
00:09:48,316 --> 00:09:51,176 A:middle
however, this will not
stop location monitoring

216
00:09:51,276 --> 00:09:54,276 A:middle
such as significant location
changes or region monitoring.

217
00:09:54,776 --> 00:09:57,976 A:middle
This latter point is the
behavior as of iOS 7.1.

218
00:09:59,176 --> 00:10:03,786 A:middle
And now in iOS 8, disabling
Background App Refresh will no

219

220
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

221
00:09:59,176 --> 00:10:03,786 A:middle
And now in iOS 8, disabling
Background App Refresh will no

222
00:10:03,786 --> 00:10:07,396 A:middle
longer disable any location
functionality because we believe

223
00:10:07,396 --> 00:10:10,186 A:middle
with the introduction of the new
location authorization types,

224
00:10:10,536 --> 00:10:13,666 A:middle
the user is now in complete
control of location usage.

225
00:10:14,366 --> 00:10:16,106 A:middle
So how does this all
look like to the user?

226
00:10:16,736 --> 00:10:22,196 A:middle
Apps must now explicitly request
authorization via new APIs.

227
00:10:23,006 --> 00:10:24,366 A:middle
We'll get into the exact details

228
00:10:24,366 --> 00:10:25,946 A:middle
of what this looks
like in just a bit.

229
00:10:26,696 --> 00:10:28,606 A:middle
Apps can request
for either WhenInUse

230
00:10:29,126 --> 00:10:30,686 A:middle
or for Always authorization.

231
00:10:31,806 --> 00:10:32,916 A:middle
Here, we see an example

232
00:10:32,916 --> 00:10:35,396 A:middle
of the authorization dialogue
presented to the user.

233
00:10:35,856 --> 00:10:37,886 A:middle
For compass, it says
Allow Compass

234
00:10:38,276 --> 00:10:41,126 A:middle
to Access Your Location
While You Use The App.

235
00:10:41,126 --> 00:10:43,126 A:middle
And below, we see
that customizable text

236
00:10:43,126 --> 00:10:45,716 A:middle
that your app can provide
indicating why it is

237
00:10:45,766 --> 00:10:47,126 A:middle
that your app uses location.

238
00:10:47,886 --> 00:10:50,696 A:middle
This text is now mandatory
and no longer optional.

239
00:10:52,016 --> 00:10:55,256 A:middle
This dialogue will be
presented only once to the user

240
00:10:55,966 --> 00:11:00,896 A:middle
for either request to location
access for WhenInUse or Always.

241

242
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

243
00:10:55,966 --> 00:11:00,896 A:middle
for either request to location
access for WhenInUse or Always.

244
00:11:00,896 --> 00:11:04,276 A:middle
And as we said, that
text is customizable

245
00:11:04,276 --> 00:11:05,896 A:middle
and is mandatory to provide.

246
00:11:07,016 --> 00:11:08,146 A:middle
Quickly, we see an example

247
00:11:08,146 --> 00:11:09,956 A:middle
of the Always authorization
dialogue,

248
00:11:10,026 --> 00:11:13,716 A:middle
where it states Allow Weather
To Access Your Location Even

249
00:11:13,716 --> 00:11:15,046 A:middle
When You Are Not Using The App.

250
00:11:15,566 --> 00:11:18,716 A:middle
Again, the text description
below describing why it is

251
00:11:18,946 --> 00:11:21,076 A:middle
that the app would like to
use the user's location.

252
00:11:23,056 --> 00:11:25,256 A:middle
So as we see, this
Always authorization,

253
00:11:25,256 --> 00:11:28,076 A:middle
which is what users got in
iOS 7, is pretty powerful.

254
00:11:28,556 --> 00:11:31,616 A:middle
Because of this, if Always
authorization was granted

255
00:11:31,616 --> 00:11:33,746 A:middle
by the user, the
user will be asked

256
00:11:33,826 --> 00:11:37,336 A:middle
to confirm a few
days later and only

257
00:11:37,336 --> 00:11:39,706 A:middle
if their Always authorization
was exercised,

258
00:11:40,136 --> 00:11:43,436 A:middle
that is the app did use location
in the background perhaps due

259
00:11:43,436 --> 00:11:45,956 A:middle
to region monitoring or
significant location changes.

260
00:11:46,666 --> 00:11:49,216 A:middle
Here we see an example of
what that dialogue looks like,

261
00:11:49,596 --> 00:11:51,906 A:middle
where it says Weather Has
Been Using Your Location

262
00:11:51,906 --> 00:11:52,656 A:middle
In The Background.

263
00:11:52,656 --> 00:11:54,956 A:middle
Do You Want To Continue
Allowing This?

264
00:11:55,536 --> 00:11:58,326 A:middle
And again, we see that
the text is customizable.

265
00:11:58,326 --> 00:12:01,616 A:middle
It's the same usage description
provided in the original request

266

267
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

268
00:11:58,326 --> 00:12:01,616 A:middle
It's the same usage description
provided in the original request

269
00:12:01,616 --> 00:12:02,966 A:middle
for location authorization.

270
00:12:03,516 --> 00:12:06,256 A:middle
So now let's take a look

271
00:12:06,256 --> 00:12:08,196 A:middle
at the new Location
Services settings pane.

272
00:12:08,926 --> 00:12:13,176 A:middle
Apps can support WhenInUse
and/or Always authorization

273
00:12:13,176 --> 00:12:16,696 A:middle
types and this is specified
statically by the app.

274
00:12:17,126 --> 00:12:17,986 A:middle
Again, we'll see the details

275
00:12:17,986 --> 00:12:20,866 A:middle
of exactly how you can
do this in just a bit.

276
00:12:21,586 --> 00:12:23,826 A:middle
And now in the Settings
pane for each app next

277
00:12:23,826 --> 00:12:25,466 A:middle
to the Location Usage
indication,

278
00:12:25,466 --> 00:12:28,196 A:middle
it will have the text
describing exactly what

279
00:12:28,196 --> 00:12:29,636 A:middle
that app is authorized for.

280
00:12:30,896 --> 00:12:33,056 A:middle
In addition, the user
can tap on the app

281
00:12:33,816 --> 00:12:36,546 A:middle
to see what authorization and
status types are supported

282
00:12:36,546 --> 00:12:39,586 A:middle
by that app with a text
description below indicating,

283
00:12:39,586 --> 00:12:41,496 A:middle
describing that current
selection.

284
00:12:42,266 --> 00:12:45,146 A:middle
Here we see an example
for WhenInUse app.

285
00:12:46,106 --> 00:12:49,456 A:middle
And quickly, another example
for an app that supports Always.

286
00:12:50,386 --> 00:12:55,246 A:middle
Note that in this pane, we don't
show the app description of why

287
00:12:55,246 --> 00:12:57,866 A:middle
that app would like
to use the location

288
00:12:58,376 --> 00:13:01,476 A:middle
in the current [inaudible];
however, you, as developers,

289

290
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

291
00:12:58,376 --> 00:13:01,476 A:middle
in the current [inaudible];
however, you, as developers,

292
00:13:01,476 --> 00:13:03,736 A:middle
should prepare for
this because we believe

293
00:13:03,736 --> 00:13:06,156 A:middle
that this may present
another great opportunity

294
00:13:06,156 --> 00:13:09,426 A:middle
to inform the user why it is
that your app uses location.

295
00:13:12,236 --> 00:13:17,046 A:middle
Now also new in iOS 8, when the
user goes to the Settings apps

296
00:13:17,376 --> 00:13:18,696 A:middle
for your apps specifically,

297
00:13:19,236 --> 00:13:21,046 A:middle
a link to Privacy
will be included,

298
00:13:21,046 --> 00:13:22,426 A:middle
which also includes a link

299
00:13:22,426 --> 00:13:24,656 A:middle
to Location Services,
if applicable.

300
00:13:25,446 --> 00:13:27,256 A:middle
Here we see an example,
Fitness app.

301
00:13:27,756 --> 00:13:29,856 A:middle
The app Settings pane,
we see the Privacy.

302
00:13:29,856 --> 00:13:31,916 A:middle
The user can tap on that and get

303
00:13:31,916 --> 00:13:34,396 A:middle
to the Location Services
pane specifically

304
00:13:34,466 --> 00:13:36,106 A:middle
for its app right there

305
00:13:36,106 --> 00:13:39,046 A:middle
and change the authorization
status immediately.

306
00:13:39,686 --> 00:13:41,926 A:middle
Now this is going to be
even more powerful for you

307
00:13:41,926 --> 00:13:46,436 A:middle
as app developers because now in
iOS 8, your app has the ability

308
00:13:46,436 --> 00:13:48,376 A:middle
to programmatically
jump directly

309
00:13:48,376 --> 00:13:49,606 A:middle
to your app Settings pane.

310
00:13:50,376 --> 00:13:52,796 A:middle
This is done with the
existing openURL method

311
00:13:52,796 --> 00:13:56,846 A:middle
on UIApplication providing
the new constant in iOS 8,

312
00:13:57,096 --> 00:14:00,136 A:middle
UIApplicationOpenSettingsURL
String.

313

314
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

315
00:13:57,096 --> 00:14:00,136 A:middle
UIApplicationOpenSettingsURL
String.

316
00:14:01,176 --> 00:14:04,486 A:middle
We'll see exactly how useful
this can be later in an example.

317
00:14:05,526 --> 00:14:07,326 A:middle
So you all are probably
wondering, that's looks great

318
00:14:07,326 --> 00:14:10,816 A:middle
and well, so what is it that
I as a developer have to do?

319
00:14:11,226 --> 00:14:13,456 A:middle
Well, starting with the
actual interface changes,

320
00:14:13,836 --> 00:14:16,156 A:middle
there are only three changes
that you need to be aware of,

321
00:14:17,476 --> 00:14:20,146 A:middle
the relevant Info.plist
keys that we talked about,

322
00:14:20,616 --> 00:14:22,666 A:middle
the authorization
status enum values,

323
00:14:23,176 --> 00:14:26,036 A:middle
and finally the new
authorization request APIs.

324
00:14:27,126 --> 00:14:28,876 A:middle
So let's dive right
in, first starting

325
00:14:28,876 --> 00:14:30,216 A:middle
with the Info.plist keys.

326
00:14:31,446 --> 00:14:34,446 A:middle
Previously we had the
NSLocationUsageDescription,

327
00:14:34,766 --> 00:14:37,286 A:middle
which was optional
and allowed you

328
00:14:37,286 --> 00:14:39,746 A:middle
to customize the text
displayed to the user why it is

329
00:14:39,746 --> 00:14:41,126 A:middle
that your app uses location.

330
00:14:41,806 --> 00:14:44,826 A:middle
This is now deprecated and
replaced by two new keys,

331
00:14:45,306 --> 00:14:47,526 A:middle
NSLocationAlways
UsageDescription

332
00:14:47,896 --> 00:14:50,516 A:middle
and NSLocationWhenInUse-
UsageDescription.

333
00:14:51,056 --> 00:14:53,476 A:middle
Note again that's
specifying one or both

334
00:14:53,476 --> 00:14:54,976 A:middle
of these is now mandatory,

335
00:14:55,266 --> 00:14:57,446 A:middle
depending on which
authorization type it is

336
00:14:57,526 --> 00:14:59,156 A:middle
that your application supports.

337

338
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

339
00:15:00,116 --> 00:15:02,136 A:middle
The value is the
string describing

340
00:15:02,136 --> 00:15:05,726 A:middle
to the user exactly why it is
that your app uses location.

341
00:15:06,446 --> 00:15:07,886 A:middle
We believe that this
is really going

342
00:15:07,886 --> 00:15:11,476 A:middle
to help users understand how it
is that your app uses location.

343
00:15:13,816 --> 00:15:17,186 A:middle
Moving on to the
CLAuthorizationStatus enum.

344
00:15:17,946 --> 00:15:19,596 A:middle
Previously there were
a number of values,

345
00:15:19,596 --> 00:15:21,996 A:middle
one of which was
kCLAuthorization

346
00:15:21,996 --> 00:15:23,066 A:middle
StatusAuthorized.

347
00:15:23,856 --> 00:15:27,756 A:middle
Now, this is deprecated and
replaced by two new values,

348
00:15:28,546 --> 00:15:31,336 A:middle
AuthorizedAlways and
AuthorizedWhenInUse,

349
00:15:31,926 --> 00:15:35,176 A:middle
depending on which authorization
was requested by your app

350
00:15:35,246 --> 00:15:37,816 A:middle
and which authorization
was granted by the user.

351
00:15:38,666 --> 00:15:42,326 A:middle
Accessing authorization status
for your app has not changed.

352
00:15:42,696 --> 00:15:45,696 A:middle
This can be done either
via the class method

353
00:15:46,016 --> 00:15:48,546 A:middle
on CLLocationManager
AuthorizationStatus

354
00:15:49,146 --> 00:15:52,566 A:middle
or via the delegate callback
via ChangeAuthorizationStatus

355
00:15:53,116 --> 00:15:55,906 A:middle
on the CLManager
delegate; however,

356
00:15:55,906 --> 00:16:00,026 A:middle
requesting authorization
has changed, which brings us

357

358
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

359
00:15:55,906 --> 00:16:00,026 A:middle
requesting authorization
has changed, which brings us

360
00:16:00,086 --> 00:16:03,826 A:middle
to the third interface change,
Request Authorization APIs.

361
00:16:04,946 --> 00:16:08,186 A:middle
Requesting authorization
is now explicit either

362
00:16:08,186 --> 00:16:11,086 A:middle
for Always or for WhenInUse.

363
00:16:12,186 --> 00:16:15,906 A:middle
Your app can make calls to
these requests APIs repeatedly;

364
00:16:16,196 --> 00:16:17,786 A:middle
however, it will only prompt

365
00:16:17,786 --> 00:16:20,856 A:middle
to the user the first
time and not per type.

366
00:16:21,406 --> 00:16:23,516 A:middle
So if you support both
authorization types,

367
00:16:23,516 --> 00:16:25,736 A:middle
you'll need to carefully
consider which you want

368
00:16:25,736 --> 00:16:26,766 A:middle
to request in your app.

369
00:16:27,556 --> 00:16:29,796 A:middle
We'll go further on this in
an example in just a bit.

370
00:16:30,446 --> 00:16:33,816 A:middle
So putting it all together,
there are three simple steps

371
00:16:34,106 --> 00:16:36,846 A:middle
to adopting the new
authorization in iOS 8.

372
00:16:37,826 --> 00:16:40,596 A:middle
First, you want to decide
which authorization it is

373
00:16:40,596 --> 00:16:44,016 A:middle
that your app supports by asking
yourself these two questions.

374
00:16:45,436 --> 00:16:49,346 A:middle
What location functionality
does your app use and is

375
00:16:49,346 --> 00:16:50,816 A:middle
that a mandatory functionality

376
00:16:50,816 --> 00:16:53,616 A:middle
or a nice-to-have
functionality for your app.

377
00:16:54,006 --> 00:16:55,516 A:middle
Second, you want to explain it

378
00:16:55,516 --> 00:16:58,326 A:middle
to your user exactly how
your app uses location.

379
00:16:59,606 --> 00:17:01,756 A:middle
And third, you want
to make the right call

380

381
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

382
00:16:59,606 --> 00:17:01,756 A:middle
And third, you want
to make the right call

383
00:17:01,756 --> 00:17:06,955 A:middle
to request authorization and
you want to do it when needed.

384
00:17:07,806 --> 00:17:11,455 A:middle
For example, when your app first
launches, don't make the request

385
00:17:11,576 --> 00:17:15,836 A:middle
to access location because the
user won't understand why it is

386
00:17:16,066 --> 00:17:18,276 A:middle
that your app is requesting
location authorization

387
00:17:18,526 --> 00:17:20,896 A:middle
and they may be inclined
to just deny that.

388
00:17:21,846 --> 00:17:24,465 A:middle
Instead, do it in response
to explicit user action

389
00:17:24,886 --> 00:17:27,086 A:middle
so that they have
context and in addition

390
00:17:27,086 --> 00:17:28,496 A:middle
to the usage description string

391
00:17:28,496 --> 00:17:30,876 A:middle
that you provide why
your app uses location,

392
00:17:30,876 --> 00:17:33,626 A:middle
the user can then make an
informed choice of whether

393
00:17:33,626 --> 00:17:36,006 A:middle
to allow or disallow
location access to the app.

394
00:17:36,946 --> 00:17:38,216 A:middle
Let's go through some examples.

395
00:17:39,216 --> 00:17:42,116 A:middle
First, let's say you've
developed this great fitness app

396
00:17:42,506 --> 00:17:43,836 A:middle
that tracks the user's runs.

397
00:17:44,846 --> 00:17:47,246 A:middle
You want to start by first
determining how it is

398
00:17:47,246 --> 00:17:48,426 A:middle
that location is used.

399
00:17:49,026 --> 00:17:51,316 A:middle
Obviously, this app is
going to use location.

400
00:17:51,316 --> 00:17:55,056 A:middle
In addition, it's going to use
background location in order

401
00:17:55,056 --> 00:17:57,556 A:middle
that the user may home-out
of your app and switch

402
00:17:57,556 --> 00:17:59,976 A:middle
to the music app and play
their favorite tunes.

403

404
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

405
00:18:04,056 --> 00:18:07,906 A:middle
So background location
can be enabled via Xcode

406
00:18:07,936 --> 00:18:12,306 A:middle
in the Capabilities tab, making
sure that background modes is on

407
00:18:12,306 --> 00:18:15,096 A:middle
and that location
updates is selected.

408
00:18:15,706 --> 00:18:18,826 A:middle
Alternatively, you can edit
your information property list

409
00:18:18,826 --> 00:18:21,946 A:middle
for you app specifying
the UIBackgroundModes key

410
00:18:22,116 --> 00:18:23,426 A:middle
with the value of location.

411
00:18:23,886 --> 00:18:28,436 A:middle
Second step is to add
the appropriate key

412
00:18:28,436 --> 00:18:30,106 A:middle
to your app's information
property list.

413
00:18:30,666 --> 00:18:34,016 A:middle
Here in Xcode, we'll go to the
Information Property List Editor

414
00:18:34,776 --> 00:18:36,096 A:middle
and add a new key

415
00:18:36,096 --> 00:18:39,746 A:middle
for NSLocationWhenInUseUsage
Description providing the

416
00:18:39,746 --> 00:18:40,786 A:middle
description to the user

417
00:18:41,076 --> 00:18:43,716 A:middle
that your location is
used to track your run.

418
00:18:44,616 --> 00:18:49,706 A:middle
And third, the final step is to
make the appropriate API call

419
00:18:49,706 --> 00:18:52,886 A:middle
to request authorization
and do it when needed.

420
00:18:53,186 --> 00:18:55,596 A:middle
So here, after creating
your locationManager setting

421
00:18:55,596 --> 00:18:57,646 A:middle
to delegate and right
before making the call

422
00:18:57,646 --> 00:19:01,206 A:middle
to startUpdatingLocation, all
you need to do is make the call

423

424
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

425
00:18:57,646 --> 00:19:01,206 A:middle
to startUpdatingLocation, all
you need to do is make the call

426
00:19:01,206 --> 00:19:03,226 A:middle
to
requestWhenInUseAuthorization.

427
00:19:03,756 --> 00:19:04,626 A:middle
Pretty simple, right?

428
00:19:05,826 --> 00:19:07,316 A:middle
Let's move on to
another example.

429
00:19:07,856 --> 00:19:10,716 A:middle
Let's say you've created this
great WelcomeHome app that's

430
00:19:10,716 --> 00:19:12,466 A:middle
going to automatically
turn on the lights

431
00:19:12,566 --> 00:19:14,616 A:middle
and maybe even unlock
the front door

432
00:19:14,616 --> 00:19:16,126 A:middle
when the user has
arrived at home.

433
00:19:16,816 --> 00:19:18,156 A:middle
Again, you'll want to start

434
00:19:18,156 --> 00:19:21,046 A:middle
by determining how location
is being used by your app.

435
00:19:21,886 --> 00:19:24,646 A:middle
In this case, it's using
region monitoring to detect

436
00:19:24,646 --> 00:19:26,476 A:middle
when the user has
arrived at home.

437
00:19:27,706 --> 00:19:30,206 A:middle
Next, you'll need to add the
appropriate usage description

438
00:19:30,206 --> 00:19:32,826 A:middle
key to your app's
information property list.

439
00:19:33,406 --> 00:19:36,216 A:middle
Again, you'll go to the
information property list editor

440
00:19:36,286 --> 00:19:38,376 A:middle
in Xcode and this time add a key

441
00:19:38,376 --> 00:19:42,186 A:middle
for NSLocationAlways
UsageDescription providing a

442
00:19:42,186 --> 00:19:44,226 A:middle
description to the user
here in this example,

443
00:19:44,476 --> 00:19:47,946 A:middle
here location is used to
determine when you arrive home.

444
00:19:48,956 --> 00:19:51,736 A:middle
And finally, you'll want to
make the appropriate call

445
00:19:51,736 --> 00:19:54,976 A:middle
to request authorization
and again, do it as needed.

446
00:19:55,216 --> 00:19:58,656 A:middle
In this case, right before
the call to start monitoring

447
00:19:58,656 --> 00:20:00,686 A:middle
for region, you'll
want to add the call

448

449
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

450
00:19:58,656 --> 00:20:00,686 A:middle
for region, you'll
want to add the call

451
00:20:00,686 --> 00:20:02,846 A:middle
to requestAlwaysAuthorization.

452
00:20:03,616 --> 00:20:05,086 A:middle
Again, pretty straightforward.

453
00:20:05,086 --> 00:20:08,796 A:middle
How about if your app
actually supports both

454
00:20:08,796 --> 00:20:09,976 A:middle
authorization types.

455
00:20:10,856 --> 00:20:13,956 A:middle
Let's say you've developed this
great app for an amusement park.

456
00:20:14,416 --> 00:20:17,636 A:middle
In the general use case, it'll
show the app's current location

457
00:20:17,716 --> 00:20:18,816 A:middle
in the AmusementPark map

458
00:20:19,476 --> 00:20:21,636 A:middle
but let's say you've
developed this cool feature

459
00:20:22,126 --> 00:20:24,776 A:middle
that will additionally
deliver cool information

460
00:20:24,776 --> 00:20:26,796 A:middle
about nearby attractions
to the user.

461
00:20:27,206 --> 00:20:30,546 A:middle
And in this case, you'll want
to determine exactly how it is

462
00:20:30,546 --> 00:20:32,016 A:middle
that your app is using location.

463
00:20:32,876 --> 00:20:35,086 A:middle
Obviously for the general use
case displaying the user's

464
00:20:35,086 --> 00:20:37,116 A:middle
location on the map,
your using location,

465
00:20:37,616 --> 00:20:39,446 A:middle
but for that cool
feature that tells them

466
00:20:39,446 --> 00:20:41,676 A:middle
about cool attractions
nearby, you're going

467
00:20:41,676 --> 00:20:43,036 A:middle
to be using region monitoring.

468
00:20:44,806 --> 00:20:46,866 A:middle
So again, we follow
the same steps.

469
00:20:47,296 --> 00:20:49,616 A:middle
First, we're going to add the
appropriate usage description

470
00:20:49,616 --> 00:20:53,586 A:middle
keys to the app's information
property list again by going

471
00:20:53,586 --> 00:20:55,556 A:middle
to the property list
editor in Xcode.

472
00:20:56,346 --> 00:20:58,056 A:middle
We'll first start
by adding a key

473
00:20:58,056 --> 00:21:01,596 A:middle
for NSLocationWhenInUse
UsageDescription specifying

474

475
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

476
00:20:58,056 --> 00:21:01,596 A:middle
for NSLocationWhenInUse
UsageDescription specifying

477
00:21:01,596 --> 00:21:04,876 A:middle
that your current location
may be shown on the map.

478
00:21:06,406 --> 00:21:10,046 A:middle
In addition to that, because
your app also supports Always

479
00:21:10,046 --> 00:21:11,836 A:middle
authorization, you'll add a key

480
00:21:11,836 --> 00:21:14,436 A:middle
to NSLocationAlways
UsageDescription,

481
00:21:14,876 --> 00:21:17,166 A:middle
again providing a
description to why it is

482
00:21:17,166 --> 00:21:18,646 A:middle
that your app uses location.

483
00:21:18,976 --> 00:21:22,016 A:middle
Here, this app will use
your location information

484
00:21:22,236 --> 00:21:24,226 A:middle
to identify nearby attractions.

485
00:21:26,006 --> 00:21:28,686 A:middle
So in your app's
information property list,

486
00:21:28,996 --> 00:21:31,666 A:middle
you'll actually have both of
these usage description keys

487
00:21:31,666 --> 00:21:34,646 A:middle
because your app supports both
of these authorization types.

488
00:21:35,436 --> 00:21:38,756 A:middle
And finally, you'll want to make
the corresponding authorization

489
00:21:38,756 --> 00:21:40,006 A:middle
request API calls.

490
00:21:40,436 --> 00:21:42,456 A:middle
Again, you'll want to
do this when needed.

491
00:21:42,846 --> 00:21:44,536 A:middle
For example, in the map view

492
00:21:44,536 --> 00:21:46,126 A:middle
that displays the
AmusementPark map,

493
00:21:46,876 --> 00:21:50,566 A:middle
you'll want to right before
startUpdatingLocation,

494
00:21:50,956 --> 00:21:54,616 A:middle
you'll make the call to
requestWhenInUseAuthorization.

495
00:21:55,736 --> 00:21:59,736 A:middle
And for that power user
use case, still in response

496
00:21:59,796 --> 00:22:04,406 A:middle
to user action, perhaps the
user has now enabled the feature

497

498
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

499
00:21:59,796 --> 00:22:04,406 A:middle
to user action, perhaps the
user has now enabled the feature

500
00:22:04,796 --> 00:22:07,926 A:middle
that enables the automatic
attraction info mode

501
00:22:08,426 --> 00:22:11,846 A:middle
that delivers information
about ride times

502
00:22:12,226 --> 00:22:15,076 A:middle
for the nearby attractions
or store sales

503
00:22:15,346 --> 00:22:18,786 A:middle
or restaurant specials, but
in this case, you may want

504
00:22:18,786 --> 00:22:21,376 A:middle
to check your app's
authorization status first

505
00:22:21,886 --> 00:22:24,286 A:middle
because if it's denied
or when in use,

506
00:22:24,786 --> 00:22:26,666 A:middle
you'll need to tell
the user that they need

507
00:22:26,666 --> 00:22:29,256 A:middle
to authorize your app
for Always authorization.

508
00:22:30,236 --> 00:22:33,706 A:middle
And in this case, you may want
to present an alert indicating

509
00:22:33,706 --> 00:22:36,876 A:middle
that and offer to take them
directly to the Settings app

510
00:22:37,406 --> 00:22:40,056 A:middle
for your app's settings
pane using

511
00:22:40,226 --> 00:22:42,506 A:middle
that mentioned openUrl method

512
00:22:42,776 --> 00:22:44,836 A:middle
with the new
UIApplicationOpenSettings

513
00:22:44,836 --> 00:22:45,556 A:middle
URLString.

514
00:22:46,016 --> 00:22:49,616 A:middle
And then finally, right
before you start to call

515
00:22:49,616 --> 00:22:50,866 A:middle
to start monitoring for region,

516
00:22:51,246 --> 00:22:53,906 A:middle
you'll make the call the
requestAlwaysAuthorization.

517
00:22:54,456 --> 00:22:59,796 A:middle
So some additional
details, what if you want

518
00:22:59,796 --> 00:23:04,966 A:middle
to support both iOS 7
and iOS 8 with your app.

519

520
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

521
00:22:59,796 --> 00:23:04,966 A:middle
to support both iOS 7
and iOS 8 with your app.

522
00:23:05,226 --> 00:23:07,046 A:middle
Well there are three things
that you want to consider,

523
00:23:07,466 --> 00:23:09,356 A:middle
the lineup with the three
interface changes we

524
00:23:09,356 --> 00:23:10,506 A:middle
discussed earlier.

525
00:23:11,046 --> 00:23:12,446 A:middle
First, you'll want to continue

526
00:23:12,446 --> 00:23:15,376 A:middle
to provide the deprecated
NSLocationUsageDescription

527
00:23:15,376 --> 00:23:17,406 A:middle
string if you were
doing so before.

528
00:23:17,766 --> 00:23:20,336 A:middle
In addition, to specify
one or both

529
00:23:20,336 --> 00:23:23,616 A:middle
of the new Always
usage description

530
00:23:23,616 --> 00:23:25,536 A:middle
or WhenInUse usage
description keys.

531
00:23:26,806 --> 00:23:30,226 A:middle
Next, you'll want to guard the
request authorization API call

532
00:23:30,226 --> 00:23:33,356 A:middle
with respondsToSelector so
that your app will still work

533
00:23:33,356 --> 00:23:34,276 A:middle
on iOS 7.

534
00:23:34,996 --> 00:23:37,156 A:middle
Here's a quick example of
exactly how to do that.

535
00:23:37,156 --> 00:23:41,756 A:middle
And third, you'll
want to continue

536
00:23:41,756 --> 00:23:45,926 A:middle
to use the deprecated
kCLAuthorizationStatusAuthorize

537
00:23:45,926 --> 00:23:48,766 A:middle
value in addition to
the new authorize Always

538
00:23:48,766 --> 00:23:50,576 A:middle
and authorize WhenInUse values.

539
00:23:52,796 --> 00:23:55,846 A:middle
So I bet you're wondering,
what about legacy app support,

540
00:23:56,216 --> 00:23:57,626 A:middle
what if you don't
update your app

541
00:23:58,036 --> 00:24:00,946 A:middle
but your user upgrades
his system to iOS 8,

542

543
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

544
00:23:58,036 --> 00:24:00,946 A:middle
but your user upgrades
his system to iOS 8,

545
00:24:01,086 --> 00:24:01,946 A:middle
what's going to happen?

546
00:24:02,556 --> 00:24:04,616 A:middle
Well, your app will
still continue to work

547
00:24:05,436 --> 00:24:08,656 A:middle
but it will use Always
authorization.

548
00:24:09,396 --> 00:24:10,896 A:middle
So you don't want
to rely on this

549
00:24:11,626 --> 00:24:14,276 A:middle
because when the user uses
your app and uses location

550
00:24:14,276 --> 00:24:17,196 A:middle
for the first time, it's going
to pop that dialogue asking

551
00:24:17,196 --> 00:24:19,866 A:middle
for location access Always even

552
00:24:19,866 --> 00:24:23,156 A:middle
if your app only uses WhenInUse
location functionality,

553
00:24:23,436 --> 00:24:27,326 A:middle
such as location in the app or
background location or ranging.

554
00:24:28,416 --> 00:24:30,376 A:middle
So your user may at
that point decide

555
00:24:30,376 --> 00:24:32,016 A:middle
to disallow location usage.

556
00:24:32,596 --> 00:24:33,956 A:middle
So you don't want
this to happen.

557
00:24:34,016 --> 00:24:35,436 A:middle
You want to update your app now

558
00:24:35,846 --> 00:24:39,806 A:middle
and you saw exactly how
simple it is to do so.

559
00:24:39,806 --> 00:24:41,096 A:middle
So what about updating your app?

560
00:24:41,706 --> 00:24:44,496 A:middle
You can change the supported
authorization types anytime you

561
00:24:44,496 --> 00:24:49,616 A:middle
update your app and so when
your user updates the version

562
00:24:49,616 --> 00:24:53,196 A:middle
of the app, the version of your
app on his phone or device,

563
00:24:53,856 --> 00:24:56,916 A:middle
it will preserve the
user's authorization

564
00:24:57,186 --> 00:24:58,096 A:middle
if still supported.

565
00:24:58,926 --> 00:25:03,296 A:middle
Otherwise, it will go
from Always to WhenInUse.

566

567
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

568
00:24:58,926 --> 00:25:03,296 A:middle
Otherwise, it will go
from Always to WhenInUse.

569
00:25:03,476 --> 00:25:06,176 A:middle
For example, if your app
no longer supports Always

570
00:25:06,176 --> 00:25:10,126 A:middle
authorization but now
supports WhenInUse and it'll go

571
00:25:10,126 --> 00:25:11,936 A:middle
from WhenInUse to prompt again.

572
00:25:12,286 --> 00:25:14,716 A:middle
For example, again if your app
no longer supports WhenInUse

573
00:25:14,716 --> 00:25:17,616 A:middle
in this case and may now
support Always authorization.

574
00:25:18,256 --> 00:25:21,376 A:middle
But again, don't wait to adopt

575
00:25:21,376 --> 00:25:24,066 A:middle
because if the user denies
location access to your app,

576
00:25:24,066 --> 00:25:27,996 A:middle
it will stay denied even if you
subsequently change your app

577
00:25:28,246 --> 00:25:31,466 A:middle
to support the WhenInUse
authorization type.

578
00:25:33,976 --> 00:25:36,936 A:middle
So what about other frameworks
where location is used?

579
00:25:37,406 --> 00:25:40,706 A:middle
Let's go back to the
example WelcomeHome app.

580
00:25:41,286 --> 00:25:44,336 A:middle
Let's say that you don't want
your app to automatically turn

581
00:25:44,336 --> 00:25:47,296 A:middle
on the lights or even more
dangerously unlock the front

582
00:25:47,296 --> 00:25:48,306 A:middle
door automatically.

583
00:25:48,676 --> 00:25:51,226 A:middle
Instead, all you want
to do is notify the user

584
00:25:51,686 --> 00:25:53,426 A:middle
and let them decide to choose

585
00:25:53,426 --> 00:25:55,486 A:middle
to take action on
that notification.

586
00:25:56,386 --> 00:25:59,076 A:middle
In this case, your app actually
doesn't need to be launched,

587
00:25:59,496 --> 00:26:03,696 A:middle
just a notification needs to
be provided and now in iOS 8,

588

589
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

590
00:25:59,496 --> 00:26:03,696 A:middle
just a notification needs to
be provided and now in iOS 8,

591
00:26:04,026 --> 00:26:05,756 A:middle
we've added region-based
triggering

592
00:26:05,816 --> 00:26:10,026 A:middle
to UILocalNotification
via the specification

593
00:26:10,026 --> 00:26:12,916 A:middle
of the CLRegion property
on the UILocalNotification.

594
00:26:13,586 --> 00:26:16,936 A:middle
In this case, your app doesn't
need Always authorization

595
00:26:16,936 --> 00:26:18,496 A:middle
because your app
will not be launched

596
00:26:18,576 --> 00:26:19,906 A:middle
in response to region
monitoring.

597
00:26:20,256 --> 00:26:22,466 A:middle
Instead, the system will
provide the notification

598
00:26:22,466 --> 00:26:26,376 A:middle
that you specified to be
provided to the user on behalf

599
00:26:26,806 --> 00:26:29,896 A:middle
and only when the user decides
to respond to that notification

600
00:26:30,336 --> 00:26:33,756 A:middle
and launch your app will
your app actually be in use.

601
00:26:34,626 --> 00:26:37,996 A:middle
So usage of this API
requires either authorization,

602
00:26:37,996 --> 00:26:41,886 A:middle
Always or WhenInUse but only
needs your app to be supported

603
00:26:41,886 --> 00:26:43,366 A:middle
for WhenInUse authorization.

604
00:26:43,916 --> 00:26:46,336 A:middle
And the steps to use
this API are the same

605
00:26:46,336 --> 00:26:48,036 A:middle
as any other location
functionality.

606
00:26:48,526 --> 00:26:52,016 A:middle
You'll want to specify the
desired usage description key

607
00:26:52,016 --> 00:26:55,286 A:middle
in your Info.plist with the text
string describing how it is your

608
00:26:55,286 --> 00:26:58,966 A:middle
app uses location and call the
corresponding authorization

609
00:26:58,966 --> 00:27:03,086 A:middle
request API, as needed.

610

611
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

612
00:26:58,966 --> 00:27:03,086 A:middle
request API, as needed.

613
00:27:03,226 --> 00:27:07,096 A:middle
What if you use MKMapView on
your app to display a map view

614
00:27:07,546 --> 00:27:11,606 A:middle
with the user's current location
via the showsUserLocation

615
00:27:11,796 --> 00:27:14,766 A:middle
property on the MKMapView class.

616
00:27:16,006 --> 00:27:19,946 A:middle
Again, this requires either
authorization for your app

617
00:27:19,946 --> 00:27:23,236 A:middle
but only needs your
app to be authorized

618
00:27:23,236 --> 00:27:24,846 A:middle
for WhenInUse authorization.

619
00:27:25,726 --> 00:27:28,886 A:middle
And the same steps as
before, you need to specify

620
00:27:29,606 --> 00:27:31,586 A:middle
which authorization
your app supports

621
00:27:31,976 --> 00:27:34,146 A:middle
in your app's information
property list

622
00:27:34,826 --> 00:27:36,666 A:middle
and make the corresponding
API call

623
00:27:36,666 --> 00:27:39,096 A:middle
to request authorization
when needed.

624
00:27:40,506 --> 00:27:42,696 A:middle
One last one I'd like to
talk about, Web views.

625
00:27:43,636 --> 00:27:47,516 A:middle
To allow web content that
uses HTML5 geolocation

626
00:27:47,896 --> 00:27:49,856 A:middle
to access the user's
current location,

627
00:27:51,116 --> 00:27:53,596 A:middle
this one also requires
either authorization

628
00:27:54,076 --> 00:27:56,926 A:middle
but again only needs the
WhenInUse authorization.

629
00:27:58,256 --> 00:28:01,376 A:middle
Again, you'll specify in your
app's information property list

630

631
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

632
00:27:58,256 --> 00:28:01,376 A:middle
Again, you'll specify in your
app's information property list

633
00:28:01,866 --> 00:28:03,406 A:middle
the usage description
keys relevant

634
00:28:03,726 --> 00:28:05,986 A:middle
with a text description why
it is that your app would

635
00:28:05,986 --> 00:28:09,846 A:middle
like to use the user's
location; however, in this case,

636
00:28:10,206 --> 00:28:12,736 A:middle
the authorization request
will be made automatically

637
00:28:12,736 --> 00:28:16,006 A:middle
for WhenInUse on your behalf
because you may not know

638
00:28:16,006 --> 00:28:19,976 A:middle
when the user navigates to a
web page that uses geolocation;

639
00:28:20,836 --> 00:28:24,646 A:middle
however, if your app uses
Always authorization,

640
00:28:25,226 --> 00:28:27,416 A:middle
you'll want to make that
authorization request

641
00:28:27,566 --> 00:28:29,286 A:middle
in advance, if so desired.

642
00:28:29,846 --> 00:28:35,916 A:middle
So a quick recap, get ready

643
00:28:35,916 --> 00:28:38,866 A:middle
for the location authorization
changes that are coming in iOS 8

644
00:28:39,236 --> 00:28:41,386 A:middle
by following these
three simple steps.

645
00:28:41,796 --> 00:28:45,006 A:middle
First, think about how
your app uses location.

646
00:28:45,616 --> 00:28:47,896 A:middle
Second, explain it your users.

647
00:28:48,816 --> 00:28:53,486 A:middle
And third and finally, make the
call to request authorization.

648
00:28:54,506 --> 00:28:55,086 A:middle
Don't wait.

649
00:28:55,466 --> 00:28:56,186 A:middle
Do it today.

650
00:28:56,186 --> 00:28:59,526 A:middle
And then if you have any
questions, on Thursday,

651
00:28:59,526 --> 00:29:02,276 A:middle
you can come to us in our lab
session here this week at WWDC

652

653
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

654
00:28:59,526 --> 00:29:02,276 A:middle
you can come to us in our lab
session here this week at WWDC

655
00:29:02,276 --> 00:29:05,096 A:middle
with any issues or
questions that you encounter.

656
00:29:06,336 --> 00:29:09,146 A:middle
Next, I'd like to introduce
Brad, who's here to talk

657
00:29:09,146 --> 00:29:10,816 A:middle
about Visit Monitoring.

658
00:29:11,346 --> 00:29:11,996 A:middle
>> Thanks Stephen.

659
00:29:12,666 --> 00:29:13,656 A:middle
I'm Brad Jensen.

660
00:29:13,656 --> 00:29:16,356 A:middle
I'm a Core Location engineer
and I'm excited to introduce

661
00:29:16,356 --> 00:29:17,936 A:middle
to you Visit Monitoring.

662
00:29:18,596 --> 00:29:21,506 A:middle
But first, I want to
write an app with you.

663
00:29:22,096 --> 00:29:24,926 A:middle
See, Apple engineers aren't
allowed to publish apps

664
00:29:24,926 --> 00:29:27,196 A:middle
and I really want a journaling
app, so you're going to have

665
00:29:27,196 --> 00:29:28,606 A:middle
to help me out with this.

666
00:29:28,606 --> 00:29:30,906 A:middle
Journaling apps are
really interesting to me

667
00:29:30,906 --> 00:29:34,416 A:middle
but more importantly,
they're a great example

668
00:29:34,416 --> 00:29:35,436 A:middle
of Visit Monitoring.

669
00:29:35,776 --> 00:29:38,506 A:middle
It's a great type of
app that makes use

670
00:29:38,506 --> 00:29:39,506 A:middle
of this new technology.

671
00:29:39,936 --> 00:29:42,316 A:middle
So, what constitutes
a journaling app?

672
00:29:42,986 --> 00:29:46,856 A:middle
Well, first and foremost, it's
got to provide the user a list

673
00:29:46,856 --> 00:29:49,136 A:middle
of locations of where
they've been during their day.

674
00:29:50,336 --> 00:29:53,486 A:middle
But more importantly, that
list of locations needs

675
00:29:53,486 --> 00:29:54,606 A:middle
to be relevant to them.

676
00:29:55,086 --> 00:29:57,576 A:middle
If we list every time they
stopped at a interaction

677
00:29:57,576 --> 00:29:59,226 A:middle
or a stop sign, then
they're not going to find

678
00:29:59,226 --> 00:29:59,976 A:middle
that list especially useful.

679

680
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

681
00:30:00,186 --> 00:30:03,946 A:middle
Finally, we want to make sure

682
00:30:03,986 --> 00:30:06,806 A:middle
that our journaling
app can last all day.

683
00:30:06,806 --> 00:30:09,126 A:middle
If it's going to drain
the user's battery in two

684
00:30:09,126 --> 00:30:11,406 A:middle
to three hours, it's not
going to be very useful.

685
00:30:12,856 --> 00:30:15,296 A:middle
So, let's take a look at the
different Core Location APIs

686
00:30:15,296 --> 00:30:17,826 A:middle
that exist today and
we'll see why none

687
00:30:17,826 --> 00:30:19,656 A:middle
of them really work well
for journaling apps.

688
00:30:20,206 --> 00:30:21,696 A:middle
If you're working
on a check-in app,

689
00:30:21,836 --> 00:30:23,486 A:middle
you might find this
awfully familiar.

690
00:30:25,436 --> 00:30:27,806 A:middle
First up is the standard
location service.

691
00:30:28,076 --> 00:30:29,536 A:middle
This is where we
provide your app

692
00:30:29,536 --> 00:30:32,316 A:middle
with periodic location updates
as they become available.

693
00:30:33,456 --> 00:30:35,906 A:middle
Naturally, if we're going to be
providing updates to your app,

694
00:30:35,906 --> 00:30:39,976 A:middle
this requires the phone to be
awake and even more importantly,

695
00:30:39,976 --> 00:30:41,956 A:middle
the radios have to stay awake.

696
00:30:42,256 --> 00:30:45,066 A:middle
We have to periodically
scan for WiFi networks,

697
00:30:45,606 --> 00:30:48,706 A:middle
for cell towers or GPS.

698
00:30:50,336 --> 00:30:53,766 A:middle
Now, all of this is fairly
expensive and that means

699
00:30:53,826 --> 00:30:58,166 A:middle
that the app is going to be
consuming a lot of power.

700
00:30:58,366 --> 00:31:00,006 A:middle
In addition, the app is going

701

702
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

703
00:30:58,366 --> 00:31:00,006 A:middle
In addition, the app is going

704
00:31:00,006 --> 00:31:02,026 A:middle
to receive a lot
of irrelevant data.

705
00:31:02,706 --> 00:31:04,986 A:middle
You're going to have to take
the stream of locations and try

706
00:31:04,986 --> 00:31:07,716 A:middle
and make sense of it, try
and identify those locations

707
00:31:07,716 --> 00:31:09,526 A:middle
that are probably
significant to the user.

708
00:31:11,206 --> 00:31:14,236 A:middle
So this isn't really a good
fit for a journaling app,

709
00:31:14,526 --> 00:31:17,366 A:middle
but if we were instead
writing a navigation app,

710
00:31:17,876 --> 00:31:19,136 A:middle
this would make a lot of sense.

711
00:31:19,426 --> 00:31:22,416 A:middle
You need the most up-to-date
information available in order

712
00:31:22,416 --> 00:31:25,466 A:middle
to tell the user when
to make their next move.

713
00:31:26,296 --> 00:31:29,446 A:middle
Before we totally throw out
standard location service

714
00:31:29,506 --> 00:31:32,026 A:middle
for journaling apps,
there are a couple

715
00:31:32,026 --> 00:31:33,396 A:middle
of improvements we
might consider.

716
00:31:34,416 --> 00:31:36,946 A:middle
A while ago we introduced
the automatic pause feature.

717
00:31:37,456 --> 00:31:39,936 A:middle
This allows Core
Location to save power

718
00:31:39,936 --> 00:31:44,186 A:middle
by pausing location
updates once it's determined

719
00:31:44,186 --> 00:31:46,366 A:middle
that the device probably
isn't in motion anymore.

720
00:31:47,536 --> 00:31:49,996 A:middle
This is really exciting
because it means,

721
00:31:50,066 --> 00:31:51,326 A:middle
well, we get to save power.

722
00:31:51,326 --> 00:31:53,616 A:middle
The device gets to
keep journaling longer.

723
00:31:54,126 --> 00:31:56,926 A:middle
Unfortunately, once the
user starts moving again,

724
00:31:56,926 --> 00:31:59,276 A:middle
your app will have to resume
those location updates.

725

726
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

727
00:32:02,456 --> 00:32:05,776 A:middle
And so we won't actually help

728
00:32:05,776 --> 00:32:08,666 A:middle
or this won't actually save
standard location service

729
00:32:08,666 --> 00:32:10,076 A:middle
in terms of writing
journaling apps.

730
00:32:10,376 --> 00:32:13,286 A:middle
If we were writing that
navigation app, however,

731
00:32:13,286 --> 00:32:14,566 A:middle
this would be a huge win.

732
00:32:15,056 --> 00:32:17,016 A:middle
Once the user stops
at a gas station,

733
00:32:17,626 --> 00:32:19,886 A:middle
automatic pause will save
their phone's battery.

734
00:32:21,216 --> 00:32:24,156 A:middle
Another option we might consider
is deferred location updates.

735
00:32:25,076 --> 00:32:26,706 A:middle
This one is really
interesting as well.

736
00:32:27,116 --> 00:32:28,956 A:middle
It allows Core Location
to save power

737
00:32:28,956 --> 00:32:30,786 A:middle
by waking up your app list.

738
00:32:31,626 --> 00:32:33,046 A:middle
App wake-ups cost power

739
00:32:33,046 --> 00:32:36,496 A:middle
and so fewer app launches
means more power saved.

740
00:32:37,526 --> 00:32:40,866 A:middle
Unfortunately, generating
locations is still quite

741
00:32:40,866 --> 00:32:43,066 A:middle
expensive and so even
though we're saving power

742
00:32:43,066 --> 00:32:45,676 A:middle
by not launching your app
every time there's new data,

743
00:32:45,996 --> 00:32:48,166 A:middle
we're still generating
all those locations

744
00:32:48,526 --> 00:32:51,166 A:middle
and not especially great.

745
00:32:51,836 --> 00:32:56,016 A:middle
So, deferred location updates
aren't exactly what we want;

746
00:32:56,706 --> 00:32:59,996 A:middle
however, if we were
writing a fitness app,

747

748
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

749
00:33:00,616 --> 00:33:01,396 A:middle
they would be great.

750
00:33:02,046 --> 00:33:04,556 A:middle
If you're writing
a run tracker app,

751
00:33:04,556 --> 00:33:06,856 A:middle
you don't necessarily
need the latest location

752
00:33:06,856 --> 00:33:07,846 A:middle
in the moment that's available.

753
00:33:08,236 --> 00:33:10,816 A:middle
It might be okay to
receive it every mile

754
00:33:10,816 --> 00:33:12,916 A:middle
or every 15 minutes or so.

755
00:33:13,766 --> 00:33:16,316 A:middle
All right, what else
do we have for us?

756
00:33:16,856 --> 00:33:18,186 A:middle
Well, there's the standard

757
00:33:18,186 --> 00:33:20,056 A:middle
or the significant
location change API.

758
00:33:21,366 --> 00:33:23,326 A:middle
This one is a lot
more power efficient

759
00:33:23,326 --> 00:33:24,836 A:middle
than continuous location
updates,

760
00:33:25,316 --> 00:33:26,566 A:middle
but there's a cost to this.

761
00:33:27,196 --> 00:33:31,676 A:middle
Instead of getting all of the
data, you get very coarse tracks

762
00:33:31,676 --> 00:33:32,756 A:middle
of where the user went.

763
00:33:33,126 --> 00:33:36,136 A:middle
Specifically, you only get
location updates every few

764
00:33:36,136 --> 00:33:38,236 A:middle
hundred meters the device moves.

765
00:33:39,236 --> 00:33:41,386 A:middle
This is going to make it
incredibly difficult for us

766
00:33:41,386 --> 00:33:43,926 A:middle
to identify places that
the user stopped at since

767
00:33:43,926 --> 00:33:48,006 A:middle
when the user stops, we stop
giving updates to your app.

768
00:33:48,766 --> 00:33:51,556 A:middle
If we were writing a
different app, for example one

769
00:33:51,556 --> 00:33:54,966 A:middle
that showed the user the path
they took home maybe identifies

770
00:33:55,006 --> 00:33:56,776 A:middle
the freeways they drove on,

771
00:33:57,176 --> 00:33:59,596 A:middle
then significant location
changes would make a lot

772
00:33:59,596 --> 00:33:59,936 A:middle
of sense.

773

774
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

775
00:34:00,786 --> 00:34:03,046 A:middle
But we're working on a
journaling app today,

776
00:34:03,506 --> 00:34:04,606 A:middle
so we're going to
have to keep looking.

777
00:34:06,056 --> 00:34:08,146 A:middle
Our last option is
region monitoring.

778
00:34:08,706 --> 00:34:10,906 A:middle
Region monitoring is really cool

779
00:34:10,906 --> 00:34:13,056 A:middle
because it's highly
power efficient.

780
00:34:13,525 --> 00:34:16,436 A:middle
Region monitoring can continue
while the phone is asleep

781
00:34:17,275 --> 00:34:19,485 A:middle
and your app only
receives information

782
00:34:19,485 --> 00:34:20,866 A:middle
that is directly relevant to it.

783
00:34:21,775 --> 00:34:24,436 A:middle
Unfortunately, you
have to specify

784
00:34:24,436 --> 00:34:26,196 A:middle
which locations are
interesting to your app

785
00:34:26,196 --> 00:34:30,005 A:middle
and that won't exactly work for
our use case because we want

786
00:34:30,005 --> 00:34:30,835 A:middle
to know about all

787
00:34:30,835 --> 00:34:33,196 A:middle
of the interesting
locations the user might go to

788
00:34:33,536 --> 00:34:35,716 A:middle
and there are far too
many interesting places

789
00:34:35,716 --> 00:34:36,916 A:middle
to monitor for them all.

790
00:34:37,485 --> 00:34:41,386 A:middle
So, that's all that
Core Location has today.

791
00:34:41,456 --> 00:34:43,886 A:middle
Do we give up, I have to
give up on my dream app?

792
00:34:44,536 --> 00:34:46,255 A:middle
Not yet. There's another one.

793
00:34:46,516 --> 00:34:49,315 A:middle
We're introducing
today Visit Monitoring.

794
00:34:50,235 --> 00:34:51,886 A:middle
What makes Visit
Monitoring different

795
00:34:51,926 --> 00:34:53,926 A:middle
from the other Core
Location APIs is

796
00:34:53,926 --> 00:34:56,326 A:middle
that it monitors
for destinations.

797
00:34:57,186 --> 00:34:59,206 A:middle
So instead of giving
you information

798
00:34:59,256 --> 00:35:02,286 A:middle
about how the user
got from A to B,

799

800
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

801
00:34:59,256 --> 00:35:02,286 A:middle
about how the user
got from A to B,

802
00:35:02,286 --> 00:35:05,036 A:middle
it gives you information
about A and B.

803
00:35:06,876 --> 00:35:09,176 A:middle
It will launch your
app when it detects

804
00:35:09,176 --> 00:35:11,426 A:middle
that the user has departed
from a location or arrived

805
00:35:11,426 --> 00:35:14,406 A:middle
at a new one and so
naturally this will require

806
00:35:14,406 --> 00:35:15,456 A:middle
Always authorization.

807
00:35:15,956 --> 00:35:22,156 A:middle
Visit Monitoring is
incredibly power efficient.

808
00:35:22,566 --> 00:35:25,156 A:middle
We employ all sorts of neat
tricks behind the scenes

809
00:35:25,156 --> 00:35:25,876 A:middle
to ensure this.

810
00:35:26,226 --> 00:35:28,616 A:middle
For example, while
the device is asleep,

811
00:35:28,616 --> 00:35:30,676 A:middle
it periodically performs
WiFi scans.

812
00:35:31,716 --> 00:35:34,646 A:middle
If Visit Monitoring is active,
we're able to harvest all

813
00:35:34,646 --> 00:35:36,996 A:middle
of those scans that would
otherwise have not generated

814
00:35:36,996 --> 00:35:39,646 A:middle
locations and use them to
enhance our visit detection.

815
00:35:40,156 --> 00:35:44,056 A:middle
Visit Monitoring is
also opportunistic.

816
00:35:44,686 --> 00:35:47,956 A:middle
So, if your app is using Visit
Monitoring and the user pulls

817
00:35:47,956 --> 00:35:51,156 A:middle
out apps and starts
navigating, all of the locations

818
00:35:51,156 --> 00:35:54,696 A:middle
that maps requests are fed into
the visit detection algorithm

819
00:35:54,746 --> 00:35:58,046 A:middle
and so your app benefits from
other apps' use of location.

820
00:35:59,756 --> 00:36:04,186 A:middle
Finally, it utilizes information
from across the entire system.

821

822
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

823
00:35:59,756 --> 00:36:04,186 A:middle
Finally, it utilizes information
from across the entire system.

824
00:36:04,676 --> 00:36:08,206 A:middle
For example, suppose the
user arrives home and plugs

825
00:36:08,206 --> 00:36:09,646 A:middle
in their phone to
start charging.

826
00:36:10,406 --> 00:36:12,826 A:middle
It's much more likely that
the user would consider this

827
00:36:12,826 --> 00:36:15,216 A:middle
location where they started
charging to be an important part

828
00:36:15,216 --> 00:36:17,956 A:middle
of their day and so
we'll use that as a hint

829
00:36:18,206 --> 00:36:19,906 A:middle
that the user has just
arrived somewhere.

830
00:36:20,726 --> 00:36:23,266 A:middle
When we see hints, we'll
trigger arrival events much

831
00:36:23,266 --> 00:36:23,926 A:middle
more readily.

832
00:36:24,376 --> 00:36:26,846 A:middle
Finally, I'd like to point

833
00:36:26,846 --> 00:36:30,476 A:middle
out that Visit Monitoring
is not tied to landmarks.

834
00:36:30,886 --> 00:36:34,476 A:middle
I mean, when you receive
information about a location,

835
00:36:34,896 --> 00:36:37,386 A:middle
it's not necessarily an
intrinsically interesting

836
00:36:37,386 --> 00:36:40,796 A:middle
location, it's just a
location which is interesting

837
00:36:40,796 --> 00:36:44,376 A:middle
because the user has spent time
there or we've seen some hints

838
00:36:44,556 --> 00:36:46,856 A:middle
which indicate the user
might think it's interesting.

839
00:36:46,856 --> 00:36:52,016 A:middle
So, let's look at what
a visit actually is.

840
00:36:52,946 --> 00:36:56,576 A:middle
Suppose your user has
turned on Visit Monitoring

841
00:36:56,576 --> 00:36:59,226 A:middle
through your app and they
decide they want to go get a cup

842
00:36:59,226 --> 00:37:01,146 A:middle
of coffee, so they start walking

843

844
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

845
00:36:59,226 --> 00:37:01,146 A:middle
of coffee, so they start walking

846
00:37:01,146 --> 00:37:02,766 A:middle
from their home to
the coffee shop.

847
00:37:03,696 --> 00:37:06,516 A:middle
At some point, Core Location
will get its first location

848
00:37:06,936 --> 00:37:08,486 A:middle
of the user at the coffee shop.

849
00:37:08,486 --> 00:37:11,276 A:middle
I don't know about you
but I can't see the future

850
00:37:11,696 --> 00:37:13,726 A:middle
and so Core Location
is going to have

851
00:37:13,776 --> 00:37:15,466 A:middle
to wait a little while
before it can say

852
00:37:15,466 --> 00:37:17,876 A:middle
for sure whether the user is
passing by the coffee shop

853
00:37:18,166 --> 00:37:20,286 A:middle
or whether they're there
to say for some time.

854
00:37:21,096 --> 00:37:24,306 A:middle
After we get a little bit more
data, it becomes clear that yes,

855
00:37:24,666 --> 00:37:27,276 A:middle
the user intends to stay
at the coffee for a while,

856
00:37:27,566 --> 00:37:29,356 A:middle
maybe it's time to
notify some apps.

857
00:37:29,756 --> 00:37:32,446 A:middle
At this point, Core
Location will launch your app

858
00:37:32,446 --> 00:37:34,406 A:middle
and provide it some
information about the arrival.

859
00:37:35,266 --> 00:37:37,346 A:middle
Most importantly, however,
it will do its best

860
00:37:37,346 --> 00:37:39,126 A:middle
to estimate the true
arrival time

861
00:37:39,126 --> 00:37:40,966 A:middle
of the user at the location.

862
00:37:42,076 --> 00:37:43,396 A:middle
Departures work similarly.

863
00:37:44,096 --> 00:37:47,096 A:middle
After some amount of time,
we'll get our last location

864
00:37:47,686 --> 00:37:51,986 A:middle
of the user at the coffee shop,
but Core Location will wait

865
00:37:51,986 --> 00:37:54,176 A:middle
until it gets a little bit
more data until it's sure

866
00:37:54,176 --> 00:37:55,216 A:middle
that the user has left.

867
00:37:55,756 --> 00:37:58,266 A:middle
At that point, we will
wake your app again

868
00:37:58,536 --> 00:38:01,366 A:middle
and we'll provide a departure
notification, doing our best

869

870
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

871
00:37:58,536 --> 00:38:01,366 A:middle
and we'll provide a departure
notification, doing our best

872
00:38:01,366 --> 00:38:04,326 A:middle
to estimate the true time when
the user left the location.

873
00:38:04,556 --> 00:38:08,316 A:middle
So, let's take a
look at the API.

874
00:38:09,336 --> 00:38:11,616 A:middle
We've added two new methods
to the locationManager,

875
00:38:12,076 --> 00:38:14,456 A:middle
specifically
startMonitoringVisits

876
00:38:14,666 --> 00:38:16,346 A:middle
and stopMonitoringVisits.

877
00:38:16,836 --> 00:38:18,836 A:middle
When we have information
to deliver to your app,

878
00:38:19,136 --> 00:38:20,806 A:middle
we'll do it through
the new delegate method

879
00:38:21,146 --> 00:38:22,766 A:middle
locationManager didVisit.

880
00:38:23,576 --> 00:38:25,916 A:middle
Some of you may have
noticed there's a new class

881
00:38:25,916 --> 00:38:28,586 A:middle
in that method's signature,
specifically CLVisit,

882
00:38:28,746 --> 00:38:29,756 A:middle
so let's take a look at that.

883
00:38:31,046 --> 00:38:32,666 A:middle
CLVisit is a fairly
simple class.

884
00:38:32,956 --> 00:38:34,056 A:middle
It's got four properties.

885
00:38:34,546 --> 00:38:37,286 A:middle
The first two are
arrivalDate and departureDate;

886
00:38:38,076 --> 00:38:39,736 A:middle
these describe when
the user arrived

887
00:38:39,736 --> 00:38:41,376 A:middle
and departed, respectively.

888
00:38:42,726 --> 00:38:45,936 A:middle
The coordinate, which represents
the place the user was visiting,

889
00:38:46,136 --> 00:38:51,006 A:middle
and horizontal accuracy, which
is an estimate of the error

890
00:38:51,006 --> 00:38:53,246 A:middle
on the location,
on the coordinate.

891
00:38:53,746 --> 00:38:57,626 A:middle
A few things you might want to
know about Visit Monitoring.

892
00:38:58,176 --> 00:39:01,466 A:middle
The values of horizontal
accuracy

893

894
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

895
00:38:58,176 --> 00:39:01,466 A:middle
The values of horizontal
accuracy

896
00:39:01,466 --> 00:39:03,976 A:middle
and coordinate may differ
between an arrival event

897
00:39:03,976 --> 00:39:05,146 A:middle
and a departure event.

898
00:39:05,676 --> 00:39:06,996 A:middle
This shouldn't be
too surprising.

899
00:39:07,236 --> 00:39:09,566 A:middle
These are estimates based
on the data we have seen

900
00:39:09,756 --> 00:39:11,446 A:middle
and as we get more
data, we'll be able

901
00:39:11,446 --> 00:39:12,566 A:middle
to produce better estimates.

902
00:39:14,046 --> 00:39:14,886 A:middle
You should also note

903
00:39:15,246 --> 00:39:18,036 A:middle
that horizontal accuracy
should be no worse

904
00:39:18,096 --> 00:39:21,246 A:middle
than the horizontal accuracy
on a WiFi-based position.

905
00:39:21,486 --> 00:39:24,456 A:middle
So, if you find WiFi-based
positions are suitable

906
00:39:24,456 --> 00:39:27,866 A:middle
for your app, Visit Monitoring
will probably produce things

907
00:39:27,866 --> 00:39:28,586 A:middle
of equal value.

908
00:39:31,136 --> 00:39:35,376 A:middle
Naturally, since this is a
background monitoring service,

909
00:39:35,616 --> 00:39:36,746 A:middle
we'll launch your app even

910
00:39:36,746 --> 00:39:38,426 A:middle
if it's been quit,
as Stephen mentioned.

911
00:39:39,696 --> 00:39:43,306 A:middle
In addition, if the phone is
rebooted or your app crashes,

912
00:39:43,306 --> 00:39:44,936 A:middle
we'll still launch
it and provide it

913
00:39:44,936 --> 00:39:45,726 A:middle
with this information.

914
00:39:48,436 --> 00:39:50,896 A:middle
You should also know
that there are cases

915
00:39:50,896 --> 00:39:54,186 A:middle
in which Visit Monitoring might
detect multiple visit events

916
00:39:54,296 --> 00:39:56,196 A:middle
at the same time
and deliver them

917
00:39:56,196 --> 00:39:56,976 A:middle
to your app in a single launch.

918
00:39:57,086 --> 00:39:59,966 A:middle
So, when you receive visits,

919

920
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

921
00:40:00,196 --> 00:40:02,096 A:middle
you should be prepared
to handle multiple.

922
00:40:02,646 --> 00:40:07,476 A:middle
You may have noticed that
CLVisit doesn't have a isArrival

923
00:40:07,476 --> 00:40:10,506 A:middle
or isDeparture property,
so let's take a look

924
00:40:10,506 --> 00:40:13,096 A:middle
at how you can determine whether
a visit represents an arrival

925
00:40:13,096 --> 00:40:15,186 A:middle
event or departure event.

926
00:40:16,176 --> 00:40:18,776 A:middle
The secret is to look
at the arrival date

927
00:40:18,776 --> 00:40:20,066 A:middle
and departure date properties.

928
00:40:20,996 --> 00:40:22,446 A:middle
On an arrival notification,

929
00:40:23,026 --> 00:40:25,576 A:middle
the arrival date will
unsurprisingly be our best

930
00:40:25,576 --> 00:40:27,336 A:middle
estimate of when
the user arrived.

931
00:40:27,886 --> 00:40:31,186 A:middle
The departure date, however,
will be NSDate distantFuture.

932
00:40:32,166 --> 00:40:34,046 A:middle
On a departure notification,

933
00:40:34,346 --> 00:40:36,486 A:middle
the departure date will
be our best estimate.

934
00:40:37,786 --> 00:40:39,946 A:middle
The arrival date, I'd
like to point out,

935
00:40:40,216 --> 00:40:41,956 A:middle
could be distant past.

936
00:40:42,096 --> 00:40:44,326 A:middle
This happens if your
app wasn't authorized

937
00:40:44,326 --> 00:40:46,086 A:middle
for the arrival moment.

938
00:40:47,236 --> 00:40:51,046 A:middle
So, how do we check if a
CLVisit represents an arrival

939
00:40:51,046 --> 00:40:51,736 A:middle
or a departure?

940
00:40:52,686 --> 00:40:55,456 A:middle
You simply compare the departure
date to distant future.

941
00:40:56,616 --> 00:40:58,106 A:middle
Now, let's get back to that app.

942
00:40:58,996 --> 00:41:02,196 A:middle
There should be four
steps to implementing it.

943

944
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

945
00:40:58,996 --> 00:41:02,196 A:middle
There should be four
steps to implementing it.

946
00:41:03,286 --> 00:41:05,966 A:middle
First, we need to adopt
the new authorization model

947
00:41:05,966 --> 00:41:06,936 A:middle
that Stephen described.

948
00:41:07,526 --> 00:41:10,786 A:middle
After that, we need to
create our locationManager,

949
00:41:11,616 --> 00:41:12,946 A:middle
write our start and
stop methods,

950
00:41:13,476 --> 00:41:15,726 A:middle
and finally handle the visits

951
00:41:16,016 --> 00:41:17,476 A:middle
that are delivered
by Core Location.

952
00:41:20,296 --> 00:41:22,756 A:middle
Adopting the new authorization
isn't too difficult.

953
00:41:23,146 --> 00:41:26,226 A:middle
The hardest part is coming up
with a great way to describe

954
00:41:26,226 --> 00:41:28,326 A:middle
to your users how you intend
to use their location.

955
00:41:28,326 --> 00:41:31,246 A:middle
For this example,
journaling app, we might say,

956
00:41:31,466 --> 00:41:32,726 A:middle
this app needs your location

957
00:41:32,726 --> 00:41:35,226 A:middle
to automatically detect
the places you visit during

958
00:41:35,226 --> 00:41:35,636 A:middle
your day.

959
00:41:36,396 --> 00:41:40,756 A:middle
After that, we create
our locationManager.

960
00:41:41,276 --> 00:41:44,006 A:middle
I went ahead and did that
in the application delegate

961
00:41:44,496 --> 00:41:47,066 A:middle
because it provides a
great main thread context

962
00:41:47,066 --> 00:41:48,776 A:middle
for us to allocate it in.

963
00:41:50,376 --> 00:41:52,526 A:middle
The start and stop
methods are fairly simple.

964
00:41:52,816 --> 00:41:54,316 A:middle
The only catch is
you have to remember

965
00:41:54,316 --> 00:41:55,876 A:middle
to requestAlwaysAuthorization.

966
00:41:56,956 --> 00:42:00,516 A:middle
And the stop is even easier, you
just call stopMonitoringVisits.

967

968
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

969
00:41:56,956 --> 00:42:00,516 A:middle
And the stop is even easier, you
just call stopMonitoringVisits.

970
00:42:01,956 --> 00:42:06,186 A:middle
Finally, the delegate, this
is where you take over.

971
00:42:06,716 --> 00:42:09,786 A:middle
Please keep in mind

972
00:42:10,046 --> 00:42:13,356 A:middle
that background execution time
is limited and, as I mentioned,

973
00:42:13,356 --> 00:42:14,976 A:middle
you may receive multiple visits.

974
00:42:15,466 --> 00:42:17,686 A:middle
So you shouldn't kick
off some long-running,

975
00:42:17,796 --> 00:42:21,186 A:middle
computationally-expensive
processing task here.

976
00:42:21,666 --> 00:42:23,946 A:middle
For a simple journaling
app, it might be best

977
00:42:23,946 --> 00:42:27,596 A:middle
to just record this visit in
a database and then save it

978
00:42:27,596 --> 00:42:30,426 A:middle
for later when the user
actually launches your app.

979
00:42:31,316 --> 00:42:34,676 A:middle
If you're writing a check-in
app, now might be a good time

980
00:42:35,056 --> 00:42:37,696 A:middle
to take a look at the location,
see if it's accurate enough

981
00:42:37,696 --> 00:42:40,366 A:middle
for you to actually
determine if the user is

982
00:42:40,366 --> 00:42:43,066 A:middle
at a specific restaurant,
for example,

983
00:42:43,296 --> 00:42:46,726 A:middle
and then maybe fire off a
UILocalNotification saying would

984
00:42:46,726 --> 00:42:48,236 A:middle
you like to check in.

985
00:42:50,876 --> 00:42:53,746 A:middle
Before I give the
stage back to Stephen,

986
00:42:54,166 --> 00:42:56,566 A:middle
I'd like to give you some advice
from the Core Location team

987
00:42:56,616 --> 00:42:57,576 A:middle
about Visit Monitoring.

988
00:42:58,516 --> 00:43:00,826 A:middle
Visit Monitoring is
not a replacement

989

990
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

991
00:42:58,516 --> 00:43:00,826 A:middle
Visit Monitoring is
not a replacement

992
00:43:01,016 --> 00:43:02,056 A:middle
for region monitoring.

993
00:43:02,286 --> 00:43:04,096 A:middle
If you're currently
using region monitoring

994
00:43:04,096 --> 00:43:08,266 A:middle
to receive useful information
about the user arriving at

995
00:43:08,266 --> 00:43:10,226 A:middle
or departing from
specific locations,

996
00:43:10,456 --> 00:43:11,996 A:middle
you should continue to do so.

997
00:43:12,376 --> 00:43:14,306 A:middle
Region monitoring is
more power efficient

998
00:43:14,396 --> 00:43:17,826 A:middle
and will give you more timely
information about those events.

999
00:43:18,846 --> 00:43:22,836 A:middle
In addition, Visit
Monitoring is not a replacement

1000
00:43:22,836 --> 00:43:24,276 A:middle
for significant location
changes.

1001
00:43:24,626 --> 00:43:26,426 A:middle
They provide you very
different information.

1002
00:43:26,756 --> 00:43:29,786 A:middle
Significant location changes
is about the path the user too,

1003
00:43:30,196 --> 00:43:32,846 A:middle
whereas Visit Monitoring
is about the destinations.

1004
00:43:35,556 --> 00:43:38,286 A:middle
So, what do you do when you
encounter new technology,

1005
00:43:38,286 --> 00:43:41,516 A:middle
you should try it out and
evaluate it for your use case.

1006
00:43:41,976 --> 00:43:45,976 A:middle
See if Visit Monitoring covers
something that your app needs.

1007
00:43:46,876 --> 00:43:50,836 A:middle
Then, on Thursday,
we're hosting a lab.

1008
00:43:51,456 --> 00:43:52,766 A:middle
You should come to
our lab session,

1009
00:43:52,826 --> 00:43:54,576 A:middle
bring any questions
you might have,

1010
00:43:54,576 --> 00:43:56,186 A:middle
any problems you might
have encountered,

1011
00:43:56,346 --> 00:44:00,376 A:middle
and we'll do our best to help
you get your app up and running.

1012

1013
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1014
00:43:56,346 --> 00:44:00,376 A:middle
and we'll do our best to help
you get your app up and running.

1015
00:44:00,426 --> 00:44:04,686 A:middle
Finally, please respect
your users' privacy.

1016
00:44:05,266 --> 00:44:07,086 A:middle
This is an incredible technology

1017
00:44:07,086 --> 00:44:09,676 A:middle
that will give your app a new
level of location awareness

1018
00:44:10,236 --> 00:44:14,726 A:middle
but you should try to
respect your users' privacy.

1019
00:44:14,726 --> 00:44:16,436 A:middle
Just because you can
obtain this data,

1020
00:44:16,436 --> 00:44:18,106 A:middle
doesn't mean you
necessarily should.

1021
00:44:18,866 --> 00:44:22,226 A:middle
If you have any questions,
there's going to be a session

1022
00:44:22,226 --> 00:44:24,836 A:middle
about security and
privacy later this week.

1023
00:44:24,836 --> 00:44:26,586 A:middle
I highly recommend
you attend it.

1024
00:44:27,556 --> 00:44:30,286 A:middle
With that, I'd like to invite
Stephen back up onto the stage

1025
00:44:30,286 --> 00:44:32,336 A:middle
to tell you about what's next.

1026
00:44:32,756 --> 00:44:33,446 A:middle
>> Thank you, Brad.

1027
00:44:33,876 --> 00:44:36,466 A:middle
So what else is new in
Core Location on iOS 8?

1028
00:44:37,726 --> 00:44:39,806 A:middle
Well there was that third
bullet point we talked about,

1029
00:44:39,806 --> 00:44:40,726 A:middle
Indoor Positioning.

1030
00:44:41,286 --> 00:44:42,886 A:middle
Unfortunately, we
don't have enough time

1031
00:44:42,886 --> 00:44:44,006 A:middle
to cover that in this session.

1032
00:44:44,346 --> 00:44:47,596 A:middle
In summary, we talked about
location authorization

1033
00:44:47,596 --> 00:44:50,436 A:middle
and changes and recall that
there are just three steps

1034
00:44:50,436 --> 00:44:53,336 A:middle
that you need to follow to
adopt the changes in iOS 8.

1035
00:44:53,976 --> 00:44:56,636 A:middle
First, you want to think about
how your app uses location.

1036
00:44:57,356 --> 00:44:59,266 A:middle
Second, you want to
explain it to your users.

1037
00:44:59,946 --> 00:45:03,336 A:middle
And third, you want to make the
call to request authorization.

1038

1039
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1040
00:44:59,946 --> 00:45:03,336 A:middle
And third, you want to make the
call to request authorization.

1041
00:45:03,816 --> 00:45:07,026 A:middle
And you should try this out
today because come Thursday,

1042
00:45:07,106 --> 00:45:09,116 A:middle
you come back to us with
any questions or issues

1043
00:45:09,116 --> 00:45:11,056 A:middle
that you've encountered
in our lab session.

1044
00:45:11,746 --> 00:45:14,036 A:middle
We also talked about
Visit Monitoring.

1045
00:45:14,906 --> 00:45:17,806 A:middle
Take the opportunity to assess
your apps' needs for location

1046
00:45:18,176 --> 00:45:21,446 A:middle
and see if this Visit Monitoring
is cool technology is something

1047
00:45:21,446 --> 00:45:24,966 A:middle
that your app can take advantage
of, but again remember,

1048
00:45:24,966 --> 00:45:27,416 A:middle
as Brad mentioned, to
respect your users' privacy.

1049
00:45:28,026 --> 00:45:31,286 A:middle
And also on this one, give it
a try, see what you can do,

1050
00:45:31,666 --> 00:45:33,996 A:middle
and then come back to us on
Thursday with sample code

1051
00:45:33,996 --> 00:45:36,986 A:middle
or any issues or questions that
you have regarding this new API.

1052
00:45:38,466 --> 00:45:42,496 A:middle
For more information, check out
our great documentation online.

1053
00:45:43,306 --> 00:45:45,236 A:middle
We have the Core Location
framework reference,

1054
00:45:45,766 --> 00:45:48,536 A:middle
which is updated with everything
that we've talked about today.

1055
00:45:49,566 --> 00:45:52,146 A:middle
We also have a location
and maps programming guide,

1056
00:45:52,546 --> 00:45:54,276 A:middle
which is always being
updated with new

1057
00:45:54,276 --> 00:45:57,016 A:middle
and useful information
and, as always,

1058
00:45:57,296 --> 00:45:58,856 A:middle
visit the Apple Developer
Forums.

1059

1060
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1061
00:46:01,176 --> 00:46:04,716 A:middle
For related sessions, we have a
number that we highly recommend.

1062
00:46:05,286 --> 00:46:07,896 A:middle
The first on the Modern
WebKit API, unfortunately,

1063
00:46:07,896 --> 00:46:09,686 A:middle
is at the same time as
this session, so thank you

1064
00:46:09,686 --> 00:46:12,926 A:middle
for joining us, but for more
information about web views,

1065
00:46:13,466 --> 00:46:15,726 A:middle
go check out the videos
online afterwards.

1066
00:46:16,506 --> 00:46:18,826 A:middle
Also, as we mentioned,
directly following this session,

1067
00:46:19,696 --> 00:46:21,586 A:middle
taking Core Location
Indoors for more

1068
00:46:21,586 --> 00:46:23,256 A:middle
on what's new in Core Location.

1069
00:46:24,526 --> 00:46:27,016 A:middle
Also tomorrow, I
highly recommend part 2

1070
00:46:27,016 --> 00:46:28,676 A:middle
of Writing Energy-Efficient
Code,

1071
00:46:29,206 --> 00:46:32,236 A:middle
which will cover some good
practices when using location

1072
00:46:32,516 --> 00:46:35,356 A:middle
in addition to other
technology in your apps.

1073
00:46:35,686 --> 00:46:39,466 A:middle
Also tomorrow, What's New In
iOS Notifications for more

1074
00:46:39,466 --> 00:46:41,836 A:middle
on the region-based
UILocationNotifications

1075
00:46:42,226 --> 00:46:43,026 A:middle
and more.

1076
00:46:44,026 --> 00:46:48,246 A:middle
And on Thursday, visit the
User Privacy in iOS and OS X

1077
00:46:48,636 --> 00:46:51,766 A:middle
for more details on location
authorization and privacy

1078
00:46:52,036 --> 00:46:55,776 A:middle
and other privacy-related
topics on both iOS and OS X.

1079
