X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:11,516 A:middle
[ Silence ]

2
00:00:12,016 --> 00:00:16,000 A:middle
[ Applause ]

3
00:00:16,226 --> 00:00:16,676 A:middle
>> Good morning.

4
00:00:18,066 --> 00:00:19,166 A:middle
Thanks for coming
out this morning.

5
00:00:19,426 --> 00:00:21,626 A:middle
And welcome to another
installment

6
00:00:21,626 --> 00:00:23,746 A:middle
of the UIScrollView
Session here today.

7
00:00:24,716 --> 00:00:26,886 A:middle
We've talked a few
times in previous years

8
00:00:26,886 --> 00:00:29,566 A:middle
about things related to event
handling in UIScrollView.

9
00:00:30,576 --> 00:00:34,656 A:middle
But we want to take a little bit
more time to go deeper into some

10
00:00:34,656 --> 00:00:37,236 A:middle
of the details of
event handling on iOS.

11
00:00:37,826 --> 00:00:39,536 A:middle
How it interacts
with UIScrollView.

12
00:00:39,956 --> 00:00:41,416 A:middle
How UIScrollView uses it.

13
00:00:41,716 --> 00:00:44,106 A:middle
And how you can do interesting
things once you know more

14
00:00:44,106 --> 00:00:45,546 A:middle
about it in your own apps.

15
00:00:47,086 --> 00:00:48,696 A:middle
So before we get
too much into that,

16
00:00:49,236 --> 00:00:51,266 A:middle
I want to take a brief
walk down the history

17
00:00:51,266 --> 00:00:53,016 A:middle
of touch handling
in UIScrollView.

18
00:00:53,906 --> 00:00:55,936 A:middle
So we'll start out by
going all the way back

19
00:00:55,976 --> 00:00:58,326 A:middle
to the beginning
of time in 2008.

20
00:00:58,326 --> 00:01:05,126 A:middle
With the introduction of iPhone
OS 2.0 and the first public SDK.

21
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

22
00:00:58,326 --> 00:01:05,126 A:middle
With the introduction of iPhone
OS 2.0 and the first public SDK.

23
00:01:05,996 --> 00:01:08,526 A:middle
Where US ScrollView was
built entirely on top

24
00:01:08,526 --> 00:01:11,476 A:middle
of the UITouch API
with touchesBegan,

25
00:01:11,476 --> 00:01:12,796 A:middle
moved, ended, and cancelled.

26
00:01:13,896 --> 00:01:15,546 A:middle
And it was built in the same way

27
00:01:15,546 --> 00:01:17,096 A:middle
that you would have
written any other bit

28
00:01:17,096 --> 00:01:19,096 A:middle
of code using those
UITouch APIs.

29
00:01:19,946 --> 00:01:23,086 A:middle
And it had a few
limitations that all

30
00:01:23,086 --> 00:01:24,186 A:middle
of you folks were trying to work

31
00:01:24,186 --> 00:01:26,536 A:middle
around by subclassing
UIScrollView

32
00:01:26,536 --> 00:01:28,326 A:middle
and overriding those
touch methods.

33
00:01:28,956 --> 00:01:30,786 A:middle
And it was difficult to
do some of these things

34
00:01:30,786 --> 00:01:33,146 A:middle
because you didn't necessarily
know how the internals

35
00:01:33,146 --> 00:01:34,686 A:middle
of UIScrollView itself worked.

36
00:01:35,326 --> 00:01:36,766 A:middle
And so there were
attempts to add things

37
00:01:36,766 --> 00:01:38,546 A:middle
like Nested ScrollView Support.

38
00:01:38,696 --> 00:01:40,366 A:middle
Putting one ScrollView
inside another.

39
00:01:40,936 --> 00:01:44,106 A:middle
And this was much harder than
it probably should have been,

40
00:01:44,106 --> 00:01:48,796 A:middle
so a year later, in 2009, we
had a big update to UIScrollView

41
00:01:49,186 --> 00:01:53,236 A:middle
that changed pretty much
everything about how it looked

42
00:01:53,236 --> 00:01:55,596 A:middle
at touches and used
those touches.

43
00:01:55,906 --> 00:01:57,676 A:middle
And right out of the
box it added support

44
00:01:57,676 --> 00:01:59,556 A:middle
for nesting one ScrollView
inside another

45
00:01:59,616 --> 00:02:02,656 A:middle
so that you didn't have to do
any of that work or subclassing

46
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

47
00:01:59,616 --> 00:02:02,656 A:middle
so that you didn't have to do
any of that work or subclassing

48
00:02:02,656 --> 00:02:04,546 A:middle
or understanding internals
in order to make that happen.

49
00:02:05,906 --> 00:02:07,716 A:middle
And then later that
year we introduced the

50
00:02:07,716 --> 00:02:11,626 A:middle
UIGestureRecognizer API which
really exposed the internals

51
00:02:11,626 --> 00:02:13,966 A:middle
of how UIScrollView had
started doing these things,

52
00:02:14,246 --> 00:02:15,756 A:middle
and let you add that
kind of support

53
00:02:15,756 --> 00:02:17,256 A:middle
into other views
in your own apps.

54
00:02:18,686 --> 00:02:23,406 A:middle
Then in 2010, with iOS 4.0 there
was another fairly big update

55
00:02:23,696 --> 00:02:26,506 A:middle
with the release of the
iPhone 4 and retina displays.

56
00:02:27,196 --> 00:02:29,476 A:middle
Now the interesting thing
that happened here is

57
00:02:29,476 --> 00:02:33,156 A:middle
that because each dimension
of the screen doubled

58
00:02:33,156 --> 00:02:36,136 A:middle
in pixel density, it meant
that there was more precision

59
00:02:36,136 --> 00:02:37,846 A:middle
that you could get when
positioning elements.

60
00:02:38,386 --> 00:02:40,456 A:middle
Now for most things you
still position things

61
00:02:40,456 --> 00:02:42,356 A:middle
on point boundaries,
so that you could run

62
00:02:42,356 --> 00:02:45,656 A:middle
across different iOS devices
that were either 1X or 2X.

63
00:02:46,226 --> 00:02:48,366 A:middle
But US ScrollView added
support for scrolling

64
00:02:48,366 --> 00:02:50,516 A:middle
at half point boundaries
so that it could scroll

65
00:02:50,516 --> 00:02:52,336 A:middle
to individual pixel granularity.

66
00:02:52,646 --> 00:02:55,096 A:middle
Which gave a much, much
smoother scrolling experience.

67
00:02:56,016 --> 00:02:58,826 A:middle
A year later with iOS
5, we added support

68
00:02:58,886 --> 00:03:01,266 A:middle
for exposing those
gesture recognizers

69
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

70
00:02:58,886 --> 00:03:01,266 A:middle
for exposing those
gesture recognizers

71
00:03:01,266 --> 00:03:03,356 A:middle
that we had previously
updated and used

72
00:03:03,706 --> 00:03:06,416 A:middle
to add these more advanced
scrolling techniques

73
00:03:06,416 --> 00:03:07,316 A:middle
onto UIScrollView.

74
00:03:07,686 --> 00:03:11,006 A:middle
And once these gestures were
exposed, it made it a lot easier

75
00:03:11,006 --> 00:03:13,296 A:middle
to interact with the
ScrollView in your own apps.

76
00:03:13,646 --> 00:03:16,016 A:middle
So you could do things like
get the pan gesture recognizer

77
00:03:16,016 --> 00:03:18,056 A:middle
and set up failure
requirements against it,

78
00:03:18,366 --> 00:03:19,676 A:middle
or do all kinds of
things like that.

79
00:03:19,676 --> 00:03:21,356 A:middle
And if you go back to
previous years' sessions,

80
00:03:21,356 --> 00:03:22,956 A:middle
you can see a number of
places where we've talked

81
00:03:22,956 --> 00:03:24,526 A:middle
about how you can do
that sort of thing.

82
00:03:25,066 --> 00:03:27,976 A:middle
So a lot of interesting things
became possible once you had

83
00:03:28,056 --> 00:03:30,146 A:middle
access to the gesture
recognizers themselves.

84
00:03:30,146 --> 00:03:33,986 A:middle
But in 2012 with iOS 6,

85
00:03:34,276 --> 00:03:38,416 A:middle
there was another fairly large
internal update to UIScrollView

86
00:03:38,646 --> 00:03:40,536 A:middle
that added support
for resting touches.

87
00:03:40,966 --> 00:03:44,086 A:middle
And so what I mean by this
is that in previous years,

88
00:03:44,086 --> 00:03:48,166 A:middle
prior to iOS 6, if you put a
finger down on a UIScrollView ,

89
00:03:48,446 --> 00:03:49,946 A:middle
that was the finger the
ScrollView was going

90
00:03:49,946 --> 00:03:50,966 A:middle
to track for scrolling.

91
00:03:51,426 --> 00:03:53,756 A:middle
So if you did something like
grab an iPad around the edge,

92
00:03:53,756 --> 00:03:56,536 A:middle
and your thumb happened to land
on a ScrollView, you would try

93
00:03:56,536 --> 00:03:58,426 A:middle
and scroll with another finger
and nothing would happen

94
00:03:58,426 --> 00:04:00,166 A:middle
because it was tracking
that first finger.

95
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

96
00:03:58,426 --> 00:04:00,166 A:middle
because it was tracking
that first finger.

97
00:04:01,376 --> 00:04:03,886 A:middle
Now with iOS 6 we started
looking at all of the touches

98
00:04:03,886 --> 00:04:05,386 A:middle
that were anywhere
in the ScrollView

99
00:04:05,626 --> 00:04:07,006 A:middle
and only paying attention
to the ones

100
00:04:07,006 --> 00:04:08,846 A:middle
that were actually
moving at any given time.

101
00:04:09,326 --> 00:04:11,246 A:middle
So even if you had a touch
sitting there resting

102
00:04:11,246 --> 00:04:12,826 A:middle
and not going anywhere,
it didn't prevent you

103
00:04:12,826 --> 00:04:15,296 A:middle
from scrolling, and you
could still interact

104
00:04:15,296 --> 00:04:16,236 A:middle
with other fingers.

105
00:04:16,896 --> 00:04:18,565 A:middle
So that was a really big
and interesting update,

106
00:04:18,565 --> 00:04:20,266 A:middle
and we'll see some
ways that we are going

107
00:04:20,266 --> 00:04:21,606 A:middle
to take advantage
of that later today.

108
00:04:22,646 --> 00:04:24,966 A:middle
And finally last year with
iOS 7, we added support

109
00:04:24,966 --> 00:04:27,206 A:middle
for dismissing the
keyboard using UIScrollView.

110
00:04:27,206 --> 00:04:28,486 A:middle
And there was a new property

111
00:04:28,486 --> 00:04:30,156 A:middle
that you may have noticed
was added last year

112
00:04:30,156 --> 00:04:32,856 A:middle
that lets you decide whether
or not scrolling a scroll view

113
00:04:32,856 --> 00:04:35,806 A:middle
and having a finger intersect
the keyboard will push it

114
00:04:35,806 --> 00:04:36,646 A:middle
down off the screen.

115
00:04:38,206 --> 00:04:39,006 A:middle
So over the years,

116
00:04:39,006 --> 00:04:42,116 A:middle
the UIScrollView API has
remained fairly stable.

117
00:04:42,186 --> 00:04:44,336 A:middle
There haven't been a lot
of changes in the API.

118
00:04:44,976 --> 00:04:46,776 A:middle
But under the covers
there have been a lot

119
00:04:46,776 --> 00:04:48,656 A:middle
of internal touch
handling changes

120
00:04:48,856 --> 00:04:50,626 A:middle
that have added all
sorts of new things

121
00:04:50,626 --> 00:04:53,386 A:middle
that you can do once
you know about how some

122
00:04:53,386 --> 00:04:54,786 A:middle
of these internals
of the ScrollView

123
00:04:54,786 --> 00:04:56,286 A:middle
and touch handling on iOS work.

124
00:04:57,306 --> 00:04:59,656 A:middle
So we're going to take
a look at three areas

125
00:04:59,656 --> 00:05:00,506 A:middle
of touch handling today.

126
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

127
00:04:59,656 --> 00:05:00,506 A:middle
of touch handling today.

128
00:05:00,506 --> 00:05:03,396 A:middle
And then we're going to
talk about three things

129
00:05:03,396 --> 00:05:05,916 A:middle
that you can do once you
know about these bits

130
00:05:05,916 --> 00:05:07,306 A:middle
of touch handling information.

131
00:05:08,346 --> 00:05:11,616 A:middle
So three techniques based on
three areas of touch handling.

132
00:05:12,346 --> 00:05:14,296 A:middle
And those types of touch
handling things we'll talk

133
00:05:14,296 --> 00:05:16,806 A:middle
about -- well first off we're
going to start with Hit Testing.

134
00:05:16,916 --> 00:05:18,976 A:middle
Because Hit Testing is
the most fundamental part

135
00:05:18,976 --> 00:05:20,216 A:middle
of handling touches on iOS.

136
00:05:20,966 --> 00:05:23,186 A:middle
When a finger comes down on
the screen, what got hit?

137
00:05:23,186 --> 00:05:24,896 A:middle
And what element are you
trying to interact with?

138
00:05:25,516 --> 00:05:27,616 A:middle
So we'll look a little bit
more deeply at how it works,

139
00:05:27,616 --> 00:05:30,426 A:middle
and ways that you can adjust
things during Hit Testing

140
00:05:30,426 --> 00:05:31,746 A:middle
to get interesting behaviors.

141
00:05:33,196 --> 00:05:34,356 A:middle
Then we'll spend
some time talking

142
00:05:34,356 --> 00:05:35,726 A:middle
about UIGestureRecognizer.

143
00:05:36,156 --> 00:05:38,076 A:middle
Now this is something we've
talked about many times

144
00:05:38,076 --> 00:05:39,956 A:middle
in the past in various
different sessions.

145
00:05:40,356 --> 00:05:41,846 A:middle
But we have some
new, interesting ways

146
00:05:41,846 --> 00:05:43,306 A:middle
that you can use
Gesture Recognizers,

147
00:05:43,306 --> 00:05:45,796 A:middle
along with your ScrollViews
that will give you some ideas

148
00:05:45,796 --> 00:05:47,346 A:middle
about things you
can do in your apps.

149
00:05:47,426 --> 00:05:48,536 A:middle
So we'll get to that
later today.

150
00:05:48,536 --> 00:05:51,136 A:middle
And then we're going to
talk about touch delivery.

151
00:05:51,786 --> 00:05:54,006 A:middle
So the way that touches
flow through the system.

152
00:05:54,006 --> 00:05:55,106 A:middle
Get delivered to views.

153
00:05:55,106 --> 00:05:56,796 A:middle
Interact with Gesture
Recognizers.

154
00:05:57,096 --> 00:05:58,846 A:middle
And how you can take
advantage of that information

155
00:05:58,846 --> 00:06:01,946 A:middle
in other interesting ways once
we get to our three techniques.

156
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

157
00:05:58,846 --> 00:06:01,946 A:middle
in other interesting ways once
we get to our three techniques.

158
00:06:03,316 --> 00:06:04,566 A:middle
So how about those
three techniques?

159
00:06:05,296 --> 00:06:07,166 A:middle
We're going to talk about
transparent overlays.

160
00:06:07,566 --> 00:06:09,846 A:middle
Putting content on top
of your other content

161
00:06:09,846 --> 00:06:12,226 A:middle
and making sure you can still
interact with everything

162
00:06:12,226 --> 00:06:14,026 A:middle
and things don't end
up behaving strangely.

163
00:06:15,226 --> 00:06:17,136 A:middle
We'll talk about
dragging while scrolling.

164
00:06:17,756 --> 00:06:19,736 A:middle
This is something that I
actually find pretty exciting

165
00:06:19,736 --> 00:06:22,226 A:middle
and think is a really cool thing
you can do with ScrollViews.

166
00:06:22,576 --> 00:06:25,116 A:middle
So you can have content
in your ScrollView

167
00:06:25,116 --> 00:06:26,986 A:middle
that you interact with,
say something that you want

168
00:06:26,986 --> 00:06:28,176 A:middle
to pick up and drag around.

169
00:06:28,926 --> 00:06:30,736 A:middle
But often you might
want to then be able

170
00:06:30,736 --> 00:06:32,626 A:middle
to continue scrolling
with another finger.

171
00:06:33,196 --> 00:06:35,476 A:middle
And I mentioned before that we
have this resting touch support,

172
00:06:35,476 --> 00:06:37,016 A:middle
and ideas about how
you can interact

173
00:06:37,016 --> 00:06:38,416 A:middle
with multiple fingers
on the ScrollView.

174
00:06:38,416 --> 00:06:41,386 A:middle
So we'll look at how you can use
that information to add support

175
00:06:41,386 --> 00:06:43,876 A:middle
for dragging content while
also scrolling the ScrollView.

176
00:06:44,426 --> 00:06:47,136 A:middle
And then finally
we'll end by talking

177
00:06:47,136 --> 00:06:48,536 A:middle
about highlighting objects.

178
00:06:48,796 --> 00:06:52,496 A:middle
Which may not seem at first
like a really key part,

179
00:06:52,846 --> 00:06:55,356 A:middle
but part of the reason
it doesn't seem so key

180
00:06:55,356 --> 00:06:58,006 A:middle
and interesting is because it
just often does the right thing

181
00:06:58,006 --> 00:06:58,986 A:middle
and you don't think about it.

182
00:06:59,676 --> 00:07:01,346 A:middle
And so in places
where it doesn't,

183
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

184
00:06:59,676 --> 00:07:01,346 A:middle
And so in places
where it doesn't,

185
00:07:01,346 --> 00:07:02,956 A:middle
you end up seeing
some jarring effects.

186
00:07:03,276 --> 00:07:04,876 A:middle
And we'll talk about
how that happens

187
00:07:04,876 --> 00:07:06,386 A:middle
and how we can go
about fixing it.

188
00:07:06,656 --> 00:07:08,886 A:middle
And look at some internal
implementation ideas

189
00:07:08,886 --> 00:07:11,166 A:middle
of how ScrollView has
taken Gesture Recognizers

190
00:07:11,636 --> 00:07:13,386 A:middle
to do interesting
things with highlights.

191
00:07:14,656 --> 00:07:18,726 A:middle
So three areas of touch
handling and three techniques.

192
00:07:19,606 --> 00:07:21,736 A:middle
So let's get started with
transparent overlays.

193
00:07:22,576 --> 00:07:24,366 A:middle
Of course if we're going to
put things on top of things,

194
00:07:24,366 --> 00:07:25,976 A:middle
that's probably going
to involve some sort

195
00:07:25,976 --> 00:07:27,196 A:middle
of information about
Hit Testing.

196
00:07:27,656 --> 00:07:28,396 A:middle
So we'll get into that.

197
00:07:29,976 --> 00:07:31,756 A:middle
But before we do, I just
want to give you a quick idea

198
00:07:31,756 --> 00:07:34,626 A:middle
of the kind of thing I'm talking
about and where we use this sort

199
00:07:34,626 --> 00:07:36,396 A:middle
of technique in iOS ourselves.

200
00:07:37,116 --> 00:07:40,116 A:middle
So let's take a look at the home
screen, where we added spotlight

201
00:07:40,116 --> 00:07:41,956 A:middle
in iOS 7 up at the
top of the screen.

202
00:07:42,286 --> 00:07:45,056 A:middle
And you can drag a finger down
and pull Spotlight down in

203
00:07:45,056 --> 00:07:46,196 A:middle
from the top of the screen.

204
00:07:47,526 --> 00:07:49,176 A:middle
Believe it or not, this
is actually done using

205
00:07:49,176 --> 00:07:50,016 A:middle
a UIScrollView.

206
00:07:50,996 --> 00:07:54,016 A:middle
It's really more of a
transparent overlay ScrollView.

207
00:07:54,016 --> 00:07:55,846 A:middle
It doesn't really
draw anything itself.

208
00:07:56,366 --> 00:07:58,506 A:middle
But it's an interesting
technique, and we'll take a look

209
00:07:58,506 --> 00:08:00,296 A:middle
at how we can use
this in our own apps.

210
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

211
00:07:58,506 --> 00:08:00,296 A:middle
at how we can use
this in our own apps.

212
00:08:00,886 --> 00:08:03,126 A:middle
So before I get too much into
the details of how it works

213
00:08:03,126 --> 00:08:04,816 A:middle
or take you through slides
or anything, we're just going

214
00:08:04,816 --> 00:08:06,496 A:middle
to have Eliza come
up and do a demo

215
00:08:06,496 --> 00:08:08,856 A:middle
to show you what
we're going to build.

216
00:08:09,516 --> 00:08:15,766 A:middle
[ Applause ]

217
00:08:16,266 --> 00:08:18,276 A:middle
>> Hi. All right.

218
00:08:18,396 --> 00:08:20,826 A:middle
So I've got a little app here
that I've started building.

219
00:08:20,826 --> 00:08:22,336 A:middle
It doesn't do very much yet.

220
00:08:22,686 --> 00:08:26,446 A:middle
It draws a bunch of dots in a
canvas, and soon we're going

221
00:08:26,446 --> 00:08:28,216 A:middle
to add support for
dragging them around.

222
00:08:28,756 --> 00:08:31,496 A:middle
But for now, the
dots highlight --

223
00:08:31,496 --> 00:08:34,426 A:middle
I hope you can see that
-- in touchesBegan.

224
00:08:34,426 --> 00:08:36,196 A:middle
And then they un-highlight
in Touches Ended

225
00:08:36,196 --> 00:08:37,076 A:middle
and Touches Cancelled.

226
00:08:37,885 --> 00:08:42,986 A:middle
So the first thing that I want
to do here is add a drawer

227
00:08:42,986 --> 00:08:44,566 A:middle
that you can pull
down over the top

228
00:08:44,566 --> 00:08:46,546 A:middle
by panning anywhere
in the canvas.

229
00:08:46,976 --> 00:08:49,656 A:middle
And so in order to do
that we're going to need

230
00:08:49,716 --> 00:08:53,586 A:middle
to add a ScrollView that
covers the entire canvas.

231
00:08:53,776 --> 00:08:56,816 A:middle
So I'm going to switch
over to the code,

232
00:08:57,166 --> 00:08:59,956 A:middle
and you can see this
is pretty much it.

233
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

234
00:09:00,276 --> 00:09:02,586 A:middle
I've got a little DotView class

235
00:09:03,336 --> 00:09:07,386 A:middle
that can make a random
DotView that's a random color.

236
00:09:08,316 --> 00:09:11,656 A:middle
And I've got a canvasView
that has 25 dots added to it

237
00:09:11,656 --> 00:09:14,276 A:middle
and they're arranged
randomly in the view.

238
00:09:14,926 --> 00:09:18,116 A:middle
So the first thing that I'm
going to do is add a ScrollView.

239
00:09:18,436 --> 00:09:20,106 A:middle
And I'm also going
to add a drawerView.

240
00:09:20,106 --> 00:09:22,686 A:middle
And what we're going to do is
take advantage of the new API

241
00:09:22,686 --> 00:09:26,026 A:middle
that was added in iOS
8, UIVisualEffectsView,

242
00:09:26,026 --> 00:09:27,966 A:middle
which allows you to
create blurry content

243
00:09:28,286 --> 00:09:29,156 A:middle
in your applications.

244
00:09:29,156 --> 00:09:31,346 A:middle
And so since this drawer
is going to cover part

245
00:09:31,346 --> 00:09:34,296 A:middle
of the screen, we'll get a sense
of depth by making it blurry.

246
00:09:35,566 --> 00:09:38,886 A:middle
So go ahead and make these guys.

247
00:09:40,026 --> 00:09:43,246 A:middle
So our ScrollView gets
added to the view.

248
00:09:44,636 --> 00:09:48,356 A:middle
The drawerView is going to be a
UIVisualEffectView initialized

249
00:09:48,356 --> 00:09:48,976 A:middle
with an effect.

250
00:09:49,906 --> 00:09:53,396 A:middle
The effect I want is a dark
blur, so I'm going to ask

251
00:09:53,586 --> 00:09:56,186 A:middle
for a UIBlurEffect
effectWithStyle

252
00:09:56,746 --> 00:09:57,816 A:middle
BlurEffectStyleDark.

253
00:09:57,986 --> 00:10:02,106 A:middle
I need to choose a
frame for my drawerView.

254
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

255
00:09:57,986 --> 00:10:02,106 A:middle
I need to choose a
frame for my drawerView.

256
00:10:02,106 --> 00:10:04,196 A:middle
I'm going to make it
the width of the screen

257
00:10:04,196 --> 00:10:07,476 A:middle
and 650 points tall --
because that looked good

258
00:10:07,476 --> 00:10:08,086 A:middle
when I tried it out.

259
00:10:08,316 --> 00:10:10,896 A:middle
And I'm going to add it to
the ScrollView as a subview.

260
00:10:11,876 --> 00:10:14,416 A:middle
Okay. One more thing we need

261
00:10:14,416 --> 00:10:17,766 A:middle
to do is tell the ScrollView
how big its content is.

262
00:10:17,766 --> 00:10:21,706 A:middle
So I'm going to make a
content size which is the width

263
00:10:21,876 --> 00:10:24,546 A:middle
of the screen, but the height

264
00:10:24,546 --> 00:10:26,616 A:middle
of my bounds plus the
drawerViews frame.

265
00:10:26,616 --> 00:10:28,466 A:middle
And that will give
us enough room

266
00:10:28,466 --> 00:10:30,746 A:middle
to scroll the drawerView
entirely off the screen

267
00:10:31,226 --> 00:10:32,016 A:middle
at the top.

268
00:10:33,536 --> 00:10:35,896 A:middle
And finally I'm going to set
a starting content offset

269
00:10:36,176 --> 00:10:38,656 A:middle
to make the app launch with
the drawerView scrolled off

270
00:10:38,706 --> 00:10:39,086 A:middle
the screen.

271
00:10:40,036 --> 00:10:41,686 A:middle
So I'll go ahead and run it.

272
00:10:42,636 --> 00:10:43,256 A:middle
All right.

273
00:10:43,256 --> 00:10:44,206 A:middle
So we've got our dots.

274
00:10:44,206 --> 00:10:47,996 A:middle
And now if I scroll I
get a blurry drawer.

275
00:10:48,926 --> 00:10:52,066 A:middle
Cool. Unfortunately I've
broken touch handling.

276
00:10:52,286 --> 00:10:54,246 A:middle
So if I now scroll
the drawer away

277
00:10:54,246 --> 00:10:56,516 A:middle
and I try to tap on these dots.

278
00:10:57,176 --> 00:10:58,786 A:middle
I'm tapping; nothing's
happening.

279
00:10:59,586 --> 00:11:02,666 A:middle
So the reason for that might be
apparent if you think about it.

280
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

281
00:10:59,586 --> 00:11:02,666 A:middle
So the reason for that might be
apparent if you think about it.

282
00:11:02,666 --> 00:11:05,046 A:middle
I've taken a big,
screen-sized UIScrollView

283
00:11:05,046 --> 00:11:06,236 A:middle
and I've plunked it down on top.

284
00:11:06,556 --> 00:11:08,646 A:middle
So of course it's
blocking touch delivery

285
00:11:08,866 --> 00:11:10,026 A:middle
to the content underneath.

286
00:11:11,006 --> 00:11:12,166 A:middle
Touches are going
to the ScrollView

287
00:11:12,166 --> 00:11:13,666 A:middle
and that's what's
allowing me to pan.

288
00:11:13,926 --> 00:11:15,356 A:middle
All right.

289
00:11:15,466 --> 00:11:17,336 A:middle
So to fix it, what can we do?

290
00:11:18,696 --> 00:11:21,506 A:middle
One thing you might consider
doing is turning off user

291
00:11:21,506 --> 00:11:22,826 A:middle
interaction on the ScrollView.

292
00:11:22,826 --> 00:11:25,666 A:middle
That's generally a pretty good
way of getting touches to pass

293
00:11:25,806 --> 00:11:28,356 A:middle
through a user interface
element that you've added.

294
00:11:29,116 --> 00:11:32,046 A:middle
So let's try that.

295
00:11:32,546 --> 00:11:34,106 A:middle
ScrollView set
userIinteractionEnabled.

296
00:11:34,106 --> 00:11:35,666 A:middle
No. Run it again.

297
00:11:35,666 --> 00:11:41,026 A:middle
And now excellent touches
are now going to my dots

298
00:11:41,026 --> 00:11:44,056 A:middle
as they were before,
but if I try to scroll,

299
00:11:44,506 --> 00:11:45,526 A:middle
of course nothing happens.

300
00:11:45,946 --> 00:11:46,616 A:middle
So why not?

301
00:11:46,906 --> 00:11:48,896 A:middle
Well obviously I've
disabled user interaction

302
00:11:48,896 --> 00:11:51,036 A:middle
on the ScrollView
so it can't scroll.

303
00:11:51,436 --> 00:11:52,976 A:middle
All right so that's no good.

304
00:11:54,816 --> 00:11:58,716 A:middle
So the way we're going
to actually fix this --

305
00:11:58,916 --> 00:12:00,516 A:middle
at least the way we're
going to start to fix it --

306
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

307
00:11:58,916 --> 00:12:00,516 A:middle
at least the way we're
going to start to fix it --

308
00:12:00,936 --> 00:12:03,256 A:middle
is to use a technique
that Josh and I introduced

309
00:12:03,566 --> 00:12:07,096 A:middle
in a session two years
ago on open GL content,

310
00:12:07,096 --> 00:12:08,226 A:middle
and it works here as well.

311
00:12:08,546 --> 00:12:11,086 A:middle
You can take the
ScrollView's pan gesture --

312
00:12:11,336 --> 00:12:13,816 A:middle
which is exposed as a
property that you can access.

313
00:12:13,956 --> 00:12:18,136 A:middle
And you can move it onto another
view in order to restore panning

314
00:12:18,136 --> 00:12:20,976 A:middle
in a situation where the
ScrollView isn't suitable

315
00:12:20,976 --> 00:12:23,076 A:middle
to being the view that's
getting the touches.

316
00:12:23,436 --> 00:12:26,126 A:middle
So we're going to use that
technique here and we're going

317
00:12:26,126 --> 00:12:29,186 A:middle
to actually move the
ScrollView's pan gesture

318
00:12:29,186 --> 00:12:33,316 A:middle
recognizer onto my
view controllers view.

319
00:12:33,316 --> 00:12:34,796 A:middle
So onto the ScrollView's
superview.

320
00:12:35,836 --> 00:12:37,976 A:middle
This way the ScrollView
can continue

321
00:12:37,976 --> 00:12:39,746 A:middle
to have its user
interaction disabled,

322
00:12:39,746 --> 00:12:40,926 A:middle
but the panning will
be restored.

323
00:12:46,046 --> 00:12:48,606 A:middle
So I've got touches
going to the dots.

324
00:12:48,866 --> 00:12:51,416 A:middle
And now I also have
panning working.

325
00:12:51,526 --> 00:12:53,396 A:middle
So now it's kind
of starting to look

326
00:12:53,396 --> 00:12:56,536 A:middle
like we've got this overlaid
behavior the way we want it.

327
00:12:56,536 --> 00:12:59,596 A:middle
Let me go ahead and add some
additional dots in the drawer --

328
00:12:59,986 --> 00:13:03,086 A:middle
because we need something
in the drawer.

329
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

330
00:12:59,986 --> 00:13:03,086 A:middle
because we need something
in the drawer.

331
00:13:03,896 --> 00:13:06,636 A:middle
So I'm going to say add
20 dots to the drawerView.

332
00:13:06,896 --> 00:13:08,256 A:middle
Notice that when I do this I ask

333
00:13:08,506 --> 00:13:10,316 A:middle
for the drawerView's
content view.

334
00:13:10,856 --> 00:13:14,496 A:middle
This is because the drawerView
is a UIVisualEffectsView.

335
00:13:14,496 --> 00:13:18,346 A:middle
And UIVisualEffectViews are
doing a lot of work in order

336
00:13:18,346 --> 00:13:19,456 A:middle
to make that blur happen.

337
00:13:19,686 --> 00:13:22,576 A:middle
And in order to avoid
and interfering with it,

338
00:13:22,576 --> 00:13:23,796 A:middle
you add additional content

339
00:13:23,826 --> 00:13:25,526 A:middle
into this content
view that they expose.

340
00:13:26,116 --> 00:13:31,046 A:middle
And then in order to
differentiate the drawer

341
00:13:31,046 --> 00:13:33,336 A:middle
from the canvass, I'm going

342
00:13:33,336 --> 00:13:36,026 A:middle
to arrange the dots
neatly in the drawerView.

343
00:13:36,026 --> 00:13:38,816 A:middle
All right so can run this.

344
00:13:39,626 --> 00:13:40,526 A:middle
Pull the drawer down.

345
00:13:40,986 --> 00:13:42,336 A:middle
I've got my neatly
arranged dots.

346
00:13:43,526 --> 00:13:46,176 A:middle
I can interact with the
dots in the canvass,

347
00:13:46,696 --> 00:13:50,186 A:middle
but I can't interact with
the dots in the drawer.

348
00:13:50,186 --> 00:13:53,476 A:middle
And in fact moreover, if you
look through the drawer at this

349
00:13:53,476 --> 00:13:56,346 A:middle
like orange and blue guy here,
you can see that I can interact

350
00:13:56,346 --> 00:13:58,296 A:middle
with the dots that are
behind the drawer still.

351
00:13:58,296 --> 00:14:01,976 A:middle
All right so now why
is that happening?

352
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

353
00:13:58,296 --> 00:14:01,976 A:middle
All right so now why
is that happening?

354
00:14:02,126 --> 00:14:05,296 A:middle
Well, I disabled user
interaction on the ScrollView

355
00:14:05,296 --> 00:14:08,186 A:middle
and the drawerView and the
dots are in the ScrollView.

356
00:14:08,456 --> 00:14:11,636 A:middle
So touches are passing right
through the ScrollView,

357
00:14:11,636 --> 00:14:14,046 A:middle
the drawerView, the dots
to the content behind it.

358
00:14:14,046 --> 00:14:14,986 A:middle
Which is not what we want.

359
00:14:15,176 --> 00:14:20,046 A:middle
So in this case, disabling
user interaction was kind

360
00:14:20,046 --> 00:14:21,076 A:middle
of too big a hammer.

361
00:14:21,176 --> 00:14:24,346 A:middle
It got most of the behavior
that we wanted, but now as soon

362
00:14:24,346 --> 00:14:25,836 A:middle
as we want to interact
with something

363
00:14:26,156 --> 00:14:28,096 A:middle
in that view hierarchy we can't.

364
00:14:28,146 --> 00:14:30,106 A:middle
So I'm going to turn
it back over to Josh

365
00:14:30,256 --> 00:14:32,906 A:middle
to explain a finer grain
technique that we can use

366
00:14:33,246 --> 00:14:34,786 A:middle
to get the behavior
that we want here.

367
00:14:36,516 --> 00:14:41,586 A:middle
[ Applause ]

368
00:14:42,086 --> 00:14:42,416 A:middle
>> All right.

369
00:14:42,566 --> 00:14:43,446 A:middle
So we're getting closer.

370
00:14:44,716 --> 00:14:46,046 A:middle
But as Eliza was mentioning,

371
00:14:46,046 --> 00:14:48,646 A:middle
we've just gone a little bit
too far with this disabling

372
00:14:48,646 --> 00:14:50,616 A:middle
of user interaction
on the ScrollView.

373
00:14:51,136 --> 00:14:53,146 A:middle
It got part of what we
wanted, but it went beyond

374
00:14:53,146 --> 00:14:54,426 A:middle
and did a little bit too much.

375
00:14:54,876 --> 00:14:58,096 A:middle
So to start figuring out how we
can be a little bit more precise

376
00:14:58,096 --> 00:14:59,926 A:middle
in what we're trying to
do, we have to take a look

377
00:14:59,926 --> 00:15:01,166 A:middle
at how hitTesting works.

378
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

379
00:14:59,926 --> 00:15:01,166 A:middle
at how hitTesting works.

380
00:15:01,846 --> 00:15:04,206 A:middle
That is going to be using
the method hitTest:withEvent.

381
00:15:04,646 --> 00:15:07,696 A:middle
HitTest:withEvent is
the method that's used

382
00:15:07,696 --> 00:15:09,866 A:middle
when a new touch comes
down on screen to figure

383
00:15:09,866 --> 00:15:11,996 A:middle
out what we should
deliver the touch to,

384
00:15:12,236 --> 00:15:14,776 A:middle
and what gesture recognizers
should end up being involved

385
00:15:14,776 --> 00:15:15,946 A:middle
in looking at that touch.

386
00:15:17,276 --> 00:15:19,296 A:middle
So before we look at how
we're going to use it,

387
00:15:19,546 --> 00:15:21,466 A:middle
let's talk a little
bit more specifically

388
00:15:21,466 --> 00:15:23,046 A:middle
about what exactly it does.

389
00:15:23,846 --> 00:15:26,026 A:middle
And I want to do that by going
through and writing a little bit

390
00:15:26,026 --> 00:15:29,006 A:middle
of pseudo code to just show you
the order of things it does,

391
00:15:29,006 --> 00:15:30,096 A:middle
and how it goes about doing it.

392
00:15:31,096 --> 00:15:34,416 A:middle
So here I've got a swift
version of hitTest:withEvent.

393
00:15:34,416 --> 00:15:39,676 A:middle
This is our, of course,
function syntax right there.

394
00:15:41,076 --> 00:15:41,596 A:middle
So the first thing

395
00:15:41,596 --> 00:15:44,386 A:middle
that hitTest:withEvent does
is it checks to see whether

396
00:15:44,386 --> 00:15:46,326 A:middle
or not the point being
passed in that you're trying

397
00:15:46,326 --> 00:15:48,566 A:middle
to hitTest is actually
within the view or not.

398
00:15:49,046 --> 00:15:51,816 A:middle
And it does that by
checking to see is this point

399
00:15:51,816 --> 00:15:53,366 A:middle
within my views bounds?

400
00:15:53,916 --> 00:15:56,416 A:middle
So if it is, than we're
going to do some other stuff.

401
00:15:56,706 --> 00:15:58,156 A:middle
If it's not, we just return nil.

402
00:15:58,156 --> 00:16:00,926 A:middle
If the view finds that the point
it's being asked about isn't

403
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

404
00:15:58,156 --> 00:16:00,926 A:middle
If the view finds that the point
it's being asked about isn't

405
00:16:00,926 --> 00:16:03,446 A:middle
in its bounds, it
returns nil to indicate

406
00:16:03,446 --> 00:16:06,726 A:middle
that it's not interested
in this touch.

407
00:16:07,166 --> 00:16:07,666 A:middle
That point.

408
00:16:08,206 --> 00:16:14,696 A:middle
So then the next thing it
has to do is return itself

409
00:16:15,116 --> 00:16:17,056 A:middle
if it actually was
in the bounds.

410
00:16:17,276 --> 00:16:19,316 A:middle
So by default, if it
was in the bounds we

411
00:16:19,316 --> 00:16:20,756 A:middle
at least hit the view itself.

412
00:16:21,336 --> 00:16:22,886 A:middle
And that's where we were
running into trouble

413
00:16:22,886 --> 00:16:24,936 A:middle
with that transparent part
right at the beginning.

414
00:16:25,706 --> 00:16:27,586 A:middle
Even though we weren't hitting
any subviews of the ScrollView

415
00:16:27,586 --> 00:16:30,106 A:middle
and there was no content
there, as long as the touch was

416
00:16:30,106 --> 00:16:32,576 A:middle
within the ScrollView's
bounds, the ScrollView was going

417
00:16:32,576 --> 00:16:34,986 A:middle
to return itself as
the thing that got hit.

418
00:16:35,896 --> 00:16:38,806 A:middle
Now of course you can also
hitTest into subviews of a view.

419
00:16:39,346 --> 00:16:41,866 A:middle
So once we've decided that it's
actually within our bounds,

420
00:16:41,866 --> 00:16:44,296 A:middle
we're going to iterate through
all of our subviews and see

421
00:16:44,296 --> 00:16:45,036 A:middle
if it's in any of them.

422
00:16:45,036 --> 00:16:47,646 A:middle
So we're going to go
through and add an inner loop

423
00:16:47,646 --> 00:16:49,446 A:middle
where we walk all
over our subviews.

424
00:16:50,076 --> 00:16:53,106 A:middle
Now importantly here we're going
to do this from back to front.

425
00:16:53,106 --> 00:16:54,906 A:middle
Because if you think
about how rendering works,

426
00:16:55,126 --> 00:16:57,996 A:middle
we render the first subview
and then the next one

427
00:16:57,996 --> 00:17:00,006 A:middle
and then the next one, all
the way through to the end

428
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

429
00:16:57,996 --> 00:17:00,006 A:middle
and then the next one, all
the way through to the end

430
00:17:00,006 --> 00:17:01,066 A:middle
of the list of subviews.

431
00:17:01,366 --> 00:17:03,716 A:middle
And so whatever one rendered
last, is visually on top.

432
00:17:04,106 --> 00:17:06,066 A:middle
So we want to perform the
hitTest in reverse order

433
00:17:06,066 --> 00:17:08,165 A:middle
so that we would hit
the one on top first.

434
00:17:09,156 --> 00:17:11,096 A:middle
So we iterate backwards
through the subview list.

435
00:17:12,556 --> 00:17:15,616 A:middle
And ask each of our subviews
whether or not it got hit.

436
00:17:16,046 --> 00:17:19,215 A:middle
So we call hitTest:withEvent
recursively on those subviews.

437
00:17:20,096 --> 00:17:22,516 A:middle
Now if one of them does return
something other than nil,

438
00:17:23,036 --> 00:17:24,996 A:middle
we're just going to return
whatever it returned,

439
00:17:25,445 --> 00:17:26,986 A:middle
and then that will
break the recursion.

440
00:17:27,715 --> 00:17:31,176 A:middle
So the first subview that were
to hit something, it would end

441
00:17:31,176 --> 00:17:32,596 A:middle
up being returned as
the thing that got hit.

442
00:17:32,596 --> 00:17:35,336 A:middle
So that's pretty much
all there is to it.

443
00:17:35,336 --> 00:17:36,266 A:middle
It's pretty straight forward.

444
00:17:36,936 --> 00:17:41,076 A:middle
I've also got a version
here in Objective C in case

445
00:17:41,076 --> 00:17:44,966 A:middle
that big difference was
too big of a difference.

446
00:17:45,516 --> 00:17:49,066 A:middle
[ Applause ]

447
00:17:49,566 --> 00:17:52,476 A:middle
So now let's take a look at
our sample app and figure

448
00:17:52,476 --> 00:17:55,156 A:middle
out exactly how we can use this
information to get the behavior

449
00:17:55,156 --> 00:17:55,866 A:middle
that we're looking for.

450
00:17:56,546 --> 00:17:57,456 A:middle
Now first off we're going to go

451
00:17:57,456 --> 00:18:00,396 A:middle
and re-enable user
interaction on the ScrollView.

452
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

453
00:17:57,456 --> 00:18:00,396 A:middle
and re-enable user
interaction on the ScrollView.

454
00:18:00,396 --> 00:18:03,256 A:middle
Because we decided that that
was just not the right approach.

455
00:18:03,256 --> 00:18:04,156 A:middle
It was too big of a hammer.

456
00:18:04,476 --> 00:18:05,896 A:middle
So everything we're going
to talk about right now,

457
00:18:05,896 --> 00:18:08,446 A:middle
we're going to assume that we've
turned user interaction back on,

458
00:18:09,036 --> 00:18:09,996 A:middle
and go back from there.

459
00:18:11,046 --> 00:18:12,836 A:middle
So let's start out by
looking at our view hierarchy.

460
00:18:13,166 --> 00:18:15,016 A:middle
We've got that
UIViewController's view.

461
00:18:15,016 --> 00:18:16,236 A:middle
It's the root view
in our hierarchy.

462
00:18:16,236 --> 00:18:19,296 A:middle
And then to that Eliza
added a dot view --

463
00:18:19,296 --> 00:18:21,156 A:middle
a container view that
has all the dots in it.

464
00:18:21,616 --> 00:18:23,736 A:middle
So we've got a direct
subview of the view controller

465
00:18:23,736 --> 00:18:24,676 A:middle
that has all the dots.

466
00:18:25,576 --> 00:18:27,886 A:middle
Now that view has a
sibling, another subview

467
00:18:27,886 --> 00:18:28,946 A:middle
of that view controller.

468
00:18:29,506 --> 00:18:31,786 A:middle
And that's the UIScrollView.

469
00:18:32,306 --> 00:18:33,246 A:middle
So those are siblings.

470
00:18:33,316 --> 00:18:35,576 A:middle
But the UIScrollView is the
second in the subview order.

471
00:18:35,576 --> 00:18:37,856 A:middle
As we just talked in
hitTest, it's the one

472
00:18:37,856 --> 00:18:39,076 A:middle
that will get hitTested first.

473
00:18:40,426 --> 00:18:41,906 A:middle
And then we have a
subview with a ScrollView,

474
00:18:41,906 --> 00:18:42,846 A:middle
which is our drawerView.

475
00:18:42,846 --> 00:18:44,046 A:middle
That's inside the ScrollView.

476
00:18:45,076 --> 00:18:47,756 A:middle
So now let's take a look at
how touches flow through during

477
00:18:47,756 --> 00:18:49,966 A:middle
that hitTest between all
these different views.

478
00:18:50,356 --> 00:18:52,326 A:middle
And to do so it will be a little
easier if we can see them all

479
00:18:52,326 --> 00:18:53,586 A:middle
at once, so I'm just
going to split it

480
00:18:53,586 --> 00:18:55,406 A:middle
out so we can take a look
at it as the touch comes

481
00:18:55,406 --> 00:18:56,446 A:middle
down and see what happens.

482
00:18:57,386 --> 00:19:00,256 A:middle
Now first of all I'm going
to remove that DotView.

483
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

484
00:18:57,386 --> 00:19:00,256 A:middle
Now first of all I'm going
to remove that DotView.

485
00:19:00,646 --> 00:19:01,926 A:middle
Because as we already mentioned,

486
00:19:01,926 --> 00:19:03,986 A:middle
as we're hitTesting we're
going from back to front.

487
00:19:04,196 --> 00:19:07,186 A:middle
And whichever one gets hit first
and returns something will end

488
00:19:07,916 --> 00:19:09,916 A:middle
up ending the recursion
and we won't iterate

489
00:19:09,966 --> 00:19:10,796 A:middle
through the other subviews.

490
00:19:10,796 --> 00:19:14,056 A:middle
So as it starts, we're never
going to even get touches going

491
00:19:14,056 --> 00:19:15,086 A:middle
to that DotView at all.

492
00:19:15,546 --> 00:19:16,886 A:middle
So let's look at it
without that first.

493
00:19:16,886 --> 00:19:20,826 A:middle
Now let's say a touch comes
down in the drawer area,

494
00:19:21,606 --> 00:19:22,246 A:middle
let's see what happens.

495
00:19:22,246 --> 00:19:23,696 A:middle
So a touch comes down up there.

496
00:19:23,946 --> 00:19:26,356 A:middle
We start out at the rootView
-- the view controllers view.

497
00:19:26,356 --> 00:19:29,186 A:middle
And then we work our way
through its subviews and we find

498
00:19:29,186 --> 00:19:30,886 A:middle
that this ScrollView is
going to hit something,

499
00:19:30,886 --> 00:19:32,386 A:middle
and it works through
its subviews.

500
00:19:32,796 --> 00:19:34,836 A:middle
We find that the drawerView
is going to hit something.

501
00:19:34,836 --> 00:19:37,546 A:middle
And then there's probably a
dot in there; or maybe not.

502
00:19:37,546 --> 00:19:38,636 A:middle
So -- but we're at
least going to end

503
00:19:38,636 --> 00:19:40,836 A:middle
up returning the
drawerView; maybe the DotView.

504
00:19:40,976 --> 00:19:42,966 A:middle
So that part already
works; that was easy.

505
00:19:43,126 --> 00:19:44,106 A:middle
There was no problem there.

506
00:19:44,726 --> 00:19:47,316 A:middle
So now the issue came up when
we were in that transparent area

507
00:19:47,316 --> 00:19:48,736 A:middle
of the ScrollView,
that was farther down.

508
00:19:49,576 --> 00:19:50,846 A:middle
So a touch comes
down, down there.

509
00:19:51,516 --> 00:19:53,846 A:middle
We start with a viewController.

510
00:19:53,846 --> 00:19:55,066 A:middle
Looks through its subviews.

511
00:19:55,426 --> 00:19:56,486 A:middle
Finds the ScrollView.

512
00:19:56,886 --> 00:19:58,706 A:middle
And even though there's
no content visually there,

513
00:19:58,706 --> 00:19:59,476 A:middle
it's in the bounds.

514
00:19:59,476 --> 00:20:00,626 A:middle
So it returns itself.

515
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

516
00:19:59,476 --> 00:20:00,626 A:middle
So it returns itself.

517
00:20:01,906 --> 00:20:03,126 A:middle
And so that's the
place where we have

518
00:20:03,126 --> 00:20:04,286 A:middle
to do something to fix this.

519
00:20:04,836 --> 00:20:07,296 A:middle
And the fix actually
is pretty similar

520
00:20:07,296 --> 00:20:08,216 A:middle
to what I've just said there.

521
00:20:08,566 --> 00:20:09,846 A:middle
It returns itself.

522
00:20:10,376 --> 00:20:12,076 A:middle
That's the only place where
this ScrollView is going

523
00:20:12,076 --> 00:20:13,916 A:middle
to return itself from
hitTest:withEvent.

524
00:20:14,296 --> 00:20:15,876 A:middle
In the other case where
things were working,

525
00:20:15,876 --> 00:20:16,976 A:middle
it was returning
one of its subviews.

526
00:20:18,156 --> 00:20:20,586 A:middle
So we can do something
where we're taking advantage

527
00:20:20,586 --> 00:20:23,146 A:middle
of only the case where
ScrollView's returning itself.

528
00:20:23,536 --> 00:20:25,846 A:middle
Instead of returning itself,
we want to return nil.

529
00:20:26,176 --> 00:20:28,726 A:middle
Which will cause that superview
-- the view controllers view --

530
00:20:28,906 --> 00:20:30,576 A:middle
to move on and look
through the other views

531
00:20:30,576 --> 00:20:32,076 A:middle
that are subviews of itself.

532
00:20:32,656 --> 00:20:33,856 A:middle
And that would allow
us to instead

533
00:20:33,856 --> 00:20:36,786 A:middle
of hitting the ScrollView,
hit either the DotView or one

534
00:20:36,786 --> 00:20:38,896 A:middle
of the dots that are
in the DotView instead.

535
00:20:40,476 --> 00:20:42,556 A:middle
So what we can do is we
can subclass UIScrollView

536
00:20:43,026 --> 00:20:44,256 A:middle
and override hitTest:withEvent.

537
00:20:45,086 --> 00:20:48,236 A:middle
Of course once we've overridden
it, we just actually most

538
00:20:48,236 --> 00:20:50,036 A:middle
of the time want the
default behavior.

539
00:20:50,486 --> 00:20:53,656 A:middle
So we'll call super and hang on
to the result that we get there.

540
00:20:54,256 --> 00:20:58,806 A:middle
If the thing that the superclass
implementation returned was the

541
00:20:58,806 --> 00:21:00,636 A:middle
ScrollView itself,
that means that we're

542
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

543
00:20:58,806 --> 00:21:00,636 A:middle
ScrollView itself,
that means that we're

544
00:21:00,636 --> 00:21:01,756 A:middle
in that transparent area.

545
00:21:02,266 --> 00:21:03,716 A:middle
So in that case we'll
return nil.

546
00:21:03,716 --> 00:21:05,206 A:middle
Which will cause that
UIViewController --

547
00:21:05,206 --> 00:21:07,876 A:middle
the outer view -- to
continue through the subviews

548
00:21:07,876 --> 00:21:09,456 A:middle
and find the dots and
hit something in there.

549
00:21:10,366 --> 00:21:11,666 A:middle
So a pretty straight
forward fix.

550
00:21:11,916 --> 00:21:14,126 A:middle
Eliza's going to come up now
and make that change to our app

551
00:21:14,126 --> 00:21:14,786 A:middle
and see how we're doing.

552
00:21:16,516 --> 00:21:23,946 A:middle
[ Applause ]

553
00:21:24,446 --> 00:21:27,326 A:middle
>> Great. So I've started
to add this class here.

554
00:21:27,736 --> 00:21:29,246 A:middle
New subclass of UIScrollView.

555
00:21:29,246 --> 00:21:30,696 A:middle
I've called it
OverlayScrollView.

556
00:21:31,596 --> 00:21:34,606 A:middle
So let's go ahead and
add that to the project.

557
00:21:34,606 --> 00:21:37,596 A:middle
First thing I'm going
to do is just get rid

558
00:21:37,596 --> 00:21:39,366 A:middle
of the implementation
that was provided.

559
00:21:39,836 --> 00:21:44,086 A:middle
So what we want to do
here is, as Josh said,

560
00:21:44,086 --> 00:21:45,666 A:middle
override hitTest:withEvent.

561
00:21:45,956 --> 00:21:49,496 A:middle
This is really the only point
of this UIScrollView subclass is

562
00:21:49,496 --> 00:21:51,896 A:middle
to not return itself
from hitTesting.

563
00:21:52,616 --> 00:21:56,676 A:middle
So we're going to call
superHitTest:withEvent.

564
00:21:56,826 --> 00:22:00,326 A:middle
And in most of the cases
will return the view

565
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

566
00:21:56,826 --> 00:22:00,326 A:middle
And in most of the cases
will return the view

567
00:22:00,806 --> 00:22:02,806 A:middle
that was returned from
the super-implementation.

568
00:22:03,116 --> 00:22:06,636 A:middle
But if the super-implementation
returned the ScrollView,

569
00:22:06,956 --> 00:22:09,566 A:middle
that means that we were -- that
the touch came down in an area

570
00:22:09,566 --> 00:22:11,646 A:middle
of the ScrollView that didn't
have any other content.

571
00:22:11,876 --> 00:22:14,026 A:middle
And in that case we want
to allow the touch to pass

572
00:22:14,166 --> 00:22:15,636 A:middle
through the ScrollView and go

573
00:22:15,636 --> 00:22:18,466 A:middle
on to the other siblings
of the ScrollView.

574
00:22:18,786 --> 00:22:20,196 A:middle
So we'll return nil
in that case.

575
00:22:20,676 --> 00:22:22,096 A:middle
And that's pretty much it.

576
00:22:22,096 --> 00:22:23,086 A:middle
So we need to go back

577
00:22:23,256 --> 00:22:27,066 A:middle
to the view controller
and import that file.

578
00:22:27,706 --> 00:22:32,296 A:middle
And then here where I'm
creating my ScrollView,

579
00:22:32,296 --> 00:22:34,046 A:middle
instead of creating
a UIScrollView ,

580
00:22:34,396 --> 00:22:36,336 A:middle
I'm going to just create
an overlay ScrollView.

581
00:22:36,686 --> 00:22:42,046 A:middle
And I need to remember to stop
disabling user interaction,

582
00:22:42,046 --> 00:22:45,846 A:middle
because we no longer
need such a big hammer

583
00:22:45,846 --> 00:22:47,146 A:middle
to get this effect that we want.

584
00:22:47,746 --> 00:22:49,646 A:middle
So I can run this.

585
00:22:49,866 --> 00:22:53,866 A:middle
And even though user
interaction is now re-enabled,

586
00:22:53,976 --> 00:22:56,316 A:middle
I can still touch these dots.

587
00:22:56,466 --> 00:22:58,776 A:middle
So that's the effect
of returning nil

588
00:22:58,776 --> 00:22:59,666 A:middle
from hitTest:withEvent.

589
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

590
00:23:00,186 --> 00:23:02,266 A:middle
And then I can still
pull down the drawer.

591
00:23:02,676 --> 00:23:05,926 A:middle
And now I can actually touch
the dots that are in the drawer

592
00:23:06,596 --> 00:23:07,666 A:middle
and I can no longer touch

593
00:23:07,726 --> 00:23:10,216 A:middle
through the drawer
to the dots behind.

594
00:23:10,276 --> 00:23:12,926 A:middle
So -- all right, so we finally
pretty much have this working

595
00:23:12,926 --> 00:23:13,936 A:middle
the way that we want.

596
00:23:15,116 --> 00:23:20,986 A:middle
One thing to note, I'm still
adding the ScrollView's pan

597
00:23:20,986 --> 00:23:23,346 A:middle
gesture recognizer
to the super-view.

598
00:23:23,726 --> 00:23:27,286 A:middle
I need to do that even though
I've re-enabled user interaction

599
00:23:27,346 --> 00:23:30,546 A:middle
because the transparent part

600
00:23:30,546 --> 00:23:32,416 A:middle
of the ScrollView is
no longer hitTesting.

601
00:23:32,746 --> 00:23:36,266 A:middle
And the ScrollView's pan
will not get any touches

602
00:23:36,486 --> 00:23:39,116 A:middle
that don't hitTest to
the view that it's on.

603
00:23:39,426 --> 00:23:42,686 A:middle
So in order to allow scrolling
in the transparent region,

604
00:23:42,896 --> 00:23:44,756 A:middle
I still actually need
to use this technique

605
00:23:44,756 --> 00:23:47,086 A:middle
of moving the pan gesture
onto the super view.

606
00:23:47,826 --> 00:23:49,716 A:middle
Otherwise you'd be able
to scroll in the drawer,

607
00:23:50,366 --> 00:23:52,856 A:middle
which is getting hitTest, but
you wouldn't be able to scroll

608
00:23:52,856 --> 00:23:54,186 A:middle
in the other parts
of the ScrollView.

609
00:23:55,456 --> 00:23:55,786 A:middle
All right.

610
00:23:55,786 --> 00:23:58,936 A:middle
So with that all done,
I'm going to change gears,

611
00:23:58,936 --> 00:24:01,906 A:middle
and let's add dragging
to this application.

612
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

613
00:23:58,936 --> 00:24:01,906 A:middle
and let's add dragging
to this application.

614
00:24:01,906 --> 00:24:04,406 A:middle
So we're going to make it so
that these dots can be picked

615
00:24:04,406 --> 00:24:07,916 A:middle
up using a long-press gesture
recognizer and dragged around.

616
00:24:08,996 --> 00:24:12,306 A:middle
So here where I add the dots
to the view, for every dot

617
00:24:12,306 --> 00:24:16,516 A:middle
that I add, I'm going to make
a UILongPressGestureRecognizer.

618
00:24:16,846 --> 00:24:19,676 A:middle
I'm going to initialize it
with myself as the target

619
00:24:19,676 --> 00:24:21,386 A:middle
and the selectorHandle
LongPress --

620
00:24:21,386 --> 00:24:22,936 A:middle
which I'll implement
in just a moment.

621
00:24:23,596 --> 00:24:25,816 A:middle
And I'll add that gesture
recognizer to the dot.

622
00:24:25,816 --> 00:24:26,926 A:middle
So I'm going to end
up with a lot

623
00:24:26,926 --> 00:24:28,296 A:middle
of long press gesture
recognizers.

624
00:24:28,296 --> 00:24:30,486 A:middle
One per dot.

625
00:24:30,686 --> 00:24:33,416 A:middle
And here's my handleLong
PressMethod.

626
00:24:33,746 --> 00:24:37,396 A:middle
So before I even do anything in
response to these long presses,

627
00:24:37,396 --> 00:24:39,866 A:middle
I want to show you a bug
that I just introduced

628
00:24:40,356 --> 00:24:42,356 A:middle
by adding the long press at all.

629
00:24:42,356 --> 00:24:47,046 A:middle
So if I run this, and
I touch down on a dot

630
00:24:47,566 --> 00:24:48,756 A:middle
and leave my finger down,

631
00:24:48,966 --> 00:24:51,266 A:middle
the dot un-highlights
after a brief moment.

632
00:24:52,486 --> 00:24:54,766 A:middle
Even though I didn't actually
lift my finger in this case.

633
00:24:55,366 --> 00:24:58,746 A:middle
So the reason that that is
happening is that by default,

634
00:24:58,826 --> 00:25:01,996 A:middle
UIGestureRecognizers
cancel touches

635
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

636
00:24:58,826 --> 00:25:01,996 A:middle
UIGestureRecognizers
cancel touches

637
00:25:02,156 --> 00:25:04,416 A:middle
in their view once
they've recognized.

638
00:25:04,486 --> 00:25:06,586 A:middle
That's the default behavior
of a UIGestureRecognizer

639
00:25:06,586 --> 00:25:08,086 A:middle
and it's often what you want.

640
00:25:08,376 --> 00:25:10,916 A:middle
In this case it's
not what we want

641
00:25:10,956 --> 00:25:12,246 A:middle
because we actually
want the dots

642
00:25:12,326 --> 00:25:14,616 A:middle
to stay highlighted while
they're being dragged around.

643
00:25:14,706 --> 00:25:21,596 A:middle
So I can fix that here by
telling each long press gesture

644
00:25:21,676 --> 00:25:23,436 A:middle
that it does not cancel
touches in its view.

645
00:25:24,716 --> 00:25:24,926 A:middle
All right.

646
00:25:24,926 --> 00:25:25,696 A:middle
So now let's go ahead

647
00:25:25,696 --> 00:25:27,806 A:middle
and implement this
handleLongPress method.

648
00:25:28,196 --> 00:25:30,186 A:middle
We're going to get the
dot that was pressed

649
00:25:30,436 --> 00:25:32,196 A:middle
by asking the gesture
for its view.

650
00:25:32,196 --> 00:25:35,586 A:middle
And now we're going to do
what may be a familiar switch

651
00:25:35,636 --> 00:25:36,886 A:middle
statement that you tend to do

652
00:25:36,886 --> 00:25:40,926 A:middle
in UIGestureRecognizer
Target methods.

653
00:25:41,266 --> 00:25:44,696 A:middle
We're going to switch all of
the different possible states

654
00:25:44,816 --> 00:25:48,466 A:middle
that this gesture can be in,
and we're going to grab the dot

655
00:25:48,466 --> 00:25:50,416 A:middle
if the gesture just began.

656
00:25:50,786 --> 00:25:52,696 A:middle
If the gesture changed,
we're going to move the dot.

657
00:25:52,886 --> 00:25:54,426 A:middle
And if it ended or
was cancelled,

658
00:25:54,426 --> 00:25:55,596 A:middle
we're going to drop the dot.

659
00:25:55,906 --> 00:25:57,976 A:middle
So I'll go ahead and implement
all of those methods now.

660
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

661
00:26:02,696 --> 00:26:03,246 A:middle
All right.

662
00:26:04,796 --> 00:26:09,186 A:middle
So from my years as a
springboard engineer,

663
00:26:09,486 --> 00:26:12,746 A:middle
I know that when you want to
make something look grabbed,

664
00:26:12,846 --> 00:26:14,596 A:middle
you set a scale transform on it

665
00:26:14,596 --> 00:26:15,696 A:middle
to make it look a
little bit bigger.

666
00:26:15,696 --> 00:26:18,516 A:middle
And you lower its alpha
to make it look a little

667
00:26:18,516 --> 00:26:19,706 A:middle
bit transparent.

668
00:26:19,706 --> 00:26:21,636 A:middle
That way it actually
appears to have changed

669
00:26:21,636 --> 00:26:23,076 A:middle
when it starts getting grabbed.

670
00:26:24,436 --> 00:26:26,666 A:middle
And when you want to make
it stop looking grabbed,

671
00:26:27,336 --> 00:26:28,376 A:middle
you do the same thing
in reverse.

672
00:26:29,306 --> 00:26:30,426 A:middle
Transform back to identity.

673
00:26:30,426 --> 00:26:31,236 A:middle
Alpha back to one.

674
00:26:31,996 --> 00:26:34,906 A:middle
So the other thing
that you want to do

675
00:26:34,906 --> 00:26:40,296 A:middle
when grabbing an element is pull
it to the front of everything.

676
00:26:40,396 --> 00:26:43,076 A:middle
So that as the user drags it
around, it passes over all

677
00:26:43,076 --> 00:26:44,066 A:middle
of the rest of the content.

678
00:26:44,486 --> 00:26:46,306 A:middle
So these dots may have been
grabbed out of the drawer

679
00:26:46,306 --> 00:26:47,936 A:middle
or they may have been
grabbed out of the canvas.

680
00:26:47,936 --> 00:26:50,286 A:middle
What we're going to do
is re-parent the one

681
00:26:50,286 --> 00:26:54,066 A:middle
that was grabbed and move it
into the view controllers view

682
00:26:54,336 --> 00:26:56,876 A:middle
at the end of the subview
list so that it passes

683
00:26:56,876 --> 00:26:58,146 A:middle
over all of the other content.

684
00:26:58,586 --> 00:27:01,346 A:middle
So I'm going to actually
do that before grabbing it.

685
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

686
00:26:58,586 --> 00:27:01,346 A:middle
So I'm going to actually
do that before grabbing it.

687
00:27:01,346 --> 00:27:04,056 A:middle
I'm going to add it as
a subview of my view.

688
00:27:05,436 --> 00:27:09,266 A:middle
Now any time that you re-parent
a view, you need to watch

689
00:27:09,266 --> 00:27:11,996 A:middle
out for the possibility
that the origin

690
00:27:11,996 --> 00:27:14,416 A:middle
of the new view is not the same
as the origin of the old view.

691
00:27:14,416 --> 00:27:15,846 A:middle
And so it's positioned --

692
00:27:16,136 --> 00:27:20,046 A:middle
the center that it had in
the old view may not result

693
00:27:20,046 --> 00:27:21,456 A:middle
in the same position
on the screen

694
00:27:21,456 --> 00:27:22,716 A:middle
as the center in the new view.

695
00:27:23,036 --> 00:27:25,446 A:middle
So we need to do a little
bit of point conversion here

696
00:27:25,446 --> 00:27:26,776 A:middle
to make sure that the
dot doesn't appear

697
00:27:26,776 --> 00:27:29,206 A:middle
to change locations
when it was re-parented.

698
00:27:29,676 --> 00:27:32,596 A:middle
By setting it center
to the result

699
00:27:32,596 --> 00:27:37,106 A:middle
of converting its old
center from its superview.

700
00:27:37,106 --> 00:27:41,036 A:middle
So we're going to convert
that point to the view.

701
00:27:41,036 --> 00:27:43,706 A:middle
And then we're going to add
it as a subview of the view.

702
00:27:44,536 --> 00:27:45,066 A:middle
All right.

703
00:27:45,066 --> 00:27:47,186 A:middle
And then when the dot moves --

704
00:27:48,326 --> 00:27:50,156 A:middle
well so there it's
actually pretty simple.

705
00:27:50,156 --> 00:27:52,546 A:middle
What we want to do is keep the
dot under the user's finger.

706
00:27:52,776 --> 00:27:56,526 A:middle
We know that the dot is in
my view -- that's superview.

707
00:27:56,576 --> 00:27:59,486 A:middle
So we can simply set its center

708
00:27:59,486 --> 00:28:01,406 A:middle
to be the gestures
location in that view.

709
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

710
00:27:59,486 --> 00:28:01,406 A:middle
to be the gestures
location in that view.

711
00:28:01,406 --> 00:28:02,786 A:middle
All right.

712
00:28:03,286 --> 00:28:06,246 A:middle
Now there's one little
caveat here.

713
00:28:06,446 --> 00:28:09,246 A:middle
If you saw one of our sessions
from a couple years ago,

714
00:28:09,576 --> 00:28:13,426 A:middle
you'll maybe remember that
we've done a technique like this

715
00:28:13,426 --> 00:28:14,946 A:middle
where you pick something
up and drag it around.

716
00:28:14,946 --> 00:28:19,376 A:middle
And it has the potential bug
that when you start moving,

717
00:28:19,646 --> 00:28:22,636 A:middle
the element that was
grabbed jumps a little bit.

718
00:28:22,736 --> 00:28:25,046 A:middle
That's because if you
see what I'm doing here,

719
00:28:25,126 --> 00:28:27,866 A:middle
I'm adding the --
I'm moving the dot

720
00:28:28,056 --> 00:28:29,786 A:middle
so that its center
is under the touch.

721
00:28:30,336 --> 00:28:32,436 A:middle
Every frame as the user
moves their finger,

722
00:28:32,436 --> 00:28:34,436 A:middle
I'm putting the center of
the dot under their finger.

723
00:28:34,926 --> 00:28:38,216 A:middle
However, the user may have
picked the dot up from the edge.

724
00:28:38,546 --> 00:28:39,926 A:middle
They may not have picked
it up from the center.

725
00:28:40,226 --> 00:28:42,346 A:middle
So the first time they
move their finger,

726
00:28:42,346 --> 00:28:43,946 A:middle
it will jump under their finger.

727
00:28:44,356 --> 00:28:48,006 A:middle
So in order to prevent that kind
of jarring jump, what I'm going

728
00:28:48,006 --> 00:28:49,826 A:middle
to do in this case --
which is a little different

729
00:28:49,826 --> 00:28:51,626 A:middle
from how we solve
this in the past --

730
00:28:51,626 --> 00:28:55,136 A:middle
I'm just going to actually
call move dot with gesture

731
00:28:55,526 --> 00:28:56,886 A:middle
in that grab animation.

732
00:28:57,236 --> 00:28:59,936 A:middle
So that the first time
that the user grabs

733
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

734
00:29:00,046 --> 00:29:03,106 A:middle
and the dot gets picked
up, it also just animates

735
00:29:03,106 --> 00:29:04,756 A:middle
so that its center is
under their finger.

736
00:29:04,756 --> 00:29:07,356 A:middle
And that way we won't
have a jarring effect

737
00:29:07,356 --> 00:29:08,626 A:middle
when they start to
move their finger.

738
00:29:10,356 --> 00:29:14,826 A:middle
Finally, when the dot gets
dropped, we need to figure

739
00:29:14,826 --> 00:29:16,696 A:middle
out are we going to put
it down in the drawer?

740
00:29:16,696 --> 00:29:18,316 A:middle
Or are we going to put
it down in the canvas.

741
00:29:18,806 --> 00:29:23,806 A:middle
So I'm going to find out from
the gesture what is the location

742
00:29:23,806 --> 00:29:24,706 A:middle
in the drawer view.

743
00:29:26,166 --> 00:29:29,256 A:middle
And if the drawer view's
bounds contains that location,

744
00:29:29,256 --> 00:29:31,126 A:middle
that means that the
dot has been dragged

745
00:29:31,126 --> 00:29:32,396 A:middle
so that it's over the drawer.

746
00:29:33,326 --> 00:29:36,396 A:middle
And I will at that
point add the dot

747
00:29:36,396 --> 00:29:37,656 A:middle
to the drawer view's
content view.

748
00:29:38,876 --> 00:29:41,176 A:middle
Otherwise, I'll add it as
a subview of my canvas.

749
00:29:41,706 --> 00:29:45,296 A:middle
And I need to do that same
point conversion in reverse.

750
00:29:46,626 --> 00:29:49,976 A:middle
Move the dot center, so that
it's the result of converting

751
00:29:50,296 --> 00:29:54,896 A:middle
from my view that it was in
before to its new superview.

752
00:29:54,896 --> 00:29:57,976 A:middle
So that way it will appear
to stay in the same location.

753
00:29:58,386 --> 00:30:00,526 A:middle
And now we should be good to go.

754
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

755
00:29:58,386 --> 00:30:00,526 A:middle
And now we should be good to go.

756
00:30:01,146 --> 00:30:03,426 A:middle
So I can pick one
of these guys up.

757
00:30:03,936 --> 00:30:05,706 A:middle
As you saw it animated nicely

758
00:30:05,706 --> 00:30:08,876 A:middle
under where my mouse
was pointing.

759
00:30:09,256 --> 00:30:10,066 A:middle
Drag it around.

760
00:30:10,506 --> 00:30:13,446 A:middle
I can do the same in the drawer.

761
00:30:14,096 --> 00:30:14,506 A:middle
Pick it up.

762
00:30:14,996 --> 00:30:15,666 A:middle
Drag it around.

763
00:30:15,696 --> 00:30:16,426 A:middle
Put it down.

764
00:30:16,736 --> 00:30:17,516 A:middle
Pick one up here.

765
00:30:18,046 --> 00:30:19,566 A:middle
So I can move these
guys all around

766
00:30:19,566 --> 00:30:20,686 A:middle
and it seems to be working.

767
00:30:21,146 --> 00:30:23,326 A:middle
The drawer is getting
a little messy.

768
00:30:23,686 --> 00:30:26,406 A:middle
This offends me slightly
so I'm going to fix it

769
00:30:26,406 --> 00:30:29,716 A:middle
by just asking the dots to
arrange themselves neatly

770
00:30:29,716 --> 00:30:32,526 A:middle
with nifty animation in
the drawer at the moment

771
00:30:32,526 --> 00:30:33,276 A:middle
that they get picked up.

772
00:30:33,586 --> 00:30:36,616 A:middle
And I'm going to do the same
thing when we put them down.

773
00:30:37,976 --> 00:30:41,396 A:middle
So now when I pick
one up they do that.

774
00:30:41,966 --> 00:30:42,456 A:middle
Whoo!

775
00:30:43,286 --> 00:30:43,486 A:middle
Thanks.

776
00:30:44,516 --> 00:30:48,556 A:middle
[ Applause ]

777
00:30:49,056 --> 00:30:51,066 A:middle
Okay so this is pretty
much working as we want.

778
00:30:51,176 --> 00:30:52,896 A:middle
But it would be cool
if you could pick a dot

779
00:30:52,896 --> 00:30:55,916 A:middle
up with one finger, and
then scroll the drawer

780
00:30:56,026 --> 00:30:57,356 A:middle
to either bring it
down or push it back

781
00:30:57,356 --> 00:30:58,526 A:middle
up again with another finger.

782
00:30:58,876 --> 00:31:02,326 A:middle
I'm going to switch over
to an actual iPad here

783
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

784
00:30:58,876 --> 00:31:02,326 A:middle
I'm going to switch over
to an actual iPad here

785
00:31:02,326 --> 00:31:03,526 A:middle
where I've got this running.

786
00:31:04,106 --> 00:31:07,196 A:middle
So that we can do a
multi-touch thing.

787
00:31:07,196 --> 00:31:10,046 A:middle
So here's the very same
app running on an iPad.

788
00:31:10,046 --> 00:31:13,056 A:middle
The one difference is that I've
modified it so that you can see

789
00:31:13,056 --> 00:31:14,396 A:middle
where the user's
touch comes down.

790
00:31:14,396 --> 00:31:15,916 A:middle
So that little white
dot that's moving

791
00:31:15,916 --> 00:31:17,096 A:middle
around is where my finger is.

792
00:31:17,516 --> 00:31:20,246 A:middle
So you can see that
I can pick up a dot.

793
00:31:20,246 --> 00:31:23,466 A:middle
And I can actually even
pick up more than one dot.

794
00:31:24,126 --> 00:31:26,306 A:middle
This you get for free, just
because we've got a bunch

795
00:31:26,306 --> 00:31:28,406 A:middle
of long press gesture
recognizers, I can move them all

796
00:31:28,406 --> 00:31:29,316 A:middle
around at the same time.

797
00:31:29,676 --> 00:31:32,376 A:middle
But if I put down
another finger and attempt

798
00:31:32,506 --> 00:31:35,906 A:middle
to scroll the ScrollView,
nothing happens.

799
00:31:36,196 --> 00:31:38,326 A:middle
So let's try to fix that.

800
00:31:38,556 --> 00:31:41,376 A:middle
We went to be able to
simultaneously be dragging one

801
00:31:41,376 --> 00:31:42,086 A:middle
of these dots around

802
00:31:42,176 --> 00:31:44,266 A:middle
and scrolling the ScrollView
with another finger.

803
00:31:45,866 --> 00:31:47,616 A:middle
All right, so why
isn't that working?

804
00:31:49,106 --> 00:31:53,386 A:middle
So I could have fingers on
the different ones of the dots

805
00:31:53,386 --> 00:31:55,216 A:middle
and interact with
those at the same time

806
00:31:55,216 --> 00:31:56,876 A:middle
because those views
are siblings.

807
00:31:57,306 --> 00:31:59,806 A:middle
And so their gesture recognizers
don't interact with one another.

808
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

809
00:32:00,426 --> 00:32:03,536 A:middle
However, the dots are
a subview of the view

810
00:32:03,536 --> 00:32:05,036 A:middle
that has the pan
gesture recognizers.

811
00:32:05,036 --> 00:32:07,876 A:middle
So the long press gestures

812
00:32:07,876 --> 00:32:09,646 A:middle
and the pan gesture
recognizer do interact.

813
00:32:10,176 --> 00:32:13,696 A:middle
And by default, the behavior
of gesture recognizers

814
00:32:13,696 --> 00:32:16,196 A:middle
that interact is to
be mutually exclusive.

815
00:32:16,556 --> 00:32:19,856 A:middle
So once I've already picked
up a dot, I can no longer make

816
00:32:19,856 --> 00:32:21,216 A:middle
that pan gesture recognized.

817
00:32:21,546 --> 00:32:24,776 A:middle
But we can easily
tell these gestures

818
00:32:24,776 --> 00:32:26,926 A:middle
that they can recognize
simultaneously.

819
00:32:26,926 --> 00:32:28,356 A:middle
And the way we do that is

820
00:32:28,356 --> 00:32:32,276 A:middle
by becoming the long press
gesture recognizers delegate.

821
00:32:33,086 --> 00:32:37,756 A:middle
So we'll say that we conform to
UIGesture RecognizerDelegate.

822
00:32:38,206 --> 00:32:41,056 A:middle
And when we add the
long presses,

823
00:32:41,056 --> 00:32:43,596 A:middle
we'll make ourselves the
delegate of all of them.

824
00:32:44,056 --> 00:32:49,576 A:middle
And then we'll implement
a single delegate method.

825
00:32:50,136 --> 00:32:52,806 A:middle
Gesture recognizers should
recognize simultaneously

826
00:32:52,806 --> 00:32:53,986 A:middle
with gesture recognizer.

827
00:32:54,406 --> 00:32:55,726 A:middle
And in this case, just

828
00:32:55,726 --> 00:32:57,286 A:middle
as a shortcut I'm
going to return yes.

829
00:32:57,676 --> 00:32:58,896 A:middle
I can do that safely here

830
00:32:58,896 --> 00:33:00,206 A:middle
because this is a
pretty small app,

831
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

832
00:32:58,896 --> 00:33:00,206 A:middle
because this is a
pretty small app,

833
00:33:00,206 --> 00:33:01,836 A:middle
and I know that the only
gesture that I'm going

834
00:33:01,836 --> 00:33:04,466 A:middle
to be asked this question about
is the ScrollViews pan gesture.

835
00:33:04,936 --> 00:33:07,226 A:middle
In your own applications you
should be much more specific

836
00:33:07,226 --> 00:33:09,796 A:middle
here because it would be
an easy source of bugs

837
00:33:09,846 --> 00:33:13,016 A:middle
to just return yes willy-nilly
to any gesture recognizer

838
00:33:13,016 --> 00:33:15,086 A:middle
that you're asked about.

839
00:33:15,556 --> 00:33:18,846 A:middle
So once we've done that,
I'm not going to build it

840
00:33:18,846 --> 00:33:21,306 A:middle
because I've actually got an
already built copy over here.

841
00:33:22,446 --> 00:33:26,476 A:middle
So this is a result of having
made exactly those changes.

842
00:33:26,846 --> 00:33:29,216 A:middle
And let me switch over.

843
00:33:29,216 --> 00:33:30,976 A:middle
All right.

844
00:33:31,856 --> 00:33:40,256 A:middle
So now I can scroll while
one of these guys is grabbed.

845
00:33:40,516 --> 00:33:43,256 A:middle
But you can see there's
actually a pretty bad bug here.

846
00:33:43,536 --> 00:33:47,006 A:middle
If I try to scroll
this down I can.

847
00:33:47,666 --> 00:33:52,186 A:middle
But I can also scroll it using
the very same touch that's

848
00:33:52,186 --> 00:33:53,276 A:middle
dragging one of the dots.

849
00:33:53,276 --> 00:33:55,606 A:middle
Which is clearly not the
behavior that I want at all.

850
00:33:55,606 --> 00:33:57,766 A:middle
All right so now why
is that happening?

851
00:33:58,146 --> 00:34:03,076 A:middle
Well I was asked, can the pan
gesture recognize simultaneously

852
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

853
00:33:58,146 --> 00:34:03,076 A:middle
Well I was asked, can the pan
gesture recognize simultaneously

854
00:34:03,076 --> 00:34:04,616 A:middle
with the long press
gesture, and I said yes.

855
00:34:05,286 --> 00:34:07,006 A:middle
So they're recognizing
simultaneously.

856
00:34:07,006 --> 00:34:10,416 A:middle
The very same touch
is having the effect

857
00:34:10,456 --> 00:34:12,826 A:middle
of recognizing with
both gestures.

858
00:34:13,606 --> 00:34:16,416 A:middle
So that we do not want to do.

859
00:34:16,416 --> 00:34:19,156 A:middle
And I'm going to bring
Josh back on stage to talk

860
00:34:19,156 --> 00:34:21,226 A:middle
about how we can fix that
last little problem here.

861
00:34:22,341 --> 00:34:24,341 A:middle
[ Applause ]

862
00:34:24,666 --> 00:34:24,985 A:middle
>> All right.

863
00:34:24,985 --> 00:34:26,876 A:middle
Well we're getting pretty close.

864
00:34:26,876 --> 00:34:28,346 A:middle
We can almost do
what I really want,

865
00:34:28,346 --> 00:34:29,366 A:middle
to be able to drag these dots

866
00:34:29,366 --> 00:34:33,556 A:middle
around while also scrolling
this drawer on and off.

867
00:34:33,646 --> 00:34:35,525 A:middle
So let's figure out
that last little bit

868
00:34:35,525 --> 00:34:37,775 A:middle
of how we can make sure that
these gestures recognize,

869
00:34:37,775 --> 00:34:39,766 A:middle
using the touches that we
actually expect them to.

870
00:34:40,436 --> 00:34:43,065 A:middle
Let's look first again
at the view hierarchy

871
00:34:43,065 --> 00:34:44,846 A:middle
and where all this stuff is
set up, just to make sure

872
00:34:44,846 --> 00:34:46,076 A:middle
that we're all on the same page

873
00:34:46,076 --> 00:34:47,906 A:middle
about how this is
currently interacting.

874
00:34:48,616 --> 00:34:50,376 A:middle
So we've got that outer view.

875
00:34:50,376 --> 00:34:51,366 A:middle
And we've got our ScrollView.

876
00:34:51,366 --> 00:34:52,496 A:middle
And we've got our
drawerView here.

877
00:34:52,496 --> 00:34:55,716 A:middle
Now of course the long
presses that are on the dots --

878
00:34:55,716 --> 00:34:58,546 A:middle
let's look at the ones first
that are up on the drawerView.

879
00:34:58,956 --> 00:35:00,796 A:middle
They're on subviews of
the drawerView actually.

880
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

881
00:34:58,956 --> 00:35:00,796 A:middle
They're on subviews of
the drawerView actually.

882
00:35:00,796 --> 00:35:02,756 A:middle
They're each attached
to the individual dots.

883
00:35:03,636 --> 00:35:05,696 A:middle
And then we've got the
pan gesture recognizer

884
00:35:05,696 --> 00:35:06,446 A:middle
from the ScrollView.

885
00:35:06,826 --> 00:35:07,956 A:middle
Had we not done anything else,

886
00:35:07,956 --> 00:35:09,506 A:middle
it would have been
on the ScrollView.

887
00:35:09,916 --> 00:35:11,866 A:middle
But we took it and we
moved it up and put it

888
00:35:11,866 --> 00:35:15,306 A:middle
on that outer containing
UIViewControllerView.

889
00:35:15,306 --> 00:35:15,936 A:middle
So it's out there.

890
00:35:17,116 --> 00:35:19,196 A:middle
So now when a touch comes
down inside that drawer,

891
00:35:19,476 --> 00:35:20,516 A:middle
it's going to be seen by both.

892
00:35:20,516 --> 00:35:23,056 A:middle
It will be seen by any of
the long press gestures

893
00:35:23,056 --> 00:35:24,226 A:middle
that it's interacting with.

894
00:35:24,226 --> 00:35:25,616 A:middle
So if it's on a dot,
it will be seen

895
00:35:25,616 --> 00:35:26,766 A:middle
by the long press on that dot.

896
00:35:27,766 --> 00:35:30,946 A:middle
And it will also be seen by the
outer UIPanGestureRecognizer,

897
00:35:31,076 --> 00:35:31,916 A:middle
from the UIScrollView .

898
00:35:32,736 --> 00:35:33,896 A:middle
Now that's where
we're getting this bug

899
00:35:33,896 --> 00:35:35,036 A:middle
that Eliza was talking about.

900
00:35:35,976 --> 00:35:37,326 A:middle
How do we fix this?

901
00:35:37,636 --> 00:35:39,986 A:middle
We need them both to be able
to recognize at the same time.

902
00:35:40,366 --> 00:35:43,526 A:middle
Because we want one touch in
a dot to be able to move it,

903
00:35:43,526 --> 00:35:44,986 A:middle
while another touch
outside doesn't.

904
00:35:45,366 --> 00:35:46,976 A:middle
And we already know that
those gestures are going

905
00:35:46,976 --> 00:35:47,976 A:middle
to interact with one another.

906
00:35:47,976 --> 00:35:49,946 A:middle
So we definitely
need to allow them

907
00:35:49,946 --> 00:35:51,216 A:middle
to recognize simultaneously.

908
00:35:52,236 --> 00:35:53,086 A:middle
So we can't change that.

909
00:35:54,346 --> 00:35:58,286 A:middle
We want to do something
when the long press starts,

910
00:35:58,586 --> 00:36:01,476 A:middle
to prevent the pan from
recognizing with that touch.

911
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

912
00:35:58,586 --> 00:36:01,476 A:middle
to prevent the pan from
recognizing with that touch.

913
00:36:01,866 --> 00:36:03,906 A:middle
We want to allow the
long press to continue

914
00:36:03,906 --> 00:36:04,876 A:middle
so we can drag the dot.

915
00:36:05,556 --> 00:36:07,036 A:middle
But we just want
to stop the pan.

916
00:36:07,636 --> 00:36:11,006 A:middle
But we don't want to stop
it from panning at all,

917
00:36:11,006 --> 00:36:12,256 A:middle
just form panning
with that touch.

918
00:36:12,966 --> 00:36:15,566 A:middle
So we can actually take
advantage of the fact

919
00:36:16,086 --> 00:36:18,466 A:middle
that there's this
special side behavior

920
00:36:18,536 --> 00:36:21,796 A:middle
of disabling a gesture
recognizer which causes it

921
00:36:21,796 --> 00:36:23,106 A:middle
to stop looking at any touches

922
00:36:23,106 --> 00:36:24,096 A:middle
that it was currently
looking at.

923
00:36:25,076 --> 00:36:27,446 A:middle
So when the long
press recognizes,

924
00:36:27,446 --> 00:36:28,736 A:middle
we can just get the pan gesture

925
00:36:29,026 --> 00:36:30,726 A:middle
and set its enabled
state to false.

926
00:36:31,746 --> 00:36:34,066 A:middle
By setting it to false, it's
going to tell it to stop looking

927
00:36:34,066 --> 00:36:35,786 A:middle
at any touches it was
currently considering,

928
00:36:36,366 --> 00:36:37,796 A:middle
and reset itself basically.

929
00:36:37,796 --> 00:36:39,846 A:middle
So it will no longer
consider that touch.

930
00:36:40,366 --> 00:36:43,476 A:middle
The long press will still be
able to continue considering it,

931
00:36:43,476 --> 00:36:45,626 A:middle
because we didn't disable
the long press, just the pan.

932
00:36:46,656 --> 00:36:49,056 A:middle
But of course if we did that,
than you wouldn't be able to pan

933
00:36:49,056 --> 00:36:51,586 A:middle
with another touch
because we disable the pan.

934
00:36:52,456 --> 00:36:54,086 A:middle
We can actually just
go right around

935
00:36:54,086 --> 00:36:55,226 A:middle
and turn it right back on,

936
00:36:55,676 --> 00:36:57,396 A:middle
and it will still have
stopped looking at the touch

937
00:36:57,396 --> 00:36:59,346 A:middle
that it was looking at, but
it will now be able to look

938
00:36:59,346 --> 00:37:00,566 A:middle
at new touches that come down.

939
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

940
00:36:59,346 --> 00:37:00,566 A:middle
at new touches that come down.

941
00:37:01,566 --> 00:37:02,756 A:middle
So actually it turns
out this is going

942
00:37:02,756 --> 00:37:04,256 A:middle
to be really, really
easy to fix.

943
00:37:04,556 --> 00:37:06,576 A:middle
And Eliza's going to come
back and do it really quickly

944
00:37:06,576 --> 00:37:07,586 A:middle
and see where that leaves us.

945
00:37:08,516 --> 00:37:15,656 A:middle
[ Applause ]

946
00:37:16,156 --> 00:37:16,396 A:middle
>> All right.

947
00:37:16,396 --> 00:37:18,696 A:middle
So this is going to be the
fastest demo in history.

948
00:37:19,036 --> 00:37:21,036 A:middle
All I need to do
is at the moment

949
00:37:21,036 --> 00:37:26,096 A:middle
when I'm grabbing the dot,
I just need to disable

950
00:37:26,096 --> 00:37:29,716 A:middle
and then re-enable the
ScrollView's pan gesture.

951
00:37:29,986 --> 00:37:31,666 A:middle
So disabling it will cause it

952
00:37:31,666 --> 00:37:33,646 A:middle
to just stop tracking all
the touches it was tracking,

953
00:37:33,646 --> 00:37:34,676 A:middle
including the long press.

954
00:37:35,306 --> 00:37:37,646 A:middle
And re-enabling it will
allow it to be ready

955
00:37:37,726 --> 00:37:40,196 A:middle
to track new touches
that might start.

956
00:37:41,036 --> 00:37:43,896 A:middle
So I will switch back over here.

957
00:37:44,456 --> 00:37:49,606 A:middle
And launch the third
version of this.

958
00:37:49,606 --> 00:37:53,486 A:middle
So the third version here
we can now pick up a dot.

959
00:37:53,926 --> 00:37:56,286 A:middle
We can simultaneously
scroll the ScrollView.

960
00:37:56,606 --> 00:38:01,596 A:middle
But the dot itself no longer
scrolls the ScrollView.

961
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

962
00:37:56,606 --> 00:38:01,596 A:middle
But the dot itself no longer
scrolls the ScrollView.

963
00:38:01,596 --> 00:38:03,216 A:middle
So now I can do all the
things I wanted to do.

964
00:38:03,216 --> 00:38:05,136 A:middle
I can grab several dots at once.

965
00:38:06,136 --> 00:38:07,126 A:middle
Put them in the ScrollView.

966
00:38:07,126 --> 00:38:09,826 A:middle
Grab several of them out of
there; pull them over here.

967
00:38:10,136 --> 00:38:13,586 A:middle
So this is pretty much
working exactly as we wanted.

968
00:38:13,676 --> 00:38:16,616 A:middle
Now there's a little --
there's a few elements of polish

969
00:38:16,836 --> 00:38:18,596 A:middle
that have to do with the way

970
00:38:18,596 --> 00:38:20,706 A:middle
that these dots highlight
themselves.

971
00:38:20,706 --> 00:38:24,326 A:middle
And I want to try to draw your
attention to a little problem

972
00:38:24,816 --> 00:38:27,716 A:middle
that may not be immediately
apparent.

973
00:38:27,716 --> 00:38:32,096 A:middle
So I'm going to put my
finger down to start a pan

974
00:38:32,436 --> 00:38:33,966 A:middle
in that blue dot near the top.

975
00:38:35,276 --> 00:38:38,096 A:middle
Did you see that it momentarily
highlighted, and then sort

976
00:38:38,096 --> 00:38:39,346 A:middle
of blinked back off again?

977
00:38:39,556 --> 00:38:43,516 A:middle
I'll do it on another one --
the orange one here, just to --

978
00:38:43,626 --> 00:38:46,526 A:middle
so pans that start
in the dot cause it

979
00:38:46,526 --> 00:38:48,386 A:middle
to momentarily receive
touches again,

980
00:38:48,386 --> 00:38:49,746 A:middle
which causes it to
be highlighted.

981
00:38:50,166 --> 00:38:53,756 A:middle
But then as the pan recognizes,
it cancels touches in its view.

982
00:38:54,006 --> 00:38:56,636 A:middle
And so touchesCancelled
gets delivered to the dot.

983
00:38:56,636 --> 00:38:59,296 A:middle
And so you see this
momentary flash of highlighted

984
00:38:59,656 --> 00:39:00,716 A:middle
as you start scrolling.

985
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

986
00:38:59,656 --> 00:39:00,716 A:middle
as you start scrolling.

987
00:39:00,996 --> 00:39:03,166 A:middle
But now notice that the
same thing does not happen

988
00:39:03,416 --> 00:39:04,826 A:middle
with the dots that
are in the drawer.

989
00:39:05,166 --> 00:39:10,056 A:middle
So when I start panning here,
I don't get that flash of --

990
00:39:10,216 --> 00:39:14,186 A:middle
oh actually -- well I guess
I'm doing it too slowly

991
00:39:14,766 --> 00:39:15,106 A:middle
[chuckles] sorry.

992
00:39:15,106 --> 00:39:17,526 A:middle
Let me do it a bit
faster to see the effect.

993
00:39:17,526 --> 00:39:18,246 A:middle
It's very subtle.

994
00:39:18,246 --> 00:39:22,596 A:middle
But for the most part,
pans don't cause that flash

995
00:39:22,596 --> 00:39:24,096 A:middle
of highlighting in
the drawer view.

996
00:39:24,096 --> 00:39:26,396 A:middle
If you're really
deliberate about it,

997
00:39:26,396 --> 00:39:29,396 A:middle
I guess you can get
them to do it.

998
00:39:29,396 --> 00:39:32,996 A:middle
So the reason for the difference
is that these dots here

999
00:39:33,246 --> 00:39:36,406 A:middle
in the drawer are
in a ScrollView.

1000
00:39:36,736 --> 00:39:39,816 A:middle
And by default, ScrollView
actually has behavior

1001
00:39:40,096 --> 00:39:42,216 A:middle
that delays the delivery
of touches

1002
00:39:42,546 --> 00:39:46,736 A:middle
to its subviews while it's
checking whether a pan

1003
00:39:46,736 --> 00:39:47,306 A:middle
is starting.

1004
00:39:48,116 --> 00:39:49,856 A:middle
And you can really
see the effect of this

1005
00:39:49,856 --> 00:39:52,016 A:middle
if you use UITableViews in iOS.

1006
00:39:52,496 --> 00:39:55,076 A:middle
You'll see that if you basically
start scrolling pretty quickly

1007
00:39:55,076 --> 00:39:58,336 A:middle
in a UITableView, you don't see
a flash of highlight on the cell

1008
00:39:58,336 --> 00:39:59,826 A:middle
that you happen to touch.

1009
00:39:59,826 --> 00:40:04,486 A:middle
And so you avoid this kind of
experience of flashing happening

1010
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1011
00:39:59,826 --> 00:40:04,486 A:middle
And so you avoid this kind of
experience of flashing happening

1012
00:40:04,486 --> 00:40:05,456 A:middle
as you start scrolling.

1013
00:40:05,796 --> 00:40:08,796 A:middle
So I'm going to bring
Josh back on stage

1014
00:40:09,066 --> 00:40:12,176 A:middle
to explain how that's
accomplished in UIScrollView

1015
00:40:12,176 --> 00:40:15,106 A:middle
and how we can get the very
same effect for these dots

1016
00:40:15,106 --> 00:40:15,856 A:middle
that are not in a ScrollView.

1017
00:40:16,516 --> 00:40:22,806 A:middle
[ Applause ]

1018
00:40:23,306 --> 00:40:23,596 A:middle
>> All right.

1019
00:40:23,596 --> 00:40:25,126 A:middle
So I promised at the
beginning that we were going

1020
00:40:25,126 --> 00:40:26,366 A:middle
to talk about some polish.

1021
00:40:26,366 --> 00:40:28,466 A:middle
And look at some internal
implementation ideas

1022
00:40:28,466 --> 00:40:30,996 A:middle
of how UIScrollView accomplishes
this sort of behavior.

1023
00:40:31,526 --> 00:40:32,226 A:middle
So let's go do that.

1024
00:40:32,966 --> 00:40:35,396 A:middle
But before we do, I just
want to get a quick video

1025
00:40:35,396 --> 00:40:36,426 A:middle
of what Eliza mentioned there,

1026
00:40:36,426 --> 00:40:38,656 A:middle
of when you're scrolling
in a UITableView.

1027
00:40:39,156 --> 00:40:42,566 A:middle
So if I go and scroll this
view here, you're going to find

1028
00:40:42,566 --> 00:40:44,776 A:middle
that we don't end
up seeing flashes,

1029
00:40:44,776 --> 00:40:46,726 A:middle
as she said we wouldn't.

1030
00:40:46,726 --> 00:40:48,146 A:middle
It scrolls smoothly.

1031
00:40:48,146 --> 00:40:50,056 A:middle
There's no flash of
any cells highlighting,

1032
00:40:50,056 --> 00:40:51,416 A:middle
no matter where I
put my finger down,

1033
00:40:51,746 --> 00:40:53,296 A:middle
as long as I start
scrolling pretty quickly.

1034
00:40:54,466 --> 00:40:56,616 A:middle
Now if I put my finger
down and leave it there

1035
00:40:56,616 --> 00:40:58,226 A:middle
for a little while,
then we're going to go

1036
00:40:58,226 --> 00:40:59,966 A:middle
and highlight whatever cell
you put your finger in.

1037
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1038
00:41:00,566 --> 00:41:02,506 A:middle
So that's exactly the same kind
of thing that we're talking

1039
00:41:02,506 --> 00:41:03,646 A:middle
about here in these dots.

1040
00:41:03,936 --> 00:41:06,356 A:middle
But applied really everywhere
that you see a UITableView.

1041
00:41:06,946 --> 00:41:09,626 A:middle
So this behavior,
as Eliza mentioned,

1042
00:41:09,626 --> 00:41:12,936 A:middle
is accomplished using a
property on UIScrollView.

1043
00:41:13,316 --> 00:41:14,606 A:middle
So if you're in a
ScrollView you're getting

1044
00:41:14,606 --> 00:41:15,336 A:middle
this automatically.

1045
00:41:15,666 --> 00:41:17,766 A:middle
That property is called
delaysContentTouches.

1046
00:41:18,846 --> 00:41:20,306 A:middle
Now you can turn this
off if you wanted.

1047
00:41:20,306 --> 00:41:22,136 A:middle
If for some reason in
your ScrollView you want

1048
00:41:22,136 --> 00:41:24,416 A:middle
to make touches go through
immediately with no delay,

1049
00:41:24,976 --> 00:41:27,196 A:middle
but by default you get a short
delay before they're delivered

1050
00:41:27,196 --> 00:41:28,496 A:middle
to any view in the ScrollView.

1051
00:41:30,236 --> 00:41:32,286 A:middle
Now in the case that we're
looking here with these dots,

1052
00:41:32,966 --> 00:41:35,326 A:middle
we don't actually have all
the dots in a ScrollView,

1053
00:41:35,326 --> 00:41:36,466 A:middle
so we're not getting
that behavior

1054
00:41:36,466 --> 00:41:37,926 A:middle
on the ones that aren't.

1055
00:41:38,736 --> 00:41:40,836 A:middle
To understand how the
ScrollView is getting this,

1056
00:41:40,836 --> 00:41:43,576 A:middle
it helps to look at all
of the gesture recognizers

1057
00:41:43,576 --> 00:41:44,796 A:middle
that are attached
to the ScrollView.

1058
00:41:45,986 --> 00:41:47,656 A:middle
So the ScrollView has a
pan gesture recognizer.

1059
00:41:47,656 --> 00:41:48,206 A:middle
We know that.

1060
00:41:48,376 --> 00:41:52,036 A:middle
We already took it and used it
this session in order to move it

1061
00:41:52,036 --> 00:41:53,036 A:middle
out onto that outer view.

1062
00:41:53,846 --> 00:41:55,936 A:middle
Of course it also has a
pinch gesture recognizer.

1063
00:41:55,936 --> 00:41:58,116 A:middle
So if you're using zooming
in your UIScrollView,

1064
00:41:58,296 --> 00:42:00,236 A:middle
there will be a
UIPinchgestureRecognizer

1065
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1066
00:41:58,296 --> 00:42:00,236 A:middle
there will be a
UIPinchgestureRecognizer

1067
00:42:00,236 --> 00:42:01,306 A:middle
on the ScrollView as well.

1068
00:42:02,006 --> 00:42:03,946 A:middle
But there's actually a third
one that you may not know about.

1069
00:42:04,366 --> 00:42:05,766 A:middle
It's actually there if you look

1070
00:42:05,766 --> 00:42:08,456 A:middle
at the gesture recognizer
array on the ScrollView.

1071
00:42:08,826 --> 00:42:12,996 A:middle
But it's not particularly useful
to know about in most cases,

1072
00:42:12,996 --> 00:42:14,616 A:middle
other than to understand
how these things work.

1073
00:42:14,616 --> 00:42:17,676 A:middle
And that third one is a touch
delay gesture recognizer.

1074
00:42:17,836 --> 00:42:21,826 A:middle
So this gesture recognizer's
sole purpose in life is to sit

1075
00:42:21,826 --> 00:42:22,686 A:middle
around and fail [chuckles].

1076
00:42:22,766 --> 00:42:28,496 A:middle
So I feel a little bad
for it, but it's there.

1077
00:42:28,546 --> 00:42:29,836 A:middle
It never recognizes.

1078
00:42:30,186 --> 00:42:33,406 A:middle
It's there just as a way
to delay touch delivery

1079
00:42:33,406 --> 00:42:34,606 A:middle
to the views in this ScrollView.

1080
00:42:34,606 --> 00:42:37,426 A:middle
And the way that it does
that is by taking advantage

1081
00:42:37,426 --> 00:42:38,686 A:middle
of a property that exists

1082
00:42:38,686 --> 00:42:41,466 A:middle
on UIGestureRecognizer
called delaysTouchesBegan.

1083
00:42:42,566 --> 00:42:44,516 A:middle
Now this is no by default,
because when you set it

1084
00:42:44,516 --> 00:42:46,336 A:middle
to yes it can introduce
big delays

1085
00:42:46,336 --> 00:42:47,576 A:middle
in touch delivery
throughout your app.

1086
00:42:48,076 --> 00:42:50,806 A:middle
So most gesture recognizers
do not want this property set

1087
00:42:50,836 --> 00:42:51,416 A:middle
to yes.

1088
00:42:51,816 --> 00:42:55,166 A:middle
Because what it does is delays
delivery of touchesBegan --

1089
00:42:55,166 --> 00:42:57,306 A:middle
the entire touch sequence
actually the began

1090
00:42:57,306 --> 00:42:58,846 A:middle
and all subsequent events,

1091
00:42:59,546 --> 00:43:03,386 A:middle
until that gesture recognizer
either recognizes or fails.

1092
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1093
00:42:59,546 --> 00:43:03,386 A:middle
until that gesture recognizer
either recognizes or fails.

1094
00:43:04,856 --> 00:43:06,506 A:middle
So we can use it
to delay delivery

1095
00:43:06,506 --> 00:43:09,736 A:middle
of the entire touch sequence
to some view that's attached

1096
00:43:09,736 --> 00:43:12,576 A:middle
to whatever view the gesture
recognizer is attached to.

1097
00:43:13,256 --> 00:43:15,216 A:middle
So if we look at a
timeline of how this works,

1098
00:43:15,216 --> 00:43:16,836 A:middle
then we can see why
this makes sense

1099
00:43:16,836 --> 00:43:18,036 A:middle
and how it does what it does.

1100
00:43:18,836 --> 00:43:21,126 A:middle
So when a touch comes
down, the touch gets --

1101
00:43:21,126 --> 00:43:23,136 A:middle
it's going to begin;
it comes down.

1102
00:43:23,546 --> 00:43:25,436 A:middle
Let's look at what
happens to the pan gesture.

1103
00:43:25,736 --> 00:43:26,806 A:middle
The touch delay gesture.

1104
00:43:26,806 --> 00:43:29,876 A:middle
And the view that the
touch was hitTested to.

1105
00:43:30,616 --> 00:43:33,666 A:middle
So at this point the touch
delay gesture is going

1106
00:43:33,666 --> 00:43:34,396 A:middle
to start a timer.

1107
00:43:35,006 --> 00:43:36,676 A:middle
It's a pretty short timer
because we don't want

1108
00:43:36,726 --> 00:43:38,566 A:middle
to add big delays to
delivery of the touch.

1109
00:43:38,916 --> 00:43:43,606 A:middle
Let's say .15 seconds just as
a number that I might pick out.

1110
00:43:44,366 --> 00:43:47,146 A:middle
Now if you leave your finger
down for some period of time,

1111
00:43:47,606 --> 00:43:52,466 A:middle
until this timer fires, than the
delay gesture is going to fail.

1112
00:43:52,466 --> 00:43:53,636 A:middle
It will set its state to failed.

1113
00:43:54,136 --> 00:43:56,316 A:middle
And once it does, because it
was the only thing delaying

1114
00:43:56,316 --> 00:43:59,436 A:middle
that touch, the UI view at that
point that it was hitTested to,

1115
00:43:59,436 --> 00:44:00,756 A:middle
we'll see touches
begin with event,

1116
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1117
00:43:59,436 --> 00:44:00,756 A:middle
we'll see touches
begin with event,

1118
00:44:00,756 --> 00:44:01,666 A:middle
and the touch will be delivered.

1119
00:44:03,016 --> 00:44:05,496 A:middle
Now if things progress
and the user decides

1120
00:44:05,496 --> 00:44:06,946 A:middle
to move their finger
a little bit,

1121
00:44:07,256 --> 00:44:09,136 A:middle
maybe the pan gesture
starts to recognize.

1122
00:44:09,446 --> 00:44:11,456 A:middle
And at that point
the view is going

1123
00:44:11,456 --> 00:44:12,586 A:middle
to get touchesCancelled
with event.

1124
00:44:12,806 --> 00:44:14,436 A:middle
So that's where the
highlight will get removed.

1125
00:44:15,656 --> 00:44:18,176 A:middle
The delay gesture
has already failed,

1126
00:44:18,176 --> 00:44:19,306 A:middle
so nothing new is
happening there.

1127
00:44:20,136 --> 00:44:22,086 A:middle
So that's the case where
you leave your finger

1128
00:44:22,086 --> 00:44:22,896 A:middle
down long enough.

1129
00:44:23,166 --> 00:44:25,086 A:middle
But the interesting case is
when you scroll really quickly.

1130
00:44:25,426 --> 00:44:26,956 A:middle
So let's look at what
happens in that case.

1131
00:44:27,776 --> 00:44:30,026 A:middle
Again we put the -- the
user puts their finger down.

1132
00:44:30,856 --> 00:44:32,746 A:middle
The delay gesture
starts a short timer.

1133
00:44:33,616 --> 00:44:35,136 A:middle
And the view still
hasn't seen anything

1134
00:44:35,136 --> 00:44:36,876 A:middle
because that delay
gesture exists

1135
00:44:36,876 --> 00:44:38,246 A:middle
and has delays touches begin.

1136
00:44:39,416 --> 00:44:41,276 A:middle
Now if the user at this
point starts scrolling,

1137
00:44:41,276 --> 00:44:43,236 A:middle
and the pan gesture recognizes,

1138
00:44:43,916 --> 00:44:46,476 A:middle
then the pan gesture would
have cancelled that touch.

1139
00:44:47,216 --> 00:44:48,926 A:middle
But because we never
delivered it yet --

1140
00:44:48,926 --> 00:44:50,956 A:middle
it was still being delayed
by that delay gesture,

1141
00:44:51,306 --> 00:44:53,376 A:middle
we don't ever actually
deliver it to the view at all.

1142
00:44:53,726 --> 00:44:55,926 A:middle
As far as the view is concerned,
the touch never happened.

1143
00:44:56,416 --> 00:44:57,846 A:middle
The pan gesture recognizes.

1144
00:44:58,156 --> 00:44:59,256 A:middle
The touch would have
been cancelled,

1145
00:44:59,256 --> 00:45:00,406 A:middle
but we never delivered began.

1146
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1147
00:44:59,256 --> 00:45:00,406 A:middle
but we never delivered began.

1148
00:45:00,406 --> 00:45:02,396 A:middle
So it would be kind of silly
to deliver began cancelled.

1149
00:45:02,906 --> 00:45:05,276 A:middle
So we just don't deliver it.

1150
00:45:05,326 --> 00:45:07,166 A:middle
And that causes us
to never highlight.

1151
00:45:07,166 --> 00:45:08,396 A:middle
And never flash a highlight.

1152
00:45:08,396 --> 00:45:10,436 A:middle
And we get exactly the
behavior that we're looking for.

1153
00:45:11,046 --> 00:45:14,406 A:middle
Now there's nothing
particularly magical

1154
00:45:14,406 --> 00:45:16,146 A:middle
about this touch delay
gesture recognizer.

1155
00:45:16,146 --> 00:45:17,376 A:middle
And we can write one ourselves

1156
00:45:17,376 --> 00:45:19,586 A:middle
that does pretty much the
exact same thing that the one

1157
00:45:19,586 --> 00:45:22,556 A:middle
on UIScrollView does, so that
we can use that in situations

1158
00:45:22,556 --> 00:45:24,016 A:middle
where we're not using
a UIScrollView .

1159
00:45:24,596 --> 00:45:25,886 A:middle
Of course there are
no situations

1160
00:45:25,886 --> 00:45:27,376 A:middle
where you should not
use the UIScrollView,

1161
00:45:27,376 --> 00:45:29,236 A:middle
but let's imagine
that there might be.

1162
00:45:30,996 --> 00:45:33,736 A:middle
[Laughter] So we can do that by
subclassing UIGestureRecognizer

1163
00:45:34,116 --> 00:45:36,636 A:middle
and over-rising -- over-riding
its designated initializer

1164
00:45:36,996 --> 00:45:38,226 A:middle
with target action.

1165
00:45:38,676 --> 00:45:39,436 A:middle
And of course what we do

1166
00:45:39,436 --> 00:45:42,296 A:middle
in there is set
delaysTouchesBegan to yes.

1167
00:45:42,326 --> 00:45:44,106 A:middle
Because as I mentioned,
that's no by default.

1168
00:45:44,456 --> 00:45:46,536 A:middle
So that most gesture
recognizers aren't doing that.

1169
00:45:47,896 --> 00:45:50,106 A:middle
Then as with all
UIGestureRecognizer subclasses,

1170
00:45:50,106 --> 00:45:51,836 A:middle
we're going to override
some of the touch methods.

1171
00:45:52,236 --> 00:45:55,076 A:middle
So we'll do touchesBegan, ended,
and cancelled in this case.

1172
00:45:55,396 --> 00:45:56,726 A:middle
Because for this
gesture recognizer,

1173
00:45:56,726 --> 00:45:58,876 A:middle
we don't actually care if the
touch ever moves anywhere.

1174
00:45:59,196 --> 00:46:01,156 A:middle
We're not trying
to deal with that.

1175
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1176
00:45:59,196 --> 00:46:01,156 A:middle
We're not trying
to deal with that.

1177
00:46:01,156 --> 00:46:02,876 A:middle
We just care when it comes
down and when it comes up.

1178
00:46:04,006 --> 00:46:06,956 A:middle
So we'll override touchesBegan
and start a timer --

1179
00:46:07,126 --> 00:46:08,606 A:middle
we mentioned there's going
to be that short timer,

1180
00:46:08,606 --> 00:46:09,426 A:middle
so we'll start that there.

1181
00:46:09,426 --> 00:46:12,036 A:middle
And then in touchesEnded
and touchesCancelled,

1182
00:46:12,446 --> 00:46:13,596 A:middle
we want to set our
state to failed.

1183
00:46:14,096 --> 00:46:16,096 A:middle
Now the reason we
want to do that is

1184
00:46:16,096 --> 00:46:18,886 A:middle
because if the user taps
quickly we want that touch

1185
00:46:18,886 --> 00:46:20,936 A:middle
to get delivered immediately
when the touch comes up.

1186
00:46:21,176 --> 00:46:23,616 A:middle
We don't want to wait until
this timer has expired in order

1187
00:46:23,616 --> 00:46:25,836 A:middle
to deliver the touch, or
you'll introduce extra delay

1188
00:46:25,836 --> 00:46:27,566 A:middle
that you don't mean to
when it's not necessary.

1189
00:46:28,126 --> 00:46:30,696 A:middle
So if the touch ends
or it gets cancelled,

1190
00:46:30,876 --> 00:46:32,186 A:middle
we're going to set
the state to failed.

1191
00:46:32,226 --> 00:46:34,106 A:middle
And that will allow
that touch to go through

1192
00:46:34,106 --> 00:46:36,696 A:middle
and get delivered to the view.

1193
00:46:36,906 --> 00:46:38,626 A:middle
Now of course we said
we're setting a timer,

1194
00:46:38,626 --> 00:46:40,206 A:middle
so we have to implement
some timer method.

1195
00:46:40,586 --> 00:46:42,356 A:middle
Let's say that we've got some
function that gets called.

1196
00:46:42,786 --> 00:46:45,706 A:middle
What we're going to do in there
is also set our state to failed.

1197
00:46:45,936 --> 00:46:48,406 A:middle
If our timer passes;
this gesture fails,

1198
00:46:48,466 --> 00:46:49,926 A:middle
that will allow the
touch to get delivered.

1199
00:46:50,966 --> 00:46:52,396 A:middle
And then finally, the last thing

1200
00:46:52,396 --> 00:46:55,566 A:middle
that gesture recognizers should
do is override the reset method.

1201
00:46:55,896 --> 00:46:57,966 A:middle
Which is where you go about
putting yourself back in shape

1202
00:46:57,966 --> 00:47:00,726 A:middle
to be ready for another
instance of trying to recognize.

1203
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1204
00:46:57,966 --> 00:47:00,726 A:middle
to be ready for another
instance of trying to recognize.

1205
00:47:01,236 --> 00:47:03,136 A:middle
And so in there we're just
going to clear the timer.

1206
00:47:03,136 --> 00:47:04,486 A:middle
Reset it. And get
everything back

1207
00:47:04,486 --> 00:47:06,006 A:middle
into a good state
to start over again.

1208
00:47:06,646 --> 00:47:08,576 A:middle
So pretty small gesture
recognizer.

1209
00:47:08,576 --> 00:47:10,296 A:middle
It's never going to
try and recognize,

1210
00:47:10,296 --> 00:47:11,296 A:middle
which is kind of unique.

1211
00:47:11,296 --> 00:47:14,006 A:middle
There's not a lot of gesture
recognizers that never try

1212
00:47:14,006 --> 00:47:14,876 A:middle
to recognize anything.

1213
00:47:15,356 --> 00:47:16,486 A:middle
But it gets us an
interesting effect.

1214
00:47:16,486 --> 00:47:18,726 A:middle
And Eliza's going to come
back up and build it for us.

1215
00:47:19,516 --> 00:47:26,706 A:middle
[ Applause ]

1216
00:47:27,206 --> 00:47:27,476 A:middle
>> All right.

1217
00:47:27,576 --> 00:47:29,706 A:middle
So I'm adding another
class here.

1218
00:47:29,706 --> 00:47:32,396 A:middle
TouchDelayGestureRecognizer,
which is going to be a subclass

1219
00:47:32,396 --> 00:47:34,396 A:middle
of UIGesture Recognizer.

1220
00:47:34,396 --> 00:47:37,846 A:middle
So we're going to -- it's going

1221
00:47:37,946 --> 00:47:40,436 A:middle
to have a really
simple implementation

1222
00:47:40,436 --> 00:47:41,416 A:middle
like Josh described.

1223
00:47:41,956 --> 00:47:45,286 A:middle
The first thing we need to do --
oops -- is import the subclass.

1224
00:47:45,286 --> 00:47:48,136 A:middle
But we should do that
in the right place.

1225
00:47:48,576 --> 00:47:53,706 A:middle
And then we're going to
override initWithTarget action,

1226
00:47:54,136 --> 00:47:54,896 A:middle
called super.

1227
00:47:54,896 --> 00:47:59,396 A:middle
And then do one thing
which is to set touches --

1228
00:47:59,596 --> 00:48:01,076 A:middle
delaysTouchesBegan to yes.

1229
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1230
00:47:59,596 --> 00:48:01,076 A:middle
delaysTouchesBegan to yes.

1231
00:48:01,586 --> 00:48:04,276 A:middle
As Josh mentioned, the only
purpose for this thing is

1232
00:48:04,276 --> 00:48:06,036 A:middle
to delay touches to its view.

1233
00:48:06,566 --> 00:48:09,486 A:middle
So we need the
delaysTouchesBegan flag on.

1234
00:48:10,026 --> 00:48:11,566 A:middle
And then -- sorry.

1235
00:48:11,626 --> 00:48:17,276 A:middle
One step ahead of myself.

1236
00:48:17,576 --> 00:48:24,016 A:middle
We need a timer in the --
as an Ivar of this guy.

1237
00:48:24,016 --> 00:48:28,206 A:middle
And then we're going to set
that timer in touchesBegan.

1238
00:48:28,926 --> 00:48:30,416 A:middle
So we'll schedule it.

1239
00:48:31,196 --> 00:48:33,986 A:middle
Give it an interval
of .15 seconds.

1240
00:48:33,986 --> 00:48:36,936 A:middle
And then when the
timer fires we're going

1241
00:48:36,936 --> 00:48:39,646 A:middle
to just call this fail method
that I'm about to write.

1242
00:48:40,706 --> 00:48:44,986 A:middle
And in the fail method we
will simply set our state

1243
00:48:45,146 --> 00:48:47,086 A:middle
to
UIGestureRecognizerStateFailed.

1244
00:48:47,676 --> 00:48:52,986 A:middle
In touchesEnded and
touchesCancelled,

1245
00:48:52,986 --> 00:48:55,586 A:middle
we're also just going to fail.

1246
00:48:55,796 --> 00:48:58,776 A:middle
And finally, when
we're told to reset,

1247
00:48:59,076 --> 00:49:01,106 A:middle
we're going to just get rid
of that timer; clear it out.

1248
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1249
00:48:59,076 --> 00:49:01,106 A:middle
we're going to just get rid
of that timer; clear it out.

1250
00:49:01,726 --> 00:49:03,896 A:middle
And be ready to go again the
next time a touch comes down.

1251
00:49:05,156 --> 00:49:09,346 A:middle
So I'm going to go back over
to the ViewController now.

1252
00:49:09,866 --> 00:49:12,106 A:middle
And we're going to
import this file.

1253
00:49:12,766 --> 00:49:20,956 A:middle
And then I'm just going to make
one of these guys and I'm going

1254
00:49:21,666 --> 00:49:23,156 A:middle
to add it to the canvasView.

1255
00:49:23,386 --> 00:49:27,126 A:middle
Now notice that I'm passing it
a nil target and a nil action.

1256
00:49:27,126 --> 00:49:28,866 A:middle
It's an unusual thing to see

1257
00:49:28,866 --> 00:49:30,306 A:middle
when you make a gesture
recognizer,

1258
00:49:30,576 --> 00:49:32,896 A:middle
but this thing never
recognizes, so there's no point

1259
00:49:32,896 --> 00:49:34,076 A:middle
in giving it a target
or an action.

1260
00:49:34,076 --> 00:49:35,626 A:middle
If I did, than they
would never be invoked.

1261
00:49:36,186 --> 00:49:39,156 A:middle
So it's really just the
existence of this thing,

1262
00:49:39,156 --> 00:49:41,286 A:middle
and the fact that it's attached
to a view that it's going

1263
00:49:41,356 --> 00:49:43,246 A:middle
to have the effect that we want.

1264
00:49:43,246 --> 00:49:45,626 A:middle
I'm going to add it to my
canvasView so that the dots

1265
00:49:46,066 --> 00:49:47,956 A:middle
in the canvas get
this same behavior

1266
00:49:48,206 --> 00:49:50,006 A:middle
as the dots in the ScrollView.

1267
00:49:50,686 --> 00:49:52,476 A:middle
So go ahead and run this.

1268
00:49:53,026 --> 00:49:57,276 A:middle
And now if I start a pan
in one of these dots --

1269
00:49:57,276 --> 00:50:01,216 A:middle
if I do it slowly enough, than
you can see a highlight --

1270
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1271
00:49:57,276 --> 00:50:01,216 A:middle
if I do it slowly enough, than
you can see a highlight --

1272
00:50:01,216 --> 00:50:01,996 A:middle
oops I picked that one up.

1273
00:50:02,196 --> 00:50:03,216 A:middle
But if you do it fast enough,

1274
00:50:03,216 --> 00:50:05,266 A:middle
you'll see that there's
no longer a flash

1275
00:50:05,776 --> 00:50:07,256 A:middle
as I start scrolling.

1276
00:50:07,256 --> 00:50:11,546 A:middle
And so we're getting
exactly the same behavior

1277
00:50:11,546 --> 00:50:12,696 A:middle
that we have in the ScrollView.

1278
00:50:13,176 --> 00:50:16,856 A:middle
So we're going to show
you one more thing.

1279
00:50:17,126 --> 00:50:19,626 A:middle
Another sort of small
element of polish

1280
00:50:19,956 --> 00:50:21,316 A:middle
that we can add to
this application.

1281
00:50:21,576 --> 00:50:23,896 A:middle
And I want to show
you the problem first.

1282
00:50:24,086 --> 00:50:27,056 A:middle
Notice that some of these
dots here are extremely small.

1283
00:50:27,376 --> 00:50:31,386 A:middle
In fact I think I'm generating
their radius' randomly,

1284
00:50:31,386 --> 00:50:34,586 A:middle
but they are as small
as a radius of 10.

1285
00:50:34,856 --> 00:50:36,776 A:middle
Which makes the whole
thing only 20 points wide.

1286
00:50:37,436 --> 00:50:40,766 A:middle
In general it's pretty difficult
to hit a view with you finger

1287
00:50:40,766 --> 00:50:44,276 A:middle
if it's less than 44
points wide or tall.

1288
00:50:44,666 --> 00:50:47,456 A:middle
So although it's very easy
for me to pick these things

1289
00:50:47,456 --> 00:50:48,906 A:middle
up in the simulator
using my mouse,

1290
00:50:49,216 --> 00:50:50,836 A:middle
it would be quite
difficult to hit them

1291
00:50:51,076 --> 00:50:52,046 A:middle
if I were using my finger.

1292
00:50:52,206 --> 00:50:56,246 A:middle
So we want to show you a
technique that we can use

1293
00:50:56,576 --> 00:51:01,266 A:middle
to make very small user
interface elements hittable.

1294
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1295
00:50:56,576 --> 00:51:01,266 A:middle
to make very small user
interface elements hittable.

1296
00:51:01,266 --> 00:51:03,146 A:middle
And so I'm going to bring
Josh back up on stage

1297
00:51:03,246 --> 00:51:04,776 A:middle
to explain how we
can accomplish that.

1298
00:51:05,516 --> 00:51:10,576 A:middle
[ Applause ]

1299
00:51:11,076 --> 00:51:11,346 A:middle
>> All right.

1300
00:51:11,346 --> 00:51:13,936 A:middle
So we promised three
sections and three techniques.

1301
00:51:13,976 --> 00:51:16,896 A:middle
But we've got a little bonus
extra bit here at the end.

1302
00:51:17,926 --> 00:51:19,576 A:middle
We're still going to talk
about hitTesting though.

1303
00:51:19,626 --> 00:51:22,296 A:middle
So it's still within the
three areas of touch handling

1304
00:51:22,296 --> 00:51:24,556 A:middle
that I promised so we
haven't strayed that far

1305
00:51:24,556 --> 00:51:25,916 A:middle
from my original statement.

1306
00:51:26,516 --> 00:51:28,416 A:middle
As Eliza mentioned,
what we're trying

1307
00:51:28,416 --> 00:51:31,016 A:middle
to do here is enforce a
minimum hit target size.

1308
00:51:31,466 --> 00:51:34,196 A:middle
Now she mentioned 44 and
threw that number out.

1309
00:51:34,196 --> 00:51:35,596 A:middle
The reason that she
mentioned that is

1310
00:51:35,596 --> 00:51:36,706 A:middle
because it's a common number

1311
00:51:36,706 --> 00:51:38,266 A:middle
that you'll find
throughout UIKit.

1312
00:51:38,626 --> 00:51:41,256 A:middle
If you look at the default
bar heights for things

1313
00:51:41,256 --> 00:51:44,626 A:middle
like tool bars; or the default
row heights for tableView cells,

1314
00:51:44,946 --> 00:51:47,486 A:middle
44 is a common number that
you're going to find come up.

1315
00:51:47,926 --> 00:51:49,316 A:middle
It's a good rule of
thumb of something

1316
00:51:49,316 --> 00:51:51,046 A:middle
that if you start
getting smaller than this,

1317
00:51:51,046 --> 00:51:53,456 A:middle
it's hard to hit this thing.

1318
00:51:53,696 --> 00:51:55,806 A:middle
So to figure out how
we're going to go

1319
00:51:55,876 --> 00:51:58,136 A:middle
and resolve this situation,
we're going to go back and look

1320
00:51:58,136 --> 00:51:59,286 A:middle
at hitTest:withEvent again.

1321
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1322
00:52:00,106 --> 00:52:01,306 A:middle
Now there's a couple
ways you could do it.

1323
00:52:01,306 --> 00:52:02,636 A:middle
You could just make
your view bigger.

1324
00:52:02,636 --> 00:52:04,176 A:middle
That would obviously
make it hittable.

1325
00:52:04,546 --> 00:52:06,556 A:middle
But in the case of
what Eliza's looking

1326
00:52:06,556 --> 00:52:09,296 A:middle
at in our sample app right now,
if we made the view bigger,

1327
00:52:09,296 --> 00:52:11,576 A:middle
that would actually make
the circle draw bigger.

1328
00:52:11,946 --> 00:52:14,526 A:middle
Because she's drawing it
based on the size of the view.

1329
00:52:15,026 --> 00:52:17,556 A:middle
So if we were going to
fix the hitTesting problem

1330
00:52:17,556 --> 00:52:19,836 A:middle
by changing the view size, then
we'd have to go refactor a bunch

1331
00:52:19,836 --> 00:52:21,796 A:middle
of other stuff and change
the way we draw the view

1332
00:52:21,796 --> 00:52:22,596 A:middle
to account for that.

1333
00:52:22,596 --> 00:52:24,636 A:middle
And that could end up
making things more complex.

1334
00:52:24,636 --> 00:52:25,976 A:middle
And a bigger change
than we really mean.

1335
00:52:27,006 --> 00:52:28,266 A:middle
So let's go back and
look with our hitTest

1336
00:52:28,266 --> 00:52:30,216 A:middle
with event method again
and see if there's anything

1337
00:52:30,216 --> 00:52:31,326 A:middle
in here that might help us.

1338
00:52:32,656 --> 00:52:34,346 A:middle
Well if we focus in on
this part that I mentioned

1339
00:52:34,346 --> 00:52:37,086 A:middle
at the beginning, we've got
one check right off the bat

1340
00:52:37,126 --> 00:52:39,306 A:middle
that says, is the point
inside our bounds?

1341
00:52:40,026 --> 00:52:41,786 A:middle
Now I wrote this in
some pseudo code here,

1342
00:52:41,786 --> 00:52:44,456 A:middle
so it's not exactly
clear what that means.

1343
00:52:44,776 --> 00:52:46,596 A:middle
So let's expand it out
to what it really does.

1344
00:52:46,596 --> 00:52:49,796 A:middle
It's going to go and call
a method called pointInside

1345
00:52:49,796 --> 00:52:52,486 A:middle
withEvent on the view that's
being asked to hitTest itself.

1346
00:52:53,336 --> 00:52:54,976 A:middle
Now the reason that that's
interesting to know is

1347
00:52:54,976 --> 00:52:56,966 A:middle
because it means there's
another override point

1348
00:52:56,966 --> 00:52:58,996 A:middle
where you can change the
behavior of hitTest:withEvent

1349
00:52:59,376 --> 00:53:01,026 A:middle
without changing hitTest itself.

1350
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1351
00:52:59,376 --> 00:53:01,026 A:middle
without changing hitTest itself.

1352
00:53:02,646 --> 00:53:03,986 A:middle
So we can actually
go and override

1353
00:53:04,016 --> 00:53:06,006 A:middle
that method independently
of hitTest with Event

1354
00:53:06,336 --> 00:53:09,216 A:middle
and change what it means for a
point to be with inside of view.

1355
00:53:10,406 --> 00:53:12,036 A:middle
So by default, as I
mentioned what it's going

1356
00:53:12,036 --> 00:53:14,166 A:middle
to do is just check
its own bounds and see

1357
00:53:14,166 --> 00:53:15,366 A:middle
if the point is with inside it.

1358
00:53:15,416 --> 00:53:18,266 A:middle
So we'll call
CGRectContainsPoint bounds,

1359
00:53:18,266 --> 00:53:20,046 A:middle
and the point that
we were checking on.

1360
00:53:20,696 --> 00:53:22,376 A:middle
But we can make this
do whatever we want.

1361
00:53:22,696 --> 00:53:24,726 A:middle
So if we want the view to
behave as if it's bigger

1362
00:53:24,726 --> 00:53:26,976 A:middle
without actually changing its
bounds and making it bigger,

1363
00:53:27,246 --> 00:53:29,456 A:middle
we can subclass and override
pointInside withEvent.

1364
00:53:29,486 --> 00:53:31,566 A:middle
And change the check to do
anything we think is right

1365
00:53:31,646 --> 00:53:33,186 A:middle
for our view that
we're interested in.

1366
00:53:33,946 --> 00:53:36,476 A:middle
So another short section, but
Eliza's going to come right back

1367
00:53:36,476 --> 00:53:38,676 A:middle
up and go ahead and fix
that last bug for us.

1368
00:53:39,516 --> 00:53:44,816 A:middle
[ Applause ]

1369
00:53:45,316 --> 00:53:45,886 A:middle
>> All right.

1370
00:53:45,996 --> 00:53:49,046 A:middle
So here I am in my
DotView subclass.

1371
00:53:49,046 --> 00:53:51,056 A:middle
So I had mentioned that
had written this class.

1372
00:53:51,126 --> 00:53:53,476 A:middle
Pretty much all I do
here is make these dots.

1373
00:53:53,576 --> 00:53:55,046 A:middle
Give them a bunch of
random properties.

1374
00:53:55,286 --> 00:53:57,486 A:middle
Set their corner radius so
that they look like circles.

1375
00:53:57,846 --> 00:54:01,516 A:middle
And what I'm going to do now
below this code that deals

1376
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1377
00:53:57,846 --> 00:54:01,516 A:middle
And what I'm going to do now
below this code that deals

1378
00:54:01,516 --> 00:54:03,866 A:middle
with touches beginning,
ending, and being cancelled,

1379
00:54:03,866 --> 00:54:08,176 A:middle
is I'm going to override
point inside with event.

1380
00:54:08,176 --> 00:54:09,186 A:middle
And I'm going to have to --

1381
00:54:09,236 --> 00:54:11,516 A:middle
I'm going to figure out
whether this dot is a dot

1382
00:54:11,606 --> 00:54:13,876 A:middle
that should get an
expanded touch region.

1383
00:54:14,656 --> 00:54:18,116 A:middle
So the first thing that I'm
going to do is I'm going

1384
00:54:18,116 --> 00:54:21,196 A:middle
to compute what I want to
consider my bounds to be

1385
00:54:21,246 --> 00:54:23,016 A:middle
for the sake of touch handling.

1386
00:54:23,376 --> 00:54:25,546 A:middle
The touch bounds by
default will just start

1387
00:54:25,546 --> 00:54:27,316 A:middle
out with our real bounds.

1388
00:54:27,316 --> 00:54:31,376 A:middle
But if this dot is one whose
radius is small enough --

1389
00:54:31,376 --> 00:54:35,166 A:middle
and I'm going to pick
this 44 points wide idea.

1390
00:54:35,916 --> 00:54:41,616 A:middle
So if the radius is less
than 22 then I'm going

1391
00:54:41,616 --> 00:54:45,166 A:middle
to calculate an expansion --
an amount by which I'm going

1392
00:54:45,166 --> 00:54:47,996 A:middle
to expand my bounds for
the sake of touch handling

1393
00:54:48,416 --> 00:54:52,326 A:middle
as the difference, to get it so
that every dot acts as if it's

1394
00:54:52,326 --> 00:54:54,676 A:middle
at least 44 points
wide when touched.

1395
00:54:54,676 --> 00:54:59,906 A:middle
And then I'm going to use
this handy CGRectInset method

1396
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1397
00:55:00,226 --> 00:55:01,966 A:middle
to expand the touch bounds.

1398
00:55:02,406 --> 00:55:05,056 A:middle
Notice that I'm passing
negative the expansion.

1399
00:55:05,296 --> 00:55:08,006 A:middle
That's because CGRectInset
takes a rectangle

1400
00:55:08,006 --> 00:55:09,296 A:middle
and moves its edges in.

1401
00:55:09,536 --> 00:55:11,426 A:middle
In this case we want
to move the edges out.

1402
00:55:11,426 --> 00:55:12,416 A:middle
So I'm going to do it

1403
00:55:12,416 --> 00:55:15,106 A:middle
by negative the amount
that we computed.

1404
00:55:15,106 --> 00:55:20,946 A:middle
And then finally I'll just
return whether my newly computed

1405
00:55:20,946 --> 00:55:22,786 A:middle
touchBounds contains that point.

1406
00:55:23,726 --> 00:55:26,026 A:middle
So this will have no
effect on large dots,

1407
00:55:26,026 --> 00:55:28,276 A:middle
but it will expand the
touch region for small ones.

1408
00:55:28,856 --> 00:55:30,786 A:middle
So I'm going to go ahead
and run this again.

1409
00:55:32,266 --> 00:55:33,876 A:middle
And now -- all right.

1410
00:55:33,876 --> 00:55:36,256 A:middle
So I've got my mouse here and
I'm going to touch outside

1411
00:55:36,256 --> 00:55:38,886 A:middle
of this big dot, and you
can see nothing happens.

1412
00:55:39,096 --> 00:55:40,326 A:middle
The big dot highlights only

1413
00:55:40,606 --> 00:55:42,176 A:middle
when you actually
touch in its bounds.

1414
00:55:42,516 --> 00:55:44,886 A:middle
But for this tiny
dot over here --

1415
00:55:45,706 --> 00:55:46,476 A:middle
let's see, I'll move it up here.

1416
00:55:46,476 --> 00:55:48,556 A:middle
For this tiny dot
I can touch outside

1417
00:55:48,556 --> 00:55:50,096 A:middle
of its bounds and it highlights.

1418
00:55:50,486 --> 00:55:52,656 A:middle
So this looks a little
strange on the simulator

1419
00:55:52,656 --> 00:55:55,536 A:middle
because you have a
high-precision pointing device.

1420
00:55:55,896 --> 00:55:58,296 A:middle
But on a device you
actually really don't notice

1421
00:55:58,766 --> 00:56:00,176 A:middle
that anything is weird.

1422
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1423
00:55:58,766 --> 00:56:00,176 A:middle
that anything is weird.

1424
00:56:00,176 --> 00:56:02,376 A:middle
It just feels like you
can pick these guys up.

1425
00:56:03,196 --> 00:56:08,826 A:middle
So that's pointInside overriding
the bounds that's touchable.

1426
00:56:09,516 --> 00:56:10,726 A:middle
So that's pretty much it.

1427
00:56:10,726 --> 00:56:14,766 A:middle
I'll turn it back over
to Josh to conclude.

1428
00:56:15,516 --> 00:56:22,566 A:middle
[ Applause ]

1429
00:56:23,066 --> 00:56:23,336 A:middle
>> All right.

1430
00:56:23,336 --> 00:56:24,296 A:middle
Well thanks for coming
out again.

1431
00:56:24,296 --> 00:56:26,966 A:middle
As you know, Jake Behrens,
over there in the front

1432
00:56:27,006 --> 00:56:29,546 A:middle
in that nice hat today,
he's ready to answer all

1433
00:56:29,546 --> 00:56:31,016 A:middle
of your questions, if
you have anything else

1434
00:56:31,016 --> 00:56:32,726 A:middle
that you want to
know after this.

1435
00:56:33,006 --> 00:56:35,266 A:middle
There is one other
related session left today

1436
00:56:35,266 --> 00:56:36,966 A:middle
that I obviously
encourage you to come to.

1437
00:56:36,966 --> 00:56:39,476 A:middle
Because I'll be right back
here in about 15 minutes

1438
00:56:39,796 --> 00:56:42,306 A:middle
for Building Interruptible
and Responsive Interactions

1439
00:56:42,306 --> 00:56:43,156 A:middle
with Andy Metuschak [phonetic].

1440
00:56:43,726 --> 00:56:45,566 A:middle
So stick around and
we've got a great session

1441
00:56:45,566 --> 00:56:47,276 A:middle
for you coming right up.

1442
00:56:47,276 --> 00:56:49,976 A:middle
Thanks again and enjoy the
remaining hours of the show.

1443
00:56:50,016 --> 00:56:52,000 A:middle
[ Applause ]

1444
