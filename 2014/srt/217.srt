X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:12,576 --> 00:00:13,566 A:middle
>> Good morning everybody.

2
00:00:13,706 --> 00:00:14,386 A:middle
Thanks for coming.

3
00:00:15,506 --> 00:00:20,076 A:middle
Welcome to Creating Extensions
for iOS and OS X, Part Two.

4
00:00:20,186 --> 00:00:20,896 A:middle
I'm Damien.

5
00:00:21,566 --> 00:00:22,986 A:middle
I'm from Core OS.

6
00:00:23,536 --> 00:00:26,566 A:middle
And we apparently have a user
facing feature this year.

7
00:00:27,516 --> 00:00:33,276 A:middle
[ Cheers and Applause ]

8
00:00:33,776 --> 00:00:35,916 A:middle
Glad to see everybody's
excited about Extensions.

9
00:00:35,916 --> 00:00:36,856 A:middle
Let's dive right in.

10
00:00:39,516 --> 00:00:41,936 A:middle
So before we talk about
what an extension is,

11
00:00:42,176 --> 00:00:44,686 A:middle
let's talk a little bit
about what an app is

12
00:00:45,076 --> 00:00:46,966 A:middle
and why Extensions
are different.

13
00:00:47,966 --> 00:00:52,386 A:middle
So for an app, it's still in
iOS 8, even with Extensions,

14
00:00:52,686 --> 00:00:55,066 A:middle
is the most important
experience to the user.

15
00:00:55,596 --> 00:00:58,036 A:middle
On iOS, the app owns
the entire screen.

16
00:00:58,176 --> 00:01:02,586 A:middle
On OS X, the cursor focus
goes to the front-most app.

17

18
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

19
00:00:58,176 --> 00:01:02,586 A:middle
On OS X, the cursor focus
goes to the front-most app.

20
00:01:02,586 --> 00:01:06,176 A:middle
This is still the number
one priority for our users.

21
00:01:07,016 --> 00:01:09,756 A:middle
And on iOS, apps are
completely managed

22
00:01:09,756 --> 00:01:11,316 A:middle
by the user via the App Store.

23
00:01:11,416 --> 00:01:14,716 A:middle
And OS X the user can drag them
to the trash, move them around.

24
00:01:14,766 --> 00:01:17,396 A:middle
Apps are entirely
managed by the user.

25
00:01:17,936 --> 00:01:19,926 A:middle
So what about Extensions?

26
00:01:21,416 --> 00:01:24,376 A:middle
So Extensions are
important to the user.

27
00:01:24,776 --> 00:01:27,356 A:middle
But they're not more
important than the current app.

28
00:01:27,936 --> 00:01:30,546 A:middle
They are there to augment
the app's experience.

29
00:01:31,396 --> 00:01:33,406 A:middle
And rather than directly
managing them,

30
00:01:33,856 --> 00:01:36,206 A:middle
Extensions come and
go with apps.

31
00:01:36,276 --> 00:01:38,686 A:middle
So the user isn't
going to be purchasing

32
00:01:39,036 --> 00:01:41,186 A:middle
or installing individual
Extensions.

33
00:01:41,506 --> 00:01:44,806 A:middle
They're going to be getting
those Extensions with the apps

34
00:01:44,846 --> 00:01:46,326 A:middle
that they download
from the store.

35
00:01:46,846 --> 00:01:51,496 A:middle
So Extensions are
built separately.

36
00:01:51,776 --> 00:01:54,376 A:middle
They are a separate
target in XCode.

37
00:01:54,836 --> 00:01:57,796 A:middle
So we have this new
section in XCode

38
00:01:57,796 --> 00:01:59,856 A:middle
for app extension
template targets.

39

40
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

41
00:02:00,766 --> 00:02:02,386 A:middle
So when you want to
create an extension,

42
00:02:02,466 --> 00:02:05,506 A:middle
you're getting a new
piece of code in your app

43
00:02:05,546 --> 00:02:08,276 A:middle
that is actually
a separate bundle

44
00:02:08,376 --> 00:02:10,446 A:middle
and admits a separate
executable.

45
00:02:10,976 --> 00:02:17,256 A:middle
And with that executable comes
a distinct set of entitlements.

46
00:02:17,336 --> 00:02:20,336 A:middle
And when we have a separate
executable with its distinct

47
00:02:20,336 --> 00:02:23,346 A:middle
of entitlements on disk, that
allows the operating system

48
00:02:23,346 --> 00:02:27,786 A:middle
to know that these two things,
the app and the extension,

49
00:02:27,876 --> 00:02:29,276 A:middle
are different entities.

50
00:02:31,356 --> 00:02:35,026 A:middle
And with that, you're
getting a different process.

51
00:02:35,166 --> 00:02:38,796 A:middle
So an extension is running
in an isolated address space

52
00:02:38,796 --> 00:02:42,176 A:middle
from your app and it executes
completely independently.

53
00:02:43,246 --> 00:02:47,846 A:middle
So this means that the system,
even if your app is not running,

54
00:02:47,876 --> 00:02:49,786 A:middle
can still fire up
your extension,

55
00:02:50,056 --> 00:02:51,516 A:middle
even if your app is suspended.

56
00:02:51,516 --> 00:02:55,546 A:middle
That doesn't affect any of your
Extensions running for the user.

57
00:02:56,166 --> 00:02:58,876 A:middle
And because of this, the
system can optimize each

58
00:02:58,876 --> 00:03:00,346 A:middle
experience separately.

59

60
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

61
00:02:58,876 --> 00:03:00,346 A:middle
experience separately.

62
00:03:01,186 --> 00:03:05,126 A:middle
So we can schedule them, and
even if the app goes away,

63
00:03:05,306 --> 00:03:07,586 A:middle
your extension still
sticks around.

64
00:03:08,296 --> 00:03:11,436 A:middle
So here's an example
of an extension

65
00:03:11,866 --> 00:03:13,396 A:middle
and what the user might do

66
00:03:13,646 --> 00:03:15,666 A:middle
to invoke your extension
and its UI.

67
00:03:16,646 --> 00:03:19,786 A:middle
Here we just have a
little network thing.

68
00:03:20,386 --> 00:03:22,266 A:middle
So it's a new social
networking app.

69
00:03:22,266 --> 00:03:24,896 A:middle
And it's bundling a
social sharing extension.

70
00:03:25,226 --> 00:03:29,986 A:middle
So we see it in the far right
there with the purple icon.

71
00:03:30,456 --> 00:03:34,806 A:middle
And I go to this site and I want
to share this with my friends

72
00:03:34,806 --> 00:03:36,276 A:middle
on my new social network.

73
00:03:36,656 --> 00:03:40,366 A:middle
So the user will see an
icon representing my app.

74
00:03:40,366 --> 00:03:44,596 A:middle
But what that means is that I'm
going to be using the extension

75
00:03:44,596 --> 00:03:46,906 A:middle
for social sharing
vended by that app.

76
00:03:47,736 --> 00:03:52,546 A:middle
So in previous releases of iOS
we've been able to do this,

77
00:03:52,546 --> 00:03:56,016 A:middle
but the Facebook and the
Twitter experiences, et cetera,

78
00:03:56,016 --> 00:03:57,986 A:middle
have all been provided by Apple.

79
00:03:59,456 --> 00:04:01,476 A:middle
Now we're letting
anyone who wants

80

81
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

82
00:03:59,456 --> 00:04:01,476 A:middle
Now we're letting
anyone who wants

83
00:04:01,476 --> 00:04:04,356 A:middle
to provide a social sharing
extension not only provide it

84
00:04:04,356 --> 00:04:05,956 A:middle
but define their own experience.

85
00:04:06,796 --> 00:04:11,136 A:middle
So in this case, when
the user elects to share,

86
00:04:11,136 --> 00:04:16,136 A:middle
they're getting a window that
is designed by the developer

87
00:04:16,136 --> 00:04:20,146 A:middle
of this social networking app
with whatever experience --

88
00:04:20,976 --> 00:04:24,536 A:middle
whatever experience that app
developer wants to provide.

89
00:04:25,486 --> 00:04:26,816 A:middle
So that's a high level

90
00:04:26,816 --> 00:04:31,236 A:middle
of how Extensions are
architected on our system.

91
00:04:31,486 --> 00:04:32,616 A:middle
Let's talk a little bit

92
00:04:32,616 --> 00:04:36,816 A:middle
about how we actually extend
the experience of your app

93
00:04:36,816 --> 00:04:40,046 A:middle
and project it into other
parts of the system.

94
00:04:40,796 --> 00:04:43,286 A:middle
So as we saw yesterday
in Part One,

95
00:04:43,796 --> 00:04:46,666 A:middle
Extensions are a very
focused experience.

96
00:04:47,116 --> 00:04:49,216 A:middle
And the operating
system takes care

97
00:04:49,216 --> 00:04:52,336 A:middle
of seamlessly merging the
experience that you provide

98
00:04:52,806 --> 00:04:55,126 A:middle
in your extension
with the current app

99
00:04:55,376 --> 00:04:59,276 A:middle
or just whatever the
current system UI is.

100

101
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

102
00:05:00,266 --> 00:05:03,236 A:middle
So you guys are going
to want to provide code

103
00:05:03,236 --> 00:05:05,716 A:middle
to make the experience your own.

104
00:05:05,946 --> 00:05:09,076 A:middle
And that's going to almost
certainly mean that you're going

105
00:05:09,076 --> 00:05:12,306 A:middle
to want to re-use at least
some of the code from your app.

106
00:05:14,276 --> 00:05:18,546 A:middle
So we hope you've been using the
Model View Controller paradigm.

107
00:05:18,546 --> 00:05:21,716 A:middle
Features like Extensions
are exactly why we

108
00:05:21,946 --> 00:05:24,016 A:middle
so desperately encourage
you guys

109
00:05:24,016 --> 00:05:26,286 A:middle
to adopt this design
pattern year after year,

110
00:05:26,816 --> 00:05:29,546 A:middle
because chances are with your
extension, you're going to want

111
00:05:29,546 --> 00:05:32,846 A:middle
to share at least the data
model and probably some

112
00:05:32,846 --> 00:05:34,406 A:middle
of the View Controller
layers, too.

113
00:05:35,256 --> 00:05:39,386 A:middle
You probably don't want to
share the view of your app

114
00:05:39,456 --> 00:05:42,006 A:middle
because your app is
designed around taking

115
00:05:42,006 --> 00:05:44,366 A:middle
up the whole screen whereas
your extension will not.

116
00:05:44,846 --> 00:05:46,946 A:middle
But that's only one-third
of your code.

117
00:05:46,946 --> 00:05:47,436 A:middle
You don't want to have

118
00:05:47,476 --> 00:05:49,536 A:middle
to rewrite the entire
two-thirds of it.

119
00:05:49,796 --> 00:05:52,346 A:middle
You want to be able to
share code between the two.

120
00:05:52,826 --> 00:05:59,866 A:middle
And if only computer science
had come up with a way

121

122
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

123
00:06:00,356 --> 00:06:04,216 A:middle
to allow the same code to exist
in two processes without having

124
00:06:04,216 --> 00:06:06,256 A:middle
to duplicate those code pages.

125
00:06:06,806 --> 00:06:10,296 A:middle
I think we might have
a solution to this.

126
00:06:11,096 --> 00:06:13,046 A:middle
And I think that
solution's called Frameworks.

127
00:06:14,096 --> 00:06:20,476 A:middle
So, on iOS, in iOS 8, we're now
allowing you to ship Frameworks

128
00:06:20,476 --> 00:06:21,446 A:middle
within your app bundle.

129
00:06:22,516 --> 00:06:28,016 A:middle
[ Applause ]

130
00:06:28,516 --> 00:06:29,546 A:middle
Don't get too excited.

131
00:06:31,786 --> 00:06:35,706 A:middle
So this is obviously new to iOS,
but you've been able to do this

132
00:06:35,706 --> 00:06:39,386 A:middle
on OS X since the dawn of time.

133
00:06:40,106 --> 00:06:42,146 A:middle
But it's a brand new
capability to iOS.

134
00:06:42,146 --> 00:06:46,486 A:middle
And what we're doing with it
is we're also encrypting the

135
00:06:46,486 --> 00:06:48,926 A:middle
frameworks that you
ship in your app bundle

136
00:06:49,266 --> 00:06:53,896 A:middle
with the same encryption
that your apps are encrypted

137
00:06:53,896 --> 00:06:57,026 A:middle
with to give you that
same level of protection

138
00:06:57,026 --> 00:07:04,366 A:middle
against piracy and
-- well, piracy.

139

140
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

141
00:06:57,026 --> 00:07:04,366 A:middle
against piracy and
-- well, piracy.

142
00:07:04,906 --> 00:07:06,726 A:middle
[Laughter] So it's
critical to note

143
00:07:06,726 --> 00:07:11,336 A:middle
that these frameworks are not
general code sharing mechanisms.

144
00:07:11,336 --> 00:07:13,616 A:middle
So you're not going
to have many apps

145
00:07:13,616 --> 00:07:16,196 A:middle
on the system referencing
the same copy of a framework.

146
00:07:16,626 --> 00:07:20,566 A:middle
These frameworks are here to
facilitate sharing between

147
00:07:20,566 --> 00:07:22,546 A:middle
and an app and all
of its Extensions.

148
00:07:22,896 --> 00:07:28,896 A:middle
So the code that that framework
contains can be used by the app

149
00:07:28,896 --> 00:07:30,656 A:middle
or any of the Extensions
it bundles,

150
00:07:30,906 --> 00:07:32,636 A:middle
but nothing else on the system.

151
00:07:35,296 --> 00:07:37,906 A:middle
So when you use -- when
you bundle a framework

152
00:07:37,906 --> 00:07:40,416 A:middle
with your app, there
are some implications

153
00:07:40,496 --> 00:07:42,196 A:middle
for your minimum
deployment target.

154
00:07:43,076 --> 00:07:45,116 A:middle
If your app links the framework,

155
00:07:45,266 --> 00:07:47,526 A:middle
we're going to change its
minimum deployment target

156
00:07:47,526 --> 00:07:49,476 A:middle
to iOS 8 because
as I said before,

157
00:07:49,476 --> 00:07:51,176 A:middle
we're encrypting
these frameworks.

158
00:07:51,176 --> 00:07:54,226 A:middle
And previous versions of the
operating system don't know

159
00:07:54,226 --> 00:07:56,286 A:middle
about how to decrypt
them when you use them.

160
00:07:56,976 --> 00:07:59,506 A:middle
However, if you're
just shipping your app

161
00:07:59,506 --> 00:08:01,616 A:middle
and then there's a few
Extensions you have

162

163
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

164
00:07:59,506 --> 00:08:01,616 A:middle
and then there's a few
Extensions you have

165
00:08:01,616 --> 00:08:03,216 A:middle
that all link in a framework,

166
00:08:03,706 --> 00:08:06,436 A:middle
your app's minimum deployment
target doesn't change at all.

167
00:08:07,646 --> 00:08:10,266 A:middle
Your extension functionality
obviously won't be available

168
00:08:10,266 --> 00:08:14,466 A:middle
to previous versions of iOS,
but the app will still be able

169
00:08:14,466 --> 00:08:16,086 A:middle
to run without any problems.

170
00:08:17,826 --> 00:08:23,036 A:middle
So that's a very brief overview
of embedded frameworks on iOS.

171
00:08:23,306 --> 00:08:27,916 A:middle
To learn more, I encourage you
to go to the session tomorrow

172
00:08:27,916 --> 00:08:31,326 A:middle
at 3:15 in Presidio,
Building Modern Frameworks,

173
00:08:32,385 --> 00:08:37,655 A:middle
where it'll cover API usage,
how to write a good framework,

174
00:08:37,655 --> 00:08:39,626 A:middle
how to bundle it,
all that good stuff.

175
00:08:39,976 --> 00:08:42,246 A:middle
But for now, you've
got Frameworks.

176
00:08:43,086 --> 00:08:46,446 A:middle
And it seems like you
guys are excited about it.

177
00:08:47,366 --> 00:08:51,926 A:middle
So, another topic for code
sharing is API availability.

178
00:08:52,156 --> 00:08:53,776 A:middle
If you're writing one
of these frameworks,

179
00:08:53,776 --> 00:08:55,156 A:middle
or if you're bundling
one of these frameworks,

180
00:08:55,926 --> 00:08:58,836 A:middle
what code are you
going to be using

181
00:08:58,836 --> 00:09:00,536 A:middle
between your app
and your extension?

182

183
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

184
00:08:58,836 --> 00:09:00,536 A:middle
between your app
and your extension?

185
00:09:03,236 --> 00:09:07,346 A:middle
So, the vast majority of our
API is going to be available

186
00:09:07,346 --> 00:09:08,776 A:middle
for Extensions to use.

187
00:09:08,936 --> 00:09:10,866 A:middle
But there are going
to be some exceptions.

188
00:09:11,246 --> 00:09:13,676 A:middle
And these exceptions are
going to be marked explicitly

189
00:09:13,676 --> 00:09:16,336 A:middle
with a new kind of
unavailability macro.

190
00:09:16,376 --> 00:09:19,486 A:middle
And here's an example
of what that looks like.

191
00:09:20,566 --> 00:09:24,116 A:middle
So, UIApplication --
or with UIApplication,

192
00:09:24,116 --> 00:09:27,156 A:middle
the shared application method
has been explicitly marked

193
00:09:27,156 --> 00:09:28,176 A:middle
as unavailable.

194
00:09:28,606 --> 00:09:32,276 A:middle
And the UIKit folks have
helpfully provided an error

195
00:09:32,276 --> 00:09:34,956 A:middle
message that says: Use a view
controller based solution

196
00:09:34,956 --> 00:09:35,626 A:middle
where appropriate.

197
00:09:35,896 --> 00:09:37,946 A:middle
I'm in Core OS, no
idea what that means.

198
00:09:38,156 --> 00:09:39,566 A:middle
But I'm sure you
guys have an idea.

199
00:09:41,456 --> 00:09:44,776 A:middle
Now, if you're dropping down
to Super [inaudible] API

200
00:09:45,006 --> 00:09:46,926 A:middle
that has underscores,
there's going

201
00:09:46,926 --> 00:09:49,626 A:middle
to be a corresponding
availability macro there

202
00:09:49,626 --> 00:09:52,536 A:middle
that is evaluated the
same way by the tools

203
00:09:52,536 --> 00:09:57,026 A:middle
and will generate the
same errors at build time.

204
00:09:57,236 --> 00:09:59,546 A:middle
So that's unavailability.

205
00:09:59,776 --> 00:10:01,466 A:middle
Like I said, the vast majority

206

207
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

208
00:09:59,776 --> 00:10:01,466 A:middle
Like I said, the vast majority

209
00:10:01,466 --> 00:10:03,916 A:middle
of cases you probably won't
need to worry about it.

210
00:10:04,296 --> 00:10:08,406 A:middle
But if you do trip across
an API use in your extension

211
00:10:08,406 --> 00:10:11,066 A:middle
that is not allowed, you'll
know as soon as possible

212
00:10:11,066 --> 00:10:13,816 A:middle
at build time before you
can even run the extension.

213
00:10:14,406 --> 00:10:17,436 A:middle
So that's how you share code

214
00:10:17,436 --> 00:10:19,756 A:middle
with your extension
and your app.

215
00:10:20,736 --> 00:10:22,476 A:middle
But at run time you're
going to want

216
00:10:22,546 --> 00:10:24,926 A:middle
to create a consistent
experience, too.

217
00:10:26,206 --> 00:10:31,426 A:middle
And a consistent experience
often means sharing the same set

218
00:10:31,426 --> 00:10:35,146 A:middle
of resources and making sure
that changes the user has made

219
00:10:35,146 --> 00:10:37,986 A:middle
to their data in your
extension are reflected

220
00:10:37,986 --> 00:10:40,426 A:middle
in the app the next time
they see it, or vice versa.

221
00:10:41,816 --> 00:10:44,166 A:middle
So we have a few data
sharing solutions

222
00:10:44,166 --> 00:10:45,396 A:middle
for you for Extensions.

223
00:10:46,336 --> 00:10:50,386 A:middle
So the first thing
to understand is

224
00:10:50,386 --> 00:10:53,576 A:middle
that an extension has
a separate container

225
00:10:53,576 --> 00:10:54,966 A:middle
from its app by default.

226
00:10:54,966 --> 00:10:59,336 A:middle
It's just like how two apps
are segregated from each other.

227
00:10:59,336 --> 00:11:01,266 A:middle
They don't have access
to each other's data.

228

229
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

230
00:10:59,336 --> 00:11:01,266 A:middle
They don't have access
to each other's data.

231
00:11:02,036 --> 00:11:03,776 A:middle
But for any extension
you bundle,

232
00:11:03,776 --> 00:11:06,526 A:middle
you can opt to share
specific bits of data

233
00:11:06,566 --> 00:11:09,436 A:middle
that will help you provide
that consistent experience

234
00:11:09,436 --> 00:11:11,056 A:middle
that all of our users expect.

235
00:11:11,156 --> 00:11:16,676 A:middle
And you can do this with what's
called a shared container.

236
00:11:17,456 --> 00:11:22,846 A:middle
So this is based on a new
concept called an App Group.

237
00:11:23,156 --> 00:11:27,356 A:middle
And this provides a shared
storage area for kind

238
00:11:27,356 --> 00:11:31,166 A:middle
of just general data sharing
between your app your extension.

239
00:11:31,476 --> 00:11:34,896 A:middle
So if you have some custom
data models or custom databases

240
00:11:35,246 --> 00:11:36,916 A:middle
that your app and your
extension need to use,

241
00:11:37,296 --> 00:11:40,946 A:middle
this is a good place to put
those files and access them.

242
00:11:41,556 --> 00:11:43,286 A:middle
However, you have to remember

243
00:11:43,286 --> 00:11:47,446 A:middle
that there's nothing stopping
your extension and your app

244
00:11:47,626 --> 00:11:49,056 A:middle
from running at the same time.

245
00:11:49,266 --> 00:11:51,766 A:middle
Your app may be in a
long-running background task.

246
00:11:52,006 --> 00:11:53,876 A:middle
It may not have been
suspended yet.

247
00:11:54,046 --> 00:11:58,546 A:middle
And it might be writing some
data to that shared container.

248
00:11:58,546 --> 00:12:00,816 A:middle
And then the user might
bring up your extension.

249

250
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

251
00:11:58,546 --> 00:12:00,816 A:middle
And then the user might
bring up your extension.

252
00:12:01,236 --> 00:12:02,766 A:middle
So what this means is
that you have to make sure

253
00:12:02,766 --> 00:12:04,966 A:middle
to safely coordinate
all the reads

254
00:12:04,966 --> 00:12:06,156 A:middle
and writes for those files.

255
00:12:06,156 --> 00:12:08,096 A:middle
You have to make sure that
you only write to the file

256
00:12:08,666 --> 00:12:10,616 A:middle
when there are no
readers contending for it.

257
00:12:10,776 --> 00:12:13,086 A:middle
And that you're only
reading when the file is

258
00:12:13,086 --> 00:12:14,606 A:middle
in a consistent state.

259
00:12:18,536 --> 00:12:20,656 A:middle
Otherwise, you're going
to blow up your file,

260
00:12:20,886 --> 00:12:22,086 A:middle
or it's just going
to get corrupted.

261
00:12:22,266 --> 00:12:25,726 A:middle
So we introduce some sort of
synchronization scheme here

262
00:12:26,726 --> 00:12:29,796 A:middle
so that if the extension
writes, it holds off the app.

263
00:12:29,796 --> 00:12:31,946 A:middle
And if the app writes, it
holds off the extension.

264
00:12:31,946 --> 00:12:34,606 A:middle
And they're both dealing with a
consistent view of the universe.

265
00:12:35,336 --> 00:12:36,936 A:middle
And here are a few of
those technologies.

266
00:12:38,276 --> 00:12:41,176 A:middle
The first one is
NSFileCoordination,

267
00:12:41,386 --> 00:12:44,436 A:middle
which kind of provides a general
inner process synchronization

268
00:12:44,436 --> 00:12:47,706 A:middle
strategy for your
extension and --

269
00:12:48,646 --> 00:12:51,226 A:middle
for your extension and your app.

270
00:12:51,676 --> 00:12:54,896 A:middle
If you're using CoreData, you
can get a lot of this for free.

271
00:12:54,896 --> 00:12:57,396 A:middle
There are certain
CoreData backing stores

272
00:12:57,396 --> 00:12:59,986 A:middle
that are documented
as being usable

273
00:12:59,986 --> 00:13:01,796 A:middle
for multiple processes
at the same time.

274

275
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

276
00:12:59,986 --> 00:13:01,796 A:middle
for multiple processes
at the same time.

277
00:13:02,316 --> 00:13:05,196 A:middle
And sqLite also makes
some of these guarantees.

278
00:13:05,496 --> 00:13:07,926 A:middle
So if you're using one of
those two technologies,

279
00:13:08,156 --> 00:13:09,346 A:middle
chances are you're already set.

280
00:13:09,346 --> 00:13:12,136 A:middle
But if you have something more
custom, you're going to want

281
00:13:12,136 --> 00:13:13,416 A:middle
to use NSFileCoordination.

282
00:13:15,406 --> 00:13:19,206 A:middle
But if you're talking about more
structured data that is, say,

283
00:13:19,206 --> 00:13:22,346 A:middle
vended by Apple's APIs
like NSUserDefaults,

284
00:13:23,696 --> 00:13:25,616 A:middle
you can end up sharing
much more easily.

285
00:13:26,396 --> 00:13:29,326 A:middle
So, an app and its
extension both have different

286
00:13:29,326 --> 00:13:30,576 A:middle
defaults domains.

287
00:13:30,876 --> 00:13:32,686 A:middle
But you can set up
a shared domain

288
00:13:33,166 --> 00:13:35,766 A:middle
with the initWithSuiteName API.

289
00:13:36,016 --> 00:13:40,306 A:middle
And you create this suite, and
the API manages access to it

290
00:13:40,366 --> 00:13:43,316 A:middle
for your app and your extension
so that you don't have to worry

291
00:13:43,316 --> 00:13:46,226 A:middle
about making sure that
you're not writing

292
00:13:46,226 --> 00:13:47,436 A:middle
to that backing store

293
00:13:47,666 --> 00:13:49,286 A:middle
when someone else is
trying to read from it.

294
00:13:49,466 --> 00:13:51,606 A:middle
The API coordinates
all of that for you.

295
00:13:51,816 --> 00:13:54,156 A:middle
And this is a really
easy way for, say,

296
00:13:54,326 --> 00:13:57,276 A:middle
the user to modify
some setting in the app

297
00:13:57,276 --> 00:14:01,826 A:middle
which then the extension can
pick up on its next invocation.

298

299
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

300
00:13:57,276 --> 00:14:01,826 A:middle
which then the extension can
pick up on its next invocation.

301
00:14:02,356 --> 00:14:06,186 A:middle
There's a similar
story for keychains.

302
00:14:06,516 --> 00:14:09,286 A:middle
So the shared keychain
is based on an app group.

303
00:14:09,686 --> 00:14:15,956 A:middle
And the app group can
encompass a few apps

304
00:14:15,956 --> 00:14:17,336 A:middle
as well as your Extensions.

305
00:14:17,876 --> 00:14:21,356 A:middle
So by default, as I
said, the extension

306
00:14:21,356 --> 00:14:22,896 A:middle
and the app have a
different keychain.

307
00:14:23,236 --> 00:14:26,466 A:middle
But you can set up a shared
keychain with an access group.

308
00:14:27,586 --> 00:14:31,196 A:middle
There's an issue right
now in the first beta

309
00:14:31,196 --> 00:14:33,166 A:middle
where this is actually
team ID-based.

310
00:14:33,226 --> 00:14:34,436 A:middle
So if you're familiar with that

311
00:14:34,436 --> 00:14:36,866 A:middle
where you pre-fix your bundle
identifier with a team ID

312
00:14:36,866 --> 00:14:38,686 A:middle
in order to facilitate sharing,

313
00:14:39,036 --> 00:14:40,386 A:middle
that's how you do it
in the first seed.

314
00:14:40,796 --> 00:14:43,866 A:middle
We're going to fix this up for
App Groups by the time we ship.

315
00:14:44,386 --> 00:14:47,506 A:middle
So in terms of privacy, it's
a slightly different story.

316
00:14:47,846 --> 00:14:50,366 A:middle
When I say privacy, I
mean the dialog that comes

317
00:14:50,366 --> 00:14:52,536 A:middle
up when an app is trying

318
00:14:52,536 --> 00:14:55,706 A:middle
to access certain sensitive user
data like photos or contacts.

319
00:14:55,876 --> 00:14:57,046 A:middle
You'll get a dialog saying:

320
00:14:57,356 --> 00:14:59,556 A:middle
"Would you like to allow
this app to have access

321
00:14:59,556 --> 00:15:00,446 A:middle
to this piece of data?"

322

323
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

324
00:14:59,556 --> 00:15:00,446 A:middle
to this piece of data?"

325
00:15:00,546 --> 00:15:03,546 A:middle
And the user can
either decline or allow.

326
00:15:04,596 --> 00:15:07,626 A:middle
So when the user allows
your app to have access

327
00:15:07,776 --> 00:15:10,656 A:middle
to a certain piece of
data, it's actually going

328
00:15:10,656 --> 00:15:13,316 A:middle
to cover the entirety
of your app bundle,

329
00:15:13,376 --> 00:15:14,606 A:middle
including Extensions.

330
00:15:14,816 --> 00:15:19,066 A:middle
So that the user, once they have
approved your app for access

331
00:15:19,066 --> 00:15:21,836 A:middle
to your photos, they don't
have to then go and approve all

332
00:15:21,836 --> 00:15:24,246 A:middle
of your Extensions for
access to the same data.

333
00:15:24,776 --> 00:15:26,626 A:middle
Now, there are going to be
some Extensions to this --

334
00:15:26,686 --> 00:15:28,766 A:middle
or sorry -- some
exceptions to this rule.

335
00:15:29,136 --> 00:15:32,486 A:middle
But in general, the rule is

336
00:15:32,646 --> 00:15:36,726 A:middle
that approval covers the
entirety of your app.

337
00:15:37,156 --> 00:15:40,126 A:middle
So let's go over best
practices a little bit.

338
00:15:41,106 --> 00:15:42,616 A:middle
As we said at the beginning,

339
00:15:42,986 --> 00:15:45,416 A:middle
the front-most app is
the most important thing.

340
00:15:45,416 --> 00:15:48,286 A:middle
So it's very important that
your exceptions be lean.

341
00:15:48,566 --> 00:15:50,526 A:middle
These things do not
have the full run

342
00:15:50,526 --> 00:15:51,826 A:middle
of the system like the app does.

343
00:15:51,936 --> 00:15:53,636 A:middle
The app's still there.

344
00:15:54,126 --> 00:15:56,666 A:middle
It's still using the lion's
share of system resources.

345
00:15:56,916 --> 00:16:00,046 A:middle
The Extensions are very
focused, very purpose-built.

346

347
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

348
00:15:56,916 --> 00:16:00,046 A:middle
The Extensions are very
focused, very purpose-built.

349
00:16:00,046 --> 00:16:04,726 A:middle
And it's important that they get
in, do their job, and get out.

350
00:16:04,986 --> 00:16:06,146 A:middle
And be stateless.

351
00:16:06,396 --> 00:16:08,506 A:middle
You might know that we
kill apps aggressively

352
00:16:08,506 --> 00:16:09,836 A:middle
or suspend them on iOS.

353
00:16:10,186 --> 00:16:12,066 A:middle
We're doubling down on
that with Extensions.

354
00:16:12,066 --> 00:16:13,496 A:middle
And we're going to
be more aggressive.

355
00:16:13,626 --> 00:16:17,066 A:middle
And because of this, there
is no general multi-tasking

356
00:16:17,066 --> 00:16:19,116 A:middle
functionality available
to Extensions.

357
00:16:19,356 --> 00:16:22,736 A:middle
So no VoIP, no long-running
background tasks,

358
00:16:22,736 --> 00:16:23,336 A:middle
that kind of thing.

359
00:16:23,656 --> 00:16:27,426 A:middle
We do support a short task
completion before we suspend

360
00:16:27,426 --> 00:16:28,546 A:middle
or kill the extension.

361
00:16:28,896 --> 00:16:32,656 A:middle
But this is meant to give you
time to flush any dirty state

362
00:16:32,656 --> 00:16:35,266 A:middle
to disk so that the user
doesn't lose their data and so

363
00:16:35,266 --> 00:16:36,546 A:middle
that the app can pick that up.

364
00:16:37,446 --> 00:16:39,466 A:middle
And finally, be awesome.

365
00:16:40,446 --> 00:16:42,006 A:middle
Make these things seamless.

366
00:16:42,426 --> 00:16:43,956 A:middle
Make them useful to our users.

367
00:16:44,356 --> 00:16:49,036 A:middle
And as a user of your products,
I can't wait to be surprised

368
00:16:49,036 --> 00:16:50,606 A:middle
and delighted by what
you guys turn out.

369
00:16:51,656 --> 00:16:53,546 A:middle
With that, I'd like to
turn it over to Aki.

370
00:16:55,516 --> 00:16:59,886 A:middle
[ Applause ]

371

372
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

373
00:17:00,386 --> 00:17:00,656 A:middle
>> Thank you.

374
00:17:01,686 --> 00:17:02,366 A:middle
Thank you Damien.

375
00:17:02,826 --> 00:17:05,675 A:middle
Hi, I'm Aki Inoue
from Cocoa Group.

376
00:17:06,236 --> 00:17:10,096 A:middle
Today, I'm discussing
an exciting new feature,

377
00:17:10,646 --> 00:17:15,296 A:middle
Action Extensions
for iOS and OS X.

378
00:17:15,996 --> 00:17:20,636 A:middle
Yesterday in Part One, Ian, Matt
and Guy introduced Extensions

379
00:17:20,856 --> 00:17:24,596 A:middle
and two Extensions point
along with key technologies

380
00:17:24,675 --> 00:17:29,176 A:middle
such as remote view
controller and activation rules.

381
00:17:30,056 --> 00:17:34,006 A:middle
Damien explained foundation of
technologies for Extensions.

382
00:17:34,626 --> 00:17:37,816 A:middle
Action is an extension
point that utilizes

383
00:17:38,326 --> 00:17:43,876 A:middle
and integrates all
these best technologies.

384
00:17:44,706 --> 00:17:45,446 A:middle
Let's get started.

385
00:17:45,796 --> 00:17:50,966 A:middle
So, Action is a screenshot
[inaudible] system to services,

386
00:17:51,726 --> 00:17:53,976 A:middle
an inter-application
collaboration technology

387
00:17:53,976 --> 00:17:57,416 A:middle
available since the
first release of OS X.

388
00:17:57,446 --> 00:18:03,326 A:middle
Action operates with user
selection inside the host

389

390
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

391
00:17:57,446 --> 00:18:03,326 A:middle
Action operates with user
selection inside the host

392
00:18:03,326 --> 00:18:09,886 A:middle
application that is it
extends the system framework,

393
00:18:10,296 --> 00:18:15,176 A:middle
not just the single
application or service.

394
00:18:15,646 --> 00:18:18,596 A:middle
Earlier in this conference,
you have seen one

395
00:18:18,596 --> 00:18:22,616 A:middle
of Action Extension's
Markup operating inside many

396
00:18:22,616 --> 00:18:24,306 A:middle
applications on Yosemite.

397
00:18:26,176 --> 00:18:29,566 A:middle
In fact, this extension
is available

398
00:18:30,046 --> 00:18:33,386 A:middle
to image attachments
throughout the system.

399
00:18:34,156 --> 00:18:38,026 A:middle
Let's just dive into
the details.

400
00:18:38,576 --> 00:18:40,476 A:middle
Just like any other Extensions,

401
00:18:40,956 --> 00:18:44,926 A:middle
Actions are described
by info.plist.

402
00:18:45,576 --> 00:18:51,476 A:middle
First, inside NSExtension
Dictionary, it's identified

403
00:18:51,476 --> 00:18:55,396 A:middle
by NSExtensionPoint
Identifier.com.

404
00:18:55,396 --> 00:18:56,566 A:middle
apple.ui-services.

405
00:18:58,506 --> 00:19:04,796 A:middle
Next, NSExtensionPrincipalClass
specifies the main controller

406

407
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

408
00:18:58,506 --> 00:19:04,796 A:middle
Next, NSExtensionPrincipalClass
specifies the main controller

409
00:19:04,836 --> 00:19:06,076 A:middle
[inaudible] for your extension.

410
00:19:07,076 --> 00:19:10,206 A:middle
Just like Guy and Matt
described yesterday,

411
00:19:10,686 --> 00:19:16,836 A:middle
it's typically a subclass of
the ViewController option.

412
00:19:17,456 --> 00:19:20,546 A:middle
Now, the principal class
is the main controller

413
00:19:20,546 --> 00:19:23,716 A:middle
for your extension as
well as the [inaudible]

414
00:19:24,076 --> 00:19:26,606 A:middle
to the extension APIs.

415
00:19:28,056 --> 00:19:32,076 A:middle
With a new View Controller
property called Extension

416
00:19:32,436 --> 00:19:36,676 A:middle
Context, you can get
NSExtention Context Object,

417
00:19:36,976 --> 00:19:39,506 A:middle
which represent connection
to the host application.

418
00:19:41,486 --> 00:19:47,326 A:middle
Through that, you can access
an array of NSExtention items.

419
00:19:47,996 --> 00:19:52,926 A:middle
Each item representing a logical
data unit coming back from --

420
00:19:53,026 --> 00:19:58,756 A:middle
coming from the host
application.

421

422
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

423
00:20:00,776 --> 00:20:08,576 A:middle
And, you can attach [inaudible]
data to extension item.

424
00:20:10,166 --> 00:20:12,906 A:middle
Movie, image, voice,
so and so forth.

425
00:20:13,526 --> 00:20:18,076 A:middle
The data is contained inside an
object called NSItemProvider.

426
00:20:20,416 --> 00:20:22,726 A:middle
Okay let's back to
the Info.plist.

427
00:20:23,936 --> 00:20:26,416 A:middle
Inside NSExtensionAttributes
Dictionary,

428
00:20:27,156 --> 00:20:33,446 A:middle
which specifies extension
point-specific attributes,

429
00:20:33,446 --> 00:20:38,286 A:middle
you declare NSExtensionservice
RoleType,

430
00:20:39,306 --> 00:20:41,666 A:middle
which [inaudible]
editor or viewer.

431
00:20:42,226 --> 00:20:45,476 A:middle
In this example, we are
using NSExtensionservice

432
00:20:45,476 --> 00:20:46,746 A:middle
RoleTypeEditor.

433
00:20:47,336 --> 00:20:50,486 A:middle
That means it's only
presented to the context

434
00:20:50,866 --> 00:20:52,876 A:middle
where the document is editable.

435
00:20:54,226 --> 00:21:01,136 A:middle
Next, as share Extensions you
can specify activation rules

436

437
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

438
00:20:54,226 --> 00:21:01,136 A:middle
Next, as share Extensions you
can specify activation rules

439
00:21:02,126 --> 00:21:04,696 A:middle
with NSExtensionActivationRules.

440
00:21:05,646 --> 00:21:09,986 A:middle
It can be NS [inaudible] for
define your string or the list

441
00:21:09,986 --> 00:21:15,866 A:middle
of supported data types.

442
00:21:16,066 --> 00:21:19,956 A:middle
Now, let's look at code samples.

443
00:21:20,556 --> 00:21:22,906 A:middle
First, you can get
extension context

444
00:21:23,106 --> 00:21:27,146 A:middle
through the extension
context property.

445
00:21:27,866 --> 00:21:32,126 A:middle
Next, you can get
extension item through item,

446
00:21:32,456 --> 00:21:33,906 A:middle
inputItems property,

447
00:21:34,246 --> 00:21:38,036 A:middle
which returns the array
of extension items.

448
00:21:38,866 --> 00:21:44,366 A:middle
Finally, you can get attached
data using attachments property

449
00:21:44,716 --> 00:21:48,736 A:middle
and it's containing the
NSItemProvider objects.

450
00:21:49,506 --> 00:21:54,416 A:middle
Once you have NSItemProvider,
you can load data

451
00:21:54,656 --> 00:21:56,026 A:middle
from the host application.

452
00:21:56,646 --> 00:21:58,426 A:middle
It's lazy and secure.

453

454
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

455
00:22:00,456 --> 00:22:02,476 A:middle
Using the
LoadItemForTypeIdentifier

456
00:22:02,746 --> 00:22:04,676 A:middle
options completionHandler

457
00:22:05,326 --> 00:22:08,936 A:middle
and specifying a UTI
type of your choice.

458
00:22:09,406 --> 00:22:13,186 A:middle
In this case, we are using a
custom data type, MyDocumentUTI.

459
00:22:14,666 --> 00:22:21,746 A:middle
And you specify a representation
of the data you want to receive.

460
00:22:21,746 --> 00:22:23,956 A:middle
In this case, we
are using NSData

461
00:22:23,956 --> 00:22:29,516 A:middle
and it contains the custom
data format, NSDocument UTI.

462
00:22:31,556 --> 00:22:35,606 A:middle
Once you have that
data, you can set

463
00:22:35,606 --> 00:22:39,156 A:middle
up your user interface
according to the data coming

464
00:22:39,326 --> 00:22:40,976 A:middle
from the host application.

465
00:22:42,566 --> 00:22:52,006 A:middle
Next, with Action, unlike
shared Extensions, it's possible

466
00:22:52,006 --> 00:22:56,176 A:middle
that extension time
return some modified data.

467
00:22:57,006 --> 00:23:01,756 A:middle
You've seen Markup changing and
marking up your image in place

468

469
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

470
00:22:57,006 --> 00:23:01,756 A:middle
You've seen Markup changing and
marking up your image in place

471
00:23:02,116 --> 00:23:04,206 A:middle
and return it to
the mail document.

472
00:23:04,966 --> 00:23:08,096 A:middle
Your extension can
perform the similar thing.

473
00:23:09,976 --> 00:23:18,736 A:middle
When user click a Down button or
similar action, you can perform

474
00:23:20,666 --> 00:23:26,106 A:middle
and return the modified data
back to their host application.

475
00:23:26,526 --> 00:23:30,346 A:middle
The process is reverse of
loading the data coming

476
00:23:30,466 --> 00:23:31,666 A:middle
from the host application.

477
00:23:32,666 --> 00:23:39,036 A:middle
First, you want to
instantiate NSItemProvider

478
00:23:39,706 --> 00:23:43,796 A:middle
with your data and data type.

479
00:23:44,196 --> 00:23:47,116 A:middle
Next, you can create
NSExtensionItem

480
00:23:47,436 --> 00:23:49,296 A:middle
and attach your item provider.

481
00:23:50,966 --> 00:23:56,116 A:middle
Finally, you can send
completeRequestReturningItems

482
00:23:56,606 --> 00:24:00,126 A:middle
completionHandler to
your extension item

483

484
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

485
00:23:56,606 --> 00:24:00,126 A:middle
completionHandler to
your extension item

486
00:24:01,156 --> 00:24:03,936 A:middle
with an array of
extension items.

487
00:24:04,986 --> 00:24:09,366 A:middle
This actually concludes
your extension life cycle.

488
00:24:10,606 --> 00:24:15,336 A:middle
So typically you want
to return your data

489
00:24:15,546 --> 00:24:23,396 A:middle
and conclude your NUI
operation at this point.

490
00:24:23,676 --> 00:24:27,146 A:middle
Unlike [inaudible] application,
if your viewer type,

491
00:24:27,716 --> 00:24:30,986 A:middle
you don't have to
return any data back

492
00:24:31,126 --> 00:24:32,346 A:middle
to the host application.

493
00:24:33,986 --> 00:24:39,256 A:middle
So if your viewer application
just like share Extensions,

494
00:24:39,856 --> 00:24:44,986 A:middle
you can invoke
completeRequestReturningItems

495
00:24:46,516 --> 00:24:49,416 A:middle
completionHandler
with new argument.

496
00:24:51,206 --> 00:24:59,396 A:middle
So far, I have covered how
to write Action Extensions.

497

498
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

499
00:25:00,636 --> 00:25:05,446 A:middle
Now, let me explain how you
can integrate Extensions

500
00:25:05,776 --> 00:25:10,506 A:middle
into your own applications.

501
00:25:10,506 --> 00:25:19,366 A:middle
On iOS UIActivityViewController
drives both social and share

502
00:25:19,366 --> 00:25:21,036 A:middle
and Action Extensions.

503
00:25:21,716 --> 00:25:27,956 A:middle
The [inaudible] controlled by
the View Controller can invoke

504
00:25:27,956 --> 00:25:30,196 A:middle
and manage Extensions for you.

505
00:25:31,546 --> 00:25:35,516 A:middle
UI API-wise there's
not much difference

506
00:25:35,706 --> 00:25:39,026 A:middle
for UIActivityViewController
from the previous release.

507
00:25:39,856 --> 00:25:43,526 A:middle
You still instantiate
the View Controller

508
00:25:43,856 --> 00:25:48,286 A:middle
with the selected
items from the user.

509
00:25:48,286 --> 00:25:51,776 A:middle
And View Controller takes over

510
00:25:51,896 --> 00:25:55,686 A:middle
and present the [inaudible]
and voila.

511
00:25:57,436 --> 00:26:02,426 A:middle
One enhancement we have
for iOS 8 is the support

512

513
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

514
00:25:57,436 --> 00:26:02,426 A:middle
One enhancement we have
for iOS 8 is the support

515
00:26:03,126 --> 00:26:05,506 A:middle
for editor actions.

516
00:26:06,396 --> 00:26:12,116 A:middle
We added a new property called
completionWithItemsHandler

517
00:26:12,426 --> 00:26:16,606 A:middle
to UIViewController, or
UIViewActivityViewController.

518
00:26:16,676 --> 00:26:23,376 A:middle
With this method, if the invoked
action is editor and wants

519
00:26:23,416 --> 00:26:28,106 A:middle
to return value you
could receive the result

520
00:26:28,106 --> 00:26:29,976 A:middle
in returnItems array.

521
00:26:30,846 --> 00:26:36,236 A:middle
And you can replace your
document content based

522
00:26:38,366 --> 00:26:41,346 A:middle
on the returned items.

523
00:26:42,706 --> 00:26:43,006 A:middle
NSTextView.

524
00:26:43,106 --> 00:26:49,696 A:middle
Well, if anybody know in the
audience, I just can't help talk

525
00:26:49,696 --> 00:26:53,226 A:middle
about text every year
in one way or the other.

526
00:26:54,166 --> 00:26:58,916 A:middle
On OS X, NSTextView
plays the central role

527
00:26:58,916 --> 00:27:05,506 A:middle
in presenting Extensions
to the users.

528

529
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

530
00:26:58,916 --> 00:27:05,506 A:middle
in presenting Extensions
to the users.

531
00:27:05,546 --> 00:27:08,806 A:middle
By hovering us on
top of extension --

532
00:27:08,976 --> 00:27:14,076 A:middle
by hovering extension
on top of text selection

533
00:27:14,736 --> 00:27:18,716 A:middle
or image attachments,
it presents [inaudible]

534
00:27:19,426 --> 00:27:24,056 A:middle
with manual listing old
Extensions available

535
00:27:24,936 --> 00:27:28,476 A:middle
for the context.

536
00:27:28,476 --> 00:27:33,516 A:middle
Now I have written a simple
little extension for OS X.

537
00:27:33,656 --> 00:27:36,266 A:middle
And I'd like to show how

538
00:27:36,266 --> 00:27:39,006 A:middle
to simply present your
Extensions to the user.

539
00:27:39,646 --> 00:27:41,536 A:middle
I have a text edited document

540
00:27:41,876 --> 00:27:45,076 A:middle
that contains both
text and image.

541
00:27:46,886 --> 00:27:54,946 A:middle
By hovering mouse cursor
on top of text selection,

542
00:27:55,426 --> 00:27:57,106 A:middle
you can reveal the list

543
00:27:57,296 --> 00:28:01,166 A:middle
of extension supporting
the text data.

544

545
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

546
00:27:57,296 --> 00:28:01,166 A:middle
of extension supporting
the text data.

547
00:28:03,186 --> 00:28:07,716 A:middle
Similarly, by hovering
on top of attachments,

548
00:28:08,516 --> 00:28:12,536 A:middle
you can show the list of
Extensions supporting images.

549
00:28:13,116 --> 00:28:17,726 A:middle
In this case, in addition to
the sample extension I wrote,

550
00:28:17,726 --> 00:28:23,116 A:middle
Party Crasher, it lists Markup
in the text edit application.

551
00:28:24,426 --> 00:28:28,876 A:middle
So you can see the Markup
is an extension that works,

552
00:28:28,986 --> 00:28:33,226 A:middle
not just in mail but any other
text view inside the system.

553
00:28:34,606 --> 00:28:41,756 A:middle
So, let me explain this little
extension called Party Crasher.

554
00:28:44,246 --> 00:28:47,216 A:middle
Just like many of you, I
like hanging out with people.

555
00:28:47,946 --> 00:28:51,456 A:middle
And anytime I see
pictures like this, I feel,

556
00:28:51,526 --> 00:28:54,486 A:middle
well, kind of left out.

557
00:28:54,486 --> 00:28:55,496 A:middle
[ Laughter ]

558
00:28:55,496 --> 00:29:04,586 A:middle
So, with this extension, I can
add my picture to any images

559

560
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

561
00:28:55,496 --> 00:29:04,586 A:middle
So, with this extension, I can
add my picture to any images

562
00:29:04,586 --> 00:29:06,086 A:middle
in the system instantly.

563
00:29:06,086 --> 00:29:06,153 A:middle
[ Laughter and Applause ]

564
00:29:06,153 --> 00:29:09,936 A:middle
I like this picture,
so let's keep it.

565
00:29:11,166 --> 00:29:14,116 A:middle
And the change is
saved in the document.

566
00:29:16,736 --> 00:29:19,966 A:middle
Also, there is another way

567
00:29:19,996 --> 00:29:26,556 A:middle
to invoke Action
Extensions on OS X.

568
00:29:26,786 --> 00:29:29,226 A:middle
I have modified this
Text Edit Application.

569
00:29:29,736 --> 00:29:32,806 A:middle
By the way, Text Edit
Application is a core sample

570
00:29:32,806 --> 00:29:34,886 A:middle
application for Cocoa
Application.

571
00:29:34,886 --> 00:29:36,996 A:middle
So you can modify
any way you want

572
00:29:37,996 --> 00:29:41,956 A:middle
and learn the neat
stuff about Cocoa.

573
00:29:43,996 --> 00:29:46,406 A:middle
With this Text Edit Application,

574
00:29:46,406 --> 00:29:51,356 A:middle
a version Text Edit Application,
you can show toolbar.

575
00:29:51,356 --> 00:29:56,156 A:middle
And as you can see
in the toolbar,

576
00:29:56,976 --> 00:30:02,216 A:middle
extension can register
themselves as toolbar item.

577

578
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

579
00:29:56,976 --> 00:30:02,216 A:middle
extension can register
themselves as toolbar item.

580
00:30:02,376 --> 00:30:06,306 A:middle
And it can be shown with any
toolbar inside the system.

581
00:30:07,256 --> 00:30:12,396 A:middle
And the action is applied to
the current selected object.

582
00:30:12,396 --> 00:30:15,136 A:middle
It can be text or
image, so on so forth.

583
00:30:16,456 --> 00:30:22,786 A:middle
So, let's invoke the Party
Crasher for text selection.

584
00:30:23,496 --> 00:30:28,416 A:middle
It appends a message:
Exception [inaudible]

585
00:30:29,046 --> 00:30:35,496 A:middle
to any text selection
in the system.

586
00:30:36,216 --> 00:30:41,946 A:middle
Okay. As you can see, Action
Extension is so powerful,

587
00:30:42,706 --> 00:30:48,026 A:middle
you can write simple
extension like this.

588
00:30:48,706 --> 00:30:53,286 A:middle
Or you can scale up to
[inaudible] as Markup.

589
00:30:53,966 --> 00:30:55,206 A:middle
The sky is just the limit.

590
00:30:55,296 --> 00:30:58,656 A:middle
I have demonstrated
-- with the demo,

591
00:30:58,736 --> 00:31:03,216 A:middle
I have demonstrated Extensions
can support multiple data types.

592

593
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

594
00:30:58,736 --> 00:31:03,216 A:middle
I have demonstrated Extensions
can support multiple data types.

595
00:31:04,236 --> 00:31:07,436 A:middle
It is common that
you want to support

596
00:31:07,436 --> 00:31:09,376 A:middle
as many data types as you want.

597
00:31:09,456 --> 00:31:16,516 A:middle
More data types you support,
it's easier for users

598
00:31:16,516 --> 00:31:18,186 A:middle
to work with your Extensions.

599
00:31:18,976 --> 00:31:23,966 A:middle
Let's take a look at how you
can change your behavior based

600
00:31:23,966 --> 00:31:26,616 A:middle
on the input data coming
from the host application.

601
00:31:28,336 --> 00:31:31,036 A:middle
In this case, first
we want to check

602
00:31:31,726 --> 00:31:35,426 A:middle
if it's a text data type coming
from the host application.

603
00:31:37,156 --> 00:31:43,136 A:middle
We use the kUTTypeText UTI type.

604
00:31:43,136 --> 00:31:46,756 A:middle
And it contains many
text data format

605
00:31:47,176 --> 00:31:51,536 A:middle
with hasItemConforming
ToTypeIdentifer method

606
00:31:51,626 --> 00:31:54,006 A:middle
for itemProvider you can check

607
00:31:54,006 --> 00:31:59,626 A:middle
if the itemProvider
contains the text data.

608
00:31:59,796 --> 00:32:04,866 A:middle
Once you make sure, you
can load the data using

609

610
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

611
00:31:59,796 --> 00:32:04,866 A:middle
Once you make sure, you
can load the data using

612
00:32:04,866 --> 00:32:11,036 A:middle
loadItemForTypeIdentifier
options completionHandler using

613
00:32:11,036 --> 00:32:13,696 A:middle
the data representation
type of your choice.

614
00:32:14,666 --> 00:32:18,656 A:middle
Since itemProvider has simple
data coordination facility,

615
00:32:19,316 --> 00:32:21,406 A:middle
it can map some data

616
00:32:22,726 --> 00:32:27,716 A:middle
to the target object
data type you specify.

617
00:32:27,786 --> 00:32:30,586 A:middle
In this case, we are
using NSAttributedString.

618
00:32:31,286 --> 00:32:34,426 A:middle
Once you have your data,

619
00:32:35,226 --> 00:32:40,296 A:middle
set up your user
interface and code into it.

620
00:32:42,086 --> 00:32:46,066 A:middle
Similarly, if your
text data check fails,

621
00:32:46,636 --> 00:32:49,356 A:middle
you can check for image data.

622
00:32:50,926 --> 00:32:55,326 A:middle
After checking if it's
image, you can load the image

623
00:32:55,796 --> 00:33:02,536 A:middle
and as I mentioned, itemProvider
can [inaudible] data type

624

625
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

626
00:32:55,796 --> 00:33:02,536 A:middle
and as I mentioned, itemProvider
can [inaudible] data type

627
00:33:02,766 --> 00:33:06,166 A:middle
into UIImage or NSImage for you.

628
00:33:06,716 --> 00:33:12,116 A:middle
And if you have image, configure
your user interface for image.

629
00:33:16,196 --> 00:33:22,446 A:middle
For OS X, it's common that
your extension's user interface

630
00:33:22,546 --> 00:33:25,746 A:middle
doesn't cover the entire
host application's window.

631
00:33:26,796 --> 00:33:28,156 A:middle
Just like Markup.

632
00:33:28,906 --> 00:33:33,956 A:middle
Typically you want to overlay
your user interface on top

633
00:33:33,956 --> 00:33:37,946 A:middle
of the original representation
of the host application.

634
00:33:38,976 --> 00:33:41,456 A:middle
It's easy to accomplish.

635
00:33:43,126 --> 00:33:48,416 A:middle
We have additional property
for NSItemProvider on OS X.

636
00:33:49,226 --> 00:33:50,726 A:middle
It's called sourceFrame.

637
00:33:52,306 --> 00:33:54,566 A:middle
It contains the screen
coordinate

638
00:33:55,076 --> 00:33:58,406 A:middle
for the original representation
inside the host application.

639
00:33:59,786 --> 00:34:04,586 A:middle
If you get [inaudible]
rect information,

640

641
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

642
00:33:59,786 --> 00:34:04,586 A:middle
If you get [inaudible]
rect information,

643
00:34:05,026 --> 00:34:10,456 A:middle
and if it's not empty, you
can adjust the frame according

644
00:34:10,456 --> 00:34:11,916 A:middle
to your user interface needs.

645
00:34:12,176 --> 00:34:14,746 A:middle
You might want to have
some additional frame

646
00:34:15,025 --> 00:34:17,956 A:middle
around the original
representation just like Markup

647
00:34:17,956 --> 00:34:19,525 A:middle
or Party Crasher does.

648
00:34:22,576 --> 00:34:26,036 A:middle
Then set up two NSViewController
properties,

649
00:34:26,996 --> 00:34:30,976 A:middle
preferredScreenOrigin
and preferredContentSize.

650
00:34:33,146 --> 00:34:36,146 A:middle
As you've seen with Mark's
presentation yesterday,

651
00:34:36,626 --> 00:34:39,366 A:middle
the preferred content
size is shared

652
00:34:39,496 --> 00:34:44,726 A:middle
between the [inaudible]
and Action Extension.

653
00:34:46,565 --> 00:34:51,505 A:middle
By setting up these properties,
the View Controller system takes

654
00:34:51,505 --> 00:34:55,416 A:middle
over and configures your
extension user interface

655
00:34:55,585 --> 00:35:03,536 A:middle
overlaid on top of the
original representation

656

657
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

658
00:34:55,585 --> 00:35:03,536 A:middle
overlaid on top of the
original representation

659
00:35:03,616 --> 00:35:04,676 A:middle
in the host application.

660
00:35:05,486 --> 00:35:14,176 A:middle
Now, I'd like to bring my
colleague Ian Baird who's going

661
00:35:14,176 --> 00:35:17,186 A:middle
to be discussing
really, really cool way

662
00:35:17,346 --> 00:35:21,626 A:middle
to integrate interactive
Web and actions.

663
00:35:23,196 --> 00:35:23,776 A:middle
Ian.

664
00:35:24,516 --> 00:35:27,786 A:middle
[ Applause ]

665
00:35:28,286 --> 00:35:28,866 A:middle
>> Thank you Aki.

666
00:35:31,646 --> 00:35:34,106 A:middle
So, Aki showed you how to
create a custom action.

667
00:35:34,106 --> 00:35:35,196 A:middle
And he showed it on OS X.

668
00:35:35,196 --> 00:35:36,856 A:middle
And today I'm going
to show you how

669
00:35:36,856 --> 00:35:39,636 A:middle
to build a Safari
custom action or how

670
00:35:39,636 --> 00:35:42,156 A:middle
to take your custom action
and enhance it for the Web.

671
00:35:42,556 --> 00:35:45,056 A:middle
We think you guys are really
going to love this feature.

672
00:35:46,446 --> 00:35:49,376 A:middle
So first, you can see our
custom action in the bottom row

673
00:35:49,486 --> 00:35:51,956 A:middle
of the activity view controller
as I showed you yesterday

674
00:35:51,956 --> 00:35:53,416 A:middle
in the Part One of this talk.

675
00:35:54,726 --> 00:35:56,736 A:middle
And it's called TinySketch.

676
00:35:57,096 --> 00:35:59,656 A:middle
It can't do everything that
its brother Markup can do,

677
00:35:59,906 --> 00:36:01,176 A:middle
but it can still pack a punch.

678

679
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

680
00:35:59,906 --> 00:36:01,176 A:middle
but it can still pack a punch.

681
00:36:02,856 --> 00:36:04,066 A:middle
So first, diving in,

682
00:36:04,406 --> 00:36:07,426 A:middle
Safari Custom Actions is
rich new functionality

683
00:36:07,426 --> 00:36:08,806 A:middle
in Safari on iOS.

684
00:36:09,776 --> 00:36:11,656 A:middle
It gives you access to the DOM.

685
00:36:12,916 --> 00:36:15,506 A:middle
And there are two types
of Custom Actions.

686
00:36:16,356 --> 00:36:18,296 A:middle
A view controller-based
custom action,

687
00:36:18,626 --> 00:36:19,816 A:middle
the kind I'm going
to show you today.

688
00:36:19,816 --> 00:36:22,646 A:middle
And then there's
a no view action

689
00:36:22,846 --> 00:36:24,356 A:middle
like the Bing Translate action

690
00:36:24,646 --> 00:36:26,156 A:middle
that Craig showed
you in the Keynote.

691
00:36:27,646 --> 00:36:29,716 A:middle
How do these work?

692
00:36:30,096 --> 00:36:31,456 A:middle
We use some JavaScript.

693
00:36:31,686 --> 00:36:35,126 A:middle
Your extension will
provide JavaScript along

694
00:36:35,126 --> 00:36:36,676 A:middle
in its resources.

695
00:36:37,176 --> 00:36:39,096 A:middle
And Safari is going
to find this.

696
00:36:41,006 --> 00:36:44,276 A:middle
So, here's what this JavaScript
is going to look like.

697
00:36:44,426 --> 00:36:45,546 A:middle
We're going to expect you

698
00:36:45,546 --> 00:36:48,436 A:middle
to provide a pre-processing
JavaScript object.

699
00:36:48,746 --> 00:36:52,236 A:middle
And this object is going to
have two methods, a run method

700
00:36:52,436 --> 00:36:53,466 A:middle
and a finalize method.

701
00:36:54,046 --> 00:36:56,296 A:middle
We're going to start by
calling the run method

702
00:36:56,296 --> 00:36:58,186 A:middle
and give you access to the DOM.

703
00:36:58,186 --> 00:37:00,226 A:middle
And what you're going
to be expected to do

704

705
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

706
00:36:58,186 --> 00:37:00,226 A:middle
And what you're going
to be expected to do

707
00:37:00,226 --> 00:37:05,036 A:middle
in this run method is to call
the action arguments completion

708
00:37:05,096 --> 00:37:07,796 A:middle
function, passing the
data you want to provide

709
00:37:08,016 --> 00:37:09,736 A:middle
to the custom action
when you're done.

710
00:37:09,736 --> 00:37:14,776 A:middle
And when the action
has completed,

711
00:37:14,936 --> 00:37:16,366 A:middle
when the computation inside

712
00:37:16,366 --> 00:37:21,176 A:middle
of your custom action extension
has finished, we're again going

713
00:37:21,176 --> 00:37:22,266 A:middle
to call your JavaScript.

714
00:37:22,626 --> 00:37:25,526 A:middle
And this time we're going to
invoke the finalize method

715
00:37:25,936 --> 00:37:27,456 A:middle
and pass the action arguments.

716
00:37:27,456 --> 00:37:30,306 A:middle
And as you can see in this
case, we're just calling alert

717
00:37:30,306 --> 00:37:32,056 A:middle
and showing the message,
which was provided.

718
00:37:32,206 --> 00:37:35,956 A:middle
One of the most important
things for you

719
00:37:35,956 --> 00:37:38,826 A:middle
to remember is this
global variable:

720
00:37:38,826 --> 00:37:41,086 A:middle
ExtensionPreprocessing
JavaScript.

721
00:37:41,086 --> 00:37:42,976 A:middle
This is going to be an
instance of your object

722
00:37:42,976 --> 00:37:45,206 A:middle
that provides these
methods to Safari.

723
00:37:45,206 --> 00:37:48,606 A:middle
And I think this should
be burned into your mind,

724
00:37:48,706 --> 00:37:51,606 A:middle
because if you don't provide
this, we're not going to be able

725
00:37:51,606 --> 00:37:53,186 A:middle
to invoke your JavaScript.

726
00:37:53,226 --> 00:37:55,806 A:middle
And nothing's going to show
up inside of your action.

727
00:37:58,166 --> 00:38:01,636 A:middle
So, it's really easy to
talk about these things,

728

729
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

730
00:37:58,166 --> 00:38:01,636 A:middle
So, it's really easy to
talk about these things,

731
00:38:01,746 --> 00:38:03,336 A:middle
but it's far better to show it.

732
00:38:03,396 --> 00:38:08,716 A:middle
So I'm going to show you
a demo of TinySketch.

733
00:38:08,966 --> 00:38:09,686 A:middle
Moving right in.

734
00:38:10,136 --> 00:38:11,826 A:middle
Let's build and run
and see what we've got.

735
00:38:12,816 --> 00:38:16,066 A:middle
So what I've done here is
I've built a very small test

736
00:38:16,066 --> 00:38:17,706 A:middle
application called TinySketch

737
00:38:18,006 --> 00:38:20,276 A:middle
which contains my
TinySketch custom action.

738
00:38:21,796 --> 00:38:23,636 A:middle
This is a good way
to get started.

739
00:38:23,636 --> 00:38:25,396 A:middle
You might not want
to dive immediately

740
00:38:25,486 --> 00:38:29,056 A:middle
into creating an extension for
Safari because there are a lot

741
00:38:29,056 --> 00:38:31,256 A:middle
of moving parts, and it's
a lot better to build it

742
00:38:31,256 --> 00:38:32,576 A:middle
up in pieces when you can.

743
00:38:32,576 --> 00:38:35,846 A:middle
As you can see, we don't
have anything here yet.

744
00:38:35,846 --> 00:38:37,376 A:middle
And we don't actually
have any data.

745
00:38:37,376 --> 00:38:40,436 A:middle
And our Action button
is not wired up.

746
00:38:40,436 --> 00:38:41,996 A:middle
Let's go ahead and do that.

747
00:38:43,086 --> 00:38:45,786 A:middle
Going back to Xcode.

748
00:38:45,786 --> 00:38:49,226 A:middle
TinySketch Support is our
new support framework,

749
00:38:49,226 --> 00:38:51,666 A:middle
as Damien was talking about,
embedded frameworks earlier.

750
00:38:51,766 --> 00:38:53,246 A:middle
We're going to go
into our data model.

751
00:38:54,386 --> 00:38:57,116 A:middle
And because our application
and our extension may want

752
00:38:57,256 --> 00:38:59,476 A:middle
to use the same data
model, we're actually going

753
00:38:59,476 --> 00:39:03,256 A:middle
to provide the accessor to
the resources here, like this.

754

755
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

756
00:38:59,476 --> 00:39:03,256 A:middle
to provide the accessor to
the resources here, like this.

757
00:39:03,906 --> 00:39:05,766 A:middle
This is going to iterate
through the image URLs

758
00:39:06,186 --> 00:39:10,046 A:middle
in my custom Extensions
documents folder.

759
00:39:11,856 --> 00:39:13,106 A:middle
We'll add support for it there.

760
00:39:13,246 --> 00:39:17,516 A:middle
And then we'll go back to the
app and we'll actually wire

761
00:39:17,516 --> 00:39:19,656 A:middle
up support for it
in viewDidLoad.

762
00:39:20,746 --> 00:39:22,576 A:middle
Get the pictures
of the cute kids.

763
00:39:23,246 --> 00:39:27,096 A:middle
Fix up the indentation.

764
00:39:27,446 --> 00:39:28,586 A:middle
And we'll build and run again.

765
00:39:29,376 --> 00:39:33,736 A:middle
And this time you'll see
some pictures of my children.

766
00:39:34,126 --> 00:39:37,006 A:middle
They're usually enjoying a
day at the park or at school

767
00:39:37,006 --> 00:39:38,406 A:middle
or doing something else.

768
00:39:39,506 --> 00:39:40,586 A:middle
Hit Reset on this.

769
00:39:40,716 --> 00:39:41,976 A:middle
I forgot to reset it before.

770
00:39:43,456 --> 00:39:46,226 A:middle
We can tap on any of these
images and in they go.

771
00:39:46,226 --> 00:39:47,846 A:middle
You can see right there.

772
00:39:48,766 --> 00:39:49,766 A:middle
Tap on any of them.

773
00:39:50,756 --> 00:39:51,406 A:middle
It's really cool.

774
00:39:52,186 --> 00:39:53,126 A:middle
All right.

775
00:39:53,126 --> 00:39:55,886 A:middle
Tap the Custom Action
button, and nothing comes up.

776
00:39:55,886 --> 00:39:57,606 A:middle
Well, that's because we
haven't wired it up yet.

777
00:39:57,606 --> 00:39:59,876 A:middle
As Aki was telling you
earlier, we need to set

778
00:39:59,876 --> 00:40:01,516 A:middle
up the UIActivity
View Controller

779

780
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

781
00:39:59,876 --> 00:40:01,516 A:middle
up the UIActivity
View Controller

782
00:40:01,756 --> 00:40:03,746 A:middle
to provide data to
the extension.

783
00:40:04,006 --> 00:40:05,416 A:middle
So let's go do that.

784
00:40:16,356 --> 00:40:17,766 A:middle
Going to go into
our Share Method.

785
00:40:17,836 --> 00:40:19,886 A:middle
And we're going to
add some more code.

786
00:40:21,046 --> 00:40:22,906 A:middle
Setting up the UIActivity
View Controller.

787
00:40:23,006 --> 00:40:25,126 A:middle
As you can see, as Aki
talked about earlier,

788
00:40:25,326 --> 00:40:29,916 A:middle
we're creating an activity item
using our selected image URL.

789
00:40:29,916 --> 00:40:33,626 A:middle
And now we're going
to add some code

790
00:40:33,626 --> 00:40:36,376 A:middle
where we're just configuring
the activity item as we go,

791
00:40:36,376 --> 00:40:38,236 A:middle
as Aki talked about
earlier -- oops.

792
00:40:41,476 --> 00:40:44,006 A:middle
We're adding a little bit
more code to actually deal

793
00:40:44,006 --> 00:40:46,316 A:middle
with receiving the
data items right here.

794
00:40:46,666 --> 00:40:47,896 A:middle
We're going to take
a look at make sure

795
00:40:47,896 --> 00:40:48,976 A:middle
that we were successful.

796
00:40:48,976 --> 00:40:51,096 A:middle
We're going to count the
number of items and we're going

797
00:40:51,096 --> 00:40:53,486 A:middle
to grab the item
provider, which is provided

798
00:40:53,486 --> 00:40:55,246 A:middle
to us by the custom action.

799
00:40:55,246 --> 00:40:58,826 A:middle
And then we're going to take
the image and save it back

800
00:40:58,826 --> 00:41:00,286 A:middle
into our image collection.

801

802
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

803
00:40:58,826 --> 00:41:00,286 A:middle
into our image collection.

804
00:41:00,606 --> 00:41:03,336 A:middle
And then we're going to
redisplay that image inside

805
00:41:03,336 --> 00:41:04,146 A:middle
of the collection view.

806
00:41:04,186 --> 00:41:06,756 A:middle
And now finally, now that
we have the Activity View

807
00:41:06,756 --> 00:41:08,386 A:middle
Controller completely
configured,

808
00:41:08,746 --> 00:41:13,146 A:middle
we're going to present it.

809
00:41:13,146 --> 00:41:14,906 A:middle
So, let's build and run.

810
00:41:15,206 --> 00:41:19,726 A:middle
This time we ought to be
able to tap on the picture

811
00:41:19,726 --> 00:41:22,116 A:middle
of the cute kids, at least
I think they're cute.

812
00:41:24,016 --> 00:41:25,486 A:middle
Tap on the Action item.

813
00:41:25,776 --> 00:41:29,006 A:middle
And now we can see our
custom action right here.

814
00:41:29,326 --> 00:41:31,646 A:middle
If we tap it, up it comes.

815
00:41:31,946 --> 00:41:34,626 A:middle
It doesn't do much yet, because
while we're providing the data

816
00:41:34,626 --> 00:41:37,946 A:middle
to it, we haven't actually
added any code to consume

817
00:41:37,946 --> 00:41:39,796 A:middle
that data inside of the action.

818
00:41:40,216 --> 00:41:41,066 A:middle
Let's go do that now.

819
00:41:48,136 --> 00:41:50,276 A:middle
Going into our TinySketch
action,

820
00:41:50,366 --> 00:41:52,776 A:middle
which is our target
containing the custom action.

821
00:41:53,996 --> 00:41:55,656 A:middle
And we're going to go
down to viewDidLoad,

822
00:41:55,806 --> 00:41:57,826 A:middle
which is where we should
consume the extension item.

823
00:41:59,576 --> 00:42:02,566 A:middle
To add something to
uphold the input item

824

825
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

826
00:41:59,576 --> 00:42:02,566 A:middle
To add something to
uphold the input item

827
00:42:02,566 --> 00:42:04,726 A:middle
from the extension
context, and we're going

828
00:42:04,726 --> 00:42:06,466 A:middle
to grab the first
image item provider.

829
00:42:06,466 --> 00:42:09,296 A:middle
And we're going to make sure
that it has an item conforming

830
00:42:09,296 --> 00:42:12,006 A:middle
to our type identifier
of a type image.

831
00:42:12,616 --> 00:42:14,476 A:middle
And then we're actually
going to load that image.

832
00:42:14,846 --> 00:42:17,976 A:middle
And with the magic
of NSItemProvider,

833
00:42:18,656 --> 00:42:21,346 A:middle
we're going to -- it's going
to be coerced from a URL

834
00:42:21,686 --> 00:42:23,796 A:middle
into an item auto-magically
for you.

835
00:42:23,906 --> 00:42:25,996 A:middle
We actually take a
look at the signature

836
00:42:26,136 --> 00:42:27,336 A:middle
of these block parameters

837
00:42:27,546 --> 00:42:29,946 A:middle
and perform all the coercions
behind the scenes for you.

838
00:42:30,866 --> 00:42:32,956 A:middle
I thought that was cool.

839
00:42:33,516 --> 00:42:36,996 A:middle
[ Applause ]

840
00:42:37,496 --> 00:42:38,876 A:middle
And then we're going
to take that item,

841
00:42:38,996 --> 00:42:40,836 A:middle
we're going to assign it
to our image properties

842
00:42:40,836 --> 00:42:41,806 A:middle
so that we can hold onto it.

843
00:42:41,806 --> 00:42:44,416 A:middle
And then we're also going
to show it in our imageView.

844
00:42:45,696 --> 00:42:49,836 A:middle
Once we're done with
it, I'm scrolling past,

845
00:42:50,926 --> 00:42:52,706 A:middle
we're going to need to
be able to take this data

846
00:42:52,706 --> 00:42:55,636 A:middle
and send it back to the
host testing application.

847
00:42:56,156 --> 00:42:57,636 A:middle
So let's set that up.

848
00:42:57,936 --> 00:42:59,556 A:middle
We're going to create
an extension item.

849

850
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

851
00:43:00,356 --> 00:43:02,266 A:middle
We're going to check that
we're not editing for the Web.

852
00:43:02,266 --> 00:43:03,166 A:middle
That will come later.

853
00:43:03,166 --> 00:43:07,226 A:middle
And we're going to attach
the newly-created image,

854
00:43:07,296 --> 00:43:10,606 A:middle
the flattened image, the image
containing all the adornments,

855
00:43:11,266 --> 00:43:14,326 A:middle
into the extension item
using NSItemProvider.

856
00:43:14,366 --> 00:43:16,496 A:middle
This time we're just, we're
not going to supply a URL,

857
00:43:16,496 --> 00:43:17,786 A:middle
but we're going to
supply an image.

858
00:43:18,686 --> 00:43:20,736 A:middle
And then as Aki talked
about earlier,

859
00:43:20,736 --> 00:43:22,376 A:middle
we're going to finish
the request

860
00:43:22,426 --> 00:43:24,556 A:middle
by calling
completeRequestReturningItems

861
00:43:24,866 --> 00:43:26,396 A:middle
and passing the extensionItem.

862
00:43:27,946 --> 00:43:32,996 A:middle
Let's build and run.

863
00:43:33,736 --> 00:43:35,866 A:middle
And let's edit.

864
00:43:36,956 --> 00:43:39,286 A:middle
Pulling it up and
annotating the image.

865
00:43:40,006 --> 00:43:43,296 A:middle
And you can see we actually have
data flowing across the wire.

866
00:43:44,176 --> 00:43:48,206 A:middle
We can dismiss, and
the data goes back.

867
00:43:48,206 --> 00:43:49,516 A:middle
That wasn't all that interesting

868
00:43:49,516 --> 00:43:50,926 A:middle
because I didn't
actually make any edits.

869
00:43:50,926 --> 00:43:53,636 A:middle
So I'll make an edit this time.

870
00:43:53,796 --> 00:43:59,426 A:middle
Put an appropriate label in
here, in the speech bubble.

871
00:43:59,556 --> 00:44:03,026 A:middle
Having fun at the park.

872

873
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

874
00:43:59,556 --> 00:44:03,026 A:middle
Having fun at the park.

875
00:44:03,806 --> 00:44:08,956 A:middle
Hit Done. And you'll notice now
our image has been replaced.

876
00:44:09,226 --> 00:44:11,716 A:middle
The data has made it back
from our custom extension

877
00:44:11,856 --> 00:44:13,046 A:middle
to our test application.

878
00:44:13,716 --> 00:44:17,246 A:middle
And we have round-tripped
a custom action on iOS.

879
00:44:17,876 --> 00:44:20,686 A:middle
Now, while this is cool,
I'm really here to show you

880
00:44:20,686 --> 00:44:24,266 A:middle
about how this works, can
work, with Safari and the Web.

881
00:44:24,746 --> 00:44:26,906 A:middle
So let's go ahead and
enhance this custom action

882
00:44:27,106 --> 00:44:29,856 A:middle
to actually pull its
data out of a live DOM

883
00:44:29,856 --> 00:44:32,426 A:middle
and then replace the data
in that DOM when it's done.

884
00:44:32,876 --> 00:44:36,156 A:middle
Let's do that now.

885
00:44:37,036 --> 00:44:39,586 A:middle
Going back, and stop.

886
00:44:41,926 --> 00:44:45,146 A:middle
And now you may have seen
some of my notes earlier

887
00:44:45,146 --> 00:44:46,596 A:middle
about adding Web support.

888
00:44:47,786 --> 00:44:49,756 A:middle
We're going to scroll back up.

889
00:44:50,826 --> 00:44:54,266 A:middle
And this time we're going
to add an else condition

890
00:44:56,296 --> 00:44:58,866 A:middle
to receive a URL from Safari.

891
00:44:59,836 --> 00:45:01,426 A:middle
You notice we're
going to have an else.

892

893
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

894
00:44:59,836 --> 00:45:01,426 A:middle
You notice we're
going to have an else.

895
00:45:01,426 --> 00:45:03,886 A:middle
And if we have an
itemConformingToTypeIdentifier

896
00:45:03,886 --> 00:45:07,016 A:middle
KUTTypePropertyList, this is
important because we're going

897
00:45:07,016 --> 00:45:08,176 A:middle
to be sending a dictionary.

898
00:45:09,586 --> 00:45:12,516 A:middle
We're going to unpack the image
URL out of this dictionary.

899
00:45:13,146 --> 00:45:15,896 A:middle
Also set up our little
editing for Web flag to Yes.

900
00:45:15,896 --> 00:45:21,016 A:middle
And then we're setting up
an NSURLSessionDownloadTask

901
00:45:21,246 --> 00:45:22,686 A:middle
to actually perform
the download.

902
00:45:23,136 --> 00:45:26,066 A:middle
If the download succeeds,
we unpack the image data

903
00:45:26,066 --> 00:45:28,016 A:middle
and render into a UIImage.

904
00:45:28,196 --> 00:45:30,766 A:middle
Again, stashing the image
away in our property

905
00:45:31,096 --> 00:45:32,656 A:middle
and assigning it
to the imageView.

906
00:45:32,656 --> 00:45:35,006 A:middle
If we're unable to
download, we'll get an NSLog.

907
00:45:35,006 --> 00:45:40,946 A:middle
And on the other
side of it, in Done,

908
00:45:42,636 --> 00:45:44,556 A:middle
when we're done editing
the image,

909
00:45:45,116 --> 00:45:47,246 A:middle
we need to pack it back
into a property list.

910
00:45:47,396 --> 00:45:48,806 A:middle
And I've got some
code to do that here.

911
00:45:50,036 --> 00:45:52,886 A:middle
You'll see that we're going
to take the flattened image

912
00:45:53,046 --> 00:45:55,916 A:middle
and write out a temporary
file here.

913
00:45:55,916 --> 00:45:59,656 A:middle
And then we're going to actually
create a JPEG string of that

914
00:45:59,656 --> 00:46:02,616 A:middle
and pack that into a Web
dictionary basically creating a

915

916
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

917
00:45:59,656 --> 00:46:02,616 A:middle
and pack that into a Web
dictionary basically creating a

918
00:46:02,616 --> 00:46:07,606 A:middle
data URL that Safari can
then swap back into the DOM.

919
00:46:08,326 --> 00:46:09,926 A:middle
So, everything's wired up there.

920
00:46:09,926 --> 00:46:11,996 A:middle
Let's go into our JavaScript.

921
00:46:12,366 --> 00:46:15,176 A:middle
As I talked about earlier, we
are expected to provide the run

922
00:46:15,176 --> 00:46:16,756 A:middle
and finalized functions.

923
00:46:16,886 --> 00:46:21,076 A:middle
And let's do that now.

924
00:46:21,296 --> 00:46:24,786 A:middle
Run, we're going to iterate
over all the images in the DOM.

925
00:46:24,786 --> 00:46:26,246 A:middle
And we're going to send them

926
00:46:26,246 --> 00:46:30,576 A:middle
over in the imageUrls
key to the custom action.

927
00:46:30,896 --> 00:46:32,786 A:middle
And we're also going
to send the base URI.

928
00:46:32,786 --> 00:46:35,446 A:middle
Our custom action is only going
to consume the first image,

929
00:46:35,706 --> 00:46:37,016 A:middle
but you know, this is
written for growth.

930
00:46:37,786 --> 00:46:41,746 A:middle
And then finally, when
the data comes back

931
00:46:41,746 --> 00:46:44,366 A:middle
from the custom action, we're
going to replace the image

932
00:46:44,696 --> 00:46:48,086 A:middle
by taking that encoded
data URL and shoving it

933
00:46:48,086 --> 00:46:49,356 A:middle
into the image using the --

934
00:46:49,356 --> 00:46:51,216 A:middle
or replacing the
image source property.

935
00:46:52,146 --> 00:46:56,646 A:middle
Save. Build and run.

936
00:46:57,576 --> 00:47:00,866 A:middle
Up comes our application.

937

938
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

939
00:46:57,576 --> 00:47:00,866 A:middle
Up comes our application.

940
00:47:00,866 --> 00:47:01,786 A:middle
We know this works.

941
00:47:02,066 --> 00:47:02,726 A:middle
Let's home out.

942
00:47:03,806 --> 00:47:04,896 A:middle
And let's to go Safari.

943
00:47:04,896 --> 00:47:08,906 A:middle
I happen to have a Web
server running in local host

944
00:47:09,386 --> 00:47:10,226 A:middle
with a picture, again,

945
00:47:10,226 --> 00:47:12,076 A:middle
of my kids just hanging
out at the park.

946
00:47:13,066 --> 00:47:16,956 A:middle
Let's see if we can
edit this image.

947
00:47:17,936 --> 00:47:19,126 A:middle
Hitting Annotate Image.

948
00:47:20,516 --> 00:47:23,696 A:middle
Up slides the custom action
with the data from Safari.

949
00:47:25,146 --> 00:47:29,336 A:middle
Now let's edit and provide
an appropriate speech bubble.

950
00:47:37,066 --> 00:47:41,836 A:middle
Hit Done. And now you can see
there's a live replacement

951
00:47:41,836 --> 00:47:45,446 A:middle
of the data right there in
Safari using the JavaScript

952
00:47:45,446 --> 00:47:46,286 A:middle
that I just showed you.

953
00:47:47,516 --> 00:47:53,966 A:middle
[ Applause ]

954
00:47:54,466 --> 00:47:57,286 A:middle
So, Safari Custom
Actions, as you just saw,

955
00:47:57,596 --> 00:48:00,376 A:middle
provide the flexibility
of the Web married

956

957
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

958
00:47:57,596 --> 00:48:00,376 A:middle
provide the flexibility
of the Web married

959
00:48:00,376 --> 00:48:01,856 A:middle
to the power of Extensions.

960
00:48:02,376 --> 00:48:05,466 A:middle
You can transform Web data
really, really easily.

961
00:48:06,046 --> 00:48:10,096 A:middle
And you can float a native
interface right over the top

962
00:48:10,096 --> 00:48:13,216 A:middle
of it, which allows you to
create these rich work flows

963
00:48:13,216 --> 00:48:15,876 A:middle
that were unimaginable
in previous releases.

964
00:48:16,356 --> 00:48:18,016 A:middle
So as Damien talked about,

965
00:48:19,266 --> 00:48:20,996 A:middle
Extensions are secure
by default.

966
00:48:21,416 --> 00:48:23,886 A:middle
They don't share data
unless you tell them to.

967
00:48:24,116 --> 00:48:26,986 A:middle
And they have a one-to-one
correspondence

968
00:48:27,246 --> 00:48:28,066 A:middle
with the hosting app.

969
00:48:28,436 --> 00:48:30,896 A:middle
That way you have your
own address space in which

970
00:48:30,896 --> 00:48:33,626 A:middle
to make your mistakes
and your action.

971
00:48:35,406 --> 00:48:37,816 A:middle
And the last thing we
really want to encourage you

972
00:48:37,816 --> 00:48:39,796 A:middle
to do is just to have
fun with this feature.

973
00:48:40,346 --> 00:48:43,026 A:middle
And don't think of it
as sticking new things

974
00:48:43,026 --> 00:48:44,236 A:middle
onto things like barnacles.

975
00:48:44,276 --> 00:48:47,416 A:middle
Think of it as constructing
these awesome new workflows

976
00:48:47,826 --> 00:48:51,196 A:middle
that you were really unable
to explore before now.

977
00:48:53,826 --> 00:48:56,046 A:middle
For more information,
you can talk to the man

978
00:48:56,046 --> 00:48:57,436 A:middle
in plaid, Jake Behrens.

979
00:48:58,626 --> 00:49:01,356 A:middle
Or I'd urge you to read our
excellent documentation,

980

981
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

982
00:48:58,626 --> 00:49:01,356 A:middle
Or I'd urge you to read our
excellent documentation,

983
00:49:01,496 --> 00:49:05,956 A:middle
The App Extension Programing
Guide at developer.apple.com.

984
00:49:06,566 --> 00:49:08,726 A:middle
If you've never been to
the Apple Developer Forums,

985
00:49:08,936 --> 00:49:10,836 A:middle
you can interact with
employees like myself,

986
00:49:11,196 --> 00:49:14,316 A:middle
Aki and Damien there, and
provide peer-to-peer support.

987
00:49:14,316 --> 00:49:17,276 A:middle
Thank you for coming to
learn about Extensions.

988
00:49:19,236 --> 00:49:21,956 A:middle
And we can't wait to see what
you guys do with the feature.

989
00:49:22,336 --> 00:49:23,346 A:middle
Thank you.

990
