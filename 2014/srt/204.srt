X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:12,046 --> 00:00:12,646 A:middle
>> Good morning.

2
00:00:12,646 --> 00:00:13,946 A:middle
Welcome to "What's
New in Cocoa."

3
00:00:13,946 --> 00:00:14,976 A:middle
My name is Ali Ozer.

4
00:00:14,976 --> 00:00:17,376 A:middle
I'm the Director of Cocoa
Frameworks at Apple.

5
00:00:17,616 --> 00:00:19,566 A:middle
So I got a packed agenda today.

6
00:00:19,566 --> 00:00:21,006 A:middle
We're going to give you
a high-level coverage

7
00:00:21,006 --> 00:00:24,786 A:middle
of the changes in Cocoa in OS
X Yosemite, and we're going

8
00:00:24,786 --> 00:00:26,296 A:middle
to give pointers
to related sessions

9
00:00:26,296 --> 00:00:27,816 A:middle
and relevant labs as well.

10
00:00:27,816 --> 00:00:31,876 A:middle
And the topics we're covering
are New Look, Extensions

11
00:00:31,876 --> 00:00:34,996 A:middle
and Handoff, which are big user
features you saw yesterday.

12
00:00:34,996 --> 00:00:37,196 A:middle
And then we're going
to talk about some APIs

13
00:00:37,196 --> 00:00:38,896 A:middle
such as Storyboards
and View Controllers,

14
00:00:39,176 --> 00:00:41,226 A:middle
API Modernization
effort we've been doing.

15
00:00:41,226 --> 00:00:42,876 A:middle
Of course, we're going
to talk about Swift

16
00:00:43,276 --> 00:00:45,986 A:middle
and some implications on
Cocoa and Cocoa Touch APIs,

17
00:00:46,056 --> 00:00:47,646 A:middle
and a number of other
topics as well.

18
00:00:48,226 --> 00:00:50,216 A:middle
And since I don't
want to put this badge

19
00:00:50,216 --> 00:00:52,576 A:middle
on every single slide, pretty
much everything we're talking

20
00:00:52,576 --> 00:00:55,376 A:middle
about today is new
in OS X Yosemite

21
00:00:55,376 --> 00:00:57,066 A:middle
or in some case to
iOS 8 as well.

22
00:00:58,266 --> 00:01:01,456 A:middle
OK, so with that, let's
get started with New Look.

23

24
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

25
00:00:58,266 --> 00:01:01,456 A:middle
OK, so with that, let's
get started with New Look.

26
00:01:03,236 --> 00:01:05,886 A:middle
There are various
components to New Look.

27
00:01:05,886 --> 00:01:07,836 A:middle
You saw them yesterday and
you've probably seen them

28
00:01:07,836 --> 00:01:09,956 A:middle
if you installed
Yosemite on your machines.

29
00:01:10,196 --> 00:01:12,746 A:middle
There's an updated look for
controls, there's translucency

30
00:01:12,746 --> 00:01:14,676 A:middle
and vibrancy, there's
new window styles,

31
00:01:14,936 --> 00:01:17,256 A:middle
and there's also a
new font in Yosemite.

32
00:01:18,156 --> 00:01:20,546 A:middle
So let's take a look at
updated look for controls.

33
00:01:20,896 --> 00:01:25,876 A:middle
Here is the good old Sound
Preferences Panel in Mavericks,

34
00:01:26,446 --> 00:01:28,346 A:middle
and here is the same
panel in Yosemite.

35
00:01:28,766 --> 00:01:32,226 A:middle
So one thing to notice is that,
you know, there is a lighter -

36
00:01:32,226 --> 00:01:34,186 A:middle
there is lighter,
brighter colors,

37
00:01:34,506 --> 00:01:37,006 A:middle
there is a clean
and simpler look.

38
00:01:37,006 --> 00:01:38,856 A:middle
I'm not going to go
into the details here.

39
00:01:38,856 --> 00:01:41,036 A:middle
We're going to do more of
that in some other talks.

40
00:01:41,406 --> 00:01:44,176 A:middle
But it is sort of a lighter,
fresher look of course.

41
00:01:44,176 --> 00:01:45,226 A:middle
And another thing to notice is

42
00:01:45,226 --> 00:01:48,486 A:middle
that the controls are pretty
much metrics compatible,

43
00:01:48,646 --> 00:01:50,666 A:middle
so that's important
thing to note.

44
00:01:51,216 --> 00:01:52,776 A:middle
Here's another comparison.

45
00:01:52,776 --> 00:01:55,436 A:middle
This is the Add a New
Mail Account panel.

46
00:01:55,826 --> 00:01:58,376 A:middle
One thing you'll notice of
course is the default button

47
00:01:58,376 --> 00:01:59,716 A:middle
in Mavericks is pulsing,

48
00:01:59,896 --> 00:02:03,376 A:middle
continuously pulsing while the
one in Yosemite is not pulsing.

49

50
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

51
00:01:59,896 --> 00:02:03,376 A:middle
continuously pulsing while the
one in Yosemite is not pulsing.

52
00:02:03,716 --> 00:02:05,496 A:middle
Another thing to notice
is the focus ring.

53
00:02:05,906 --> 00:02:08,826 A:middle
The one in Yosemite is a
lot cleaner while the one

54
00:02:08,826 --> 00:02:10,196 A:middle
in Mavericks is a bit fuzzy.

55
00:02:10,476 --> 00:02:11,926 A:middle
They both sort of
wrap the control,

56
00:02:11,926 --> 00:02:14,206 A:middle
but the Yosemite one has a
cleaner look that's of course

57
00:02:14,206 --> 00:02:17,086 A:middle
in line with the
overall look of Yosemite.

58
00:02:18,306 --> 00:02:21,536 A:middle
Now, we have gotten rid of
these long-running animations

59
00:02:21,536 --> 00:02:22,906 A:middle
like the Default button,

60
00:02:23,196 --> 00:02:26,376 A:middle
but we have some subtle
animations in its place.

61
00:02:26,886 --> 00:02:29,616 A:middle
You'll notice the Radio
buttons, as you operate them,

62
00:02:29,616 --> 00:02:32,096 A:middle
they sort of gently
respond to your clicks

63
00:02:32,096 --> 00:02:33,446 A:middle
or your touches just like that.

64
00:02:33,546 --> 00:02:35,766 A:middle
And you'll see this in other
- some other cases as well

65
00:02:35,766 --> 00:02:39,156 A:middle
such as checkboxes
and search fields.

66
00:02:39,156 --> 00:02:42,616 A:middle
Now, the good thing about all
these, all these updated looks

67
00:02:42,616 --> 00:02:46,156 A:middle
for controls, they're all
automatic in your applications.

68
00:02:46,736 --> 00:02:49,656 A:middle
When your application
runs on Yosemite,

69
00:02:49,906 --> 00:02:52,776 A:middle
it will pretty much inherit
all these looks and behaviors.

70
00:02:53,056 --> 00:02:55,726 A:middle
I mean unless you're doing
something very custom using

71
00:02:55,726 --> 00:02:58,406 A:middle
custom artwork on Saw and your
apps will get the Yosemite look.

72
00:02:58,406 --> 00:03:01,056 A:middle
In fact, we do not even
support the Mavericks look

73

74
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

75
00:02:58,406 --> 00:03:01,056 A:middle
In fact, we do not even
support the Mavericks look

76
00:03:01,386 --> 00:03:02,946 A:middle
for applications on Yosemite.

77
00:03:05,466 --> 00:03:08,596 A:middle
OK, let me talk now about
translucency and vibrancy.

78
00:03:08,946 --> 00:03:11,436 A:middle
So translucency, as
you saw yesterday,

79
00:03:11,666 --> 00:03:14,736 A:middle
translucency is the combination
of transparency and blur,

80
00:03:14,896 --> 00:03:18,316 A:middle
and it enables the personality
of the desktop or the content

81
00:03:18,316 --> 00:03:21,356 A:middle
that you're looking at to
come through in your windows,

82
00:03:22,556 --> 00:03:24,506 A:middle
and in a very aesthetically
pleasing way.

83
00:03:24,506 --> 00:03:28,846 A:middle
So let's look at places
where we use translucency.

84
00:03:28,846 --> 00:03:31,746 A:middle
Here is your default
desktop picture.

85
00:03:32,616 --> 00:03:35,216 A:middle
You bring up a Safari
window and this is sort

86
00:03:35,216 --> 00:03:36,126 A:middle
of the Favorites view.

87
00:03:36,276 --> 00:03:38,256 A:middle
You'll see that the whole
window has a translucent

88
00:03:38,256 --> 00:03:39,096 A:middle
background here.

89
00:03:39,316 --> 00:03:41,596 A:middle
This is usually not
the case in most cases.

90
00:03:41,596 --> 00:03:43,346 A:middle
You know, once you start
looking at content,

91
00:03:43,766 --> 00:03:45,966 A:middle
the translucency is usually
limited to the sidebar.

92
00:03:46,466 --> 00:03:48,336 A:middle
For instance here in your -

93
00:03:48,336 --> 00:03:51,636 A:middle
and I'm sure what's your
favorite app, Xcode.

94
00:03:51,916 --> 00:03:54,226 A:middle
Mail also has the same sort
of treatment in sidebar

95
00:03:54,226 --> 00:03:57,206 A:middle
where you get the translucency
in the sidebar area.

96
00:03:57,826 --> 00:03:59,676 A:middle
Another use of translucency
is something

97
00:03:59,676 --> 00:04:01,376 A:middle
like a preview application.

98

99
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

100
00:03:59,676 --> 00:04:01,376 A:middle
like a preview application.

101
00:04:01,706 --> 00:04:03,846 A:middle
Here I have an image and
I haven't scrolled it yet

102
00:04:03,966 --> 00:04:05,416 A:middle
but once I start to scroll,

103
00:04:05,796 --> 00:04:08,096 A:middle
you'll see that the image
is going to start coming

104
00:04:08,096 --> 00:04:10,886 A:middle
through the toolbar, title
bar area of the window.

105
00:04:11,466 --> 00:04:15,406 A:middle
Now note that this case is what
we call in-window translucency

106
00:04:15,406 --> 00:04:17,836 A:middle
while the other cases
were behind the window

107
00:04:17,836 --> 00:04:19,546 A:middle
or through the window
translucency.

108
00:04:19,546 --> 00:04:21,116 A:middle
There you're seeing
to the desktop.

109
00:04:21,326 --> 00:04:24,566 A:middle
Here we're just seeing through
the title bar for the content

110
00:04:24,706 --> 00:04:28,286 A:middle
of the window to
my document view.

111
00:04:28,496 --> 00:04:31,666 A:middle
Other cases of translucency
include the menu bar.

112
00:04:32,266 --> 00:04:36,126 A:middle
I'm sorry, the menus and
sheets as well, and popovers

113
00:04:36,126 --> 00:04:37,856 A:middle
as well have this
sort of treatment.

114
00:04:37,956 --> 00:04:42,246 A:middle
So, translucency is automatic
in many cases, sheets,

115
00:04:42,246 --> 00:04:43,856 A:middle
menus, popovers, etcetera.

116
00:04:44,456 --> 00:04:47,466 A:middle
Source lists, these are the
table views and outline views

117
00:04:47,466 --> 00:04:50,156 A:middle
which are configured to
look like those sidebars,

118
00:04:50,446 --> 00:04:53,916 A:middle
will also get a translucency
automatically in most cases,

119
00:04:54,346 --> 00:04:57,446 A:middle
and also title bars and
toolbars will get translucency

120
00:04:57,746 --> 00:04:58,966 A:middle
in a number of cases.

121
00:04:59,056 --> 00:05:01,476 A:middle
Let me talk about that.

122

123
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

124
00:04:59,056 --> 00:05:01,476 A:middle
Let me talk about that.

125
00:05:01,666 --> 00:05:04,536 A:middle
Whenever you have a window and
you have a scroll view next

126
00:05:04,596 --> 00:05:06,906 A:middle
to the title bar like
in the case of Preview,

127
00:05:07,196 --> 00:05:08,846 A:middle
you will get translucency
treatment

128
00:05:09,046 --> 00:05:11,986 A:middle
for that title bar area
just like Preview does.

129
00:05:12,266 --> 00:05:15,166 A:middle
This is the case for an
app like TextEdit as well.

130
00:05:15,166 --> 00:05:18,736 A:middle
Now, in other cases
where you want

131
00:05:18,736 --> 00:05:20,106 A:middle
to do more sophisticated things

132
00:05:20,106 --> 00:05:21,916 A:middle
or you're not getting
translucency automatically

133
00:05:21,916 --> 00:05:25,336 A:middle
for your title bar, you can
use this new Window Style Mask

134
00:05:25,546 --> 00:05:29,116 A:middle
called
NSFullSizeContentViewWindowMask.

135
00:05:30,266 --> 00:05:33,796 A:middle
In addition, we have properties
such as titleVisibility

136
00:05:33,796 --> 00:05:35,966 A:middle
and titlebarAppearsTransparent
on NSWindow.

137
00:05:36,196 --> 00:05:38,356 A:middle
And we'll have other talks
where we're going to depth

138
00:05:38,356 --> 00:05:41,476 A:middle
about these, but these
new features allow you

139
00:05:41,476 --> 00:05:44,886 A:middle
to do highly customized
windows with translucency.

140
00:05:44,886 --> 00:05:47,176 A:middle
An example is the
Messages window.

141
00:05:47,176 --> 00:05:49,516 A:middle
For instance, the Messages
window has the sort

142
00:05:49,516 --> 00:05:51,956 A:middle
of split look with the
content area on the right

143
00:05:52,146 --> 00:05:55,556 A:middle
and then the sidebar on the left
for your - for the messages.

144
00:05:55,836 --> 00:05:59,216 A:middle
And if you put this on
top of our desktop here,

145
00:05:59,216 --> 00:06:01,886 A:middle
you'll see that there is
through window translucency

146

147
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

148
00:05:59,216 --> 00:06:01,886 A:middle
you'll see that there is
through window translucency

149
00:06:01,886 --> 00:06:04,466 A:middle
on the left side and
in-window translucency

150
00:06:04,466 --> 00:06:06,606 A:middle
for the messages content
on your right side.

151
00:06:06,926 --> 00:06:10,566 A:middle
The good news is we have APIs
for you to do this sort of thing

152
00:06:10,566 --> 00:06:12,666 A:middle
in your own applications
as well where appropriate.

153
00:06:13,006 --> 00:06:15,366 A:middle
So you can do sophisticated
designs like this.

154
00:06:16,716 --> 00:06:20,196 A:middle
Now vibrancy goes very much
hand in hand with translucency.

155
00:06:20,396 --> 00:06:22,376 A:middle
Now translucency in general is

156
00:06:22,376 --> 00:06:25,566 A:middle
of course averaging the
foreground and the background

157
00:06:25,566 --> 00:06:27,466 A:middle
as it blurs the background.

158
00:06:27,756 --> 00:06:31,186 A:middle
And sometimes this could
result in reduced contrast

159
00:06:31,186 --> 00:06:33,436 A:middle
and it could even result
- reduce overall impact

160
00:06:34,016 --> 00:06:35,846 A:middle
of what you're trying
to show the user.

161
00:06:36,576 --> 00:06:40,016 A:middle
Now, vibrancy, what vibrancy
does is it helps pull the

162
00:06:40,016 --> 00:06:43,406 A:middle
elements out by blending
in fancy ways, for instance

163
00:06:43,406 --> 00:06:45,886 A:middle
by using Color Dodge,
Color Burn or variants

164
00:06:45,886 --> 00:06:47,036 A:middle
of such blending modes.

165
00:06:47,106 --> 00:06:49,566 A:middle
Let me show you an
example here what I mean.

166
00:06:49,926 --> 00:06:55,396 A:middle
Here is a little view, vibrant
view which includes some texts

167
00:06:55,396 --> 00:06:58,636 A:middle
and an image and they're now
being treated with vibrancy.

168
00:06:58,636 --> 00:07:02,716 A:middle
If I were to remove vibrancy
from this, you get the sort

169

170
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

171
00:06:58,636 --> 00:07:02,716 A:middle
If I were to remove vibrancy
from this, you get the sort

172
00:07:02,716 --> 00:07:05,696 A:middle
of slightly, you know,
less punch to that.

173
00:07:05,696 --> 00:07:07,406 A:middle
It's more grayish.

174
00:07:07,626 --> 00:07:08,686 A:middle
It's not as impactful.

175
00:07:08,686 --> 00:07:11,336 A:middle
I'm going to put the vibrancy
back in, and it's really adding

176
00:07:11,336 --> 00:07:14,156 A:middle
that punch that allows the
user's content to come through

177
00:07:14,156 --> 00:07:16,916 A:middle
and separated from the
background and, you know,

178
00:07:16,916 --> 00:07:17,826 A:middle
present it to the user.

179
00:07:17,826 --> 00:07:18,856 A:middle
So this is vibrancy.

180
00:07:19,466 --> 00:07:22,846 A:middle
Now, vibrancy is automatic
in contexts in most cases

181
00:07:22,846 --> 00:07:24,426 A:middle
where we're applying
translucency,

182
00:07:24,666 --> 00:07:27,636 A:middle
and it's for controls and other
NSViews where appropriate,

183
00:07:27,696 --> 00:07:30,706 A:middle
but it's not appropriate for all
cases, and I'll give an example

184
00:07:30,706 --> 00:07:31,706 A:middle
of that in a few seconds.

185
00:07:31,846 --> 00:07:36,326 A:middle
Now, to enable vibrancy and
also translucency explicitly

186
00:07:36,326 --> 00:07:39,626 A:middle
in your applications,
we have a new view

187
00:07:39,626 --> 00:07:41,096 A:middle
called NSVisualEffectView.

188
00:07:41,656 --> 00:07:43,216 A:middle
You create it.

189
00:07:43,426 --> 00:07:45,936 A:middle
You specify what kind of
translucency you want,

190
00:07:45,936 --> 00:07:48,006 A:middle
either in-window
or behind-window,

191
00:07:48,396 --> 00:07:50,836 A:middle
and you specify what kind of
vibrant appearance you want.

192
00:07:50,836 --> 00:07:52,226 A:middle
You have choice of
dark or light.

193
00:07:53,466 --> 00:07:56,646 A:middle
And then, you populate it
with vibrant-capable controls.

194
00:07:57,016 --> 00:08:00,116 A:middle
And you can recognize such
controls because they return YES

195

196
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

197
00:07:57,016 --> 00:08:00,116 A:middle
And you can recognize such
controls because they return YES

198
00:08:00,116 --> 00:08:02,236 A:middle
from this new property
called allowsVibrancy.

199
00:08:02,886 --> 00:08:07,476 A:middle
And as I mentioned earlier,
some controls offer vibrancy.

200
00:08:07,736 --> 00:08:11,416 A:middle
They opt-in to vibrancy
at appropriate times.

201
00:08:11,596 --> 00:08:12,926 A:middle
Let me give you an
example of that.

202
00:08:13,386 --> 00:08:15,516 A:middle
Here's a window with
two image views in it.

203
00:08:16,146 --> 00:08:18,676 A:middle
On the left, we have an image
view with a template image,

204
00:08:18,736 --> 00:08:20,006 A:middle
and on the right we
have an image view

205
00:08:20,006 --> 00:08:21,576 A:middle
with just a regular image.

206
00:08:22,166 --> 00:08:25,116 A:middle
Now, this is on a regular
no translucency window.

207
00:08:25,116 --> 00:08:26,936 A:middle
I'm going to put this
on dark vibrancy.

208
00:08:27,516 --> 00:08:29,896 A:middle
And as you saw, the
viewed imagery

209
00:08:29,896 --> 00:08:32,135 A:middle
on the left is applying
the vibrancy

210
00:08:32,226 --> 00:08:35,586 A:middle
and treating the template image
to give it the appropriate look

211
00:08:35,586 --> 00:08:38,015 A:middle
on top of a dark vibrant
background while the elephant

212
00:08:38,015 --> 00:08:39,306 A:middle
image remains put.

213
00:08:39,306 --> 00:08:40,566 A:middle
It's not affected at all.

214
00:08:40,836 --> 00:08:43,086 A:middle
Similarly, if I'd switch
to a light vibrancy, again,

215
00:08:43,086 --> 00:08:45,776 A:middle
you're getting the
vibrancy applied

216
00:08:45,776 --> 00:08:48,376 A:middle
to the template image while the
elephant image again stays put.

217
00:08:48,376 --> 00:08:51,136 A:middle
So the NSImageView is
dynamically deciding

218
00:08:51,136 --> 00:08:53,696 A:middle
between being vibrant and
not depending on its content.

219
00:08:55,576 --> 00:08:57,566 A:middle
We made some changes in NSColor.

220
00:08:57,566 --> 00:09:02,196 A:middle
We've updated existing system
colors to be consistent with,

221

222
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

223
00:08:57,566 --> 00:09:02,196 A:middle
We've updated existing system
colors to be consistent with,

224
00:09:02,196 --> 00:09:06,046 A:middle
of course, the overall look of
Yosemite, and we also made it

225
00:09:06,046 --> 00:09:09,516 A:middle
so that some NSColors have
appearance-specific variants.

226
00:09:10,046 --> 00:09:12,786 A:middle
So what that means is - well,
let me give you an example.

227
00:09:13,046 --> 00:09:17,316 A:middle
Here's some text views drawing
- drawn with the system color,

228
00:09:17,496 --> 00:09:20,556 A:middle
and here is the same text drawn
on a dark vibrant surface.

229
00:09:21,016 --> 00:09:23,556 A:middle
These are both using a new
system color we've added called

230
00:09:23,556 --> 00:09:26,186 A:middle
secondaryLabelColor,
and you'll know that -

231
00:09:26,406 --> 00:09:29,016 A:middle
note that in the dark vibrant
case the text is actually

232
00:09:29,016 --> 00:09:29,836 A:middle
appearing white.

233
00:09:30,026 --> 00:09:31,806 A:middle
So it's a fairly
different color.

234
00:09:32,056 --> 00:09:34,476 A:middle
So you need to - you know,
if you're ever assuming

235
00:09:35,046 --> 00:09:38,186 A:middle
that colors stay put through
the lifetime of an app

236
00:09:38,186 --> 00:09:40,506 A:middle
or in different contexts,
you know, it's good to stop

237
00:09:40,506 --> 00:09:43,186 A:middle
that assumption and
just use NSColors as is

238
00:09:43,186 --> 00:09:44,126 A:middle
without taking them apart.

239
00:09:44,656 --> 00:09:48,596 A:middle
We have a new font
and you've seen that.

240
00:09:49,136 --> 00:09:51,206 A:middle
It's - the new font
is Helvetica Neue.

241
00:09:51,206 --> 00:09:53,046 A:middle
It's been optimized for OS X

242
00:09:53,226 --> 00:09:55,676 A:middle
with metrics similar
to Lucida Grande.

243
00:09:57,146 --> 00:09:58,876 A:middle
Now, you should obtain
this font with methods

244
00:09:58,876 --> 00:10:02,296 A:middle
such as systemFontOfSize,
which is of course what happens

245

246
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

247
00:09:58,876 --> 00:10:02,296 A:middle
such as systemFontOfSize,
which is of course what happens

248
00:10:02,566 --> 00:10:03,976 A:middle
by default when you
drag elements

249
00:10:03,976 --> 00:10:08,966 A:middle
out in Xcode Interface Builder.

250
00:10:09,046 --> 00:10:14,716 A:middle
And now, for compatibility, if
you're - for existing binaries,

251
00:10:14,716 --> 00:10:17,316 A:middle
so applications are already
out there, the applications

252
00:10:17,316 --> 00:10:20,336 A:middle
which are linked
against the 10.9 SDK or -

253
00:10:20,336 --> 00:10:22,456 A:middle
and earlier, we do two things.

254
00:10:22,956 --> 00:10:25,746 A:middle
One, if we see explicit
references to Lucida Grande

255
00:10:25,746 --> 00:10:29,606 A:middle
in a UI element, we assume that
you really meant Helvetica Neue,

256
00:10:30,116 --> 00:10:31,286 A:middle
and we just do a replacement.

257
00:10:32,096 --> 00:10:35,996 A:middle
In addition, if we find
that the text clips or wraps

258
00:10:35,996 --> 00:10:38,576 A:middle
because it's too wide
for the area it has,

259
00:10:38,976 --> 00:10:41,646 A:middle
we will compress it so it fits.

260
00:10:41,756 --> 00:10:44,366 A:middle
So that, of course,
ensures compatibility

261
00:10:44,366 --> 00:10:45,566 A:middle
for existing applications.

262
00:10:46,026 --> 00:10:48,636 A:middle
Now, note that we do not do
this once your application is

263
00:10:48,636 --> 00:10:51,516 A:middle
relinked, rebuilt
against the 10.10 SDK.

264
00:10:51,796 --> 00:10:53,816 A:middle
There, we want you to
take a look at your app

265
00:10:53,816 --> 00:10:56,616 A:middle
and correct any places
where there may be problems.

266
00:10:57,126 --> 00:10:58,766 A:middle
Now, for instance if
you're finding that some

267
00:10:58,766 --> 00:11:00,836 A:middle
of your controls are too
tight and not fitting,

268

269
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

270
00:10:58,766 --> 00:11:00,836 A:middle
of your controls are too
tight and not fitting,

271
00:11:01,166 --> 00:11:03,416 A:middle
now I'd like to recommend you
actually look at Auto Layout

272
00:11:03,416 --> 00:11:05,806 A:middle
as a way to not only
fix this problem

273
00:11:05,806 --> 00:11:09,016 A:middle
but also make your
application more forward looking

274
00:11:09,016 --> 00:11:10,986 A:middle
and more easily localizable
and so on.

275
00:11:11,046 --> 00:11:14,856 A:middle
The last thing I want
to talk about here

276
00:11:14,856 --> 00:11:16,806 A:middle
in this section is
NSSegmentedControl.

277
00:11:16,806 --> 00:11:20,206 A:middle
We have a new style of segmented
control, SegmentStyleSeparated.

278
00:11:20,616 --> 00:11:21,986 A:middle
It allows you to do things

279
00:11:21,986 --> 00:11:24,526 A:middle
like the back/forward button
you see here in Safari.

280
00:11:24,526 --> 00:11:26,566 A:middle
It's also visible in a
few other apps as well.

281
00:11:26,856 --> 00:11:28,316 A:middle
And that's the new
style of button

282
00:11:28,316 --> 00:11:31,046 A:middle
that represents the back/forward
buttons and other similar kinds

283
00:11:31,046 --> 00:11:33,116 A:middle
of uses that you can switch it.

284
00:11:33,236 --> 00:11:36,626 A:middle
We have two related
sessions for the new look,

285
00:11:36,886 --> 00:11:40,456 A:middle
one this afternoon, "Adapting
Your App to the New Look

286
00:11:40,456 --> 00:11:44,756 A:middle
of Yosemite" and the another
- another one, tomorrow,

287
00:11:45,006 --> 00:11:48,136 A:middle
which is more advanced talk
where you can learn about how

288
00:11:48,136 --> 00:11:50,546 A:middle
to use vibrancy in
more sophisticated ways

289
00:11:50,546 --> 00:11:53,856 A:middle
and create windows like
that Messages app you saw.

290
00:11:54,306 --> 00:11:56,726 A:middle
OK, so now let me talk
a bit about extensions.

291
00:11:56,986 --> 00:11:59,636 A:middle
Again, extensions is a
feature you saw yesterday.

292

293
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

294
00:12:01,636 --> 00:12:04,646 A:middle
Extensions provide access
to your app's functionality

295
00:12:04,646 --> 00:12:06,506 A:middle
and content in other apps.

296
00:12:06,936 --> 00:12:09,106 A:middle
For those of you familiar
with the services menu

297
00:12:09,106 --> 00:12:12,936 A:middle
from earlier OS X
releases, so it's sort of -

298
00:12:12,986 --> 00:12:14,036 A:middle
the services menu is sort

299
00:12:14,036 --> 00:12:16,296 A:middle
of a spiritual precursor
to this feature.

300
00:12:16,296 --> 00:12:18,126 A:middle
It's a much more
limited scope version

301
00:12:18,126 --> 00:12:19,396 A:middle
of the extensions feature.

302
00:12:21,796 --> 00:12:24,636 A:middle
Extensions run in a
separate process from the app

303
00:12:24,636 --> 00:12:26,436 A:middle
in which they have been
invoked, which, of course,

304
00:12:26,436 --> 00:12:28,786 A:middle
means there is security,
performance

305
00:12:28,786 --> 00:12:29,696 A:middle
and stability benefits.

306
00:12:30,366 --> 00:12:34,876 A:middle
And extensions are delivered
with apps as distinct bundles

307
00:12:34,876 --> 00:12:36,376 A:middle
within the application.

308
00:12:36,376 --> 00:12:39,156 A:middle
So, as you ship an
app on the App Store

309
00:12:39,156 --> 00:12:42,446 A:middle
or wherever you may ship it, you
may bundle the extensions inside

310
00:12:42,446 --> 00:12:44,846 A:middle
of it and the users can
enable those extensions

311
00:12:44,846 --> 00:12:46,126 A:middle
if they find them useful.

312
00:12:46,546 --> 00:12:50,356 A:middle
Now, to add an extension to
your application, in Xcode,

313
00:12:50,546 --> 00:12:53,126 A:middle
you would go ahead and specify
that you want a new target

314
00:12:53,126 --> 00:12:54,526 A:middle
within your application project.

315
00:12:55,126 --> 00:12:58,176 A:middle
And then, on OS X, you have
choice of four extensions.

316
00:12:58,626 --> 00:13:03,686 A:middle
Action Extensions are, like the
extensions you saw yesterday,

317

318
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

319
00:12:58,626 --> 00:13:03,686 A:middle
Action Extensions are, like the
extensions you saw yesterday,

320
00:13:03,966 --> 00:13:05,106 A:middle
the Markup Extension.

321
00:13:05,496 --> 00:13:08,426 A:middle
They work within
NSTextViews and WebViews and -

322
00:13:08,426 --> 00:13:13,976 A:middle
the translate extension you
saw in the afternoon is a -

323
00:13:13,976 --> 00:13:15,586 A:middle
or maybe in the morning
after which,

324
00:13:15,586 --> 00:13:17,456 A:middle
was also another
example of this.

325
00:13:18,116 --> 00:13:21,136 A:middle
Finder Sync Extensions let
you customize Finder's drawing

326
00:13:21,136 --> 00:13:21,996 A:middle
in a safe manner.

327
00:13:23,106 --> 00:13:25,746 A:middle
Share Extensions allow you
to extend the Share menu.

328
00:13:26,296 --> 00:13:30,656 A:middle
And Today Extensions allow
you to augment to Today view

329
00:13:30,836 --> 00:13:33,646 A:middle
in the Notification Center,
for instance like reminders,

330
00:13:33,646 --> 00:13:35,846 A:middle
and you saw examples
of this yesterday.

331
00:13:36,186 --> 00:13:37,846 A:middle
Now, to use extensions,

332
00:13:37,936 --> 00:13:40,176 A:middle
there are three new
APIs, three new classes.

333
00:13:41,116 --> 00:13:42,686 A:middle
Let me just show you
how you would use these

334
00:13:42,686 --> 00:13:43,556 A:middle
in your extension.

335
00:13:44,206 --> 00:13:47,296 A:middle
Inside of your extension,
you have a Principal class.

336
00:13:47,826 --> 00:13:50,656 A:middle
This is something you
typically specify and tell us.

337
00:13:50,896 --> 00:13:53,546 A:middle
For UI-based extension
it would be a subclass

338
00:13:53,546 --> 00:13:55,756 A:middle
of NSViewController
or UIViewController.

339
00:13:56,076 --> 00:13:58,896 A:middle
The principal class has a point
with the ExtensionContext,

340
00:13:59,316 --> 00:14:03,196 A:middle
which is basically the central
point for that extensions data,

341

342
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

343
00:13:59,316 --> 00:14:03,196 A:middle
which is basically the central
point for that extensions data,

344
00:14:03,196 --> 00:14:07,466 A:middle
and ExtensionContext has an
array of NSExtensionItems

345
00:14:07,836 --> 00:14:10,566 A:middle
where each NSExtensionItem
represents a data

346
00:14:10,746 --> 00:14:13,236 A:middle
that the user want
to operate on.

347
00:14:13,236 --> 00:14:15,436 A:middle
For instance, in the case
of the Markup Extension,

348
00:14:15,766 --> 00:14:18,776 A:middle
the image that the user wants
to edit will be represented

349
00:14:18,776 --> 00:14:20,106 A:middle
by an NSExtensionItem.

350
00:14:21,066 --> 00:14:23,796 A:middle
In turn, each NSExtensionItem
points in an array

351
00:14:23,796 --> 00:14:24,866 A:middle
of ItemProviders,

352
00:14:24,866 --> 00:14:28,246 A:middle
and ItemProviders are
basically what makes the data

353
00:14:28,336 --> 00:14:30,286 A:middle
for that ExtensionItem
available.

354
00:14:30,916 --> 00:14:32,406 A:middle
There might be one,
there might be more,

355
00:14:32,406 --> 00:14:35,396 A:middle
and the extension can choose
which provider it wants to use.

356
00:14:35,646 --> 00:14:38,646 A:middle
It's pretty straightforward
to use these APIs.

357
00:14:38,646 --> 00:14:41,956 A:middle
Inside of your extension,
to get the array of items,

358
00:14:41,956 --> 00:14:44,836 A:middle
you would just say
extensionContext.inputItems,

359
00:14:45,386 --> 00:14:47,856 A:middle
and then, you know, you work on
them or you let the user work

360
00:14:47,856 --> 00:14:49,876 A:middle
on them as in the
case of markup.

361
00:14:50,156 --> 00:14:52,876 A:middle
When you're done and you want to
return the results, you put them

362
00:14:52,876 --> 00:14:55,436 A:middle
in an array, or maybe that's
an array of one, of course,

363
00:14:55,436 --> 00:14:56,496 A:middle
if there's only one result,

364
00:14:56,496 --> 00:14:59,406 A:middle
and then you call this API
completeRequestReturningItems

365
00:14:59,406 --> 00:15:00,406 A:middle
completionHandler.

366

367
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

368
00:14:59,406 --> 00:15:00,406 A:middle
completionHandler.

369
00:15:00,686 --> 00:15:03,866 A:middle
Now, if it turns out the
user canceled the operation

370
00:15:04,086 --> 00:15:05,896 A:middle
or there was an error,
you can call this other

371
00:15:05,896 --> 00:15:07,866 A:middle
API cancelRequestWithError.

372
00:15:08,016 --> 00:15:09,116 A:middle
So, it's pretty straightforward.

373
00:15:09,116 --> 00:15:13,266 A:middle
We have two sessions for
extensions, one this afternoon,

374
00:15:13,266 --> 00:15:15,306 A:middle
"Creating Extensions Part 1,"

375
00:15:15,656 --> 00:15:17,056 A:middle
and another one tomorrow
morning.

376
00:15:17,516 --> 00:15:19,536 A:middle
So, let's talk about handoff.

377
00:15:19,626 --> 00:15:22,116 A:middle
Again, a feature you saw
yesterday at the keynote.

378
00:15:22,906 --> 00:15:26,686 A:middle
Handoff enables users to
seamlessly transition activities

379
00:15:26,686 --> 00:15:27,726 A:middle
between their devices.

380
00:15:28,646 --> 00:15:32,746 A:middle
And there is a simple base
API here called NSUserActivity

381
00:15:33,426 --> 00:15:36,566 A:middle
and their related APIs in
NSApplication, NSDocument,

382
00:15:36,566 --> 00:15:39,836 A:middle
NSResponder, and also in
their UIKit counterparts

383
00:15:39,836 --> 00:15:40,756 A:middle
as well because, as you know,

384
00:15:40,756 --> 00:15:42,026 A:middle
this is a cross-platform
feature.

385
00:15:43,656 --> 00:15:47,796 A:middle
NSUserActivity encapsulates
handoff information

386
00:15:47,796 --> 00:15:49,776 A:middle
about a single user activity.

387
00:15:51,696 --> 00:15:55,236 A:middle
So, you create one with
initWithActvityType,

388
00:15:55,236 --> 00:15:57,826 A:middle
and you specify a
sort of an identifier

389
00:15:57,826 --> 00:15:59,636 A:middle
or the activity the
user might be doing,

390
00:15:59,636 --> 00:16:02,106 A:middle
whether it's browsing a
web page, playing a game,

391

392
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

393
00:15:59,636 --> 00:16:02,106 A:middle
whether it's browsing a
web page, playing a game,

394
00:16:02,106 --> 00:16:03,536 A:middle
editing a document, whatever.

395
00:16:04,166 --> 00:16:06,676 A:middle
And then you go ahead and
you set various information

396
00:16:06,986 --> 00:16:10,426 A:middle
that would enable re-creating
that activity on another device,

397
00:16:10,756 --> 00:16:13,676 A:middle
as we can see here maybe
the level, the location,

398
00:16:13,676 --> 00:16:15,006 A:middle
the score that you're
in the game.

399
00:16:15,136 --> 00:16:16,916 A:middle
And then you can go
ahead and set a title

400
00:16:16,916 --> 00:16:19,276 A:middle
which is user-visible
title for that activity,

401
00:16:19,576 --> 00:16:22,466 A:middle
and then at appropriate
times you make that current

402
00:16:22,666 --> 00:16:24,306 A:middle
or you tell it's
no longer current.

403
00:16:24,646 --> 00:16:26,736 A:middle
And the system apparently
- the system looks

404
00:16:26,736 --> 00:16:29,376 A:middle
at what activity is current
and makes it available

405
00:16:29,376 --> 00:16:31,326 A:middle
to other nearby devices
as appropriate.

406
00:16:31,326 --> 00:16:33,916 A:middle
So, you just need to worry about
telling us when it's current

407
00:16:33,916 --> 00:16:34,806 A:middle
and when it's not current.

408
00:16:35,236 --> 00:16:37,216 A:middle
That's pretty straightforward.

409
00:16:37,576 --> 00:16:40,096 A:middle
In NSApplication, we
have several APIs.

410
00:16:40,496 --> 00:16:42,676 A:middle
The first one here
indicates to you

411
00:16:42,676 --> 00:16:45,516 A:middle
that the user has indicated an
interest in moving an activity

412
00:16:45,516 --> 00:16:48,156 A:middle
to your device, and
you can return yes

413
00:16:48,356 --> 00:16:51,556 A:middle
if you are handling it,
or you can return no

414
00:16:51,556 --> 00:16:52,736 A:middle
and let the system handle it.

415
00:16:53,096 --> 00:16:56,756 A:middle
The next API application
continueUserActivity actually

416
00:16:56,756 --> 00:16:59,096 A:middle
gives you the NSUserActivity,
which has the data

417
00:16:59,096 --> 00:17:00,656 A:middle
from which you can
re-create the activity.

418

419
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

420
00:16:59,096 --> 00:17:00,656 A:middle
from which you can
re-create the activity.

421
00:17:01,116 --> 00:17:03,876 A:middle
Now, if you're using NSDocument,

422
00:17:04,486 --> 00:17:06,925 A:middle
there's easy handoff
support for iCloud documents.

423
00:17:06,925 --> 00:17:09,445 A:middle
You really just have to
do one thing and that is

424
00:17:09,445 --> 00:17:11,685 A:middle
to add this key to
your Info.plist

425
00:17:11,685 --> 00:17:13,726 A:middle
for your document
type indicating

426
00:17:13,726 --> 00:17:15,846 A:middle
that you are supporting
handoff for this document,

427
00:17:16,046 --> 00:17:19,096 A:middle
and you specify a unique type
identifier as you can see here,

428
00:17:19,096 --> 00:17:20,986 A:middle
com.apple.TextEdit.editing.

429
00:17:20,986 --> 00:17:23,636 A:middle
Now, if you're going to do
something more sophisticated,

430
00:17:23,675 --> 00:17:25,496 A:middle
for instance, specify
the selection

431
00:17:25,846 --> 00:17:30,416 A:middle
or some other viewing parameters
with that handoff information,

432
00:17:30,686 --> 00:17:32,776 A:middle
you do have a handle
to the UserActivity off

433
00:17:32,776 --> 00:17:35,416 A:middle
of the NSDocument that you
can set the parameters in.

434
00:17:36,286 --> 00:17:37,866 A:middle
Next, I want to talk
about Storyboards

435
00:17:37,866 --> 00:17:40,136 A:middle
and View Controllers,
which is a set

436
00:17:40,136 --> 00:17:41,816 A:middle
of new APIs we're
adding to OS X.

437
00:17:41,916 --> 00:17:44,076 A:middle
Now, if you've done
iOS development,

438
00:17:44,166 --> 00:17:46,996 A:middle
you're very likely familiar
with the concept of Storyboard,

439
00:17:47,266 --> 00:17:49,186 A:middle
and Storyboard is a
visual representation

440
00:17:49,186 --> 00:17:51,326 A:middle
of the user interface
of your application.

441
00:17:51,716 --> 00:17:54,566 A:middle
So, it's giving you
a higher level view

442
00:17:54,976 --> 00:17:56,226 A:middle
of your user interface.

443
00:17:56,226 --> 00:17:59,056 A:middle
It's higher level than
creating individual nibs

444
00:17:59,056 --> 00:18:00,916 A:middle
and maybe setting targets
and actions together.

445

446
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

447
00:17:59,056 --> 00:18:00,916 A:middle
and maybe setting targets
and actions together.

448
00:18:01,426 --> 00:18:06,076 A:middle
And if you want to just create
a Storyboard application fairly

449
00:18:06,076 --> 00:18:08,506 A:middle
straightforward in Xcode as
you're creating your new app,

450
00:18:08,506 --> 00:18:09,956 A:middle
you just go check this checkbox.

451
00:18:10,196 --> 00:18:10,896 A:middle
Be simple.

452
00:18:11,016 --> 00:18:11,936 A:middle
That's it.

453
00:18:12,166 --> 00:18:13,716 A:middle
And will give you
a default template

454
00:18:13,746 --> 00:18:15,476 A:middle
that you can modify from there.

455
00:18:15,476 --> 00:18:18,766 A:middle
Now, Storyboards specify
different parts of your UI

456
00:18:18,766 --> 00:18:22,146 A:middle
as different scenes, and then
you would use segues to connect

457
00:18:22,146 --> 00:18:24,746 A:middle
or transition between
these Storyboards,

458
00:18:24,746 --> 00:18:25,736 A:middle
between these scenes.

459
00:18:26,206 --> 00:18:31,006 A:middle
There are two classes,
NSStoryboard, NSStoryboardSegue.

460
00:18:31,006 --> 00:18:35,776 A:middle
These are very parallel to
their UIKit counterparts.

461
00:18:36,266 --> 00:18:38,946 A:middle
We also have a new
protocol, SeguePerforming.

462
00:18:39,656 --> 00:18:41,996 A:middle
This collects the
SeguePerforming methods

463
00:18:41,996 --> 00:18:44,656 A:middle
because on OS X, we have
two classes that respond

464
00:18:44,656 --> 00:18:46,376 A:middle
to these methods
that's ViewController

465
00:18:46,656 --> 00:18:49,786 A:middle
and WindowController as
well, so they both respond

466
00:18:49,786 --> 00:18:51,576 A:middle
to these SeguePerforming
methods.

467
00:18:52,046 --> 00:18:54,386 A:middle
In addition, these two
classes also provide access

468
00:18:54,386 --> 00:18:56,316 A:middle
to the Storyboard
via a property.

469
00:18:56,706 --> 00:18:59,006 A:middle
So, you can get - find out the
Storyboard that they came from,

470
00:18:59,066 --> 00:19:00,396 A:middle
that they were created from.

471

472
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

473
00:18:59,066 --> 00:19:00,396 A:middle
that they were created from.

474
00:19:00,886 --> 00:19:03,486 A:middle
Now, we have two new
View Controllers as well

475
00:19:03,486 --> 00:19:06,676 A:middle
that of course help you
create better Storyboards,

476
00:19:07,026 --> 00:19:10,466 A:middle
TabViewController and
SplitViewController and they -

477
00:19:10,786 --> 00:19:13,096 A:middle
they've - you know, in
spirit they're similar

478
00:19:13,096 --> 00:19:14,236 A:middle
to the iOS counterparts.

479
00:19:14,236 --> 00:19:15,186 A:middle
There's a few differences.

480
00:19:15,186 --> 00:19:16,566 A:middle
Let me tell you how these work.

481
00:19:16,566 --> 00:19:20,676 A:middle
So, you have a
TabViewController,

482
00:19:20,906 --> 00:19:24,186 A:middle
the TabViewController has
an array of NSTabViewItems.

483
00:19:24,186 --> 00:19:26,206 A:middle
Now you might be familiar
with NSTabViewItem -

484
00:19:26,486 --> 00:19:28,056 A:middle
it's a class we had
for a long time.

485
00:19:28,356 --> 00:19:31,046 A:middle
We augmented just a bit to
work with ViewControllers.

486
00:19:32,126 --> 00:19:35,686 A:middle
Each TabViewItem, in turn, has
a new property ViewController,

487
00:19:35,966 --> 00:19:38,346 A:middle
and that might point to a
ViewController in the case

488
00:19:38,346 --> 00:19:40,006 A:middle
of a TabViewController
setup like this.

489
00:19:40,416 --> 00:19:42,466 A:middle
So, that's pretty
straightforward.

490
00:19:42,716 --> 00:19:45,576 A:middle
Let me show you how you create
one of these structures.

491
00:19:46,776 --> 00:19:48,586 A:middle
There are two ways to do it.

492
00:19:49,276 --> 00:19:52,546 A:middle
To add a child-view controller
to a TabViewController,

493
00:19:53,106 --> 00:19:56,126 A:middle
one way you could do it is
you just first create an item,

494
00:19:56,126 --> 00:19:58,686 A:middle
NSTabViewItem
tabViewItemWithViewController.

495
00:19:59,696 --> 00:20:02,616 A:middle
You go set - and that
creates, so that creates

496

497
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

498
00:19:59,696 --> 00:20:02,616 A:middle
You go set - and that
creates, so that creates

499
00:20:02,616 --> 00:20:03,896 A:middle
that relationship there.

500
00:20:04,286 --> 00:20:07,646 A:middle
You can go ahead and set
the properties on the item -

501
00:20:08,856 --> 00:20:11,136 A:middle
for instance it's a label
and whatever else you want.

502
00:20:11,196 --> 00:20:13,506 A:middle
And then you go ahead
and add the item

503
00:20:13,626 --> 00:20:15,616 A:middle
to the ViewController
with addTabViewItem.

504
00:20:15,826 --> 00:20:17,376 A:middle
So, this is one way to do it.

505
00:20:17,656 --> 00:20:21,296 A:middle
Another way to do it is simply
take the ChildViewController,

506
00:20:21,366 --> 00:20:24,086 A:middle
this guy here, and add it to
the TabViewController directly

507
00:20:24,086 --> 00:20:25,746 A:middle
with addChildViewController,

508
00:20:25,746 --> 00:20:28,316 A:middle
which is a generic API we
expose NSViewController.

509
00:20:28,756 --> 00:20:31,036 A:middle
This will automatically
create the TabViewItem for you

510
00:20:31,036 --> 00:20:31,946 A:middle
and insert it in there.

511
00:20:31,946 --> 00:20:34,236 A:middle
So, this is the - this is
the approach you want to use

512
00:20:34,236 --> 00:20:35,906 A:middle
if you don't want to deal
with the item at all.

513
00:20:36,356 --> 00:20:39,116 A:middle
But if you do want to set
properties on the item later,

514
00:20:39,336 --> 00:20:41,326 A:middle
you can still get the
item corresponding

515
00:20:41,326 --> 00:20:42,676 A:middle
to that ChildViewController,

516
00:20:42,896 --> 00:20:44,516 A:middle
and then you can set
the properties just

517
00:20:44,516 --> 00:20:48,816 A:middle
like you did in the other case.

518
00:20:48,886 --> 00:20:50,326 A:middle
Now, let's look at
SplitViewController,

519
00:20:50,326 --> 00:20:53,446 A:middle
and no surprise, it turns
out to be very parallel.

520
00:20:53,706 --> 00:20:56,756 A:middle
SplitViewController has an
array of SplitViewItems,

521
00:20:56,756 --> 00:20:58,546 A:middle
which point to their
ViewControllers.

522
00:20:58,546 --> 00:21:00,986 A:middle
To create it, you do
the item, you add it,

523

524
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

525
00:20:58,546 --> 00:21:00,986 A:middle
To create it, you do
the item, you add it,

526
00:21:00,986 --> 00:21:02,966 A:middle
or you create
addChildViewController.

527
00:21:03,406 --> 00:21:04,126 A:middle
Got it? OK.

528
00:21:04,126 --> 00:21:05,606 A:middle
Very parallel.

529
00:21:06,106 --> 00:21:08,556 A:middle
OK, now we have some methods for
View Controller presentation.

530
00:21:08,556 --> 00:21:11,516 A:middle
If you want to do your own
manual presentation rather

531
00:21:11,516 --> 00:21:14,606 A:middle
than going through segues, you
can present a View Controller

532
00:21:14,606 --> 00:21:16,956 A:middle
as sheet, you can controller
- you can present it

533
00:21:16,956 --> 00:21:19,746 A:middle
as a modal window or as
a popover, you can also

534
00:21:19,746 --> 00:21:21,336 A:middle
of course dismiss
View Controllers.

535
00:21:22,236 --> 00:21:24,266 A:middle
You can transition
between View Controllers

536
00:21:24,266 --> 00:21:25,356 A:middle
with this method here.

537
00:21:25,616 --> 00:21:28,466 A:middle
The options give you the -
how you want to transition.

538
00:21:28,786 --> 00:21:33,846 A:middle
One little tip there, the
options let you go slide left

539
00:21:33,846 --> 00:21:36,756 A:middle
or right; you can also choose
to slide forward or backward,

540
00:21:37,046 --> 00:21:39,096 A:middle
which is a much more
international savvy way

541
00:21:39,096 --> 00:21:40,596 A:middle
of doing it because in an art -

542
00:21:40,596 --> 00:21:44,506 A:middle
the right to left language
it will go the other way,

543
00:21:44,726 --> 00:21:47,186 A:middle
which is appropriate
for the user's UI.

544
00:21:49,516 --> 00:21:52,886 A:middle
We also have methods which will
be familiar to you from iOS,

545
00:21:52,946 --> 00:21:57,706 A:middle
methods that lets you
see a - well - thanks.

546
00:21:58,396 --> 00:22:01,416 A:middle
I should have talked
about this first, I guess.

547

548
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

549
00:21:58,396 --> 00:22:01,416 A:middle
I should have talked
about this first, I guess.

550
00:22:02,166 --> 00:22:05,496 A:middle
Anyway, viewWillAppear and the
like and also methods to find

551
00:22:05,496 --> 00:22:06,486 A:middle
out when layout appear.

552
00:22:06,486 --> 00:22:07,886 A:middle
So, pretty straightforward stuff

553
00:22:07,886 --> 00:22:09,026 A:middle
and a good addition
to the class.

554
00:22:10,116 --> 00:22:12,346 A:middle
One more thing about
View Controller is

555
00:22:12,346 --> 00:22:15,646 A:middle
that it's now automatically
added into the responder chain.

556
00:22:15,876 --> 00:22:16,526 A:middle
Oh there you go.

557
00:22:17,516 --> 00:22:20,806 A:middle
[ Applause ]

558
00:22:21,306 --> 00:22:22,956 A:middle
And again, let me
just show a picture.

559
00:22:22,956 --> 00:22:24,376 A:middle
I've been trying to
read those two bullets.

560
00:22:24,376 --> 00:22:26,776 A:middle
Here's your view, here's
your responder chain,

561
00:22:26,776 --> 00:22:27,986 A:middle
you have your ParentViews
all the way

562
00:22:27,986 --> 00:22:29,246 A:middle
up to the Window's
ViewController.

563
00:22:29,246 --> 00:22:31,446 A:middle
You have Child Views
pointing at the View,

564
00:22:31,446 --> 00:22:34,406 A:middle
and the ViewController would
sort of hang on in the side -

565
00:22:34,776 --> 00:22:36,796 A:middle
you know, I'm not part of
that whole group there.

566
00:22:37,356 --> 00:22:38,606 A:middle
Well, now it's part
of that group.

567
00:22:38,836 --> 00:22:41,156 A:middle
Note that we tried doing
this for all apps and we ran

568
00:22:41,156 --> 00:22:43,456 A:middle
into responder chain
cycles, not a good idea.

569
00:22:43,866 --> 00:22:46,836 A:middle
So, this happens - this change
is effective only for apps built

570
00:22:46,836 --> 00:22:48,786 A:middle
against the 10.10 SDK.

571
00:22:49,436 --> 00:22:53,096 A:middle
Let me now talk about
something a little different,

572
00:22:53,096 --> 00:22:54,386 A:middle
API Modernization.

573
00:22:55,046 --> 00:22:58,556 A:middle
There have been many advances
in Objective-C in recent years,

574
00:22:59,226 --> 00:23:03,196 A:middle
for instance @property, that's
been around for a while now,

575

576
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

577
00:22:59,226 --> 00:23:03,196 A:middle
for instance @property, that's
been around for a while now,

578
00:23:03,196 --> 00:23:06,516 A:middle
instancetype, enums with
explicit underlying types,

579
00:23:06,926 --> 00:23:10,436 A:middle
NS-REQUIRES-SUPER and a
new one we just added,

580
00:23:10,436 --> 00:23:11,656 A:middle
NS-DESIGNATED-INITIALIZER

581
00:23:11,656 --> 00:23:14,056 A:middle
that lets you identify
designated initializers.

582
00:23:14,876 --> 00:23:19,366 A:middle
And then 10.10 and iOS 8 SDKs
- we made a concerted effort

583
00:23:19,366 --> 00:23:22,456 A:middle
to adopt these in a
lot more of our APIs.

584
00:23:24,286 --> 00:23:25,926 A:middle
And why are we doing this?

585
00:23:27,256 --> 00:23:31,136 A:middle
Well, these allow us to state
the APIs more precisely,

586
00:23:31,136 --> 00:23:33,886 A:middle
more correctly, and that of
course has many benefits.

587
00:23:33,886 --> 00:23:36,346 A:middle
The APIs are now more
self-documenting.

588
00:23:36,346 --> 00:23:38,286 A:middle
You don't have to go to
the documentation as much.

589
00:23:38,286 --> 00:23:39,426 A:middle
It's much clearer, right?

590
00:23:39,426 --> 00:23:41,276 A:middle
They're on the other
file when the API does.

591
00:23:41,816 --> 00:23:44,016 A:middle
It allows the APIs to
be more consistent.

592
00:23:44,016 --> 00:23:45,486 A:middle
You don't ever ask
a question now.

593
00:23:45,486 --> 00:23:47,696 A:middle
Why is this a property and this
other thing that looks very much

594
00:23:47,696 --> 00:23:49,066 A:middle
like it not a property?

595
00:23:50,166 --> 00:23:52,206 A:middle
It allows Xcode to
be more helpful -

596
00:23:52,376 --> 00:23:55,066 A:middle
you now get much better
context-sensitive completions

597
00:23:55,066 --> 00:23:55,816 A:middle
in some cases.

598
00:23:56,696 --> 00:24:02,046 A:middle
It allows the - it enables the
compiler to warn and to detect

599

600
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

601
00:23:56,696 --> 00:24:02,046 A:middle
It allows the - it enables the
compiler to warn and to detect

602
00:24:02,046 --> 00:24:04,816 A:middle
and warn about potential bugs,
and this is really a big win,

603
00:24:04,816 --> 00:24:06,626 A:middle
I mean it will really
find some errors.

604
00:24:07,666 --> 00:24:09,176 A:middle
And last but not least,

605
00:24:09,176 --> 00:24:11,926 A:middle
it allows better exposure
of our APIs in Swift.

606
00:24:11,926 --> 00:24:15,016 A:middle
Swift, for instance, has
a stricter definition

607
00:24:15,096 --> 00:24:17,316 A:middle
for the property is

608
00:24:17,696 --> 00:24:20,676 A:middle
and by declaring the properties
explicitly in Objective-C,

609
00:24:20,676 --> 00:24:26,436 A:middle
we allow them to be exposed
properly in Swift as well.

610
00:24:26,636 --> 00:24:29,666 A:middle
Now, one consequence
of all this is

611
00:24:29,666 --> 00:24:31,306 A:middle
that as you build
your applications

612
00:24:31,306 --> 00:24:33,646 A:middle
against the new SDKs,
you may see new warnings

613
00:24:33,646 --> 00:24:34,836 A:middle
and errors in your build.

614
00:24:35,026 --> 00:24:36,516 A:middle
Please pay attention
to them because some

615
00:24:36,516 --> 00:24:38,146 A:middle
of them might actually
be potential

616
00:24:38,396 --> 00:24:40,376 A:middle
or real bugs lurking
around in your code.

617
00:24:41,696 --> 00:24:45,306 A:middle
OK, now I will just talk a bit
about one of these areas here

618
00:24:45,306 --> 00:24:47,086 A:middle
and that's the @property change.

619
00:24:48,356 --> 00:24:50,216 A:middle
Now, we've converted
many accessors,

620
00:24:50,216 --> 00:24:51,756 A:middle
many getter/setter
pairs and getters

621
00:24:51,756 --> 00:24:53,416 A:middle
in our APIs to @property.

622
00:24:54,706 --> 00:24:57,516 A:middle
And obvious ones, for instance
if you look at NSControl,

623
00:24:57,516 --> 00:24:58,466 A:middle
the target property

624
00:24:58,466 --> 00:25:00,856 A:middle
and objectValue property
are now real properties,

625

626
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

627
00:24:58,466 --> 00:25:00,856 A:middle
and objectValue property
are now real properties,

628
00:25:01,216 --> 00:25:02,936 A:middle
and you'll notice that the
target property is weak,

629
00:25:02,936 --> 00:25:04,406 A:middle
and I'm going to talk
about that in a second.

630
00:25:05,626 --> 00:25:08,716 A:middle
But we also converted with
our computed properties

631
00:25:08,716 --> 00:25:10,976 A:middle
or possibly computed
properties to @property.

632
00:25:11,296 --> 00:25:13,166 A:middle
For instance integerValue
and stringValue

633
00:25:13,166 --> 00:25:17,786 A:middle
and NSControl might be computed
off of the objectValue property,

634
00:25:17,786 --> 00:25:20,706 A:middle
but we don't want to expose
that implementation detail

635
00:25:20,706 --> 00:25:23,296 A:middle
in our API, so we make
them all into properties.

636
00:25:23,906 --> 00:25:25,736 A:middle
Now, you don't care
as the API consumer.

637
00:25:26,326 --> 00:25:28,276 A:middle
Another thing we have converted
into property is something

638
00:25:28,276 --> 00:25:30,466 A:middle
like description, which
is obviously a computed.

639
00:25:30,526 --> 00:25:32,906 A:middle
Every time you call it, it's
going to generate a description.

640
00:25:33,396 --> 00:25:35,766 A:middle
But that's also a good
property we believe,

641
00:25:35,766 --> 00:25:36,856 A:middle
and we made it into a property.

642
00:25:38,876 --> 00:25:42,056 A:middle
So, use property for anything
that's about the value or state

643
00:25:42,056 --> 00:25:44,366 A:middle
of an object or its
relationship to other objects.

644
00:25:44,696 --> 00:25:47,676 A:middle
So, then you might be wondering,
what is not a property?

645
00:25:48,926 --> 00:25:51,656 A:middle
Well, OK, not every method
which can be expressed

646
00:25:51,656 --> 00:25:53,026 A:middle
as a property should be.

647
00:25:53,326 --> 00:25:55,486 A:middle
Not every method that looks
like a property should be.

648
00:25:55,486 --> 00:25:58,996 A:middle
You know, sometimes if it looks
like a duck, it's not a duck.

649
00:25:59,606 --> 00:26:02,136 A:middle
The canonical example is
the retain method, you know,

650

651
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

652
00:25:59,606 --> 00:26:02,136 A:middle
The canonical example is
the retain method, you know,

653
00:26:02,136 --> 00:26:03,566 A:middle
the good old retain
method for those of you

654
00:26:03,566 --> 00:26:04,736 A:middle
who still remember what that is.

655
00:26:05,036 --> 00:26:08,566 A:middle
It returns a value, it takes no
argument, it looks like a getter

656
00:26:09,276 --> 00:26:12,676 A:middle
but it's not a duck, it's
neither on a property either.

657
00:26:13,076 --> 00:26:16,536 A:middle
So, what are some
examples of bad -

658
00:26:16,586 --> 00:26:18,316 A:middle
what are bad candidates
for @property?

659
00:26:20,076 --> 00:26:24,006 A:middle
So, methods which do things
such as load, parse and toggle -

660
00:26:24,166 --> 00:26:25,826 A:middle
these might return
like a parse state,

661
00:26:25,826 --> 00:26:27,836 A:middle
they might return a result,
they might return a Boolean,

662
00:26:28,316 --> 00:26:29,676 A:middle
and they might take
no arguments,

663
00:26:29,816 --> 00:26:30,856 A:middle
but they are not properties.

664
00:26:30,986 --> 00:26:32,206 A:middle
You can usually recognize these

665
00:26:32,206 --> 00:26:34,236 A:middle
because they have a
verb prefix on the name.

666
00:26:35,016 --> 00:26:37,176 A:middle
Generators like init
methods, copy methods,

667
00:26:37,216 --> 00:26:38,816 A:middle
some of these also have
hit the first rule,

668
00:26:38,816 --> 00:26:40,446 A:middle
of course, or objectEnumerator.

669
00:26:40,886 --> 00:26:43,796 A:middle
These guys are returning
new results every time.

670
00:26:43,796 --> 00:26:46,876 A:middle
They are not returning
values that are results

671
00:26:46,876 --> 00:26:49,036 A:middle
that are item potent,
meaning the same every time.

672
00:26:49,036 --> 00:26:52,026 A:middle
So, they're not good
candidates for properties.

673
00:26:52,086 --> 00:26:54,626 A:middle
Another category is
methods which change state

674
00:26:54,626 --> 00:26:58,736 A:middle
such as nextObject, not a good
candidate for property as well.

675
00:26:59,956 --> 00:27:03,156 A:middle
So, you have to make sure the
methods also swim like a duck

676

677
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

678
00:26:59,956 --> 00:27:03,156 A:middle
So, you have to make sure the
methods also swim like a duck

679
00:27:03,156 --> 00:27:05,316 A:middle
and quack like a duck before
you make them into properties.

680
00:27:06,296 --> 00:27:08,706 A:middle
Now, earlier you saw a
weak property on NS -

681
00:27:09,006 --> 00:27:10,896 A:middle
on the target property.

682
00:27:11,996 --> 00:27:14,976 A:middle
We use zeroing weak for
targets now, that's declared

683
00:27:14,976 --> 00:27:16,766 A:middle
with the weak attribute
on the target.

684
00:27:17,206 --> 00:27:19,416 A:middle
Now, this is effective
only in applications linked

685
00:27:19,416 --> 00:27:21,996 A:middle
against the 10.10 SDK.

686
00:27:22,186 --> 00:27:24,376 A:middle
Previous or other
applications' existing binaries,

687
00:27:24,656 --> 00:27:27,156 A:middle
targets still have
the assigned behavior.

688
00:27:27,706 --> 00:27:29,826 A:middle
Now, we're also using
weak for delegates

689
00:27:29,826 --> 00:27:32,506 A:middle
and data sources moving
forward in new APIs.

690
00:27:32,506 --> 00:27:34,846 A:middle
For instance, here's a new
API we added this release.

691
00:27:35,196 --> 00:27:37,256 A:middle
However, we're not changing
the existing delegate

692
00:27:37,256 --> 00:27:40,206 A:middle
and data source methods
to use weak properties.

693
00:27:40,376 --> 00:27:44,136 A:middle
There's too many compatible
illustrations for that one.

694
00:27:44,326 --> 00:27:46,416 A:middle
Now, as I said, we've
done these in our APIs,

695
00:27:46,416 --> 00:27:49,856 A:middle
but you can also modernize your
code as well if you'd like,

696
00:27:50,206 --> 00:27:52,476 A:middle
and it's a good idea because
it might help you find bugs

697
00:27:52,476 --> 00:27:54,876 A:middle
in your code and, you know,
get the benefit I've shown.

698
00:27:55,666 --> 00:28:00,496 A:middle
The Convert to Modern
Objective-C syntax refactoring

699

700
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

701
00:27:55,666 --> 00:28:00,496 A:middle
The Convert to Modern
Objective-C syntax refactoring

702
00:28:00,496 --> 00:28:03,226 A:middle
tool, which is actually in
Xcode today, has been augmented

703
00:28:03,546 --> 00:28:06,506 A:middle
to do some of these
changes as well.

704
00:28:06,966 --> 00:28:10,696 A:middle
You can see some of them
in this panel you get,

705
00:28:10,696 --> 00:28:12,346 A:middle
and you can choose which
ones you want to do

706
00:28:12,346 --> 00:28:13,396 A:middle
and go ahead and do them.

707
00:28:13,546 --> 00:28:14,946 A:middle
Now, one word of warning though,

708
00:28:14,946 --> 00:28:18,246 A:middle
this tool doesn't
do all the changes.

709
00:28:18,596 --> 00:28:21,366 A:middle
It also may not get
everything right.

710
00:28:21,366 --> 00:28:23,296 A:middle
For instance, it might
not get the exact type

711
00:28:23,296 --> 00:28:24,386 A:middle
of property right.

712
00:28:24,676 --> 00:28:28,216 A:middle
So, you really need to
review the changes offered

713
00:28:28,216 --> 00:28:31,436 A:middle
up by this tool and accept
them or tweak them as needed.

714
00:28:35,236 --> 00:28:38,186 A:middle
The next - I'm going to talk
about Swift, and there are a lot

715
00:28:38,186 --> 00:28:40,146 A:middle
of sessions about Swift,
so I'm not going to go

716
00:28:40,146 --> 00:28:42,806 A:middle
into any language details
or anything else about -

717
00:28:42,806 --> 00:28:44,636 A:middle
I'll try to teach you
Swift, anything like that.

718
00:28:44,636 --> 00:28:46,236 A:middle
So, I hope you'll be able to go

719
00:28:46,236 --> 00:28:47,616 A:middle
to those sessions
and enjoy those.

720
00:28:47,616 --> 00:28:51,666 A:middle
Swift - I'm just going
to talk to you basically

721
00:28:51,666 --> 00:28:53,836 A:middle
about the API interactions
within the context

722
00:28:53,836 --> 00:28:55,096 A:middle
of Cocoa and Cocoa Touch.

723
00:28:55,366 --> 00:28:57,086 A:middle
Swift is a new language
for Cocoa,

724
00:28:57,086 --> 00:28:58,976 A:middle
and it provides seamless
interoperability

725
00:28:58,976 --> 00:29:05,396 A:middle
with the Cocoa APIs and of
course Objective-C code.

726

727
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

728
00:28:58,976 --> 00:29:05,396 A:middle
with the Cocoa APIs and of
course Objective-C code.

729
00:29:05,676 --> 00:29:08,016 A:middle
Now, as you know, API
is - API design is near

730
00:29:08,866 --> 00:29:10,636 A:middle
and dear to our hearts.

731
00:29:10,636 --> 00:29:12,916 A:middle
I've given a few API
design talks in the past,

732
00:29:13,036 --> 00:29:15,896 A:middle
so we think deeply about
API considerations.

733
00:29:16,406 --> 00:29:21,806 A:middle
And existing API
guidelines we have in Cocoa

734
00:29:21,806 --> 00:29:24,956 A:middle
for Objective-C pretty much
apply to Swift as well.

735
00:29:25,266 --> 00:29:27,836 A:middle
And with just one exception
that I'll talk about later,

736
00:29:27,836 --> 00:29:31,406 A:middle
the init methods, there's
really no changes in APIs

737
00:29:31,406 --> 00:29:33,326 A:middle
as they're exposed in Swift.

738
00:29:33,986 --> 00:29:38,066 A:middle
Now, this doesn't mean of
course as we start adopting more

739
00:29:38,066 --> 00:29:41,376 A:middle
of Swift features in our APIs
as with more APIs forward,

740
00:29:41,376 --> 00:29:43,056 A:middle
we won't be taking
advantage of some of the new

741
00:29:43,056 --> 00:29:45,996 A:middle
and exciting features of Swift
that Objective-C does not offer.

742
00:29:46,346 --> 00:29:48,396 A:middle
So, we're going to be doing
that over time of course.

743
00:29:48,396 --> 00:29:52,956 A:middle
So, let me just show you
how some Cocoa APIs come

744
00:29:52,956 --> 00:29:54,046 A:middle
across in Swift.

745
00:29:54,366 --> 00:29:56,976 A:middle
First, properties, here's
a pretty obvious one.

746
00:29:57,296 --> 00:30:02,526 A:middle
The NSRect - the frame property
in NSView type, that's NSRect,

747

748
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

749
00:29:57,296 --> 00:30:02,526 A:middle
The NSRect - the frame property
in NSView type, that's NSRect,

750
00:30:02,816 --> 00:30:03,686 A:middle
pretty straightforward.

751
00:30:03,686 --> 00:30:04,986 A:middle
Here's how it looks
like in Swift.

752
00:30:06,226 --> 00:30:08,606 A:middle
Now, as I'm showing you these
slides, if you're ever confused

753
00:30:08,606 --> 00:30:10,826 A:middle
about which line is Objective-C,
which line is Swift,

754
00:30:10,826 --> 00:30:12,626 A:middle
just look for the
lack of semicolon

755
00:30:12,696 --> 00:30:14,296 A:middle
that identifies the Swift lines.

756
00:30:15,086 --> 00:30:17,446 A:middle
Here's another one,
Storyboard property off

757
00:30:17,446 --> 00:30:20,206 A:middle
of NSViewController, here is
what it looks like in Swift.

758
00:30:20,806 --> 00:30:23,386 A:middle
Note the exclamation mark
there on the Storyboard

759
00:30:23,386 --> 00:30:25,756 A:middle
which indicates that the
property of this could be nil

760
00:30:25,756 --> 00:30:27,366 A:middle
and the get, which indicates

761
00:30:27,366 --> 00:30:28,856 A:middle
that this is a read-only
property.

762
00:30:29,156 --> 00:30:32,716 A:middle
And here is one more case, this
is the subviews property off

763
00:30:32,716 --> 00:30:35,736 A:middle
of NSArray which is of
course declared as an NSArray

764
00:30:35,736 --> 00:30:39,956 A:middle
in Objective-C which implicitly
means an NSArray of ID.

765
00:30:40,376 --> 00:30:43,376 A:middle
It comes across to Swift
as an array of AnyObject,

766
00:30:43,656 --> 00:30:46,596 A:middle
where AnyObject is
the counterpart to ID.

767
00:30:46,596 --> 00:30:49,466 A:middle
Now, this is one of the
refinements I'm talking about.

768
00:30:49,466 --> 00:30:52,756 A:middle
As we move forward, you know, we
want to declare this API better

769
00:30:52,916 --> 00:30:55,516 A:middle
because we - this is really
an array of NSViews of course.

770
00:30:56,546 --> 00:30:58,936 A:middle
Right now, this is not coming
through to the APIs here,

771
00:30:58,936 --> 00:31:00,156 A:middle
but these are refinement
that we'd

772

773
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

774
00:30:58,936 --> 00:31:00,156 A:middle
but these are refinement
that we'd

775
00:31:00,156 --> 00:31:01,486 A:middle
like to do here and
other places.

776
00:31:01,486 --> 00:31:04,656 A:middle
And more importantly, as you
define your own APIs and Swift

777
00:31:04,656 --> 00:31:06,346 A:middle
within your programs,
you know, take advantage

778
00:31:06,346 --> 00:31:10,376 A:middle
of Swift's unique features to
express your programs better.

779
00:31:10,886 --> 00:31:15,226 A:middle
Now, let me show you
some mapping of methods,

780
00:31:15,226 --> 00:31:16,696 A:middle
for instance methods
with no arguments.

781
00:31:17,106 --> 00:31:18,896 A:middle
Here's a simple case,
displayIfNeeded.

782
00:31:18,896 --> 00:31:20,726 A:middle
Here's what it looks
like in Swift,

783
00:31:21,046 --> 00:31:24,716 A:middle
and here's what the call looks
like in Swift, displayIfNeeded

784
00:31:24,716 --> 00:31:26,836 A:middle
with open and close paren
at the end to indicate

785
00:31:26,836 --> 00:31:29,026 A:middle
that this is a method call,
pretty straightforward.

786
00:31:29,476 --> 00:31:34,606 A:middle
Here's a method with one
argument, an addSubview method.

787
00:31:35,166 --> 00:31:38,776 A:middle
And here's what it
looks like in Swift.

788
00:31:38,776 --> 00:31:41,976 A:middle
Now, note this aView here,
and one thing to note is

789
00:31:41,976 --> 00:31:44,366 A:middle
that this aView:
is not a label -

790
00:31:44,706 --> 00:31:46,376 A:middle
the name of this
method is addSubview.

791
00:31:46,456 --> 00:31:49,196 A:middle
This aView is simply the
name of the variable,

792
00:31:49,506 --> 00:31:52,416 A:middle
the name of the local variable
for that argument as it exists

793
00:31:52,416 --> 00:31:54,746 A:middle
in the Objective-C
header making its way

794
00:31:54,746 --> 00:31:56,296 A:middle
into the Swift interface here.

795
00:31:56,566 --> 00:31:59,526 A:middle
So, really the method signature
of this method is addSubview,

796
00:31:59,526 --> 00:32:00,636 A:middle
and it takes an NSView.

797

798
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

799
00:31:59,526 --> 00:32:00,636 A:middle
and it takes an NSView.

800
00:32:01,876 --> 00:32:04,476 A:middle
Calling something like
this is again also pretty

801
00:32:04,476 --> 00:32:07,406 A:middle
straightforward, addSubview and
then your arguments right there.

802
00:32:07,986 --> 00:32:11,956 A:middle
Now let's look at the case
with multiple arguments.

803
00:32:12,476 --> 00:32:14,906 A:middle
Here's a new method,
performSegueWithIdentifier

804
00:32:14,906 --> 00:32:17,326 A:middle
that takes a segueID
and a sender.

805
00:32:17,846 --> 00:32:22,546 A:middle
And the first part of the
name goes outside the paren,

806
00:32:22,546 --> 00:32:24,396 A:middle
and then any labels for second

807
00:32:24,396 --> 00:32:26,776 A:middle
and further arguments go
inside the paren like this.

808
00:32:27,606 --> 00:32:30,786 A:middle
Note that the segueID is
again the variable name

809
00:32:30,786 --> 00:32:33,786 A:middle
for the local argument
that goes there,

810
00:32:33,786 --> 00:32:36,266 A:middle
and the sender goes right
there with the sender.

811
00:32:36,266 --> 00:32:38,996 A:middle
Since the label and the
argument name are the same,

812
00:32:39,376 --> 00:32:41,246 A:middle
Swift collapses them
for you into one.

813
00:32:41,246 --> 00:32:42,676 A:middle
It doesn't repeat
the word sender.

814
00:32:43,006 --> 00:32:46,226 A:middle
So, note that in this case,
the segueID is not part of -

815
00:32:46,336 --> 00:32:48,626 A:middle
and it's not a label,
it's not part of the name

816
00:32:48,626 --> 00:32:50,206 A:middle
of the method but the sender is.

817
00:32:50,656 --> 00:32:51,896 A:middle
So, really the method signature

818
00:32:51,896 --> 00:32:54,096 A:middle
for this is
performSegueWithIdentifier,

819
00:32:54,096 --> 00:32:56,046 A:middle
a string argument
and then sender:

820
00:32:56,046 --> 00:32:58,226 A:middle
which is an AnyObject argument.

821
00:32:58,716 --> 00:33:02,036 A:middle
An invocation of this is
pretty straightforward

822

823
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

824
00:32:58,716 --> 00:33:02,036 A:middle
An invocation of this is
pretty straightforward

825
00:33:02,036 --> 00:33:05,296 A:middle
as you can see here.

826
00:33:05,506 --> 00:33:09,046 A:middle
So, Cocoa APIs omit explicit
label on the first argument.

827
00:33:09,206 --> 00:33:12,966 A:middle
We saw that with the example
from the previous slide.

828
00:33:14,056 --> 00:33:14,996 A:middle
Here's another example.

829
00:33:14,996 --> 00:33:16,866 A:middle
For instance this is how
you call a delegate method,

830
00:33:16,866 --> 00:33:19,866 A:middle
splitView canCollapseSubview,
it works very well.

831
00:33:20,056 --> 00:33:23,026 A:middle
The first part of the
name includes the type

832
00:33:23,026 --> 00:33:25,666 A:middle
of the first argument, and then
the other labels describe the

833
00:33:25,666 --> 00:33:26,336 A:middle
other arguments.

834
00:33:26,626 --> 00:33:27,766 A:middle
Here's another example

835
00:33:27,766 --> 00:33:29,426 A:middle
with three arguments,
setResourceValue.

836
00:33:29,426 --> 00:33:31,336 A:middle
Value is the first
argument and forKey

837
00:33:31,336 --> 00:33:34,526 A:middle
and error are explicit labels
on the subsequent arguments.

838
00:33:34,976 --> 00:33:38,036 A:middle
This results in natural method
names that are easy to read,

839
00:33:38,286 --> 00:33:40,696 A:middle
easy to speak, and
easy to really craft

840
00:33:40,836 --> 00:33:43,946 A:middle
as you're developing APIs.

841
00:33:44,086 --> 00:33:46,156 A:middle
Now, you might be
thinking when to use -

842
00:33:46,236 --> 00:33:48,496 A:middle
when should you consider
labels on the first argument

843
00:33:48,496 --> 00:33:50,826 A:middle
because Swift will - does
allow you to put labels

844
00:33:50,826 --> 00:33:52,406 A:middle
on the first argument
in method names,

845
00:33:52,836 --> 00:33:54,336 A:middle
it's just not the
default behavior.

846
00:33:55,676 --> 00:33:59,086 A:middle
One case is where arguments
are equally weighed subparts

847
00:33:59,086 --> 00:33:59,556 A:middle
of a whole.

848
00:33:59,556 --> 00:34:02,636 A:middle
For instance let's say you
had a method called moveToX y.

849

850
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

851
00:33:59,556 --> 00:34:02,636 A:middle
For instance let's say you
had a method called moveToX y.

852
00:34:02,636 --> 00:34:04,526 A:middle
In Swift it would
come across like this,

853
00:34:04,526 --> 00:34:06,386 A:middle
and maybe this doesn't
look so good.

854
00:34:06,766 --> 00:34:09,255 A:middle
Why is X treated somewhat
differently than Y?

855
00:34:09,856 --> 00:34:11,746 A:middle
You might consider
method names like this.

856
00:34:12,676 --> 00:34:15,286 A:middle
It is actually the kind
of structure you will see

857
00:34:15,326 --> 00:34:18,456 A:middle
in free form functions in Swift
where you have the ability

858
00:34:18,456 --> 00:34:19,646 A:middle
to put labels on the argument.

859
00:34:20,146 --> 00:34:24,016 A:middle
But it's better in these
cases to sort of think

860
00:34:24,016 --> 00:34:26,696 A:middle
about if these are all equally
weighed subparts of a whole,

861
00:34:26,696 --> 00:34:28,906 A:middle
is there some combo type
that represents them?

862
00:34:29,216 --> 00:34:31,576 A:middle
For instance, in this case
a CGPoint or an NSPoint.

863
00:34:32,196 --> 00:34:34,376 A:middle
There are many other benefits
to using a combo type.

864
00:34:34,456 --> 00:34:36,626 A:middle
You're not schlepping all those
arguments all over the place.

865
00:34:36,976 --> 00:34:40,926 A:middle
Also, using a combined single
type is a more atomic approach

866
00:34:40,926 --> 00:34:41,656 A:middle
to APIs.

867
00:34:41,656 --> 00:34:43,886 A:middle
Rather than specifying
the arguments one by one,

868
00:34:43,886 --> 00:34:47,106 A:middle
you're specifying this one
whole thing to represent them.

869
00:34:47,485 --> 00:34:48,926 A:middle
And, you know, we
have many other types

870
00:34:48,926 --> 00:34:51,916 A:middle
to represent combined types,
NSDate, NSDateComponents,

871
00:34:52,896 --> 00:34:55,656 A:middle
UIColor, NSColor,
NSRange, CGRect,

872
00:34:55,656 --> 00:34:58,406 A:middle
we have a new SCNVector3
type to represent the points

873
00:34:58,406 --> 00:34:59,876 A:middle
in 3D space and so on.

874
00:34:59,876 --> 00:35:02,576 A:middle
So, you know, use such types
where appropriate and it -

875

876
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

877
00:34:59,876 --> 00:35:02,576 A:middle
So, you know, use such types
where appropriate and it -

878
00:35:02,766 --> 00:35:04,266 A:middle
and it gets rid of this problem.

879
00:35:05,386 --> 00:35:06,866 A:middle
Now, earlier I mentioned
init methods.

880
00:35:07,376 --> 00:35:11,456 A:middle
Init methods are an
exception to the label thing,

881
00:35:11,456 --> 00:35:15,766 A:middle
it's another case to the rule
with - about the first argument.

882
00:35:16,166 --> 00:35:18,806 A:middle
Here's initWithFrame
in Objective-C.

883
00:35:18,806 --> 00:35:22,036 A:middle
Here is how it comes
across in Swift.

884
00:35:22,376 --> 00:35:25,046 A:middle
Again, frame here is a label,

885
00:35:25,616 --> 00:35:30,066 A:middle
and the way you call this
is NSView - this is the sort

886
00:35:30,066 --> 00:35:32,416 A:middle
of the constructor
syntax, initializer syntax

887
00:35:32,766 --> 00:35:35,146 A:middle
with the frame argument
as a label in this case.

888
00:35:35,656 --> 00:35:37,376 A:middle
So, you've now at
least seen this in some

889
00:35:37,376 --> 00:35:39,516 A:middle
of the code you read
and in slides yesterday.

890
00:35:40,056 --> 00:35:43,966 A:middle
And there is the -
yeah, the frame label.

891
00:35:44,726 --> 00:35:46,286 A:middle
Now, convenience constructors -

892
00:35:46,286 --> 00:35:50,246 A:middle
as you know in Objective-C we've
had initializers, init methods.

893
00:35:50,576 --> 00:35:52,756 A:middle
We've also had what we call
these constructor methods

894
00:35:52,756 --> 00:35:55,416 A:middle
like this one in NSColor,
colorWithPatternImage.

895
00:35:56,116 --> 00:35:57,156 A:middle
And these were just another way

896
00:35:57,156 --> 00:35:59,846 A:middle
to say the init method except
you didn't have to call alloc,

897
00:35:59,846 --> 00:36:01,406 A:middle
hence the convenience aspect.

898

899
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

900
00:35:59,846 --> 00:36:01,406 A:middle
hence the convenience aspect.

901
00:36:02,416 --> 00:36:07,976 A:middle
Swift recognizes these patterns
and it - in fact, it reflects it

902
00:36:07,976 --> 00:36:10,016 A:middle
as an initializer
method just like this.

903
00:36:10,016 --> 00:36:12,416 A:middle
So, Swift recognizes that
this method is really init

904
00:36:12,906 --> 00:36:14,346 A:middle
with a patternImage argument.

905
00:36:14,686 --> 00:36:16,976 A:middle
So, this actually comes
across in Swift just

906
00:36:16,976 --> 00:36:19,116 A:middle
like initializer does
which is actually great

907
00:36:19,116 --> 00:36:20,916 A:middle
because it simplifies
that dichotomy

908
00:36:20,916 --> 00:36:23,186 A:middle
between convenience constructors
and regular init methods.

909
00:36:23,326 --> 00:36:27,566 A:middle
Now, let me talk about
one more thing about APIs

910
00:36:27,566 --> 00:36:29,586 A:middle
and that's enumerated types

911
00:36:29,586 --> 00:36:31,766 A:middle
because this one is
really, really pretty cool.

912
00:36:32,716 --> 00:36:35,346 A:middle
Here's a new enum
we've added recently,

913
00:36:35,346 --> 00:36:39,036 A:middle
a few releases ago
ByteCountFormatterCountStyle.

914
00:36:39,416 --> 00:36:42,176 A:middle
Note that it's got four values,
but it's sort of hard to figure

915
00:36:42,176 --> 00:36:44,196 A:middle
out what's different
about those four.

916
00:36:44,196 --> 00:36:46,546 A:middle
You know, they are these
long words which are nice

917
00:36:46,546 --> 00:36:49,016 A:middle
and descriptive, but it's sort
of like, what's going on there?

918
00:36:49,546 --> 00:36:50,826 A:middle
Here's what this
looks like in Swift -

919
00:36:50,956 --> 00:36:53,616 A:middle
it's really like a breath of
fresh air like wow, you know,

920
00:36:53,616 --> 00:36:56,336 A:middle
file, memory, decimal,
binary, that's really cool.

921
00:36:56,576 --> 00:36:58,246 A:middle
And the usage is
pretty neat too.

922
00:36:58,246 --> 00:36:59,126 A:middle
Here is that enum.

923
00:36:59,646 --> 00:37:02,536 A:middle
To call it you might
say NSByteCountFormatter

924

925
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

926
00:36:59,646 --> 00:37:02,536 A:middle
To call it you might
say NSByteCountFormatter

927
00:37:02,536 --> 00:37:04,196 A:middle
CountStyle.File.

928
00:37:04,546 --> 00:37:07,316 A:middle
However in context where the
argument's type is known,

929
00:37:07,406 --> 00:37:10,016 A:middle
you really just have to
use .File and, you know,

930
00:37:10,016 --> 00:37:12,036 A:middle
now I can fit that
bullet into one line,

931
00:37:12,066 --> 00:37:14,336 A:middle
and I'll improve our
slides moving forward,

932
00:37:14,386 --> 00:37:14,936 A:middle
that's pretty cool.

933
00:37:16,226 --> 00:37:17,146 A:middle
So-- thanks.

934
00:37:19,516 --> 00:37:21,546 A:middle
[ Applause ]

935
00:37:22,046 --> 00:37:23,386 A:middle
So, let's talk about
Gesture Recognizers,

936
00:37:23,386 --> 00:37:24,916 A:middle
which is another
new API we've added.

937
00:37:24,916 --> 00:37:28,956 A:middle
And again if you use Gesture
Recognizers on iOS this is -

938
00:37:28,956 --> 00:37:30,596 A:middle
this will feel familiar to you.

939
00:37:31,076 --> 00:37:34,266 A:middle
Gesture Recognizers allow you to
eliminate large chunks of code

940
00:37:34,686 --> 00:37:37,456 A:middle
by doing the mouse
tracking for you

941
00:37:37,456 --> 00:37:39,336 A:middle
and just generating
an action at the end

942
00:37:39,336 --> 00:37:40,446 A:middle
for the appropriate gesture.

943
00:37:40,836 --> 00:37:44,286 A:middle
It also helps disintegrate
between various types of clicks

944
00:37:44,286 --> 00:37:46,246 A:middle
and drags which might
sometimes be hard to figure out.

945
00:37:46,286 --> 00:37:48,016 A:middle
There's a new class
GestureRecognizer;

946
00:37:48,696 --> 00:37:49,836 A:middle
it's got five subclasses.

947
00:37:49,836 --> 00:37:53,036 A:middle
And you can also create
your own subclasses

948
00:37:53,036 --> 00:37:56,276 A:middle
because we provide API
that's specifically designed

949
00:37:56,386 --> 00:37:58,386 A:middle
for subclassing an
NSGestureRecognizer.

950
00:37:59,346 --> 00:38:01,246 A:middle
There's going to be more
about gesture recognizers

951

952
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

953
00:37:59,346 --> 00:38:01,246 A:middle
There's going to be more
about gesture recognizers

954
00:38:01,246 --> 00:38:03,016 A:middle
at the Storyboards
and Controllers talk,

955
00:38:03,016 --> 00:38:04,756 A:middle
which is this afternoon at 4:30.

956
00:38:04,756 --> 00:38:09,126 A:middle
Now, if you must deal with
events yourself or deal

957
00:38:09,126 --> 00:38:11,006 A:middle
with other kinds of events
other than mouse events,

958
00:38:11,376 --> 00:38:13,376 A:middle
there is a block-based
events tracking API.

959
00:38:13,876 --> 00:38:17,436 A:middle
This also helps eliminate a lot
of code by taking over that loop

960
00:38:17,826 --> 00:38:20,006 A:middle
that you might often
have to write.

961
00:38:20,386 --> 00:38:23,366 A:middle
This - whoops, let me show
you the thing, there you go.

962
00:38:23,726 --> 00:38:26,656 A:middle
So, this allows you to pass the
mask of events you're interested

963
00:38:26,656 --> 00:38:28,796 A:middle
in a timeout and there's
a block that's called

964
00:38:29,126 --> 00:38:33,036 A:middle
and the tracking will continue
until you tell it to stop

965
00:38:33,266 --> 00:38:35,516 A:middle
or until timeout,
timeout is achieved.

966
00:38:35,516 --> 00:38:36,926 A:middle
Thanks.

967
00:38:37,516 --> 00:38:43,586 A:middle
[ Applause ]

968
00:38:44,086 --> 00:38:46,196 A:middle
We have some new
Accessibility APIs.

969
00:38:46,196 --> 00:38:47,446 A:middle
The new APIs are simpler.

970
00:38:48,576 --> 00:38:50,686 A:middle
They are expressed - the
accessibility values,

971
00:38:50,686 --> 00:38:52,996 A:middle
the accessibility values
for various UI elements

972
00:38:52,996 --> 00:38:57,226 A:middle
and UI properties are expressed
directly as properties.

973
00:38:58,356 --> 00:38:59,516 A:middle
There's no need to subclass.

974

975
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

976
00:39:00,286 --> 00:39:03,386 A:middle
Good, somebody's
used the old APIs.

977
00:39:03,566 --> 00:39:06,196 A:middle
And there are better
compile time warnings as well

978
00:39:06,196 --> 00:39:08,636 A:middle
because there are now the actual
properties being used here.

979
00:39:08,636 --> 00:39:09,946 A:middle
Let me give you an example.

980
00:39:10,276 --> 00:39:12,716 A:middle
Before you've had this
accessibility attribute value

981
00:39:12,716 --> 00:39:14,886 A:middle
method which you had to
overwrite, and you had a series

982
00:39:14,886 --> 00:39:16,186 A:middle
of if statements
to deal with it.

983
00:39:16,446 --> 00:39:17,726 A:middle
Now you can either just go ahead

984
00:39:17,726 --> 00:39:19,806 A:middle
and overwrite the
accessibilityLabel method,

985
00:39:20,196 --> 00:39:21,006 A:middle
fairly straightforward,

986
00:39:21,006 --> 00:39:22,826 A:middle
or you can actually just
set the property as well

987
00:39:22,826 --> 00:39:24,326 A:middle
if you're not subclassing the,

988
00:39:24,456 --> 00:39:26,086 A:middle
subclassing that class
for other reasons.

989
00:39:26,606 --> 00:39:28,886 A:middle
So, you know, much cleaner
- a much cleaner approach.

990
00:39:29,286 --> 00:39:32,746 A:middle
Let me talk a bit about
power, and here I'm talking

991
00:39:32,746 --> 00:39:35,366 A:middle
about power, the kind of power
that comes out of a wall socket.

992
00:39:36,136 --> 00:39:38,076 A:middle
But even that kind of
- even with that kind

993
00:39:38,076 --> 00:39:39,806 A:middle
of power comes great
responsibility,

994
00:39:39,936 --> 00:39:41,786 A:middle
because we need to
use it wisely.

995
00:39:42,396 --> 00:39:46,096 A:middle
A new API we've added across the
system in a number of classes

996
00:39:46,096 --> 00:39:48,406 A:middle
in Cocoa is this concept
of quality of service.

997
00:39:49,526 --> 00:39:50,716 A:middle
It's NSOperation,

998
00:39:50,716 --> 00:39:52,766 A:middle
NSOperationQueue,
NSThread and so on.

999
00:39:53,896 --> 00:39:56,286 A:middle
This allows indicating
the nature and importance

1000
00:39:56,286 --> 00:40:00,536 A:middle
of the work you're doing and
lets system manage resources

1001

1002
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1003
00:39:56,286 --> 00:40:00,536 A:middle
of the work you're doing and
lets system manage resources

1004
00:40:01,206 --> 00:40:05,976 A:middle
between your process and even
across processes where possible.

1005
00:40:06,046 --> 00:40:07,276 A:middle
So let me talk about
what the values

1006
00:40:07,276 --> 00:40:10,136 A:middle
of this QualityOfService
property are.

1007
00:40:10,136 --> 00:40:13,236 A:middle
I'll just go through
use cases for it.

1008
00:40:13,716 --> 00:40:16,636 A:middle
The first one, UserInteractive,
is an interactive session

1009
00:40:16,636 --> 00:40:19,336 A:middle
with the user such
as a drawing program

1010
00:40:19,336 --> 00:40:21,606 A:middle
or maybe scrolling
an email message.

1011
00:40:21,606 --> 00:40:25,256 A:middle
You really want 60 frames per
second there for the user,

1012
00:40:25,256 --> 00:40:27,116 A:middle
and that represents
that kind of work.

1013
00:40:27,606 --> 00:40:30,276 A:middle
The next layer here,
UserInitiated is

1014
00:40:30,276 --> 00:40:32,956 A:middle
like when the user clicks on
email message, they want it

1015
00:40:32,956 --> 00:40:34,016 A:middle
to appear there very quickly,

1016
00:40:34,016 --> 00:40:36,986 A:middle
but maybe you don't have the
same 60 fps continuous behavior,

1017
00:40:37,206 --> 00:40:39,816 A:middle
although you still want to give,
you know, whatever is possible

1018
00:40:39,816 --> 00:40:41,806 A:middle
to get that to happen
as quickly as possible.

1019
00:40:42,306 --> 00:40:44,656 A:middle
Utility QualityOfService
is something

1020
00:40:44,656 --> 00:40:45,886 A:middle
like periodic mail fetch.

1021
00:40:45,886 --> 00:40:48,456 A:middle
The user expects it to happen,
expects it to happen fast

1022
00:40:48,456 --> 00:40:50,676 A:middle
on a regular basis but,
you know, it can be off

1023
00:40:50,676 --> 00:40:53,046 A:middle
by a few seconds if the system
is busy with other things.

1024
00:40:53,606 --> 00:40:55,306 A:middle
We have a Background
QualityOfService,

1025
00:40:55,306 --> 00:40:57,426 A:middle
which is like indexing,
which needs to happen

1026
00:40:57,426 --> 00:40:59,346 A:middle
but could be delayed if
there are more important

1027
00:40:59,346 --> 00:41:00,066 A:middle
things happening.

1028

1029
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1030
00:40:59,346 --> 00:41:00,066 A:middle
things happening.

1031
00:41:00,306 --> 00:41:03,626 A:middle
And then the Default which
allows the QualityOfService

1032
00:41:03,626 --> 00:41:07,186 A:middle
to be inferred from other
operations that are going on.

1033
00:41:07,226 --> 00:41:09,066 A:middle
Sometimes you might have
a dependent operation

1034
00:41:09,066 --> 00:41:12,916 A:middle
that will dictate what the
resulting QualityOfService

1035
00:41:12,986 --> 00:41:13,496 A:middle
here is.

1036
00:41:14,796 --> 00:41:16,036 A:middle
We also have a new API,

1037
00:41:16,206 --> 00:41:18,556 A:middle
new class called
NSBackgroundActvityScheduler.

1038
00:41:18,556 --> 00:41:22,346 A:middle
This is basically a Cocoa-level
interface to XPC Activity APIs.

1039
00:41:23,226 --> 00:41:26,116 A:middle
This allows you to schedule
maintenance or background kinds

1040
00:41:26,116 --> 00:41:28,996 A:middle
of tasks, for instance,
periodic fetching of mail

1041
00:41:28,996 --> 00:41:31,026 A:middle
or maybe indexing, and so on,

1042
00:41:31,026 --> 00:41:33,496 A:middle
and you can provide
again quality of service

1043
00:41:33,496 --> 00:41:35,276 A:middle
that you want on this operation.

1044
00:41:35,526 --> 00:41:37,526 A:middle
We have a number of
talks about power.

1045
00:41:37,956 --> 00:41:39,316 A:middle
Here's pointers to two of them.

1046
00:41:39,506 --> 00:41:41,686 A:middle
One is tomorrow morning,
"Writing Energy Efficient Code,

1047
00:41:41,686 --> 00:41:44,526 A:middle
Part 1" and also Part 2
as well that you can go

1048
00:41:44,526 --> 00:41:47,126 A:middle
through after this one if you
want, and "Power, Performance

1049
00:41:47,126 --> 00:41:49,306 A:middle
and Diagnostics: What's
New in GCD and XPC,"

1050
00:41:49,396 --> 00:41:51,136 A:middle
and that's Thursday
afternoon at 2.

1051
00:41:51,136 --> 00:41:56,366 A:middle
Now, let me talk to you
a bit about NSStrings.

1052
00:41:57,646 --> 00:42:00,446 A:middle
We have a new API,
NSString Encoding Detector.

1053

1054
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1055
00:41:57,646 --> 00:42:00,446 A:middle
We have a new API,
NSString Encoding Detector.

1056
00:42:01,936 --> 00:42:06,556 A:middle
This is to allow detecting
encodings of random bags

1057
00:42:06,556 --> 00:42:09,996 A:middle
of bytes which come
from who knows where,

1058
00:42:09,996 --> 00:42:12,226 A:middle
who knows where they've
been, but you need to show it

1059
00:42:12,226 --> 00:42:15,496 A:middle
to the user and, you know,
typically we - the encodings

1060
00:42:15,496 --> 00:42:17,186 A:middle
if there are some bad
characters in there

1061
00:42:17,186 --> 00:42:19,776 A:middle
or either badly generated
or corrupted along the way,

1062
00:42:19,776 --> 00:42:21,936 A:middle
it becomes pretty hard to
make heads or tails out of it,

1063
00:42:21,936 --> 00:42:23,626 A:middle
and that's what this
API tries to do.

1064
00:42:24,116 --> 00:42:25,346 A:middle
We have a number of options.

1065
00:42:26,206 --> 00:42:29,326 A:middle
Among the options are
the ability to specify

1066
00:42:29,326 --> 00:42:32,256 A:middle
which encodings to
include, consider for sure,

1067
00:42:32,256 --> 00:42:33,866 A:middle
or which encodings to exclude.

1068
00:42:33,866 --> 00:42:37,236 A:middle
So we can give hints to make
the operation more focused.

1069
00:42:37,666 --> 00:42:41,026 A:middle
You can tell us whether you
want lossy conversion or not.

1070
00:42:41,266 --> 00:42:45,256 A:middle
If encoding conversion is
not possible without loss,

1071
00:42:45,406 --> 00:42:48,066 A:middle
we'll just do it anyway and
maybe some characters are lost.

1072
00:42:48,466 --> 00:42:50,836 A:middle
And finally, or not finally,
this is just another option,

1073
00:42:50,836 --> 00:42:52,126 A:middle
you can provide a language hint

1074
00:42:52,126 --> 00:42:55,556 A:middle
which allows the encoding
conversion to again focus more

1075
00:42:55,556 --> 00:42:57,956 A:middle
if it knows what language
the encoding it was intended

1076
00:42:58,016 --> 00:42:58,426 A:middle
to be in.

1077
00:42:58,976 --> 00:43:03,636 A:middle
We have two small new
APIs, containsString

1078

1079
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1080
00:42:58,976 --> 00:43:03,636 A:middle
We have two small new
APIs, containsString

1081
00:43:03,636 --> 00:43:05,546 A:middle
and localizedCaseInsensitive
ContainsString.

1082
00:43:05,546 --> 00:43:07,776 A:middle
You might be thinking, you mean
though these weren't there?

1083
00:43:08,196 --> 00:43:10,276 A:middle
Well, they were, you know,
you could use range of string,

1084
00:43:10,626 --> 00:43:12,896 A:middle
but after some years
we've decided, you know,

1085
00:43:12,896 --> 00:43:14,976 A:middle
even though these
are just one liners--

1086
00:43:15,516 --> 00:43:19,826 A:middle
[ Applause ]

1087
00:43:20,326 --> 00:43:21,046 A:middle
Yeah, even-- thank you.

1088
00:43:21,046 --> 00:43:23,306 A:middle
Even though these are
one liners and, you know,

1089
00:43:23,306 --> 00:43:25,576 A:middle
that sort of offends
the API sensibility

1090
00:43:25,576 --> 00:43:28,696 A:middle
of why create a one line
convenience, they're really good

1091
00:43:28,696 --> 00:43:30,536 A:middle
for discoverability, you know,

1092
00:43:30,536 --> 00:43:32,226 A:middle
containsString is a
little more discoverable

1093
00:43:32,226 --> 00:43:33,096 A:middle
than a range of string.

1094
00:43:33,096 --> 00:43:35,366 A:middle
So, here we have them.

1095
00:43:35,366 --> 00:43:37,276 A:middle
OK, the one other thing
I want to talk to you

1096
00:43:37,276 --> 00:43:39,636 A:middle
about since this might
impact your apps is Tagged

1097
00:43:39,636 --> 00:43:40,466 A:middle
Pointer Strings.

1098
00:43:40,886 --> 00:43:44,036 A:middle
What we do here is we take
a whole NSString object

1099
00:43:44,036 --> 00:43:46,946 A:middle
and we stuff it into
the base pointer.

1100
00:43:46,946 --> 00:43:49,066 A:middle
Now, this is something we're
already doing with some objects

1101
00:43:49,066 --> 00:43:51,256 A:middle
like NSNumbers and NSDates,
and now we're doing them

1102
00:43:51,256 --> 00:43:52,386 A:middle
with NSStrings as well.

1103
00:43:52,386 --> 00:43:55,386 A:middle
Let me give you a visual
guide of how this works.

1104
00:43:55,706 --> 00:43:57,786 A:middle
Here you're creating
a UTF8String.

1105
00:43:59,296 --> 00:44:02,426 A:middle
Typically you have your object
pointer, the base pointer

1106

1107
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1108
00:43:59,296 --> 00:44:02,426 A:middle
Typically you have your object
pointer, the base pointer

1109
00:44:02,426 --> 00:44:06,016 A:middle
which is the pointer, and then
that in turn points to an object

1110
00:44:06,016 --> 00:44:09,076 A:middle
which contains the isa plus
some bookkeeping information

1111
00:44:09,076 --> 00:44:11,076 A:middle
and then the bytes
of the string.

1112
00:44:11,566 --> 00:44:14,646 A:middle
So, we just take all that and
we shove it just like that

1113
00:44:14,646 --> 00:44:15,586 A:middle
into the base pointer.

1114
00:44:15,586 --> 00:44:16,586 A:middle
I mean, you saw how that works.

1115
00:44:17,096 --> 00:44:19,136 A:middle
And now we don't need -
it's not a pointer anymore,

1116
00:44:19,136 --> 00:44:20,206 A:middle
so we can get rid
of the pointer.

1117
00:44:20,206 --> 00:44:23,936 A:middle
So, now in that 64 bits, we
have the whole string with -

1118
00:44:23,936 --> 00:44:25,966 A:middle
along with some bit
keeping information.

1119
00:44:26,126 --> 00:44:29,156 A:middle
Now, it turns out we can do
this for about 25 to 40 percent

1120
00:44:29,156 --> 00:44:31,016 A:middle
of your strings in
some applications.

1121
00:44:31,806 --> 00:44:33,146 A:middle
There are some things
to watch for.

1122
00:44:33,856 --> 00:44:34,776 A:middle
There is no isa pointer.

1123
00:44:35,196 --> 00:44:37,026 A:middle
Now, you weren't supposed to
be accessing the isa pointer,

1124
00:44:37,026 --> 00:44:39,516 A:middle
but if you were, you will
really crash for now.

1125
00:44:41,156 --> 00:44:43,006 A:middle
There are different
performance characteristics:

1126
00:44:43,006 --> 00:44:46,326 A:middle
Some operations get much faster
and some get a little slower.

1127
00:44:46,846 --> 00:44:49,886 A:middle
And there are better
out-of-bounds checking.

1128
00:44:49,886 --> 00:44:52,116 A:middle
We've made sure that
these can do much better

1129
00:44:52,116 --> 00:44:53,106 A:middle
for out-of-bounds checking.

1130
00:44:53,106 --> 00:44:54,686 A:middle
We try to do a bit of
out-of-bounds checking,

1131
00:44:54,686 --> 00:44:55,986 A:middle
but there are some
cases where we miss

1132
00:44:56,046 --> 00:44:57,396 A:middle
and this actually
does a better job.

1133
00:44:57,836 --> 00:45:00,166 A:middle
Since all of these three
are potential compatibility

1134

1135
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1136
00:44:57,836 --> 00:45:00,166 A:middle
Since all of these three
are potential compatibility

1137
00:45:00,166 --> 00:45:03,676 A:middle
concerns, we actually make it
so that these changes enabled

1138
00:45:04,036 --> 00:45:07,796 A:middle
for 10.10 linked apps or
later but not earlier apps.

1139
00:45:07,916 --> 00:45:11,606 A:middle
And so of course only for 64-bit
apps because trying to shove all

1140
00:45:11,606 --> 00:45:13,526 A:middle
of them to a 30-bit
pointer is not fun.

1141
00:45:14,046 --> 00:45:16,826 A:middle
Let me talk a bit
about formatters.

1142
00:45:16,826 --> 00:45:19,206 A:middle
And here we have a bunch

1143
00:45:19,206 --> 00:45:21,466 A:middle
of new formatter classes,
NSFormatter classes.

1144
00:45:22,376 --> 00:45:26,026 A:middle
The first three are fairly
straightforward, MassFormatter,

1145
00:45:26,756 --> 00:45:28,956 A:middle
EnergyFormatter and
LengthFormatter.

1146
00:45:30,956 --> 00:45:33,026 A:middle
We also have a
DateIntervalFormatter

1147
00:45:33,026 --> 00:45:35,796 A:middle
that will - should take two
dates and show you this -

1148
00:45:36,191 --> 00:45:38,191 A:middle
[ Applause ]

1149
00:45:38,366 --> 00:45:38,836 A:middle
Thank you.

1150
00:45:39,806 --> 00:45:43,156 A:middle
And a DateComponentsFormatter,
which will show you a duration

1151
00:45:43,406 --> 00:45:46,756 A:middle
such as 3 hours, 25 minutes.

1152
00:45:46,756 --> 00:45:49,356 A:middle
And these have some various
customization options.

1153
00:45:49,356 --> 00:45:51,996 A:middle
For instance the last one
could be customized to say,

1154
00:45:51,996 --> 00:45:53,976 A:middle
you know about 10
minutes remaining.

1155
00:45:54,516 --> 00:45:58,276 A:middle
[ Applause ]

1156
00:45:58,776 --> 00:46:01,506 A:middle
And now note that these
are for formatting only,

1157

1158
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1159
00:45:58,776 --> 00:46:01,506 A:middle
And now note that these
are for formatting only,

1160
00:46:01,626 --> 00:46:07,916 A:middle
not for parsing, so
it's for output of data.

1161
00:46:07,916 --> 00:46:09,726 A:middle
We have a formatting
context property

1162
00:46:09,726 --> 00:46:14,286 A:middle
on all our NSFormatters, and
here is what it looks like,

1163
00:46:14,406 --> 00:46:16,836 A:middle
and I'll just explain to
you what some of these are.

1164
00:46:17,356 --> 00:46:19,896 A:middle
Well, what formatting context
does is it tells the formatter

1165
00:46:20,096 --> 00:46:22,596 A:middle
where the result of the
formatting is intended

1166
00:46:22,646 --> 00:46:24,266 A:middle
to be used, and that allows it

1167
00:46:24,266 --> 00:46:26,816 A:middle
to give a different
result where possible.

1168
00:46:27,576 --> 00:46:32,636 A:middle
For instance, if you're
formatting dates in French,

1169
00:46:33,136 --> 00:46:34,996 A:middle
BeginningOfSentence
would look like this,

1170
00:46:35,046 --> 00:46:37,936 A:middle
Juin with a capital J, while
the MiddleOfSentence would use a

1171
00:46:37,936 --> 00:46:38,766 A:middle
little j.

1172
00:46:39,176 --> 00:46:41,006 A:middle
Now, this dynamic here,
one is pretty cool

1173
00:46:41,046 --> 00:46:44,156 A:middle
because what it does
is depending

1174
00:46:44,156 --> 00:46:48,066 A:middle
on whether the result
is used in the context

1175
00:46:48,066 --> 00:46:51,156 A:middle
of NSString formatting,
depending on whether it's used

1176
00:46:51,156 --> 00:46:53,936 A:middle
at the BeginningOfSentence,
MiddleOfSentence or Standalone,

1177
00:46:53,936 --> 00:46:55,736 A:middle
it will use one of the
other three options

1178
00:46:55,786 --> 00:46:56,456 A:middle
to do the right thing.

1179
00:46:56,716 --> 00:46:58,716 A:middle
So, it's - that one is
usually the one you want

1180
00:46:58,716 --> 00:47:03,416 A:middle
to use unless you definitely
know where the result is going.

1181

1182
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1183
00:46:58,716 --> 00:47:03,416 A:middle
to use unless you definitely
know where the result is going.

1184
00:47:03,516 --> 00:47:05,966 A:middle
There was internationalization
talk this morning.

1185
00:47:05,966 --> 00:47:09,036 A:middle
If you missed it, you can
catch it on video of course.

1186
00:47:10,006 --> 00:47:13,276 A:middle
Let me talk a bit about
iCloud, and you heard

1187
00:47:13,276 --> 00:47:14,996 A:middle
about iCloud yesterday,
of course.

1188
00:47:15,206 --> 00:47:17,576 A:middle
We have new APIs,
the CloudKit APIs.

1189
00:47:17,576 --> 00:47:19,776 A:middle
This is a new framework for
managing structured data

1190
00:47:19,776 --> 00:47:23,526 A:middle
on iCloud and for sharing such
data between users as well.

1191
00:47:24,146 --> 00:47:27,096 A:middle
And CloudKit is also, as
an implementation detail,

1192
00:47:27,096 --> 00:47:30,456 A:middle
the back-end for iCloud
document storage as well.

1193
00:47:30,456 --> 00:47:35,346 A:middle
I'm not going to talk about
CloudKit anymore other

1194
00:47:35,346 --> 00:47:37,506 A:middle
than just telling you there are
two great sessions you can go

1195
00:47:37,506 --> 00:47:39,176 A:middle
to this afternoon and
Thursday afternoon.

1196
00:47:39,176 --> 00:47:42,726 A:middle
Now, iCloud document
storage, as you know,

1197
00:47:42,726 --> 00:47:45,106 A:middle
iCloud document storage is
something we've had for a while,

1198
00:47:45,106 --> 00:47:48,446 A:middle
and NSDocument and UIDocument
provide support for it.

1199
00:47:50,216 --> 00:47:52,656 A:middle
So, it has a new back-end
in the form of CloudKit,

1200
00:47:53,776 --> 00:47:54,906 A:middle
and we also have another feature

1201
00:47:54,906 --> 00:47:57,526 A:middle
where document versions are
now available on iCloud.

1202
00:47:59,116 --> 00:48:01,736 A:middle
In addition, you've heard
about iCloud Drive yesterday

1203

1204
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1205
00:47:59,116 --> 00:48:01,736 A:middle
In addition, you've heard
about iCloud Drive yesterday

1206
00:48:01,736 --> 00:48:04,956 A:middle
where all applications can
now read and write files

1207
00:48:04,956 --> 00:48:10,936 A:middle
from iCloud, thanks to
the iCloud Drive as well.

1208
00:48:11,126 --> 00:48:16,346 A:middle
Now, in moving to the new
back-end and taking advantages

1209
00:48:16,346 --> 00:48:19,826 A:middle
of some of these other changes,
some of the way we worked

1210
00:48:19,826 --> 00:48:21,596 A:middle
with iCloud documents
has changed.

1211
00:48:21,896 --> 00:48:24,976 A:middle
Now, of course if you're using
NSDocument and UIDocument,

1212
00:48:26,016 --> 00:48:28,816 A:middle
perhaps you don't have to worry
about these, perhaps you do.

1213
00:48:29,026 --> 00:48:32,116 A:middle
Handling of non-downloaded
files has changed.

1214
00:48:32,116 --> 00:48:34,346 A:middle
Previously, there would be
a file with the same name

1215
00:48:34,346 --> 00:48:37,606 A:middle
as the non-downloaded document,
and we just fill in over time.

1216
00:48:37,986 --> 00:48:39,316 A:middle
Now, such files are tracked

1217
00:48:39,316 --> 00:48:41,166 A:middle
with invisible files
with different names.

1218
00:48:41,376 --> 00:48:44,406 A:middle
If you're using APIs such as
MetadataQuery, MetadataItem,

1219
00:48:44,406 --> 00:48:46,466 A:middle
FileCoordinator, you're
probably in good shape

1220
00:48:46,466 --> 00:48:47,896 A:middle
and you probably don't
have to worry about this.

1221
00:48:48,346 --> 00:48:50,756 A:middle
Well, if you're enumerating
the iCloud container yourself,

1222
00:48:51,176 --> 00:48:54,946 A:middle
you need to ignore hidden
or unrecognized files,

1223
00:48:55,096 --> 00:48:57,846 A:middle
but better yet, just switch
to one of these other APIs

1224
00:48:57,846 --> 00:48:59,446 A:middle
if you can, and the
higher level the better.

1225
00:48:59,836 --> 00:49:04,636 A:middle
We also have some APIs on NSURL
that allow you to get metadata

1226

1227
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1228
00:48:59,836 --> 00:49:04,636 A:middle
We also have some APIs on NSURL
that allow you to get metadata

1229
00:49:04,636 --> 00:49:07,826 A:middle
for possibly undownloaded
elements,

1230
00:49:07,826 --> 00:49:08,306 A:middle
and this is

1231
00:49:08,306 --> 00:49:10,276 A:middle
like
getPromisedItemResourceValue

1232
00:49:10,276 --> 00:49:13,096 A:middle
forKey error and there are few
other methods like this as well.

1233
00:49:13,526 --> 00:49:19,526 A:middle
Just a quick update on
Core Data: We have a number

1234
00:49:19,526 --> 00:49:20,826 A:middle
of new APIs in Core Data.

1235
00:49:21,346 --> 00:49:24,606 A:middle
NSBatchUpdateRequest allows
you to do batch updates,

1236
00:49:25,976 --> 00:49:28,196 A:middle
and that's actually
pretty cool on, you know,

1237
00:49:28,196 --> 00:49:30,376 A:middle
small memory situations as well
if you're going to do a lot

1238
00:49:30,376 --> 00:49:31,426 A:middle
of updates efficiently.

1239
00:49:32,096 --> 00:49:34,616 A:middle
NSAsynchronousFetchRequest
is a new class

1240
00:49:34,616 --> 00:49:36,066 A:middle
for doing asynchronous fetching.

1241
00:49:36,446 --> 00:49:38,856 A:middle
It provides NSProgress
support, which allows you

1242
00:49:38,856 --> 00:49:41,446 A:middle
to monitor progress and also

1243
00:49:41,446 --> 00:49:43,316 A:middle
in fact cancel the
operation as well.

1244
00:49:44,066 --> 00:49:45,666 A:middle
And finally, of course,
it's worth mentioning

1245
00:49:45,666 --> 00:49:51,486 A:middle
that the new back-end for iCloud
is also underneath Core Data

1246
00:49:51,486 --> 00:49:51,936 A:middle
as well.

1247
00:49:52,256 --> 00:49:53,696 A:middle
So, there's infrastructure
improvements.

1248
00:49:54,476 --> 00:49:55,706 A:middle
We do have a related session,

1249
00:49:55,706 --> 00:49:57,496 A:middle
"What's New in Core
Data," Thursday morning.

1250
00:49:59,276 --> 00:50:01,086 A:middle
Auto Layout, we have some -

1251

1252
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1253
00:49:59,276 --> 00:50:01,086 A:middle
Auto Layout, we have some -

1254
00:50:01,256 --> 00:50:03,556 A:middle
we've been improving
Auto Layout all along.

1255
00:50:03,556 --> 00:50:07,586 A:middle
Auto Layout remains a
very important facility

1256
00:50:07,586 --> 00:50:11,906 A:middle
in our frameworks
both on iOS and OS X.

1257
00:50:12,076 --> 00:50:13,986 A:middle
We have some new APIs
here, I'm just going

1258
00:50:14,276 --> 00:50:15,876 A:middle
to talk about a few of them.

1259
00:50:16,006 --> 00:50:18,726 A:middle
These allow you to activate
NSLayoutConstraints directly.

1260
00:50:18,726 --> 00:50:21,236 A:middle
As you might know, a
LayoutConstraint has pointer

1261
00:50:21,236 --> 00:50:25,506 A:middle
to the views that it's
defining a relationship for.

1262
00:50:25,746 --> 00:50:28,916 A:middle
So, rather than talking to
the views, you can now talk

1263
00:50:28,916 --> 00:50:31,176 A:middle
to the LayoutConstraints
directly to activate them,

1264
00:50:31,176 --> 00:50:34,136 A:middle
deactivate them, which
is a much cleaner model.

1265
00:50:34,396 --> 00:50:36,686 A:middle
So, what this means is
these three methods here -

1266
00:50:36,686 --> 00:50:40,366 A:middle
the two methods plus the
property replace these four

1267
00:50:40,366 --> 00:50:41,676 A:middle
existing methods effectively.

1268
00:50:43,856 --> 00:50:46,476 A:middle
NSCell is on its way
to formal deprecation,

1269
00:50:46,476 --> 00:50:48,506 A:middle
I think we've been saying
this for a few years now.

1270
00:50:48,986 --> 00:50:52,206 A:middle
I mean it still is.

1271
00:50:53,716 --> 00:50:55,916 A:middle
So, some NSCell APIs
have been promoted

1272
00:50:55,916 --> 00:50:57,846 A:middle
to their corresponding
control subclasses,

1273
00:50:58,296 --> 00:51:01,146 A:middle
and so you should use the
controls where possible,

1274

1275
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1276
00:50:58,296 --> 00:51:01,146 A:middle
and so you should use the
controls where possible,

1277
00:51:01,356 --> 00:51:03,476 A:middle
you know, don't use
cells controls now,

1278
00:51:03,536 --> 00:51:07,336 A:middle
have the APIs hopefully
and you can refer to them.

1279
00:51:07,466 --> 00:51:09,456 A:middle
NSCell-based TableView
has been deprecated,

1280
00:51:09,456 --> 00:51:12,126 A:middle
use the view-based TableView
that also allows you to get some

1281
00:51:12,126 --> 00:51:14,156 A:middle
of our new - the new features
we've been showing you

1282
00:51:14,156 --> 00:51:16,216 A:middle
with new look and so
on much more easily.

1283
00:51:17,006 --> 00:51:19,386 A:middle
NSMatrix-based NSBrowser
is deprecated.

1284
00:51:19,386 --> 00:51:21,046 A:middle
Use the item-based
NSBrowser APIs.

1285
00:51:21,046 --> 00:51:25,646 A:middle
And NSMatrix is also on its way
out since it's so NSCell-based.

1286
00:51:26,886 --> 00:51:30,246 A:middle
One of the most common uses
for NSMatrixes was of course

1287
00:51:30,246 --> 00:51:32,296 A:middle
that radio button behavior
where you click one

1288
00:51:32,296 --> 00:51:33,366 A:middle
and all the others turn off.

1289
00:51:33,706 --> 00:51:35,146 A:middle
Now, sibling radio buttons

1290
00:51:35,146 --> 00:51:38,106 A:middle
with the same action will
now operate as a group.

1291
00:51:38,106 --> 00:51:40,126 A:middle
So, this is a way to get
NSMatrix functionality

1292
00:51:40,126 --> 00:51:41,406 A:middle
without using NSMatrix.

1293
00:51:41,856 --> 00:51:47,726 A:middle
OK, now I'm going to go quickly
through some other new stuff.

1294
00:51:48,036 --> 00:51:50,886 A:middle
You can slow this down when
you're watching the video,

1295
00:51:50,886 --> 00:51:52,216 A:middle
if you want to catch
more about it.

1296
00:51:52,716 --> 00:51:55,186 A:middle
So, NSTableView and
OutlineViews,

1297
00:51:55,186 --> 00:51:56,846 A:middle
you can create these
statically now.

1298
00:51:56,846 --> 00:51:59,176 A:middle
If you just have a fixed
TableView with like five rows

1299
00:51:59,176 --> 00:52:01,216 A:middle
and you don't want to do
anything else, you don't want

1300

1301
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1302
00:51:59,176 --> 00:52:01,216 A:middle
and you don't want to do
anything else, you don't want

1303
00:52:01,216 --> 00:52:02,896 A:middle
to provide data source,
you can do that now.

1304
00:52:02,896 --> 00:52:04,556 A:middle
There's a way to do it.

1305
00:52:04,556 --> 00:52:07,906 A:middle
NSImage allows you to specify
fancy resizing behaviors.

1306
00:52:07,906 --> 00:52:09,486 A:middle
You can specify capInsets.

1307
00:52:09,486 --> 00:52:11,926 A:middle
You can also specify
resizingMode,

1308
00:52:11,926 --> 00:52:14,056 A:middle
and you can also use
such NSImages as masks

1309
00:52:14,376 --> 00:52:18,256 A:middle
for a digital effect viewpoint,
so that's pretty good.

1310
00:52:18,256 --> 00:52:21,956 A:middle
NSBitmapImageReps allow
you to specify in DNS

1311
00:52:22,026 --> 00:52:25,516 A:middle
and other bitmap format so you
can actually support BGRA data

1312
00:52:25,886 --> 00:52:29,286 A:middle
for instance, if you're
into that sort of thing.

1313
00:52:29,856 --> 00:52:35,406 A:middle
And asset catalogs in Xcode
now support more formats

1314
00:52:35,406 --> 00:52:39,886 A:middle
like JPEG images, and PDFs, and
also allow you to do slicing

1315
00:52:39,886 --> 00:52:43,266 A:middle
and then use of course the
NSImage capInsets API to expose

1316
00:52:43,266 --> 00:52:44,376 A:middle
that slice information.

1317
00:52:44,706 --> 00:52:48,386 A:middle
You can do letterpress text
effects with AttributedString.

1318
00:52:49,826 --> 00:52:52,316 A:middle
Popovers now have a much
easier way to detach.

1319
00:52:52,846 --> 00:52:54,766 A:middle
You don't have to worry about
creating the window or whatever,

1320
00:52:54,806 --> 00:52:56,826 A:middle
just respond to this
delegate method.

1321
00:52:57,456 --> 00:52:59,736 A:middle
ComboBox, DatePicker,
PopupButton, SearchField,

1322
00:52:59,736 --> 00:53:02,506 A:middle
and SplitView now all do
right-to-left properly

1323

1324
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1325
00:52:59,736 --> 00:53:02,506 A:middle
and SplitView now all do
right-to-left properly

1326
00:53:02,506 --> 00:53:05,196 A:middle
and will flip as you might
- as the user might expect,

1327
00:53:05,366 --> 00:53:07,936 A:middle
and so you don't have
to worry about this.

1328
00:53:08,936 --> 00:53:11,766 A:middle
NibLoading has a new
API to do custom setup

1329
00:53:11,766 --> 00:53:14,446 A:middle
in your view subclass
for live views support

1330
00:53:14,446 --> 00:53:15,356 A:middle
in Interface Builder.

1331
00:53:15,686 --> 00:53:18,246 A:middle
So this is just to use in the
context of Interface Builder

1332
00:53:18,246 --> 00:53:20,026 A:middle
if you want to do
something custom, well,

1333
00:53:20,176 --> 00:53:21,176 A:middle
for debugging purposes.

1334
00:53:22,456 --> 00:53:25,016 A:middle
OpenGLContext, you can
now query some properties

1335
00:53:25,016 --> 00:53:26,956 A:middle
so you don't have to go
down to the CGLContext.

1336
00:53:27,576 --> 00:53:31,726 A:middle
FileCoordinator has methods
for asynchronous waiting.

1337
00:53:32,206 --> 00:53:34,286 A:middle
So, rather than having
to call these methods

1338
00:53:34,286 --> 00:53:35,626 A:middle
on your own background queues,

1339
00:53:35,626 --> 00:53:38,266 A:middle
you let the file coordinator
create and manage the queues

1340
00:53:38,266 --> 00:53:39,966 A:middle
for you, it's a much
better way to do this.

1341
00:53:41,176 --> 00:53:44,066 A:middle
NSWorkspace has methods
- as you're opening URLs,

1342
00:53:44,066 --> 00:53:47,796 A:middle
you can now specify exactly
which app you want to be used.

1343
00:53:49,416 --> 00:53:52,156 A:middle
And NSURL also has
a lot of new APIs.

1344
00:53:52,156 --> 00:53:54,656 A:middle
One for instance will allow
you to resolve alias files

1345
00:53:54,756 --> 00:53:57,636 A:middle
with
URLByResolvingAliasFileAtURL.

1346

1347
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1348
00:54:00,026 --> 00:54:03,656 A:middle
OK, and we have last two,
NSProcessInfo has methods

1349
00:54:03,686 --> 00:54:04,976 A:middle
to get the
operatingSystemVersion,

1350
00:54:04,976 --> 00:54:06,656 A:middle
and you can do
operatingSystemVersion

1351
00:54:06,656 --> 00:54:08,006 A:middle
comparisons if you must.

1352
00:54:08,776 --> 00:54:11,596 A:middle
And NSXPCConnection has
support for NSProgress support

1353
00:54:11,736 --> 00:54:14,476 A:middle
across processes, which actually
is a pretty cool feature

1354
00:54:14,476 --> 00:54:14,836 A:middle
as well.

1355
00:54:16,116 --> 00:54:20,306 A:middle
OK. So no more pictures of
food because we're done.

1356
00:54:20,336 --> 00:54:23,706 A:middle
Here are the things we talked
about, many exciting features,

1357
00:54:23,706 --> 00:54:25,266 A:middle
some of these are
free, some not.

1358
00:54:25,936 --> 00:54:28,886 A:middle
Now, as you go down to lunch, I
expect you to try to adopt these

1359
00:54:28,886 --> 00:54:31,246 A:middle
in your applications, see how
it's working and come find us

1360
00:54:31,246 --> 00:54:33,896 A:middle
at the labs, so if
it doesn't work.

1361
00:54:33,896 --> 00:54:36,886 A:middle
And here is information about
who to contact, Jake Behrens,

1362
00:54:37,256 --> 00:54:39,326 A:middle
he's sitting right there,
he's a pretty great guy.

1363
00:54:39,796 --> 00:54:41,526 A:middle
And one note, our release notes

1364
00:54:41,796 --> 00:54:44,626 A:middle
for Yosemite are
not yet available.

1365
00:54:44,626 --> 00:54:46,406 A:middle
We hope to make them
available very soon.

1366
00:54:47,626 --> 00:54:50,216 A:middle
And the related sessions
I've shown you most of these,

1367
00:54:50,216 --> 00:54:51,326 A:middle
"What's New in Interface
Builder,"

1368
00:54:51,326 --> 00:54:52,316 A:middle
I hadn't shown you that before.

1369
00:54:52,316 --> 00:54:53,356 A:middle
That's tomorrow afternoon.

1370
00:54:53,556 --> 00:54:54,976 A:middle
And with that, thank
you very much.

1371
00:54:55,516 --> 00:55:03,890 A:middle
[ Applause ]

1372
