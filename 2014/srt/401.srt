X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:12,856 --> 00:00:13,586 A:middle
>> Good morning.

2
00:00:14,046 --> 00:00:17,406 A:middle
Welcome to WWDC and this
is "What's New in Xcode."

3
00:00:20,176 --> 00:00:22,326 A:middle
You guys saw a lot of
new stuff yesterday.

4
00:00:23,906 --> 00:00:26,366 A:middle
Today, we thought we
would take a deep dive

5
00:00:26,426 --> 00:00:29,336 A:middle
into a few specific
areas of Xcode 6.

6
00:00:31,836 --> 00:00:34,456 A:middle
Before we do, though, let's
take a look at what's happened

7
00:00:34,456 --> 00:00:36,236 A:middle
since last time that
we were here together.

8
00:00:37,206 --> 00:00:44,236 A:middle
I hope you guys are all
using and enjoying Xcode 5.1.

9
00:00:44,446 --> 00:00:47,506 A:middle
Since last year, one of
the biggest new things

10
00:00:47,506 --> 00:00:51,076 A:middle
that we added was
support for iOS 64-bit.

11
00:00:52,446 --> 00:00:55,346 A:middle
And you guys have done an
amazing job of adopting 64-bit

12
00:00:55,346 --> 00:00:59,186 A:middle
in your apps to take full
advantage of our latest devices.

13

14
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

15
00:01:01,356 --> 00:01:05,036 A:middle
We've also made significant
improvements to auto layout

16
00:01:05,036 --> 00:01:08,826 A:middle
in Interface Builder
and added new APIs

17
00:01:09,116 --> 00:01:12,266 A:middle
to make your own classes work
with Debugger Quick Look.

18
00:01:14,716 --> 00:01:18,846 A:middle
This fall we'll be
releasing Xcode 6

19
00:01:20,156 --> 00:01:23,076 A:middle
with an even more beautiful
and functional interface

20
00:01:23,226 --> 00:01:25,036 A:middle
to go along with OS X Yosemite.

21
00:01:25,676 --> 00:01:32,736 A:middle
Let's take a quick look at some
of the new features in Xcode 6.

22
00:01:35,496 --> 00:01:37,906 A:middle
First of all, we have a brand
new programming language

23
00:01:37,906 --> 00:01:39,666 A:middle
for Cocoa development
called Swift.

24
00:01:40,486 --> 00:01:43,536 A:middle
And Swift is exciting
enough on its own,

25
00:01:44,326 --> 00:01:45,436 A:middle
but we didn't stop there.

26
00:01:46,876 --> 00:01:49,746 A:middle
Playgrounds provide a live
and responsive environment

27
00:01:49,786 --> 00:01:50,926 A:middle
for you to develop code.

28
00:01:52,496 --> 00:01:54,616 A:middle
Whether you're exploring
new technologies,

29
00:01:54,616 --> 00:01:57,346 A:middle
like Sprite Kit physics
courses, or just playing

30
00:01:57,346 --> 00:01:59,386 A:middle
around with Swift
itself, you're going

31
00:01:59,386 --> 00:02:01,146 A:middle
to love the experience
of playgrounds.

32

33
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

34
00:01:59,386 --> 00:02:01,146 A:middle
to love the experience
of playgrounds.

35
00:02:05,056 --> 00:02:08,126 A:middle
Playgrounds also offer a
great learning environment.

36
00:02:09,466 --> 00:02:12,496 A:middle
The Swift language guided
tour is actually a playground

37
00:02:12,986 --> 00:02:15,426 A:middle
where you can try things
out right as you're reading

38
00:02:15,426 --> 00:02:17,266 A:middle
and learning about Swift.

39
00:02:19,006 --> 00:02:22,486 A:middle
And of course Swift is
fully integrated into Xcode.

40
00:02:24,626 --> 00:02:27,296 A:middle
Everything from code completion
to connect from source

41
00:02:27,296 --> 00:02:30,306 A:middle
in Interface Builder works
beautifully with Swift.

42
00:02:32,056 --> 00:02:35,206 A:middle
When you're working
in Swift, Xcode knows.

43
00:02:35,766 --> 00:02:38,236 A:middle
If you ask to see the
interface for a framework class,

44
00:02:38,576 --> 00:02:40,926 A:middle
Xcode will show it
to you in Swift.

45
00:02:42,166 --> 00:02:47,386 A:middle
And when you ask for Quick
Help, you get help in Swift.

46
00:02:48,176 --> 00:02:51,226 A:middle
Now, Quick Help actually
has another new trick.

47
00:02:52,416 --> 00:02:55,176 A:middle
Oh, that's not that build.

48
00:02:57,176 --> 00:02:59,266 A:middle
So we have another new
trick that works well

49
00:02:59,266 --> 00:03:00,966 A:middle
with Swift's inferred types.

50

51
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

52
00:02:59,266 --> 00:03:00,966 A:middle
with Swift's inferred types.

53
00:03:01,526 --> 00:03:04,226 A:middle
If you're ever curious about
what type is being inferred

54
00:03:04,326 --> 00:03:06,456 A:middle
by Swift, Quick Help
can tell you.

55
00:03:10,936 --> 00:03:13,336 A:middle
And you can freely mix Swift

56
00:03:13,336 --> 00:03:16,006 A:middle
into your existing
Objective-C applications.

57
00:03:17,296 --> 00:03:23,136 A:middle
We'll be showing you how easy
that is in a few minutes.

58
00:03:25,836 --> 00:03:30,756 A:middle
Now, let's talk about some
of Xcode's design tools

59
00:03:30,756 --> 00:03:31,716 A:middle
and the new features there.

60
00:03:32,496 --> 00:03:36,706 A:middle
You're probably all familiar
with using storyboards

61
00:03:36,706 --> 00:03:38,516 A:middle
to develop your iOS
applications.

62
00:03:39,106 --> 00:03:41,166 A:middle
And in Xcode 6, you
can use storyboards

63
00:03:41,166 --> 00:03:43,366 A:middle
to develop your OS X
applications as well.

64
00:03:46,176 --> 00:03:52,656 A:middle
In iOS, the new adaptive UI lets
you have a single storyboard

65
00:03:52,656 --> 00:03:54,256 A:middle
for your universal applications,

66
00:03:54,926 --> 00:03:58,066 A:middle
while still retaining
full control

67
00:03:58,066 --> 00:03:59,566 A:middle
over customizing your interface

68
00:03:59,566 --> 00:04:04,536 A:middle
for both the iPhone
and the iPad.

69

70
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

71
00:03:59,566 --> 00:04:04,536 A:middle
for both the iPhone
and the iPad.

72
00:04:04,536 --> 00:04:06,896 A:middle
And if you use custom
fonts in your application,

73
00:04:08,226 --> 00:04:11,136 A:middle
you can now see them right on
the canvas in Interface Builder.

74
00:04:13,516 --> 00:04:17,716 A:middle
[ Applause ]

75
00:04:18,216 --> 00:04:23,876 A:middle
We have some brand new
editors in Xcode 6 too,

76
00:04:23,876 --> 00:04:25,516 A:middle
like the Sprite Kit Level Editor

77
00:04:25,936 --> 00:04:27,916 A:middle
that lets you visually
assemble scenes.

78
00:04:28,476 --> 00:04:35,316 A:middle
Xcode 6 has a brand new way
to localize your applications.

79
00:04:37,006 --> 00:04:40,636 A:middle
You can export all of your
localizable content into XLIFF,

80
00:04:40,636 --> 00:04:43,026 A:middle
which is the industry-standard
format that's understood

81
00:04:43,026 --> 00:04:44,776 A:middle
by a lot of translation
services.

82
00:04:45,226 --> 00:04:49,206 A:middle
And when you get those
translations back, just import

83
00:04:49,616 --> 00:04:50,926 A:middle
and Xcode will help you to merge

84
00:04:50,926 --> 00:04:56,676 A:middle
that new content right
into your project.

85
00:04:56,676 --> 00:05:00,316 A:middle
And with iOS 8's
support for frameworks,

86

87
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

88
00:04:56,676 --> 00:05:00,316 A:middle
And with iOS 8's
support for frameworks,

89
00:05:00,926 --> 00:05:02,766 A:middle
you can now build IB components.

90
00:05:03,916 --> 00:05:06,616 A:middle
Just by adding a few
attributes to your classes,

91
00:05:07,686 --> 00:05:10,256 A:middle
you can get them to show
up right in IB's canvas

92
00:05:10,676 --> 00:05:12,316 A:middle
and configure them
in the inspector.

93
00:05:13,956 --> 00:05:16,186 A:middle
We'll be showing
you how easy it is

94
00:05:16,836 --> 00:05:20,486 A:middle
to make your views
into IB components.

95
00:05:22,286 --> 00:05:29,516 A:middle
Now, Xcode 6 makes
debugging better than ever.

96
00:05:29,666 --> 00:05:32,616 A:middle
Often, when you're
debugging using queues,

97
00:05:34,056 --> 00:05:35,456 A:middle
it's not quite enough just

98
00:05:35,456 --> 00:05:37,686 A:middle
to see the code that's
running on the queue.

99
00:05:39,046 --> 00:05:42,556 A:middle
So in Xcode 6, we
now show you how

100
00:05:42,556 --> 00:05:44,506 A:middle
that block got onto
the queue also.

101
00:05:47,756 --> 00:05:50,506 A:middle
When you're developing
the new app extensions,

102
00:05:50,866 --> 00:05:53,216 A:middle
debugging support is
easy and automatic.

103
00:05:54,336 --> 00:05:56,646 A:middle
For example, if you're
developing a Today View

104
00:05:56,646 --> 00:05:58,886 A:middle
extension, just hit
Run in Xcode,

105
00:05:59,376 --> 00:06:01,236 A:middle
bring up Notification
Center on the device

106

107
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

108
00:05:59,376 --> 00:06:01,236 A:middle
bring up Notification
Center on the device

109
00:06:01,796 --> 00:06:03,446 A:middle
and Xcode will automatically
attach

110
00:06:03,446 --> 00:06:04,856 A:middle
to your extension for debugging.

111
00:06:08,056 --> 00:06:11,626 A:middle
Xcode 6 has some
brand new debug gauges

112
00:06:11,626 --> 00:06:14,146 A:middle
to help you identify
problems with disc

113
00:06:14,146 --> 00:06:20,546 A:middle
and file I/O, disc
and network I/O.

114
00:06:20,786 --> 00:06:23,526 A:middle
And View debugging
gives you deep insight

115
00:06:23,526 --> 00:06:24,816 A:middle
into visual problems.

116
00:06:26,336 --> 00:06:30,186 A:middle
We'll be showing you how easy it
is to identify and fix problems

117
00:06:30,186 --> 00:06:31,206 A:middle
with your view hierarchy

118
00:06:31,206 --> 00:06:32,956 A:middle
and constraints using
View debugging.

119
00:06:36,396 --> 00:06:42,076 A:middle
Xcode 6 has some all-new
performance features as well

120
00:06:43,556 --> 00:06:47,176 A:middle
that will help you to make
your apps faster and leaner.

121
00:06:47,896 --> 00:06:52,616 A:middle
Our premier performance
tool, Instruments,

122
00:06:52,676 --> 00:06:56,076 A:middle
has a brand new interface
with new workflows

123
00:06:56,586 --> 00:06:59,586 A:middle
that make it easier than ever to
analyze your app's performance.

124

125
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

126
00:07:00,266 --> 00:07:06,496 A:middle
Last year we introduced
Xcode Server,

127
00:07:06,496 --> 00:07:09,496 A:middle
and one of the biggest requests
that we got was for the ability

128
00:07:09,496 --> 00:07:11,056 A:middle
to customize what happens

129
00:07:11,146 --> 00:07:12,776 A:middle
when you're running
continuous integrations.

130
00:07:13,736 --> 00:07:16,506 A:middle
So in Xcode 6, we've
added support for triggers

131
00:07:16,506 --> 00:07:22,786 A:middle
that allow you to add custom
behavior to your bots.

132
00:07:22,976 --> 00:07:27,626 A:middle
And we've added support in
the XE Test Framework in Xcode

133
00:07:27,626 --> 00:07:31,386 A:middle
and in Xcode Server
for performance tests.

134
00:07:32,186 --> 00:07:34,416 A:middle
It's easy to make
a performance test.

135
00:07:35,096 --> 00:07:37,886 A:middle
You just wrap your
code in a measureBlock.

136
00:07:39,556 --> 00:07:44,726 A:middle
Performance tests let Xcode
measure the speed of your code

137
00:07:45,236 --> 00:07:47,756 A:middle
and tell you whenever it
has improved or regressed.

138
00:07:48,396 --> 00:07:52,756 A:middle
And in order to help you to
make your apps even faster,

139
00:07:53,696 --> 00:07:58,316 A:middle
you can now profile your
performance tests directly

140
00:07:58,316 --> 00:08:02,106 A:middle
in Instruments with just a
choice from this context menu.

141

142
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

143
00:07:58,316 --> 00:08:02,106 A:middle
in Instruments with just a
choice from this context menu.

144
00:08:05,256 --> 00:08:05,396 A:middle
>> Yes!

145
00:08:07,016 --> 00:08:09,016 A:middle
[ Laughter ]

146
00:08:09,016 --> 00:08:09,083 A:middle
[ Applause ]

147
00:08:09,606 --> 00:08:10,776 A:middle
>> It's the little
things, right?

148
00:08:14,056 --> 00:08:16,616 A:middle
Xcode also includes
all-new reports

149
00:08:16,616 --> 00:08:19,366 A:middle
that show you exactly how your
performance tests are doing.

150
00:08:21,026 --> 00:08:23,466 A:middle
And we'll be showing
you how easy it is

151
00:08:23,596 --> 00:08:26,526 A:middle
to start writing performance
tests for your projects

152
00:08:26,766 --> 00:08:28,776 A:middle
and using them to
make your apps better.

153
00:08:29,466 --> 00:08:33,765 A:middle
So that's just a
quick tour of some

154
00:08:33,765 --> 00:08:35,576 A:middle
of the feature areas in Xcode 6.

155
00:08:35,576 --> 00:08:37,765 A:middle
And now we'd like
to dive in deeper

156
00:08:38,096 --> 00:08:41,216 A:middle
and give you a detailed look
at a few of these areas.

157
00:08:42,596 --> 00:08:45,676 A:middle
To get us started with that,
let me introduce Daniel Dunbar.

158
00:08:47,311 --> 00:08:49,311 A:middle
[ Applause ]

159
00:08:49,606 --> 00:08:50,216 A:middle
>> Thanks, Mike.

160
00:08:50,926 --> 00:08:53,186 A:middle
This talk is called
"What's New in Xcode,"

161
00:08:53,456 --> 00:08:56,516 A:middle
and obviously the big new
thing this year is Swift.

162
00:08:57,276 --> 00:08:59,026 A:middle
I'm sure you're all
really excited

163
00:08:59,026 --> 00:09:01,256 A:middle
about this new language
we unveiled yesterday.

164

165
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

166
00:08:59,026 --> 00:09:01,256 A:middle
about this new language
we unveiled yesterday.

167
00:09:01,756 --> 00:09:03,726 A:middle
And I imagine many of
you are wondering, "Well,

168
00:09:03,726 --> 00:09:06,846 A:middle
how quickly can I start using
this in my own applications?"

169
00:09:08,016 --> 00:09:10,716 A:middle
So we'd like to kick off
our demos this morning

170
00:09:10,946 --> 00:09:13,546 A:middle
by showing you just how easy
it is to integrate Swift

171
00:09:13,696 --> 00:09:15,256 A:middle
into an existing application.

172
00:09:16,576 --> 00:09:19,116 A:middle
We've created this new
photo scavenger game.

173
00:09:19,426 --> 00:09:20,336 A:middle
Let me show it to you now.

174
00:09:21,226 --> 00:09:25,116 A:middle
Our game is called Shutterbugs,
and when I open it up,

175
00:09:26,146 --> 00:09:28,006 A:middle
you'll see our game starts

176
00:09:28,276 --> 00:09:29,986 A:middle
with this great looking
sign-on screen,

177
00:09:29,986 --> 00:09:32,116 A:middle
and it takes the user
right into the game.

178
00:09:32,876 --> 00:09:34,166 A:middle
That's been working great,

179
00:09:34,476 --> 00:09:36,746 A:middle
but our app has really
been taking off recently,

180
00:09:36,746 --> 00:09:38,736 A:middle
and users tell us
they want to be able

181
00:09:38,736 --> 00:09:40,426 A:middle
to play multiple
games at one time.

182
00:09:41,376 --> 00:09:45,236 A:middle
So for Version 2, we'd like to
introduce a new games landing

183
00:09:45,236 --> 00:09:48,516 A:middle
screen that shows users their
in progress and completed games.

184
00:09:49,036 --> 00:09:51,326 A:middle
And of course we'd
like to do it in Swift.

185
00:09:52,416 --> 00:09:54,936 A:middle
Now, my designer has already
updated the storyboard

186
00:09:55,466 --> 00:09:58,176 A:middle
to include this table view
controller shown here.

187
00:09:59,146 --> 00:10:02,056 A:middle
All we need to do to finish off
this new feature is implement

188

189
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

190
00:09:59,146 --> 00:10:02,056 A:middle
All we need to do to finish off
this new feature is implement

191
00:10:02,056 --> 00:10:03,326 A:middle
the code for it.

192
00:10:04,416 --> 00:10:05,726 A:middle
So I know I'm going

193
00:10:05,726 --> 00:10:08,526 A:middle
to eventually want a custom
cell class for my table,

194
00:10:08,766 --> 00:10:10,386 A:middle
so I'll start with that.

195
00:10:10,976 --> 00:10:14,576 A:middle
Going to go to Views and select
New File from the popup menu.

196
00:10:15,446 --> 00:10:18,096 A:middle
Of course, I want an
iOS Cocoa Touch class.

197
00:10:18,756 --> 00:10:21,896 A:middle
And the first thing you'll
notice on this screen is

198
00:10:21,896 --> 00:10:23,776 A:middle
that there's a new language
chooser at the bottom

199
00:10:24,046 --> 00:10:26,426 A:middle
that lets you decide
whether you want a Swift

200
00:10:26,556 --> 00:10:27,646 A:middle
or an Objective-C class.

201
00:10:28,386 --> 00:10:32,026 A:middle
Of course I want Swift, and
in this case I want a subclass

202
00:10:32,086 --> 00:10:33,366 A:middle
of a UI table view cell.

203
00:10:34,046 --> 00:10:36,016 A:middle
I'll call it GamesTableView
Cell.

204
00:10:36,516 --> 00:10:38,976 A:middle
Drop that in my project...

205
00:10:39,066 --> 00:10:41,126 A:middle
and Xcode takes me
to the source.

206
00:10:41,726 --> 00:10:44,666 A:middle
These subclass templates are
a great way to get started

207
00:10:44,666 --> 00:10:45,626 A:middle
with the new language.

208
00:10:47,256 --> 00:10:51,746 A:middle
So for us, the main thing we'll
need is a couple of properties

209
00:10:51,746 --> 00:10:54,286 A:middle
that we can use to
connect our UI to.

210
00:10:54,796 --> 00:10:56,166 A:middle
So let me add that
to start with.

211
00:10:56,556 --> 00:11:00,136 A:middle
As you can see, property
declarations

212

213
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

214
00:10:56,556 --> 00:11:00,136 A:middle
As you can see, property
declarations

215
00:11:00,136 --> 00:11:02,496 A:middle
in Swift are very
clean and simple.

216
00:11:02,766 --> 00:11:06,126 A:middle
And we just needed to add
this IBOutlet attribute

217
00:11:06,326 --> 00:11:08,566 A:middle
so that we could connect to
it from Interface Builder.

218
00:11:09,656 --> 00:11:12,656 A:middle
Now that that's in place, let
me go back to my storyboard.

219
00:11:17,136 --> 00:11:20,206 A:middle
So I'll select my
prototype cell,

220
00:11:20,586 --> 00:11:22,476 A:middle
and I need to associate
the class with it.

221
00:11:23,546 --> 00:11:24,606 A:middle
If I pull down this menu,

222
00:11:24,976 --> 00:11:27,786 A:middle
you see that Interface Builder
has already recognized our new

223
00:11:27,786 --> 00:11:30,086 A:middle
class using our Swift
indexing support.

224
00:11:30,696 --> 00:11:32,326 A:middle
So I'll select GamesTableView
Cell.

225
00:11:33,036 --> 00:11:36,176 A:middle
Now, you may notice there's
a new module field here.

226
00:11:37,026 --> 00:11:40,206 A:middle
Another great way that Swift
improves the coding experience

227
00:11:40,236 --> 00:11:42,906 A:middle
is by associating
classes with the modules

228
00:11:42,906 --> 00:11:43,826 A:middle
that they are declared in.

229
00:11:44,526 --> 00:11:46,046 A:middle
That allows you to use short,

230
00:11:46,156 --> 00:11:48,656 A:middle
comfortable class names
while still ensuring

231
00:11:48,656 --> 00:11:52,206 A:middle
that your classes won't collide
across targets and projects.

232
00:11:52,616 --> 00:11:57,326 A:middle
With that in place we can
set up our connections.

233
00:11:57,816 --> 00:12:02,046 A:middle
I'll close the Utilities
panel and open our source code

234

235
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

236
00:11:57,816 --> 00:12:02,046 A:middle
I'll close the Utilities
panel and open our source code

237
00:12:02,046 --> 00:12:03,126 A:middle
in the Assistant Editor.

238
00:12:03,676 --> 00:12:08,366 A:middle
And now I can wire up
my connections just

239
00:12:08,366 --> 00:12:09,036 A:middle
like you would expect.

240
00:12:09,636 --> 00:12:12,456 A:middle
I'll set the name,
the state label,

241
00:12:12,546 --> 00:12:14,266 A:middle
and we have a custom
progress view here.

242
00:12:15,506 --> 00:12:17,006 A:middle
OK, that should be enough

243
00:12:17,046 --> 00:12:18,986 A:middle
to let us get started
with our custom cell.

244
00:12:19,286 --> 00:12:23,866 A:middle
So now let's fill in the
details of the controller.

245
00:12:23,866 --> 00:12:26,286 A:middle
I've already added the
basic subclass template

246
00:12:26,606 --> 00:12:29,606 A:middle
with a couple tweaks, but we
need to fill in the details.

247
00:12:30,626 --> 00:12:34,496 A:middle
So the first thing that every
controller class needs is access

248
00:12:34,546 --> 00:12:36,516 A:middle
to the model data that
it's going to present.

249
00:12:37,676 --> 00:12:40,776 A:middle
For our application, most
of our model data is stored

250
00:12:40,776 --> 00:12:41,986 A:middle
in a user session class.

251
00:12:42,536 --> 00:12:44,986 A:middle
So let me add a property
to hold that now.

252
00:12:48,936 --> 00:12:52,416 A:middle
So I'll call it userSession
and declare its type.

253
00:12:53,646 --> 00:12:56,496 A:middle
Naturally, we have live
issue support in Swift,

254
00:12:56,816 --> 00:13:00,436 A:middle
and if I pop this open I can
see it's telling me there's an

255

256
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

257
00:12:56,816 --> 00:13:00,436 A:middle
and if I pop this open I can
see it's telling me there's an

258
00:13:00,436 --> 00:13:02,436 A:middle
undeclared type here:
userSession.

259
00:13:02,436 --> 00:13:04,976 A:middle
I haven't imported
that class yet.

260
00:13:05,966 --> 00:13:08,836 A:middle
Now, in Swift, all
of the classes

261
00:13:08,966 --> 00:13:13,256 A:middle
in one target are automatically
visible to each of the source --

262
00:13:13,486 --> 00:13:15,276 A:middle
the Swift implementation files.

263
00:13:15,746 --> 00:13:17,036 A:middle
You no longer need to worry

264
00:13:17,036 --> 00:13:19,516 A:middle
about manually importing
the headers for each

265
00:13:19,516 --> 00:13:20,876 A:middle
of the classes that you use.

266
00:13:21,516 --> 00:13:25,846 A:middle
[ Applause ]

267
00:13:26,346 --> 00:13:30,176 A:middle
Yep. However, you do still
need to import the modules

268
00:13:30,376 --> 00:13:32,156 A:middle
for the frameworks
that you depend upon.

269
00:13:33,156 --> 00:13:36,206 A:middle
To go along with iOS 8's
new framework support,

270
00:13:36,616 --> 00:13:39,836 A:middle
Xcode now has support
for you to define modules

271
00:13:39,896 --> 00:13:41,326 A:middle
out of your own frameworks.

272
00:13:42,256 --> 00:13:45,736 A:middle
And those modules can be used
in both Swift and Objective-C.

273
00:13:45,736 --> 00:13:49,236 A:middle
But we've already started
taking advantage of that

274
00:13:49,236 --> 00:13:52,246 A:middle
in our application by
moving all of our model code

275
00:13:52,596 --> 00:13:58,506 A:middle
into this new CoreShutterbugs
framework that you can see.

276
00:13:58,736 --> 00:14:02,576 A:middle
That means, to use this
-- fix this problem,

277

278
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

279
00:13:58,736 --> 00:14:02,576 A:middle
That means, to use this
-- fix this problem,

280
00:14:02,576 --> 00:14:07,206 A:middle
all I need to do is type
Import CoreShutterbugs just

281
00:14:07,206 --> 00:14:09,626 A:middle
like I would for any other
framework on the system.

282
00:14:09,876 --> 00:14:11,716 A:middle
And of course the
error goes away.

283
00:14:13,556 --> 00:14:17,116 A:middle
Now, our table view is going
to have two different sections.

284
00:14:17,366 --> 00:14:19,786 A:middle
We'll have one for the
in-progress games and then one

285
00:14:19,786 --> 00:14:21,006 A:middle
for the completed games.

286
00:14:21,666 --> 00:14:23,896 A:middle
So I want to start by
creating a utility method

287
00:14:23,896 --> 00:14:26,276 A:middle
that lets me easily get
the appropriate list

288
00:14:26,276 --> 00:14:27,106 A:middle
for each section.

289
00:14:27,636 --> 00:14:32,636 A:middle
I'm going to call it
gameListForSection.

290
00:14:32,966 --> 00:14:36,006 A:middle
And what I want to
return here is the result

291
00:14:36,006 --> 00:14:41,026 A:middle
of the user sessions
"getFilteredGameList" method.

292
00:14:41,506 --> 00:14:44,116 A:middle
You can see that even
though this is a method

293
00:14:44,116 --> 00:14:46,566 A:middle
that we declared in our
Objective-C source code

294
00:14:46,566 --> 00:14:49,206 A:middle
in another framework, I
still get code completion

295
00:14:49,206 --> 00:14:51,426 A:middle
and even the documentation
for that method

296
00:14:51,626 --> 00:14:52,666 A:middle
in my Swift source code.

297
00:14:53,816 --> 00:14:55,186 A:middle
So I'll complete that out.

298
00:14:55,506 --> 00:14:58,196 A:middle
And what I want to get
is the in-progress list

299
00:14:58,436 --> 00:14:59,836 A:middle
when the section number is 0.

300

301
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

302
00:15:00,346 --> 00:15:05,126 A:middle
I'm also going to add a
cast here to a game array.

303
00:15:05,686 --> 00:15:09,046 A:middle
What I'm doing here
is taking advantage

304
00:15:09,046 --> 00:15:12,436 A:middle
of Swift's typed collection
support to tell the compiler

305
00:15:12,616 --> 00:15:17,196 A:middle
that each object in this array
is an instance of my game class.

306
00:15:17,956 --> 00:15:20,626 A:middle
That way, whenever I use
this array later in the code,

307
00:15:20,876 --> 00:15:23,686 A:middle
the Swift compiler will know
the exact type of each object.

308
00:15:25,076 --> 00:15:26,846 A:middle
There's one more
utility I'd like.

309
00:15:26,986 --> 00:15:30,366 A:middle
In a table view you frequently
want to get the data associated

310
00:15:30,366 --> 00:15:33,126 A:middle
with a particular cell, and
that cell is represented

311
00:15:33,126 --> 00:15:33,856 A:middle
by an index path.

312
00:15:34,586 --> 00:15:37,906 A:middle
So I'll create a method that
lets me easily get the game

313
00:15:38,096 --> 00:15:39,386 A:middle
for a particular index path.

314
00:15:40,206 --> 00:15:42,336 A:middle
Going to call that
one gameForIndexPath,

315
00:15:42,876 --> 00:15:44,576 A:middle
and it returns an optional game.

316
00:15:45,026 --> 00:15:48,086 A:middle
With those methods in
place, should be easy

317
00:15:48,086 --> 00:15:49,816 A:middle
to write our table
view data source.

318
00:15:50,956 --> 00:15:54,496 A:middle
Let me drop that in.

319
00:15:54,706 --> 00:15:57,866 A:middle
What I'm doing here: setting the
number of sections to be 2...

320
00:15:58,926 --> 00:16:01,626 A:middle
I'm going to return an
appropriate number of rows

321

322
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

323
00:15:58,926 --> 00:16:01,626 A:middle
I'm going to return an
appropriate number of rows

324
00:16:01,706 --> 00:16:04,666 A:middle
for each section using that
first utility method we added,

325
00:16:05,636 --> 00:16:09,656 A:middle
and I'll use gameForIndexPath to
easily get the particular game

326
00:16:09,886 --> 00:16:14,076 A:middle
and then propagate its data into
our custom cell whenever we need

327
00:16:14,076 --> 00:16:17,136 A:middle
to dequeue a new cell.

328
00:16:17,346 --> 00:16:20,066 A:middle
I've also added a
prepareForSegue method to set

329
00:16:20,066 --> 00:16:21,756 A:middle
up our destination
view controller

330
00:16:22,026 --> 00:16:24,366 A:middle
when the transition happens.

331
00:16:24,446 --> 00:16:27,536 A:middle
OK, we're almost done, but I'd

332
00:16:27,536 --> 00:16:29,986 A:middle
like to do one more thing before
we call our controller a wrap.

333
00:16:31,346 --> 00:16:34,426 A:middle
You can see that I'm already
modifying the separatorInset

334
00:16:34,426 --> 00:16:38,156 A:middle
on this table to give our table
a little bit of a custom look.

335
00:16:38,956 --> 00:16:40,686 A:middle
That's all right,
but I just heard

336
00:16:40,686 --> 00:16:44,016 A:middle
about iOS 8's new
Separator Effect property,

337
00:16:44,226 --> 00:16:45,566 A:middle
so I'd like to try it out here.

338
00:16:45,566 --> 00:16:51,106 A:middle
I know that it's called
"tableview.separatorEffect,"

339
00:16:51,846 --> 00:16:54,936 A:middle
but I can't remember the
exact object that I'm supposed

340
00:16:54,936 --> 00:16:56,136 A:middle
to assign to that property.

341
00:16:57,096 --> 00:17:01,326 A:middle
In Xcode 6, if we jump to
Definition, it'll take us right

342

343
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

344
00:16:57,096 --> 00:17:01,326 A:middle
In Xcode 6, if we jump to
Definition, it'll take us right

345
00:17:01,326 --> 00:17:04,156 A:middle
to UITableView, but
it's rendered in Swift.

346
00:17:05,086 --> 00:17:07,656 A:middle
Even though this is actually
an Objective-C header

347
00:17:07,705 --> 00:17:11,326 A:middle
in the system framework, Xcode
has dynamically translated it

348
00:17:11,506 --> 00:17:14,215 A:middle
to the Swift interface just
like the compiler would see.

349
00:17:15,036 --> 00:17:16,726 A:middle
And even though this is
happening on the fly,

350
00:17:16,726 --> 00:17:20,486 A:middle
we take great care to preserve
all of the API comments

351
00:17:20,675 --> 00:17:23,086 A:middle
that you need to use these
libraries effectively.

352
00:17:24,266 --> 00:17:25,976 A:middle
Now that I'm here, I can see

353
00:17:25,976 --> 00:17:28,996 A:middle
that separatorEffect
is a UIVisualEffect.

354
00:17:29,566 --> 00:17:31,846 A:middle
And if I navigate
onwards to that?

355
00:17:33,166 --> 00:17:34,546 A:middle
Ah, now I remember.

356
00:17:35,096 --> 00:17:37,896 A:middle
What I want is a
UIVibrancyEffect, and I'm going

357
00:17:37,896 --> 00:17:39,906 A:middle
to use a Dark blur
style to go with that.

358
00:17:41,256 --> 00:17:46,836 A:middle
So let me add that to my code.

359
00:17:47,016 --> 00:17:49,306 A:middle
Now, when I go to
specify the style here,

360
00:17:49,576 --> 00:17:52,596 A:middle
I'm going to take advantage of
Swift's advanced type inference,

361
00:17:52,916 --> 00:17:55,916 A:middle
and that lets me
just type ".dark".

362
00:17:56,796 --> 00:17:57,916 A:middle
The compiler is going

363
00:17:57,916 --> 00:18:02,036 A:middle
to automatically infer the right
enumeration type to use here

364

365
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

366
00:17:57,916 --> 00:18:02,036 A:middle
to automatically infer the right
enumeration type to use here

367
00:18:02,296 --> 00:18:04,056 A:middle
because it's obvious
from the context.

368
00:18:04,416 --> 00:18:07,256 A:middle
That saves me having to type
the full enumeration name

369
00:18:07,396 --> 00:18:08,766 A:middle
and can really save
a lot of typing.

370
00:18:10,076 --> 00:18:12,606 A:middle
OK, that should do it
for our controller,

371
00:18:12,986 --> 00:18:14,926 A:middle
but there's one last
thing we need to set up.

372
00:18:15,796 --> 00:18:17,806 A:middle
Remember that UserSession
property

373
00:18:17,936 --> 00:18:19,476 A:middle
that I started off by creating?

374
00:18:19,966 --> 00:18:21,546 A:middle
We've never initialized
it anywhere.

375
00:18:22,486 --> 00:18:24,776 A:middle
So to fix that, let's
take a very quick look

376
00:18:24,776 --> 00:18:26,716 A:middle
at the other side of
Swift development:

377
00:18:26,996 --> 00:18:29,636 A:middle
using your Swift classes
inside Objective-C.

378
00:18:30,956 --> 00:18:34,006 A:middle
The place that we want to
initialize this object is

379
00:18:34,006 --> 00:18:36,846 A:middle
in the sign-in controller's
prepareForSegue method.

380
00:18:37,736 --> 00:18:39,396 A:middle
And if I go to Sign-in
Controller,

381
00:18:39,486 --> 00:18:41,756 A:middle
you'll notice this is
an Objective-C file.

382
00:18:42,756 --> 00:18:46,226 A:middle
And of course in Objective-C
before you use your classes,

383
00:18:46,376 --> 00:18:47,456 A:middle
you need to import them.

384
00:18:48,166 --> 00:18:51,516 A:middle
But our class is defined in
Swift, so how can we do that?

385
00:18:52,146 --> 00:18:54,166 A:middle
Well, when you're using
Swift in a target,

386
00:18:54,616 --> 00:18:57,856 A:middle
Xcode will automatically
generate a new header for you

387
00:18:57,856 --> 00:19:01,046 A:middle
that contains the declarations
of each of your Swift classes.

388

389
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

390
00:18:57,856 --> 00:19:01,046 A:middle
that contains the declarations
of each of your Swift classes.

391
00:19:01,836 --> 00:19:02,626 A:middle
All that you need to do

392
00:19:02,626 --> 00:19:05,296 A:middle
to use those classes
is import that header.

393
00:19:05,806 --> 00:19:10,916 A:middle
For this target it'll be
called Shutterbugs-Swift,

394
00:19:10,916 --> 00:19:12,206 A:middle
and I've added the Import Now.

395
00:19:13,046 --> 00:19:14,786 A:middle
You'll also notice
I'm taking advantage

396
00:19:15,016 --> 00:19:18,406 A:middle
of the at-import
syntax in Objective-C

397
00:19:18,636 --> 00:19:20,986 A:middle
to import my own
CoreShutterbugs framework.

398
00:19:22,406 --> 00:19:24,546 A:middle
So with those in place
I can fill in the rest

399
00:19:24,546 --> 00:19:25,436 A:middle
and prepare for segue.

400
00:19:25,436 --> 00:19:29,296 A:middle
I get the Games View Controller

401
00:19:29,616 --> 00:19:31,756 A:middle
and I'll set its
userSession property.

402
00:19:32,816 --> 00:19:36,776 A:middle
What you'll notice is that even
though GamesTableViewController

403
00:19:37,086 --> 00:19:37,566 A:middle
is a...

404
00:19:37,566 --> 00:19:43,766 A:middle
Swift class that we just
defined, we can use it

405
00:19:43,766 --> 00:19:45,946 A:middle
in Objective-C just
like any other class

406
00:19:46,166 --> 00:19:47,926 A:middle
and we can assign this property.

407
00:19:48,496 --> 00:19:50,826 A:middle
And if I came back
to this code later

408
00:19:50,826 --> 00:19:54,566 A:middle
and I'd forgotten what the type
was, I can even use Quick Help

409
00:19:55,056 --> 00:19:57,646 A:middle
to get the view as
Objective-C would see it,

410
00:19:57,646 --> 00:20:00,246 A:middle
and it even includes the
description of my property,

411

412
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

413
00:19:57,646 --> 00:20:00,246 A:middle
and it even includes the
description of my property,

414
00:20:01,226 --> 00:20:04,126 A:middle
even though I only ever
wrote that one place

415
00:20:04,126 --> 00:20:05,296 A:middle
in my Swift source file.

416
00:20:06,556 --> 00:20:10,346 A:middle
So with those in place,
let's see how it looks.

417
00:20:11,166 --> 00:20:14,306 A:middle
I'm going to build and run,
and Xcode will launch our app

418
00:20:14,606 --> 00:20:16,226 A:middle
in the iPhone 5s simulator.

419
00:20:19,376 --> 00:20:21,376 A:middle
There's our great
looking sign-on screen.

420
00:20:21,986 --> 00:20:23,646 A:middle
And if I click through
to play Shutterbugs...

421
00:20:24,086 --> 00:20:25,256 A:middle
There you have it.

422
00:20:25,256 --> 00:20:30,086 A:middle
A new landing screen
completed entirely in Swift,

423
00:20:30,516 --> 00:20:32,766 A:middle
and with this great-looking
vibrancy effect to boot.

424
00:20:34,516 --> 00:20:39,396 A:middle
[ Applause ]

425
00:20:39,896 --> 00:20:42,916 A:middle
We've integrated Swift
support throughout Xcode 6

426
00:20:42,916 --> 00:20:46,356 A:middle
so that you can use the same
great development features

427
00:20:46,356 --> 00:20:47,516 A:middle
that you're already familiar

428
00:20:47,516 --> 00:20:50,436 A:middle
with to immediately start
working with our new language.

429
00:20:51,426 --> 00:20:54,946 A:middle
And with that, I'd like to turn
things over to Jon Hess to talk

430
00:20:54,946 --> 00:20:56,746 A:middle
to you about our brand new tools

431
00:20:56,926 --> 00:20:58,466 A:middle
for visual interface
development.

432
00:20:58,916 --> 00:20:59,276 A:middle
Thanks.

433

434
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

435
00:21:00,516 --> 00:21:05,076 A:middle
[ Applause ]

436
00:21:05,576 --> 00:21:06,186 A:middle
>> Thanks, Daniel.

437
00:21:06,316 --> 00:21:08,676 A:middle
I'd like to show all of you
how you can take advantage

438
00:21:08,676 --> 00:21:10,256 A:middle
of the new features of Xcode 6

439
00:21:10,256 --> 00:21:12,816 A:middle
to design the visual
aspects of your application.

440
00:21:13,186 --> 00:21:14,456 A:middle
Let's head over to
the demo machine.

441
00:21:14,456 --> 00:21:17,006 A:middle
I have a spec from my designer

442
00:21:17,006 --> 00:21:18,746 A:middle
to implement a circular
image view.

443
00:21:19,226 --> 00:21:21,006 A:middle
It's going to take a
square images input,

444
00:21:21,096 --> 00:21:23,986 A:middle
crop it to a circle, and
optionally desaturate the color.

445
00:21:25,296 --> 00:21:27,776 A:middle
Now, I'm finding Xcode's
new playgrounds feature

446
00:21:27,776 --> 00:21:30,096 A:middle
to be indispensable when
working on features like this.

447
00:21:30,896 --> 00:21:34,366 A:middle
I love being able to see
the results of my code side

448
00:21:34,366 --> 00:21:35,926 A:middle
by side as I write my code.

449
00:21:36,016 --> 00:21:38,626 A:middle
I have a playground
set up just for this.

450
00:21:39,776 --> 00:21:43,186 A:middle
It starts with a sample image,
and you'll have a basic function

451
00:21:43,186 --> 00:21:45,756 A:middle
to manipulate a graphics
context and return a new image.

452
00:21:45,886 --> 00:21:49,016 A:middle
I'm going to paste
in a bit of new code.

453
00:21:49,436 --> 00:21:54,236 A:middle
It will take an input image,
optionally desaturate it,

454
00:21:55,126 --> 00:21:57,426 A:middle
and two sample calls
to render my image.

455
00:21:58,576 --> 00:22:01,396 A:middle
Here in the Timeline I can see
all of the results of my code.

456

457
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

458
00:21:58,576 --> 00:22:01,396 A:middle
Here in the Timeline I can see
all of the results of my code.

459
00:22:01,396 --> 00:22:03,506 A:middle
And by pressing this button,

460
00:22:03,666 --> 00:22:07,216 A:middle
I can bring in a persistent
preview of any of the values.

461
00:22:07,896 --> 00:22:08,956 A:middle
That's our starting image...

462
00:22:10,936 --> 00:22:12,006 A:middle
and here's the two outputs.

463
00:22:12,816 --> 00:22:14,796 A:middle
Right now all three
look the same

464
00:22:14,796 --> 00:22:17,316 A:middle
because I haven't done
anything to process the image.

465
00:22:17,516 --> 00:22:19,076 A:middle
I'm just taking my source image

466
00:22:19,556 --> 00:22:21,186 A:middle
and drawing it raw
to the destination.

467
00:22:22,436 --> 00:22:25,096 A:middle
OK, the first step is
to crop to a circle.

468
00:22:25,096 --> 00:22:28,456 A:middle
I'm going to create a Bézier
path with an oval inscribed

469
00:22:28,456 --> 00:22:30,496 A:middle
in our square, add that
to the clipping path

470
00:22:31,136 --> 00:22:32,426 A:middle
and now we have circular images.

471
00:22:32,696 --> 00:22:33,636 A:middle
Things look good.

472
00:22:35,406 --> 00:22:37,306 A:middle
I'd also like to
desaturate my image.

473
00:22:37,656 --> 00:22:39,996 A:middle
I'm going to simply wash
over it with a white color

474
00:22:39,996 --> 00:22:43,756 A:middle
and use a special core graphics
blend mode that subtracts

475
00:22:43,756 --> 00:22:46,046 A:middle
out the color instead
of adding white on top.

476
00:22:46,696 --> 00:22:49,296 A:middle
And now you can see that
our third call produces a

477
00:22:49,296 --> 00:22:50,296 A:middle
desaturated image.

478
00:22:51,066 --> 00:22:51,866 A:middle
Things look great.

479
00:22:52,106 --> 00:22:54,646 A:middle
I'm ready to start using
this in my application.

480
00:22:54,646 --> 00:23:04,606 A:middle
Going to grab a copy of this
code and head over to my class

481

482
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

483
00:22:54,646 --> 00:23:04,606 A:middle
Going to grab a copy of this
code and head over to my class

484
00:23:04,606 --> 00:23:05,386 A:middle
that I've been working on.

485
00:23:05,976 --> 00:23:07,286 A:middle
Here's my prepareImage function.

486
00:23:07,766 --> 00:23:08,876 A:middle
It's not implemented yet.

487
00:23:09,076 --> 00:23:11,106 A:middle
I'm simply going to paste in
my code from the playground

488
00:23:11,626 --> 00:23:13,716 A:middle
and I'm ready to start
using this in my storyboard.

489
00:23:13,716 --> 00:23:17,256 A:middle
I'll option-click here to
open it in the Assistant.

490
00:23:18,866 --> 00:23:20,866 A:middle
And down in the lower
left corner you'll see the

491
00:23:20,866 --> 00:23:21,546 A:middle
square view.

492
00:23:21,546 --> 00:23:24,466 A:middle
This is where I'd like my
circular image view to be.

493
00:23:25,926 --> 00:23:29,526 A:middle
In Interface Builder's Inspector
I can see this is still an

494
00:23:29,526 --> 00:23:31,166 A:middle
instance of just regular UIView.

495
00:23:33,196 --> 00:23:35,976 A:middle
I'll type, Interface
Builder will autocomplete,

496
00:23:36,106 --> 00:23:38,406 A:middle
and you'll see it filled
in the module name as well.

497
00:23:39,516 --> 00:23:42,086 A:middle
My circular image view class
is defined in a framework,

498
00:23:42,686 --> 00:23:44,686 A:middle
while my storyboard is
in the main application.

499
00:23:45,046 --> 00:23:47,826 A:middle
So the module name and the
class name together complete the

500
00:23:47,826 --> 00:23:48,806 A:middle
reference to my class.

501
00:23:51,706 --> 00:23:53,956 A:middle
Now, I've still got
a white square here.

502
00:23:54,276 --> 00:23:57,106 A:middle
At this point Interface Builder
is doing what it's always been

503
00:23:57,106 --> 00:23:58,016 A:middle
capable of doing.

504
00:23:58,456 --> 00:24:01,096 A:middle
It's saying this UIView
will be an instance

505

506
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

507
00:23:58,456 --> 00:24:01,096 A:middle
It's saying this UIView
will be an instance

508
00:24:01,096 --> 00:24:03,006 A:middle
of the circular image
view at runtime.

509
00:24:03,756 --> 00:24:05,676 A:middle
In Xcode 6, we can
make it an instance

510
00:24:05,676 --> 00:24:08,306 A:middle
of the circular imageView
at design time as well.

511
00:24:08,306 --> 00:24:09,916 A:middle
Let me show you how to do that.

512
00:24:10,966 --> 00:24:12,956 A:middle
We've added a couple of
new source attributes

513
00:24:12,956 --> 00:24:14,506 A:middle
that you can add
to your classes.

514
00:24:15,036 --> 00:24:16,886 A:middle
The first is IBDesignable.

515
00:24:17,416 --> 00:24:19,236 A:middle
It goes right here at
the top of your class,

516
00:24:20,006 --> 00:24:21,616 A:middle
goes in the same
place for Objective-C,

517
00:24:21,616 --> 00:24:23,146 A:middle
spelled a little
bit differently,

518
00:24:23,146 --> 00:24:24,756 A:middle
but it has the exact
same result.

519
00:24:25,586 --> 00:24:27,386 A:middle
Interface Builder is
able to take our class,

520
00:24:27,966 --> 00:24:30,536 A:middle
build our framework,
instantiate it,

521
00:24:30,536 --> 00:24:32,166 A:middle
and render it live
into the canvas.

522
00:24:32,776 --> 00:24:33,706 A:middle
You can see it here.

523
00:24:34,496 --> 00:24:36,006 A:middle
Now, you may be wondering,

524
00:24:37,146 --> 00:24:38,626 A:middle
"where is that silhouette
coming from?"

525
00:24:40,826 --> 00:24:43,386 A:middle
Down here in my source file
I've overridden a new method,

526
00:24:43,386 --> 00:24:45,036 A:middle
prepareForInterfaceBuilder.

527
00:24:45,696 --> 00:24:48,696 A:middle
This is going to be invoked on
our view right before it renders

528
00:24:48,696 --> 00:24:51,066 A:middle
into the canvas, and it's
a last minute chance for us

529
00:24:51,066 --> 00:24:52,416 A:middle
to do any additional setup.

530
00:24:53,066 --> 00:24:54,566 A:middle
Here, I'm simply making sure

531
00:24:54,566 --> 00:24:56,166 A:middle
that we always have
an image prepared.

532
00:24:58,386 --> 00:25:01,736 A:middle
Now, I'd like to just
configure my image directly

533

534
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

535
00:24:58,386 --> 00:25:01,736 A:middle
Now, I'd like to just
configure my image directly

536
00:25:01,736 --> 00:25:04,696 A:middle
in Interface Builder, and
option in my saturation as well.

537
00:25:05,996 --> 00:25:06,756 A:middle
No problem.

538
00:25:07,036 --> 00:25:10,466 A:middle
We have another new source
attribute: IBInspectable.

539
00:25:10,466 --> 00:25:14,036 A:middle
I can put it here in front of
my property, and when I return

540
00:25:14,036 --> 00:25:18,326 A:middle
to Interface Builder
I can see in Inspector

541
00:25:18,326 --> 00:25:20,396 A:middle
that they have two new fields
that've directly derived

542
00:25:20,396 --> 00:25:21,136 A:middle
these values.

543
00:25:22,566 --> 00:25:23,466 A:middle
Let's pick another image.

544
00:25:25,036 --> 00:25:28,816 A:middle
All right, that looks great,
but when the user comes here,

545
00:25:28,816 --> 00:25:32,836 A:middle
I'd like them to be focused on
this photograph, not distracted

546
00:25:32,836 --> 00:25:34,756 A:middle
by the bright colors
in this player image.

547
00:25:35,446 --> 00:25:36,986 A:middle
That's where our
saturation comes into play.

548
00:25:37,956 --> 00:25:39,246 A:middle
Let's tone this down a bit.

549
00:25:39,246 --> 00:25:41,126 A:middle
You can see the canvas
is updating right away.

550
00:25:41,966 --> 00:25:43,246 A:middle
And things look good.

551
00:25:43,246 --> 00:25:45,956 A:middle
Let's make sure it looks
good with another image.

552
00:25:47,156 --> 00:25:49,186 A:middle
Oh, yikes, she got squished.

553
00:25:49,846 --> 00:25:53,036 A:middle
I'm not sure what's
going on here,

554
00:25:53,036 --> 00:25:54,796 A:middle
but I suspect it probably
has something to do

555
00:25:54,796 --> 00:25:56,706 A:middle
with my prepareImage
function that I just wrote.

556
00:25:56,706 --> 00:25:59,686 A:middle
I'm going to go ahead and
put a breakpoint here.

557

558
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

559
00:26:02,176 --> 00:26:07,556 A:middle
And with my view selected, I
can choose Debug Selected Views.

560
00:26:08,156 --> 00:26:09,846 A:middle
Interface Builder is going
to kick off a request

561
00:26:09,846 --> 00:26:11,346 A:middle
to render this view
live in the canvas

562
00:26:11,626 --> 00:26:13,296 A:middle
so that I can see
just what's going on.

563
00:26:14,516 --> 00:26:20,096 A:middle
[ Applause ]

564
00:26:20,596 --> 00:26:23,266 A:middle
Now, I'm not sure what
the problem is here,

565
00:26:23,266 --> 00:26:24,046 A:middle
but stepping into the code...

566
00:26:24,046 --> 00:26:26,746 A:middle
Oh, actually I can
see it right away.

567
00:26:27,396 --> 00:26:29,376 A:middle
Bringing up the Quick
Help -- the Quick Look --

568
00:26:29,376 --> 00:26:31,836 A:middle
on this rectangle, I can see
it really is a rectangle.

569
00:26:31,836 --> 00:26:33,346 A:middle
It's much wider than it is tall.

570
00:26:33,346 --> 00:26:35,716 A:middle
And interface Builder is
taking that rectangular image,

571
00:26:35,716 --> 00:26:38,846 A:middle
or my view is, and squishing
it down into that square

572
00:26:38,846 --> 00:26:40,266 A:middle
and we're getting
this crushed image.

573
00:26:40,946 --> 00:26:44,716 A:middle
I think what I want instead
is to produce a square image

574
00:26:45,126 --> 00:26:47,616 A:middle
and draw the source image
centered in the destination.

575
00:26:50,286 --> 00:26:51,886 A:middle
Interface Builder is going
to automatically pick

576
00:26:51,886 --> 00:26:53,776 A:middle
up my changes, re-render
the canvas...

577
00:26:53,906 --> 00:26:55,516 A:middle
and I can see we're in business.

578
00:26:55,896 --> 00:26:59,476 A:middle
Things look great.

579
00:26:59,476 --> 00:26:59,766 A:middle
All right.

580

581
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

582
00:27:00,196 --> 00:27:01,266 A:middle
I'm done with this scene.

583
00:27:02,916 --> 00:27:05,536 A:middle
My next set of steps after
this is typically to head

584
00:27:05,536 --> 00:27:09,366 A:middle
over to my iPad storyboard and
make much the same set of edits.

585
00:27:09,366 --> 00:27:11,086 A:middle
Let me close this out...

586
00:27:11,086 --> 00:27:15,636 A:middle
head over to my iPad
storyboard...

587
00:27:16,076 --> 00:27:18,206 A:middle
and [sighs] I can see that
I have a lot of work to do.

588
00:27:18,496 --> 00:27:20,156 A:middle
I haven't even started
on this scene yet.

589
00:27:20,916 --> 00:27:21,736 A:middle
No problem.

590
00:27:21,996 --> 00:27:23,936 A:middle
Xcode 6 solves this
for us as well.

591
00:27:24,296 --> 00:27:27,606 A:middle
We have a new feature, Universal
Storyboards, that allows us

592
00:27:27,606 --> 00:27:28,946 A:middle
to build a single storyboard

593
00:27:28,946 --> 00:27:30,686 A:middle
to target both the
iPad and the iPhone.

594
00:27:30,686 --> 00:27:34,436 A:middle
I'm going to head back over
to my iPhone storyboard.

595
00:27:36,171 --> 00:27:38,171 A:middle
[ Applause ]

596
00:27:38,326 --> 00:27:38,666 A:middle
Thank you.

597
00:27:38,666 --> 00:27:40,616 A:middle
And I want to show you just
how easy it is to get started

598
00:27:40,616 --> 00:27:41,866 A:middle
with Universal Storyboards.

599
00:27:45,086 --> 00:27:48,566 A:middle
In the File Inspector there's a
new checkbox, Use Size Classes.

600
00:27:48,566 --> 00:27:50,066 A:middle
I'm going to go ahead
and enable them.

601
00:27:51,036 --> 00:27:53,586 A:middle
Size classes are a
foundational new technology

602
00:27:53,586 --> 00:27:54,906 A:middle
that form the underpinnings

603
00:27:54,906 --> 00:27:57,496 A:middle
of the new adaptive user
interfaces in iOS 8.

604
00:27:58,956 --> 00:28:01,656 A:middle
With size classes, I can
customize which views

605

606
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

607
00:27:58,956 --> 00:28:01,656 A:middle
With size classes, I can
customize which views

608
00:28:01,656 --> 00:28:03,906 A:middle
and constraints participate
in each of my layouts.

609
00:28:05,906 --> 00:28:09,556 A:middle
Adopting size classes also
upgrades all of the segues

610
00:28:09,556 --> 00:28:12,046 A:middle
in my storyboard to their
new adaptive counterparts

611
00:28:12,046 --> 00:28:14,456 A:middle
from iOS 8 -- segues
that, for example,

612
00:28:14,556 --> 00:28:16,536 A:middle
know to present a
popover on the iPad

613
00:28:16,536 --> 00:28:18,306 A:middle
and a modal transition
on the iPhone.

614
00:28:19,566 --> 00:28:23,366 A:middle
Now, you can see Interface
Builder is rendering my canvas

615
00:28:23,366 --> 00:28:24,676 A:middle
here as this square.

616
00:28:25,586 --> 00:28:27,746 A:middle
This is an abstract
representation that's meant

617
00:28:27,746 --> 00:28:30,396 A:middle
to remind you that you're not
editing for a specific device,

618
00:28:30,676 --> 00:28:32,406 A:middle
you're editing for all devices.

619
00:28:33,286 --> 00:28:35,736 A:middle
If I want to see how things
look on a specific device,

620
00:28:36,306 --> 00:28:39,866 A:middle
I can open the Enhanced
Preview Editor in Xcode 6.

621
00:28:40,806 --> 00:28:43,146 A:middle
Here you can see that auto
layout does a great job

622
00:28:43,686 --> 00:28:46,806 A:middle
of translating my interface to
the screen of a 4-inch iPhone.

623
00:28:48,096 --> 00:28:53,146 A:middle
I can zoom out and I can
add more screens as well.

624
00:28:53,896 --> 00:28:55,476 A:middle
Here's how my interface
will be presented

625
00:28:55,576 --> 00:28:56,856 A:middle
on an iPad in portrait.

626
00:28:58,886 --> 00:29:00,106 A:middle
And you can see as well

627

628
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

629
00:28:58,886 --> 00:29:00,106 A:middle
And you can see as well

630
00:29:00,106 --> 00:29:03,246 A:middle
that auto layout has translated
my screen all the way up.

631
00:29:03,336 --> 00:29:06,226 A:middle
But I had a custom
layout just for iPad.

632
00:29:07,326 --> 00:29:08,826 A:middle
How do I achieve that
with this new feature?

633
00:29:09,666 --> 00:29:11,096 A:middle
Well, let's get started.

634
00:29:11,536 --> 00:29:12,766 A:middle
The first order of business is

635
00:29:12,766 --> 00:29:14,416 A:middle
that this top bar
should be short.

636
00:29:14,416 --> 00:29:16,436 A:middle
I'm going to go ahead
and shorten it up

637
00:29:17,396 --> 00:29:19,376 A:middle
and tell Interface Builder
to update the constants

638
00:29:19,376 --> 00:29:21,716 A:middle
of all my constraints from
the frames in the canvas.

639
00:29:22,106 --> 00:29:25,406 A:middle
And, well, you can see
they both got short.

640
00:29:25,786 --> 00:29:28,066 A:middle
Well, I'm editing both
interfaces at once;

641
00:29:28,066 --> 00:29:29,226 A:middle
it's a universal storyboard.

642
00:29:29,346 --> 00:29:30,716 A:middle
How do I edit just one of them?

643
00:29:30,716 --> 00:29:33,126 A:middle
Let me undo this change.

644
00:29:35,426 --> 00:29:38,576 A:middle
Down here in the bottom center
of the canvas is a new control

645
00:29:38,576 --> 00:29:41,016 A:middle
for picking which size
class you're editing within.

646
00:29:41,526 --> 00:29:43,246 A:middle
Right now we're editing
the size class

647
00:29:43,246 --> 00:29:45,066 A:middle
for Any width at Any height.

648
00:29:45,066 --> 00:29:48,446 A:middle
It's the basis for all of them;
all layouts inherit from this.

649
00:29:49,566 --> 00:29:51,646 A:middle
It's represented as this
choice here in the center.

650
00:29:52,486 --> 00:29:55,936 A:middle
As I move away from the center
things get more specific.

651
00:29:57,056 --> 00:30:00,656 A:middle
Down here in the bottom right
corner is the Regular width,

652

653
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

654
00:29:57,056 --> 00:30:00,656 A:middle
Down here in the bottom right
corner is the Regular width,

655
00:30:00,656 --> 00:30:01,556 A:middle
Regular height layout.

656
00:30:01,866 --> 00:30:04,706 A:middle
It's the largest, and it's
the basis of my iPad layouts.

657
00:30:05,856 --> 00:30:06,706 A:middle
I'm going to choose it,

658
00:30:06,706 --> 00:30:09,516 A:middle
and Interface Builder enlarges
the canvas to remind me

659
00:30:09,516 --> 00:30:11,706 A:middle
that I'm working in a
specific size class now.

660
00:30:14,226 --> 00:30:15,896 A:middle
Let's go ahead and make
that bar shorter again

661
00:30:18,016 --> 00:30:19,136 A:middle
and update the constants.

662
00:30:21,866 --> 00:30:25,006 A:middle
And now you can see that the
iPad has changed while the

663
00:30:25,006 --> 00:30:26,756 A:middle
iPhone has remained just
the way that I designed it.

664
00:30:28,196 --> 00:30:29,346 A:middle
Down here in the bottom left

665
00:30:29,346 --> 00:30:31,846 A:middle
of the scene I have a
completely new layout in mind.

666
00:30:32,296 --> 00:30:34,196 A:middle
Rather than just editing
the constraint constants,

667
00:30:34,506 --> 00:30:35,676 A:middle
I want new constraints.

668
00:30:36,936 --> 00:30:37,696 A:middle
No problem.

669
00:30:37,956 --> 00:30:39,786 A:middle
I'll select all three
of these views

670
00:30:40,176 --> 00:30:42,636 A:middle
and have Interface Builder
clear the constraints

671
00:30:43,056 --> 00:30:46,306 A:middle
in only this size
class and reposition.

672
00:30:47,296 --> 00:30:49,116 A:middle
I'm going to have the
image front and center.

673
00:30:56,026 --> 00:30:57,126 A:middle
Hmm, right about there?

674
00:30:57,126 --> 00:30:58,706 A:middle
Maybe a little lower.

675
00:30:59,626 --> 00:31:02,786 A:middle
And I've sized this
image view arbitrarily.

676

677
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

678
00:30:59,626 --> 00:31:02,786 A:middle
And I've sized this
image view arbitrarily.

679
00:31:02,906 --> 00:31:04,156 A:middle
I need to pin its size.

680
00:31:04,606 --> 00:31:06,616 A:middle
I'll start with an
explicit width constraint.

681
00:31:09,356 --> 00:31:11,516 A:middle
And now I've said that the
width should be, you'know,

682
00:31:11,616 --> 00:31:14,126 A:middle
some constant -- whatever this
happens to be (120 points).

683
00:31:14,126 --> 00:31:16,716 A:middle
I want the height to be the
same, but rather than duplicate

684
00:31:16,716 --> 00:31:19,166 A:middle
in the constant,
new since last year,

685
00:31:19,166 --> 00:31:21,916 A:middle
I can add an aspect ratio
constraint saying the width

686
00:31:21,916 --> 00:31:22,946 A:middle
and the height should be equal.

687
00:31:26,516 --> 00:31:30,516 A:middle
[ Applause ]

688
00:31:31,016 --> 00:31:36,000 A:middle
[ Background Sounds ]

689
00:31:36,516 --> 00:31:43,056 A:middle
[ Laughter and applause ]

690
00:31:43,556 --> 00:31:43,646 A:middle
Ahh...!

691
00:31:45,481 --> 00:31:47,481 A:middle
[ Laughter ]

692
00:31:47,946 --> 00:31:50,776 A:middle
I could continue those edits,
position the views underneath,

693
00:31:50,776 --> 00:31:52,796 A:middle
and have Interface Builder
add the remaining constraints

694
00:31:53,026 --> 00:31:55,266 A:middle
to produce an iPad
layout that was unique

695
00:31:55,266 --> 00:31:56,596 A:middle
to the iPad interface,

696
00:31:56,596 --> 00:31:59,536 A:middle
while maintaining my iPhone
layout just the way that it was.

697

698
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

699
00:32:00,096 --> 00:32:03,266 A:middle
Now, I'd like to turn it over to
Ken Orr to tell you what's new

700
00:32:03,266 --> 00:32:04,676 A:middle
with debugging in Xcode 6.

701
00:32:05,516 --> 00:32:11,886 A:middle
[ Applause ]

702
00:32:12,386 --> 00:32:14,086 A:middle
>> All right.

703
00:32:14,136 --> 00:32:14,876 A:middle
Thanks, Jon.

704
00:32:15,706 --> 00:32:16,186 A:middle
Good morning.

705
00:32:17,346 --> 00:32:19,726 A:middle
So I've just taken over
the photo details screen

706
00:32:19,726 --> 00:32:22,806 A:middle
from another engineer on our
Shutterbugs team, and I'd love

707
00:32:22,806 --> 00:32:24,466 A:middle
to give you a sneak
peek of that UI now.

708
00:32:25,316 --> 00:32:27,836 A:middle
OK, so the first thing I'm going
to do is I'm going to run...

709
00:32:32,646 --> 00:32:35,386 A:middle
and then we will sign
in to the game...

710
00:32:36,466 --> 00:32:39,686 A:middle
I'll navigate to this
in-progress game, and I'm going

711
00:32:39,686 --> 00:32:41,316 A:middle
to click on this
particular picture.

712
00:32:41,906 --> 00:32:44,666 A:middle
And then here we are at
the Photo Details UI.

713
00:32:45,056 --> 00:32:48,116 A:middle
So what we're seeing in
this case is a picture

714
00:32:48,116 --> 00:32:49,336 A:middle
that Paula took.

715
00:32:49,956 --> 00:32:53,466 A:middle
We see a list of all the other
players in the game along

716
00:32:53,466 --> 00:32:55,656 A:middle
with comments they've made
on this particular photo

717
00:32:55,926 --> 00:32:57,206 A:middle
and whether they like it or not.

718
00:32:59,406 --> 00:33:02,566 A:middle
And, you know, as I
look at this UI here,

719

720
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

721
00:32:59,406 --> 00:33:02,566 A:middle
And, you know, as I
look at this UI here,

722
00:33:03,546 --> 00:33:05,806 A:middle
I'm a little bit
skeptical that all

723
00:33:05,806 --> 00:33:08,496 A:middle
of these players are
missing their picture.

724
00:33:09,056 --> 00:33:10,856 A:middle
So they're all showing this
kind of placeholder image,

725
00:33:10,856 --> 00:33:12,956 A:middle
and that's not something
I'm expecting to see here.

726
00:33:13,676 --> 00:33:15,086 A:middle
So let's go ahead and
let's dig into that.

727
00:33:16,656 --> 00:33:21,576 A:middle
Now, I'm relatively new to
this code base, but I do know

728
00:33:21,576 --> 00:33:22,786 A:middle
that our problem here,

729
00:33:22,786 --> 00:33:24,406 A:middle
it's going to be in
one of two places.

730
00:33:24,836 --> 00:33:27,316 A:middle
So it's either going to be
on the model side of things,

731
00:33:27,536 --> 00:33:31,026 A:middle
that maybe the image data just
isn't there, or it's going to be

732
00:33:31,026 --> 00:33:33,746 A:middle
over on the UI side of
things: We have the image data,

733
00:33:33,746 --> 00:33:35,196 A:middle
but we're not pushing
it to the screen.

734
00:33:35,836 --> 00:33:39,276 A:middle
So we want to figure out
exactly where that problem is.

735
00:33:40,536 --> 00:33:42,666 A:middle
So the first thing I
need to do here is figure

736
00:33:42,666 --> 00:33:46,476 A:middle
out what view controller is
responsible for this view here.

737
00:33:47,146 --> 00:33:51,646 A:middle
And I think it is this guy,
photoDetailViewController.

738
00:33:51,946 --> 00:33:54,056 A:middle
So what I want to do is I
want to set a breakpoint

739
00:33:54,576 --> 00:33:56,456 A:middle
in this view to appear.

740
00:33:57,676 --> 00:33:59,876 A:middle
And then let's try to
trigger that and see

741
00:33:59,876 --> 00:34:01,316 A:middle
if we are in the right place.

742

743
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

744
00:33:59,876 --> 00:34:01,316 A:middle
if we are in the right place.

745
00:34:02,096 --> 00:34:06,746 A:middle
We'll navigate away, we'll
come back, and there we go.

746
00:34:06,746 --> 00:34:08,346 A:middle
OK, we hit the breakpoint, good.

747
00:34:08,576 --> 00:34:10,056 A:middle
So we're probably
in the right place.

748
00:34:10,976 --> 00:34:14,025 A:middle
But I'd like to be really sure
that we're in the right place.

749
00:34:14,696 --> 00:34:18,576 A:middle
And I'm going to do that by
using the brand-new Quick Look

750
00:34:18,576 --> 00:34:20,235 A:middle
for UIView in Xcode.

751
00:34:20,746 --> 00:34:22,896 A:middle
So now I can just mouse
over this view here

752
00:34:22,896 --> 00:34:24,746 A:middle
to get the data tip,
which is the view owned

753
00:34:24,746 --> 00:34:26,866 A:middle
by this view controller,
and I can click

754
00:34:26,866 --> 00:34:28,106 A:middle
on our little Quick Look button.

755
00:34:28,496 --> 00:34:30,606 A:middle
And just like that I
can see a rendering.

756
00:34:31,516 --> 00:34:36,056 A:middle
[ Applause ]

757
00:34:36,556 --> 00:34:39,536 A:middle
Yeah. I can see a rendering
of this view or any subclass

758
00:34:39,536 --> 00:34:42,096 A:middle
of UIView right here in
Xcode while I'm stepping

759
00:34:42,096 --> 00:34:42,646 A:middle
through my code.

760
00:34:43,036 --> 00:34:44,946 A:middle
And of course if you're
developing a Mac app,

761
00:34:45,186 --> 00:34:46,576 A:middle
this works great for NSView too.

762
00:34:46,576 --> 00:34:48,235 A:middle
All right.

763
00:34:48,516 --> 00:34:51,835 A:middle
So now, step one complete; we
know we're in the right place.

764
00:34:52,056 --> 00:34:57,476 A:middle
Good. But what we care
about is the model objects.

765
00:34:58,246 --> 00:35:02,706 A:middle
And I think our model objects
are these GameComments.

766

767
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

768
00:34:58,246 --> 00:35:02,706 A:middle
And I think our model objects
are these GameComments.

769
00:35:03,076 --> 00:35:06,496 A:middle
Looks like we have a GameComment
for every row of data here.

770
00:35:06,906 --> 00:35:09,006 A:middle
So these rows are
backed by a GameComment.

771
00:35:10,406 --> 00:35:15,946 A:middle
Now, when I'm debugging, I
really love to use Quick Look.

772
00:35:16,336 --> 00:35:17,446 A:middle
I'm a really visual guy.

773
00:35:17,576 --> 00:35:21,496 A:middle
Quick Look is a really great
way to visualize my objects

774
00:35:21,496 --> 00:35:22,676 A:middle
when I'm stepping
through my code.

775
00:35:23,916 --> 00:35:27,166 A:middle
Wouldn't it be great if we
could have custom Quick Look

776
00:35:27,166 --> 00:35:29,846 A:middle
representations for
our own classes?

777
00:35:30,876 --> 00:35:33,436 A:middle
Well, in fact, now inside of
Xcode you can do just that.

778
00:35:33,796 --> 00:35:35,026 A:middle
And we've gone through
our project

779
00:35:35,026 --> 00:35:37,086 A:middle
and done it all throughout
our classes.

780
00:35:37,486 --> 00:35:39,266 A:middle
Let's see if we have
one for this GameComment

781
00:35:39,266 --> 00:35:40,596 A:middle
that we're investigating.

782
00:35:41,866 --> 00:35:43,186 A:middle
And sure enough we do.

783
00:35:43,186 --> 00:35:46,166 A:middle
And what we'll see is

784
00:35:46,166 --> 00:35:50,086 A:middle
that somebody's implemented this
new debugQuickLookObject method.

785
00:35:50,666 --> 00:35:53,496 A:middle
So this is a method that you can
implement in your own classes.

786
00:35:54,486 --> 00:35:56,426 A:middle
And it's a method
that Xcode will call

787
00:35:56,426 --> 00:35:59,056 A:middle
when you initiate a Quick
Look from the debugger.

788

789
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

790
00:36:00,796 --> 00:36:03,266 A:middle
Now, from this method
you can return anything

791
00:36:03,266 --> 00:36:05,176 A:middle
that has a built-in
Quick Look inside Xcode.

792
00:36:05,176 --> 00:36:11,086 A:middle
So maybe an image, or a
Bézier path, or a string,

793
00:36:12,036 --> 00:36:15,156 A:middle
or in this case an attributed
string, which is going

794
00:36:15,156 --> 00:36:17,576 A:middle
to let us have a little bit
more complex visualization.

795
00:36:17,576 --> 00:36:20,496 A:middle
So we're going to be able
to take text and an image

796
00:36:20,636 --> 00:36:24,076 A:middle
and put those together
in a nice visualization

797
00:36:24,266 --> 00:36:25,176 A:middle
of our model object.

798
00:36:26,006 --> 00:36:26,646 A:middle
Now, I'm really curious.

799
00:36:26,646 --> 00:36:28,096 A:middle
I want to see what this
actually looks like.

800
00:36:28,776 --> 00:36:32,446 A:middle
So let's go back to where we're
paused and I'm going to mouse

801
00:36:32,446 --> 00:36:34,286 A:middle
over our GameComments array.

802
00:36:34,286 --> 00:36:36,726 A:middle
I can see that there's three of
them, which matches what I see

803
00:36:36,726 --> 00:36:37,986 A:middle
on the screen; that's good.

804
00:36:38,706 --> 00:36:41,626 A:middle
And then I'm just going to press
the Quick Look button, and,

805
00:36:41,626 --> 00:36:46,326 A:middle
boom, just like that, I'm seeing
my model object exactly the way

806
00:36:46,516 --> 00:36:46,966 A:middle
I wanted to see it.

807
00:36:47,516 --> 00:36:50,596 A:middle
[ Applause ]

808
00:36:51,096 --> 00:36:52,956 A:middle
And of course we can
arrow down through these.

809
00:36:53,836 --> 00:36:54,576 A:middle
Annnd... great.

810
00:36:54,696 --> 00:36:56,856 A:middle
So now we know we've
eliminated the model

811
00:36:57,426 --> 00:36:59,516 A:middle
as being our source
of our problem here.

812
00:36:59,516 --> 00:37:01,266 A:middle
We can see the player
image is right here,

813

814
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

815
00:36:59,516 --> 00:37:01,266 A:middle
We can see the player
image is right here,

816
00:37:01,866 --> 00:37:03,636 A:middle
so we know it's not
a model side issue.

817
00:37:04,926 --> 00:37:06,156 A:middle
So let's get rid
of this breakpoint

818
00:37:06,156 --> 00:37:07,736 A:middle
and let's continue onward.

819
00:37:10,226 --> 00:37:15,466 A:middle
OK, so the issue must be up
here in the UI, and, you know,

820
00:37:15,466 --> 00:37:19,306 A:middle
whatever view is responsible
for drawing this bit

821
00:37:19,306 --> 00:37:21,286 A:middle
of UI isn't doing its job.

822
00:37:22,986 --> 00:37:25,326 A:middle
Now, like I said, I'm
new to this code base.

823
00:37:25,896 --> 00:37:29,216 A:middle
I'm not really sure what
views are responsible

824
00:37:29,476 --> 00:37:32,076 A:middle
for pushing these particular
pixels to the screen.

825
00:37:33,336 --> 00:37:34,546 A:middle
So how are we going
to deal with that?

826
00:37:35,296 --> 00:37:37,786 A:middle
How are we going to
debug this issue?

827
00:37:39,486 --> 00:37:44,766 A:middle
Well, Xcode 6 introduces a brand
new way to visualize your app

828
00:37:45,176 --> 00:37:45,796 A:middle
when you're debugging.

829
00:37:46,486 --> 00:37:48,856 A:middle
So you can press this new
Debug View Hierarchy button

830
00:37:48,856 --> 00:37:49,236 A:middle
right here.

831
00:37:50,246 --> 00:37:52,546 A:middle
And Xcode will pull
in a representation

832
00:37:52,616 --> 00:37:55,856 A:middle
of your entire view hierarchy
right inside of Xcode

833
00:37:56,516 --> 00:37:59,676 A:middle
where you can see things like
snapshots of all your views,

834

835
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

836
00:38:00,176 --> 00:38:02,116 A:middle
their frames, and all sorts

837
00:38:02,116 --> 00:38:03,846 A:middle
of other interesting
properties that...

838
00:38:03,846 --> 00:38:05,066 A:middle
when you combine them together,

839
00:38:05,436 --> 00:38:07,676 A:middle
they help to give you a
really great understanding

840
00:38:07,676 --> 00:38:11,016 A:middle
of why your app looks
the way it does.

841
00:38:11,446 --> 00:38:12,336 A:middle
Or maybe more importantly,

842
00:38:12,336 --> 00:38:14,756 A:middle
why it doesn't quite
match your expectations.

843
00:38:15,796 --> 00:38:19,046 A:middle
So I can, for example, let's
click on this label here

844
00:38:19,536 --> 00:38:20,836 A:middle
and open the Inspector.

845
00:38:22,176 --> 00:38:25,116 A:middle
And I can see that
this is a UI label.

846
00:38:25,696 --> 00:38:26,926 A:middle
I can see its text.

847
00:38:27,256 --> 00:38:28,456 A:middle
I can see its font.

848
00:38:28,696 --> 00:38:30,526 A:middle
I can see its font color.

849
00:38:31,106 --> 00:38:34,296 A:middle
All the things that I'm used to
seeing when I'm designing my UI

850
00:38:34,476 --> 00:38:37,136 A:middle
in IB, well, I can
see those right now

851
00:38:37,136 --> 00:38:38,666 A:middle
when I'm debugging it as well.

852
00:38:39,376 --> 00:38:40,296 A:middle
Really, really powerful.

853
00:38:41,656 --> 00:38:43,286 A:middle
So what we care about, though,

854
00:38:43,286 --> 00:38:45,526 A:middle
is this little picture
right here.

855
00:38:45,766 --> 00:38:46,886 A:middle
So let's select that guy.

856
00:38:48,676 --> 00:38:52,756 A:middle
And what I'm interested in
seeing is what cell owns

857
00:38:52,756 --> 00:38:55,296 A:middle
that picture, so what cell
is probably doing the wiring

858
00:38:55,296 --> 00:38:57,756 A:middle
up of the model data
to the UI controls.

859
00:38:58,736 --> 00:39:03,736 A:middle
Now, I can use Xcode's jump bar
to see the entire view hierarchy

860

861
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

862
00:38:58,736 --> 00:39:03,736 A:middle
Now, I can use Xcode's jump bar
to see the entire view hierarchy

863
00:39:03,736 --> 00:39:07,526 A:middle
of the selected object, and
so I'm going to go up here

864
00:39:07,526 --> 00:39:09,286 A:middle
and I'm going to see that...

865
00:39:11,266 --> 00:39:14,716 A:middle
that view is in this
gameCommentTableView cell.

866
00:39:15,396 --> 00:39:17,696 A:middle
So let's find that over
here in the navigator,

867
00:39:17,816 --> 00:39:21,426 A:middle
and it's this guy, OK.

868
00:39:21,986 --> 00:39:26,486 A:middle
Looks like a very simple class.

869
00:39:27,536 --> 00:39:30,776 A:middle
It has this useGameComment
method

870
00:39:30,776 --> 00:39:34,376 A:middle
which takes the model data, and
then it looks like it wires it

871
00:39:35,416 --> 00:39:37,126 A:middle
up to the UI controls.

872
00:39:37,326 --> 00:39:41,276 A:middle
So what I see here is I see
that the player's name is pushed

873
00:39:41,276 --> 00:39:43,386 A:middle
into this player label.

874
00:39:43,776 --> 00:39:46,806 A:middle
I see that the comment is
pushed into the comment label.

875
00:39:47,916 --> 00:39:50,796 A:middle
What I don't see is I don't
see us taking that player image

876
00:39:50,796 --> 00:39:52,856 A:middle
and pushing that into anything.

877
00:39:53,546 --> 00:39:54,916 A:middle
So that's probably
our problem here.

878
00:39:55,776 --> 00:39:57,756 A:middle
And it was really easy to find

879
00:39:57,756 --> 00:39:59,636 A:middle
that using Xcode's
new View Debugger.

880

881
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

882
00:40:00,396 --> 00:40:01,836 A:middle
So I'll go ahead
and fix that later.

883
00:40:02,186 --> 00:40:03,756 A:middle
And that is probably
going to take care

884
00:40:03,756 --> 00:40:05,726 A:middle
of this missing image
that we're seeing.

885
00:40:06,996 --> 00:40:10,666 A:middle
But, you know, as I
look at the UI here,

886
00:40:12,056 --> 00:40:15,986 A:middle
it doesn't quite match the
design that I was looking

887
00:40:15,986 --> 00:40:17,236 A:middle
at earlier with my designer.

888
00:40:17,506 --> 00:40:20,136 A:middle
So there's supposed to actually
be a little button right

889
00:40:20,136 --> 00:40:21,986 A:middle
around here in the
bottom left of the picture

890
00:40:23,196 --> 00:40:25,126 A:middle
that lets me like this image.

891
00:40:25,126 --> 00:40:26,916 A:middle
So I'm supposed to come
to this UI and say,

892
00:40:26,916 --> 00:40:27,986 A:middle
"I like Paula's picture."

893
00:40:28,826 --> 00:40:30,436 A:middle
But right now I can't do that.

894
00:40:31,196 --> 00:40:35,056 A:middle
Now the question then
is where is that button?

895
00:40:36,386 --> 00:40:39,796 A:middle
Well, maybe the button was never
added to the view hierarchy.

896
00:40:40,956 --> 00:40:42,646 A:middle
Maybe it's hanging out
off-screen somewhere.

897
00:40:43,606 --> 00:40:45,206 A:middle
Maybe it's the wrong size.

898
00:40:45,706 --> 00:40:47,956 A:middle
Maybe its alpha component
is wrong.

899
00:40:47,956 --> 00:40:49,406 A:middle
Maybe it's hiding
behind another view.

900
00:40:49,706 --> 00:40:52,776 A:middle
There's all sorts of really
visual kinds of problems

901
00:40:52,936 --> 00:40:54,246 A:middle
that we could have
with this control.

902
00:40:54,246 --> 00:40:56,816 A:middle
And they're all made
really easy to track

903
00:40:56,816 --> 00:40:58,346 A:middle
down with the new View Debugger.

904
00:40:58,616 --> 00:41:03,076 A:middle
So let's go back over here
to Xcode and let's look

905

906
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

907
00:40:58,616 --> 00:41:03,076 A:middle
So let's go back over here
to Xcode and let's look

908
00:41:03,076 --> 00:41:04,076 A:middle
at our view hierarchy again.

909
00:41:04,076 --> 00:41:05,616 A:middle
So what I want to do
now is I just want

910
00:41:05,616 --> 00:41:06,796 A:middle
to explore this view hierarchy.

911
00:41:06,796 --> 00:41:10,526 A:middle
I want to look through and see
if that button is in fact here.

912
00:41:11,416 --> 00:41:13,416 A:middle
So the first thing I'll
do is I'll just sort

913
00:41:13,416 --> 00:41:15,316 A:middle
of twist this guy sideways.

914
00:41:15,316 --> 00:41:17,576 A:middle
I want to peek behind
some of these other views.

915
00:41:20,516 --> 00:41:23,356 A:middle
[ Applause ]

916
00:41:23,856 --> 00:41:27,906 A:middle
Sure. And then I want to
pull these views apart.

917
00:41:28,056 --> 00:41:32,086 A:middle
So let's do that and, hey,

918
00:41:32,086 --> 00:41:34,666 A:middle
I see a little something
peeking out right back here.

919
00:41:36,126 --> 00:41:37,266 A:middle
That could be our button,

920
00:41:37,596 --> 00:41:38,836 A:middle
but there's still
some stuff in the way.

921
00:41:39,116 --> 00:41:41,326 A:middle
So I want to peel back some
of the views in the front

922
00:41:41,326 --> 00:41:44,296 A:middle
so I can just hide things
from the front backwards.

923
00:41:45,266 --> 00:41:46,596 A:middle
Yeah, very nice.

924
00:41:47,516 --> 00:41:51,576 A:middle
[ Applause ]

925
00:41:52,076 --> 00:41:54,816 A:middle
And sure enough our button
is hanging out right here.

926
00:41:55,546 --> 00:41:57,676 A:middle
So let's select that.

927
00:41:57,676 --> 00:41:59,876 A:middle
And the next question
I'm asking myself is,

928
00:41:59,876 --> 00:42:01,946 A:middle
"Why is our button down here?"

929

930
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

931
00:41:59,876 --> 00:42:01,946 A:middle
"Why is our button down here?"

932
00:42:02,496 --> 00:42:05,206 A:middle
And I know we're using auto
layout in this project,

933
00:42:05,786 --> 00:42:08,456 A:middle
so I'd like to look
at the constraints

934
00:42:08,456 --> 00:42:10,556 A:middle
that we're using here so
I can show the constraints

935
00:42:10,726 --> 00:42:11,776 A:middle
for this particular view.

936
00:42:12,946 --> 00:42:16,316 A:middle
And just like that, Xcode
hides all the other views

937
00:42:16,316 --> 00:42:19,246 A:middle
that aren't relevant and
shows me just the constraints

938
00:42:19,246 --> 00:42:21,096 A:middle
for this particular control.

939
00:42:22,516 --> 00:42:27,516 A:middle
[ Applause ]

940
00:42:28,016 --> 00:42:31,206 A:middle
And we can really easily see
that the button is pinned

941
00:42:31,206 --> 00:42:34,366 A:middle
to the bottom left, which
is not where we want it.

942
00:42:34,626 --> 00:42:37,466 A:middle
We want it pinned to the
bottom of the picture above.

943
00:42:38,156 --> 00:42:40,906 A:middle
So that's something that
might be really hard to track

944
00:42:40,906 --> 00:42:44,046 A:middle
down before but is really
easy to track down now.

945
00:42:46,686 --> 00:42:53,256 A:middle
OK, so with Xcode 6, as we've
seen, you have the ability

946
00:42:53,256 --> 00:42:54,406 A:middle
to visualize your app

947
00:42:54,446 --> 00:42:56,996 A:middle
when you're debugging
like never before.

948
00:42:58,146 --> 00:43:00,276 A:middle
You can create custom
Quick Look representations

949

950
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

951
00:42:58,146 --> 00:43:00,276 A:middle
You can create custom
Quick Look representations

952
00:43:00,326 --> 00:43:04,456 A:middle
of your own classes that show
your data exactly the way

953
00:43:04,456 --> 00:43:05,306 A:middle
that you want to see it.

954
00:43:06,486 --> 00:43:09,846 A:middle
And view debugging, well, that
adds an entire new dimension

955
00:43:09,846 --> 00:43:12,166 A:middle
to the way you can
explore and interact

956
00:43:12,216 --> 00:43:13,446 A:middle
with your app at runtime.

957
00:43:14,176 --> 00:43:15,196 A:middle
Really, really powerful.

958
00:43:15,196 --> 00:43:17,256 A:middle
And I think you're going to find
it really insightful as well.

959
00:43:18,526 --> 00:43:20,966 A:middle
And with that, I'd like to
turn it over to Kate Stone

960
00:43:21,186 --> 00:43:21,946 A:middle
to talk a little bit more

961
00:43:21,946 --> 00:43:24,786 A:middle
about how we can enhance
the performance of our app.

962
00:43:24,786 --> 00:43:25,046 A:middle
Thank you.

963
00:43:26,516 --> 00:43:30,196 A:middle
[ Applause ]

964
00:43:30,696 --> 00:43:31,496 A:middle
>> Thank you, Ken.

965
00:43:31,496 --> 00:43:33,236 A:middle
It looks like we have
a spectacular game

966
00:43:33,236 --> 00:43:33,866 A:middle
coming together.

967
00:43:33,916 --> 00:43:36,456 A:middle
We think our users are going
to be really happy with a lot

968
00:43:36,456 --> 00:43:37,436 A:middle
of these new features...

969
00:43:38,246 --> 00:43:40,896 A:middle
if we can just make sure that
we ship a quality product.

970
00:43:40,896 --> 00:43:42,236 A:middle
And of course that's
the last piece

971
00:43:42,236 --> 00:43:44,646 A:middle
of the development process, is
to make sure that what we're

972
00:43:44,646 --> 00:43:46,526 A:middle
about to send out into
the world is going

973
00:43:46,526 --> 00:43:47,816 A:middle
to live up to expectations.

974
00:43:48,576 --> 00:43:51,016 A:middle
My team has done the right
thing every step of the way.

975
00:43:51,376 --> 00:43:54,116 A:middle
We've tried to make sure that
what we have is a product

976
00:43:54,356 --> 00:43:57,196 A:middle
that is high-quality because,
of course, we've got a set

977
00:43:57,196 --> 00:44:00,146 A:middle
of unit tests that
are running on this.

978

979
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

980
00:43:57,196 --> 00:44:00,146 A:middle
of unit tests that
are running on this.

981
00:44:00,556 --> 00:44:02,096 A:middle
So I've got the product
up and running.

982
00:44:02,266 --> 00:44:03,996 A:middle
I can go to my Test navigator.

983
00:44:05,396 --> 00:44:06,776 A:middle
And the Test navigator shows

984
00:44:06,776 --> 00:44:08,916 A:middle
that I have several
suites of unit tests here.

985
00:44:09,446 --> 00:44:11,536 A:middle
So I can go ahead and
run those one last time,

986
00:44:11,866 --> 00:44:14,136 A:middle
make sure that when the
game comes up we put it

987
00:44:14,136 --> 00:44:16,196 A:middle
through its paces, we're
green across the board.

988
00:44:16,196 --> 00:44:16,436 A:middle
Looks good.

989
00:44:16,436 --> 00:44:18,436 A:middle
From a functional perspective,

990
00:44:18,836 --> 00:44:20,506 A:middle
the game is doing
exactly what we expect.

991
00:44:21,426 --> 00:44:23,786 A:middle
And that's great because I've
got one last change I wanted

992
00:44:23,786 --> 00:44:24,476 A:middle
to make to the game.

993
00:44:25,136 --> 00:44:27,716 A:middle
I was thinking about
tinkering with some new filters

994
00:44:27,756 --> 00:44:29,866 A:middle
to give a little bit
more life to our images.

995
00:44:30,216 --> 00:44:32,036 A:middle
And specifically here,
I've taken advantage

996
00:44:32,086 --> 00:44:34,866 A:middle
of a Swift feature to
let me build an extension

997
00:44:34,866 --> 00:44:36,086 A:middle
to the UIImage class.

998
00:44:36,946 --> 00:44:39,636 A:middle
So I can take an existing
class and add the ability

999
00:44:39,636 --> 00:44:40,836 A:middle
to apply filters to it.

1000
00:44:40,836 --> 00:44:42,496 A:middle
And so I have a variety
of filters here.

1001
00:44:43,616 --> 00:44:45,896 A:middle
The "vignette" filter is one I
was thinking about toying with.

1002
00:44:46,336 --> 00:44:48,306 A:middle
So maybe I should go ahead
and build one more test,

1003
00:44:48,956 --> 00:44:52,006 A:middle
but this time a performance test
to make sure it's going to live

1004
00:44:52,006 --> 00:44:53,306 A:middle
up to my expectations.

1005
00:44:54,136 --> 00:44:54,866 A:middle
It's straightforward.

1006
00:44:55,306 --> 00:44:57,316 A:middle
All I do is go and
ask for one new file,

1007
00:44:59,136 --> 00:45:01,646 A:middle
pick the test case class you're
probably already familiar with.

1008

1009
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1010
00:44:59,136 --> 00:45:01,646 A:middle
pick the test case class you're
probably already familiar with.

1011
00:45:03,746 --> 00:45:05,656 A:middle
I'm going to go ahead
and use Swift for that.

1012
00:45:05,656 --> 00:45:07,726 A:middle
And you'll note that of
course like all templates,

1013
00:45:07,946 --> 00:45:11,186 A:middle
I have that choice of Swift or
Objective-C, but Xcode knows

1014
00:45:11,186 --> 00:45:12,956 A:middle
that I've been using Swift
throughout the conference,

1015
00:45:13,266 --> 00:45:14,426 A:middle
so it's the default for me.

1016
00:45:15,786 --> 00:45:17,406 A:middle
I'm going to call
this "PerfTests,"

1017
00:45:18,786 --> 00:45:20,906 A:middle
put it in my existing
group with my tests

1018
00:45:22,626 --> 00:45:24,626 A:middle
and let Xcode create
that file for me.

1019
00:45:24,926 --> 00:45:26,876 A:middle
So now I have what
should be fairly familiar.

1020
00:45:26,976 --> 00:45:28,306 A:middle
It's got the usual setup

1021
00:45:28,306 --> 00:45:30,476 A:middle
and teardown methods,
but written in Swift.

1022
00:45:31,376 --> 00:45:32,416 A:middle
It's got a functional test.

1023
00:45:33,196 --> 00:45:34,726 A:middle
We're not focused on
any of those today,

1024
00:45:34,786 --> 00:45:36,746 A:middle
so I'll just set
those aside and focus

1025
00:45:36,746 --> 00:45:39,196 A:middle
on the one new method
that's been put in place:

1026
00:45:39,946 --> 00:45:41,966 A:middle
the ability to test
for performance.

1027
00:45:42,796 --> 00:45:45,666 A:middle
So I'm going to
testFilterPerformance here.

1028
00:45:46,516 --> 00:45:50,226 A:middle
And all I need to do is fill
in this measureBlock call.

1029
00:45:50,516 --> 00:45:53,476 A:middle
Now, you saw the Objective-C
syntax on a slide earlier.

1030
00:45:53,856 --> 00:45:56,536 A:middle
The Swift syntax
is really clean.

1031
00:45:56,906 --> 00:46:00,716 A:middle
It's just a call to measureBlock
that passes one trailing closure

1032

1033
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1034
00:45:56,906 --> 00:46:00,716 A:middle
It's just a call to measureBlock
that passes one trailing closure

1035
00:46:01,036 --> 00:46:02,186 A:middle
that does the actual work.

1036
00:46:02,966 --> 00:46:06,826 A:middle
And so in this case for my work,
I'm going to go ahead and fill

1037
00:46:06,826 --> 00:46:09,376 A:middle
in a test image (I'll pick
up one of the player images)

1038
00:46:09,726 --> 00:46:11,996 A:middle
and then go ahead and apply
a vignette filter to that.

1039
00:46:12,656 --> 00:46:16,336 A:middle
But the vignette filter's
not part of my test project.

1040
00:46:16,646 --> 00:46:18,886 A:middle
So, again, we're getting a
live issue here, reminding me

1041
00:46:19,136 --> 00:46:21,256 A:middle
that I don't have access
to that class directly.

1042
00:46:21,876 --> 00:46:26,886 A:middle
So all I need to do is
import the Shutterbugs module

1043
00:46:26,886 --> 00:46:29,926 A:middle
and I have everything I
need to exercise the test;

1044
00:46:30,366 --> 00:46:33,146 A:middle
indexing has found the
test; I'm one click away

1045
00:46:33,146 --> 00:46:35,476 A:middle
from building my project
and running that test

1046
00:46:35,576 --> 00:46:37,066 A:middle
and seeing just how
long this takes.

1047
00:46:38,256 --> 00:46:40,396 A:middle
It's going to run it a
number of times to figure

1048
00:46:40,396 --> 00:46:42,816 A:middle
out how long it takes and
whether there's any variation.

1049
00:46:43,066 --> 00:46:45,256 A:middle
And when it's done, it will
tell me exactly how long it took

1050
00:46:45,256 --> 00:46:48,046 A:middle
to run and what kind of
standard deviation I'm seeing;

1051
00:46:48,046 --> 00:46:49,316 A:middle
4 percent in this case.

1052
00:46:49,626 --> 00:46:52,676 A:middle
So I'm getting pretty consistent
run-to-run timings on this.

1053
00:46:53,726 --> 00:46:56,566 A:middle
Sounds good, but it's
taking a little longer

1054
00:46:56,566 --> 00:46:58,176 A:middle
than I wanted it to.

1055
00:46:58,396 --> 00:47:01,026 A:middle
So what I'd really like to
do is twist this open and see

1056

1057
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1058
00:46:58,396 --> 00:47:01,026 A:middle
So what I'd really like to
do is twist this open and see

1059
00:47:01,026 --> 00:47:02,516 A:middle
that I haven't set a baseline.

1060
00:47:02,516 --> 00:47:04,976 A:middle
I haven't set a target
for my timing,

1061
00:47:05,186 --> 00:47:06,426 A:middle
and I really wanted the target.

1062
00:47:06,426 --> 00:47:08,456 A:middle
I wanted something
that was snappy to live

1063
00:47:08,456 --> 00:47:09,956 A:middle
up to our users' expectations.

1064
00:47:10,326 --> 00:47:12,856 A:middle
So I can go and establish
a baseline either based

1065
00:47:12,856 --> 00:47:16,326 A:middle
on what I have now, or I can
go in and edit that and say,

1066
00:47:16,326 --> 00:47:19,956 A:middle
you know, 0.25 seconds is
more what I had in mind here.

1067
00:47:20,396 --> 00:47:23,276 A:middle
And now I'll get a reminder
every time I run this test

1068
00:47:24,256 --> 00:47:26,566 A:middle
that I'm not living
up to expectations.

1069
00:47:26,876 --> 00:47:30,436 A:middle
This test is going to fail red
because it wasn't fast enough.

1070
00:47:30,986 --> 00:47:33,396 A:middle
Well, we could take time
to tinker with that,

1071
00:47:33,396 --> 00:47:37,236 A:middle
but I did apply a number of
different filters as extensions

1072
00:47:37,316 --> 00:47:39,006 A:middle
to UIImage here, so
let me just go back

1073
00:47:39,006 --> 00:47:40,346 A:middle
and choose another one of these.

1074
00:47:40,946 --> 00:47:42,656 A:middle
I'm going to use
the noir filter.

1075
00:47:44,966 --> 00:47:47,176 A:middle
Rebuild, retest and make sure

1076
00:47:47,176 --> 00:47:48,836 A:middle
that that's meeting
expectations.

1077
00:47:49,836 --> 00:47:51,106 A:middle
Looks good; we're all green.

1078
00:47:51,106 --> 00:47:52,556 A:middle
So across the board we're

1079
00:47:52,556 --> 00:47:54,236 A:middle
in great shape to
ship this product.

1080
00:47:54,726 --> 00:47:55,856 A:middle
But what if I'd had a problem

1081
00:47:55,856 --> 00:47:57,746 A:middle
that I wasn't able
to take care of here?

1082
00:47:58,146 --> 00:48:00,756 A:middle
What if I had a performance
issue I needed to investigate?

1083

1084
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1085
00:47:58,146 --> 00:48:00,756 A:middle
What if I had a performance
issue I needed to investigate?

1086
00:48:00,756 --> 00:48:03,276 A:middle
Well, of course Instruments
is the answer

1087
00:48:03,276 --> 00:48:04,456 A:middle
to all such questions.

1088
00:48:04,886 --> 00:48:06,746 A:middle
Instruments is a great
way to get more detail

1089
00:48:06,796 --> 00:48:08,376 A:middle
about what's going
on in your project.

1090
00:48:08,736 --> 00:48:11,326 A:middle
So I'm just going to bring up
a context menu for this test

1091
00:48:12,026 --> 00:48:15,906 A:middle
and choose to profile that
particular filter exercise.

1092
00:48:17,776 --> 00:48:19,116 A:middle
Behind the scenes,
we're going to go ahead

1093
00:48:19,116 --> 00:48:20,986 A:middle
and build specifically
for profiling

1094
00:48:21,216 --> 00:48:22,206 A:middle
and launch Instruments.

1095
00:48:22,466 --> 00:48:25,436 A:middle
And now we get our first glimpse
of the new Instruments UI.

1096
00:48:26,596 --> 00:48:28,966 A:middle
Instruments has been overhauled
dramatically this release,

1097
00:48:29,306 --> 00:48:32,476 A:middle
both to be consistent with
the new OS X Yosemite,

1098
00:48:32,886 --> 00:48:35,006 A:middle
but also so that it's
more familiar for people

1099
00:48:35,006 --> 00:48:36,846 A:middle
who are comfortable
with Xcode already.

1100
00:48:37,656 --> 00:48:39,436 A:middle
We start off with
the Template Chooser.

1101
00:48:39,896 --> 00:48:43,246 A:middle
Here, I can see at a glance
what device I'm targeting,

1102
00:48:44,136 --> 00:48:47,156 A:middle
what I'm planning on running,
and find the right template

1103
00:48:47,326 --> 00:48:48,866 A:middle
to exercise what
I'm looking for.

1104
00:48:48,866 --> 00:48:50,616 A:middle
And I'm just going to look
at memory in this case.

1105
00:48:51,406 --> 00:48:54,636 A:middle
I can look at what I've
been using recently or pick

1106
00:48:54,666 --> 00:48:55,426 A:middle
from the complete list.

1107
00:48:56,616 --> 00:48:59,446 A:middle
When I choose that template, I
then go into Instruments proper,

1108
00:48:59,686 --> 00:49:02,806 A:middle
and the Instruments main window
is also dramatically overhauled.

1109

1110
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1111
00:48:59,686 --> 00:49:02,806 A:middle
and the Instruments main window
is also dramatically overhauled.

1112
00:49:02,806 --> 00:49:04,206 A:middle
You'll see a few
things at a glance.

1113
00:49:04,206 --> 00:49:06,406 A:middle
One is if it's not
immediately recording.

1114
00:49:06,976 --> 00:49:08,796 A:middle
How many times have
you chosen a template,

1115
00:49:09,266 --> 00:49:12,276 A:middle
found that it starts recording
immediately, stop it, go back

1116
00:49:12,276 --> 00:49:13,376 A:middle
and tinker with the settings?

1117
00:49:13,616 --> 00:49:14,966 A:middle
Now we give you an
option to go in

1118
00:49:14,966 --> 00:49:17,266 A:middle
and change those
settings before you record

1119
00:49:17,636 --> 00:49:18,876 A:middle
or to go straight to recording.

1120
00:49:20,686 --> 00:49:22,946 A:middle
So what I'd like to do is
be able to browse through

1121
00:49:22,946 --> 00:49:24,556 A:middle
and make sure that I've
got the settings I want.

1122
00:49:24,876 --> 00:49:27,076 A:middle
And you see that the settings
are now all centralized

1123
00:49:27,076 --> 00:49:30,386 A:middle
in the Inspector, again, for
familiarity for Xcode users.

1124
00:49:30,826 --> 00:49:32,846 A:middle
So I can make sure that my
allocations instrument is set

1125
00:49:32,846 --> 00:49:35,706 A:middle
up the way I want, my VM Tracker
is set up the way I want.

1126
00:49:35,706 --> 00:49:38,986 A:middle
And when it's all good, I go to
the new, overhauled toolbar --

1127
00:49:40,046 --> 00:49:42,906 A:middle
sleeker, cleaner, taking
up less screen real estate

1128
00:49:42,906 --> 00:49:44,406 A:middle
than ever -- to start recording.

1129
00:49:44,406 --> 00:49:46,696 A:middle
And we start recording.

1130
00:49:46,986 --> 00:49:49,766 A:middle
And as always, Allocations
is tracking everything that's

1131
00:49:49,766 --> 00:49:50,336 A:middle
going on.

1132
00:49:50,756 --> 00:49:53,176 A:middle
We're getting a recording
of all the malloc regions,

1133
00:49:53,396 --> 00:49:55,076 A:middle
all the Objective-C objects,

1134
00:49:55,796 --> 00:49:57,096 A:middle
everything we could
possibly want.

1135
00:49:58,036 --> 00:49:59,876 A:middle
We could go in and look at that
in a little bit more detail.

1136

1137
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1138
00:50:00,506 --> 00:50:02,846 A:middle
Perhaps we'd like to filter
down to a subset of this.

1139
00:50:02,846 --> 00:50:05,526 A:middle
Well, filtering is now just
a simple click and drag;

1140
00:50:05,626 --> 00:50:06,966 A:middle
no modifier keys needed.

1141
00:50:08,516 --> 00:50:12,346 A:middle
[ Applause ]

1142
00:50:12,846 --> 00:50:15,696 A:middle
So I can see all kinds of detail
about all kinds of objects,

1143
00:50:16,146 --> 00:50:19,826 A:middle
but I can narrow in on something
like my PerfTests class.

1144
00:50:20,006 --> 00:50:21,096 A:middle
I know that was allocated.

1145
00:50:21,366 --> 00:50:24,746 A:middle
And of course Swift objects are
represented alongside everything

1146
00:50:24,746 --> 00:50:25,216 A:middle
else here.

1147
00:50:25,566 --> 00:50:27,206 A:middle
We can see the module
name as well

1148
00:50:27,206 --> 00:50:28,736 A:middle
as the class name
and get details.

1149
00:50:28,736 --> 00:50:32,816 A:middle
So that I can see for this
particular class what instances

1150
00:50:32,816 --> 00:50:36,026 A:middle
were allocated and when
that instance was allocated,

1151
00:50:36,346 --> 00:50:38,506 A:middle
what stack trace that
instance came from.

1152
00:50:38,806 --> 00:50:40,746 A:middle
So a ton of detail
right at our fingertips.

1153
00:50:40,996 --> 00:50:43,756 A:middle
And of course that carries
over as well, but if I want

1154
00:50:43,756 --> 00:50:45,746 A:middle
to look not just at
individual objects

1155
00:50:46,076 --> 00:50:48,826 A:middle
but overall statistics -- where
are objects coming from --

1156
00:50:49,316 --> 00:50:50,586 A:middle
I can see that I'm allocating

1157
00:50:50,766 --> 00:50:54,196 A:middle
about 15 megs total during the
process of bringing the app up

1158
00:50:54,196 --> 00:50:55,736 A:middle
and running the tests.

1159
00:50:55,736 --> 00:50:59,566 A:middle
So what part of that is
actually in my applyNoirFilter?

1160

1161
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1162
00:51:00,456 --> 00:51:02,296 A:middle
Well, I'll go ahead and
filter down and we can see

1163
00:51:02,296 --> 00:51:05,266 A:middle
that it's just about
430 K that we're taking.

1164
00:51:05,636 --> 00:51:06,586 A:middle
That sounds reasonable,

1165
00:51:06,896 --> 00:51:09,256 A:middle
and indeed my stack
trace here is showing me,

1166
00:51:09,256 --> 00:51:12,046 A:middle
highlighted in black, my
code so that I can see

1167
00:51:12,046 --> 00:51:13,116 A:middle
at a glance where it is.

1168
00:51:13,116 --> 00:51:16,496 A:middle
And rather than drilling down a
step at a time, I can just click

1169
00:51:16,496 --> 00:51:20,856 A:middle
on my code and see where in the
stack trace that's occurring

1170
00:51:21,106 --> 00:51:23,166 A:middle
and look in detail
at what's going on.

1171
00:51:23,806 --> 00:51:26,496 A:middle
So Instruments, again,
the perfect way to dig in

1172
00:51:26,496 --> 00:51:28,576 A:middle
and understand more
deeply what's going on.

1173
00:51:28,996 --> 00:51:30,836 A:middle
We hope you will come to a
session later this afternoon

1174
00:51:30,836 --> 00:51:31,646 A:middle
to learn more about it.

1175
00:51:32,286 --> 00:51:34,466 A:middle
And that brings us
back to Xcode.

1176
00:51:34,826 --> 00:51:36,186 A:middle
Everything's working
the way we want.

1177
00:51:36,186 --> 00:51:37,906 A:middle
Of course my next
step is to check in.

1178
00:51:37,906 --> 00:51:41,266 A:middle
And when I check in,
Xcode Server is going

1179
00:51:41,266 --> 00:51:42,256 A:middle
to start doing its work.

1180
00:51:43,126 --> 00:51:44,526 A:middle
And we can see that
we have a server set

1181
00:51:44,526 --> 00:51:45,736 A:middle
up that my team has been using.

1182
00:51:45,786 --> 00:51:47,436 A:middle
It's the perfect way
for a small group

1183
00:51:47,436 --> 00:51:48,616 A:middle
of engineers to work together.

1184
00:51:48,616 --> 00:51:52,916 A:middle
And we've got overviews here of
what's going on in my project.

1185
00:51:52,966 --> 00:51:55,916 A:middle
So I can see recent
activity, my success tree,

1186
00:51:55,916 --> 00:51:57,666 A:middle
(which is looking good,
we're being successful)

1187
00:51:57,666 --> 00:51:59,086 A:middle
and my complete history --

1188
00:51:59,666 --> 00:52:01,736 A:middle
off to a little bit of
a rocky start initially,

1189

1190
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1191
00:51:59,666 --> 00:52:01,736 A:middle
off to a little bit of
a rocky start initially,

1192
00:52:01,736 --> 00:52:04,516 A:middle
with one failed build, but
all in all looking good.

1193
00:52:04,516 --> 00:52:07,746 A:middle
And our unit test
count is creeping up.

1194
00:52:07,856 --> 00:52:10,106 A:middle
I can see historically
what failures occurred

1195
00:52:10,106 --> 00:52:12,376 A:middle
so I might be interested in
digging into some of that,

1196
00:52:12,706 --> 00:52:16,076 A:middle
but I'm really most interested
in my most recent integration.

1197
00:52:16,636 --> 00:52:19,026 A:middle
And so if I drill down to
that integration and look

1198
00:52:19,026 --> 00:52:20,266 A:middle
at all the tests
that are running,

1199
00:52:20,696 --> 00:52:23,006 A:middle
I could see that I'm not the
only one who's been doing

1200
00:52:23,006 --> 00:52:25,026 A:middle
performance tests.

1201
00:52:25,106 --> 00:52:26,916 A:middle
Because beside my
green checkmarks here,

1202
00:52:27,216 --> 00:52:29,836 A:middle
I'm also seeing variance
from baseline.

1203
00:52:30,396 --> 00:52:32,526 A:middle
So at a glance, I can
see for this last run

1204
00:52:32,526 --> 00:52:34,966 A:middle
that we're doing well against
the baseline in a couple

1205
00:52:34,966 --> 00:52:37,186 A:middle
of tests that my
coworkers have been adding.

1206
00:52:38,916 --> 00:52:39,306 A:middle
Looks great.

1207
00:52:39,306 --> 00:52:41,556 A:middle
Let's twist one of those
open and see, in fact,

1208
00:52:41,556 --> 00:52:44,766 A:middle
that we're tracking baseline
against individual devices.

1209
00:52:45,116 --> 00:52:45,986 A:middle
So as we exercise it

1210
00:52:45,986 --> 00:52:48,396 A:middle
in all devices we have
individual targets,

1211
00:52:48,396 --> 00:52:50,356 A:middle
perhaps for different
generations of hardware.

1212
00:52:51,046 --> 00:52:52,336 A:middle
And I think these
numbers are great,

1213
00:52:52,336 --> 00:52:55,236 A:middle
but I want to make sure we
don't slide from here either.

1214
00:52:55,586 --> 00:52:58,436 A:middle
So I can go in and edit
that baseline right there

1215
00:52:58,436 --> 00:53:00,976 A:middle
and accept the last run

1216

1217
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1218
00:52:58,436 --> 00:53:00,976 A:middle
and accept the last run

1219
00:53:01,306 --> 00:53:03,806 A:middle
as the baseline target
for all future runs.

1220
00:53:04,436 --> 00:53:07,366 A:middle
This is spectacular because it
means that -- for my machine --

1221
00:53:07,686 --> 00:53:10,326 A:middle
I can change the baseline,
push that back to the server,

1222
00:53:10,586 --> 00:53:12,026 A:middle
and that baseline
will be updated

1223
00:53:12,166 --> 00:53:14,396 A:middle
on all my coworkers'
machines so they're measuring

1224
00:53:14,396 --> 00:53:17,016 A:middle
against the same
targets that I am.

1225
00:53:17,266 --> 00:53:20,036 A:middle
So I think we've got a
spectacular round-trip process

1226
00:53:20,036 --> 00:53:20,666 A:middle
here for you.

1227
00:53:20,666 --> 00:53:21,846 A:middle
You're going to love it.

1228
00:53:21,846 --> 00:53:24,576 A:middle
And to wrap things up, I'd like
to turn it back over to Mike.

1229
00:53:24,996 --> 00:53:25,746 A:middle
>> Thank you, Kate.

1230
00:53:27,246 --> 00:53:29,606 A:middle
OK, that's Xcode 6.

1231
00:53:30,636 --> 00:53:34,486 A:middle
The seed is out there available
to all of you, so try it out

1232
00:53:34,486 --> 00:53:35,976 A:middle
and please let us
know what you think.

1233
00:53:35,976 --> 00:53:38,446 A:middle
This is going to
be a great week.

1234
00:53:38,916 --> 00:53:42,836 A:middle
We have a ton of sessions that
will go into even more detail

1235
00:53:42,836 --> 00:53:44,396 A:middle
about all of this stuff.

1236
00:53:44,396 --> 00:53:45,246 A:middle
Have a great show.

1237
