X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:11,796 A:middle
[ Silence ]

2
00:00:12,296 --> 00:00:12,976 A:middle
>> Good morning.

3
00:00:13,516 --> 00:00:18,546 A:middle
[ Applause ]

4
00:00:19,046 --> 00:00:19,236 A:middle
All right.

5
00:00:19,416 --> 00:00:20,346 A:middle
You're happy to see me.

6
00:00:20,346 --> 00:00:20,776 A:middle
That's good.

7
00:00:20,956 --> 00:00:24,996 A:middle
My name's Will Turner and with
my colleague, Brooke Callahan,

8
00:00:24,996 --> 00:00:28,376 A:middle
we'll be talking to you
about testing in Xcode 6.

9
00:00:29,396 --> 00:00:31,286 A:middle
And let's get started.

10
00:00:32,006 --> 00:00:34,066 A:middle
So we're going to cover
several topics today.

11
00:00:34,066 --> 00:00:36,996 A:middle
To start off, to just
kind of motivate this.

12
00:00:37,436 --> 00:00:38,866 A:middle
Think about the benefits
of testing.

13
00:00:38,866 --> 00:00:40,626 A:middle
Why should we bother
in the first place?

14
00:00:41,266 --> 00:00:45,166 A:middle
Then we'll get into what it
takes to add test to a project.

15
00:00:45,356 --> 00:00:47,226 A:middle
Maybe you have old projects
that don't have tests.

16
00:00:47,226 --> 00:00:52,386 A:middle
And then we'll talk about
some new features in Xcode 6

17
00:00:52,756 --> 00:00:55,136 A:middle
which allow you to test
asynchronous systems

18
00:00:55,176 --> 00:00:57,636 A:middle
and then also testing
features that allow you

19
00:00:57,636 --> 00:00:59,866 A:middle
to catch performance
regressions.

20

21
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

22
00:01:02,646 --> 00:01:06,876 A:middle
So why should we test?

23
00:01:07,096 --> 00:01:10,336 A:middle
Obviously, every time moment
we spend developing is an

24
00:01:10,336 --> 00:01:11,596 A:middle
investment of a resource.

25
00:01:11,596 --> 00:01:14,216 A:middle
Our resource is time
and our colleagues

26
00:01:14,216 --> 00:01:16,866 A:middle
for maintaining the code
base that we create.

27
00:01:17,976 --> 00:01:18,706 A:middle
So the obvious thing

28
00:01:18,706 --> 00:01:21,106 A:middle
about testing is it
helps you find bugs

29
00:01:21,106 --> 00:01:24,476 A:middle
and there's many classes of
bugs that you find with testing.

30
00:01:24,776 --> 00:01:26,996 A:middle
They are regressions so cases

31
00:01:26,996 --> 00:01:30,036 A:middle
where you've shipped your
product, you make a code change,

32
00:01:30,036 --> 00:01:33,236 A:middle
add a feature and in the
process something breaks

33
00:01:33,236 --> 00:01:36,356 A:middle
and now your 1.1
or 1.2 has a bug

34
00:01:36,356 --> 00:01:37,796 A:middle
and your customers are unhappy.

35
00:01:38,346 --> 00:01:39,476 A:middle
We hate regressions.

36
00:01:40,036 --> 00:01:41,506 A:middle
Tests are a fantastic way

37
00:01:41,506 --> 00:01:43,936 A:middle
to ensure your code ships
without regressions.

38
00:01:44,656 --> 00:01:47,246 A:middle
There's also bugs where
performance changes.

39
00:01:47,246 --> 00:01:49,016 A:middle
You make a change in your code

40
00:01:49,016 --> 00:01:51,326 A:middle
and now suddenly something
is taking a lot more time

41
00:01:51,326 --> 00:01:54,856 A:middle
to execute and maybe that's only
on some devices and not others.

42
00:01:55,326 --> 00:01:57,806 A:middle
So tests again can
be a great way

43
00:01:57,876 --> 00:01:59,546 A:middle
to catch performance
regressions.

44

45
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

46
00:02:00,176 --> 00:02:04,036 A:middle
The other sort of less talked
about and less obvious benefit

47
00:02:04,036 --> 00:02:06,836 A:middle
of testing is that it
codifies the requirements

48
00:02:07,286 --> 00:02:08,776 A:middle
of your project.

49
00:02:09,026 --> 00:02:11,696 A:middle
So especially if you're
sharing code with engineers,

50
00:02:11,696 --> 00:02:16,136 A:middle
you create classes as classes
have APIs and a lot of times

51
00:02:16,176 --> 00:02:18,666 A:middle
because Objective-C and
Swift are great languages

52
00:02:18,666 --> 00:02:23,786 A:middle
for expressing the API,
semantics of the API,

53
00:02:24,476 --> 00:02:25,866 A:middle
they're self-documenting.

54
00:02:25,866 --> 00:02:27,656 A:middle
We think, okay, our job is done.

55
00:02:28,086 --> 00:02:30,486 A:middle
But in truth, they
don't really account

56
00:02:30,486 --> 00:02:32,276 A:middle
for all the possible
permutations

57
00:02:32,276 --> 00:02:34,076 A:middle
of inputs to those functions.

58
00:02:34,506 --> 00:02:35,666 A:middle
So if you write tests,

59
00:02:36,526 --> 00:02:39,616 A:middle
those tests help codify the
requirements of those APIs.

60
00:02:39,616 --> 00:02:41,066 A:middle
So another engineer
can come along.

61
00:02:41,476 --> 00:02:43,066 A:middle
They can make code
changes in that area

62
00:02:43,066 --> 00:02:45,646 A:middle
and the tests helps them
understand what the expected

63
00:02:45,646 --> 00:02:46,576 A:middle
behavior is.

64
00:02:47,526 --> 00:02:51,956 A:middle
So to get started with
tests, you may have a project

65
00:02:52,096 --> 00:02:53,816 A:middle
that doesn't have test already.

66
00:02:53,976 --> 00:02:55,886 A:middle
So you want to add
test to that project

67
00:02:55,886 --> 00:02:57,856 A:middle
and then the obvious
thing to do is make sure

68
00:02:57,856 --> 00:02:59,456 A:middle
that those tests pass.

69

70
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

71
00:03:00,706 --> 00:03:02,986 A:middle
Alternatively, you may
start with a new project.

72
00:03:03,086 --> 00:03:05,756 A:middle
And in that case, you have the
option of a different workflow

73
00:03:06,106 --> 00:03:08,916 A:middle
where you create tests first.

74
00:03:09,326 --> 00:03:11,996 A:middle
And then you write code
that passes those tests

75
00:03:12,346 --> 00:03:15,416 A:middle
and that's sometimes referred
to as test-driven development.

76
00:03:16,986 --> 00:03:19,376 A:middle
So now you're set up.

77
00:03:19,376 --> 00:03:20,126 A:middle
You've got your test.

78
00:03:20,126 --> 00:03:20,996 A:middle
They're passing.

79
00:03:21,166 --> 00:03:23,136 A:middle
You can go into a workflow
that we talked about.

80
00:03:23,136 --> 00:03:25,876 A:middle
We consider continuous
integration workflow.

81
00:03:26,186 --> 00:03:27,656 A:middle
And you start off
in a green state

82
00:03:27,656 --> 00:03:31,316 A:middle
where everything is working
and you're making code changes.

83
00:03:31,316 --> 00:03:33,246 A:middle
You're adding features,
fixing bugs.

84
00:03:33,656 --> 00:03:37,396 A:middle
And at some point, one of these
code changes introduces a bug.

85
00:03:37,776 --> 00:03:39,706 A:middle
And so now, your
continuous integration

86
00:03:39,706 --> 00:03:42,206 A:middle
because you've written
tests identifies that bug

87
00:03:42,206 --> 00:03:45,696 A:middle
and you know right away, right
after that first code change,

88
00:03:46,006 --> 00:03:47,646 A:middle
you know that the bug
has been introduced.

89
00:03:48,156 --> 00:03:50,706 A:middle
So then you can take the
necessary steps to fix the bug

90
00:03:50,706 --> 00:03:52,476 A:middle
and return to a green state.

91
00:03:52,766 --> 00:03:53,476 A:middle
And what you really like,

92
00:03:53,476 --> 00:03:56,816 A:middle
I think is a green state
represents known quality.

93
00:03:57,276 --> 00:04:00,476 A:middle
And having tests and having
continuous integration ensures

94

95
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

96
00:03:57,276 --> 00:04:00,476 A:middle
And having tests and having
continuous integration ensures

97
00:04:00,476 --> 00:04:03,696 A:middle
that your projects
remain in a known state

98
00:04:03,696 --> 00:04:07,356 A:middle
of quality all the time.

99
00:04:07,546 --> 00:04:09,186 A:middle
So to get started, let's talk

100
00:04:09,186 --> 00:04:12,036 A:middle
about how testing
works in Xcode.

101
00:04:12,576 --> 00:04:15,236 A:middle
Xcode ships with a
framework called XCTest

102
00:04:15,746 --> 00:04:17,766 A:middle
and this is framework
for testing.

103
00:04:17,766 --> 00:04:20,586 A:middle
It provides a set of APIs
that lets you create tests,

104
00:04:21,196 --> 00:04:24,256 A:middle
run the tests, express
expectations,

105
00:04:24,256 --> 00:04:25,406 A:middle
passes and failures.

106
00:04:26,136 --> 00:04:29,736 A:middle
It all starts with the
base class XCTestCase.

107
00:04:30,156 --> 00:04:33,476 A:middle
And to create test,
you subclass XCTestCase

108
00:04:33,596 --> 00:04:35,416 A:middle
and then you add test methods.

109
00:04:35,416 --> 00:04:38,536 A:middle
And these test methods
follow a naming convention.

110
00:04:38,976 --> 00:04:40,116 A:middle
They return void.

111
00:04:41,036 --> 00:04:44,456 A:middle
They're prefixed with the
word, "test" in lowercase

112
00:04:45,076 --> 00:04:46,626 A:middle
and they take no parameters.

113
00:04:47,096 --> 00:04:50,586 A:middle
The remainder of the method
name is at your discretion.

114
00:04:50,586 --> 00:04:56,576 A:middle
It should be sort of a name that
conveys the purpose of the test.

115
00:04:56,756 --> 00:04:58,016 A:middle
Inside these test methods,

116
00:04:58,016 --> 00:05:01,996 A:middle
you can use assertion APIs we
provide to report failures.

117

118
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

119
00:04:58,016 --> 00:05:01,996 A:middle
you can use assertion APIs we
provide to report failures.

120
00:05:02,206 --> 00:05:07,536 A:middle
For example, XCTAssertEqual
compares two scalar values

121
00:05:07,676 --> 00:05:10,586 A:middle
and if they don't match,
it outputs a string

122
00:05:10,586 --> 00:05:14,256 A:middle
and reports a failure
to the test harness.

123
00:05:15,976 --> 00:05:19,106 A:middle
So in Xcode, we manage
a lot of different parts

124
00:05:19,106 --> 00:05:20,626 A:middle
of our projects through targets.

125
00:05:20,626 --> 00:05:22,776 A:middle
And we have test targets
for managing tests.

126
00:05:23,676 --> 00:05:25,556 A:middle
Test targets build bundles

127
00:05:25,846 --> 00:05:29,436 A:middle
and these bundles contain
the compiled test code

128
00:05:29,946 --> 00:05:32,486 A:middle
and also resources that you
would want to use in the test.

129
00:05:32,486 --> 00:05:34,816 A:middle
Maybe you have data files
that drive your tests.

130
00:05:35,426 --> 00:05:37,536 A:middle
These go in your test bundle
but you don't really want

131
00:05:37,536 --> 00:05:39,316 A:middle
to ship those with
your application.

132
00:05:39,316 --> 00:05:40,166 A:middle
You go and ship them with --

133
00:05:40,166 --> 00:05:41,616 A:middle
though you don't want
to ship them at all.

134
00:05:41,616 --> 00:05:43,336 A:middle
You want them to be
with your test bundle.

135
00:05:44,056 --> 00:05:48,076 A:middle
So these are -- test targets
are automatically included

136
00:05:48,076 --> 00:05:49,056 A:middle
in new projects.

137
00:05:49,056 --> 00:05:51,206 A:middle
If I go today and I
create a new application,

138
00:05:51,886 --> 00:05:56,556 A:middle
you'll see there's a test target
and a test class already there

139
00:05:56,556 --> 00:05:59,256 A:middle
to start me off, get me right
in test from the beginning.

140

141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

142
00:06:00,386 --> 00:06:03,716 A:middle
You can also add test
targets to existing projects.

143
00:06:04,256 --> 00:06:07,216 A:middle
And this may be something
you want to do to a project

144
00:06:07,216 --> 00:06:09,976 A:middle
that hasn't a test or it
also be a step you take

145
00:06:09,976 --> 00:06:13,796 A:middle
to help organize your
tests because you can have

146
00:06:13,796 --> 00:06:17,316 A:middle
as many test targets as you
want and it's useful sometimes

147
00:06:17,316 --> 00:06:20,116 A:middle
that you will run just this
test target or that test target

148
00:06:20,446 --> 00:06:21,726 A:middle
or you can run them
all together.

149
00:06:21,896 --> 00:06:28,666 A:middle
So let's think about a
moment about how tests run.

150
00:06:28,666 --> 00:06:31,176 A:middle
Because they are bundles,
these are not executables

151
00:06:31,176 --> 00:06:32,666 A:middle
that can be launched themselves.

152
00:06:33,126 --> 00:06:37,046 A:middle
So instead, we need to host
them in an executable process.

153
00:06:38,796 --> 00:06:41,456 A:middle
Generally, we inject
these into your apps.

154
00:06:41,696 --> 00:06:44,386 A:middle
So your test can be written
against your application

155
00:06:44,386 --> 00:06:47,676 A:middle
and it can access all the code
in your application which means

156
00:06:47,676 --> 00:06:49,216 A:middle
when we run the test, we run it

157
00:06:49,216 --> 00:06:51,106 A:middle
in the context of
your application.

158
00:06:52,656 --> 00:06:54,686 A:middle
Alternatively, you can run them

159
00:06:54,686 --> 00:06:59,126 A:middle
in a hosting process
that's provided by Xcode.

160
00:06:59,656 --> 00:07:02,036 A:middle
Resources for tests,
as I mentioned before,

161

162
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

163
00:06:59,656 --> 00:07:02,036 A:middle
Resources for tests,
as I mentioned before,

164
00:07:02,036 --> 00:07:04,026 A:middle
are not in the main bundle.

165
00:07:04,026 --> 00:07:05,256 A:middle
They're in your test bundle.

166
00:07:05,616 --> 00:07:09,666 A:middle
So when you go to load them,
don't use NSBundle mainBundle.

167
00:07:09,666 --> 00:07:11,246 A:middle
This is something
that trips people up.

168
00:07:11,246 --> 00:07:14,146 A:middle
I think a lot of us just kind
of have NSBundle mainBundle

169
00:07:14,146 --> 00:07:15,956 A:middle
on autocomplete in our heads.

170
00:07:16,406 --> 00:07:20,496 A:middle
But instead, we want to
use NSBundle bundleForClass

171
00:07:20,496 --> 00:07:22,216 A:middle
and pass your test class.

172
00:07:22,516 --> 00:07:25,146 A:middle
That ensures that you're
going into the test bundle

173
00:07:25,146 --> 00:07:26,516 A:middle
to locate that resource.

174
00:07:29,416 --> 00:07:33,276 A:middle
So running tests, Xcode lets you
run tests in a number of ways.

175
00:07:33,486 --> 00:07:35,706 A:middle
The simplest way is Command-U

176
00:07:35,706 --> 00:07:38,356 A:middle
and this takes your active
scheme and runs the tests

177
00:07:38,356 --> 00:07:40,056 A:middle
that are associated
with that scheme.

178
00:07:41,616 --> 00:07:45,786 A:middle
You also have buttons and the
Source Editor's got it next

179
00:07:45,786 --> 00:07:49,656 A:middle
to the test method that lets you
run just that test or the class

180
00:07:49,756 --> 00:07:51,256 A:middle
and all of the tests
in that class.

181
00:07:52,336 --> 00:07:55,366 A:middle
So you have a similar set of
buttons in the Test Navigator.

182
00:07:55,996 --> 00:08:00,116 A:middle
And you can also run tests using
xcodebuild so if you have a set

183

184
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

185
00:07:55,996 --> 00:08:00,116 A:middle
And you can also run tests using
xcodebuild so if you have a set

186
00:08:00,116 --> 00:08:02,696 A:middle
of scripts that you've used
to create your own kind

187
00:08:02,696 --> 00:08:05,646 A:middle
of automation setup,
you can use xcodebuild.

188
00:08:06,436 --> 00:08:10,576 A:middle
And you pass at the test action
and you pass your project.

189
00:08:11,646 --> 00:08:13,476 A:middle
Tell it which scheme
-- this is essential

190
00:08:13,476 --> 00:08:15,516 A:middle
because your project
may have many schemes --

191
00:08:16,256 --> 00:08:17,866 A:middle
and the destination.

192
00:08:18,146 --> 00:08:20,366 A:middle
And you can have multiple
destinations so if you want

193
00:08:20,366 --> 00:08:23,806 A:middle
to run on multiple devices,
you can pass these all

194
00:08:23,806 --> 00:08:29,636 A:middle
with distinct -destination flags
and xcodebuild will run them.

195
00:08:30,046 --> 00:08:32,326 A:middle
When your tests are done,
where do you see the results?

196
00:08:32,496 --> 00:08:33,796 A:middle
Again, there's a
number of places

197
00:08:33,796 --> 00:08:35,586 A:middle
where we display the
results of the tests.

198
00:08:36,076 --> 00:08:37,726 A:middle
The first is at Test Navigator.

199
00:08:37,785 --> 00:08:42,916 A:middle
We will see a green checkmark
or red icon indicating failure.

200
00:08:43,876 --> 00:08:45,496 A:middle
Also in the Issue Navigator.

201
00:08:45,696 --> 00:08:49,486 A:middle
If you hit a test failure,
you'll see not only the failure

202
00:08:49,486 --> 00:08:52,016 A:middle
but the reason it failed and
so if you've used our search

203
00:08:52,016 --> 00:08:55,366 A:middle
in macros, this is where you'll
see that error string that says,

204
00:08:55,366 --> 00:08:57,896 A:middle
you know, 50 was
not equal to zero

205
00:08:57,896 --> 00:09:00,256 A:middle
or whatever the assertion
you were testing.

206

207
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

208
00:08:57,896 --> 00:09:00,256 A:middle
or whatever the assertion
you were testing.

209
00:09:02,126 --> 00:09:04,266 A:middle
They also show in the
Source Editor's gutter

210
00:09:04,266 --> 00:09:08,146 A:middle
and then finally, most
useful is the Test Reports

211
00:09:08,146 --> 00:09:12,436 A:middle
where we show all the tests that
have run and the logs associated

212
00:09:12,436 --> 00:09:14,756 A:middle
with them and some
additional data that we'll get

213
00:09:14,756 --> 00:09:16,056 A:middle
to later in the presentation.

214
00:09:18,216 --> 00:09:19,276 A:middle
So let's get started.

215
00:09:19,276 --> 00:09:23,006 A:middle
See what it looks like to add
tests to an existing project.

216
00:09:24,666 --> 00:09:28,486 A:middle
Let's take a look at how
this is put together.

217
00:09:28,706 --> 00:09:32,156 A:middle
To simplify this for the demo,
I've tweaked it a little bit

218
00:09:32,216 --> 00:09:33,736 A:middle
from the sample code
that's online.

219
00:09:33,896 --> 00:09:40,086 A:middle
But basically the guts of this
app is this NSOperation subclass

220
00:09:40,166 --> 00:09:42,286 A:middle
that parses the XML data.

221
00:09:42,706 --> 00:09:48,426 A:middle
And NSOperation, as you know, is
designed to provide concurrency

222
00:09:48,476 --> 00:09:51,496 A:middle
and be run in the background.

223
00:09:51,496 --> 00:09:54,096 A:middle
This class has a Delegate
that it calls back

224
00:09:54,286 --> 00:09:56,676 A:middle
with certain events
when parsing is done,

225
00:09:56,676 --> 00:09:58,606 A:middle
when it's parsed a
certain number of objects

226
00:09:58,606 --> 00:09:59,976 A:middle
or if it encounters
any kind of error.

227

228
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

229
00:10:02,166 --> 00:10:06,026 A:middle
So we have this property
here, parsedEarthquakes

230
00:10:06,026 --> 00:10:08,906 A:middle
and that's something you can
access safely at any time

231
00:10:08,906 --> 00:10:12,146 A:middle
to see the array of
parsedEarthquake objects.

232
00:10:12,736 --> 00:10:15,896 A:middle
So I'd like to write
a test that validates

233
00:10:16,066 --> 00:10:18,636 A:middle
that this parsed
operation behaves correctly.

234
00:10:19,536 --> 00:10:21,546 A:middle
So let's start clean.

235
00:10:21,726 --> 00:10:28,556 A:middle
We have -- not a
clean slate here.

236
00:10:33,596 --> 00:10:40,716 A:middle
We're going to reset
this a little bit

237
00:10:40,716 --> 00:10:46,056 A:middle
so you can see what it
looks like to add test

238
00:10:46,056 --> 00:10:47,096 A:middle
to an existing project.

239
00:10:47,826 --> 00:10:52,806 A:middle
So we have our project
and at this point,

240
00:10:52,806 --> 00:10:53,776 A:middle
there's no test target.

241
00:10:54,316 --> 00:10:57,636 A:middle
So to add a test, I'm going
to go to the file menu

242
00:10:58,206 --> 00:10:59,776 A:middle
and will select a new target.

243
00:10:59,776 --> 00:11:04,706 A:middle
I'm going to select under
other CoCotest testing.

244

245
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

246
00:10:59,776 --> 00:11:04,706 A:middle
I'm going to select under
other CoCotest testing.

247
00:11:06,326 --> 00:11:08,066 A:middle
And I'm going to
name this target.

248
00:11:08,236 --> 00:11:12,866 A:middle
I'm going to call it
two just to be safe.

249
00:11:13,386 --> 00:11:15,996 A:middle
And now we've noticed
a few things.

250
00:11:16,296 --> 00:11:17,606 A:middle
We see a new group here.

251
00:11:18,176 --> 00:11:21,976 A:middle
Inside of that, we see
a template test file

252
00:11:23,006 --> 00:11:26,886 A:middle
and if we look at the
scheme, we'll also notice

253
00:11:27,316 --> 00:11:32,306 A:middle
that under the test action, we
have this one that I removed

254
00:11:32,416 --> 00:11:34,596 A:middle
but more importantly,
we have this new one

255
00:11:34,656 --> 00:11:37,696 A:middle
that just got added.

256
00:11:37,956 --> 00:11:40,826 A:middle
So there's a few
template methods in here.

257
00:11:40,826 --> 00:11:44,016 A:middle
I'm just going to remove
these so we can start clean

258
00:11:44,016 --> 00:11:45,126 A:middle
and build our test out.

259
00:11:45,916 --> 00:11:47,736 A:middle
So the first thing, to recap,

260
00:11:47,786 --> 00:11:49,386 A:middle
what I want to do
is write a test

261
00:11:49,386 --> 00:11:50,966 A:middle
for this operation subclass.

262
00:11:51,486 --> 00:11:53,716 A:middle
So I'm going to import
the header

263
00:11:54,536 --> 00:11:56,336 A:middle
so that I can access the APIs.

264
00:11:56,336 --> 00:12:01,056 A:middle
The next thing to do is I'm
going to add a test method.

265

266
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

267
00:11:56,336 --> 00:12:01,056 A:middle
The next thing to do is I'm
going to add a test method.

268
00:12:01,796 --> 00:12:03,576 A:middle
And just to reiterate
from earlier,

269
00:12:03,576 --> 00:12:05,056 A:middle
this method returns void.

270
00:12:05,776 --> 00:12:10,356 A:middle
It is prefixed with test and
there are no other parameters.

271
00:12:11,196 --> 00:12:13,916 A:middle
The rest of the name is just
a name that I've come up with

272
00:12:14,016 --> 00:12:18,916 A:middle
that to me represents
what this test is for.

273
00:12:19,136 --> 00:12:21,676 A:middle
Now, I like to sometimes
go through

274
00:12:21,676 --> 00:12:23,596 A:middle
and outline the steps
I'm going to take

275
00:12:23,596 --> 00:12:25,586 A:middle
as comments before
I write the code.

276
00:12:25,586 --> 00:12:26,976 A:middle
It helps me organize
my thoughts.

277
00:12:27,206 --> 00:12:30,736 A:middle
So just hear the summary of
what the test is going to do.

278
00:12:31,276 --> 00:12:35,346 A:middle
We're going to get a URL to
a resource and that's going

279
00:12:35,346 --> 00:12:38,076 A:middle
to be a resource of XML
data that's in the bundle.

280
00:12:38,436 --> 00:12:40,146 A:middle
We're going to load
that into memory.

281
00:12:40,886 --> 00:12:44,306 A:middle
We're going to create the parse
operation then we'll run the

282
00:12:44,306 --> 00:12:45,716 A:middle
operation directly.

283
00:12:46,526 --> 00:12:48,986 A:middle
And finally, we'll check
the number of earthquakes

284
00:12:48,986 --> 00:12:50,066 A:middle
and see if it's correct.

285
00:12:50,066 --> 00:12:53,846 A:middle
So if I'm going to get a
resource to the bundle,

286
00:12:53,846 --> 00:12:55,646 A:middle
I need to add the file.

287
00:12:55,646 --> 00:12:59,196 A:middle
Well, I've had this
file here that is,

288

289
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

290
00:13:04,116 --> 00:13:10,676 A:middle
let's see, I'm going
to copy this file

291
00:13:10,806 --> 00:13:13,096 A:middle
into my project as a resource.

292
00:13:13,626 --> 00:13:15,716 A:middle
I'll copy it in.

293
00:13:16,326 --> 00:13:21,286 A:middle
And this is just some data
that I downloaded in advance

294
00:13:21,316 --> 00:13:23,716 A:middle
because I want to take the
network out of the equation

295
00:13:23,716 --> 00:13:24,696 A:middle
when I write my tests.

296
00:13:24,776 --> 00:13:26,576 A:middle
There's nothing wrong
with testing the network

297
00:13:26,576 --> 00:13:29,986 A:middle
but in general if you keep your
tests simpler, when they fail,

298
00:13:29,986 --> 00:13:31,896 A:middle
it'll be easier to figure
out why they failed.

299
00:13:32,246 --> 00:13:33,996 A:middle
So in this test,
I'm not interested

300
00:13:33,996 --> 00:13:35,416 A:middle
in validating if
the network works.

301
00:13:35,416 --> 00:13:37,296 A:middle
I'm validating the
parsing works.

302
00:13:37,886 --> 00:13:42,386 A:middle
So by having this in my bundle,
I eliminate that as a concern.

303
00:13:42,936 --> 00:13:47,726 A:middle
So to get the URL, I'm
going to go into the bundle

304
00:13:48,466 --> 00:13:52,976 A:middle
and get a resource URL
and then the next thing

305
00:13:52,976 --> 00:13:56,746 A:middle
that I do is just load
that as an NSData.

306
00:13:57,416 --> 00:14:00,256 A:middle
The next step is to
create the parse operation.

307

308
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

309
00:13:57,416 --> 00:14:00,256 A:middle
The next step is to
create the parse operation.

310
00:14:00,756 --> 00:14:04,246 A:middle
So that is the class that
we are trying to test here.

311
00:14:04,246 --> 00:14:07,626 A:middle
I'm going to create it with
this data and I'm not going

312
00:14:07,626 --> 00:14:10,036 A:middle
to set a Delegate because in
this test, I don't need to.

313
00:14:11,196 --> 00:14:13,666 A:middle
The next thing is to run
the operation directly.

314
00:14:13,866 --> 00:14:16,396 A:middle
Now, we know that
NSOperation is designed

315
00:14:16,396 --> 00:14:17,496 A:middle
to be run in the background.

316
00:14:17,786 --> 00:14:20,556 A:middle
But operations allow you
to invoke them directly

317
00:14:20,556 --> 00:14:22,816 A:middle
and synchronously by
just calling start.

318
00:14:23,186 --> 00:14:25,846 A:middle
That means when we call
start, it's going to run

319
00:14:25,846 --> 00:14:28,526 A:middle
and when we return,
it's finished running.

320
00:14:29,506 --> 00:14:33,146 A:middle
So at that point, I can
check the results and see

321
00:14:33,496 --> 00:14:35,206 A:middle
if they are what I expected.

322
00:14:35,836 --> 00:14:38,206 A:middle
Now, I have zero here.

323
00:14:38,306 --> 00:14:42,056 A:middle
I actually know that there
is more than zero but I'd

324
00:14:42,056 --> 00:14:44,296 A:middle
like to run this and let
you see what a failure looks

325
00:14:44,296 --> 00:14:45,886 A:middle
like before we go any further.

326
00:14:46,216 --> 00:14:49,666 A:middle
So I'm hitting Command-U
to run the test.

327
00:14:51,196 --> 00:14:55,526 A:middle
It ran quickly and you can
see here's this message,

328
00:14:55,646 --> 00:15:01,286 A:middle
parse operation zero failed,
55 is not equal to zero.

329

330
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

331
00:14:55,646 --> 00:15:01,286 A:middle
parse operation zero failed,
55 is not equal to zero.

332
00:15:01,286 --> 00:15:05,866 A:middle
Okay, so there are 55
earthquakes in there.

333
00:15:07,016 --> 00:15:08,966 A:middle
So let's run this again.

334
00:15:10,406 --> 00:15:12,736 A:middle
And now we've passed our test.

335
00:15:12,736 --> 00:15:15,866 A:middle
And again you see that
same pass indicator there

336
00:15:15,866 --> 00:15:21,396 A:middle
in the Test Navigator and we
see it here in the Test Log

337
00:15:22,216 --> 00:15:24,016 A:middle
that we parsed and succeeded.

338
00:15:25,056 --> 00:15:27,466 A:middle
So that's what it takes
to add test to a project.

339
00:15:27,466 --> 00:15:29,956 A:middle
We created a new test
target and then we go in

340
00:15:29,956 --> 00:15:31,126 A:middle
and we added the test code.

341
00:15:31,126 --> 00:15:34,166 A:middle
We create test methods
and we used the assertions

342
00:15:34,166 --> 00:15:36,236 A:middle
to validate the state
that we expect.

343
00:15:36,926 --> 00:15:39,056 A:middle
So I'm going to switch
back to slides now.

344
00:15:40,426 --> 00:15:43,696 A:middle
Okay, so let's get on to
what's new in Xcode 6.

345
00:15:43,916 --> 00:15:46,616 A:middle
We have new APIs and
improvements to our tools.

346
00:15:47,206 --> 00:15:50,706 A:middle
So the first thing I want

347
00:15:50,706 --> 00:15:54,826 A:middle
to mention is we've added
some improvements that help

348
00:15:54,826 --> 00:15:56,376 A:middle
with the compatibility story.

349
00:15:56,956 --> 00:15:59,856 A:middle
And I'll get into more detail
but this basically means

350
00:15:59,856 --> 00:16:03,656 A:middle
which versions of our OS
you can target using XCTest.

351

352
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

353
00:15:59,856 --> 00:16:03,656 A:middle
which versions of our OS
you can target using XCTest.

354
00:16:04,996 --> 00:16:07,586 A:middle
We've also added instruments
integration for tests

355
00:16:07,836 --> 00:16:10,656 A:middle
and Brooke will talk to you
more about that later on.

356
00:16:12,116 --> 00:16:15,386 A:middle
Finally, we've got new APIs
and as I mentioned earlier,

357
00:16:15,716 --> 00:16:17,816 A:middle
these are both for
asynchronous testing

358
00:16:17,816 --> 00:16:19,266 A:middle
and for performance testing.

359
00:16:20,586 --> 00:16:24,226 A:middle
So first, XCTest on
older iOS versions.

360
00:16:24,896 --> 00:16:27,096 A:middle
Originally XCTest
shipped and it was part

361
00:16:27,096 --> 00:16:28,746 A:middle
of the iOS release itself.

362
00:16:29,066 --> 00:16:31,936 A:middle
So it meant when we shipped
it, you could only run it

363
00:16:32,206 --> 00:16:34,496 A:middle
on versions of iOS that had it.

364
00:16:34,696 --> 00:16:35,816 A:middle
We've changed now.

365
00:16:35,976 --> 00:16:38,696 A:middle
Now we're shipping
XCTest with Xcode itself.

366
00:16:39,206 --> 00:16:42,416 A:middle
So this means that as we
add new features to XCTest,

367
00:16:42,416 --> 00:16:45,066 A:middle
you don't have to worry about
whether or not they're going

368
00:16:45,066 --> 00:16:46,946 A:middle
to be available where
you're running your tests

369
00:16:46,946 --> 00:16:48,436 A:middle
because you're always
going to be testing

370
00:16:48,436 --> 00:16:50,336 A:middle
with the current version
that's in the Xcode.

371
00:16:50,916 --> 00:16:56,656 A:middle
And this also means that we can
target older versions of iOS.

372
00:16:56,656 --> 00:17:00,846 A:middle
So anywhere that Xcode supports,
XCTest will also support.

373

374
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

375
00:16:56,656 --> 00:17:00,846 A:middle
So anywhere that Xcode supports,
XCTest will also support.

376
00:17:00,846 --> 00:17:03,376 A:middle
And this means iOS 6 and later.

377
00:17:04,516 --> 00:17:08,776 A:middle
[ Applause ]

378
00:17:09,276 --> 00:17:12,046 A:middle
So that's probably a good
time to just mention OCUnit

379
00:17:12,046 --> 00:17:16,336 A:middle
which is the legacy technology
that XCTest was derived from.

380
00:17:17,766 --> 00:17:21,086 A:middle
In Xcode 5.1, we
deprecated OCUnit.

381
00:17:21,086 --> 00:17:23,116 A:middle
We're not adding new features

382
00:17:23,316 --> 00:17:28,606 A:middle
and we really think the time
is now to move to XCTest

383
00:17:28,606 --> 00:17:32,076 A:middle
because we've added new features
to it, integration is better

384
00:17:32,466 --> 00:17:37,136 A:middle
and OCUnit is no longer where
we're focusing our energies.

385
00:17:39,566 --> 00:17:42,626 A:middle
If you have existing targets
that you want to switch

386
00:17:42,626 --> 00:17:45,646 A:middle
from XCTest, we recommend
you use a migrator

387
00:17:45,646 --> 00:17:46,976 A:middle
in Xcode to do so.

388
00:17:47,676 --> 00:17:50,356 A:middle
The reason for this
and also to do this,

389
00:17:50,356 --> 00:17:51,846 A:middle
you just go to the Edit menu

390
00:17:51,846 --> 00:17:54,656 A:middle
and select Refactor,
Convert to XCTest.

391
00:17:54,976 --> 00:17:58,106 A:middle
And it will update the
project settings and also all

392
00:17:58,106 --> 00:18:00,506 A:middle
of your test classes
will get updated.

393

394
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

395
00:17:58,106 --> 00:18:00,506 A:middle
of your test classes
will get updated.

396
00:18:02,256 --> 00:18:04,406 A:middle
The reason for this is
some of the build settings

397
00:18:04,406 --> 00:18:07,246 A:middle
that are associated with
this are not accessible

398
00:18:07,246 --> 00:18:08,306 A:middle
in the Xcode UI.

399
00:18:08,706 --> 00:18:11,426 A:middle
So some people in
the past have tried

400
00:18:11,426 --> 00:18:14,776 A:middle
to do the migration manually
and you know, you end up --

401
00:18:14,776 --> 00:18:17,596 A:middle
you're not able to
do it 100% by hand.

402
00:18:18,136 --> 00:18:20,886 A:middle
If you are, if you really
do want to do it yourself,

403
00:18:22,046 --> 00:18:25,016 A:middle
there's a different way which is
just to create a new test target

404
00:18:25,016 --> 00:18:27,696 A:middle
which is guaranteed to have
exactly the right settings

405
00:18:28,026 --> 00:18:30,386 A:middle
and just move your existing
tests into it manually.

406
00:18:31,236 --> 00:18:35,606 A:middle
So now, let's talk about
Asynchronous Testing,

407
00:18:35,806 --> 00:18:38,216 A:middle
one of our new APIs in Xcode 6.

408
00:18:39,376 --> 00:18:40,356 A:middle
So more and more APIs

409
00:18:40,356 --> 00:18:43,436 A:middle
on our platform themselves
are asynchronous.

410
00:18:43,696 --> 00:18:46,566 A:middle
They have block invocations
when they're done

411
00:18:46,896 --> 00:18:48,696 A:middle
that may get run in
different queues.

412
00:18:49,236 --> 00:18:50,616 A:middle
They have Delegate callbacks

413
00:18:50,616 --> 00:18:52,636 A:middle
that may be deferred
by the [inaudible].

414
00:18:52,986 --> 00:18:54,956 A:middle
They may make network requests

415
00:18:54,956 --> 00:18:57,706 A:middle
which we absolutely know should
be handled asynchronously.

416
00:18:58,396 --> 00:19:00,506 A:middle
Or they're doing
background processing

417

418
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

419
00:18:58,396 --> 00:19:00,506 A:middle
Or they're doing
background processing

420
00:19:00,506 --> 00:19:02,206 A:middle
like our NSOperation here.

421
00:19:03,026 --> 00:19:04,986 A:middle
So this creates a challenge

422
00:19:04,986 --> 00:19:08,416 A:middle
because tests themselves
run synchronously.

423
00:19:08,886 --> 00:19:12,186 A:middle
And so, to help you with
that, we've added APIs

424
00:19:12,186 --> 00:19:16,486 A:middle
that will allow you to create
asynchronous control flow

425
00:19:17,186 --> 00:19:19,336 A:middle
that manages asynchronous
activities.

426
00:19:19,956 --> 00:19:23,476 A:middle
And we do this what we
call expectation objects

427
00:19:23,476 --> 00:19:27,056 A:middle
and these describe events
in your test that you expect

428
00:19:27,056 --> 00:19:29,846 A:middle
to happen at some
point in the future,

429
00:19:30,146 --> 00:19:31,456 A:middle
hopefully not too distant.

430
00:19:32,646 --> 00:19:38,176 A:middle
With these objects, XCTest
has an API that would wait

431
00:19:38,176 --> 00:19:39,416 A:middle
for them to be fulfilled.

432
00:19:40,766 --> 00:19:42,286 A:middle
And that takes a timeout

433
00:19:42,286 --> 00:19:44,466 A:middle
and a completion handler
that's called either

434
00:19:44,466 --> 00:19:48,256 A:middle
when the timeout hits or when
all the events are fulfilled.

435
00:19:48,396 --> 00:19:49,186 A:middle
And you can be waiting

436
00:19:49,186 --> 00:19:52,336 A:middle
on multiple asynchronous
events at the same time.

437
00:19:53,756 --> 00:19:55,286 A:middle
So let's look at a code example.

438
00:19:56,266 --> 00:20:00,956 A:middle
UIDocument, as you may know, has
a open with completion handler.

439

440
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

441
00:19:56,266 --> 00:20:00,956 A:middle
UIDocument, as you may know, has
a open with completion handler.

442
00:20:01,076 --> 00:20:03,666 A:middle
There's an asynchronous
opening and that's great

443
00:20:03,666 --> 00:20:06,466 A:middle
because if a large document
might take a little bit of time

444
00:20:06,466 --> 00:20:07,466 A:middle
to open and you don't want

445
00:20:07,466 --> 00:20:11,416 A:middle
to stall the user's interactive
experience while you're waiting

446
00:20:11,416 --> 00:20:11,806 A:middle
for that.

447
00:20:12,476 --> 00:20:14,166 A:middle
So let's write a test for that.

448
00:20:14,166 --> 00:20:16,256 A:middle
The first thing I do is
I create an expectation.

449
00:20:16,256 --> 00:20:20,006 A:middle
And these expectation
creation methods take a string

450
00:20:20,006 --> 00:20:22,486 A:middle
which is simply a
description for your benefit.

451
00:20:22,486 --> 00:20:24,706 A:middle
It tells you if we
had a timeout,

452
00:20:25,556 --> 00:20:27,476 A:middle
it tells you what
we were waiting for.

453
00:20:27,746 --> 00:20:29,726 A:middle
And so the more descriptive
you make that,

454
00:20:29,836 --> 00:20:33,046 A:middle
the easier your life will be.

455
00:20:33,756 --> 00:20:36,846 A:middle
Then we create a document
which I'm not showing here.

456
00:20:36,846 --> 00:20:38,846 A:middle
And we call the
openwithCompletionHandler.

457
00:20:38,846 --> 00:20:41,076 A:middle
And you notice I haven't filled
out the CompletionHandler.

458
00:20:41,076 --> 00:20:42,926 A:middle
It's just an empty
block at this point.

459
00:20:44,356 --> 00:20:45,476 A:middle
We'll get back to
it in a moment.

460
00:20:45,476 --> 00:20:48,476 A:middle
And then finally, I
call waitForExpectations

461
00:20:48,476 --> 00:20:49,896 A:middle
with a 5-second timeout.

462
00:20:50,276 --> 00:20:54,296 A:middle
Probably a little on the long
side but just to be safe here.

463
00:20:54,736 --> 00:20:57,046 A:middle
So what we have now
is asynchronous flow.

464
00:20:57,046 --> 00:21:00,616 A:middle
We have create expectation,
set up the document,

465

466
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

467
00:20:57,046 --> 00:21:00,616 A:middle
We have create expectation,
set up the document,

468
00:21:01,236 --> 00:21:03,386 A:middle
open it and then wait.

469
00:21:03,736 --> 00:21:05,636 A:middle
And this is asynchronous
flow within the test.

470
00:21:05,856 --> 00:21:10,156 A:middle
Asynchronously later, that
block will be called back.

471
00:21:10,156 --> 00:21:12,136 A:middle
Inside the handler, I'm
going to do two things.

472
00:21:12,136 --> 00:21:13,666 A:middle
I'm going to use
one of our asserts

473
00:21:14,096 --> 00:21:16,546 A:middle
to validate this
opening was successful.

474
00:21:17,596 --> 00:21:20,896 A:middle
On top of that, I'm going
to call expectation fulfill

475
00:21:20,896 --> 00:21:23,946 A:middle
which will cause the
waitForExpectations to return

476
00:21:23,946 --> 00:21:24,816 A:middle
because now all

477
00:21:24,816 --> 00:21:27,626 A:middle
of the expectations I have
created have been fulfilled.

478
00:21:29,246 --> 00:21:32,716 A:middle
So let's see what that
looks like if we add

479
00:21:32,716 --> 00:21:34,976 A:middle
that to our seismic XML tests.

480
00:21:44,166 --> 00:21:49,606 A:middle
Okay, so we go back to our test.

481
00:21:49,856 --> 00:21:50,756 A:middle
It's right here.

482
00:21:50,756 --> 00:21:57,066 A:middle
And the first thing we do is I'm
going to just rename this to,

483
00:21:57,426 --> 00:21:59,516 A:middle
let's say,
ParsingInTheBackground

484

485
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

486
00:22:00,356 --> 00:22:06,926 A:middle
because that's closer to our
actual real-world usage anyway.

487
00:22:08,506 --> 00:22:10,106 A:middle
So the first part of
the test stays the same.

488
00:22:10,106 --> 00:22:10,776 A:middle
We're still going to use

489
00:22:10,776 --> 00:22:13,906 A:middle
that same resource file,
load it into memory.

490
00:22:14,616 --> 00:22:19,116 A:middle
Now before we create our parse
operation, we'll need to --

491
00:22:19,116 --> 00:22:21,066 A:middle
this is where things are
going to change a little bit.

492
00:22:21,196 --> 00:22:26,656 A:middle
So if you think about
it, we have here,

493
00:22:26,656 --> 00:22:28,646 A:middle
we're running the parse
operation directly.

494
00:22:29,256 --> 00:22:34,126 A:middle
Instead of that, let's run
it in an OperationQueue.

495
00:22:34,886 --> 00:22:37,376 A:middle
So that looks like
create an OperationQueue

496
00:22:37,916 --> 00:22:39,406 A:middle
and add the operation to it.

497
00:22:39,406 --> 00:22:42,056 A:middle
And that means the
operation is going

498
00:22:42,056 --> 00:22:43,856 A:middle
to start running
immediately but it's going

499
00:22:43,856 --> 00:22:45,276 A:middle
to do so in the background.

500
00:22:46,336 --> 00:22:48,146 A:middle
Now if I leave the test as is,

501
00:22:48,876 --> 00:22:51,326 A:middle
because that running is
happening in the background

502
00:22:52,136 --> 00:22:54,046 A:middle
and our tests are
just continuing on,

503
00:22:54,046 --> 00:22:55,386 A:middle
it's not stopping or waiting.

504
00:22:55,636 --> 00:22:56,776 A:middle
It's just ready to go.

505
00:22:57,256 --> 00:23:00,606 A:middle
If we run this test now,
what we're going to see is

506

507
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

508
00:22:57,256 --> 00:23:00,606 A:middle
If we run this test now,
what we're going to see is

509
00:23:00,606 --> 00:23:02,186 A:middle
that we failed because
at the point

510
00:23:02,186 --> 00:23:05,066 A:middle
where we're evaluating
this, parsing isn't done.

511
00:23:05,226 --> 00:23:06,686 A:middle
It's off in the background
somewhere

512
00:23:06,686 --> 00:23:09,086 A:middle
and we don't know
whether it's finished yet.

513
00:23:09,576 --> 00:23:12,746 A:middle
So what we want to
do is wait for it

514
00:23:12,746 --> 00:23:15,896 A:middle
to be finished before we check.

515
00:23:15,896 --> 00:23:18,796 A:middle
And I'm just using a
2-second timeout here.

516
00:23:18,996 --> 00:23:22,126 A:middle
These timeouts are
largely at your discretion.

517
00:23:22,446 --> 00:23:26,226 A:middle
If you make them really, really
small then you may have cases

518
00:23:26,226 --> 00:23:28,146 A:middle
where something takes
a little longer to run

519
00:23:28,146 --> 00:23:30,546 A:middle
and you get a failure
that's not really a failure.

520
00:23:30,856 --> 00:23:34,936 A:middle
So those are just kind
of at your discretion.

521
00:23:35,496 --> 00:23:39,276 A:middle
So now, we can wait
but before we wait,

522
00:23:39,276 --> 00:23:41,216 A:middle
we also need an expectation

523
00:23:41,346 --> 00:23:43,126 A:middle
that describes what
we're waiting for.

524
00:23:43,666 --> 00:23:46,496 A:middle
So think about the operation.

525
00:23:46,576 --> 00:23:47,546 A:middle
How do we know it's done?

526
00:23:47,546 --> 00:23:50,116 A:middle
Well, it has this Delegate
API with callbacks.

527
00:23:50,116 --> 00:23:51,816 A:middle
So let's look at what
those were like again.

528
00:23:52,126 --> 00:23:56,826 A:middle
So ParseOperation, the Delegate
callbacks, we have DidParse,

529
00:23:57,586 --> 00:23:59,886 A:middle
DidFinish, DidFailWithError.

530

531
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

532
00:24:00,146 --> 00:24:02,646 A:middle
Well, DidFinish looks
like exactly what I want.

533
00:24:02,826 --> 00:24:07,076 A:middle
So going back into my test, if
I'm going to be the Delegate,

534
00:24:07,176 --> 00:24:10,856 A:middle
I need my test itself to conform
to the Delegate Protocol.

535
00:24:11,346 --> 00:24:16,036 A:middle
And then I need to implement
the DidFinish method.

536
00:24:16,626 --> 00:24:20,896 A:middle
Now inside that, I'm going
to operate on some kind

537
00:24:20,896 --> 00:24:22,986 A:middle
of expectation and report
that it's fulfilled.

538
00:24:22,986 --> 00:24:26,456 A:middle
But since we're here and we're
not in the same context here,

539
00:24:26,456 --> 00:24:30,066 A:middle
we'll need to track that
operation as a property.

540
00:24:30,066 --> 00:24:35,886 A:middle
So we'll just add an expectation
property to our test.

541
00:24:35,986 --> 00:24:39,246 A:middle
We'll set it up before we
create the ParseOperation.

542
00:24:39,586 --> 00:24:41,636 A:middle
So we've created
our expectation.

543
00:24:41,946 --> 00:24:43,926 A:middle
"Parsing finished" is what
we're calling it here.

544
00:24:44,776 --> 00:24:50,486 A:middle
And then inside our
operation, we will fulfill it.

545
00:24:50,596 --> 00:24:51,616 A:middle
So let's just run this.

546
00:24:52,246 --> 00:24:53,216 A:middle
Now, secret.

547
00:24:53,216 --> 00:24:55,546 A:middle
This is actually going to fail
because I've left something

548
00:24:55,546 --> 00:24:58,586 A:middle
out intentionally but I want
you to see what failure looks

549
00:24:58,586 --> 00:25:00,676 A:middle
like when we hit a timeout.

550

551
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

552
00:24:58,586 --> 00:25:00,676 A:middle
like when we hit a timeout.

553
00:25:00,926 --> 00:25:04,836 A:middle
And asynchronous wait failed.

554
00:25:05,046 --> 00:25:06,736 A:middle
Exceeded timeout of 2 seconds

555
00:25:06,736 --> 00:25:09,626 A:middle
with unfulfilled
expectations "parsing finished".

556
00:25:09,856 --> 00:25:12,696 A:middle
So we never fulfilled
our expectation.

557
00:25:12,826 --> 00:25:14,746 A:middle
Well, the reason
is pretty simple.

558
00:25:14,746 --> 00:25:18,276 A:middle
I forgot actually to say that
this object is the delegate.

559
00:25:19,176 --> 00:25:22,366 A:middle
So once we hook that
up, we run again.

560
00:25:23,136 --> 00:25:26,706 A:middle
This time, everything passes
because we get the callback,

561
00:25:26,706 --> 00:25:31,316 A:middle
we fulfill the expectation, we
unwind from the wait and then

562
00:25:31,316 --> 00:25:34,406 A:middle
when we evaluate the number of
parsed earthquakes, it's 55.

563
00:25:35,376 --> 00:25:39,736 A:middle
So just walking through this
again, we used an expectation

564
00:25:40,246 --> 00:25:41,956 A:middle
to describe a future event.

565
00:25:43,416 --> 00:25:46,286 A:middle
We wait for the expectation
here.

566
00:25:46,286 --> 00:25:50,076 A:middle
And then when that event
occurs, which in this case is

567
00:25:50,076 --> 00:25:52,946 A:middle
in a delegate callback that
could be inside a block handler

568
00:25:52,946 --> 00:25:55,276 A:middle
or some other context,
we fulfill it.

569
00:25:55,716 --> 00:25:57,256 A:middle
That causes wait to return.

570
00:25:57,636 --> 00:26:01,046 A:middle
So this allows us to handle
an asynchronous activity

571

572
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

573
00:25:57,636 --> 00:26:01,046 A:middle
So this allows us to handle
an asynchronous activity

574
00:26:01,466 --> 00:26:02,636 A:middle
in a synchronous fashion.

575
00:26:03,426 --> 00:26:04,576 A:middle
It's fine for testing.

576
00:26:05,216 --> 00:26:07,176 A:middle
I wouldn't recommend you
do this on the main thread

577
00:26:07,176 --> 00:26:08,286 A:middle
of your application
code [laughter].

578
00:26:09,086 --> 00:26:12,266 A:middle
Okay, so let's switch back.

579
00:26:13,256 --> 00:26:19,426 A:middle
So that's what it looks like
to write an asynchronous test

580
00:26:19,796 --> 00:26:21,946 A:middle
with the new APIs in Xcode 6.

581
00:26:22,896 --> 00:26:26,916 A:middle
Now, Brooke's going to talk to
you about performance testing.

582
00:26:27,516 --> 00:26:30,746 A:middle
[ Applause ]

583
00:26:31,246 --> 00:26:32,256 A:middle
>> Thanks, Will.

584
00:26:32,446 --> 00:26:35,696 A:middle
So it can be easy to introduce
performance regressions

585
00:26:35,696 --> 00:26:36,166 A:middle
in your code.

586
00:26:37,176 --> 00:26:40,536 A:middle
And historically, finding these
issues can be time consuming

587
00:26:40,536 --> 00:26:41,676 A:middle
and expensive because you need

588
00:26:41,676 --> 00:26:44,756 A:middle
to manually use your
application to find them.

589
00:26:44,866 --> 00:26:46,156 A:middle
Now Apple has some great tools

590
00:26:46,156 --> 00:26:47,836 A:middle
for investigating
performance issues.

591
00:26:48,926 --> 00:26:51,596 A:middle
And performance testing
is just a way to tell you

592
00:26:51,596 --> 00:26:52,776 A:middle
when to do that investigation.

593
00:26:56,416 --> 00:26:59,516 A:middle
So we'll look at some
new APIs that we've added

594
00:26:59,516 --> 00:27:02,386 A:middle
to help you measure performance
and detect regressions.

595

596
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

597
00:26:59,516 --> 00:27:02,386 A:middle
to help you measure performance
and detect regressions.

598
00:27:03,116 --> 00:27:05,826 A:middle
We'll also see how
the measurements

599
00:27:05,826 --> 00:27:08,346 A:middle
that these APIs make
to our surface

600
00:27:08,346 --> 00:27:12,796 A:middle
and Xcode UI including
those test failures due

601
00:27:12,796 --> 00:27:13,766 A:middle
to regressions.

602
00:27:14,626 --> 00:27:18,086 A:middle
And now that Xcode is going to
be reporting performance issues

603
00:27:18,616 --> 00:27:21,466 A:middle
as failures, it ought to
give you an easy way to do

604
00:27:21,466 --> 00:27:23,676 A:middle
that investigation so you
can now profile your test

605
00:27:23,676 --> 00:27:24,346 A:middle
with Instruments.

606
00:27:24,906 --> 00:27:29,896 A:middle
The easiest way to do this is
to use the new measureBlock API.

607
00:27:30,246 --> 00:27:31,416 A:middle
This takes a block of code

608
00:27:31,936 --> 00:27:36,716 A:middle
and runs it 10 times measuring
the duration each time

609
00:27:37,976 --> 00:27:39,336 A:middle
and showing the results
in Xcode.

610
00:27:43,376 --> 00:27:48,486 A:middle
So for example, I've got a
test here that I'm writing

611
00:27:48,486 --> 00:27:50,976 A:middle
that I want to measure
the performance

612
00:27:50,976 --> 00:27:51,816 A:middle
of using a fileHandle.

613
00:27:52,406 --> 00:27:53,836 A:middle
So I'll call self measureBlock

614
00:27:54,936 --> 00:27:55,996 A:middle
and then the code
I want to measure.

615
00:27:56,376 --> 00:27:58,356 A:middle
It's creating a fileHandle,
using it

616
00:27:58,356 --> 00:27:59,546 A:middle
and then closing the fileHandle.

617

618
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

619
00:28:04,296 --> 00:28:06,816 A:middle
Now that I've got this test,
I'm going to want to profile it

620
00:28:07,316 --> 00:28:09,086 A:middle
in the case that Xcode tells
me something went wrong.

621
00:28:10,176 --> 00:28:13,246 A:middle
And you can do this from Xcode
Source Editor or Test Navigator

622
00:28:13,736 --> 00:28:15,076 A:middle
from their context menus.

623
00:28:16,376 --> 00:28:23,946 A:middle
And there's also a Command for
this under the Product menu.

624
00:28:24,326 --> 00:28:27,756 A:middle
It's important to keep in mind
that when you profile your test,

625
00:28:28,046 --> 00:28:29,916 A:middle
this uses settings from
the Scheme Profile Action.

626
00:28:32,226 --> 00:28:34,946 A:middle
The most obvious
difference here is

627
00:28:34,946 --> 00:28:36,656 A:middle
that when you're just
running your test

628
00:28:36,856 --> 00:28:38,856 A:middle
that it uses a Debug
configuration by default.

629
00:28:39,226 --> 00:28:41,316 A:middle
But Profiling will use
a Release configuration

630
00:28:41,316 --> 00:28:43,686 A:middle
and there may be some
difference in behavior there.

631
00:28:44,626 --> 00:28:47,856 A:middle
Let's take a look at the demo.

632
00:28:48,626 --> 00:28:50,466 A:middle
So here, I have a Mac
version of the project

633
00:28:50,466 --> 00:28:51,296 A:middle
that Will showed you earlier.

634
00:28:52,656 --> 00:28:54,016 A:middle
And I've already got
a couple of tests

635
00:28:54,266 --> 00:28:55,616 A:middle
that used the measureBlock API.

636
00:28:55,616 --> 00:28:56,926 A:middle
I'm just going to
run my test now.

637

638
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

639
00:29:04,416 --> 00:29:07,766 A:middle
So I don't know if you can see
this, but Xcode is telling me

640
00:29:07,766 --> 00:29:11,146 A:middle
that this test is doing 4000%
worse than it did before.

641
00:29:11,676 --> 00:29:13,876 A:middle
So that's not so great.

642
00:29:14,446 --> 00:29:19,456 A:middle
So how am I going to figure
out what's gone wrong here?

643
00:29:19,456 --> 00:29:22,046 A:middle
I could look at the test
itself to see, you know,

644
00:29:22,096 --> 00:29:24,016 A:middle
is there anything obvious
that the test is doing wrong?

645
00:29:24,016 --> 00:29:27,396 A:middle
Well, it appears to be loading
its file from the test bundle.

646
00:29:27,816 --> 00:29:33,026 A:middle
Parsing it and then validating
that the earthquakes are right.

647
00:29:33,026 --> 00:29:34,816 A:middle
I could look and see if
there are any local changes

648
00:29:34,816 --> 00:29:36,496 A:middle
in my project?

649
00:29:36,906 --> 00:29:37,466 A:middle
No, there aren't.

650
00:29:38,486 --> 00:29:40,886 A:middle
I could look and see
how this test compares

651
00:29:40,886 --> 00:29:42,296 A:middle
to all the other
tests in my project.

652
00:29:43,086 --> 00:29:45,346 A:middle
And actually, this one's
doing a little bit --

653
00:29:45,346 --> 00:29:48,716 A:middle
this one's doing bad but the
other one's doing a lot better.

654
00:29:50,196 --> 00:29:52,556 A:middle
So it looks like I'm just
going to have to profile it.

655
00:29:52,556 --> 00:29:55,176 A:middle
And I can do that by
right-clicking on this button

656
00:29:55,176 --> 00:29:56,936 A:middle
in the Source Editor
and selecting Profile

657
00:29:58,116 --> 00:30:03,446 A:middle
or I can also do that from the
Test Navigator by right-clicking

658

659
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

660
00:29:58,116 --> 00:30:03,446 A:middle
or I can also do that from the
Test Navigator by right-clicking

661
00:30:03,446 --> 00:30:05,976 A:middle
on my test and selecting
Profile.

662
00:30:10,736 --> 00:30:12,886 A:middle
I'll select Time
Profile from Instruments

663
00:30:13,776 --> 00:30:14,886 A:middle
and I'll click Record.

664
00:30:15,646 --> 00:30:21,086 A:middle
Now, Instruments has
launched my application

665
00:30:21,086 --> 00:30:22,436 A:middle
and it's run my tests
and it's done.

666
00:30:23,506 --> 00:30:26,166 A:middle
So I'll zoom in a bit
so you can see this.

667
00:30:27,036 --> 00:30:32,726 A:middle
I'm just going to invert the
call tree and expand this.

668
00:30:33,536 --> 00:30:39,256 A:middle
And from here, I can see
my test is being called.

669
00:30:40,496 --> 00:30:42,526 A:middle
XCTest is eventually calling
the block that I've given it

670
00:30:43,346 --> 00:30:44,866 A:middle
and it's calling this
validateProperties

671
00:30:44,866 --> 00:30:46,596 A:middle
which is calling some
really expensive function.

672
00:30:46,716 --> 00:30:48,256 A:middle
Well, it's finding
out what I want.

673
00:30:48,836 --> 00:30:51,346 A:middle
So let's look into that.

674
00:30:51,606 --> 00:30:53,616 A:middle
I'm going to right-click
on validateProperties

675
00:30:53,616 --> 00:30:58,866 A:middle
and use Reveal on
Xcode and zoom out.

676
00:30:59,536 --> 00:31:00,196 A:middle
Yeah, yeah.

677

678
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

679
00:30:59,536 --> 00:31:00,196 A:middle
Yeah, yeah.

680
00:31:00,196 --> 00:31:01,056 A:middle
It is expensive.

681
00:31:01,086 --> 00:31:04,416 A:middle
Okay, so let's just
get rid of this.

682
00:31:04,676 --> 00:31:07,736 A:middle
I'm just going to delete
that and run my test again.

683
00:31:11,676 --> 00:31:13,556 A:middle
And it [inaudible], great.

684
00:31:15,166 --> 00:31:17,686 A:middle
So what you've just seen is you
can use a new measureBlock API

685
00:31:18,056 --> 00:31:20,506 A:middle
to measure performance
and detect regressions.

686
00:31:21,666 --> 00:31:23,526 A:middle
You can view these results
in the Source Editor

687
00:31:23,526 --> 00:31:26,506 A:middle
and the Test Report and you
can also Profile your test

688
00:31:27,126 --> 00:31:27,786 A:middle
with Instruments.

689
00:31:28,236 --> 00:31:30,646 A:middle
So you've just gotten a taste

690
00:31:30,646 --> 00:31:32,746 A:middle
of how Performance
Testing works with Xcode.

691
00:31:32,746 --> 00:31:34,496 A:middle
Now let's go into details.

692
00:31:34,666 --> 00:31:36,106 A:middle
First of all, setting Baselines.

693
00:31:36,386 --> 00:31:40,026 A:middle
For XCTest to report a test as
failing due to a regression,

694
00:31:40,066 --> 00:31:41,916 A:middle
it needs a fixed point
to compare against.

695
00:31:42,386 --> 00:31:43,536 A:middle
And the Baselines
lets us do that.

696
00:31:44,116 --> 00:31:47,336 A:middle
And the Standard Deviation,

697
00:31:49,366 --> 00:31:51,336 A:middle
XCTest should only report
performance regression

698
00:31:51,336 --> 00:31:52,726 A:middle
when something's
actually gotten worse.

699
00:31:53,866 --> 00:31:57,096 A:middle
XCTest uses Standard Deviation
to determine the spread

700
00:31:57,096 --> 00:31:59,266 A:middle
of the measurements, to tell
us how reliable they are.

701
00:31:59,976 --> 00:32:03,056 A:middle
And finally, measuring
precisely.

702

703
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

704
00:31:59,976 --> 00:32:03,056 A:middle
And finally, measuring
precisely.

705
00:32:03,356 --> 00:32:04,396 A:middle
We have some additional APIs

706
00:32:04,396 --> 00:32:06,576 A:middle
that let you be even
more precise

707
00:32:06,576 --> 00:32:07,566 A:middle
about what you want to measure.

708
00:32:08,326 --> 00:32:11,426 A:middle
So let's look at the Baselines.

709
00:32:11,556 --> 00:32:13,816 A:middle
The Baseline is the
Average from a previous run

710
00:32:13,816 --> 00:32:16,306 A:middle
that you've specifically
selected for comparison.

711
00:32:17,896 --> 00:32:20,606 A:middle
Once you've set a Baseline,
XCTest will use this

712
00:32:20,896 --> 00:32:21,856 A:middle
to detect regressions.

713
00:32:22,356 --> 00:32:27,906 A:middle
It will fail a test if the
new Average has increased

714
00:32:27,906 --> 00:32:29,746 A:middle
from the Baseline
Average by 10% or more

715
00:32:30,736 --> 00:32:32,586 A:middle
and it will ignore
regressions of less

716
00:32:32,586 --> 00:32:33,436 A:middle
than a tenth of a second.

717
00:32:34,016 --> 00:32:36,346 A:middle
This is to eliminate a
source of false positives.

718
00:32:36,916 --> 00:32:41,496 A:middle
The Baselines are stored in the
source where you commit them

719
00:32:41,496 --> 00:32:43,946 A:middle
to your repository and show
them on routine numbers.

720
00:32:45,236 --> 00:32:47,966 A:middle
And they're stored per
device configuration.

721
00:32:47,966 --> 00:32:50,946 A:middle
So when I run tests on my
iPhone 5S, they're going

722
00:32:50,946 --> 00:32:52,296 A:middle
to be using the same Baselines

723
00:32:52,576 --> 00:32:57,166 A:middle
that when Will runs the same
test on his iPhone 5S are used.

724
00:32:58,626 --> 00:33:01,676 A:middle
But at the same time, if
I were to run these tests

725

726
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

727
00:32:58,626 --> 00:33:01,676 A:middle
But at the same time, if
I were to run these tests

728
00:33:01,876 --> 00:33:05,996 A:middle
in a simulated iPhone 5S, it
would not use those Baselines

729
00:33:05,996 --> 00:33:07,676 A:middle
because that would be a
different device configuration.

730
00:33:11,476 --> 00:33:14,526 A:middle
So let's talk about how you
set the Baselines with Xcode.

731
00:33:15,076 --> 00:33:18,326 A:middle
The first time I run a test,
I'm going to see an annotation

732
00:33:18,326 --> 00:33:21,316 A:middle
like this with this gray
diamond with a white dot

733
00:33:21,316 --> 00:33:23,656 A:middle
on it telling me there's
no Baseline for the test.

734
00:33:24,886 --> 00:33:27,806 A:middle
And that lets me know that it
didn't do any comparison at all

735
00:33:28,036 --> 00:33:30,236 A:middle
and it's just showing
me the average

736
00:33:30,506 --> 00:33:34,136 A:middle
that the time that
the test took.

737
00:33:34,526 --> 00:33:35,856 A:middle
If I click on that annotation,

738
00:33:36,396 --> 00:33:37,996 A:middle
I'll get the performance
result to pop over.

739
00:33:38,086 --> 00:33:39,316 A:middle
And I can get this
from the Source Editor

740
00:33:39,316 --> 00:33:40,506 A:middle
or from the new Test Report.

741
00:33:41,406 --> 00:33:43,516 A:middle
From here I can see the
current average from the test

742
00:33:43,926 --> 00:33:46,106 A:middle
and I can also see how the
individual measurements

743
00:33:46,316 --> 00:33:48,056 A:middle
that were taken differ
from that average.

744
00:33:48,456 --> 00:33:49,366 A:middle
So here I can see

745
00:33:50,176 --> 00:33:53,266 A:middle
that measurement number
8 was the longest one.

746
00:33:55,616 --> 00:33:58,096 A:middle
Now when I'm running too,
I can click Set Baseline

747
00:33:58,176 --> 00:34:01,636 A:middle
and Xcode will use, will
copy the current average

748

749
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

750
00:33:58,176 --> 00:34:01,636 A:middle
and Xcode will use, will
copy the current average

751
00:34:01,796 --> 00:34:02,456 A:middle
to the Baseline.

752
00:34:02,936 --> 00:34:13,755 A:middle
And if I need to set this
again, I can click Edit

753
00:34:14,505 --> 00:34:18,286 A:middle
and either accept the new
current average or type

754
00:34:18,286 --> 00:34:20,266 A:middle
in whatever I want
as the Baseline

755
00:34:20,266 --> 00:34:24,866 A:middle
and I can also edit the maximum
Standard Deviation from here.

756
00:34:25,376 --> 00:34:28,706 A:middle
In order to set the Baseline,
the next time I run my test,

757
00:34:29,235 --> 00:34:31,866 A:middle
I'll see a different annotation
with this gray diamond

758
00:34:31,866 --> 00:34:33,186 A:middle
with the checkmark in it.

759
00:34:33,186 --> 00:34:36,466 A:middle
And it's telling me that
this test is doing 4% worse

760
00:34:36,656 --> 00:34:38,096 A:middle
than the Baseline that
it's compared against.

761
00:34:38,676 --> 00:34:44,985 A:middle
If the test were to do a lot
worse, the test would fail

762
00:34:45,096 --> 00:34:48,376 A:middle
and I'd get an annotation like
this telling me that, you know,

763
00:34:48,596 --> 00:34:50,346 A:middle
it's 68% worse in this case.

764
00:34:50,866 --> 00:34:56,866 A:middle
And I can also see these results
from that new Test Report.

765
00:34:57,446 --> 00:34:59,546 A:middle
Also from the Test Report,
I can get the performances

766
00:34:59,966 --> 00:35:02,756 A:middle
that will pop over by
clicking under the time call

767

768
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

769
00:34:59,966 --> 00:35:02,756 A:middle
that will pop over by
clicking under the time call

770
00:35:02,866 --> 00:35:03,646 A:middle
on those measurements.

771
00:35:06,356 --> 00:35:10,316 A:middle
If you want to get the
raw values that Xcode gets

772
00:35:10,316 --> 00:35:11,576 A:middle
from XCTest, those are available

773
00:35:11,576 --> 00:35:13,136 A:middle
on the logs tab of
the Test Report.

774
00:35:14,606 --> 00:35:19,826 A:middle
So let's talk about how XCTest
uses the Baseline Average.

775
00:35:20,836 --> 00:35:24,166 A:middle
Here I have a dataset
from one run of a test.

776
00:35:24,796 --> 00:35:27,426 A:middle
There are 10 measurements for
the 10 indications of the block.

777
00:35:28,146 --> 00:35:31,016 A:middle
And they're all -- it comes
around that 1-second mark

778
00:35:31,936 --> 00:35:33,096 A:middle
with a 1-second average.

779
00:35:33,556 --> 00:35:38,806 A:middle
I'll set the Baseline for my
test which fixes that in place.

780
00:35:39,506 --> 00:35:42,856 A:middle
Now the next time I run my
test, if I were to get a dataset

781
00:35:42,856 --> 00:35:45,946 A:middle
like this, the average would
be 1 second at 1.5 seconds

782
00:35:46,916 --> 00:35:50,786 A:middle
and the test would fail because
that 1.5 seconds is well outside

783
00:35:50,786 --> 00:35:52,666 A:middle
the balance of the
allowed 10% regression.

784
00:35:54,116 --> 00:35:55,816 A:middle
So XCTest is going
to fail the test

785
00:35:56,386 --> 00:35:59,686 A:middle
if the new average has increased
from the Baseline by more

786
00:35:59,686 --> 00:36:02,106 A:middle
than 10% but it's going
to ignore regressions less

787

788
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

789
00:35:59,686 --> 00:36:02,106 A:middle
than 10% but it's going
to ignore regressions less

790
00:36:02,106 --> 00:36:03,126 A:middle
than a tenth of a second.

791
00:36:05,126 --> 00:36:06,776 A:middle
But is the average enough?

792
00:36:06,776 --> 00:36:10,376 A:middle
Let's look at that
same dataset again.

793
00:36:11,406 --> 00:36:14,196 A:middle
All the values come through on 1
second with a 1-second average.

794
00:36:16,276 --> 00:36:19,246 A:middle
If I were to run this test again
and get a dataset like this,

795
00:36:20,486 --> 00:36:21,506 A:middle
it hasn't really regressed.

796
00:36:21,506 --> 00:36:23,786 A:middle
The average is still 1 second
but there's some values

797
00:36:23,876 --> 00:36:26,376 A:middle
over 1.5 seconds and
some under 0.5 second.

798
00:36:27,676 --> 00:36:30,946 A:middle
So it isn't a true regression
in terms of the average

799
00:36:30,986 --> 00:36:32,276 A:middle
but something's gotten worse.

800
00:36:32,276 --> 00:36:35,116 A:middle
There is something that if I
were to get a dataset like this,

801
00:36:35,166 --> 00:36:36,196 A:middle
I want it investigated.

802
00:36:36,926 --> 00:36:40,996 A:middle
So the average just doesn't
tell the whole story.

803
00:36:41,146 --> 00:36:43,196 A:middle
And XCTest is going to
use the Standard Deviation

804
00:36:43,636 --> 00:36:45,636 A:middle
to indicate the spread
of the measurements.

805
00:36:46,216 --> 00:36:51,116 A:middle
If we look at that first
dataset one more time,

806
00:36:51,766 --> 00:36:53,356 A:middle
we see that the Standard
Deviation is set

807
00:36:53,356 --> 00:36:55,576 A:middle
for these numbers tightly
[inaudible] around 1 second

808
00:36:55,576 --> 00:36:58,476 A:middle
at 6% while the Standard
Deviation

809
00:36:59,026 --> 00:37:02,266 A:middle
for the much more
spread-out dataset is 40%.

810

811
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

812
00:36:59,026 --> 00:37:02,266 A:middle
for the much more
spread-out dataset is 40%.

813
00:37:02,886 --> 00:37:06,896 A:middle
And the way XCTest is
going to use this is

814
00:37:07,146 --> 00:37:13,446 A:middle
if the Standard Deviation for
the new dataset is more than 10%

815
00:37:13,446 --> 00:37:15,636 A:middle
of the current average,
which you can adjust

816
00:37:15,746 --> 00:37:18,666 A:middle
from that popover, it will fail.

817
00:37:19,156 --> 00:37:20,786 A:middle
But again, just like
the average,

818
00:37:21,556 --> 00:37:23,786 A:middle
it will ignore Standard
Deviation of less than a tenth

819
00:37:23,786 --> 00:37:28,806 A:middle
of a second, again, to
avoid false positives.

820
00:37:29,166 --> 00:37:31,946 A:middle
So what causes excessive
Standard Deviation?

821
00:37:33,466 --> 00:37:37,126 A:middle
Well, one thing is if the
body you're measuring is doing

822
00:37:37,126 --> 00:37:41,556 A:middle
network I/O or file I/O, that
tends to vary pretty wildly.

823
00:37:42,256 --> 00:37:48,796 A:middle
Another thing that can cause
high Standard Deviation is

824
00:37:49,066 --> 00:37:51,976 A:middle
if the block just isn't trying
to do the same work each time.

825
00:37:51,976 --> 00:37:55,626 A:middle
So for example, if the block
that's being measured does some

826
00:37:55,626 --> 00:37:58,946 A:middle
-- sets up some expensive global
state the first time through

827
00:37:58,946 --> 00:38:02,586 A:middle
and then never again or the
block might just be affected

828

829
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

830
00:37:58,946 --> 00:38:02,586 A:middle
and then never again or the
block might just be affected

831
00:38:02,586 --> 00:38:03,866 A:middle
by an uninitialized variables.

832
00:38:04,856 --> 00:38:07,046 A:middle
And lastly, another thing

833
00:38:07,096 --> 00:38:10,686 A:middle
that can cause high
Standard Deviation is

834
00:38:10,686 --> 00:38:12,666 A:middle
if the system is just
busy with other processes

835
00:38:12,846 --> 00:38:17,596 A:middle
and short-running tests are
especially sensitive to this.

836
00:38:17,826 --> 00:38:21,166 A:middle
So how does XCTest
detect issues?

837
00:38:22,036 --> 00:38:24,646 A:middle
First of all, if there's no
Baseline Average, it's done.

838
00:38:24,646 --> 00:38:27,416 A:middle
It's not going to try and do any
analysis of the measurements.

839
00:38:28,216 --> 00:38:31,096 A:middle
If there is a Baseline Average,
first it will check to see

840
00:38:31,096 --> 00:38:33,866 A:middle
if that Standard Deviation is
more than a tenth of a second

841
00:38:34,616 --> 00:38:37,076 A:middle
and more than 10% of
the current average.

842
00:38:37,216 --> 00:38:39,476 A:middle
If it is, it'll fail for that.

843
00:38:39,476 --> 00:38:43,736 A:middle
Otherwise, it'll check to see if
the average is increased by more

844
00:38:43,736 --> 00:38:47,826 A:middle
than a tenth of a second and
more than 10% of the Baseline.

845
00:38:48,826 --> 00:38:49,876 A:middle
And if it is, it'll
fail for that.

846
00:38:50,446 --> 00:38:52,346 A:middle
And otherwise, it'll pass.

847
00:38:54,376 --> 00:38:56,786 A:middle
So how can we minimize
Standard Deviation?

848
00:38:56,786 --> 00:39:00,156 A:middle
Well, one way is to only measure
the code that's important

849

850
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

851
00:38:56,786 --> 00:39:00,156 A:middle
Well, one way is to only measure
the code that's important

852
00:39:00,156 --> 00:39:00,286 A:middle
to you.

853
00:39:01,626 --> 00:39:04,596 A:middle
So let's look at how we can do
that with that previous example.

854
00:39:05,206 --> 00:39:08,926 A:middle
Here, this test is doing
the work of setting

855
00:39:08,926 --> 00:39:10,496 A:middle
up a FileHandle using it

856
00:39:10,496 --> 00:39:13,396 A:middle
and then closing the FileHandle
each time we run the block.

857
00:39:13,996 --> 00:39:16,376 A:middle
But if I only want
to measure the time

858
00:39:16,376 --> 00:39:21,476 A:middle
of using the FileHandle, what I
might do is just move the set up

859
00:39:21,476 --> 00:39:23,346 A:middle
and tear down work
outside of the block.

860
00:39:24,286 --> 00:39:25,256 A:middle
But what if I can't do that?

861
00:39:25,936 --> 00:39:27,456 A:middle
Sometimes, the work
that you want

862
00:39:27,456 --> 00:39:29,876 A:middle
to measure requires some
set of work that needs

863
00:39:29,876 --> 00:39:31,646 A:middle
to be done each time
before the measurement.

864
00:39:31,736 --> 00:39:34,206 A:middle
And for that, we have
some additional APIs;

865
00:39:35,066 --> 00:39:37,886 A:middle
measureMetrics automatically
start measuring with a block.

866
00:39:38,376 --> 00:39:39,716 A:middle
You can use this to
measure just part

867
00:39:39,716 --> 00:39:41,436 A:middle
of the block that's
being called.

868
00:39:44,256 --> 00:39:47,836 A:middle
This API expects an array
of metrics to measure

869
00:39:48,706 --> 00:39:50,686 A:middle
and currently only
time is supported.

870
00:39:51,376 --> 00:39:54,866 A:middle
We'll also need two more APIs,

871
00:39:54,866 --> 00:39:56,396 A:middle
startMeasuring and
stopMeasuring.

872
00:39:56,676 --> 00:39:58,206 A:middle
You can use these to
isolate what the part

873
00:39:58,206 --> 00:39:58,976 A:middle
of the block you
want to measure.

874
00:39:59,226 --> 00:40:02,826 A:middle
You can call these once
per block invocation.

875

876
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

877
00:39:59,226 --> 00:40:02,826 A:middle
You can call these once
per block invocation.

878
00:40:04,256 --> 00:40:05,806 A:middle
And if you're going to
call startMeasuring,

879
00:40:05,806 --> 00:40:08,486 A:middle
you need to pass NO for
automatically startMeasuring.

880
00:40:09,126 --> 00:40:13,856 A:middle
So let's see how that would
work with our previous example.

881
00:40:15,736 --> 00:40:18,376 A:middle
First, we'd change the method

882
00:40:18,376 --> 00:40:22,456 A:middle
to call it measureMetrics
passing time as a metric and NO

883
00:40:22,456 --> 00:40:23,656 A:middle
for automatically
startMeasuring.

884
00:40:25,176 --> 00:40:27,926 A:middle
It calls startMeasuring right
before you use FileHandle

885
00:40:27,926 --> 00:40:29,486 A:middle
and stopMeasuring
immediately afterwards.

886
00:40:30,376 --> 00:40:33,066 A:middle
So now this block is
doing the work of setting

887
00:40:33,066 --> 00:40:35,726 A:middle
up the FileHandle and
turning it down each time

888
00:40:35,726 --> 00:40:38,816 A:middle
but it's only actually
measuring the duration spent

889
00:40:38,816 --> 00:40:39,716 A:middle
in UseFileHandle.

890
00:40:40,326 --> 00:40:43,906 A:middle
So let's look at
this in practice.

891
00:40:44,586 --> 00:40:46,626 A:middle
So despite the name of this
project, I'm actually thinking

892
00:40:46,626 --> 00:40:50,686 A:middle
about adding a JSON parser
to it and I've got a test

893
00:40:50,686 --> 00:40:55,886 A:middle
that I'm running here that's
loading this file from the web

894
00:40:57,296 --> 00:40:59,846 A:middle
and parsing it with
NSJSONSerialization.

895

896
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

897
00:41:00,866 --> 00:41:02,366 A:middle
I think I'll actually
like to turn this

898
00:41:02,366 --> 00:41:05,666 A:middle
into a performance test
just for my own sake.

899
00:41:06,236 --> 00:41:11,016 A:middle
And I'll do that now
by calling measureBlock

900
00:41:11,846 --> 00:41:15,726 A:middle
and then pasting in the code.

901
00:41:15,936 --> 00:41:18,026 A:middle
And I'll click to run my test.

902
00:41:22,336 --> 00:41:27,186 A:middle
So here we can see that it took,
it says on average 1.91 seconds

903
00:41:27,416 --> 00:41:29,576 A:middle
with 114% Standard Deviation

904
00:41:29,576 --> 00:41:34,716 A:middle
and it's telling me there's no
Baseline Average for this test.

905
00:41:35,246 --> 00:41:37,056 A:middle
Well, that's not bad but I know

906
00:41:37,056 --> 00:41:38,586 A:middle
that since it's doing
this expensive work

907
00:41:38,586 --> 00:41:41,256 A:middle
of loading this file
from the web each time,

908
00:41:41,256 --> 00:41:42,436 A:middle
I actually don't
want to measure that.

909
00:41:42,436 --> 00:41:44,756 A:middle
I just want to measure the time
spent in NSJSONSerialization.

910
00:41:45,446 --> 00:41:47,236 A:middle
So what I'll do is
I'll delete this

911
00:41:47,326 --> 00:41:50,426 A:middle
and call measure
time measureMetrics

912
00:41:50,996 --> 00:41:54,816 A:middle
which is passing time
as my metric and NO

913
00:41:54,816 --> 00:41:55,896 A:middle
for automaticallyStartMeasuring.

914
00:41:57,366 --> 00:42:02,296 A:middle
Then all I need to do is call
startMeasuring right before

915

916
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

917
00:41:57,366 --> 00:42:02,296 A:middle
Then all I need to do is call
startMeasuring right before

918
00:42:02,396 --> 00:42:09,716 A:middle
NSJSONSerialization
and I can run my test.

919
00:42:09,896 --> 00:42:13,376 A:middle
Great! So previously, it
was taking 1.91 seconds

920
00:42:13,686 --> 00:42:15,486 A:middle
and now it appears to be
taking no time at all.

921
00:42:15,486 --> 00:42:19,356 A:middle
So that's pretty
good [laughter].

922
00:42:19,666 --> 00:42:26,256 A:middle
I wish all my APIs
were that quick.

923
00:42:28,076 --> 00:42:31,356 A:middle
But I actually want this to
measure something, you know,

924
00:42:31,636 --> 00:42:35,036 A:middle
something that Xcode will
report, something significant

925
00:42:35,036 --> 00:42:36,526 A:middle
so what I'm going
to do is I'm going

926
00:42:36,526 --> 00:42:38,516 A:middle
to change this to
use a larger file.

927
00:42:39,196 --> 00:42:40,906 A:middle
So we actually get
some values here.

928
00:42:48,046 --> 00:42:49,276 A:middle
And it's not going to
take a little bit longer

929
00:42:49,276 --> 00:42:52,146 A:middle
because what it's actually
doing is it's going to --

930
00:42:52,146 --> 00:42:56,536 A:middle
you're calling this block
10 times, loading the file

931
00:42:56,536 --> 00:42:59,986 A:middle
from the web each time
and then parsing it.

932

933
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

934
00:43:01,956 --> 00:43:05,336 A:middle
So now the test is taking,
it looks like 1.21 seconds

935
00:43:05,336 --> 00:43:09,996 A:middle
and it's got a very low Standard
Deviation which is pretty good.

936
00:43:10,506 --> 00:43:14,016 A:middle
So I'm going to click to
set this as my new Baseline

937
00:43:14,726 --> 00:43:18,336 A:middle
and since that seemed to take
a little while, I'm just going

938
00:43:18,766 --> 00:43:20,236 A:middle
to move this out of the block.

939
00:43:20,626 --> 00:43:23,896 A:middle
Since the data that it's
loading is actually immutable,

940
00:43:23,896 --> 00:43:24,866 A:middle
I don't need to do
this every time.

941
00:43:24,866 --> 00:43:26,916 A:middle
So I'm just going
to do that once

942
00:43:27,376 --> 00:43:28,636 A:middle
when the test initially starts.

943
00:43:29,386 --> 00:43:30,596 A:middle
I'll click through
on my test again.

944
00:43:35,196 --> 00:43:38,206 A:middle
And still got a result
around the same ballpark

945
00:43:38,206 --> 00:43:40,096 A:middle
and still got a pretty
reasonable Standard Deviation.

946
00:43:40,656 --> 00:43:42,766 A:middle
Well, now that I'm not
actually doing any work before

947
00:43:42,766 --> 00:43:44,046 A:middle
startMeasuring, I
don't need all this.

948
00:43:44,706 --> 00:43:47,206 A:middle
So I'm just going to delete that

949
00:43:47,406 --> 00:43:49,866 A:middle
and change this back
to call measureBlock.

950
00:43:50,476 --> 00:43:55,676 A:middle
I'll run it again.

951
00:43:55,676 --> 00:43:58,796 A:middle
And I should get similar results
and yeah, it looks like I do.

952
00:43:59,586 --> 00:44:02,276 A:middle
So the last thing I'd
like to do with this is

953

954
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

955
00:43:59,586 --> 00:44:02,276 A:middle
So the last thing I'd
like to do with this is

956
00:44:02,276 --> 00:44:03,226 A:middle
like Will showed us earlier.

957
00:44:03,226 --> 00:44:05,896 A:middle
We kind of want our test
to be self-contained.

958
00:44:05,896 --> 00:44:09,906 A:middle
We don't want it to be
loading files from the network.

959
00:44:09,906 --> 00:44:11,226 A:middle
So I'm just going to change this

960
00:44:11,226 --> 00:44:14,016 A:middle
since I've actually
already got a copy

961
00:44:14,136 --> 00:44:15,326 A:middle
of this file in my project.

962
00:44:15,326 --> 00:44:17,876 A:middle
I'm going to use
NSBundle bundleForClass

963
00:44:17,986 --> 00:44:21,846 A:middle
to load this all-month
file from my test project.

964
00:44:23,066 --> 00:44:23,806 A:middle
I'll run it again.

965
00:44:27,996 --> 00:44:28,826 A:middle
And here we go.

966
00:44:29,116 --> 00:44:31,656 A:middle
So now I've got a new
performance test that's

967
00:44:31,656 --> 00:44:34,316 A:middle
measuring the time that
it takes to run this

968
00:44:34,386 --> 00:44:37,936 A:middle
and if something were
to change, I find out.

969
00:44:39,036 --> 00:44:44,416 A:middle
The last thing I want to do is
I want to connect my changes.

970
00:44:44,416 --> 00:44:46,886 A:middle
So here we can see the
changes that I've made so far.

971
00:44:46,886 --> 00:44:48,756 A:middle
I got rid of that really
expensive function.

972
00:44:49,166 --> 00:44:52,806 A:middle
I changed my test to
be a performance test

973
00:44:53,366 --> 00:44:56,256 A:middle
and we can also see the
Baseline that I've added here.

974
00:44:57,036 --> 00:44:58,196 A:middle
So I don't think you
can tell from this,

975
00:44:58,256 --> 00:45:00,446 A:middle
but this is actually a file
that's stored inside the project

976

977
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

978
00:44:58,256 --> 00:45:00,446 A:middle
but this is actually a file
that's stored inside the project

979
00:45:00,446 --> 00:45:00,976 A:middle
bundle itself.

980
00:45:08,296 --> 00:45:09,346 A:middle
So I'll connect that.

981
00:45:09,806 --> 00:45:13,936 A:middle
And now it's saved there
for the next time I need it,

982
00:45:14,966 --> 00:45:15,936 A:middle
the next time I need it, okay.

983
00:45:16,516 --> 00:45:23,206 A:middle
[ Applause ]

984
00:45:23,706 --> 00:45:24,586 A:middle
So what you've just seen is

985
00:45:24,586 --> 00:45:26,896 A:middle
that you can use the
new measureBlock APIs

986
00:45:26,946 --> 00:45:28,996 A:middle
to measure performance
in detect regressions.

987
00:45:29,726 --> 00:45:32,526 A:middle
You can tell Xcode
what the Baseline is

988
00:45:32,526 --> 00:45:36,466 A:middle
to specify what constitutes
a regression for your test.

989
00:45:36,846 --> 00:45:41,806 A:middle
And it will -- XCTest will use a
Standard Deviation to inform you

990
00:45:41,806 --> 00:45:43,056 A:middle
of the spread of
the measurements.

991
00:45:43,826 --> 00:45:46,746 A:middle
And finally, when
something does go wrong,

992
00:45:46,836 --> 00:45:48,766 A:middle
you can always use Instruments
to profile your test.

993
00:45:49,526 --> 00:45:50,856 A:middle
Now I'd like to invite
Will back up.

994
00:45:51,516 --> 00:45:54,896 A:middle
[ Applause ]

995
00:45:55,396 --> 00:45:56,076 A:middle
>> Okay great.

996
00:45:56,076 --> 00:45:59,486 A:middle
So just to kind of go back
through everything we've talked

997
00:45:59,486 --> 00:46:02,776 A:middle
about today, we started off
with thinking about, you know,

998

999
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1000
00:45:59,486 --> 00:46:02,776 A:middle
about today, we started off
with thinking about, you know,

1001
00:46:02,906 --> 00:46:04,336 A:middle
why should we test
in the first place?

1002
00:46:04,406 --> 00:46:05,346 A:middle
What are the benefits?

1003
00:46:05,876 --> 00:46:08,546 A:middle
You know, it helps us
identify bugs before we ship.

1004
00:46:08,546 --> 00:46:13,096 A:middle
It also helps us to describe and
really think about the impact

1005
00:46:13,096 --> 00:46:15,226 A:middle
of the APIs we're
presenting in our project.

1006
00:46:16,376 --> 00:46:19,626 A:middle
And then we talked about how
do you add tests and also how

1007
00:46:19,626 --> 00:46:23,526 A:middle
to organize test into targets in
your project, the test methods,

1008
00:46:23,976 --> 00:46:26,496 A:middle
loading resources
from the test bundle

1009
00:46:26,866 --> 00:46:29,586 A:middle
and using the assertions
inside your test.

1010
00:46:29,926 --> 00:46:33,066 A:middle
And then we talked about the
new asynchronous testing API

1011
00:46:33,496 --> 00:46:37,296 A:middle
which allows you to get a
synchronous control flow

1012
00:46:37,526 --> 00:46:39,696 A:middle
around asynchronous tasks.

1013
00:46:40,536 --> 00:46:43,686 A:middle
And then Brooke took you
through performance testing

1014
00:46:43,946 --> 00:46:46,846 A:middle
and also the instruments
integration

1015
00:46:47,206 --> 00:46:49,146 A:middle
that lets you profile your test.

1016
00:46:49,146 --> 00:46:50,856 A:middle
And that's a really
powerful feature

1017
00:46:51,386 --> 00:46:54,786 A:middle
because your test code is going
to be executing critical paths

1018
00:46:54,786 --> 00:46:58,006 A:middle
in your project and then
to easily be able to hop

1019
00:46:58,006 --> 00:47:01,496 A:middle
in Instruments and
analyze time profiles

1020

1021
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1022
00:46:58,006 --> 00:47:01,496 A:middle
in Instruments and
analyze time profiles

1023
00:47:01,496 --> 00:47:03,946 A:middle
or object alloc profiles.

1024
00:47:03,946 --> 00:47:07,246 A:middle
It's a really great
tool for you to have.

1025
00:47:07,246 --> 00:47:11,596 A:middle
And if you have questions,
we encourage you

1026
00:47:11,596 --> 00:47:14,286 A:middle
to contact Dave DeLong,
our Tools Evangelist

1027
00:47:14,856 --> 00:47:17,546 A:middle
and there's a few
related sessions.

1028
00:47:17,546 --> 00:47:18,646 A:middle
You know, early on, I talked

1029
00:47:18,646 --> 00:47:20,896 A:middle
about this continuous
integration workflow

1030
00:47:21,416 --> 00:47:25,116 A:middle
and XCTest combined with the
Xcode server makes that possible

1031
00:47:25,116 --> 00:47:28,476 A:middle
where you can set up a
server that will on commit

1032
00:47:28,476 --> 00:47:31,946 A:middle
or schedules, check out your
code, and run all of your tests

1033
00:47:31,946 --> 00:47:33,086 A:middle
and report the results.

1034
00:47:33,706 --> 00:47:36,706 A:middle
So there's a session on that
later this afternoon right here

1035
00:47:36,706 --> 00:47:37,206 A:middle
in this room.

1036
00:47:37,206 --> 00:47:38,186 A:middle
And that's it.

1037
00:47:38,186 --> 00:47:38,976 A:middle
Thanks a lot, folks.

1038
00:47:39,516 --> 00:47:47,130 A:middle
[ Applause ]

1039
