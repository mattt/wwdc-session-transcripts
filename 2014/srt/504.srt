X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:10,616 A:middle
[ Pause ]

2
00:00:11,116 --> 00:00:13,376 A:middle
>> Hello, and welcome to
Advanced Media for the Web.

3
00:00:13,796 --> 00:00:15,676 A:middle
My name is Jer Noble
and I'm an engineer

4
00:00:15,676 --> 00:00:17,576 A:middle
on the Safari Layout
and Rendering Team.

5
00:00:17,656 --> 00:00:20,326 A:middle
And today we're going to talk
about what's new with audio

6
00:00:20,326 --> 00:00:23,836 A:middle
and video in Safari and
how media integrates

7
00:00:23,836 --> 00:00:25,196 A:middle
with today's modern web.

8
00:00:25,286 --> 00:00:29,286 A:middle
So this is the <video>
element, it's the heart

9
00:00:29,286 --> 00:00:31,006 A:middle
and soul of web-based media.

10
00:00:31,386 --> 00:00:35,356 A:middle
On one hand it's a container for
some truly advanced technology,

11
00:00:35,466 --> 00:00:38,676 A:middle
but <video> elements are also
just another brick in the DOM.

12
00:00:38,746 --> 00:00:42,866 A:middle
They can participate in
layout and rendering.

13
00:00:43,196 --> 00:00:47,766 A:middle
They can be styled with CSS.

14
00:00:47,766 --> 00:00:49,966 A:middle
With the <video> element,
media can now be integrated

15
00:00:49,966 --> 00:00:51,476 A:middle
into the same responsive,

16
00:00:51,476 --> 00:00:53,996 A:middle
dynamic designs being
written for the modern web.

17
00:00:55,376 --> 00:00:57,356 A:middle
Video now helps tell
stories rather

18
00:00:57,356 --> 00:00:58,566 A:middle
than being the story itself.

19
00:00:59,176 --> 00:01:01,886 A:middle
A modern example, such as New
York Times' snowfall article,

20

21
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

22
00:00:59,176 --> 00:01:01,886 A:middle
A modern example, such as New
York Times' snowfall article,

23
00:01:01,886 --> 00:01:04,206 A:middle
show how you can weave video

24
00:01:04,206 --> 00:01:06,616 A:middle
into a rich storytelling
experience.

25
00:01:07,496 --> 00:01:10,236 A:middle
And video can add emotion
and energy to a page,

26
00:01:10,236 --> 00:01:13,116 A:middle
even to something already as
exciting as the new Mac Pro.

27
00:01:13,486 --> 00:01:15,646 A:middle
And it can still
take center stage.

28
00:01:16,366 --> 00:01:18,006 A:middle
But things weren't
always this easy.

29
00:01:18,436 --> 00:01:19,616 A:middle
Let's take a look back

30
00:01:19,616 --> 00:01:21,856 A:middle
at how the <video>
element became a part

31
00:01:21,856 --> 00:01:24,076 A:middle
of this exciting modern web.

32
00:01:24,326 --> 00:01:28,796 A:middle
So in 1999 this was how you
added video to your website.

33
00:01:29,576 --> 00:01:30,556 A:middle
The QuickTime plug-in,

34
00:01:30,996 --> 00:01:33,096 A:middle
and at the time the
QuickTime plug-in was amazing.

35
00:01:33,856 --> 00:01:35,696 A:middle
It could decode high
bit rate video

36
00:01:35,696 --> 00:01:38,186 A:middle
and it exposed a rich
API to JavaScript.

37
00:01:38,186 --> 00:01:40,526 A:middle
For a while, plug-ins
were the only way

38
00:01:40,866 --> 00:01:42,776 A:middle
to add video to your website.

39
00:01:42,776 --> 00:01:45,176 A:middle
Now fast forward seven years

40
00:01:45,176 --> 00:01:48,656 A:middle
and in 2006 this was how you
added video to your website:

41
00:01:48,916 --> 00:01:50,776 A:middle
the QuickTime plug-in, again.

42
00:01:50,776 --> 00:01:55,676 A:middle
By now the QuickTime plug-in
supported the H.264 codec

43
00:01:55,926 --> 00:01:58,166 A:middle
and it delivered even
higher quality video,

44
00:01:58,476 --> 00:02:01,046 A:middle
but it was still a
plug-in, one which users had

45

46
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

47
00:01:58,476 --> 00:02:01,046 A:middle
but it was still a
plug-in, one which users had

48
00:02:01,046 --> 00:02:03,296 A:middle
to find, download and install.

49
00:02:03,506 --> 00:02:07,386 A:middle
Well, not you Mac users, of
course, but it wasn't something

50
00:02:07,386 --> 00:02:10,306 A:middle
which website authors could
depend upon being available

51
00:02:10,416 --> 00:02:12,066 A:middle
across all their
entire audience.

52
00:02:12,196 --> 00:02:15,486 A:middle
In 2007, though,
this all changed

53
00:02:15,686 --> 00:02:17,416 A:middle
when the <video>
tag was introduced.

54
00:02:17,816 --> 00:02:19,456 A:middle
This was an amazing
breakthrough.

55
00:02:19,656 --> 00:02:21,276 A:middle
No longer did web
developers have

56
00:02:21,276 --> 00:02:23,206 A:middle
to depend upon a
proprietary plug-in

57
00:02:23,206 --> 00:02:24,656 A:middle
to deliver video in their pages.

58
00:02:24,926 --> 00:02:27,916 A:middle
Video is now integrated
directly into the web layer,

59
00:02:28,596 --> 00:02:32,606 A:middle
and as an HTML5 specification
the <video> element provided a

60
00:02:32,606 --> 00:02:35,146 A:middle
constant or a consistent
experience in API

61
00:02:35,146 --> 00:02:37,196 A:middle
across all browsers
and platforms.

62
00:02:37,996 --> 00:02:41,356 A:middle
Browsers could build on,
improve and add video features

63
00:02:41,356 --> 00:02:43,006 A:middle
without waiting for
plug-in developers,

64
00:02:43,116 --> 00:02:45,516 A:middle
and this triggered a
virtuous cycle of innovation.

65
00:02:45,516 --> 00:02:53,516 A:middle
In 2009 the <video> tag came to
mobile browsers in iPhone OS 3,

66
00:02:53,716 --> 00:02:56,056 A:middle
when support for the <video>
element was added to Safari.

67
00:02:57,256 --> 00:02:59,996 A:middle
Previously, the primary way
users of Safari would interact

68
00:02:59,996 --> 00:03:02,546 A:middle
with a video was by clicking
on a YouTube.com link,

69

70
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

71
00:02:59,996 --> 00:03:02,546 A:middle
with a video was by clicking
on a YouTube.com link,

72
00:03:02,546 --> 00:03:04,156 A:middle
which would open
up the YouTube app,

73
00:03:04,656 --> 00:03:07,036 A:middle
but now video was a
first class member

74
00:03:07,036 --> 00:03:08,406 A:middle
of mobile browsers as well.

75
00:03:08,786 --> 00:03:13,786 A:middle
And today's iOS devices
are almost as powerful,

76
00:03:13,786 --> 00:03:18,616 A:middle
if not more powerful than
desktop computers sold in 2009.

77
00:03:18,616 --> 00:03:22,136 A:middle
We've talked a lot about the
<video> element at past WWDCs.

78
00:03:22,506 --> 00:03:24,826 A:middle
All the videos are at
developer.apple.com

79
00:03:24,826 --> 00:03:27,096 A:middle
or on the WWDC app you
have on your phone.

80
00:03:27,196 --> 00:03:30,966 A:middle
In 2010 we covered the basics

81
00:03:31,266 --> 00:03:33,566 A:middle
of adding a <video>
element to your web page.

82
00:03:33,786 --> 00:03:37,126 A:middle
In 2011 we talked about how
to take that <video> element

83
00:03:37,396 --> 00:03:38,846 A:middle
and add CSS and JavaScript

84
00:03:38,846 --> 00:03:41,116 A:middle
to make your own custom
media controllers.

85
00:03:41,396 --> 00:03:43,516 A:middle
And in 2012 we showed you how

86
00:03:43,516 --> 00:03:45,666 A:middle
to play back multiple
media elements synchronized

87
00:03:45,666 --> 00:03:49,846 A:middle
with one another, how to do
advanced low latency effects

88
00:03:49,846 --> 00:03:51,756 A:middle
with the web audio API and how

89
00:03:51,756 --> 00:03:54,606 A:middle
to take your JavaScript-based
controls into full screen

90
00:03:54,606 --> 00:03:56,306 A:middle
with the full screen API.

91
00:03:57,766 --> 00:04:00,676 A:middle
So what will you
learn at WWDC 2014?

92

93
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

94
00:03:57,766 --> 00:04:00,676 A:middle
So what will you
learn at WWDC 2014?

95
00:04:01,956 --> 00:04:04,876 A:middle
You'll learn how we've narrowed
the differences between Safari

96
00:04:04,976 --> 00:04:07,196 A:middle
on iOS and Safari
on OS X and what

97
00:04:07,196 --> 00:04:08,536 A:middle
that means for your web pages.

98
00:04:09,626 --> 00:04:12,196 A:middle
You'll learn the best way
to stream adaptive media

99
00:04:12,466 --> 00:04:16,606 A:middle
on your websites,
how to use less power

100
00:04:16,606 --> 00:04:19,336 A:middle
when playing back video and how

101
00:04:19,476 --> 00:04:21,986 A:middle
to coordinate your media's
timeline with elements

102
00:04:21,986 --> 00:04:23,926 A:middle
in your page with a
timed metadata API.

103
00:04:25,326 --> 00:04:26,546 A:middle
But before we get started,

104
00:04:27,256 --> 00:04:28,686 A:middle
let's talk a little
bit about plug-ins.

105
00:04:29,226 --> 00:04:33,616 A:middle
Now how good is the
<video> element on iOS?

106
00:04:33,616 --> 00:04:37,276 A:middle
It is so good that whenever
I encounter a page on Safari

107
00:04:37,276 --> 00:04:40,626 A:middle
on OS X that insists that I
need to use the Flash plug-in

108
00:04:40,626 --> 00:04:43,046 A:middle
to view its content,
the first thing I try is

109
00:04:43,046 --> 00:04:44,616 A:middle
to turn the user agent to iPad.

110
00:04:45,666 --> 00:04:46,866 A:middle
Most of the time it works.

111
00:04:47,726 --> 00:04:48,616 A:middle
What's that all about?

112
00:04:49,146 --> 00:04:53,046 A:middle
Well, I know that no one here
would deliberately write a page

113
00:04:53,046 --> 00:04:57,586 A:middle
that insisted on using a plug-in
when HTML5 video was available.

114
00:04:57,586 --> 00:04:59,746 A:middle
I'm just going to assume
you've updated your iPad sites

115
00:04:59,746 --> 00:05:02,836 A:middle
recently, but please update
your desktop site as well.

116

117
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

118
00:04:59,746 --> 00:05:02,836 A:middle
recently, but please update
your desktop site as well.

119
00:05:03,346 --> 00:05:05,096 A:middle
Plug-ins have a time
and a place,

120
00:05:05,566 --> 00:05:08,146 A:middle
but as web standards
evolve and browsers improve,

121
00:05:08,146 --> 00:05:11,366 A:middle
those times are getting fewer
and the places further between,

122
00:05:11,366 --> 00:05:14,596 A:middle
and that's a good thing.

123
00:05:14,716 --> 00:05:16,026 A:middle
So speaking of browsers
improving,

124
00:05:16,026 --> 00:05:17,806 A:middle
let's talk about how we've
narrowed the differences

125
00:05:17,806 --> 00:05:22,966 A:middle
between Safari on iOS and OS X.

126
00:05:23,116 --> 00:05:24,436 A:middle
We've removed some
of the distinctions

127
00:05:24,436 --> 00:05:27,006 A:middle
between the platforms by
giving you more control

128
00:05:27,006 --> 00:05:29,996 A:middle
over media loading with the
preload attribute on iOS

129
00:05:31,206 --> 00:05:32,886 A:middle
and by allowing the
<video> element

130
00:05:32,886 --> 00:05:35,076 A:middle
to fully participate
in CSS layering.

131
00:05:37,676 --> 00:05:39,596 A:middle
But first the preload attribute.

132
00:05:40,216 --> 00:05:43,326 A:middle
The <video> element's preload
attribute lets page authors

133
00:05:43,466 --> 00:05:46,316 A:middle
control when and how their
media's data is loaded.

134
00:05:46,726 --> 00:05:50,196 A:middle
A preload value of "none"
instructs the browser

135
00:05:50,196 --> 00:05:51,906 A:middle
to preload no metadata.

136
00:05:52,766 --> 00:05:55,536 A:middle
A value of "metadata"
asks the browser

137
00:05:55,536 --> 00:05:57,786 A:middle
to only download
enough media data

138
00:05:57,786 --> 00:06:02,336 A:middle
to determine the media's width,
height, duration et cetera.

139

140
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

141
00:05:57,786 --> 00:06:02,336 A:middle
to determine the media's width,
height, duration et cetera.

142
00:06:03,336 --> 00:06:06,886 A:middle
And a value of "auto" means
begin loading media data

143
00:06:06,886 --> 00:06:08,436 A:middle
sufficient to begin playback.

144
00:06:08,656 --> 00:06:13,216 A:middle
Now in the early days of
iOS, there was a lot of media

145
00:06:13,216 --> 00:06:15,746 A:middle
on the internet which couldn't
be played by iOS devices.

146
00:06:16,146 --> 00:06:19,666 A:middle
So in order to be able to
tell users whether the media

147
00:06:19,666 --> 00:06:21,276 A:middle
in the page was playable or not,

148
00:06:21,596 --> 00:06:24,856 A:middle
Safari would download enough
media data to check playability.

149
00:06:25,686 --> 00:06:27,726 A:middle
But in order to keep
users' data costs down,

150
00:06:28,056 --> 00:06:30,686 A:middle
it would ignore the
preload attribute and behave

151
00:06:30,686 --> 00:06:32,176 A:middle
as if it was set
to preload="none".

152
00:06:33,066 --> 00:06:36,726 A:middle
In 2014, unplayable web media
is much less of a problem,

153
00:06:37,176 --> 00:06:40,986 A:middle
so new in iOS 8, Safari will
honor two preload values:

154
00:06:41,766 --> 00:06:45,596 A:middle
"metadata", which is the
new default, and "none".

155
00:06:45,746 --> 00:06:47,386 A:middle
Why is this the right
thing to do?

156
00:06:47,986 --> 00:06:51,986 A:middle
Most sites will see no change in
behavior, either in the browser

157
00:06:51,986 --> 00:06:58,016 A:middle
or on their server, but even
loading just metadata can load

158
00:06:58,016 --> 00:07:00,196 A:middle
up for sites with a lot
of <video> elements.

159

160
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

161
00:06:58,016 --> 00:07:00,196 A:middle
up for sites with a lot
of <video> elements.

162
00:07:00,316 --> 00:07:03,596 A:middle
So now the preload value
of "none" will be honored.

163
00:07:03,596 --> 00:07:08,926 A:middle
Now it's still true that on iOS
loading beyond metadata will

164
00:07:08,926 --> 00:07:11,796 A:middle
still require user interaction,
and we still believe

165
00:07:12,126 --> 00:07:15,836 A:middle
that this restriction is in
the user's best interest,

166
00:07:16,756 --> 00:07:19,366 A:middle
but it does get rid of one
frustrating distinction

167
00:07:19,366 --> 00:07:21,546 A:middle
between Safari on OS X and iOS.

168
00:07:23,846 --> 00:07:25,446 A:middle
So why is this important?

169
00:07:26,106 --> 00:07:29,366 A:middle
For <video> elements which
don't explicitly specify preload

170
00:07:29,366 --> 00:07:32,566 A:middle
of "none", they will begin
admitting new events,

171
00:07:32,606 --> 00:07:34,396 A:middle
specifically the
"loadedmetadata" event.

172
00:07:35,206 --> 00:07:38,206 A:middle
Now, during development, we
came across a certain site,

173
00:07:38,556 --> 00:07:40,336 A:middle
which had the following
on their mobile page.

174
00:07:41,636 --> 00:07:44,806 A:middle
They had a <video> element with
default controls enabled that,

175
00:07:44,806 --> 00:07:46,606 A:middle
when it receives
the loaded metadata,

176
00:07:46,606 --> 00:07:48,426 A:middle
the event would hide
those controls.

177
00:07:48,626 --> 00:07:53,546 A:middle
And it did so to enforce users
watching their pre-roll ads.

178
00:07:54,946 --> 00:07:58,756 A:middle
So in iOS 7, when the
<video> element was shown,

179
00:07:59,946 --> 00:08:00,906 A:middle
nothing would happen.

180

181
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

182
00:07:59,946 --> 00:08:00,906 A:middle
nothing would happen.

183
00:08:01,166 --> 00:08:03,686 A:middle
And when they hit "play",
loading would progress,

184
00:08:03,976 --> 00:08:05,546 A:middle
the loaded metadata
then would fire

185
00:08:05,546 --> 00:08:06,426 A:middle
and the controls would hide.

186
00:08:08,236 --> 00:08:11,286 A:middle
In iOS 8, as soon as the
video was added to the page,

187
00:08:11,496 --> 00:08:14,246 A:middle
loading would begin, the loaded
metadata event would fire,

188
00:08:14,246 --> 00:08:16,536 A:middle
and the controls would hide,
leaving the users no way

189
00:08:16,536 --> 00:08:18,056 A:middle
of actually playing the video.

190
00:08:18,506 --> 00:08:20,976 A:middle
Now how could they fix this?

191
00:08:21,536 --> 00:08:24,106 A:middle
What they shouldn't do is
revert to the old behavior

192
00:08:24,106 --> 00:08:26,536 A:middle
by adding preload="none",
that just leaves

193
00:08:26,536 --> 00:08:27,986 A:middle
in place the implicit assumption

194
00:08:27,986 --> 00:08:31,406 A:middle
that loadedmetadata means
the video has begun playing.

195
00:08:31,456 --> 00:08:34,076 A:middle
Instead they should
listen for the onplay event

196
00:08:34,696 --> 00:08:37,976 A:middle
and hide the controls when that
occurs, letting the users play.

197
00:08:41,606 --> 00:08:44,256 A:middle
So that's new in loading.

198
00:08:44,356 --> 00:08:47,546 A:middle
Let's talk about layering.

199
00:08:48,386 --> 00:08:51,306 A:middle
In previous versions of iOS, the
<video> element was implemented

200
00:08:51,306 --> 00:08:55,006 A:middle
as a UI view, which was
placed on top of web content.

201
00:08:56,986 --> 00:09:00,736 A:middle
New in iOS 8, we have integrated
in the <video> element directly

202

203
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

204
00:08:56,986 --> 00:09:00,736 A:middle
New in iOS 8, we have integrated
in the <video> element directly

205
00:09:00,736 --> 00:09:02,186 A:middle
as a native part of
the rendered tree,

206
00:09:02,286 --> 00:09:04,026 A:middle
just as it is on OS X Safari.

207
00:09:04,456 --> 00:09:07,836 A:middle
And, as a result, the <video>
element will now fully respect

208
00:09:07,836 --> 00:09:08,766 A:middle
CSS layering rules.

209
00:09:11,666 --> 00:09:13,236 A:middle
However, there is a caveat:

210
00:09:14,056 --> 00:09:17,016 A:middle
websites which did not
exclusively place their video

211
00:09:17,166 --> 00:09:20,086 A:middle
topmost with the CSS
z-index property may see some

212
00:09:20,086 --> 00:09:21,016 A:middle
weird behavior.

213
00:09:21,506 --> 00:09:23,796 A:middle
They could have their video
appear below other layers

214
00:09:23,826 --> 00:09:25,186 A:middle
that it didn't appear
below before.

215
00:09:25,796 --> 00:09:28,066 A:middle
Or other layers appearing
transparently on top

216
00:09:28,066 --> 00:09:30,876 A:middle
of the video layer could
intercept touch events,

217
00:09:31,096 --> 00:09:31,976 A:middle
leaving the users no way

218
00:09:31,976 --> 00:09:33,746 A:middle
of actually playing the
video in that case either.

219
00:09:34,026 --> 00:09:35,166 A:middle
So please be on the lookout

220
00:09:35,166 --> 00:09:37,946 A:middle
for these breaking
changes in your websites.

221
00:09:38,046 --> 00:09:39,386 A:middle
That was platform differences.

222
00:09:39,386 --> 00:09:40,986 A:middle
Now let's talk about
how the best way

223
00:09:40,986 --> 00:09:43,226 A:middle
to add adaptive streaming
to your websites.

224
00:09:43,336 --> 00:09:46,006 A:middle
So today's web devices
run the gamut

225
00:09:46,006 --> 00:09:48,276 A:middle
from small battery-powered
mobile devices,

226
00:09:48,686 --> 00:09:50,786 A:middle
to desktop computers,
to big screen TVs.

227
00:09:50,786 --> 00:09:54,696 A:middle
And that has led to a movement
called responsive web design,

228
00:09:55,266 --> 00:09:57,836 A:middle
whose goal is to provide an
optimal viewing experience

229
00:09:57,836 --> 00:10:02,396 A:middle
across a wide variety of devices
by tailoring a page to respond

230

231
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

232
00:09:57,836 --> 00:10:02,396 A:middle
across a wide variety of devices
by tailoring a page to respond

233
00:10:02,396 --> 00:10:04,256 A:middle
to different characteristics
of the device

234
00:10:04,256 --> 00:10:04,966 A:middle
on which it's running.

235
00:10:06,516 --> 00:10:11,026 A:middle
Now most responsive web design
concerns itself with the size

236
00:10:11,026 --> 00:10:12,956 A:middle
of the viewport in
which the page is shown.

237
00:10:12,956 --> 00:10:17,976 A:middle
But, for video, other properties
of the device are as important.

238
00:10:18,936 --> 00:10:23,346 A:middle
So, yes, what screen size
is available on your device,

239
00:10:23,566 --> 00:10:26,576 A:middle
but also what video resolution
can the device decode?

240
00:10:27,136 --> 00:10:29,826 A:middle
What codecs and profiles
does the device support?

241
00:10:30,416 --> 00:10:32,936 A:middle
And how much bandwidth
does the device's internet

242
00:10:32,936 --> 00:10:33,746 A:middle
connection provide?

243
00:10:35,776 --> 00:10:38,286 A:middle
At its most basic, a
<video> element points

244
00:10:38,286 --> 00:10:39,956 A:middle
to a single file
on a web server.

245
00:10:40,426 --> 00:10:43,606 A:middle
With only a single file,
a page author is left

246
00:10:43,606 --> 00:10:46,046 A:middle
with the unenviable task
of picking a single version

247
00:10:46,046 --> 00:10:48,046 A:middle
that will apply to
all of their viewers.

248
00:10:50,356 --> 00:10:52,076 A:middle
So perhaps a desktop device

249
00:10:52,076 --> 00:10:55,166 A:middle
with a fat internet connection
should get a high bit rate

250
00:10:55,166 --> 00:10:59,456 A:middle
stream, while a mobile
device on wireless

251
00:10:59,456 --> 00:11:03,576 A:middle
or on cellular might need a
small, lower bit rate version.

252

253
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

254
00:10:59,456 --> 00:11:03,576 A:middle
or on cellular might need a
small, lower bit rate version.

255
00:11:03,576 --> 00:11:06,206 A:middle
But that same device,
plugged in and on Wi-Fi,

256
00:11:06,206 --> 00:11:07,896 A:middle
should get the large
bit rate version, too.

257
00:11:08,866 --> 00:11:09,946 A:middle
None of this is easy

258
00:11:09,946 --> 00:11:11,576 A:middle
with a single file
sitting on your server.

259
00:11:12,686 --> 00:11:16,236 A:middle
Instead, this is a job for
HTTP Live Streaming, or HLS.

260
00:11:16,236 --> 00:11:20,346 A:middle
So HTTP Live Streaming
is a mechanism

261
00:11:20,346 --> 00:11:24,226 A:middle
for delivering multiple streams
in a single manifest file.

262
00:11:25,366 --> 00:11:28,126 A:middle
The master playlist,
or manifest,

263
00:11:28,256 --> 00:11:31,346 A:middle
describes the characteristics
of each substream and the URL

264
00:11:31,346 --> 00:11:33,026 A:middle
where that stream
can be accessed.

265
00:11:33,516 --> 00:11:36,316 A:middle
And the browser picks the
appropriate stream based

266
00:11:36,316 --> 00:11:38,236 A:middle
on the characteristics
of the current device.

267
00:11:39,246 --> 00:11:45,446 A:middle
Now Safari on OS X and iOS use
the AV Foundation Framework

268
00:11:45,536 --> 00:11:49,526 A:middle
to play HLS streams so you get
the same high quality streaming

269
00:11:49,526 --> 00:11:50,926 A:middle
experience as the native apps.

270
00:11:50,996 --> 00:11:54,276 A:middle
And AV Foundation will
seamlessly switch streams

271
00:11:54,596 --> 00:11:57,026 A:middle
when conditions of the
network or the device change.

272
00:11:58,546 --> 00:12:01,626 A:middle
To show you how easy it is
to create an HLS playlist

273

274
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

275
00:11:58,546 --> 00:12:01,626 A:middle
To show you how easy it is
to create an HLS playlist

276
00:12:01,626 --> 00:12:03,666 A:middle
with multiple streams of
different characteristics,

277
00:12:04,116 --> 00:12:05,286 A:middle
my colleague, Brent Fulgham,

278
00:12:05,286 --> 00:12:06,406 A:middle
will walk you through
the process.

279
00:12:07,346 --> 00:12:07,606 A:middle
Brent?

280
00:12:09,736 --> 00:12:10,326 A:middle
>> Thank you, Jer.

281
00:12:11,416 --> 00:12:14,056 A:middle
My name is Brent Fuljam,
and I'm also an engineer

282
00:12:14,056 --> 00:12:15,706 A:middle
in the WebKit Layout
and Rendering Team.

283
00:12:16,486 --> 00:12:22,046 A:middle
And today I wanted to show
you a few examples of HLS

284
00:12:22,226 --> 00:12:24,556 A:middle
and how it might make
your life better.

285
00:12:26,096 --> 00:12:28,436 A:middle
Now I'm sure that,
getting up here,

286
00:12:28,436 --> 00:12:31,626 A:middle
the first thing you thought
was, "This guy is a skater."

287
00:12:32,216 --> 00:12:33,956 A:middle
Right? I mean, I love it.

288
00:12:34,256 --> 00:12:39,576 A:middle
I film it and I had some great
video that I wanted to show off

289
00:12:40,266 --> 00:12:41,506 A:middle
that we filmed in Utah.

290
00:12:41,986 --> 00:12:45,416 A:middle
It's high-fidelity video,
beautiful cinematography,

291
00:12:45,416 --> 00:12:46,666 A:middle
if I do say so myself.

292
00:12:47,026 --> 00:12:49,996 A:middle
Wonderful, wonderful content.

293
00:12:49,996 --> 00:12:53,166 A:middle
And I wanted to share this
with my friends and family,

294
00:12:53,166 --> 00:12:54,506 A:middle
who couldn't be there that day.

295
00:12:54,906 --> 00:12:58,296 A:middle
So what I wanted to do
was put together a website

296
00:12:59,416 --> 00:13:02,616 A:middle
that would show this content.

297

298
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

299
00:12:59,416 --> 00:13:02,616 A:middle
that would show this content.

300
00:13:02,616 --> 00:13:06,146 A:middle
Let me return to this.

301
00:13:06,336 --> 00:13:10,326 A:middle
All right, so now I have a
single source element playing

302
00:13:10,326 --> 00:13:10,846 A:middle
a video.

303
00:13:10,846 --> 00:13:13,756 A:middle
This is the content
that I showed you

304
00:13:13,756 --> 00:13:15,636 A:middle
in QuickTime Player
just a second ago.

305
00:13:16,576 --> 00:13:17,716 A:middle
And let's take a look at what

306
00:13:17,716 --> 00:13:19,976 A:middle
that would look like
for our viewers.

307
00:13:20,626 --> 00:13:22,756 A:middle
Great, it looks exactly
the same as what I did

308
00:13:22,756 --> 00:13:26,236 A:middle
in QuickTime Player,
so I'm done, right?

309
00:13:26,236 --> 00:13:29,426 A:middle
All my friends can look at this
and tell me how great I am?

310
00:13:30,026 --> 00:13:33,476 A:middle
Well, no, it turns out that a
number of people were trying

311
00:13:33,476 --> 00:13:36,916 A:middle
to view this with lower
resolution devices: iPhones

312
00:13:36,916 --> 00:13:42,336 A:middle
and iPads and things that don't
have the full pixel content

313
00:13:42,336 --> 00:13:45,796 A:middle
of a giant display
projection system like this.

314
00:13:46,216 --> 00:13:48,116 A:middle
And it turns out they
didn't even watch it

315
00:13:48,116 --> 00:13:50,196 A:middle
because it just took
too long to play.

316
00:13:50,966 --> 00:13:53,196 A:middle
Going back to the original
video, we can kind of see why

317
00:13:53,196 --> 00:13:57,766 A:middle
that is, it's about 150
megabytes for eight seconds

318
00:13:57,806 --> 00:14:02,036 A:middle
of video, and that's not
going to make many people want

319

320
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

321
00:13:57,806 --> 00:14:02,036 A:middle
of video, and that's not
going to make many people want

322
00:14:02,036 --> 00:14:04,256 A:middle
to stick around and
wait for that.

323
00:14:04,256 --> 00:14:04,906 A:middle
So what do I do?

324
00:14:04,906 --> 00:14:07,616 A:middle
Well, the first thing
I would want

325
00:14:07,616 --> 00:14:10,376 A:middle
to do is take this
original video

326
00:14:10,376 --> 00:14:13,956 A:middle
and create multiple encodings
that are targeted or optimized

327
00:14:13,956 --> 00:14:14,906 A:middle
for different devices.

328
00:14:14,906 --> 00:14:18,526 A:middle
So if I have iPhones and
iPads that I want to support,

329
00:14:18,526 --> 00:14:22,116 A:middle
I want video streams
that are more suitable

330
00:14:22,116 --> 00:14:23,236 A:middle
or optimized for that.

331
00:14:23,656 --> 00:14:26,366 A:middle
And so you could do this
using a variety of tools.

332
00:14:26,366 --> 00:14:29,996 A:middle
We have iMovie; we
have Final Cut Pro.

333
00:14:30,176 --> 00:14:31,766 A:middle
If you're doing a lot of
these you might want to look

334
00:14:31,766 --> 00:14:33,666 A:middle
into Compressor, which
is a great application

335
00:14:33,666 --> 00:14:34,346 A:middle
for doing this.

336
00:14:34,876 --> 00:14:38,416 A:middle
We all have QuickTime Player
installed on our computers,

337
00:14:38,846 --> 00:14:40,976 A:middle
and so let me just show
you what we would do here.

338
00:14:40,976 --> 00:14:44,346 A:middle
In QuickTime Player,
we can export the video

339
00:14:44,596 --> 00:14:45,686 A:middle
in a variety of formats.

340
00:14:45,686 --> 00:14:50,666 A:middle
So we have 1080p, 720p, and
we have a set of presets

341
00:14:51,576 --> 00:14:54,466 A:middle
that are already laid out for
different types of devices.

342
00:14:54,966 --> 00:14:58,186 A:middle
And so in QuickTime Player
I would have to go to each

343
00:14:58,186 --> 00:15:02,556 A:middle
of these presets individually
and output a 1080p version

344

345
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

346
00:14:58,186 --> 00:15:02,556 A:middle
of these presets individually
and output a 1080p version

347
00:15:03,266 --> 00:15:07,736 A:middle
and output an iPhone 3GS
version, and so forth.

348
00:15:07,736 --> 00:15:09,606 A:middle
Now I'm not going
to make you wait

349
00:15:09,606 --> 00:15:14,056 A:middle
around while I export
these, since that's boring,

350
00:15:14,056 --> 00:15:18,906 A:middle
but what I will show
you is the set

351
00:15:18,906 --> 00:15:23,426 A:middle
of video encodings
that I wound up with.

352
00:15:23,486 --> 00:15:28,776 A:middle
And since I was running through
this briefly before we did this,

353
00:15:28,776 --> 00:15:31,116 A:middle
I have stuff here that
you don't need to see yet.

354
00:15:31,116 --> 00:15:33,536 A:middle
All right, so I have these video
encodings, I've created a bunch

355
00:15:33,536 --> 00:15:35,806 A:middle
of different versions that
support the different types

356
00:15:35,806 --> 00:15:39,466 A:middle
of devices that I
want to support.

357
00:15:39,466 --> 00:15:43,696 A:middle
I've got high resolution
for broadband users.

358
00:15:43,696 --> 00:15:46,176 A:middle
I've got lower resolutions
for people on cellular.

359
00:15:46,176 --> 00:15:48,946 A:middle
I've got a broadband
Wi-Fi version.

360
00:15:49,546 --> 00:15:52,106 A:middle
And so now I'm all set.

361
00:15:52,106 --> 00:15:54,276 A:middle
Once I've uploaded
these to the web server,

362
00:15:55,546 --> 00:15:57,416 A:middle
then I'm pretty much
ready to go, except I need

363
00:15:57,416 --> 00:15:59,006 A:middle
to make some changes
to my webpage.

364
00:15:59,616 --> 00:16:03,386 A:middle
So if I go back to
my web page example,

365

366
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

367
00:15:59,616 --> 00:16:03,386 A:middle
So if I go back to
my web page example,

368
00:16:04,556 --> 00:16:08,816 A:middle
instead of just having
this one <video> element

369
00:16:08,816 --> 00:16:12,006 A:middle
or this one video
<source> element

370
00:16:12,006 --> 00:16:15,616 A:middle
that is giving me my
high-quality video

371
00:16:15,616 --> 00:16:20,556 A:middle
or my ProRes video, I
need to add a version

372
00:16:20,946 --> 00:16:24,416 A:middle
that supports, say, my iPad Air.

373
00:16:24,856 --> 00:16:26,646 A:middle
So I have a Retina iPad.

374
00:16:26,966 --> 00:16:31,976 A:middle
I have a source that is a
slightly different location,

375
00:16:32,376 --> 00:16:34,436 A:middle
a different file encoding,

376
00:16:34,436 --> 00:16:36,406 A:middle
so in this case I'm
driving the broadband media,

377
00:16:37,016 --> 00:16:43,776 A:middle
and I'm using a CSS media
selector that limits the clients

378
00:16:43,776 --> 00:16:47,756 A:middle
that are going to receive this
video to items that have a 1024

379
00:16:47,756 --> 00:16:50,696 A:middle
by 768 resolution, like
you would have on an iPad,

380
00:16:50,696 --> 00:16:52,336 A:middle
and a device pixel ratio of 2.

381
00:16:52,526 --> 00:16:56,876 A:middle
And so I say, "Okay, this is my
iPad Air and, while I'm at it,

382
00:16:56,876 --> 00:17:01,226 A:middle
I probably want to have
something for iPhones 5 and 5S

383

384
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

385
00:16:56,876 --> 00:17:01,226 A:middle
I probably want to have
something for iPhones 5 and 5S

386
00:17:01,926 --> 00:17:04,165 A:middle
and maybe something for
a bunch of older stuff.

387
00:17:04,606 --> 00:17:10,705 A:middle
And pretty soon we have a pretty
large set of sources for us

388
00:17:10,705 --> 00:17:12,935 A:middle
to serve from this web server.

389
00:17:13,316 --> 00:17:21,356 A:middle
Okay, so if we look at this
now, you refresh the page,

390
00:17:22,356 --> 00:17:23,036 A:middle
what does it look like?

391
00:17:23,036 --> 00:17:27,756 A:middle
Well, it looks exactly the same.

392
00:17:27,996 --> 00:17:29,746 A:middle
I'm getting the same
stream that I had before

393
00:17:29,746 --> 00:17:33,816 A:middle
because I'm still connecting to
this with a high-quality, well,

394
00:17:34,086 --> 00:17:37,596 A:middle
a loopback network
and I'm showing it

395
00:17:37,596 --> 00:17:39,406 A:middle
on a giant screen
with lots of pixels.

396
00:17:39,406 --> 00:17:40,936 A:middle
I'm still getting
what I expected.

397
00:17:42,316 --> 00:17:43,456 A:middle
So I should be done now, right?

398
00:17:43,456 --> 00:17:45,636 A:middle
I mean I'm able to
deliver the right content

399
00:17:45,636 --> 00:17:47,506 A:middle
to all these different
people on different devices.

400
00:17:48,156 --> 00:17:49,906 A:middle
Time to go home and
put my feet up

401
00:17:49,906 --> 00:17:52,336 A:middle
and get the congratulatory
e-mails

402
00:17:52,336 --> 00:17:53,736 A:middle
from everyone, I assume, right?

403
00:17:54,766 --> 00:17:55,816 A:middle
Well, it turns

404
00:17:55,816 --> 00:17:58,456 A:middle
out my brother-in-law was
camping the weekend I posted

405
00:17:58,456 --> 00:18:02,266 A:middle
this and had really spotty
internet connectivity.

406

407
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

408
00:17:58,456 --> 00:18:02,266 A:middle
this and had really spotty
internet connectivity.

409
00:18:02,266 --> 00:18:04,306 A:middle
He was, I think, on the
Edge network or something.

410
00:18:04,356 --> 00:18:07,186 A:middle
So I asked him what he thought
of it, and he said, "Well,

411
00:18:07,186 --> 00:18:10,016 A:middle
I didn't even bother watching
it because it took too long

412
00:18:10,016 --> 00:18:13,156 A:middle
to download and it never
made any progress."

413
00:18:13,866 --> 00:18:17,246 A:middle
And I realized, well, we've
dealt with the resolution here,

414
00:18:17,246 --> 00:18:20,156 A:middle
but we haven't talked, at
all, about network bandwidth,

415
00:18:20,796 --> 00:18:22,566 A:middle
and that plays a role, as well.

416
00:18:23,016 --> 00:18:26,696 A:middle
Now as a web developer what
would we do in this case?

417
00:18:26,786 --> 00:18:32,286 A:middle
I could write some kind of
network sniffing algorithm

418
00:18:32,286 --> 00:18:34,946 A:middle
to try to figure out how
much bandwidth is being used

419
00:18:34,946 --> 00:18:36,886 A:middle
and the download rates
and this, but it seems

420
00:18:36,886 --> 00:18:38,976 A:middle
like that'd be really
hard to do properly

421
00:18:38,976 --> 00:18:40,566 A:middle
and it would be really
easy to get wrong

422
00:18:40,866 --> 00:18:42,656 A:middle
and would have to be maintained.

423
00:18:43,206 --> 00:18:45,316 A:middle
But what about this
HLS technology

424
00:18:45,316 --> 00:18:47,186 A:middle
that Jer just finished
telling us about?

425
00:18:47,256 --> 00:18:49,386 A:middle
In theory that should
take care of everything.

426
00:18:49,386 --> 00:18:53,276 A:middle
Well, it seems like
a good solution.

427
00:18:54,256 --> 00:18:57,666 A:middle
I already have all my encoded
video here, so there's really --

428
00:18:58,006 --> 00:18:59,516 A:middle
I've already done the hard work

429
00:18:59,516 --> 00:19:00,646 A:middle
of creating the different
encodings

430

431
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

432
00:18:59,516 --> 00:19:00,646 A:middle
of creating the different
encodings

433
00:19:00,646 --> 00:19:03,076 A:middle
for the different device
types, so now all I need

434
00:19:03,076 --> 00:19:10,236 A:middle
to do is generate the HLS
master manifest and information

435
00:19:10,236 --> 00:19:12,476 A:middle
that HLS will use to
display this content.

436
00:19:12,476 --> 00:19:15,916 A:middle
Now to do this we need
to use the dynamic duo

437
00:19:16,136 --> 00:19:20,296 A:middle
of Media File Segmenter and
Variant Playlist Creator.

438
00:19:20,916 --> 00:19:23,196 A:middle
And these are fantastic
tools that you can download

439
00:19:23,196 --> 00:19:29,556 A:middle
from our website but, as you
might imagine from these names,

440
00:19:29,996 --> 00:19:34,416 A:middle
they have a dizzying array
of flags and entry points

441
00:19:34,416 --> 00:19:37,896 A:middle
that you have to provide, and so
it's very difficult to remember.

442
00:19:37,896 --> 00:19:42,386 A:middle
We ended up just creating a
shell script to do this for us.

443
00:19:42,386 --> 00:19:48,666 A:middle
And so let me just put
this up here and, okay,

444
00:19:48,736 --> 00:19:52,116 A:middle
and then let me give you a
minute to write that down?

445
00:19:52,626 --> 00:19:56,456 A:middle
And then-oh, well, that's
probably not a great idea.

446
00:19:56,726 --> 00:19:58,896 A:middle
How about if you come by
our lab later this week,

447
00:19:58,896 --> 00:20:00,666 A:middle
and we'll be happy to
give you a copy of this?

448

449
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

450
00:19:58,896 --> 00:20:00,666 A:middle
and we'll be happy to
give you a copy of this?

451
00:20:01,196 --> 00:20:03,426 A:middle
All right, so what does this
look like when we run it?

452
00:20:03,426 --> 00:20:08,446 A:middle
Well, what I do is-I'll run
this, make an HLS script.

453
00:20:08,556 --> 00:20:13,266 A:middle
I'll provide us with-I'll
feed it the input

454
00:20:13,266 --> 00:20:16,076 A:middle
of the various files
that we want to use,

455
00:20:16,076 --> 00:20:17,716 A:middle
and we process each
of the files.

456
00:20:18,306 --> 00:20:19,356 A:middle
And what that ends up looking

457
00:20:19,356 --> 00:20:22,876 A:middle
like is I have this
magic index.m3u8,

458
00:20:22,876 --> 00:20:26,556 A:middle
which is the master manifest
file, and I have a series

459
00:20:26,556 --> 00:20:29,096 A:middle
of transport streams
that have been generated

460
00:20:29,096 --> 00:20:29,976 A:middle
for each of my encodings.

461
00:20:30,736 --> 00:20:36,856 A:middle
So in this case I have a
broadband high-bandwidth rate

462
00:20:37,046 --> 00:20:40,886 A:middle
version of this, and I've done
the same-and the script has done

463
00:20:40,886 --> 00:20:42,526 A:middle
the same thing for all
the different options.

464
00:20:42,526 --> 00:20:47,096 A:middle
So what I need to do is upload
all of this stuff to my website,

465
00:20:47,096 --> 00:20:49,476 A:middle
so I'd upload the
different transport streams

466
00:20:49,476 --> 00:20:53,996 A:middle
in my m3u8 file, and at that
point I'm basically done,

467
00:20:53,996 --> 00:20:57,996 A:middle
except for one change that
I need to make to my video,

468
00:20:58,826 --> 00:20:59,616 A:middle
I mean, to my website.

469
00:20:59,616 --> 00:21:08,906 A:middle
What I need to do is get rid of
all of this stuff, all of it,

470

471
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

472
00:20:59,616 --> 00:21:08,906 A:middle
What I need to do is get rid of
all of this stuff, all of it,

473
00:21:08,906 --> 00:21:11,656 A:middle
and replace it with one line,

474
00:21:12,316 --> 00:21:14,296 A:middle
the line that I gave you a
sneak peek of at the beginning.

475
00:21:15,066 --> 00:21:18,986 A:middle
This is the index.m3u8, this
is what we're calling --

476
00:21:19,186 --> 00:21:23,866 A:middle
this is our Manifest, our
Master Manifest file for HLS,

477
00:21:25,116 --> 00:21:29,976 A:middle
and let's just make
this say "best".

478
00:21:33,766 --> 00:21:35,676 A:middle
All right, and let's see
what that looks like.

479
00:21:36,266 --> 00:21:36,926 A:middle
I bet you can guess.

480
00:21:37,046 --> 00:21:43,766 A:middle
It looks exactly the same, but
now we're streaming this content

481
00:21:44,816 --> 00:21:48,176 A:middle
in an adaptive fashion, where
it will change and adapt

482
00:21:48,176 --> 00:21:51,376 A:middle
to the type of devices that
are being used and it'll change

483
00:21:51,376 --> 00:21:52,776 A:middle
and adapt to the
network conditions.

484
00:21:52,996 --> 00:21:56,136 A:middle
So if I were to start playing
this eight-second video

485
00:21:56,536 --> 00:22:01,076 A:middle
and leave the room, in theory,
it would-the speed would drop,

486

487
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

488
00:21:56,536 --> 00:22:01,076 A:middle
and leave the room, in theory,
it would-the speed would drop,

489
00:22:01,076 --> 00:22:05,456 A:middle
it would degrade to a
lower bandwidth version.

490
00:22:05,706 --> 00:22:07,976 A:middle
And if I were to
return to an area

491
00:22:07,976 --> 00:22:10,206 A:middle
where I had high bandwidth
it could then pick it back up

492
00:22:10,206 --> 00:22:13,196 A:middle
and return to this beautiful,
high-resolution imagery.

493
00:22:14,456 --> 00:22:22,116 A:middle
So I think that-so I hope that
this brief demo and this example

494
00:22:22,116 --> 00:22:24,976 A:middle
of how simple it is on your
website will show you why we're

495
00:22:24,976 --> 00:22:27,516 A:middle
so excited about this
technology and why we hope

496
00:22:27,516 --> 00:22:29,706 A:middle
that you'll try it for
your next projects.

497
00:22:31,356 --> 00:22:31,676 A:middle
Thank you.

498
00:22:32,166 --> 00:22:33,086 A:middle
>> Thanks, Brent.

499
00:22:33,346 --> 00:22:34,526 A:middle
That was great.

500
00:22:35,216 --> 00:22:39,476 A:middle
So for more information about
how to use HTTP Live Streaming

501
00:22:39,476 --> 00:22:41,876 A:middle
and how specifically
to encode your videos

502
00:22:41,876 --> 00:22:44,396 A:middle
for all the wide
variety of iOS devices,

503
00:22:44,696 --> 00:22:46,766 A:middle
take a look at Tech Note 2224,

504
00:22:47,026 --> 00:22:50,216 A:middle
which specifies all the settings
you'd need in Compressor

505
00:22:50,216 --> 00:22:52,706 A:middle
to generate multiple
encodings of your video

506
00:22:52,706 --> 00:22:54,826 A:middle
for a variety of Apple devices.

507
00:22:55,316 --> 00:22:58,166 A:middle
And, also, you can download
the Variant Playlist Creator

508
00:22:58,166 --> 00:23:00,086 A:middle
and Media File Segmenter
Tools as part

509

510
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

511
00:22:58,166 --> 00:23:00,086 A:middle
and Media File Segmenter
Tools as part

512
00:23:00,086 --> 00:23:02,516 A:middle
of the HTTP Live
Streaming toolset

513
00:23:02,676 --> 00:23:04,446 A:middle
from developer.apple.com.

514
00:23:04,696 --> 00:23:06,576 A:middle
And we have a live
streaming developer page,

515
00:23:06,576 --> 00:23:07,836 A:middle
where you can learn
all about HLS

516
00:23:08,136 --> 00:23:10,116 A:middle
in webpages and in native apps.

517
00:23:11,126 --> 00:23:15,676 A:middle
But new in Safari
on OS X is support

518
00:23:15,676 --> 00:23:18,816 A:middle
for a media streaming technology
called Media Source Extensions,

519
00:23:18,816 --> 00:23:19,906 A:middle
or MSE.

520
00:23:20,986 --> 00:23:23,926 A:middle
This is an extension to
the HTML5 specification,

521
00:23:24,446 --> 00:23:27,136 A:middle
where a <video> element
source is replaced

522
00:23:27,136 --> 00:23:31,026 A:middle
by a <mediasource> object,
which requires the page

523
00:23:31,026 --> 00:23:33,966 A:middle
to completely control
loading of media data.

524
00:23:35,266 --> 00:23:39,196 A:middle
Now MSE is primarily
intended for only the largest

525
00:23:39,196 --> 00:23:41,786 A:middle
of video providers, who have
large and complicated CVNs

526
00:23:41,786 --> 00:23:44,586 A:middle
and who need to micromanage
every aspect

527
00:23:44,586 --> 00:23:46,256 A:middle
of their network stack.

528
00:23:47,626 --> 00:23:50,226 A:middle
We built support
for MSE into Safari,

529
00:23:50,526 --> 00:23:52,896 A:middle
but for most websites we
don't actually recommend

530
00:23:52,896 --> 00:23:53,606 A:middle
that you use it.

531
00:23:53,606 --> 00:23:55,836 A:middle
And let's talk a little
bit about why that is.

532
00:23:57,276 --> 00:24:01,836 A:middle
With great power comes great
responsibility-except I remember

533

534
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

535
00:23:57,276 --> 00:24:01,836 A:middle
With great power comes great
responsibility-except I remember

536
00:24:01,836 --> 00:24:02,676 A:middle
it being someone else.

537
00:24:03,006 --> 00:24:03,676 A:middle
Oh, that's right.

538
00:24:05,776 --> 00:24:09,346 A:middle
The MSE API will accept
raw data, demux it,

539
00:24:09,426 --> 00:24:11,886 A:middle
parse it into the samples,
decode those samples

540
00:24:11,886 --> 00:24:13,766 A:middle
and cube the samples for
display, but that's it.

541
00:24:13,866 --> 00:24:14,826 A:middle
That's all you get.

542
00:24:15,346 --> 00:24:21,106 A:middle
For everything else, your
website has to do it manually.

543
00:24:21,106 --> 00:24:22,736 A:middle
The browser will not
fetch data for you.

544
00:24:22,956 --> 00:24:26,406 A:middle
It must be fetched explicitly
by your page through XHR.

545
00:24:27,946 --> 00:24:30,546 A:middle
The browser will not
preload metadata for you.

546
00:24:30,546 --> 00:24:31,586 A:middle
You have to do that yourself

547
00:24:31,586 --> 00:24:33,436 A:middle
to make sure playback
buffers don't run dry.

548
00:24:33,786 --> 00:24:35,166 A:middle
And once you've done
these two steps,

549
00:24:35,286 --> 00:24:37,666 A:middle
you will have reproduced
basic video playback,

550
00:24:37,886 --> 00:24:39,786 A:middle
but then again the <video>
element could do that already.

551
00:24:39,856 --> 00:24:42,296 A:middle
For all of the benefits
of streaming media,

552
00:24:43,236 --> 00:24:45,036 A:middle
your page must implement
it manually.

553
00:24:45,596 --> 00:24:49,306 A:middle
So your page must monitor
network conditions to make sure

554
00:24:49,306 --> 00:24:51,396 A:middle
that your user's device can keep

555
00:24:51,396 --> 00:24:52,936 A:middle
up with the bit rate
that you are serving.

556
00:24:54,596 --> 00:24:59,246 A:middle
You also have to monitor whether
your users are dropping frames

557
00:24:59,246 --> 00:25:01,616 A:middle
if their hardware can't keep

558

559
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

560
00:24:59,246 --> 00:25:01,616 A:middle
if their hardware can't keep

561
00:25:01,616 --> 00:25:04,076 A:middle
up with the media
that you are serving.

562
00:25:05,246 --> 00:25:10,226 A:middle
And when conditions change you
have to manually switch streams

563
00:25:10,226 --> 00:25:11,676 A:middle
by pre-fetching and
then starting

564
00:25:11,676 --> 00:25:14,036 A:middle
over for a more appropriate
stream.

565
00:25:16,416 --> 00:25:19,436 A:middle
And you have to do all of this
without detailed information

566
00:25:19,436 --> 00:25:22,456 A:middle
about the current state of
the device whereas, with HLS,

567
00:25:22,916 --> 00:25:26,366 A:middle
it can use its detailed view
over the device's current state

568
00:25:26,366 --> 00:25:28,006 A:middle
to make better adaptation
decisions.

569
00:25:28,626 --> 00:25:31,746 A:middle
So, for example, HLS knows what
other processes might be running

570
00:25:31,746 --> 00:25:34,136 A:middle
on the device and knows
whether the device is

571
00:25:34,136 --> 00:25:36,386 A:middle
on a metered cellular
connection or on Wi-Fi.

572
00:25:36,806 --> 00:25:39,496 A:middle
HLS is aware of the
current battery conditions

573
00:25:39,496 --> 00:25:41,056 A:middle
of the device, and it knows

574
00:25:41,056 --> 00:25:43,386 A:middle
about the current memory
pressure the system is under.

575
00:25:46,396 --> 00:25:49,486 A:middle
So writing an MSE player
involves re-implementing an

576
00:25:49,486 --> 00:25:54,726 A:middle
entire streaming media stack in
JavaScript, whereas HLS has all

577
00:25:54,726 --> 00:25:57,486 A:middle
of this data available
and yet writing a player

578
00:25:57,486 --> 00:25:59,786 A:middle
for HLS requires a
single line of HTML.

579

580
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

581
00:26:00,606 --> 00:26:03,416 A:middle
And what's more MSE is
only available on OS X.

582
00:26:03,576 --> 00:26:05,786 A:middle
So, to reach iOS users,
you're likely to have to set

583
00:26:05,786 --> 00:26:06,946 A:middle
up an HLS stream anyway.

584
00:26:07,336 --> 00:26:10,486 A:middle
For almost every conceivable
situation, HLS is going

585
00:26:10,696 --> 00:26:12,676 A:middle
to be a better choice
for streaming media.

586
00:26:14,516 --> 00:26:16,226 A:middle
Okay, what about
cross-browser support?

587
00:26:16,826 --> 00:26:19,246 A:middle
HLS is supported
across all versions

588
00:26:19,246 --> 00:26:22,736 A:middle
of Safari on iOS and OS X.

589
00:26:22,736 --> 00:26:26,456 A:middle
MSE is only supported
on Safari on OS X.

590
00:26:26,526 --> 00:26:29,356 A:middle
The Android browser and
Android Chrome both support HLS,

591
00:26:29,546 --> 00:26:30,346 A:middle
but not MSE.

592
00:26:31,306 --> 00:26:33,526 A:middle
IE 11 supports MSE, but not HLS.

593
00:26:34,386 --> 00:26:36,716 A:middle
Google Chrome supports
media source extensions,

594
00:26:37,006 --> 00:26:41,016 A:middle
but apparently its developers
are investigating implementing

595
00:26:41,016 --> 00:26:43,126 A:middle
HLS on top of MSE as JavaScript.

596
00:26:43,266 --> 00:26:47,866 A:middle
And Firefox only supports
MSE in its nightly builds,

597
00:26:48,256 --> 00:26:51,976 A:middle
but they are also looking
at adding support for HLS

598
00:26:52,156 --> 00:26:53,536 A:middle
through MSE implementation.

599
00:26:57,276 --> 00:27:01,446 A:middle
So, as you can see, the
web hasn't really settled

600

601
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

602
00:26:57,276 --> 00:27:01,446 A:middle
So, as you can see, the
web hasn't really settled

603
00:27:01,446 --> 00:27:03,606 A:middle
on a single streaming
media technology yet.

604
00:27:03,756 --> 00:27:05,826 A:middle
So, if you take nothing
else away,

605
00:27:06,376 --> 00:27:08,416 A:middle
for your Safari users, use HLS.

606
00:27:09,726 --> 00:27:11,626 A:middle
Okay, that was streaming,
now let's talk

607
00:27:11,626 --> 00:27:12,976 A:middle
about power efficiency.

608
00:27:14,296 --> 00:27:16,716 A:middle
At Apple we care
deeply about power.

609
00:27:16,856 --> 00:27:19,856 A:middle
We make devices with
simply amazing battery life.

610
00:27:20,276 --> 00:27:24,026 A:middle
But it's not just
about batteries.

611
00:27:24,526 --> 00:27:29,336 A:middle
We care about the impact our
devices have on the environment

612
00:27:29,336 --> 00:27:31,806 A:middle
as a whole, and that's evident

613
00:27:31,956 --> 00:27:33,566 A:middle
in how much performance
we can squeeze

614
00:27:33,566 --> 00:27:35,266 A:middle
out of a single watt
of power use.

615
00:27:36,976 --> 00:27:39,446 A:middle
We've done this through
a combination of hardware

616
00:27:39,446 --> 00:27:43,666 A:middle
and software engineering, but
the last mile is up to you.

617
00:27:46,226 --> 00:27:50,226 A:middle
It's easy to do this wrong and
drain your users' batteries.

618
00:27:50,316 --> 00:27:52,716 A:middle
And a user with a dead
battery is one that's not using

619
00:27:52,716 --> 00:27:53,306 A:middle
your website.

620
00:27:53,456 --> 00:27:57,796 A:middle
So today we're going to show
you how to minimize the amount

621
00:27:57,796 --> 00:28:01,156 A:middle
of power you use when
playing back video in Safari.

622

623
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

624
00:27:57,796 --> 00:28:01,156 A:middle
of power you use when
playing back video in Safari.

625
00:28:02,726 --> 00:28:06,556 A:middle
So, first, we're going to talk
about using fullscreen mode

626
00:28:06,926 --> 00:28:07,926 A:middle
and we're going to talk

627
00:28:07,926 --> 00:28:11,056 A:middle
about how sleep cycles
affect battery life.

628
00:28:12,056 --> 00:28:13,066 A:middle
But, first, fullscreen.

629
00:28:14,076 --> 00:28:15,606 A:middle
It may sound counterintuitive,

630
00:28:16,516 --> 00:28:19,016 A:middle
but going into fullscreen mode
can dramatically reduce the

631
00:28:19,016 --> 00:28:21,196 A:middle
amount of power your
system uses as a whole.

632
00:28:22,006 --> 00:28:25,216 A:middle
Apps which are hidden behind a
fullscreen browser window can go

633
00:28:25,216 --> 00:28:29,016 A:middle
into a low-power mode called
App Nap, and you can learn more

634
00:28:29,016 --> 00:28:31,876 A:middle
about App Nap specifically
at-I believe there's a session

635
00:28:31,876 --> 00:28:36,376 A:middle
on Thursday, something
about programming,

636
00:28:36,636 --> 00:28:38,726 A:middle
low-power programming
and, anyway, look it up.

637
00:28:38,726 --> 00:28:40,346 A:middle
It's Thursday at 10:30.

638
00:28:41,236 --> 00:28:48,576 A:middle
But, in addition, when
the system determines

639
00:28:48,576 --> 00:28:52,206 A:middle
that it can composite video
without-well, it doesn't have

640
00:28:52,206 --> 00:28:54,106 A:middle
to do compositing to
get video on screen,

641
00:28:54,106 --> 00:28:57,156 A:middle
it can go through a low power
mode, but to explain how

642
00:28:57,156 --> 00:28:58,726 A:middle
that works we're
first going to have

643
00:28:58,726 --> 00:29:00,226 A:middle
to talk about pixel formats.

644

645
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

646
00:28:58,726 --> 00:29:00,226 A:middle
to talk about pixel formats.

647
00:29:01,746 --> 00:29:04,796 A:middle
So every web developer
should be familiar with RGB.

648
00:29:05,086 --> 00:29:07,556 A:middle
The web platform is
written in RGB values,

649
00:29:07,916 --> 00:29:11,006 A:middle
where every pixel is broken into
a red, green and blue component,

650
00:29:11,356 --> 00:29:13,736 A:middle
and each component is
given eight bits of depth.

651
00:29:15,946 --> 00:29:18,566 A:middle
But video is different,
video is decoded

652
00:29:18,566 --> 00:29:24,296 A:middle
into a pixel format called YUV,
where Y is a luminance plane,

653
00:29:24,596 --> 00:29:26,756 A:middle
and U and V are two
color planes.

654
00:29:27,186 --> 00:29:31,126 A:middle
The Y plane actually encodes
the green and brightness values,

655
00:29:31,476 --> 00:29:34,496 A:middle
and the U and V planes
encode the blue, or the red

656
00:29:34,496 --> 00:29:35,506 A:middle
and the blue, respectively.

657
00:29:35,716 --> 00:29:40,596 A:middle
And typically the Y plane
is given twice as much depth

658
00:29:41,026 --> 00:29:45,296 A:middle
as the U and V planes, which
is why we call it YUV 422

659
00:29:45,296 --> 00:29:47,626 A:middle
or other formats, like YUV 411.

660
00:29:47,846 --> 00:29:51,646 A:middle
All of those describe the ratio
of the bit depths between the Y

661
00:29:51,646 --> 00:29:52,566 A:middle
and the U and V planes.

662
00:29:53,106 --> 00:29:56,126 A:middle
And we give the Y
plane more depth

663
00:29:56,206 --> 00:29:59,896 A:middle
because the human visual system
is much better at distinguishing

664
00:29:59,896 --> 00:30:02,866 A:middle
between values of green and
values of light and dark

665

666
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

667
00:29:59,896 --> 00:30:02,866 A:middle
between values of green and
values of light and dark

668
00:30:03,946 --> 00:30:05,926 A:middle
than it is between
values of red and blue.

669
00:30:06,276 --> 00:30:08,846 A:middle
So if you're a mantis shrimp,
then this makes total sense

670
00:30:08,846 --> 00:30:12,406 A:middle
to you-if you're a mantis
shrimp who longboards, that is.

671
00:30:16,416 --> 00:30:21,386 A:middle
But so YUV 422 only requires
about 16 bits per pixel

672
00:30:22,046 --> 00:30:25,636 A:middle
to encode, whereas an RGB with
an alpha channel requires 32.

673
00:30:26,636 --> 00:30:28,986 A:middle
And since there's typically
less variance in the U

674
00:30:28,986 --> 00:30:31,636 A:middle
and the V planes, they can
be compressed much easier

675
00:30:31,636 --> 00:30:33,746 A:middle
than RGB values.

676
00:30:33,976 --> 00:30:36,976 A:middle
And this is why video
prefers to use YUV over RGB.

677
00:30:37,046 --> 00:30:42,336 A:middle
The side effect, though, of
all these decisions is that,

678
00:30:42,606 --> 00:30:46,006 A:middle
since the web platform was
written in RGB and video was

679
00:30:46,006 --> 00:30:49,006 A:middle
in YUV, we have to convert from
one to the other when we need

680
00:30:49,006 --> 00:30:50,346 A:middle
to draw on top of the video.

681
00:30:50,636 --> 00:30:51,656 A:middle
That's how this works.

682
00:30:51,656 --> 00:30:55,446 A:middle
It's called compositing, where
layers are drawn together,

683
00:30:55,766 --> 00:30:56,716 A:middle
top to bottom, in order

684
00:30:56,716 --> 00:30:59,516 A:middle
to present the actual webpage
your viewers are going to see.

685

686
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

687
00:31:00,316 --> 00:31:02,216 A:middle
So typically it works like this,

688
00:31:02,216 --> 00:31:06,006 A:middle
you start with coded video
frames, you decode those frames

689
00:31:06,216 --> 00:31:13,326 A:middle
into YUV, and then convert them
into RGB, draw your web content

690
00:31:13,326 --> 00:31:15,756 A:middle
on top of them and
then send them

691
00:31:15,756 --> 00:31:17,246 A:middle
out to the video
card to be displayed.

692
00:31:18,686 --> 00:31:19,446 A:middle
Simple, right?

693
00:31:19,446 --> 00:31:22,336 A:middle
Now if the system determines

694
00:31:22,336 --> 00:31:24,106 A:middle
that it can display a
video frame without having

695
00:31:24,106 --> 00:31:27,346 A:middle
to draw anything on top
of it, it can skip all

696
00:31:27,346 --> 00:31:30,096 A:middle
of these format conversion
steps and go straight

697
00:31:30,096 --> 00:31:32,166 A:middle
from YUV directly
to the video card.

698
00:31:34,636 --> 00:31:36,536 A:middle
It dramatically reduces
the amount

699
00:31:36,536 --> 00:31:38,726 A:middle
of power required
to display video.

700
00:31:38,846 --> 00:31:42,056 A:middle
It does have a few
prerequisites, though.

701
00:31:42,286 --> 00:31:44,666 A:middle
For one you must support
the Fullscreen API.

702
00:31:45,166 --> 00:31:47,976 A:middle
If you have JavaScript custom
controls, you should have

703
00:31:47,976 --> 00:31:50,946 A:middle
at least one that uses the
requestFullscreen method

704
00:31:50,946 --> 00:31:56,116 A:middle
to bring your controls and your
video into fullscreen mode.

705
00:31:56,206 --> 00:31:57,636 A:middle
Black is the new black.

706
00:31:58,506 --> 00:32:01,256 A:middle
You should only have a black
background visible behind

707

708
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

709
00:31:58,506 --> 00:32:01,256 A:middle
You should only have a black
background visible behind

710
00:32:01,256 --> 00:32:01,816 A:middle
your video.

711
00:32:04,656 --> 00:32:07,536 A:middle
And no DOM element should be
visible on top of your video

712
00:32:07,536 --> 00:32:10,196 A:middle
as well, and this is
tricky because elements

713
00:32:10,196 --> 00:32:13,066 A:middle
which have an opacity of zero
are still technically visible.

714
00:32:13,736 --> 00:32:15,516 A:middle
So don't hide your
controls with opacity

715
00:32:15,516 --> 00:32:17,736 A:middle
or at least don't only
hide them with opacity;

716
00:32:17,986 --> 00:32:19,276 A:middle
use "display:none" as well.

717
00:32:22,256 --> 00:32:25,226 A:middle
And everything that's not
currently being displayed

718
00:32:25,226 --> 00:32:28,026 A:middle
in fullscreen mode won't
ever be visible, so you might

719
00:32:28,026 --> 00:32:29,076 A:middle
as well hide it as well.

720
00:32:29,296 --> 00:32:32,106 A:middle
And we'll show you a quick
little snippet of CSS

721
00:32:32,106 --> 00:32:34,626 A:middle
that will hide all of your
non-fullscreen elements

722
00:32:34,986 --> 00:32:36,886 A:middle
when your video is
in fullscreen mode.

723
00:32:38,076 --> 00:32:39,646 A:middle
So, first, the Fullscreen API.

724
00:32:39,646 --> 00:32:42,086 A:middle
Now we've talked about
this at a previous session,

725
00:32:42,086 --> 00:32:44,876 A:middle
so for more information about
how the Fullscreen API works,

726
00:32:45,326 --> 00:32:47,806 A:middle
check out-I think it's
the 2011 video session.

727
00:32:48,466 --> 00:32:50,716 A:middle
But, really quickly, if
you just call this method

728
00:32:50,716 --> 00:32:54,476 A:middle
from like a fullscreen button
handler it will toggle back

729
00:32:54,476 --> 00:32:56,146 A:middle
and forth between
fullscreen mode.

730
00:32:58,546 --> 00:33:01,986 A:middle
To hide everything that's
not in fullscreen we're going

731

732
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

733
00:32:58,546 --> 00:33:01,986 A:middle
To hide everything that's
not in fullscreen we're going

734
00:33:01,986 --> 00:33:03,826 A:middle
to give you a little
snippet of CSS to use.

735
00:33:04,446 --> 00:33:06,596 A:middle
So, first, for a
fullscreen element,

736
00:33:06,646 --> 00:33:09,846 A:middle
all of its ancestors are
given a pseudo-class called

737
00:33:09,846 --> 00:33:10,816 A:middle
"full-screen-ancestor".

738
00:33:11,176 --> 00:33:14,556 A:middle
So this will select every child

739
00:33:14,556 --> 00:33:17,446 A:middle
of a fullscreen ancestor
that's not an ancestor itself

740
00:33:17,936 --> 00:33:21,716 A:middle
and is not the fullscreen
element itself, and hide it.

741
00:33:25,696 --> 00:33:28,556 A:middle
So just add this line
of CSS to your websites.

742
00:33:28,806 --> 00:33:32,386 A:middle
None of the objects that are not
in fullscreen mode when the rest

743
00:33:32,386 --> 00:33:35,426 A:middle
of your content is
will be visible or,

744
00:33:35,426 --> 00:33:37,286 A:middle
if they won't be visible, they
won't be in the render tree

745
00:33:37,286 --> 00:33:39,156 A:middle
and wasting CPU cycles
in memory.

746
00:33:41,146 --> 00:33:42,786 A:middle
Okay, so that was compositing.

747
00:33:43,226 --> 00:33:46,766 A:middle
Now let's talk about how video
playback affects your sleep.

748
00:33:47,816 --> 00:33:49,756 A:middle
Something you should
be aware of is the way

749
00:33:49,756 --> 00:33:54,336 A:middle
that media playback affects
your user system's sleep cycles.

750
00:33:54,976 --> 00:33:57,746 A:middle
When Safari plays a video it
will conditionally block the

751
00:33:57,746 --> 00:34:00,106 A:middle
display from sleeping
using a sleep assertion,

752

753
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

754
00:33:57,746 --> 00:34:00,106 A:middle
display from sleeping
using a sleep assertion,

755
00:34:00,296 --> 00:34:02,666 A:middle
and it does this to avoid
the annoying behavior

756
00:34:02,666 --> 00:34:05,886 A:middle
of your display going to sleep
halfway through an episode

757
00:34:06,106 --> 00:34:08,136 A:middle
of "Orange Is the New
Black" or whatever.

758
00:34:10,045 --> 00:34:13,136 A:middle
Safari will only block
this sleep from happening

759
00:34:13,216 --> 00:34:14,806 A:middle
under certain conditions,
though.

760
00:34:16,016 --> 00:34:21,016 A:middle
So, the video must have an
audio track and a video track.

761
00:34:21,815 --> 00:34:25,706 A:middle
It has to be playing and
it must not be looping.

762
00:34:25,786 --> 00:34:27,596 A:middle
If any of these conditions
are not met,

763
00:34:27,596 --> 00:34:29,426 A:middle
we won't keep the
system from sleeping.

764
00:34:30,295 --> 00:34:34,956 A:middle
However, this has kind of
a dramatic failure mode.

765
00:34:35,666 --> 00:34:37,525 A:middle
So there was a website
we came across.

766
00:34:38,496 --> 00:34:40,036 A:middle
They were trying to
do something very cool

767
00:34:40,036 --> 00:34:40,896 A:middle
with the <video> elements.

768
00:34:40,896 --> 00:34:44,516 A:middle
They used a full-page <video>
element as the backdrop

769
00:34:44,516 --> 00:34:46,946 A:middle
of their landing page and,

770
00:34:47,196 --> 00:34:49,906 A:middle
in order to do a fancy
CSS transition at the end

771
00:34:49,906 --> 00:34:52,436 A:middle
of the video, they
didn't use looping.

772
00:34:52,585 --> 00:34:57,646 A:middle
They had two <video> elements
that they faded between and,

773
00:34:57,846 --> 00:35:00,416 A:middle
even though their video wasn't
entirely silent, it was silent

774

775
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

776
00:34:57,846 --> 00:35:00,416 A:middle
even though their video wasn't
entirely silent, it was silent

777
00:35:00,416 --> 00:35:02,476 A:middle
because it had a
silent audio track.

778
00:35:03,266 --> 00:35:04,996 A:middle
So if you loaded this
page and you walked away

779
00:35:04,996 --> 00:35:07,436 A:middle
from your computer, you
came back in a few hours,

780
00:35:07,436 --> 00:35:11,586 A:middle
it would be completely
dead because, to Safari,

781
00:35:11,586 --> 00:35:14,036 A:middle
this looks like the user
is just watching a playlist

782
00:35:14,036 --> 00:35:14,936 A:middle
of different videos.

783
00:35:15,476 --> 00:35:17,266 A:middle
So how could they fix this?

784
00:35:17,516 --> 00:35:19,456 A:middle
Well, for one they could
strip the audio track,

785
00:35:19,566 --> 00:35:21,436 A:middle
the silent audio track,
out of their media.

786
00:35:22,576 --> 00:35:26,336 A:middle
They could also burn the fade
effect into the video itself,

787
00:35:26,336 --> 00:35:29,286 A:middle
the video media itself,
and use the loop property

788
00:35:29,286 --> 00:35:31,696 A:middle
to loop the video
over and over again.

789
00:35:31,756 --> 00:35:34,156 A:middle
Either one of those would
let the display sleep again.

790
00:35:36,796 --> 00:35:40,556 A:middle
But we have also updated
our requirements in Safari.

791
00:35:40,806 --> 00:35:42,736 A:middle
In addition to the <video>
element having an audio

792
00:35:42,736 --> 00:35:45,276 A:middle
and video track, not
looping, and playing,

793
00:35:45,736 --> 00:35:47,076 A:middle
it must also be visible.

794
00:35:47,636 --> 00:35:49,896 A:middle
That means it must be
in the foreground tab

795
00:35:50,216 --> 00:35:53,496 A:middle
in the visible window
and on the current space.

796
00:35:53,836 --> 00:35:57,606 A:middle
If the <video> element
is in a background tab

797
00:35:57,606 --> 00:36:00,706 A:middle
or the window is hidden, it
will let the system sleep again.

798

799
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

800
00:35:57,606 --> 00:36:00,706 A:middle
or the window is hidden, it
will let the system sleep again.

801
00:36:00,866 --> 00:36:03,156 A:middle
So, with these changes, even
if you do the wrong thing,

802
00:36:04,136 --> 00:36:06,586 A:middle
your page will still keep the
system from sleeping but only

803
00:36:06,586 --> 00:36:08,256 A:middle
when your page is
actually visible.

804
00:36:09,326 --> 00:36:10,776 A:middle
Okay, that was power efficiency.

805
00:36:10,956 --> 00:36:13,026 A:middle
Now let's talk about how
to use timed metadata

806
00:36:13,026 --> 00:36:14,636 A:middle
to coordinate events
in your page.

807
00:36:14,996 --> 00:36:16,596 A:middle
So what is timed metadata?

808
00:36:17,846 --> 00:36:20,726 A:middle
Timed metadata is data
delivered alongside your video

809
00:36:20,726 --> 00:36:24,916 A:middle
and your audio data where each
piece of data has a start time

810
00:36:24,916 --> 00:36:27,106 A:middle
and an end time that's
in the media's timeline.

811
00:36:28,246 --> 00:36:31,086 A:middle
But, Jer, I can hear you
asking, that sounds a lot

812
00:36:31,086 --> 00:36:33,086 A:middle
like text tracks,
and that's true.

813
00:36:33,866 --> 00:36:36,396 A:middle
Text tracks are one
kind of timed metadata,

814
00:36:36,396 --> 00:36:39,946 A:middle
but metadata isn't limited to
text and other text-like things.

815
00:36:40,276 --> 00:36:43,116 A:middle
You can include arbitrary
binary information;

816
00:36:43,116 --> 00:36:45,566 A:middle
you can include geolocation
information; you can control,

817
00:36:45,696 --> 00:36:48,436 A:middle
add images, you can
include text;

818
00:36:48,736 --> 00:36:50,986 A:middle
you can include anything
you'd like in a metadata track

819
00:36:51,226 --> 00:36:55,116 A:middle
and have that be available
through the Timed Metadata API.

820
00:36:55,116 --> 00:36:58,916 A:middle
Now, timed metadata has been
available to native apps

821
00:36:58,916 --> 00:37:03,336 A:middle
in API form on iOS and OS X for
some time, but new in Safari

822

823
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

824
00:36:58,916 --> 00:37:03,336 A:middle
in API form on iOS and OS X for
some time, but new in Safari

825
00:37:03,336 --> 00:37:07,236 A:middle
on iOS and OS X, it's easy to
use from JavaScript as well.

826
00:37:08,096 --> 00:37:10,296 A:middle
It appears in the <video>
element as a text track,

827
00:37:10,766 --> 00:37:14,636 A:middle
just like the caption tracks we
talked about at previous WWDCs.

828
00:37:15,166 --> 00:37:16,646 A:middle
These tracks will be
a kind of metadata,

829
00:37:16,646 --> 00:37:18,886 A:middle
meaning they won't be
displayed by the browser.

830
00:37:20,116 --> 00:37:23,826 A:middle
Instead they'll be available to
your script running in the page,

831
00:37:23,966 --> 00:37:26,756 A:middle
and you can use the same
Text Track APIs to watch

832
00:37:26,756 --> 00:37:30,626 A:middle
for incoming metadata
events as text track cues.

833
00:37:31,366 --> 00:37:34,156 A:middle
Now TextTrack contains
a list of cues,

834
00:37:34,156 --> 00:37:36,616 A:middle
each one has a start
time and an end time.

835
00:37:37,956 --> 00:37:40,346 A:middle
You can add event
handlers to these objects

836
00:37:40,616 --> 00:37:43,096 A:middle
that will get fired as
the media timeline goes

837
00:37:43,096 --> 00:37:45,486 A:middle
into the cue and leaves.

838
00:37:46,926 --> 00:37:53,626 A:middle
Now a WebKitDataCue is a
subclass of a TextTrackCue and,

839
00:37:53,626 --> 00:37:55,336 A:middle
because this interface
is experimental,

840
00:37:55,556 --> 00:37:56,816 A:middle
it has a WebKit prefix.

841
00:37:57,016 --> 00:38:00,286 A:middle
So this is not in
the HTML5 spec yet.

842

843
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

844
00:37:57,016 --> 00:38:00,286 A:middle
So this is not in
the HTML5 spec yet.

845
00:38:01,286 --> 00:38:03,616 A:middle
Be prepared for this
interface to change.

846
00:38:03,686 --> 00:38:04,696 A:middle
That said, we're pushing

847
00:38:04,696 --> 00:38:06,776 A:middle
to get these proposed
changes into the spec soon.

848
00:38:08,376 --> 00:38:11,946 A:middle
So each cue will have a type
property, which allows you

849
00:38:11,946 --> 00:38:14,976 A:middle
to interpret the value
property correctly.

850
00:38:15,306 --> 00:38:16,346 A:middle
So what does a type look like?

851
00:38:16,656 --> 00:38:20,046 A:middle
Well, the metadata cue type
indicates the source the

852
00:38:20,076 --> 00:38:21,016 A:middle
metadata came from.

853
00:38:21,276 --> 00:38:23,736 A:middle
So metadata can be found in
QuickTime user data atoms;

854
00:38:24,196 --> 00:38:26,456 A:middle
they can be found in
QuickTime metadata atoms;

855
00:38:26,516 --> 00:38:29,666 A:middle
it could have been inserted
by iTunes; it could be found

856
00:38:29,666 --> 00:38:32,556 A:middle
in the MP4 metadata
box; or, finally,

857
00:38:32,586 --> 00:38:35,546 A:middle
metadata can be inserted
as ID3 frames directly

858
00:38:35,546 --> 00:38:36,386 A:middle
into your media stream.

859
00:38:38,686 --> 00:38:41,616 A:middle
So these values allow you to
interpret the value property,

860
00:38:41,616 --> 00:38:42,886 A:middle
which looks like this.

861
00:38:43,376 --> 00:38:46,306 A:middle
Each value has a key and,
between the key and the type,

862
00:38:47,366 --> 00:38:50,136 A:middle
you can uniquely identify
the meaning of the data value

863
00:38:50,136 --> 00:38:53,856 A:middle
or the data property, which can
be a string, an array, a number,

864
00:38:53,856 --> 00:38:55,746 A:middle
an array buffer,
any JavaScript type.

865
00:38:55,746 --> 00:38:59,376 A:middle
And the value may optionally
have a locale so you can choose

866
00:38:59,376 --> 00:39:03,716 A:middle
between a variety of available
cues for the current time based

867

868
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

869
00:38:59,376 --> 00:39:03,716 A:middle
between a variety of available
cues for the current time based

870
00:39:03,716 --> 00:39:05,456 A:middle
on the user's current
system locale.

871
00:39:06,346 --> 00:39:09,006 A:middle
So what would you use this for?

872
00:39:09,436 --> 00:39:13,046 A:middle
An extremely simple example
would be displaying the title

873
00:39:13,546 --> 00:39:15,876 A:middle
of a song in a long-playing
audio stream.

874
00:39:16,656 --> 00:39:20,086 A:middle
Another example would be to
add entry and exit points

875
00:39:20,306 --> 00:39:23,036 A:middle
to various places in your
media stream so you can track

876
00:39:23,036 --> 00:39:24,166 A:middle
where the users, say,

877
00:39:24,486 --> 00:39:27,126 A:middle
watch through an entire
ad or skipped over it.

878
00:39:28,506 --> 00:39:31,196 A:middle
But because you can package
any type of binary data you

879
00:39:31,196 --> 00:39:35,566 A:middle
like in an HLS stream or a
media file, the possibilities

880
00:39:35,566 --> 00:39:37,566 A:middle
for this API are
functionally endless.

881
00:39:38,996 --> 00:39:41,166 A:middle
And so Brent has an amazing
demo showing what kind

882
00:39:41,166 --> 00:39:43,066 A:middle
of awesome things you can
do with timed metadata.

883
00:39:43,716 --> 00:39:43,956 A:middle
Brent?

884
00:39:44,336 --> 00:39:44,826 A:middle
>> Thank you.

885
00:39:47,576 --> 00:39:51,406 A:middle
So let's get back
to longboarding.

886
00:39:51,406 --> 00:39:58,996 A:middle
I have some more footage here
of a really nice day in Utah,

887
00:39:59,336 --> 00:40:04,126 A:middle
and we thought it would be
really neat to take advantage

888

889
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

890
00:39:59,336 --> 00:40:04,126 A:middle
and we thought it would be
really neat to take advantage

891
00:40:04,126 --> 00:40:07,106 A:middle
of some of the metadata that
can be encoded in these videos.

892
00:40:07,566 --> 00:40:10,746 A:middle
Now our iDevices can already
collect a lot of things,

893
00:40:10,746 --> 00:40:15,566 A:middle
such as geolocation data
and, with newer devices,

894
00:40:15,566 --> 00:40:17,466 A:middle
we can now collect motion data.

895
00:40:17,466 --> 00:40:20,016 A:middle
There are a variety of
applications that you can use

896
00:40:20,016 --> 00:40:25,446 A:middle
that will encode other types
of data that are related

897
00:40:25,446 --> 00:40:28,806 A:middle
to other devices and things
that you may work with.

898
00:40:29,066 --> 00:40:31,006 A:middle
This can all be encoded together

899
00:40:31,006 --> 00:40:32,976 A:middle
and brought along as
part of the media.

900
00:40:32,976 --> 00:40:35,026 A:middle
And so I thought it'd
be really interesting

901
00:40:35,026 --> 00:40:36,806 A:middle
to see what we could
do with that.

902
00:40:36,986 --> 00:40:41,716 A:middle
Now, in this video, we had
some content that was embedded

903
00:40:42,686 --> 00:40:46,406 A:middle
in the media stream as ID3 tags,

904
00:40:46,406 --> 00:40:50,796 A:middle
so they contain a text
entry that's a JSON object

905
00:40:50,866 --> 00:40:52,656 A:middle
or an encoded JSON object.

906
00:40:52,896 --> 00:40:55,916 A:middle
And I wanted to get a feel
for what that looked like,

907
00:40:55,916 --> 00:41:00,986 A:middle
so I put together a page

908

909
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

910
00:40:55,916 --> 00:41:00,986 A:middle
so I put together a page

911
00:41:00,986 --> 00:41:04,636 A:middle
that showed the same
longboarding video

912
00:41:06,026 --> 00:41:07,966 A:middle
with the metadata
displayed on the side.

913
00:41:08,056 --> 00:41:11,366 A:middle
And so you can see some
of the types of content

914
00:41:11,366 --> 00:41:12,116 A:middle
that would be in here.

915
00:41:12,116 --> 00:41:17,166 A:middle
Now this content was from a
specific use case, so it's going

916
00:41:17,166 --> 00:41:19,686 A:middle
to vary depending on where your
media comes from and what kinds

917
00:41:19,686 --> 00:41:21,486 A:middle
of tools are being used
to put it together.

918
00:41:21,486 --> 00:41:25,306 A:middle
But, in this case, we have a
speed; we have an ordered list

919
00:41:25,306 --> 00:41:27,836 A:middle
of skaters; we've
got a notes field.

920
00:41:27,836 --> 00:41:28,896 A:middle
So I thought it'd be interesting

921
00:41:28,896 --> 00:41:30,836 A:middle
to see what we could
do with that.

922
00:41:30,836 --> 00:41:35,266 A:middle
Now let me just briefly
show you what I did

923
00:41:35,266 --> 00:41:39,526 A:middle
to get this data to display.

924
00:41:42,106 --> 00:41:47,726 A:middle
Okay, so just like before,
we have a video source

925
00:41:48,096 --> 00:41:54,136 A:middle
that in this case is
another .m3u8 encoded video.

926
00:41:54,376 --> 00:41:58,746 A:middle
When the video starts, I've
added an onloadstart handler

927
00:41:58,746 --> 00:42:02,346 A:middle
so that, when the stream starts
playing, we can do something.

928

929
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

930
00:41:58,746 --> 00:42:02,346 A:middle
so that, when the stream starts
playing, we can do something.

931
00:42:02,826 --> 00:42:09,226 A:middle
And what we do is, we need
to register an event listener

932
00:42:09,226 --> 00:42:11,466 A:middle
for the add track event
so that we can know

933
00:42:11,676 --> 00:42:13,416 A:middle
when tracks are being
added to the streams.

934
00:42:13,416 --> 00:42:15,586 A:middle
So the metadata-the
video will start playing

935
00:42:15,586 --> 00:42:19,446 A:middle
and then the metadata will
be recognized by the system,

936
00:42:19,446 --> 00:42:21,226 A:middle
and it'll fire this event.

937
00:42:22,376 --> 00:42:24,116 A:middle
When the track has been added,

938
00:42:25,596 --> 00:42:28,026 A:middle
I want to add another event
listener for 'cuechange'.

939
00:42:28,026 --> 00:42:32,036 A:middle
This is the part where WebKit
will be firing these cue change

940
00:42:32,036 --> 00:42:35,076 A:middle
events as this metadata is
encountered in the playback.

941
00:42:36,426 --> 00:42:40,676 A:middle
Very important is this, where
we set the mode to 'hidden'.

942
00:42:41,236 --> 00:42:46,756 A:middle
Now the tracks in the system
come through in a default state

943
00:42:46,756 --> 00:42:50,236 A:middle
of disabled, which means
that you will not get events.

944
00:42:51,866 --> 00:42:54,006 A:middle
We set it to 'hidden'
because we don't really want

945
00:42:54,006 --> 00:42:56,216 A:middle
to see this content,
and we don't want WebKit

946
00:42:56,216 --> 00:42:59,056 A:middle
to necessarily do anything
with it, but we do want

947
00:42:59,056 --> 00:43:02,216 A:middle
to receive events when
these cues are encountered

948

949
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

950
00:42:59,056 --> 00:43:02,216 A:middle
to receive events when
these cues are encountered

951
00:43:02,216 --> 00:43:03,406 A:middle
so that we can do
something with that.

952
00:43:03,406 --> 00:43:06,086 A:middle
And so, finally,
the meat of this is

953
00:43:06,086 --> 00:43:11,126 A:middle
in the 'cuechange' event
handler where, because I know

954
00:43:11,126 --> 00:43:15,166 A:middle
that this data is JSON, I was
able to just take the data cue,

955
00:43:15,256 --> 00:43:19,416 A:middle
which is a WebKit
data track object

956
00:43:19,416 --> 00:43:22,386 A:middle
that like Jer just
told us about,

957
00:43:22,386 --> 00:43:25,076 A:middle
and retrieve the
data portion of that

958
00:43:25,076 --> 00:43:26,976 A:middle
and parse it as a JSON object.

959
00:43:28,076 --> 00:43:31,046 A:middle
Once I did that, obviously, the
first thing I did was to take

960
00:43:31,046 --> 00:43:37,466 A:middle
that reconstituted JSON object
and immediately re-stringify it.

961
00:43:37,506 --> 00:43:40,206 A:middle
Why? Because I just wanted to
pre-print it for the screen

962
00:43:40,206 --> 00:43:41,916 A:middle
and I didn't want to have to
like write anything to do that.

963
00:43:41,916 --> 00:43:45,016 A:middle
So JSON.stringify will do
that for you and then you end

964
00:43:45,016 --> 00:43:49,166 A:middle
up with something that looks
a little bit like this.

965
00:43:49,676 --> 00:43:52,426 A:middle
And that's great, we're getting
metadata that's firing a few

966
00:43:52,426 --> 00:43:55,336 A:middle
times a second and we have this
information we can do something

967
00:43:55,336 --> 00:43:58,836 A:middle
with, but it's not really
that compelling an example.

968
00:43:58,836 --> 00:43:59,996 A:middle
It wasn't that interesting,
so I thought,

969
00:43:59,996 --> 00:44:01,546 A:middle
"What else could we do this?"

970

971
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

972
00:43:59,996 --> 00:44:01,546 A:middle
"What else could we do this?"

973
00:44:01,546 --> 00:44:02,666 A:middle
Well, we have a speed.

974
00:44:02,906 --> 00:44:07,816 A:middle
What if we modified it so
that I could show a HUD

975
00:44:07,906 --> 00:44:09,096 A:middle
with a speed indicator on it?

976
00:44:09,096 --> 00:44:10,536 A:middle
That would be kind of
cool, we could kind

977
00:44:10,536 --> 00:44:15,176 A:middle
of see how fast people were
going, so to do that we need

978
00:44:15,176 --> 00:44:16,366 A:middle
to make a few changes.

979
00:44:16,816 --> 00:44:18,666 A:middle
First, I'm going to
go ahead and get rid

980
00:44:18,666 --> 00:44:21,486 A:middle
of this brief little style
sheet I put in here just to kind

981
00:44:21,486 --> 00:44:23,986 A:middle
of get things on the
screen, and replace it

982
00:44:23,986 --> 00:44:27,536 A:middle
with a more full-featured
style sheet.

983
00:44:28,646 --> 00:44:31,786 A:middle
And I'm going to modify
the 'cuechange' event.

984
00:44:32,096 --> 00:44:36,526 A:middle
I don't need to re-stringify the
JSON object now that I have it.

985
00:44:37,606 --> 00:44:40,466 A:middle
All I need to do is grab the
speed out of the JSON payload

986
00:44:40,466 --> 00:44:47,336 A:middle
and stick it in a <div>
that I just named "speed",

987
00:44:47,336 --> 00:44:53,246 A:middle
and then I'm going to
go ahead and add a <div>

988
00:44:53,926 --> 00:44:57,806 A:middle
to hold the HUD for that.

989
00:44:59,876 --> 00:45:05,196 A:middle
We'll call this "AWEsome-er".

990

991
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

992
00:44:59,876 --> 00:45:05,196 A:middle
We'll call this "AWEsome-er".

993
00:45:05,196 --> 00:45:07,646 A:middle
All right, so what
would this look like?

994
00:45:07,646 --> 00:45:11,016 A:middle
So now we have our little
HUD on the top of the screen.

995
00:45:11,076 --> 00:45:13,656 A:middle
And, if I begin video playback,

996
00:45:13,656 --> 00:45:17,716 A:middle
now we have a little
speedometer running.

997
00:45:17,716 --> 00:45:21,886 A:middle
So now we have live overlay
in this video playback.

998
00:45:21,886 --> 00:45:27,866 A:middle
We've got content that's being
written by us and added by us,

999
00:45:27,866 --> 00:45:33,026 A:middle
live on the web page, and
this is kind of an example

1000
00:45:33,026 --> 00:45:35,396 A:middle
of what you can do with
this kind of information.

1001
00:45:35,756 --> 00:45:37,046 A:middle
Well, I thought this
was kind of fun,

1002
00:45:37,046 --> 00:45:38,776 A:middle
but we could probably do more.

1003
00:45:38,866 --> 00:45:41,856 A:middle
There was other content
there; there was a notes field

1004
00:45:41,856 --> 00:45:44,456 A:middle
that had information
that called out things

1005
00:45:44,456 --> 00:45:48,876 A:middle
that they might be doing on
screen; and we had information

1006
00:45:48,876 --> 00:45:50,656 A:middle
about the ordered
list of the skaters.

1007
00:45:50,656 --> 00:45:55,836 A:middle
So I thought, "Well, why
don't we make a leaderboard

1008
00:45:55,836 --> 00:45:58,466 A:middle
that showed kind of who is in
what position and maybe call

1009
00:45:58,466 --> 00:46:00,676 A:middle
out any tracks or other
information like that."

1010

1011
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1012
00:45:58,466 --> 00:46:00,676 A:middle
out any tracks or other
information like that."

1013
00:46:00,676 --> 00:46:03,416 A:middle
So what we need to
do is, in addition,

1014
00:46:03,416 --> 00:46:04,716 A:middle
in my 'cuechange' event handler,

1015
00:46:04,716 --> 00:46:06,316 A:middle
in addition to the
speed indicator,

1016
00:46:07,456 --> 00:46:11,026 A:middle
I want to have a method that
will show the skaters in order

1017
00:46:11,026 --> 00:46:13,806 A:middle
and I want to have a method
that will display the tricks

1018
00:46:13,806 --> 00:46:14,846 A:middle
that are being done on screen.

1019
00:46:15,086 --> 00:46:18,766 A:middle
I'm not going to
go into much detail

1020
00:46:19,066 --> 00:46:24,846 A:middle
about how this works except to
say that, to show the skaters

1021
00:46:24,846 --> 00:46:28,206 A:middle
in order, I basically have
a first, second, third,

1022
00:46:28,206 --> 00:46:32,226 A:middle
fourth CSS class that I
set up in the style sheet.

1023
00:46:32,446 --> 00:46:34,916 A:middle
And I just iterate through that
list of ordered skaters and,

1024
00:46:34,916 --> 00:46:37,456 A:middle
as the skater names come
in, I styled the <div>

1025
00:46:37,456 --> 00:46:39,756 A:middle
that has the name of that
skater in first, second,

1026
00:46:39,756 --> 00:46:40,796 A:middle
third or fourth position.

1027
00:46:40,956 --> 00:46:46,226 A:middle
Likewise, I'm going to have
some code to show the tricks

1028
00:46:46,226 --> 00:46:49,516 A:middle
as they come in, and here
I'm just going to add a <div>

1029
00:46:49,516 --> 00:46:52,556 A:middle
to the page that is styled
with the "trick" style.

1030
00:46:53,136 --> 00:47:00,236 A:middle
With a little bit of CSS
animation, we should be done.

1031

1032
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1033
00:46:53,136 --> 00:47:00,236 A:middle
With a little bit of CSS
animation, we should be done.

1034
00:47:01,006 --> 00:47:03,596 A:middle
Then let me go ahead
and add some <div>'s

1035
00:47:03,596 --> 00:47:04,876 A:middle
to hold all the skaters.

1036
00:47:04,876 --> 00:47:07,356 A:middle
I've given the <div>'s
the names of the skaters

1037
00:47:07,356 --> 00:47:10,066 A:middle
and that makes it easy
for setting this all up.

1038
00:47:10,966 --> 00:47:12,336 A:middle
Now let's take a look
at what that looks like.

1039
00:47:13,046 --> 00:47:16,026 A:middle
So now I've got a HUD, I've
got the skaters in the top,

1040
00:47:16,026 --> 00:47:18,156 A:middle
I've freeze framed a few things

1041
00:47:18,156 --> 00:47:20,056 A:middle
and grabbed some
snapshots to show them off.

1042
00:47:20,616 --> 00:47:23,706 A:middle
Let's go ahead and
get it started.

1043
00:47:24,666 --> 00:47:28,346 A:middle
There we go and so now we're
getting live playback on top

1044
00:47:28,346 --> 00:47:29,946 A:middle
of the video with the skaters.

1045
00:47:30,656 --> 00:47:33,656 A:middle
And let me just point out that
these guys look really good,

1046
00:47:33,656 --> 00:47:35,436 A:middle
but imagine the skill it takes

1047
00:47:35,436 --> 00:47:38,636 A:middle
to be skating backwards filming
this, and I think you'll agree

1048
00:47:38,636 --> 00:47:41,536 A:middle
that a lot of the magic
is happening offscreen.

1049
00:47:42,416 --> 00:47:46,966 A:middle
So here, timed metadata
events are firing,

1050
00:47:47,176 --> 00:47:51,236 A:middle
we're seeing speed changes,
we're seeing tricks being called

1051
00:47:51,236 --> 00:47:52,726 A:middle
out as they're moving along,

1052
00:47:52,726 --> 00:47:55,186 A:middle
and this is all happening
live-I'm not baking this

1053
00:47:55,186 --> 00:47:56,066 A:middle
into the video.

1054
00:47:56,066 --> 00:47:58,436 A:middle
I could have done that, but
then we wouldn't be able

1055
00:47:58,436 --> 00:48:00,816 A:middle
to modify this, change
colors and whatever else.

1056

1057
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1058
00:47:58,436 --> 00:48:00,816 A:middle
to modify this, change
colors and whatever else.

1059
00:48:01,546 --> 00:48:03,506 A:middle
And this is the good part here.

1060
00:48:03,506 --> 00:48:08,326 A:middle
This guy, Alan, he saw
something, he just slid away.

1061
00:48:08,326 --> 00:48:11,336 A:middle
Here we are, he's going
to notice something.

1062
00:48:11,336 --> 00:48:12,286 A:middle
Danger is spotted.

1063
00:48:12,286 --> 00:48:13,466 A:middle
He's going to bail out.

1064
00:48:13,766 --> 00:48:17,316 A:middle
Poor Fred, ah, he hit the
pothole, had to get off.

1065
00:48:17,316 --> 00:48:18,626 A:middle
He's now out of the race.

1066
00:48:18,626 --> 00:48:20,806 A:middle
He's got an X and he falls away.

1067
00:48:21,426 --> 00:48:23,966 A:middle
And our last skater ends,

1068
00:48:23,966 --> 00:48:25,686 A:middle
and we get the positions
of the skaters.

1069
00:48:27,006 --> 00:48:30,446 A:middle
And so that's just a brief
example of what you can do

1070
00:48:30,446 --> 00:48:35,316 A:middle
with these kinds of metadata
events and a little bit of CSS

1071
00:48:35,316 --> 00:48:37,966 A:middle
and JavaScript on top
of the live video.

1072
00:48:38,316 --> 00:48:41,736 A:middle
I hope you guys understand
why we think this is

1073
00:48:41,736 --> 00:48:45,536 A:middle
such an exciting technology,
and I can't wait to see what all

1074
00:48:45,536 --> 00:48:47,016 A:middle
of you will do with
this in the future.

1075
00:48:47,406 --> 00:48:49,166 A:middle
Thank you very much
and, back to you, Jer.

1076
00:48:49,716 --> 00:48:50,166 A:middle
>> Thanks, Brent.

1077
00:48:50,166 --> 00:48:53,136 A:middle
That was some amazing
backwards cinematography there.

1078
00:48:53,756 --> 00:48:55,536 A:middle
So let's sum up what you
guys have heard today.

1079
00:48:56,206 --> 00:49:03,316 A:middle
Video in Safari on iOS and OS
X are now closer in behavior

1080

1081
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1082
00:48:56,206 --> 00:49:03,316 A:middle
Video in Safari on iOS and OS
X are now closer in behavior

1083
00:49:03,516 --> 00:49:06,286 A:middle
by supporting the
preload attribute on iOS

1084
00:49:06,286 --> 00:49:07,996 A:middle
and allowing the <video> element

1085
00:49:07,996 --> 00:49:10,216 A:middle
to fully participate
in CSS layering.

1086
00:49:10,866 --> 00:49:12,536 A:middle
You've also seen how to use HLS

1087
00:49:12,536 --> 00:49:14,826 A:middle
to add adaptive streaming
support to your pages,

1088
00:49:15,716 --> 00:49:16,836 A:middle
and you've learned how

1089
00:49:16,836 --> 00:49:19,266 A:middle
to improve your user's
power efficiency

1090
00:49:19,476 --> 00:49:21,306 A:middle
by playing back video
in your pages.

1091
00:49:21,846 --> 00:49:24,126 A:middle
And you've also seen how
to use timed metadata

1092
00:49:24,126 --> 00:49:27,006 A:middle
to coordinate events in your
page with your media's timeline.

1093
00:49:28,966 --> 00:49:32,226 A:middle
So, for more information, please
contact our Evangelism Team

1094
00:49:32,706 --> 00:49:35,516 A:middle
and see the Safari for
Developers documentation

1095
00:49:35,516 --> 00:49:37,006 A:middle
on developer.apple.com.

1096
00:49:37,226 --> 00:49:39,676 A:middle
And don't forget about the
Apple Developer Forums.

1097
00:49:40,656 --> 00:49:42,626 A:middle
Other sessions you
might be interested in:

1098
00:49:42,896 --> 00:49:48,496 A:middle
"Harnessing Metadata in
Audiovisual Media" later today,

1099
00:49:49,156 --> 00:49:51,376 A:middle
"Writing Energy Efficient
Code", parts one and two,

1100
00:49:51,376 --> 00:49:53,926 A:middle
will happen on Wednesday,

1101
00:49:54,336 --> 00:49:57,366 A:middle
and stop by the "Designing
Responsive Web Experiences"

1102
00:49:57,466 --> 00:49:59,516 A:middle
for more information on
responsive web design.

1103
00:49:59,576 --> 00:50:00,726 A:middle
And that's it.

1104

1105
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1106
00:49:59,576 --> 00:50:00,726 A:middle
And that's it.

1107
00:50:00,726 --> 00:50:04,226 A:middle
Have a great WWDC.

1108
