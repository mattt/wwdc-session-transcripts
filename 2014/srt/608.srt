X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:11,516 --> 00:00:16,206 A:middle
[ Applause ]

2
00:00:16,706 --> 00:00:17,436 A:middle
>> Hello everyone.

3
00:00:17,656 --> 00:00:18,336 A:middle
My name is Jacques.

4
00:00:18,336 --> 00:00:20,886 A:middle
I have the pleasure of managing
this game technologist team.

5
00:00:21,506 --> 00:00:24,376 A:middle
I'm here today to start you
off for the best practices

6
00:00:24,376 --> 00:00:25,796 A:middle
for building SpriteKit games.

7
00:00:26,286 --> 00:00:29,516 A:middle
So, we're going to start this
off with talking a little

8
00:00:29,806 --> 00:00:30,796 A:middle
about the history of SpriteKit.

9
00:00:30,796 --> 00:00:31,766 A:middle
It's now one year old.

10
00:00:32,076 --> 00:00:36,146 A:middle
You guys have made thousands
of games in SpriteKit.

11
00:00:36,756 --> 00:00:38,916 A:middle
And I'm sure you've seen some
of the successful ones out there

12
00:00:38,916 --> 00:00:40,406 A:middle
like "100 Balls" for example,

13
00:00:40,896 --> 00:00:43,506 A:middle
even achieving the
top one free spot.

14
00:00:44,626 --> 00:00:47,906 A:middle
So, what you guys have done
with it is absolutely amazing.

15
00:00:48,066 --> 00:00:50,116 A:middle
And we hope that some of the new
features we've added are really

16
00:00:50,116 --> 00:00:51,646 A:middle
going to help you
make that next game.

17
00:00:52,696 --> 00:00:56,286 A:middle
So, let's go through what this
talk is going to be about.

18
00:00:57,706 --> 00:00:59,936 A:middle
We're going to discuss
scalability best practices

19

20
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

21
00:01:00,276 --> 00:01:02,946 A:middle
to help you save on cost
as you develop your game

22
00:01:03,126 --> 00:01:04,786 A:middle
and also set yourself
up for the future.

23
00:01:04,946 --> 00:01:08,226 A:middle
We're going to talk about
game structure best practices.

24
00:01:08,676 --> 00:01:10,676 A:middle
And then, Nick is
going to talk to you

25
00:01:10,676 --> 00:01:12,126 A:middle
about performance
best practices.

26
00:01:12,916 --> 00:01:15,996 A:middle
So, let me dive straight in
to scalability best practices.

27
00:01:17,216 --> 00:01:20,446 A:middle
So, what I'm talking about
here is setting yourself up so

28
00:01:20,446 --> 00:01:23,056 A:middle
that you can add
content to your game

29
00:01:23,056 --> 00:01:26,206 A:middle
with the smallest possible
cost so you can collaborate

30
00:01:26,756 --> 00:01:30,496 A:middle
with the rest of your team
and also perhaps work better

31
00:01:31,326 --> 00:01:33,636 A:middle
for the future, learning
better techniques.

32
00:01:34,156 --> 00:01:36,096 A:middle
So, one of the problems
that you can see

33
00:01:36,096 --> 00:01:39,956 A:middle
as a beginning game developer,
and I used to be one of those,

34
00:01:40,646 --> 00:01:42,366 A:middle
is you get really,
really excited.

35
00:01:42,796 --> 00:01:44,836 A:middle
And so, you're starting on
this idea that you have.

36
00:01:45,256 --> 00:01:46,806 A:middle
And I mean the idea is right.

37
00:01:46,806 --> 00:01:48,996 A:middle
You want to get your game
going as fast as possible.

38
00:01:49,296 --> 00:01:51,156 A:middle
So, you dive in your hardcode.

39
00:01:51,896 --> 00:01:53,266 A:middle
Everything is done in one scene.

40
00:01:54,126 --> 00:01:57,206 A:middle
All the references are
done in one place in code.

41
00:01:57,206 --> 00:02:00,936 A:middle
You hardcode level 1.

42

43
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

44
00:01:57,206 --> 00:02:00,936 A:middle
You hardcode level 1.

45
00:02:01,796 --> 00:02:04,306 A:middle
Level 2 was a bit more
work to make it different.

46
00:02:05,076 --> 00:02:07,826 A:middle
Level 3 looks the
same because face it,

47
00:02:07,826 --> 00:02:08,966 A:middle
you just did copy and paste.

48
00:02:08,966 --> 00:02:12,076 A:middle
And-- well, you're
probably stuck on level 4.

49
00:02:12,576 --> 00:02:15,096 A:middle
You're thinking different--
it's going to take time.

50
00:02:15,096 --> 00:02:18,056 A:middle
We're probably going to
do copy and paste again.

51
00:02:18,426 --> 00:02:23,626 A:middle
The second problem is you tend
to get tempted to write data

52
00:02:23,796 --> 00:02:26,976 A:middle
as code, and here is
just the example of some

53
00:02:27,046 --> 00:02:28,936 A:middle
of you could get stuck
doing even in SpriteKit.

54
00:02:28,936 --> 00:02:30,496 A:middle
Obviously, SpriteKit
is excellent.

55
00:02:30,496 --> 00:02:31,546 A:middle
You probably won't
get stuck with this,

56
00:02:31,546 --> 00:02:33,696 A:middle
but you might get stuck
with this in other APIs.

57
00:02:34,656 --> 00:02:36,666 A:middle
You're encoding things
like the position

58
00:02:37,106 --> 00:02:39,616 A:middle
of your nodes inside code.

59
00:02:40,186 --> 00:02:41,706 A:middle
You're encoding rotations.

60
00:02:42,286 --> 00:02:44,246 A:middle
You're probably even
encoding the number

61
00:02:44,246 --> 00:02:45,826 A:middle
of objects you have in code.

62
00:02:46,466 --> 00:02:47,976 A:middle
You may be encoding properties

63
00:02:47,976 --> 00:02:50,676 A:middle
like how many hit points you
get, what types you're going

64
00:02:50,676 --> 00:02:53,336 A:middle
to start, the colors in code.

65
00:02:53,456 --> 00:02:57,406 A:middle
And what you end up with is

66
00:02:57,406 --> 00:03:02,446 A:middle
that you made changing art
assets meaning changing code,

67

68
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

69
00:02:57,406 --> 00:03:02,446 A:middle
that you made changing art
assets meaning changing code,

70
00:03:02,446 --> 00:03:02,626 A:middle
right?

71
00:03:03,206 --> 00:03:05,076 A:middle
So, now the artist and
the coder both have

72
00:03:05,076 --> 00:03:06,156 A:middle
to make some changes
that take time.

73
00:03:07,116 --> 00:03:10,496 A:middle
The only visual feedback you get
is your Build and Run, right?

74
00:03:10,496 --> 00:03:12,256 A:middle
Iteration time has
been worsened.

75
00:03:12,916 --> 00:03:14,916 A:middle
And you're forcing your
designers to be programmers

76
00:03:14,916 --> 00:03:18,116 A:middle
because they need to edit code
to change the game design.

77
00:03:19,946 --> 00:03:21,346 A:middle
On the second level here,

78
00:03:21,956 --> 00:03:23,746 A:middle
you're also duplicating
structural code.

79
00:03:24,836 --> 00:03:27,786 A:middle
And code as data is not
very efficient, right?

80
00:03:27,846 --> 00:03:30,946 A:middle
There are better ways of
describing data, namely data.

81
00:03:31,056 --> 00:03:34,306 A:middle
And also, it's hard to
change collaboratively

82
00:03:34,306 --> 00:03:37,886 A:middle
because you're probably doing
these edits in the same M

83
00:03:37,886 --> 00:03:40,306 A:middle
or MM file for all the changes.

84
00:03:40,306 --> 00:03:42,956 A:middle
So, your artist has
changed another asset.

85
00:03:43,456 --> 00:03:44,656 A:middle
Well, that's an M file change.

86
00:03:45,176 --> 00:03:47,216 A:middle
So, in your virtual control
system it looks exactly the same

87
00:03:47,216 --> 00:03:49,436 A:middle
as the game design you're
changing a parameter.

88
00:03:50,896 --> 00:03:53,466 A:middle
So, the solution.

89
00:03:54,126 --> 00:03:56,416 A:middle
Well, you got a separate
game content from game logic.

90
00:03:56,866 --> 00:03:57,946 A:middle
That's the one we
touched on earlier.

91
00:03:58,866 --> 00:04:02,066 A:middle
You want to separate scene
structure from assets.

92

93
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

94
00:03:58,866 --> 00:04:02,066 A:middle
You want to separate scene
structure from assets.

95
00:04:02,546 --> 00:04:04,686 A:middle
So, structure we're
seeing might be different

96
00:04:04,686 --> 00:04:06,006 A:middle
from the actual artwork
delivered.

97
00:04:06,766 --> 00:04:08,746 A:middle
And you want to separate
data from code.

98
00:04:09,666 --> 00:04:12,256 A:middle
We also want to make
sure you're visualizing

99
00:04:12,256 --> 00:04:13,116 A:middle
as early as possible.

100
00:04:13,586 --> 00:04:15,676 A:middle
Build and Run is not the
best system in the world

101
00:04:15,676 --> 00:04:18,156 A:middle
to visualize what is done.

102
00:04:18,156 --> 00:04:24,036 A:middle
So, implementing solution
consists of putting a game logic

103
00:04:24,036 --> 00:04:25,986 A:middle
in MyScene.m. I'm
referencing that here

104
00:04:25,986 --> 00:04:27,576 A:middle
because that's what you
get in the template.

105
00:04:28,536 --> 00:04:31,256 A:middle
You put your game structure
inside the SceneKit serialized

106
00:04:31,256 --> 00:04:33,016 A:middle
file, this MyScene.sks.

107
00:04:33,016 --> 00:04:36,896 A:middle
And you put your scene
assets in separate SKS files

108
00:04:36,896 --> 00:04:37,806 A:middle
that you're referencing.

109
00:04:38,656 --> 00:04:40,086 A:middle
And if you can do sidecar data,

110
00:04:40,086 --> 00:04:44,196 A:middle
we have a fantastic format
called .plist which is XML

111
00:04:44,336 --> 00:04:46,266 A:middle
when you edit, when you deploy.

112
00:04:46,866 --> 00:04:49,936 A:middle
So, the tools that we
provided for you to do this

113
00:04:50,276 --> 00:04:53,116 A:middle
in Xcode 6 is we also have
a SpriteKit template both

114
00:04:53,116 --> 00:04:54,556 A:middle
for Objective-C and Swift.

115
00:04:55,356 --> 00:04:57,426 A:middle
The editor, as Norman
showed earlier,

116
00:04:58,046 --> 00:05:00,356 A:middle
let's you do visual
feedback, visual editing,

117

118
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

119
00:04:58,046 --> 00:05:00,356 A:middle
let's you do visual
feedback, visual editing,

120
00:05:00,866 --> 00:05:01,806 A:middle
feedback is immediate.

121
00:05:02,786 --> 00:05:06,526 A:middle
And you can also
simulate the physics live.

122
00:05:08,036 --> 00:05:10,156 A:middle
We also have, and have
had for the long time,

123
00:05:10,636 --> 00:05:13,696 A:middle
the ability for you to edit
.plist files inside Xcode.

124
00:05:14,216 --> 00:05:16,416 A:middle
And it's as simple as
creating a .plist file,

125
00:05:16,416 --> 00:05:19,446 A:middle
adding and raise dictionaries to
them, and then reading them back

126
00:05:19,446 --> 00:05:20,556 A:middle
into your code; it's
super simple.

127
00:05:21,056 --> 00:05:26,576 A:middle
So, I'm going to show you a
demo of the SpriteKit template

128
00:05:26,676 --> 00:05:27,696 A:middle
and how we see this get set

129
00:05:27,696 --> 00:05:29,966 A:middle
up both the wrong way
and the right way.

130
00:05:32,286 --> 00:05:45,236 A:middle
OK. So, let me show you
here my very rushed example

131
00:05:45,236 --> 00:05:50,796 A:middle
on making a sort of topple
over the towers game.

132
00:05:52,396 --> 00:05:55,186 A:middle
So, I made a little
hammer throwing game here.

133
00:05:55,436 --> 00:05:59,026 A:middle
I just throw them at
totem and I get a score.

134
00:05:59,446 --> 00:06:01,796 A:middle
I was really excited
about making this,

135

136
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

137
00:05:59,446 --> 00:06:01,796 A:middle
I was really excited
about making this,

138
00:06:01,906 --> 00:06:06,136 A:middle
so I just threw everything
inside the game scene, OK.

139
00:06:06,136 --> 00:06:10,326 A:middle
I'm sure now that you've
never seen this before.

140
00:06:10,676 --> 00:06:13,886 A:middle
You see here I'm referencing
art right inside the scene file.

141
00:06:14,636 --> 00:06:17,206 A:middle
I'm setting positions of things
and changing the properties.

142
00:06:17,806 --> 00:06:19,086 A:middle
So, I got this going
really quickly.

143
00:06:19,086 --> 00:06:20,976 A:middle
And it must seem it's
totally wrong for you to do.

144
00:06:21,646 --> 00:06:24,776 A:middle
Whatever you do to make money
and get success is great.

145
00:06:24,776 --> 00:06:26,656 A:middle
I'm just going to
provide an alternative.

146
00:06:27,826 --> 00:06:31,556 A:middle
So, this run did the
job, that's great.

147
00:06:33,346 --> 00:06:37,556 A:middle
However, you could structure
this slightly differently.

148
00:06:38,386 --> 00:06:41,956 A:middle
So, here I have a scene
which-first of all,

149
00:06:42,026 --> 00:06:43,756 A:middle
let's make sure this
operates in a similar fashion.

150
00:06:44,806 --> 00:06:49,106 A:middle
OK. Yup. That's the same stuff.

151
00:06:49,106 --> 00:06:50,356 A:middle
It seems to be the same game.

152
00:06:51,506 --> 00:06:54,566 A:middle
What I have done here is I've
used the SpriteKit template

153
00:06:55,206 --> 00:07:01,486 A:middle
which provides you the start of
separating the code and assets.

154

155
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

156
00:06:55,206 --> 00:07:01,486 A:middle
which provides you the start of
separating the code and assets.

157
00:07:02,086 --> 00:07:05,546 A:middle
And the key here you're going to
see is right on this line here:

158
00:07:06,936 --> 00:07:09,116 A:middle
GameScene unarchiveFromFile.

159
00:07:09,716 --> 00:07:10,696 A:middle
That seems kind of cool.

160
00:07:11,396 --> 00:07:12,276 A:middle
What's actually happening?

161
00:07:12,276 --> 00:07:15,146 A:middle
Well, the template here
has set you up with some

162
00:07:15,146 --> 00:07:16,586 A:middle
of these amazing
APIs that we have,

163
00:07:16,646 --> 00:07:18,576 A:middle
that we're already
using from Foundation.

164
00:07:18,956 --> 00:07:20,776 A:middle
It's called NSKeyedUnarchiver.

165
00:07:20,976 --> 00:07:25,586 A:middle
This is how you load and
save all data that's related

166
00:07:25,586 --> 00:07:26,776 A:middle
to SpriteKit.

167
00:07:28,506 --> 00:07:31,116 A:middle
So, there's a super
special piece of magic

168
00:07:31,166 --> 00:07:31,916 A:middle
that we're doing in here.

169
00:07:32,686 --> 00:07:34,096 A:middle
We're telling the
KeyedUnarchiver

170
00:07:34,636 --> 00:07:38,716 A:middle
to replace any instance of
SKScene with our own class.

171
00:07:39,336 --> 00:07:41,846 A:middle
So, this means that any
SKScene that you've made,

172
00:07:42,446 --> 00:07:44,426 A:middle
you can make it automatically
load one

173
00:07:44,426 --> 00:07:45,516 A:middle
of your own scene files.

174
00:07:46,056 --> 00:07:48,156 A:middle
So, now we've typed logic
together with assets,

175
00:07:48,476 --> 00:07:50,156 A:middle
even though they're
designed separately.

176
00:07:50,896 --> 00:07:54,336 A:middle
OK. Now let's go to the
actual game scene here.

177
00:07:55,876 --> 00:08:01,166 A:middle
Notice the setupLevel1 is
markedly smaller than it was

178

179
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

180
00:07:55,876 --> 00:08:01,166 A:middle
Notice the setupLevel1 is
markedly smaller than it was

181
00:08:01,166 --> 00:08:02,066 A:middle
in the previous example.

182
00:08:03,846 --> 00:08:05,656 A:middle
So, what's happening here?

183
00:08:05,756 --> 00:08:09,096 A:middle
Well, we're using SpriteKit's
powerful search features

184
00:08:09,456 --> 00:08:11,496 A:middle
to enumerate through
the content of the scene

185
00:08:12,206 --> 00:08:15,976 A:middle
and by bringing upon no
names and conventions

186
00:08:15,976 --> 00:08:18,516 A:middle
with your artists, we
could make it really easy

187
00:08:19,256 --> 00:08:22,226 A:middle
to pull the logical elements
out of the scene by name

188
00:08:22,226 --> 00:08:23,756 A:middle
and hooking them up to code.

189
00:08:24,276 --> 00:08:28,136 A:middle
And here we said there's a
totemNode and we're going

190
00:08:28,136 --> 00:08:30,686 A:middle
to attach children
based on level 1.

191
00:08:30,786 --> 00:08:33,826 A:middle
So, let's go through
the scene here.

192
00:08:33,826 --> 00:08:37,676 A:middle
This is the basic structure
of this first scene.

193
00:08:37,966 --> 00:08:38,806 A:middle
That's a base.

194
00:08:38,806 --> 00:08:42,236 A:middle
It's got a background and it's
got a little empty node here

195
00:08:42,716 --> 00:08:43,676 A:middle
which I named totem.

196
00:08:44,966 --> 00:08:47,326 A:middle
So, in code I'm going
to load up the scene.

197
00:08:47,636 --> 00:08:50,876 A:middle
I'm going to fetch
the node called totem.

198
00:08:52,536 --> 00:08:56,556 A:middle
At that node I'm going
to attach level 1.

199
00:08:56,556 --> 00:09:01,056 A:middle
And level 1 looks like that.

200

201
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

202
00:08:56,556 --> 00:09:01,056 A:middle
And level 1 looks like that.

203
00:09:01,056 --> 00:09:03,356 A:middle
So, I've separated out the
structure of the theme,

204
00:09:03,826 --> 00:09:06,586 A:middle
which is my game, with
the contents of level 1,

205
00:09:07,056 --> 00:09:08,126 A:middle
which is just a stack.

206
00:09:09,776 --> 00:09:15,226 A:middle
And continuing this theme
when I do my game logic,

207
00:09:16,196 --> 00:09:19,916 A:middle
I keep using names in
order to evaluate whether

208
00:09:19,916 --> 00:09:21,246 A:middle
or not an object says totem.

209
00:09:21,936 --> 00:09:24,316 A:middle
This means like the artist
can add incidental objects

210
00:09:24,316 --> 00:09:25,506 A:middle
but they're not named totem.

211
00:09:25,506 --> 00:09:29,086 A:middle
Adding them to the scene don't
affect the scoring of your game.

212
00:09:29,526 --> 00:09:34,316 A:middle
So, just as a simple example of
what you should do to separate

213
00:09:34,316 --> 00:09:36,486 A:middle
out your game logic
from the game lessons.

214
00:09:37,256 --> 00:09:38,086 A:middle
OK, thanks.

215
00:09:39,516 --> 00:09:46,276 A:middle
[ Pause ]

216
00:09:46,776 --> 00:09:48,346 A:middle
OK. Let's recap this.

217
00:09:48,416 --> 00:09:50,356 A:middle
So, you saw the SpriteKit
template.

218
00:09:50,356 --> 00:09:54,666 A:middle
What we're doing is we're
taking scene file which,

219
00:09:54,666 --> 00:09:56,246 A:middle
in this case is MyScene.sks,

220
00:09:57,306 --> 00:10:00,376 A:middle
and your basic code file
is MyScene.h and MyScene.m.

221

222
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

223
00:09:57,306 --> 00:10:00,376 A:middle
and your basic code file
is MyScene.h and MyScene.m.

224
00:10:01,096 --> 00:10:03,756 A:middle
And we're separating out
the logic from the assets.

225
00:10:05,086 --> 00:10:07,096 A:middle
The key here is to
use NSKeyedUnarchiver,

226
00:10:07,456 --> 00:10:09,276 A:middle
which some of you might not
be familiar with already.

227
00:10:09,496 --> 00:10:14,286 A:middle
You insert the class
replacement,

228
00:10:14,876 --> 00:10:18,316 A:middle
in this case arch
setClass:MyScene.class

229
00:10:18,366 --> 00:10:20,556 A:middle
forClassName:@"SKScene".

230
00:10:21,126 --> 00:10:22,886 A:middle
This replaces any reference

231
00:10:22,886 --> 00:10:25,486 A:middle
to SKScene inside the scene
file with your own class.

232
00:10:25,556 --> 00:10:29,696 A:middle
And it's as simple as that.

233
00:10:29,806 --> 00:10:32,956 A:middle
So, let's go on to Game
Structure Best Practices,

234
00:10:33,326 --> 00:10:34,756 A:middle
like you've seen in the example.

235
00:10:36,296 --> 00:10:38,926 A:middle
Motivation here is of
course get your game running

236
00:10:38,926 --> 00:10:39,826 A:middle
on the first day.

237
00:10:40,806 --> 00:10:42,906 A:middle
How are you going to know
that your game is fun

238
00:10:43,216 --> 00:10:44,906 A:middle
if you're not playing it?

239
00:10:45,016 --> 00:10:46,336 A:middle
So, get it up and
going on the first day.

240
00:10:47,606 --> 00:10:50,136 A:middle
You won't do this without
compromising scalability, OK.

241
00:10:50,706 --> 00:10:53,586 A:middle
So, don't rushing into
it, and set yourself

242
00:10:53,586 --> 00:10:55,256 A:middle
up to iterate collaboratively.

243
00:10:55,836 --> 00:10:58,246 A:middle
Designers want to be designers,
artists want to be artists,

244
00:10:58,896 --> 00:11:03,846 A:middle
coders want to be
all of the above.

245

246
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

247
00:10:58,896 --> 00:11:03,846 A:middle
coders want to be
all of the above.

248
00:11:04,886 --> 00:11:08,356 A:middle
So, make your generic level,
as I showed in the example.

249
00:11:09,036 --> 00:11:11,526 A:middle
To make it simple, get
your designer to commit

250
00:11:11,526 --> 00:11:13,766 A:middle
to where the general gameplay
is going to be happen,

251
00:11:14,376 --> 00:11:16,146 A:middle
what object is interacting
with what.

252
00:11:18,426 --> 00:11:19,966 A:middle
Add placeholder content.

253
00:11:20,456 --> 00:11:21,856 A:middle
I'll go through that shortly.

254
00:11:21,856 --> 00:11:23,736 A:middle
Hook up with interactions.

255
00:11:23,786 --> 00:11:26,776 A:middle
So, this is you as a coder
and the designer working

256
00:11:26,776 --> 00:11:28,746 A:middle
out what interactions
would need to be there.

257
00:11:29,366 --> 00:11:30,406 A:middle
Get the game logic working.

258
00:11:30,636 --> 00:11:33,316 A:middle
And then, of course the
easiest part of all,

259
00:11:33,956 --> 00:11:35,626 A:middle
which is finish the game.

260
00:11:37,176 --> 00:11:37,616 A:middle
All right.

261
00:11:37,616 --> 00:11:39,316 A:middle
So, make your generic level.

262
00:11:40,496 --> 00:11:42,246 A:middle
This should be logical
layout only.

263
00:11:42,406 --> 00:11:44,116 A:middle
So, if you don't have
any artwork right now,

264
00:11:44,116 --> 00:11:45,966 A:middle
don't worry about it.

265
00:11:46,626 --> 00:11:49,776 A:middle
Place markers, where you
think content is meant to go.

266
00:11:50,586 --> 00:11:53,126 A:middle
So, if you have action going
from left to right, well,

267
00:11:53,126 --> 00:11:54,446 A:middle
structure your scene that way.

268
00:11:55,696 --> 00:11:57,516 A:middle
Place markers where you think
the hero is going to begin,

269
00:11:57,926 --> 00:11:59,346 A:middle
name that marker "hero".

270
00:11:59,686 --> 00:12:01,806 A:middle
Place markers where you think
enemies are going to start

271

272
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

273
00:11:59,686 --> 00:12:01,806 A:middle
Place markers where you think
enemies are going to start

274
00:12:01,806 --> 00:12:03,816 A:middle
out a new scene, probably
name them "enemy".

275
00:12:03,816 --> 00:12:08,016 A:middle
And any logical layers you
have, such as platforms

276
00:12:08,416 --> 00:12:09,426 A:middle
or maybe the background.

277
00:12:09,426 --> 00:12:11,116 A:middle
You want to make sure you're not
putting anything accidentally

278
00:12:11,116 --> 00:12:11,686 A:middle
on the background.

279
00:12:13,506 --> 00:12:16,716 A:middle
Then you move on, you
add placeholder content.

280
00:12:17,016 --> 00:12:18,946 A:middle
This is often what
we called red boxing.

281
00:12:19,686 --> 00:12:24,916 A:middle
So, pick a color that
you like for your heroes.

282
00:12:24,916 --> 00:12:26,126 A:middle
Blue perhaps is perfect.

283
00:12:27,076 --> 00:12:29,256 A:middle
Add them as colored SpriteNodes.

284
00:12:29,656 --> 00:12:32,166 A:middle
Don't bother with the texture
right now, just put them

285
00:12:32,166 --> 00:12:33,846 A:middle
in the right spot, right size.

286
00:12:34,016 --> 00:12:37,416 A:middle
This is a key to your artist
that you're saying I want this

287
00:12:37,446 --> 00:12:39,396 A:middle
to be roughly the
size over here, right,

288
00:12:39,966 --> 00:12:41,866 A:middle
because your artist can
only make crazy assets.

289
00:12:43,356 --> 00:12:46,576 A:middle
OK. Now, make the parent-child
relationships here too.

290
00:12:46,896 --> 00:12:49,736 A:middle
So, particle emission locations,
if you're making a train game,

291
00:12:50,036 --> 00:12:52,876 A:middle
it is highly likely that
smoke is going to come

292
00:12:52,876 --> 00:12:55,536 A:middle
out of a smoke stack and that
smoke should probably move

293
00:12:55,536 --> 00:12:56,116 A:middle
with the train.

294
00:12:56,706 --> 00:13:00,746 A:middle
And so, I've set that up as
a parent-child relationship.

295

296
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

297
00:12:56,706 --> 00:13:00,746 A:middle
And so, I've set that up as
a parent-child relationship.

298
00:13:01,136 --> 00:13:04,036 A:middle
Next stop, hook up
the interactions.

299
00:13:04,096 --> 00:13:06,136 A:middle
So, this is the pass
where you're going

300
00:13:06,136 --> 00:13:07,276 A:middle
through the physics interactions

301
00:13:07,276 --> 00:13:08,236 A:middle
and making sure that
they're right.

302
00:13:08,896 --> 00:13:11,736 A:middle
So, for example if our object
is meant to topple over

303
00:13:11,736 --> 00:13:14,956 A:middle
or our object is meant to stay
absolutely put when they're hit

304
00:13:15,006 --> 00:13:16,196 A:middle
by the hammer for example.

305
00:13:17,566 --> 00:13:20,026 A:middle
Sort out your collision
masks, which objects are meant

306
00:13:20,026 --> 00:13:22,336 A:middle
to interact with
which and make sure

307
00:13:22,336 --> 00:13:24,156 A:middle
that you simulate this
right within Xcode.

308
00:13:24,156 --> 00:13:27,136 A:middle
Get it right from the start.

309
00:13:27,566 --> 00:13:28,786 A:middle
Then you get the
game logic working.

310
00:13:29,396 --> 00:13:31,146 A:middle
And this is where you
initialize your scene logic

311
00:13:31,146 --> 00:13:32,076 A:middle
and game logic together.

312
00:13:32,076 --> 00:13:34,366 A:middle
So, you're using those names
that you set up in the scene

313
00:13:34,366 --> 00:13:36,826 A:middle
and you're hooking them
up which is search code

314
00:13:36,826 --> 00:13:39,166 A:middle
within your actual game code.

315
00:13:40,226 --> 00:13:44,096 A:middle
And we had a placeholder
inside the sample before,

316
00:13:44,126 --> 00:13:46,686 A:middle
which was a totem where
we loaded a level scene

317
00:13:46,686 --> 00:13:49,336 A:middle
and then replaced it wherever
the totem empty locator was.

318
00:13:50,016 --> 00:13:53,526 A:middle
This is where you
want to do that.

319
00:13:53,866 --> 00:13:57,706 A:middle
So, here's a sample of me
having the scene structure found

320
00:13:57,876 --> 00:14:00,836 A:middle
on one side and the actual
scene code on the right

321

322
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

323
00:13:57,876 --> 00:14:00,836 A:middle
on one side and the actual
scene code on the right

324
00:14:00,836 --> 00:14:04,096 A:middle
and I'm just making sure that
my code matches what I think the

325
00:14:04,156 --> 00:14:06,946 A:middle
scene structure is.

326
00:14:07,316 --> 00:14:11,036 A:middle
So, of course just hooking
it up is probably not going

327
00:14:11,036 --> 00:14:12,206 A:middle
to make your game great and fun.

328
00:14:12,246 --> 00:14:15,416 A:middle
You're going to make sure that
it's doing what it's meant

329
00:14:15,416 --> 00:14:18,106 A:middle
to be doing and that you've
got unit stats loaded,

330
00:14:18,496 --> 00:14:19,956 A:middle
scores and similar things.

331
00:14:20,276 --> 00:14:23,246 A:middle
There are two logical places
within your scene to do this.

332
00:14:24,466 --> 00:14:25,876 A:middle
There's one which
is on first load

333
00:14:26,256 --> 00:14:27,736 A:middle
which is called initWithCoder.

334
00:14:27,826 --> 00:14:30,286 A:middle
And this is going to
get called automatically

335
00:14:30,356 --> 00:14:31,626 A:middle
by the KeyedUnarchiver.

336
00:14:32,716 --> 00:14:35,166 A:middle
The second is didMoveToView
and this is

337
00:14:35,166 --> 00:14:38,516 A:middle
when you're presenting it
as a scene on your SKView.

338
00:14:40,546 --> 00:14:43,376 A:middle
So, let's jump into
the details with that.

339
00:14:43,946 --> 00:14:45,366 A:middle
So, on first load, as I said,

340
00:14:45,366 --> 00:14:47,456 A:middle
automatically called
by NSKeyedUnarchiver.

341
00:14:47,786 --> 00:14:49,546 A:middle
This is where you're
reloading sidecar data.

342
00:14:50,056 --> 00:14:54,026 A:middle
Sound, for example,
AI, or any unit stats

343
00:14:54,026 --> 00:14:54,846 A:middle
that aren't going to change.

344
00:14:55,956 --> 00:14:58,756 A:middle
That's called initWithCoder,
make sure you go super init

345
00:14:58,756 --> 00:15:01,836 A:middle
or initWithCoder depending upon
what your super class needs.

346

347
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

348
00:14:58,756 --> 00:15:01,836 A:middle
or initWithCoder depending upon
what your super class needs.

349
00:15:02,846 --> 00:15:04,176 A:middle
And load up the enemy
stats here.

350
00:15:04,326 --> 00:15:07,216 A:middle
I just loaded NSArray
from a .plist,

351
00:15:07,686 --> 00:15:09,566 A:middle
very simple just a one-liner.

352
00:15:11,226 --> 00:15:14,626 A:middle
Next up, you can move
to your node first shown

353
00:15:14,626 --> 00:15:15,536 A:middle
in this message point.

354
00:15:16,146 --> 00:15:19,266 A:middle
So, this is called an
SKView.presentScene:is called

355
00:15:19,266 --> 00:15:19,886 A:middle
with your scene.

356
00:15:20,236 --> 00:15:22,816 A:middle
And this is a great place to
cache your visual elements.

357
00:15:23,626 --> 00:15:27,516 A:middle
So, SKScene is going to get
loaded by the KeyedUnarchiver.

358
00:15:28,196 --> 00:15:30,616 A:middle
And all the visual elements,
the PNGs that are referenced

359
00:15:30,616 --> 00:15:33,046 A:middle
in there are going to get loaded
well before you get to here.

360
00:15:33,746 --> 00:15:37,386 A:middle
So, you can actually do quite a
bit of work inside didMoveToView

361
00:15:37,986 --> 00:15:40,266 A:middle
without worrying about a lot
of loading costs and latencies.

362
00:15:40,616 --> 00:15:43,346 A:middle
If you have a lot of visual
elements you can interact with,

363
00:15:43,506 --> 00:15:44,296 A:middle
cache them right here.

364
00:15:45,256 --> 00:15:47,086 A:middle
In this case, I'm
finding all the enemies

365
00:15:47,456 --> 00:15:49,996 A:middle
and I'm saving them
away in my enemy array.

366
00:15:50,976 --> 00:15:58,536 A:middle
So, the motivation for
doing this is that you want

367
00:15:58,536 --> 00:16:02,956 A:middle
to have a simple way of taking
your logical scene elements

368

369
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

370
00:15:58,536 --> 00:16:02,956 A:middle
to have a simple way of taking
your logical scene elements

371
00:16:02,956 --> 00:16:04,476 A:middle
and hooking them
up to your code.

372
00:16:04,706 --> 00:16:09,016 A:middle
There are two different methods
for searching, childNodeNamed

373
00:16:09,416 --> 00:16:13,616 A:middle
for finding a single element
and enumerateChildNodesWithName

374
00:16:13,616 --> 00:16:16,576 A:middle
for multiple elements
and that's the results.

375
00:16:17,066 --> 00:16:20,156 A:middle
I really can't stress it enough.

376
00:16:22,146 --> 00:16:25,466 A:middle
You saw in the previous
slide just a quick hint

377
00:16:25,926 --> 00:16:29,016 A:middle
of a search syntax that
might not have been apparent

378
00:16:29,016 --> 00:16:29,706 A:middle
to you at first.

379
00:16:31,046 --> 00:16:35,016 A:middle
We have an Xpath-style
search in your scene which,

380
00:16:35,306 --> 00:16:37,286 A:middle
in this case, was //enemy.

381
00:16:38,126 --> 00:16:41,496 A:middle
What that means is
find all enemies

382
00:16:42,246 --> 00:16:44,336 A:middle
from the root, recursive down.

383
00:16:45,036 --> 00:16:46,696 A:middle
Some examples here: @"hero"

384
00:16:47,236 --> 00:16:49,546 A:middle
which is find the child called
hero, without recursive.

385
00:16:49,856 --> 00:16:55,016 A:middle
//hero would find all the nodes
in hero in recursive order.

386
00:16:56,096 --> 00:16:59,006 A:middle
We can also search by class,
not just name but class.

387
00:16:59,036 --> 00:17:00,896 A:middle
So, we can go //EmitterNode,

388

389
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

390
00:16:59,036 --> 00:17:00,896 A:middle
So, we can go //EmitterNode,

391
00:17:01,256 --> 00:17:03,686 A:middle
we'd find all the emitter
nodes in your scene.

392
00:17:04,685 --> 00:17:08,046 A:middle
And you can also use
blob-style partial matches,

393
00:17:08,685 --> 00:17:11,435 A:middle
such as the wildcard
here where it's anything,

394
00:17:11,435 --> 00:17:14,556 A:middle
any node named starting
with "he".

395
00:17:16,056 --> 00:17:18,506 A:middle
Super powerful, and this is
going to be your best way

396
00:17:18,506 --> 00:17:21,226 A:middle
of lodging up-of linking
up your logical scene

397
00:17:21,516 --> 00:17:24,665 A:middle
with the actual game code.

398
00:17:25,175 --> 00:17:26,806 A:middle
And obviously that's
what we did.

399
00:17:27,256 --> 00:17:28,746 A:middle
In the sample that
you saw before,

400
00:17:29,456 --> 00:17:32,466 A:middle
we can see child node remain
being used extensively

401
00:17:32,466 --> 00:17:33,666 A:middle
to find the actual objects

402
00:17:33,666 --> 00:17:35,626 A:middle
within the scene
inside the game code.

403
00:17:35,626 --> 00:17:38,666 A:middle
This is very fast, so
you can do it often

404
00:17:39,496 --> 00:17:41,556 A:middle
but we do recommend
your cache results

405
00:17:42,126 --> 00:17:43,696 A:middle
if it becomes a performance
problem.

406
00:17:44,206 --> 00:17:45,216 A:middle
All right.

407
00:17:45,216 --> 00:17:46,746 A:middle
Last step, I'm just
going to gloss

408
00:17:46,746 --> 00:17:47,956 A:middle
over this one because it's easy.

409
00:17:48,816 --> 00:17:52,386 A:middle
Finish the game-that's
totally up to you, of course.

410
00:17:52,836 --> 00:17:53,616 A:middle
Add the artwork.

411
00:17:54,366 --> 00:17:57,036 A:middle
You can then replace the
textures on the red boxes,

412
00:17:57,036 --> 00:17:58,696 A:middle
because hopefully your
artist has delivered them

413
00:17:59,006 --> 00:17:59,716 A:middle
at the right size.

414

415
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

416
00:18:00,456 --> 00:18:03,246 A:middle
Add the levels that you
need, which should be easy

417
00:18:03,246 --> 00:18:05,906 A:middle
if you followed all the
points, add any effects.

418
00:18:06,026 --> 00:18:08,326 A:middle
Norman showed you how easy it
is to add shaders to things.

419
00:18:08,326 --> 00:18:11,206 A:middle
You can also use Corelmage
filters on the effect nodes

420
00:18:11,206 --> 00:18:14,306 A:middle
to add that special image
post processing effects.

421
00:18:14,716 --> 00:18:16,556 A:middle
And of course, play
test-iterate.

422
00:18:16,786 --> 00:18:21,376 A:middle
I can't stress this
enough: have fun.

423
00:18:21,966 --> 00:18:23,296 A:middle
This is what games is all about.

424
00:18:23,856 --> 00:18:26,356 A:middle
Make sure you're having fun
when you're making a game.

425
00:18:26,356 --> 00:18:28,786 A:middle
OK. Let me hand you
over to Nick now to talk

426
00:18:28,786 --> 00:18:30,056 A:middle
about performance
best practices.

427
00:18:30,496 --> 00:18:30,926 A:middle
Thank you so much.

428
00:18:31,516 --> 00:18:37,916 A:middle
[ Applause ]

429
00:18:38,416 --> 00:18:40,416 A:middle
>> Thanks, Jacques.

430
00:18:41,106 --> 00:18:44,506 A:middle
Today I want to talk about
my two favorite things, well,

431
00:18:44,756 --> 00:18:45,816 A:middle
two of my favorite things.

432
00:18:46,186 --> 00:18:50,526 A:middle
One, which is improving
performance in order to squeeze

433
00:18:50,526 --> 00:18:52,246 A:middle
down the amount of time
that your game takes

434
00:18:52,246 --> 00:18:56,866 A:middle
to execute 60 times a second
and then increasing the awesome

435
00:18:56,866 --> 00:18:58,996 A:middle
that you can squeeze into
that space that you made

436
00:18:58,996 --> 00:19:00,436 A:middle
by improving your performance.

437

438
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

439
00:18:58,996 --> 00:19:00,436 A:middle
by improving your performance.

440
00:19:02,346 --> 00:19:05,776 A:middle
So, I have a bunch of topics
to go through and just

441
00:19:05,776 --> 00:19:08,166 A:middle
to quickly give you a
preview and then talk

442
00:19:08,166 --> 00:19:11,336 A:middle
about understanding what
is involved in drawing

443
00:19:11,336 --> 00:19:13,126 A:middle
and where their time
is going to go.

444
00:19:13,456 --> 00:19:15,246 A:middle
I'm going to talk about
actions and constraints,

445
00:19:15,686 --> 00:19:16,986 A:middle
how they're the secret window

446
00:19:17,136 --> 00:19:19,576 A:middle
into the underlying
SpriteKit engine.

447
00:19:20,026 --> 00:19:22,686 A:middle
And physics, there's a
cost hierarchy there,

448
00:19:22,686 --> 00:19:23,996 A:middle
it's just very helpful
to understand,

449
00:19:24,586 --> 00:19:26,066 A:middle
similarly for shape nodes.

450
00:19:26,606 --> 00:19:30,456 A:middle
Talk a little bit about effects
and some good to know facts

451
00:19:30,456 --> 00:19:31,896 A:middle
about our lighting systems.

452
00:19:34,216 --> 00:19:36,346 A:middle
So, drawing performance.

453
00:19:39,016 --> 00:19:43,056 A:middle
There's two things that impact
your drawing performance

454
00:19:43,756 --> 00:19:45,116 A:middle
in a big, big way.

455
00:19:45,646 --> 00:19:48,696 A:middle
One is the choice of draw order,

456
00:19:49,066 --> 00:19:51,566 A:middle
how it is that you submit
your sprites to the engine,

457
00:19:52,156 --> 00:19:56,046 A:middle
and two is sharing the
resources that are used

458
00:19:56,046 --> 00:19:57,186 A:middle
to accomplish that drawing.

459
00:19:57,836 --> 00:20:06,696 A:middle
Now, SpriteKit has by default
a sibling order draw rule

460

461
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

462
00:19:57,836 --> 00:20:06,696 A:middle
Now, SpriteKit has by default
a sibling order draw rule

463
00:20:06,696 --> 00:20:08,976 A:middle
which influence the
standard painter's algorithm.

464
00:20:09,786 --> 00:20:11,856 A:middle
There are two rules,
your parent--

465
00:20:11,946 --> 00:20:14,296 A:middle
the parent draws first
then recurses down

466
00:20:14,296 --> 00:20:16,476 A:middle
and draws the children
and then their children

467
00:20:16,476 --> 00:20:17,736 A:middle
and so on as it goes.

468
00:20:18,346 --> 00:20:20,076 A:middle
And children are
rendered in the order

469
00:20:20,076 --> 00:20:21,376 A:middle
that they appear
in the child array.

470
00:20:22,196 --> 00:20:25,836 A:middle
Now, in this diagram here,
obviously the helicopter has got

471
00:20:25,836 --> 00:20:27,536 A:middle
at its very bottom
some missiles,

472
00:20:27,936 --> 00:20:30,266 A:middle
then the body and the rotors.

473
00:20:30,786 --> 00:20:34,206 A:middle
And it's straightforward
to create this in code just

474
00:20:34,206 --> 00:20:35,616 A:middle
by adding the various parts.

475
00:20:36,306 --> 00:20:41,256 A:middle
Now, this is very convenient for
prototyping, but what is it do

476
00:20:41,256 --> 00:20:42,316 A:middle
to drawing performance?

477
00:20:43,426 --> 00:20:47,906 A:middle
So, here's my amazing
game scene and it's going

478
00:20:47,906 --> 00:20:49,786 A:middle
to have a bunch of
helicopters in it.

479
00:20:52,356 --> 00:20:54,826 A:middle
The each piece as we recurse

480
00:20:54,826 --> 00:20:58,036 A:middle
down the draw order
comes down one at a time.

481
00:20:58,266 --> 00:20:59,426 A:middle
It's a little draw call.

482
00:20:59,926 --> 00:21:02,136 A:middle
And that's a lot of
individual draw calls.

483

484
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

485
00:20:59,926 --> 00:21:02,136 A:middle
And that's a lot of
individual draw calls.

486
00:21:02,136 --> 00:21:04,466 A:middle
It's going to take some
time and you get the idea,

487
00:21:04,466 --> 00:21:05,536 A:middle
let's just fill them
all in there.

488
00:21:06,156 --> 00:21:08,936 A:middle
Now, what SpriteKit
gives you in order

489
00:21:08,936 --> 00:21:16,726 A:middle
to avoid this problem is
the magical third dimension.

490
00:21:18,016 --> 00:21:20,476 A:middle
So, let's have a look at
what we can do with that.

491
00:21:21,526 --> 00:21:24,266 A:middle
If we set ignoreSiblingOrder
to YES,

492
00:21:24,796 --> 00:21:29,086 A:middle
we can use depth to
control the order.

493
00:21:29,696 --> 00:21:30,696 A:middle
That's going to be
pretty helpful.

494
00:21:30,786 --> 00:21:32,486 A:middle
So, we've got the
helicopter, we are going

495
00:21:32,486 --> 00:21:34,616 A:middle
to arbitrarily set
it on level 100.

496
00:21:36,006 --> 00:21:37,936 A:middle
Let's stretch out the rotors

497
00:21:37,936 --> 00:21:41,506 A:middle
and pull them towards
the camera at level 1.

498
00:21:42,716 --> 00:21:45,806 A:middle
Now, let's push the
missiles back like that.

499
00:21:46,536 --> 00:21:47,796 A:middle
So, now they're stacked.

500
00:21:49,076 --> 00:21:53,346 A:middle
Now, SpriteKit knows what you
intended with your composite.

501
00:21:53,346 --> 00:21:55,796 A:middle
It's not based on the order
that was added in code

502
00:21:55,796 --> 00:21:56,576 A:middle
or anything like that.

503
00:21:56,576 --> 00:21:58,556 A:middle
It's based on something
absolute, which is,

504
00:21:58,996 --> 00:22:00,416 A:middle
where is my parent in space.

505

506
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

507
00:21:58,996 --> 00:22:00,416 A:middle
where is my parent in space.

508
00:22:00,636 --> 00:22:04,466 A:middle
So, what does that
do for a drawing?

509
00:22:04,626 --> 00:22:07,026 A:middle
Well, bit by bit, you can see

510
00:22:07,486 --> 00:22:09,486 A:middle
that we've got a
lot less draw calls

511
00:22:09,486 --> 00:22:10,446 A:middle
because we're done already.

512
00:22:10,446 --> 00:22:12,266 A:middle
So, that's great.

513
00:22:12,886 --> 00:22:13,966 A:middle
And you've got a whole bunch

514
00:22:13,966 --> 00:22:16,186 A:middle
of performance back right away
especially if you have lots

515
00:22:16,186 --> 00:22:20,916 A:middle
of objects, but you can
go further of course.

516
00:22:21,086 --> 00:22:22,246 A:middle
Use texture atlases.

517
00:22:22,646 --> 00:22:26,606 A:middle
So, here I've put all of
the sprites onto one texture

518
00:22:27,126 --> 00:22:28,896 A:middle
and how is that going
to help me?

519
00:22:29,736 --> 00:22:32,406 A:middle
Well, here's my magical
scene again with lots

520
00:22:32,406 --> 00:22:35,056 A:middle
of helicopters and
boom, I'm done.

521
00:22:35,536 --> 00:22:38,176 A:middle
SpriteKit can know
that's one texture.

522
00:22:38,456 --> 00:22:40,376 A:middle
It knows what order all the
bits have to be drawn in

523
00:22:40,376 --> 00:22:44,346 A:middle
and just batch it all up for
the GPU and blast it on out

524
00:22:44,586 --> 00:22:47,116 A:middle
and potentially with
just one single call,

525
00:22:47,116 --> 00:22:48,086 A:middle
so that's pretty awesome.

526
00:22:48,696 --> 00:22:53,416 A:middle
Now, there's a whole bunch of
other things that can be shared

527
00:22:53,736 --> 00:22:55,916 A:middle
and you should be
aware of those things.

528
00:22:56,486 --> 00:22:58,916 A:middle
We have a new normal
map generation scheme.

529
00:22:59,406 --> 00:23:02,166 A:middle
And you can see that there
is a little flower block.

530

531
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

532
00:22:59,406 --> 00:23:02,166 A:middle
And you can see that there
is a little flower block.

533
00:23:02,756 --> 00:23:06,646 A:middle
And because SpriteKit
textures are keyed off a name

534
00:23:07,176 --> 00:23:12,776 A:middle
and normal maps were generated
on the fly and without a name

535
00:23:12,886 --> 00:23:13,966 A:middle
and just assigned somewhere.

536
00:23:14,416 --> 00:23:16,726 A:middle
If you're going to use that
normal map on the block,

537
00:23:17,076 --> 00:23:18,666 A:middle
you need to know--
let the engine know

538
00:23:18,796 --> 00:23:20,516 A:middle
that it's generating
a shared thing.

539
00:23:20,986 --> 00:23:24,456 A:middle
So, generate your normal
map, store it on a texture

540
00:23:24,456 --> 00:23:26,376 A:middle
and then assign that texture
all the sprites they're going

541
00:23:26,376 --> 00:23:30,406 A:middle
to use it as opposed to every
time you have that block asking

542
00:23:30,406 --> 00:23:31,446 A:middle
for it to be generated.

543
00:23:32,296 --> 00:23:35,286 A:middle
Similarly, we've got some
cool procedural noise

544
00:23:35,286 --> 00:23:37,536 A:middle
which you might be like
to using your shaders

545
00:23:37,536 --> 00:23:40,186 A:middle
or to provide some sort of, you
know, television snow effect

546
00:23:40,186 --> 00:23:40,946 A:middle
or something like that.

547
00:23:41,416 --> 00:23:44,116 A:middle
If you can reuse the noise at
the scale that you've generated,

548
00:23:44,516 --> 00:23:46,596 A:middle
cache that off because
every noise texture

549
00:23:46,596 --> 00:23:48,686 A:middle
that you make is going to
consume memory, and once again,

550
00:23:49,126 --> 00:23:50,836 A:middle
SpriteKit won't know
unless if you tell it

551
00:23:50,836 --> 00:23:54,066 A:middle
by sharing a variable in
a cache pointer somewhere

552
00:23:54,066 --> 00:23:56,116 A:middle
that it is actually the
same texture it won't know

553
00:23:56,266 --> 00:24:00,186 A:middle
and it won't be able to batch.

554

555
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

556
00:23:56,266 --> 00:24:00,186 A:middle
and it won't be able to batch.

557
00:24:00,396 --> 00:24:01,706 A:middle
Couple of other similar points.

558
00:24:02,166 --> 00:24:04,906 A:middle
If you reference shaders from
files, SpriteKit will know

559
00:24:05,156 --> 00:24:09,446 A:middle
that vortex.fsh is vortex.fsh
everywhere you reference it.

560
00:24:10,096 --> 00:24:13,106 A:middle
So, when you're prototyping,
it's often very convenient

561
00:24:13,106 --> 00:24:15,616 A:middle
to reference shaders from
strings, so go ahead and do

562
00:24:15,616 --> 00:24:16,576 A:middle
that during prototyping.

563
00:24:16,896 --> 00:24:18,626 A:middle
But SpriteKit doesn't really
have any way of knowing

564
00:24:18,626 --> 00:24:20,806 A:middle
that genuinely these two shaders
are the same even though the

565
00:24:20,806 --> 00:24:21,906 A:middle
source code might be the same.

566
00:24:22,366 --> 00:24:24,846 A:middle
If you reference it from a
file, then we can do all kinds

567
00:24:24,846 --> 00:24:27,396 A:middle
of pre-analysis beforehand
to just cache it all off

568
00:24:27,796 --> 00:24:29,726 A:middle
and it's going to
go that much faster

569
00:24:30,106 --> 00:24:32,496 A:middle
because if all those helicopters
have the same shader,

570
00:24:32,496 --> 00:24:35,106 A:middle
once again, it knows it can just
blast them all off like that.

571
00:24:35,106 --> 00:24:38,666 A:middle
And then, finally,
slightly esoteric point

572
00:24:38,666 --> 00:24:41,986 A:middle
on batching here is we offer
a number of blend modes

573
00:24:42,376 --> 00:24:46,236 A:middle
such as additive or
multiplicative or whatever.

574
00:24:46,866 --> 00:24:50,096 A:middle
Because changing a blend
mode changes the GPU stage,

575
00:24:50,736 --> 00:24:53,746 A:middle
we have to actually interrupt
the drawing every time we change

576
00:24:53,746 --> 00:24:56,766 A:middle
that stage in order to
allow the bind to occur.

577
00:24:57,196 --> 00:24:59,836 A:middle
So, a trick you can use,
you can imagine for example

578
00:24:59,836 --> 00:25:02,246 A:middle
if you had some sort of a
misty forest scene with a layer

579

580
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

581
00:24:59,836 --> 00:25:02,246 A:middle
if you had some sort of a
misty forest scene with a layer

582
00:25:02,246 --> 00:25:05,586 A:middle
of trees and then a layer of
creatures and then another layer

583
00:25:05,586 --> 00:25:07,376 A:middle
of trees and the trees
have alpha in them.

584
00:25:08,026 --> 00:25:10,246 A:middle
If you put all those
things on the same Z,

585
00:25:10,246 --> 00:25:12,106 A:middle
like literally exactly
the same Z,

586
00:25:12,666 --> 00:25:14,646 A:middle
then SpriteKit will know
these things go together

587
00:25:15,066 --> 00:25:18,166 A:middle
with their blend mode and,
for example, all of the trees

588
00:25:18,166 --> 00:25:21,166 A:middle
in the front can go out in one
draw call with one blend mode

589
00:25:21,656 --> 00:25:25,456 A:middle
and that may or may not be
just that little extra bit

590
00:25:25,456 --> 00:25:27,676 A:middle
that you needed to get a
little more time to squeeze

591
00:25:27,676 --> 00:25:28,726 A:middle
in that little more awesome.

592
00:25:29,316 --> 00:25:34,986 A:middle
Now, there's tools to help you
evaluate graphics performance.

593
00:25:35,316 --> 00:25:36,866 A:middle
So, you don't just need to have

594
00:25:36,866 --> 00:25:39,386 A:middle
like a mysterious mental
model of these things.

595
00:25:39,696 --> 00:25:44,566 A:middle
And there is actual, you know,
quantitative things you can do

596
00:25:44,786 --> 00:25:47,266 A:middle
to get some insight into what
SpriteKit is doing behind

597
00:25:47,266 --> 00:25:47,836 A:middle
the scenes.

598
00:25:49,196 --> 00:25:53,996 A:middle
So, first of all, there's a
number of flags on the view

599
00:25:54,296 --> 00:25:57,306 A:middle
which you can turn on and off
in order to get some insight.

600
00:25:58,026 --> 00:26:01,496 A:middle
There is the obvious frame
counter, FPS, frames per second.

601

602
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

603
00:25:58,026 --> 00:26:01,496 A:middle
There is the obvious frame
counter, FPS, frames per second.

604
00:26:02,126 --> 00:26:05,016 A:middle
There's a DrawCount
which is actually going

605
00:26:05,016 --> 00:26:07,406 A:middle
to tell you how many
batches did I get;

606
00:26:08,056 --> 00:26:09,996 A:middle
and there is your NodeCount

607
00:26:10,306 --> 00:26:14,006 A:middle
which is how many SK-like
SpriteKit nodes-actually went

608
00:26:14,006 --> 00:26:16,326 A:middle
down the pipeline, and
finally the QuadCount.

609
00:26:16,996 --> 00:26:18,526 A:middle
If you're using something
like a shape,

610
00:26:18,526 --> 00:26:22,206 A:middle
it might be comprised
of multiple subquads.

611
00:26:22,836 --> 00:26:27,756 A:middle
So, it's going to tell you
that and I have just a quick,

612
00:26:27,756 --> 00:26:29,066 A:middle
little thing here
to show you that.

613
00:26:29,066 --> 00:26:33,116 A:middle
I have all these gears
and it's showing 12 nodes.

614
00:26:33,116 --> 00:26:34,376 A:middle
You'd have to inspect
my scene graph

615
00:26:34,376 --> 00:26:35,556 A:middle
to discover why there's 12.

616
00:26:35,986 --> 00:26:38,456 A:middle
But there's six gears, you
can probably guess sort

617
00:26:38,456 --> 00:26:39,466 A:middle
of what might be going on there.

618
00:26:39,966 --> 00:26:43,106 A:middle
There's a heck of a lot of
quads, like really a lot,

619
00:26:43,756 --> 00:26:46,816 A:middle
I have 12 draws but it's
running at 60 frames a second.

620
00:26:46,816 --> 00:26:48,616 A:middle
So, I'm pretty happy
with that right now

621
00:26:48,616 --> 00:26:50,026 A:middle
for my magical gear game.

622
00:26:50,586 --> 00:26:56,816 A:middle
So, the other thing
you've got is the GL frame,

623
00:26:57,706 --> 00:26:58,766 A:middle
the GL frame debugger.

624
00:26:59,316 --> 00:27:01,096 A:middle
So, there's all kinds
of cool gauges

625

626
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

627
00:26:59,316 --> 00:27:01,096 A:middle
So, there's all kinds
of cool gauges

628
00:27:01,406 --> 00:27:03,306 A:middle
and tell you what
proportion of this

629
00:27:03,306 --> 00:27:04,896 A:middle
and that is happening
throughout your frame

630
00:27:05,396 --> 00:27:06,736 A:middle
and it will give
you some insight

631
00:27:06,736 --> 00:27:08,756 A:middle
into what GL calls are
being evoked on the fly.

632
00:27:09,286 --> 00:27:11,376 A:middle
And there's a heck of
a lot of documentation

633
00:27:11,376 --> 00:27:12,476 A:middle
and information about this.

634
00:27:12,476 --> 00:27:14,026 A:middle
It's a really fantastic tool

635
00:27:14,376 --> 00:27:16,916 A:middle
for understanding the runtime
characteristics of your game.

636
00:27:17,426 --> 00:27:20,426 A:middle
You'll notice as you run
this thing what's going

637
00:27:20,426 --> 00:27:23,056 A:middle
on in the hardware and
corresponding to what's going

638
00:27:23,056 --> 00:27:26,266 A:middle
on in your game and study that
will give you good insight

639
00:27:26,266 --> 00:27:28,586 A:middle
into what the engine
is doing for you.

640
00:27:29,716 --> 00:27:33,646 A:middle
So, to kind of roll that all up.

641
00:27:34,336 --> 00:27:38,046 A:middle
The idea here is compose
your scenes as layers,

642
00:27:38,526 --> 00:27:40,806 A:middle
common Z values are
going to help you a lot

643
00:27:40,806 --> 00:27:41,826 A:middle
for the reasons I mentioned.

644
00:27:43,316 --> 00:27:45,856 A:middle
Put overlapping things in
different layers in order

645
00:27:45,856 --> 00:27:47,526 A:middle
to control the draw
order instead

646
00:27:47,526 --> 00:27:51,616 A:middle
of using the SiblingOrder
and SiblingOrder = YES.

647
00:27:52,036 --> 00:27:52,996 A:middle
Share your stuff.

648
00:27:53,436 --> 00:27:54,906 A:middle
Blend modes go together.

649
00:27:55,656 --> 00:27:57,636 A:middle
And use the HUDs and profilers

650
00:27:57,636 --> 00:27:59,776 A:middle
to really understand
what the engine is doing.

651

652
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

653
00:28:01,936 --> 00:28:05,156 A:middle
All right, next up:
Actions and Constraints.

654
00:28:05,576 --> 00:28:08,026 A:middle
As I mentioned in
the introduction,

655
00:28:08,626 --> 00:28:13,136 A:middle
cool thing about actions is
they really are a magic window

656
00:28:13,416 --> 00:28:16,106 A:middle
into the very guts of the
SpriteKit execution engine.

657
00:28:16,796 --> 00:28:20,116 A:middle
Deep down inside we continuously
improve the performance

658
00:28:20,336 --> 00:28:22,766 A:middle
of the various operations
SpriteKit provides.

659
00:28:23,616 --> 00:28:26,816 A:middle
Actions, or these
little Objective-C things

660
00:28:26,816 --> 00:28:28,606 A:middle
that you might think,
"That might be heavy."

661
00:28:28,836 --> 00:28:29,386 A:middle
But it's not.

662
00:28:30,046 --> 00:28:32,966 A:middle
It really queues up instructions
for the execution engine,

663
00:28:33,216 --> 00:28:34,606 A:middle
just a couple of
bytes here and there,

664
00:28:34,926 --> 00:28:35,986 A:middle
to tell you what's
going to happen.

665
00:28:35,986 --> 00:28:39,096 A:middle
And then it puts it off
into our internal queues

666
00:28:39,096 --> 00:28:42,306 A:middle
and whatnot to run.

667
00:28:43,476 --> 00:28:46,116 A:middle
So, making action.

668
00:28:46,916 --> 00:28:50,236 A:middle
Here I've got a node
and I'm going to rotate

669
00:28:50,236 --> 00:28:52,406 A:middle
by pi apparently for one second.

670
00:28:52,996 --> 00:28:55,646 A:middle
You can chain them,
group them, reuse them.

671
00:28:57,056 --> 00:29:00,506 A:middle
Here, the little airplanes that
you might all be familiar with.

672

673
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

674
00:28:57,056 --> 00:29:00,506 A:middle
Here, the little airplanes that
you might all be familiar with.

675
00:29:01,066 --> 00:29:03,636 A:middle
And they're rotating
continuously

676
00:29:03,826 --> 00:29:05,836 A:middle
for a period of a second.

677
00:29:05,916 --> 00:29:07,436 A:middle
They're moving around
and they're scaling.

678
00:29:08,416 --> 00:29:10,536 A:middle
It's really simple
to set this stuff up.

679
00:29:10,946 --> 00:29:13,056 A:middle
The execution engine
is ticking it over.

680
00:29:13,056 --> 00:29:13,846 A:middle
It's almost free.

681
00:29:14,496 --> 00:29:16,666 A:middle
It's great to let the
SpriteKit engine do this stuff

682
00:29:16,666 --> 00:29:19,046 A:middle
for you rather than coding
it all up in your update.

683
00:29:20,256 --> 00:29:22,816 A:middle
So, a little bit
about sequencing.

684
00:29:23,766 --> 00:29:28,096 A:middle
Say I've got something that I
have got waiting off stage left,

685
00:29:28,096 --> 00:29:30,666 A:middle
like a secret monster who
will make his appearance

686
00:29:30,666 --> 00:29:31,566 A:middle
in less than one second.

687
00:29:32,216 --> 00:29:35,266 A:middle
And I can have it
wait and then move.

688
00:29:35,906 --> 00:29:38,436 A:middle
So, that's like a sequence.

689
00:29:40,726 --> 00:29:44,366 A:middle
Also, when my monster comes,
he might rotate and scale

690
00:29:44,366 --> 00:29:48,006 A:middle
and then fade away because
he was merely a ghost.

691
00:29:48,206 --> 00:29:51,886 A:middle
So, that's the use of
like an SKAction group.

692
00:29:52,486 --> 00:29:57,076 A:middle
And then you can compose
those things as deeply

693
00:29:57,216 --> 00:29:59,656 A:middle
and "complexively" as you like.

694

695
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

696
00:30:00,466 --> 00:30:01,646 A:middle
Am I allowed to make up words?

697
00:30:03,796 --> 00:30:04,376 A:middle
All right.

698
00:30:04,666 --> 00:30:07,276 A:middle
So, in this case my
monster is going to move.

699
00:30:07,276 --> 00:30:10,886 A:middle
He's going to scale and rotate
and he's going to fade away.

700
00:30:11,116 --> 00:30:13,816 A:middle
Now, SKAction.h is your friend.

701
00:30:13,816 --> 00:30:15,036 A:middle
This is the documentation here.

702
00:30:15,526 --> 00:30:18,756 A:middle
And I'd like you all to
carefully write these all down.

703
00:30:19,186 --> 00:30:20,936 A:middle
No. Actually go look
at the documentation

704
00:30:20,936 --> 00:30:22,036 A:middle
because there's a lot of it.

705
00:30:22,306 --> 00:30:24,126 A:middle
Now, there's a ton
of power in there.

706
00:30:24,126 --> 00:30:24,976 A:middle
It's a lot of fun to play with.

707
00:30:25,946 --> 00:30:29,116 A:middle
Constraints, and you're here
for the previous section.

708
00:30:29,596 --> 00:30:31,456 A:middle
Norman introduced it quite well.

709
00:30:31,886 --> 00:30:34,956 A:middle
I have just got a quick
little summary slide here.

710
00:30:35,446 --> 00:30:39,156 A:middle
Constraints are another
thing which gives you access

711
00:30:39,156 --> 00:30:41,296 A:middle
to the high-performance engine
running underneath SpriteKit.

712
00:30:41,296 --> 00:30:43,126 A:middle
In this case it's running
inverse kinematics.

713
00:30:43,586 --> 00:30:45,816 A:middle
And this little scene
was set up in Xcode.

714
00:30:46,196 --> 00:30:49,886 A:middle
And very quickly just
clicking and setting

715
00:30:50,086 --> 00:30:51,736 A:middle
up a couple of parameters.

716
00:30:54,596 --> 00:30:57,516 A:middle
Here's another one that's
actually new and cool.

717
00:30:57,596 --> 00:31:01,966 A:middle
You can create a followpath node
which just takes the CGPathRef.

718

719
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

720
00:30:57,596 --> 00:31:01,966 A:middle
You can create a followpath node
which just takes the CGPathRef.

721
00:31:02,516 --> 00:31:05,136 A:middle
And if you've ever spent any
time with Bezier's points

722
00:31:05,136 --> 00:31:06,986 A:middle
and whatnot, the math
is kind of hairy,

723
00:31:07,296 --> 00:31:08,796 A:middle
and especially making
things move

724
00:31:09,106 --> 00:31:11,356 A:middle
at a uniform speed is
particularly hairy.

725
00:31:11,856 --> 00:31:14,926 A:middle
So, we went ahead and
given you an SKAction

726
00:31:14,926 --> 00:31:17,906 A:middle
to follow a path along a
spline that you create,

727
00:31:17,976 --> 00:31:19,436 A:middle
it's a Catmull-Rom
spline if you care.

728
00:31:20,006 --> 00:31:23,196 A:middle
And we'll move things along it
at a constant velocity for you.

729
00:31:23,756 --> 00:31:28,796 A:middle
Click, here we go.

730
00:31:28,866 --> 00:31:30,016 A:middle
All right.

731
00:31:30,716 --> 00:31:33,026 A:middle
OrientToNode, similar
sort of thing.

732
00:31:34,156 --> 00:31:36,166 A:middle
You don't need to bother
with, you know, arc tangents

733
00:31:36,166 --> 00:31:36,996 A:middle
and all that sort of thing.

734
00:31:37,336 --> 00:31:39,536 A:middle
The blue ball is moving around,
the arrow is following it.

735
00:31:43,376 --> 00:31:47,486 A:middle
And the other really cool thing
about actions is they're kind

736
00:31:47,486 --> 00:31:49,136 A:middle
of latent in memory
when you create them.

737
00:31:49,776 --> 00:31:54,006 A:middle
Build them once, take advantage
of the fact that they're copying

738
00:31:54,006 --> 00:31:56,336 A:middle
on add and that they run
when you add it to a scene.

739
00:31:57,156 --> 00:32:00,106 A:middle
My example here is that
he might have a spaceship

740

741
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

742
00:31:57,156 --> 00:32:00,106 A:middle
My example here is that
he might have a spaceship

743
00:32:00,456 --> 00:32:03,636 A:middle
or a monster that's going
to enter from stage left

744
00:32:03,636 --> 00:32:04,716 A:middle
in the same way every time

745
00:32:04,716 --> 00:32:06,196 A:middle
and maybe follow a
path and then leave.

746
00:32:06,826 --> 00:32:10,136 A:middle
If you create that node with
the spaceship and the action,

747
00:32:11,206 --> 00:32:15,156 A:middle
cache it on a pointer and
then copy it and add it

748
00:32:15,566 --> 00:32:18,106 A:middle
to your scene, it will
run every single time,

749
00:32:18,516 --> 00:32:21,426 A:middle
and exactly the same way with
very, very little overhead.

750
00:32:24,156 --> 00:32:28,836 A:middle
And another fun thing that's
easy to overlook is the purpose

751
00:32:28,886 --> 00:32:30,256 A:middle
of naming your actions.

752
00:32:30,786 --> 00:32:35,556 A:middle
So, in this example here,
what I've got is the idea

753
00:32:35,946 --> 00:32:39,146 A:middle
that I have a sprite that is
basically going to do something

754
00:32:39,146 --> 00:32:40,476 A:middle
like say follow a touch point.

755
00:32:41,166 --> 00:32:43,806 A:middle
I might run an action that
is like "move to point".

756
00:32:43,806 --> 00:32:48,406 A:middle
If I give it the name
"move", now I can override

757
00:32:48,406 --> 00:32:51,256 A:middle
that action anytime I want
just by using the same key.

758
00:32:51,376 --> 00:32:52,656 A:middle
So, it might be in progress.

759
00:32:52,886 --> 00:32:54,686 A:middle
If I run the action
again with a new point,

760
00:32:54,686 --> 00:32:57,626 A:middle
it will immediately segue
without a hitch or stutter

761
00:32:57,956 --> 00:32:59,666 A:middle
onto the new action
and continue on.

762

763
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

764
00:33:00,366 --> 00:33:03,346 A:middle
And finally, if my monster is
coming in here and then he saw

765
00:33:03,346 --> 00:33:06,106 A:middle
that I had, you know, the
Big Monster Ray Repeller 2000

766
00:33:06,466 --> 00:33:08,436 A:middle
and he decides he doesn't
want to go all the way

767
00:33:08,436 --> 00:33:11,656 A:middle
into the scene, we can
just use removeActionForKey

768
00:33:11,936 --> 00:33:15,946 A:middle
with his move key and that will
cancel that action right away.

769
00:33:16,336 --> 00:33:17,656 A:middle
And you can go and
do something else.

770
00:33:17,656 --> 00:33:20,146 A:middle
So, we don't have to wait
for the execution now

771
00:33:20,146 --> 00:33:24,386 A:middle
to play out to the end.

772
00:33:24,386 --> 00:33:24,696 A:middle
All right.

773
00:33:26,036 --> 00:33:27,086 A:middle
Next, physics.

774
00:33:28,436 --> 00:33:29,346 A:middle
Physics are a lot of fun.

775
00:33:29,986 --> 00:33:34,096 A:middle
I really, really love the new
simulation tool that we've got

776
00:33:34,096 --> 00:33:37,996 A:middle
in Xcode because the
hardest thing about working

777
00:33:37,996 --> 00:33:40,316 A:middle
with physics is getting
the parameters right.

778
00:33:41,086 --> 00:33:43,576 A:middle
Now, we set things up
with good defaults.

779
00:33:43,576 --> 00:33:46,586 A:middle
For example, if you set a
mass of 1 and a strength of 1

780
00:33:46,706 --> 00:33:49,936 A:middle
on a rigid body and a strength
of 1 on a field, they're going

781
00:33:49,936 --> 00:33:52,166 A:middle
to interact in kind of an
interesting way out of the bat.

782
00:33:52,506 --> 00:33:54,796 A:middle
But that's just the starting
point for your iteration.

783
00:33:55,966 --> 00:33:59,826 A:middle
So, rigid bodies, I just
mentioned rigid bodies.

784
00:33:59,826 --> 00:34:00,906 A:middle
That's all the things
in your game.

785

786
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

787
00:33:59,826 --> 00:34:00,906 A:middle
That's all the things
in your game.

788
00:34:00,906 --> 00:34:02,816 A:middle
They're bouncing, falling,
rolling and sliding.

789
00:34:03,706 --> 00:34:06,836 A:middle
The things that the
physics engine has

790
00:34:06,836 --> 00:34:10,706 A:middle
to do each frame are your rigid
bodies, handling collisions

791
00:34:10,706 --> 00:34:11,926 A:middle
and letting you know
that they have occurred

792
00:34:12,386 --> 00:34:13,255 A:middle
and physics fields.

793
00:34:14,716 --> 00:34:19,666 A:middle
Now, a primary thing for
getting access to iteration

794
00:34:19,946 --> 00:34:21,096 A:middle
and understanding what's going

795
00:34:21,096 --> 00:34:24,206 A:middle
on is the new physics
visualizer.

796
00:34:24,775 --> 00:34:27,996 A:middle
So, let's just go back
to my gear scheme here.

797
00:34:27,996 --> 00:34:29,856 A:middle
I'm dropping in these
wonderful gears.

798
00:34:30,466 --> 00:34:32,275 A:middle
And wait a second.

799
00:34:33,616 --> 00:34:35,795 A:middle
His teeth weren't
acting properly.

800
00:34:36,036 --> 00:34:36,806 A:middle
What's up with that?

801
00:34:38,025 --> 00:34:41,356 A:middle
The other ones are interlocking
but just not that one.

802
00:34:42,216 --> 00:34:45,045 A:middle
So, I'll turn on the
visualizer and you can see,

803
00:34:45,045 --> 00:34:47,126 A:middle
oh, that one is a circle.

804
00:34:47,536 --> 00:34:48,815 A:middle
I made a mistake somewhere.

805
00:34:49,005 --> 00:34:52,545 A:middle
So, I can go either in Xcode
and click on my thing or,

806
00:34:52,545 --> 00:34:55,076 A:middle
if it's procedural, I can
look at my code and I can find

807
00:34:55,076 --> 00:34:57,306 A:middle
out why did this one
slips through the cracks.

808
00:34:57,686 --> 00:35:01,596 A:middle
So, this is your-- This is your
great first line of defense

809

810
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

811
00:34:57,686 --> 00:35:01,596 A:middle
So, this is your-- This is your
great first line of defense

812
00:35:01,596 --> 00:35:03,876 A:middle
for just understanding what
the dynamic behavior is

813
00:35:03,876 --> 00:35:05,066 A:middle
if it's not what you expected.

814
00:35:05,696 --> 00:35:07,066 A:middle
You can also use this mode

815
00:35:07,416 --> 00:35:10,726 A:middle
for identifying quickly
what is the cause

816
00:35:11,006 --> 00:35:13,296 A:middle
of physics performance issues.

817
00:35:13,676 --> 00:35:15,586 A:middle
An object might be
stuck in a wall

818
00:35:15,876 --> 00:35:17,386 A:middle
and it might be an
invisible wall

819
00:35:17,386 --> 00:35:19,396 A:middle
because it was only
there as a physics body.

820
00:35:19,866 --> 00:35:21,746 A:middle
Now, you'll just be
able to see that, oh,

821
00:35:21,866 --> 00:35:23,526 A:middle
it's continuously
pushing in and out

822
00:35:23,526 --> 00:35:24,956 A:middle
of collision and can't escape.

823
00:35:25,566 --> 00:35:27,626 A:middle
And the next steps to solve

824
00:35:27,626 --> 00:35:29,626 A:middle
that problem will
probably occur to you.

825
00:35:32,196 --> 00:35:38,446 A:middle
So, in order to take best
advantage of physics in order

826
00:35:38,446 --> 00:35:42,036 A:middle
to get performance, so you can
squeeze down the amount of time

827
00:35:42,036 --> 00:35:43,906 A:middle
that you're spending, you
can squeeze in more awesome,

828
00:35:44,716 --> 00:35:46,676 A:middle
is to understand
the cost hierarchy.

829
00:35:47,066 --> 00:35:52,016 A:middle
First of all, dynamic
objects cost more,

830
00:35:52,156 --> 00:35:55,126 A:middle
because their collisions need
to be resolved and they need

831
00:35:55,126 --> 00:35:59,096 A:middle
to be moved out of intersection,
than objects that are static,

832
00:35:59,396 --> 00:36:01,516 A:middle
like hopefully the stage
that I'm standing on.

833

834
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

835
00:35:59,396 --> 00:36:01,516 A:middle
like hopefully the stage
that I'm standing on.

836
00:36:02,386 --> 00:36:08,576 A:middle
So, if you can set an object
to dynamic = NO, you're going

837
00:36:08,576 --> 00:36:10,256 A:middle
to get a lot of performance
back right away.

838
00:36:10,936 --> 00:36:16,746 A:middle
At the most efficient end
of the scale are circles.

839
00:36:17,886 --> 00:36:21,666 A:middle
You can have dozens of
circles for every other kind

840
00:36:21,666 --> 00:36:22,946 A:middle
or shape that you can have.

841
00:36:23,776 --> 00:36:27,416 A:middle
And circles might work really,
really good for a lot of things,

842
00:36:27,416 --> 00:36:30,346 A:middle
especially if they're
circular or they're small.

843
00:36:30,346 --> 00:36:32,206 A:middle
So you're not going to really
notice what the interaction is.

844
00:36:32,866 --> 00:36:34,616 A:middle
The circle doesn't fit
very well on that hammer.

845
00:36:35,176 --> 00:36:37,586 A:middle
That's a bit better.

846
00:36:37,726 --> 00:36:39,946 A:middle
The hammer at least, you
know, has edges and stuff.

847
00:36:41,096 --> 00:36:43,316 A:middle
This is more expensive
than the circle

848
00:36:43,776 --> 00:36:45,236 A:middle
where you could have
dozens of circles.

849
00:36:45,236 --> 00:36:48,356 A:middle
You can have maybe, I
don't know, eight of these.

850
00:36:48,616 --> 00:36:50,356 A:middle
Just, you know, being a
little bit silly there.

851
00:36:50,966 --> 00:36:52,956 A:middle
And polygons are better.

852
00:36:53,496 --> 00:36:56,886 A:middle
This is probably going to
be the one that serves a lot

853
00:36:56,886 --> 00:36:58,336 A:middle
of complicated shapes the best.

854
00:36:58,876 --> 00:37:00,816 A:middle
It's more expensive
than the rectangle

855

856
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

857
00:36:58,876 --> 00:37:00,816 A:middle
It's more expensive
than the rectangle

858
00:37:00,816 --> 00:37:02,296 A:middle
because there's more
edges to compute.

859
00:37:03,456 --> 00:37:07,376 A:middle
Compound objects
need to be iterated

860
00:37:07,376 --> 00:37:09,296 A:middle
through all the way
for all the pieces.

861
00:37:10,026 --> 00:37:12,596 A:middle
Lots of circles compounded
are a lot cheaper

862
00:37:12,596 --> 00:37:14,066 A:middle
than a lot of boxes compounded.

863
00:37:14,636 --> 00:37:22,696 A:middle
And finally, there is the
perfect pixel alpha mask bodies.

864
00:37:23,406 --> 00:37:26,346 A:middle
These are potentially cheap.

865
00:37:26,506 --> 00:37:29,086 A:middle
If it was a circle, it's
going to be cheap actually.

866
00:37:29,616 --> 00:37:33,196 A:middle
But if it's got a convex or
complex, convoluted shape,

867
00:37:33,636 --> 00:37:36,406 A:middle
there might be a lot of
computation involved there.

868
00:37:36,406 --> 00:37:38,166 A:middle
So, just be careful with these.

869
00:37:38,676 --> 00:37:41,476 A:middle
You need to pick
the representation

870
00:37:41,586 --> 00:37:43,746 A:middle
that best serves your game.

871
00:37:44,286 --> 00:37:48,066 A:middle
You might find that the per
pixel thing is actually better

872
00:37:48,486 --> 00:37:51,826 A:middle
than having like say 20 little
circles to describe something.

873
00:37:52,366 --> 00:37:56,906 A:middle
But prefer things on the
efficient side of the chart

874
00:37:56,906 --> 00:37:59,826 A:middle
as much as you can,
serve your gameplay.

875

876
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

877
00:38:02,006 --> 00:38:02,656 A:middle
All right.

878
00:38:03,306 --> 00:38:06,606 A:middle
Collision Masks is another
thing that you can use

879
00:38:06,866 --> 00:38:12,096 A:middle
to regain performance,
especially in a case like this.

880
00:38:12,096 --> 00:38:16,036 A:middle
I've got these two jars, a
white jar with white marbles

881
00:38:16,036 --> 00:38:17,786 A:middle
and a green jar with
green marbles.

882
00:38:18,376 --> 00:38:21,846 A:middle
Now, the funny thing about this
is they're pretty close together

883
00:38:22,156 --> 00:38:25,606 A:middle
and it might be hard for the
engine to actually understand

884
00:38:26,076 --> 00:38:28,476 A:middle
that the white marbles
have no way of getting

885
00:38:28,476 --> 00:38:30,146 A:middle
in the green jar and vice versa.

886
00:38:31,146 --> 00:38:33,026 A:middle
So, you can help the engine out.

887
00:38:33,876 --> 00:38:35,536 A:middle
This is what the engine sees.

888
00:38:36,096 --> 00:38:42,286 A:middle
It's like, for every one
of those green marbles

889
00:38:42,286 --> 00:38:45,046 A:middle
and every one of those white
marbles, are they hitting?

890
00:38:45,736 --> 00:38:48,416 A:middle
So, just imagine how
many comparisons that is.

891
00:38:51,996 --> 00:38:53,416 A:middle
Putting the jar back again.

892
00:38:54,556 --> 00:38:57,016 A:middle
Now, if you use a
collision mask,

893
00:38:57,616 --> 00:39:02,096 A:middle
give the white marbles mask 1
and the green marbles mask 2,

894

895
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

896
00:38:57,616 --> 00:39:02,096 A:middle
give the white marbles mask 1
and the green marbles mask 2,

897
00:39:03,326 --> 00:39:05,246 A:middle
you're going to get a whole
ton of performance back.

898
00:39:05,766 --> 00:39:07,906 A:middle
This is an order
N squared problem.

899
00:39:08,376 --> 00:39:10,996 A:middle
And so, by cutting the
number of comparisons

900
00:39:10,996 --> 00:39:13,706 A:middle
in half, well, do the math.

901
00:39:15,196 --> 00:39:18,146 A:middle
A lot of computation that
you can get back just

902
00:39:18,326 --> 00:39:19,626 A:middle
through this simple experience.

903
00:39:21,076 --> 00:39:21,716 A:middle
All right.

904
00:39:22,176 --> 00:39:24,826 A:middle
Norman introduced force fields
very nicely in the previous one,

905
00:39:24,826 --> 00:39:27,676 A:middle
so I'm not going to belabor
what all the force fields are

906
00:39:27,676 --> 00:39:29,146 A:middle
and their fields and
things like that.

907
00:39:29,946 --> 00:39:33,006 A:middle
But I am going to point out
that they're building blocks,

908
00:39:33,476 --> 00:39:37,876 A:middle
use them together and use
actions to fade in and out.

909
00:39:38,316 --> 00:39:41,176 A:middle
I have a big, nasty
particle system here.

910
00:39:41,526 --> 00:39:43,406 A:middle
And what I've done is
just made a whole bunch

911
00:39:43,406 --> 00:39:45,346 A:middle
of force fields throughout
the center of the screen.

912
00:39:45,836 --> 00:39:49,236 A:middle
And I'm just using an action
to modulate the strength

913
00:39:49,296 --> 00:39:51,936 A:middle
of each force field so that
they smoothly segue one

914
00:39:51,936 --> 00:39:52,566 A:middle
into the other.

915
00:39:53,136 --> 00:39:55,296 A:middle
That's a lot nicer than
just turning them on or off.

916
00:39:55,706 --> 00:39:59,016 A:middle
Well, I love playing with
these things endlessly.

917
00:39:59,076 --> 00:40:00,706 A:middle
I had to throw that slide in.

918

919
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

920
00:39:59,076 --> 00:40:00,706 A:middle
I had to throw that slide in.

921
00:40:01,226 --> 00:40:06,236 A:middle
Now, here's another example of
how force fields can help you

922
00:40:06,236 --> 00:40:09,646 A:middle
out in reducing game logic
and simplifying updates,

923
00:40:09,876 --> 00:40:12,946 A:middle
similarly to the
way that the actions

924
00:40:12,946 --> 00:40:14,646 A:middle
or the window into the engine.

925
00:40:15,276 --> 00:40:18,326 A:middle
Force fields are another
thing that you can use

926
00:40:18,636 --> 00:40:19,896 A:middle
to replace game logic.

927
00:40:20,396 --> 00:40:24,186 A:middle
So, you can kind of tell without
even telling you what kind

928
00:40:24,186 --> 00:40:25,356 A:middle
of a game this one
is going to be.

929
00:40:25,536 --> 00:40:27,446 A:middle
But let's just see what it
looks like for a second.

930
00:40:28,036 --> 00:40:32,886 A:middle
You can see the little guys are
following the cursor around.

931
00:40:34,266 --> 00:40:37,086 A:middle
And they're doing their
darndest not to run

932
00:40:37,086 --> 00:40:40,016 A:middle
into those green planet things.

933
00:40:40,256 --> 00:40:42,356 A:middle
I guess my spaceships are
nearly as big as a planet,

934
00:40:42,356 --> 00:40:46,386 A:middle
that's kind of amazing.

935
00:40:46,536 --> 00:40:47,186 A:middle
It's hypnotic.

936
00:40:47,186 --> 00:40:51,466 A:middle
OK. I think I can stop
staring at that now.

937
00:40:52,696 --> 00:40:53,056 A:middle
All right.

938
00:40:53,526 --> 00:40:54,926 A:middle
Wait, that's the big reveal.

939
00:40:54,996 --> 00:40:56,106 A:middle
Let's go back to the picture

940
00:40:56,316 --> 00:40:59,376 A:middle
of the-of movie again,
or maybe not.

941
00:40:59,816 --> 00:41:01,216 A:middle
Before I show you
that next slide,

942

943
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

944
00:40:59,816 --> 00:41:01,216 A:middle
Before I show you
that next slide,

945
00:41:01,676 --> 00:41:06,086 A:middle
what I want to tell you is,
using Xcode I made that level.

946
00:41:06,506 --> 00:41:10,416 A:middle
So, I used an idea like-that
I like to call prefabs,

947
00:41:10,416 --> 00:41:13,566 A:middle
like prefabricated objects,
to make a little scene graph

948
00:41:13,936 --> 00:41:15,556 A:middle
with the spaceship's picture

949
00:41:16,076 --> 00:41:17,766 A:middle
and a force field
right underneath it.

950
00:41:18,106 --> 00:41:20,806 A:middle
I gave the force field on the
spaceship a negative strength,

951
00:41:20,806 --> 00:41:22,016 A:middle
so they push each other apart.

952
00:41:22,506 --> 00:41:26,286 A:middle
I gave the planet of child,
which is a force field

953
00:41:26,476 --> 00:41:27,536 A:middle
with a negative strength,

954
00:41:27,846 --> 00:41:30,906 A:middle
so that it pushes
little spaceships away.

955
00:41:31,256 --> 00:41:32,746 A:middle
I made the planets not dynamic

956
00:41:33,246 --> 00:41:34,906 A:middle
and I made the spaceships
dynamic.

957
00:41:35,186 --> 00:41:36,946 A:middle
OK. Now, we can look
at that code.

958
00:41:37,306 --> 00:41:37,616 A:middle
All right.

959
00:41:38,226 --> 00:41:42,636 A:middle
So, this is the whole entire
of that game aside from the bit

960
00:41:42,636 --> 00:41:43,626 A:middle
that I built in Xcode.

961
00:41:44,316 --> 00:41:47,656 A:middle
It's next to nothing and
you're getting the same sort

962
00:41:47,656 --> 00:41:50,116 A:middle
of behavior that you see in
classic RTSs like, you know,

963
00:41:50,116 --> 00:41:51,066 A:middle
Star Craft or whatever.

964
00:41:51,726 --> 00:41:57,026 A:middle
So, what it's doing from top
to bottom is just the target is

965
00:41:57,026 --> 00:41:59,446 A:middle
where I tapped the
screen and well,

966
00:41:59,446 --> 00:42:00,846 A:middle
you know what the
ship's position is.

967

968
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

969
00:41:59,446 --> 00:42:00,846 A:middle
you know what the
ship's position is.

970
00:42:01,266 --> 00:42:04,126 A:middle
I'm calculating and I don't
want to divide by zero

971
00:42:04,126 --> 00:42:05,766 A:middle
so I'm checking for that
little minimum length.

972
00:42:06,446 --> 00:42:08,666 A:middle
I'm getting the velocity
from the physics body.

973
00:42:09,186 --> 00:42:11,806 A:middle
I'm finding out what
direction the velocity is in.

974
00:42:12,016 --> 00:42:15,186 A:middle
Little arc tangent gives me an
angle to slap on Z-rotation.

975
00:42:15,776 --> 00:42:20,716 A:middle
I'm taking the position
difference of where I want

976
00:42:20,716 --> 00:42:21,846 A:middle
to go from where I am.

977
00:42:22,476 --> 00:42:24,586 A:middle
Subtracting the velocity.

978
00:42:25,896 --> 00:42:31,016 A:middle
Multiplying it by a magic number
which I arrived at by iterating,

979
00:42:31,826 --> 00:42:34,846 A:middle
and then I'm just
applying an impulse using

980
00:42:34,896 --> 00:42:36,136 A:middle
that calculated magic number.

981
00:42:36,696 --> 00:42:40,536 A:middle
And you basically get what looks
like artificial intelligence

982
00:42:40,806 --> 00:42:42,056 A:middle
for having done nothing at all.

983
00:42:43,016 --> 00:42:44,776 A:middle
Now, if you want to learn
more about that stuff,

984
00:42:44,776 --> 00:42:47,146 A:middle
you can like search
the internet for Boids.

985
00:42:47,696 --> 00:42:49,786 A:middle
There is a wonderful
body of work

986
00:42:49,786 --> 00:42:51,016 A:middle
around these kinds
of techniques.

987
00:42:51,796 --> 00:42:56,616 A:middle
Now, just like physics debug
drawing can give you insight

988
00:42:56,616 --> 00:42:59,696 A:middle
into what's going on,
here is, you know,

989
00:42:59,876 --> 00:43:01,086 A:middle
the wizard behind the curtain.

990

991
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

992
00:42:59,876 --> 00:43:01,086 A:middle
the wizard behind the curtain.

993
00:43:01,746 --> 00:43:04,356 A:middle
I've turned on the
field debug drawing.

994
00:43:04,906 --> 00:43:06,596 A:middle
You can see the fields
around the ships,

995
00:43:06,686 --> 00:43:09,276 A:middle
the fields around the
planets, and how they interact.

996
00:43:10,006 --> 00:43:12,546 A:middle
And I don't know.

997
00:43:12,646 --> 00:43:15,166 A:middle
It's a crazy amount of fun
for like 10 minutes of coding.

998
00:43:16,006 --> 00:43:19,186 A:middle
So, you all go out and make
classic, cool spaceship games

999
00:43:19,186 --> 00:43:20,146 A:middle
for me to download and play.

1000
00:43:20,456 --> 00:43:25,666 A:middle
I don't want to let
that slide go away

1001
00:43:25,666 --> 00:43:27,226 A:middle
because I'll just
watch it forever.

1002
00:43:27,816 --> 00:43:33,076 A:middle
OK. So, physics,
choose I don't know

1003
00:43:33,076 --> 00:43:34,056 A:middle
which way I'm supposed
to gesture.

1004
00:43:34,186 --> 00:43:37,176 A:middle
I had cheap down at the--
that side of the screen.

1005
00:43:38,246 --> 00:43:41,806 A:middle
Choose the cheapest one that's
going to best serve your game.

1006
00:43:42,546 --> 00:43:44,646 A:middle
Use the expensive
ones judiciously

1007
00:43:44,646 --> 00:43:45,506 A:middle
to serve your gameplay.

1008
00:43:46,626 --> 00:43:48,186 A:middle
Separate your groups with mask

1009
00:43:48,186 --> 00:43:49,916 A:middle
so the engine knows
what your intent is

1010
00:43:49,916 --> 00:43:52,056 A:middle
because that's the only way
that they can read your mind.

1011
00:43:52,866 --> 00:43:56,576 A:middle
And fields replace update logic,

1012
00:43:57,066 --> 00:43:59,076 A:middle
use a little creative
thinking and imagination.

1013
00:43:59,736 --> 00:44:02,386 A:middle
And the debug drawing is going
to give you all kinds of insight

1014

1015
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1016
00:43:59,736 --> 00:44:02,386 A:middle
And the debug drawing is going
to give you all kinds of insight

1017
00:44:02,756 --> 00:44:04,896 A:middle
into what the engine is doing
for you behind the scenes.

1018
00:44:06,146 --> 00:44:09,486 A:middle
So, my next topic: shapes.

1019
00:44:09,486 --> 00:44:14,646 A:middle
I have a little refresher
here on the difference

1020
00:44:14,646 --> 00:44:17,956 A:middle
between bitmap art
and vector art.

1021
00:44:18,106 --> 00:44:22,786 A:middle
Anyone care to guess
which is the vector art?

1022
00:44:23,046 --> 00:44:27,046 A:middle
Now, there's a cost
hierarchy of shapes just

1023
00:44:27,046 --> 00:44:29,276 A:middle
like there's a cost
hierarchy of physics.

1024
00:44:30,126 --> 00:44:31,516 A:middle
You know, what I'm
going to say there.

1025
00:44:32,046 --> 00:44:33,996 A:middle
Choose the one that
best serves your game.

1026
00:44:34,776 --> 00:44:38,286 A:middle
These guys, in particular
squares

1027
00:44:38,626 --> 00:44:41,146 A:middle
and rectangles, are
really cheap.

1028
00:44:41,816 --> 00:44:46,276 A:middle
I'm going to say that
sprites are way, way,

1029
00:44:46,276 --> 00:44:51,106 A:middle
way off the cheap scale beyond
these guys but not that far off.

1030
00:44:51,496 --> 00:44:53,466 A:middle
You can use these things a
lot where it's appropriate.

1031
00:44:54,866 --> 00:44:56,316 A:middle
These are just a
bit more expensive.

1032
00:44:57,466 --> 00:44:58,316 A:middle
You can use them a lot.

1033
00:44:59,346 --> 00:45:02,916 A:middle
These have had a ton
of love put into them

1034

1035
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1036
00:44:59,346 --> 00:45:02,916 A:middle
These have had a ton
of love put into them

1037
00:45:02,916 --> 00:45:04,206 A:middle
in this iteration of SpriteKit.

1038
00:45:04,706 --> 00:45:08,536 A:middle
And you can draw little
mini maps and, you know,

1039
00:45:08,536 --> 00:45:12,206 A:middle
compass roses, all kinds of
things like that with vectors

1040
00:45:12,206 --> 00:45:14,156 A:middle
that in previous iterations

1041
00:45:14,156 --> 00:45:17,466 A:middle
of SpriteKit you might have had
them in the judicious column.

1042
00:45:17,866 --> 00:45:19,686 A:middle
Now, they're in the
delicious column.

1043
00:45:21,556 --> 00:45:22,186 A:middle
All right.

1044
00:45:22,706 --> 00:45:27,476 A:middle
Stroked curves, now I wish
I could have, you know,

1045
00:45:27,476 --> 00:45:29,296 A:middle
a hockey stick to you
show you the cost here.

1046
00:45:30,046 --> 00:45:34,526 A:middle
These things look really
great and use a few of them

1047
00:45:34,746 --> 00:45:36,606 A:middle
and you're not going to really
hit your performance at all.

1048
00:45:36,816 --> 00:45:39,936 A:middle
Use a bunch, you know, you
might get a call from mom.

1049
00:45:41,456 --> 00:45:43,496 A:middle
Finally, filling them
in costs even more.

1050
00:45:43,496 --> 00:45:47,756 A:middle
So, I just put a little
bracket there so you know

1051
00:45:48,206 --> 00:45:50,316 A:middle
which is the cheap half and
which is the expensive half.

1052
00:45:51,496 --> 00:45:53,706 A:middle
Use the thing that's
appropriate to your game.

1053
00:45:54,916 --> 00:45:59,486 A:middle
Just because I can't stop myself
I made a fractal space pulling

1054
00:45:59,486 --> 00:46:03,626 A:middle
curve thing with tens of
thousands of points in it

1055

1056
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1057
00:45:59,486 --> 00:46:03,626 A:middle
curve thing with tens of
thousands of points in it

1058
00:46:04,036 --> 00:46:08,386 A:middle
and just to kind of say
hey, they're cheap use them.

1059
00:46:08,976 --> 00:46:10,276 A:middle
All right.

1060
00:46:10,936 --> 00:46:16,466 A:middle
EffectNodes, use EffectNodes
when you want to have a subtree

1061
00:46:16,936 --> 00:46:21,356 A:middle
of sprites or whatever that are
all going together have some

1062
00:46:21,356 --> 00:46:25,936 A:middle
kind of effect applied to them,
such as tinting or blurring.

1063
00:46:25,936 --> 00:46:32,296 A:middle
They have to be drawn
offscreen and then brought back

1064
00:46:32,516 --> 00:46:34,346 A:middle
to the frame buffer for feeling.

1065
00:46:34,706 --> 00:46:35,756 A:middle
So, there's a cost.

1066
00:46:37,046 --> 00:46:40,276 A:middle
You can get really
powerful Corelmage support.

1067
00:46:41,416 --> 00:46:45,356 A:middle
You can run very sophisticated
filters and all kinds

1068
00:46:45,356 --> 00:46:47,816 A:middle
of amazing things,
but it's expensive.

1069
00:46:49,386 --> 00:46:50,336 A:middle
Use them when you need to.

1070
00:46:51,796 --> 00:46:54,546 A:middle
Shaders are an awesome option.

1071
00:46:55,326 --> 00:46:59,866 A:middle
Whenever you don't need to have
things composited offscreen

1072
00:46:59,976 --> 00:47:02,356 A:middle
particularly and you can
just go ahead and draw,

1073

1074
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1075
00:46:59,976 --> 00:47:02,356 A:middle
particularly and you can
just go ahead and draw,

1076
00:47:02,856 --> 00:47:05,276 A:middle
shaders will save your
performance bacon.

1077
00:47:06,236 --> 00:47:07,886 A:middle
If you want to just
tint everything green,

1078
00:47:08,286 --> 00:47:09,626 A:middle
that's a really simple shader.

1079
00:47:09,626 --> 00:47:12,976 A:middle
You can just bypass, you know,
the whole processing stack,

1080
00:47:12,976 --> 00:47:14,486 A:middle
just go right out
to the hardware.

1081
00:47:14,816 --> 00:47:16,916 A:middle
So, learn about that.

1082
00:47:18,136 --> 00:47:22,436 A:middle
And shouldRasterize
just gives us a hint

1083
00:47:22,606 --> 00:47:25,976 A:middle
about what can be cached and
will hang around for a while

1084
00:47:25,976 --> 00:47:28,216 A:middle
and what needs to be
recomposited every screen.

1085
00:47:28,506 --> 00:47:33,736 A:middle
If you've got things that are
going to be static for a while,

1086
00:47:34,496 --> 00:47:37,266 A:middle
for example, maybe you've got
some kind of a HUD display

1087
00:47:37,266 --> 00:47:39,696 A:middle
that only updates once every 10
seconds but you want to have,

1088
00:47:40,146 --> 00:47:45,076 A:middle
you know, N cool glows and blurs
and real distorts and all kinds

1089
00:47:45,076 --> 00:47:47,096 A:middle
of things going on,
raster it out.

1090
00:47:47,716 --> 00:47:50,016 A:middle
There's a couple of cool
things that you can do here.

1091
00:47:50,416 --> 00:47:54,446 A:middle
You can create a texture from a
node and just specify the node,

1092
00:47:54,796 --> 00:47:56,176 A:middle
ask the view to raster
it for you

1093
00:47:56,176 --> 00:47:57,796 A:middle
and now you've got a
texture, just slap that up,

1094
00:47:57,796 --> 00:47:58,906 A:middle
it's going to cost
almost nothing.

1095
00:47:59,376 --> 00:48:01,656 A:middle
You have a CI filter.

1096

1097
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1098
00:47:59,376 --> 00:48:01,656 A:middle
You have a CI filter.

1099
00:48:02,156 --> 00:48:03,346 A:middle
There is the other
variant right there.

1100
00:48:03,346 --> 00:48:03,966 A:middle
All right.

1101
00:48:05,456 --> 00:48:07,716 A:middle
So, that's what I have
to say about effects.

1102
00:48:09,156 --> 00:48:10,326 A:middle
Now, for lighting.

1103
00:48:10,996 --> 00:48:14,806 A:middle
We have some good
introduction from Norman

1104
00:48:14,806 --> 00:48:16,056 A:middle
in the last section
about lighting.

1105
00:48:16,446 --> 00:48:18,326 A:middle
So, I'm going to talk about
the performance costs.

1106
00:48:19,166 --> 00:48:23,416 A:middle
So, the first thing that you
need to know is that, well,

1107
00:48:23,526 --> 00:48:25,766 A:middle
we're going to compute
the lighting per pixel.

1108
00:48:26,176 --> 00:48:28,566 A:middle
So, the cost is there
for proportional

1109
00:48:28,566 --> 00:48:30,596 A:middle
to the amount of lit pixels.

1110
00:48:31,626 --> 00:48:34,786 A:middle
You can optimize
that with bit masks.

1111
00:48:34,996 --> 00:48:36,616 A:middle
If you say some things
aren't going to be lit,

1112
00:48:36,616 --> 00:48:38,566 A:middle
then you're not going
to pay that cost.

1113
00:48:39,016 --> 00:48:40,426 A:middle
So, that's what that's
all about.

1114
00:48:41,006 --> 00:48:42,316 A:middle
Ambient light is free.

1115
00:48:46,856 --> 00:48:50,996 A:middle
You can have 8 lights
per sprite.

1116
00:48:51,806 --> 00:48:53,316 A:middle
Now, you're going to
pay for, you know,

1117
00:48:53,316 --> 00:48:57,716 A:middle
8 times the processing per pixel
per sprite, so weigh if you want

1118
00:48:57,716 --> 00:49:01,866 A:middle
to do that and keep the cost
down with the bit masks.

1119

1120
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1121
00:48:57,716 --> 00:49:01,866 A:middle
to do that and keep the cost
down with the bit masks.

1122
00:49:02,686 --> 00:49:04,486 A:middle
Normal maps are cheap.

1123
00:49:05,226 --> 00:49:08,816 A:middle
The shader just sees those
up, so stick normal maps on.

1124
00:49:08,816 --> 00:49:09,336 A:middle
They look great.

1125
00:49:09,816 --> 00:49:12,946 A:middle
Remember to share them.

1126
00:49:13,156 --> 00:49:18,036 A:middle
Shadows are cost proportional
to the number of lights.

1127
00:49:18,456 --> 00:49:19,606 A:middle
It's pretty much constant.

1128
00:49:20,216 --> 00:49:23,916 A:middle
So, if you turn on one shadow,
that's going to cost you one.

1129
00:49:24,376 --> 00:49:25,986 A:middle
Two shadows is going
to cost you two.

1130
00:49:26,666 --> 00:49:29,546 A:middle
So, keep the number
of those things down.

1131
00:49:30,916 --> 00:49:34,156 A:middle
You potentially have to shadow
the whole entire screen.

1132
00:49:34,636 --> 00:49:36,746 A:middle
So, they look really great.

1133
00:49:36,746 --> 00:49:38,816 A:middle
They're going to add a
lot of impact and awesome.

1134
00:49:39,336 --> 00:49:43,356 A:middle
Use them, don't abuse them.

1135
00:49:43,536 --> 00:49:43,856 A:middle
All right.

1136
00:49:44,446 --> 00:49:48,036 A:middle
So, we talked about
drawing performance,

1137
00:49:48,726 --> 00:49:52,546 A:middle
understand what controls
batching and draw order.

1138
00:49:53,146 --> 00:49:56,716 A:middle
And learn about the tools to get
insight into what's going on.

1139
00:49:58,176 --> 00:50:00,886 A:middle
Actions and constraints
are your window

1140

1141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1142
00:49:58,176 --> 00:50:00,886 A:middle
Actions and constraints
are your window

1143
00:50:01,176 --> 00:50:02,406 A:middle
into the SpriteKit engine.

1144
00:50:03,046 --> 00:50:04,706 A:middle
We improve the efficiency
all the time.

1145
00:50:04,706 --> 00:50:06,956 A:middle
The more you use actions,
the more you're going

1146
00:50:06,956 --> 00:50:08,486 A:middle
to get performance
back over time

1147
00:50:08,486 --> 00:50:10,156 A:middle
as we iterate the frameworks.

1148
00:50:11,436 --> 00:50:14,226 A:middle
Physics, understand
the cost hierarchy.

1149
00:50:14,776 --> 00:50:16,676 A:middle
Choose appropriately to
serve your game play,

1150
00:50:18,066 --> 00:50:19,086 A:middle
same with shapes.

1151
00:50:20,286 --> 00:50:23,556 A:middle
Effects: understand the
cost, use them wisely.

1152
00:50:24,646 --> 00:50:27,816 A:middle
And lighting is a cheap and
easy way to extra awesome.

1153
00:50:28,276 --> 00:50:29,656 A:middle
And I'd like you all
to make your games

1154
00:50:29,656 --> 00:50:31,246 A:middle
as awesome as possible.

1155
00:50:31,896 --> 00:50:33,346 A:middle
All right.

1156
00:50:34,356 --> 00:50:38,766 A:middle
So, today we talked about
structuring your games

1157
00:50:38,766 --> 00:50:43,976 A:middle
for scalability, understanding
how to set up scene graphs

1158
00:50:44,036 --> 00:50:46,816 A:middle
and scene graph snippets so
that you can put things together

1159
00:50:46,816 --> 00:50:47,756 A:middle
in a data-driven away.

1160
00:50:48,766 --> 00:50:50,656 A:middle
And we talked a whole
bunch about performance.

1161
00:50:52,146 --> 00:50:54,906 A:middle
For more information,
I encourage you

1162
00:50:55,476 --> 00:50:58,426 A:middle
to contact Allan
Schafer and Filip Iliescu

1163
00:50:58,906 --> 00:51:00,736 A:middle
who are our games evangelists.

1164

1165
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1166
00:50:58,906 --> 00:51:00,736 A:middle
who are our games evangelists.

1167
00:51:01,416 --> 00:51:03,626 A:middle
The SpriteKit programming
guide, recently refreshed,

1168
00:51:03,826 --> 00:51:05,546 A:middle
has a ton of interesting
information in it.

1169
00:51:06,106 --> 00:51:09,476 A:middle
And of course, there's
always the forums.

1170
00:51:09,476 --> 00:51:13,096 A:middle
And tomorrow I would love if
you could all come and visit us

1171
00:51:13,096 --> 00:51:16,946 A:middle
in the labs and talk about
what you've got going

1172
00:51:16,946 --> 00:51:18,716 A:middle
on and, you know, say hi.

1173
00:51:19,626 --> 00:51:24,436 A:middle
And with that, thanks very much
and I'll see you all later.

1174
00:51:25,508 --> 00:51:27,508 A:middle
[ Applause ]

1175
