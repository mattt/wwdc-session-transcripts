X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:00,506 --> 00:00:10,516 A:middle
[ Silence ]

2
00:00:11,016 --> 00:00:19,000 A:middle
[ Applause ]

3
00:00:19,656 --> 00:00:20,516 A:middle
>> Good afternoon.

4
00:00:20,676 --> 00:00:22,616 A:middle
My name is Katie
Skinner and I work

5
00:00:22,616 --> 00:00:24,436 A:middle
at Apple Product
Security and Privacy.

6
00:00:24,906 --> 00:00:28,756 A:middle
That means I work with teams
all across Apple on user privacy

7
00:00:28,756 --> 00:00:29,936 A:middle
and protecting our users.

8
00:00:30,446 --> 00:00:34,696 A:middle
This includes our
platforms like iOS, Siri,

9
00:00:34,846 --> 00:00:36,386 A:middle
and applications like iPhoto.

10
00:00:37,366 --> 00:00:40,586 A:middle
Today in this session, David
Stites and I are going to talk

11
00:00:40,586 --> 00:00:45,336 A:middle
about ways you can protect your
users' privacy and changes made

12
00:00:45,336 --> 00:00:48,306 A:middle
to the Apple ecosystem
to improve user privacy.

13
00:00:50,656 --> 00:00:51,486 A:middle
Thank you.

14
00:00:51,656 --> 00:00:57,756 A:middle
So, we're going to start
out talking about privacy

15
00:00:57,756 --> 00:01:00,996 A:middle
and reputation, identifiers
in iOS,

16

17
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

18
00:00:57,756 --> 00:01:00,996 A:middle
and reputation, identifiers
in iOS,

19
00:01:00,996 --> 00:01:07,436 A:middle
how to prompt your users well,
new classes for data isolation,

20
00:01:07,846 --> 00:01:09,576 A:middle
and some privacy best practices.

21
00:01:10,266 --> 00:01:15,076 A:middle
So, privacy and reputation.

22
00:01:15,606 --> 00:01:18,426 A:middle
Your users are so
important to you.

23
00:01:18,616 --> 00:01:23,376 A:middle
They're the key to your success,
so maintaining your relationship

24
00:01:23,376 --> 00:01:25,676 A:middle
with them is your
most important thing.

25
00:01:26,826 --> 00:01:28,936 A:middle
They're the people
who download your app,

26
00:01:28,936 --> 00:01:31,356 A:middle
tell their friends
how great it is,

27
00:01:31,386 --> 00:01:33,526 A:middle
don't think twice
before uploading photos,

28
00:01:34,146 --> 00:01:36,006 A:middle
or granting you access
to contents.

29
00:01:36,616 --> 00:01:38,796 A:middle
Or alternately, those
are the users

30
00:01:38,796 --> 00:01:43,736 A:middle
who will uninstall your
application or think twice

31
00:01:43,736 --> 00:01:46,036 A:middle
about using location with you.

32
00:01:47,166 --> 00:01:51,976 A:middle
So, privacy and how you protect
your users' data is a big part

33
00:01:51,976 --> 00:01:52,706 A:middle
of this.

34
00:01:54,226 --> 00:01:57,316 A:middle
Lately there's been an appetite
in the media for stories

35
00:01:57,316 --> 00:01:59,816 A:middle
about privacy, from
large stories

36
00:01:59,816 --> 00:02:01,926 A:middle
like Target to smaller ones.

37

38
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

39
00:01:59,816 --> 00:02:01,926 A:middle
like Target to smaller ones.

40
00:02:02,206 --> 00:02:04,436 A:middle
But, they continue to
appear over and over again.

41
00:02:05,266 --> 00:02:08,356 A:middle
The best bet is to be
trustworthy with your users

42
00:02:09,276 --> 00:02:11,706 A:middle
because rebuilding
user trust is hard.

43
00:02:12,016 --> 00:02:15,496 A:middle
It's much more difficult than
maintaining your users' trust.

44
00:02:15,826 --> 00:02:21,166 A:middle
Now, I'm going to talk about the
identifiers available in iOS.

45
00:02:21,726 --> 00:02:24,116 A:middle
There are three purpose-scoped
identifiers.

46
00:02:25,196 --> 00:02:30,786 A:middle
The first one is the application
identifier, NSUUID UUID.

47
00:02:31,816 --> 00:02:33,906 A:middle
The second one is the
vendor identifier,

48
00:02:34,896 --> 00:02:38,396 A:middle
UIDevice currentDevice,
identifierForVendor.

49
00:02:39,196 --> 00:02:41,686 A:middle
The third one, advertising
identifier,

50
00:02:42,196 --> 00:02:45,876 A:middle
UIDevice currentDevice
identifierForAdvertising.

51
00:02:46,446 --> 00:02:50,986 A:middle
Now, I'm not going to talk about
these in a lot of detail today.

52
00:02:51,326 --> 00:02:54,856 A:middle
Last year we talked about
them, how to use them,

53
00:02:55,126 --> 00:02:56,836 A:middle
their behavior, lifetime.

54
00:02:57,066 --> 00:02:59,736 A:middle
So if you're new to the
platform, you should go and look

55
00:02:59,736 --> 00:03:03,186 A:middle
at "Protecting User's
Privacy" from last year's WWDC.

56

57
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

58
00:02:59,736 --> 00:03:03,186 A:middle
at "Protecting User's
Privacy" from last year's WWDC.

59
00:03:03,246 --> 00:03:05,236 A:middle
It's a great place to start.

60
00:03:06,176 --> 00:03:08,776 A:middle
Now, this is a great
reference slide to look

61
00:03:08,776 --> 00:03:11,586 A:middle
at when you're thinking
about which identifier to use

62
00:03:11,586 --> 00:03:12,796 A:middle
for a particular use-case.

63
00:03:12,926 --> 00:03:14,876 A:middle
I'm going to pull
out a couple points.

64
00:03:16,076 --> 00:03:17,956 A:middle
The application identifier
is used

65
00:03:17,956 --> 00:03:21,706 A:middle
to identify something
uniquely within a single app.

66
00:03:22,476 --> 00:03:24,606 A:middle
The vendor identifier
can be used

67
00:03:24,606 --> 00:03:28,116 A:middle
across multiple applications
and it's all in the same device

68
00:03:28,416 --> 00:03:30,346 A:middle
with the same team ID.

69
00:03:30,676 --> 00:03:34,356 A:middle
Now, the application identifier
you need to manage yourself,

70
00:03:35,406 --> 00:03:38,366 A:middle
but the vendor identifier
iOS will manage for you.

71
00:03:39,326 --> 00:03:42,166 A:middle
The advertising identifier
should be used

72
00:03:42,166 --> 00:03:44,746 A:middle
for all user tracking
for advertising,

73
00:03:44,746 --> 00:03:46,156 A:middle
or related to advertising.

74
00:03:46,686 --> 00:03:52,306 A:middle
Now, there's been a lot
of discussion about how

75
00:03:52,306 --> 00:03:54,016 A:middle
to use the advertising
identifier,

76
00:03:54,016 --> 00:03:55,666 A:middle
what are the supported
use-cases?

77
00:03:56,286 --> 00:03:58,946 A:middle
But, before we get into that
I want to allay one point

78
00:03:58,946 --> 00:04:01,626 A:middle
with you guys, is be
clear with your users

79

80
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

81
00:03:58,946 --> 00:04:01,626 A:middle
with you guys, is be
clear with your users

82
00:04:02,006 --> 00:04:03,846 A:middle
about how you advertise,

83
00:04:04,096 --> 00:04:06,816 A:middle
especially if you're using
their user data as part

84
00:04:06,816 --> 00:04:08,256 A:middle
of your advertising practices.

85
00:04:09,616 --> 00:04:12,346 A:middle
You should not cache the
advertising identifier.

86
00:04:12,756 --> 00:04:14,586 A:middle
You need to respect
a user's ability

87
00:04:14,586 --> 00:04:16,245 A:middle
to reset this identifier.

88
00:04:17,106 --> 00:04:19,565 A:middle
They can reset it under
Settings, Privacy,

89
00:04:19,696 --> 00:04:24,206 A:middle
Advertising using the Reset
Advertising ID button.

90
00:04:25,516 --> 00:04:29,436 A:middle
Also this year, for TestFlight
apps the advertising identifier

91
00:04:29,436 --> 00:04:32,086 A:middle
will be different each
time you call the API.

92
00:04:32,926 --> 00:04:34,726 A:middle
This is another reason
why you shouldn't count

93
00:04:34,726 --> 00:04:37,646 A:middle
on the advertising identifier
to be a stable value.

94
00:04:38,196 --> 00:04:44,146 A:middle
In iOS we've given users a
choice about how they want

95
00:04:44,146 --> 00:04:45,476 A:middle
to be served advertising

96
00:04:45,926 --> 00:04:48,346 A:middle
and that really comes
back to Limit Ad Tracking.

97
00:04:52,376 --> 00:04:55,136 A:middle
Before using the advertising
identifier you need

98
00:04:55,136 --> 00:04:57,446 A:middle
to check the value
of Limit Ad Tracking.

99
00:04:57,796 --> 00:05:01,346 A:middle
This is ASIdentifierManager
sharedManager

100

101
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

102
00:04:57,796 --> 00:05:01,346 A:middle
This is ASIdentifierManager
sharedManager

103
00:05:01,346 --> 00:05:03,396 A:middle
advertisingTrackingEnabled.

104
00:05:05,336 --> 00:05:08,916 A:middle
Note, this may be controlled --

105
00:05:08,916 --> 00:05:10,576 A:middle
this can be controlled
by restrictions,

106
00:05:11,176 --> 00:05:14,386 A:middle
and with Family Sharing this
year this may affect more

107
00:05:14,386 --> 00:05:15,116 A:middle
of your users.

108
00:05:15,756 --> 00:05:19,306 A:middle
Even if you, yourself,
are not writing the code

109
00:05:19,516 --> 00:05:21,216 A:middle
to handle the advertising
identifier

110
00:05:21,466 --> 00:05:24,176 A:middle
and you're using a third
party advertising library,

111
00:05:24,506 --> 00:05:28,066 A:middle
you need to ensure that that
library is also checking Limit

112
00:05:28,136 --> 00:05:31,056 A:middle
Ad Tracking before using
the advertising identifier.

113
00:05:31,576 --> 00:05:36,626 A:middle
When advertisingTracking
Enabled is set to No,

114
00:05:37,096 --> 00:05:40,886 A:middle
the advertising identifier
is not permitted to be used

115
00:05:41,196 --> 00:05:45,456 A:middle
to collect data for, or to
serve, targeted advertising.

116
00:05:45,936 --> 00:05:51,496 A:middle
You can use it only for
the purposes enumerated

117
00:05:51,496 --> 00:05:54,136 A:middle
in the iOS Program
License Agreement.

118
00:05:54,616 --> 00:05:58,086 A:middle
This includes frequency
capping, conversion events,

119
00:05:58,976 --> 00:06:03,566 A:middle
fraud detection for advertising,
and debugging for advertising.

120

121
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

122
00:05:58,976 --> 00:06:03,566 A:middle
fraud detection for advertising,
and debugging for advertising.

123
00:06:03,896 --> 00:06:07,986 A:middle
Note, for fraud detection and
debugging this can only be used,

124
00:06:08,066 --> 00:06:10,586 A:middle
not for all fraud detection,
not for all debugging,

125
00:06:10,716 --> 00:06:12,846 A:middle
only debugging advertising
issues.

126
00:06:15,916 --> 00:06:19,416 A:middle
This year in iTunes Connect,
now you need to explain

127
00:06:19,926 --> 00:06:22,886 A:middle
and attribute why you're using
the advertising identifier

128
00:06:22,886 --> 00:06:24,226 A:middle
for which of these uses.

129
00:06:24,956 --> 00:06:27,076 A:middle
You should select one,
two, or three depending

130
00:06:27,076 --> 00:06:29,506 A:middle
on how you use the
advertising identifier.

131
00:06:30,366 --> 00:06:34,176 A:middle
The first one's pretty
clear; serve advertisements.

132
00:06:34,756 --> 00:06:37,876 A:middle
The second one, attribute
app installation,

133
00:06:38,146 --> 00:06:41,396 A:middle
now once a user installs
your application,

134
00:06:41,556 --> 00:06:44,186 A:middle
this means attributing
that installation

135
00:06:44,406 --> 00:06:46,316 A:middle
to an advertisement
they may have seen

136
00:06:46,496 --> 00:06:48,356 A:middle
in a different application.

137
00:06:48,916 --> 00:06:53,716 A:middle
The last one, attribute an
action, this could be Coins Bot

138
00:06:53,986 --> 00:06:55,736 A:middle
or any other in-app purchase.

139
00:06:56,996 --> 00:07:00,386 A:middle
Attribute that action taken to a
previously served advertisement,

140

141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

142
00:06:56,996 --> 00:07:00,386 A:middle
Attribute that action taken to a
previously served advertisement,

143
00:07:00,386 --> 00:07:05,046 A:middle
either within your app
or another application.

144
00:07:06,936 --> 00:07:09,776 A:middle
Now, here's where you go

145
00:07:09,776 --> 00:07:11,726 A:middle
and make these choices
in iTunes Connect.

146
00:07:11,726 --> 00:07:15,356 A:middle
You can see the first thing that
you do is say, "Are you going

147
00:07:15,356 --> 00:07:17,406 A:middle
to use the advertising
identifier, or not?"

148
00:07:18,216 --> 00:07:21,556 A:middle
Then select which of the
three choices or more than one

149
00:07:21,696 --> 00:07:24,146 A:middle
that you'll be using the
advertising identifier for.

150
00:07:24,726 --> 00:07:26,716 A:middle
And then lastly, you must say

151
00:07:26,716 --> 00:07:29,606 A:middle
that you will check Limit
Ad Tracking before using the

152
00:07:29,606 --> 00:07:30,786 A:middle
advertising identifier.

153
00:07:31,136 --> 00:07:37,856 A:middle
Now, I'm going to talk about a
couple changes coming to iOS 8

154
00:07:37,926 --> 00:07:41,086 A:middle
and OS X Yosemite that
are privacy-related.

155
00:07:41,656 --> 00:07:45,996 A:middle
The first one's Family Sharing.

156
00:07:46,906 --> 00:07:50,186 A:middle
This means that this year
there'll be an increased number

157
00:07:50,186 --> 00:07:53,096 A:middle
of child accounts within
the Apple ecosystem.

158
00:07:55,056 --> 00:07:57,386 A:middle
There's a great talk by Chris
Espinoza [assumed spelling]

159
00:07:57,386 --> 00:08:00,446 A:middle
right after ours that will go
further into the implications

160

161
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

162
00:07:57,386 --> 00:08:00,446 A:middle
right after ours that will go
further into the implications

163
00:08:00,446 --> 00:08:03,066 A:middle
that you should be thinking
about as a result of this,

164
00:08:03,356 --> 00:08:05,596 A:middle
so I would encourage everyone
to stick around after our talk

165
00:08:05,596 --> 00:08:06,746 A:middle
to hear "Kids and Apps".

166
00:08:07,556 --> 00:08:10,276 A:middle
He'll talk a little bit
more about the relevant laws

167
00:08:10,356 --> 00:08:13,076 A:middle
like COPPA to be
thinking about for this,

168
00:08:13,416 --> 00:08:19,436 A:middle
for the additional number
of children on this system.

169
00:08:19,436 --> 00:08:22,646 A:middle
So, here's the talk,
right in here.

170
00:08:22,846 --> 00:08:26,316 A:middle
In iOS 8 the Mac address
during probe requests

171
00:08:26,816 --> 00:08:29,436 A:middle
and probe responses, as
well as region monitoring,

172
00:08:29,586 --> 00:08:32,246 A:middle
will be locally administrated
and random.

173
00:08:33,336 --> 00:08:36,376 A:middle
This means if you
interact or design a piece

174
00:08:36,376 --> 00:08:38,525 A:middle
of external hardware
you should not count

175
00:08:38,686 --> 00:08:41,616 A:middle
on a stable Mac address
until after authentication.

176
00:08:42,936 --> 00:08:44,436 A:middle
Go test some iOS state

177
00:08:44,436 --> 00:08:46,616 A:middle
and understand the impact
this may have for you.

178
00:08:47,116 --> 00:08:51,506 A:middle
This year in Safari
there's a new setting.

179
00:08:51,976 --> 00:08:54,806 A:middle
This will allow users to
block third party cookies

180
00:08:54,976 --> 00:08:59,446 A:middle
and it is available
both on iOS and OS X.

181
00:08:59,746 --> 00:09:02,386 A:middle
Now, I assume most of
you, if not all of you,

182

183
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

184
00:08:59,746 --> 00:09:02,386 A:middle
Now, I assume most of
you, if not all of you,

185
00:09:02,386 --> 00:09:04,226 A:middle
in the audience have
a web presence,

186
00:09:04,596 --> 00:09:07,726 A:middle
even if it's only a website
that points and has a link

187
00:09:07,726 --> 00:09:09,906 A:middle
to the App Store, you
have a web presence.

188
00:09:10,166 --> 00:09:13,546 A:middle
So, go on iOS, enable
this setting,

189
00:09:13,546 --> 00:09:14,676 A:middle
and visit your web presence.

190
00:09:14,786 --> 00:09:18,056 A:middle
Understand the impact that this
will have on you and ensure

191
00:09:18,236 --> 00:09:20,686 A:middle
that your users will still be
able to do the things they need

192
00:09:20,686 --> 00:09:25,826 A:middle
to do on your website; go to the
App Store, FAQ, whatever it is.

193
00:09:26,936 --> 00:09:29,606 A:middle
Here you can see where you
can go and find this setting.

194
00:09:29,926 --> 00:09:32,586 A:middle
On iOS it's under
Settings, Safari,

195
00:09:32,816 --> 00:09:34,736 A:middle
in the Privacy and
Security Section.

196
00:09:35,956 --> 00:09:38,986 A:middle
On OS X you can find this

197
00:09:39,276 --> 00:09:42,266 A:middle
under Safari Preferences
on the Privacy tab.

198
00:09:42,606 --> 00:09:44,866 A:middle
Note, this setting
is not on by default

199
00:09:45,106 --> 00:09:47,206 A:middle
but this is a choice
that users can make.

200
00:09:50,896 --> 00:09:54,816 A:middle
Also in iOS, we've now
given the ability for you

201
00:09:54,816 --> 00:09:56,666 A:middle
to utilize the people picker

202
00:09:56,846 --> 00:09:59,656 A:middle
without requesting
Contacts access

203
00:09:59,656 --> 00:10:01,696 A:middle
to the full address
book from your users.

204

205
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

206
00:09:59,656 --> 00:10:01,696 A:middle
to the full address
book from your users.

207
00:10:02,056 --> 00:10:03,366 A:middle
This is a great win for apps

208
00:10:03,366 --> 00:10:04,886 A:middle
that don't need the
whole address book,

209
00:10:05,606 --> 00:10:08,186 A:middle
that maybe only you
need to send an invite

210
00:10:08,186 --> 00:10:10,406 A:middle
to one person you're
going to share every

211
00:10:10,406 --> 00:10:12,036 A:middle
so often with a single user.

212
00:10:12,796 --> 00:10:17,306 A:middle
But note, this will provide only
a static -- static information.

213
00:10:17,306 --> 00:10:21,946 A:middle
If the user then later
goes and decides to change

214
00:10:22,046 --> 00:10:24,376 A:middle
or update this contact
you will not receive any

215
00:10:24,376 --> 00:10:25,436 A:middle
of that information.

216
00:10:25,946 --> 00:10:31,966 A:middle
In a future seed, some of the
iOS 7 delegate methods are going

217
00:10:31,966 --> 00:10:35,716 A:middle
to be deprecated so you
need to update and migrate

218
00:10:35,716 --> 00:10:37,386 A:middle
if you're currently
using the people picker.

219
00:10:38,176 --> 00:10:41,356 A:middle
We have a great sample code
project for you to go and check

220
00:10:41,356 --> 00:10:44,456 A:middle
out and see how to
implement on iOS 8.

221
00:10:44,456 --> 00:10:49,136 A:middle
These are the delegate methods
that will be deprecated.

222
00:10:49,326 --> 00:10:52,166 A:middle
ABPeoplePicker
NavigationController Delegate

223
00:10:52,566 --> 00:10:54,316 A:middle
peoplePicker
NavigationController

224
00:10:54,496 --> 00:10:56,596 A:middle
shouldContinueAfterSelecting
Person

225
00:10:56,966 --> 00:10:59,006 A:middle
and shouldContinue
AfterSelectingPerson

226
00:10:59,226 --> 00:11:00,426 A:middle
:property:identifier.

227

228
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

229
00:10:59,226 --> 00:11:00,426 A:middle
:property:identifier.

230
00:11:02,376 --> 00:11:05,346 A:middle
And, we also have some new
properties and delegates

231
00:11:05,346 --> 00:11:09,326 A:middle
in iOS 8; ABPeoplePicker
NavigationController

232
00:11:09,326 --> 00:11:15,176 A:middle
.predicateForEnablingPerson,
predicateFor SelectionOfPerson,

233
00:11:15,336 --> 00:11:17,466 A:middle
and predicateFor
SelectionOfProperty.

234
00:11:18,026 --> 00:11:20,806 A:middle
And then new delegates
are ABPeoplePicker

235
00:11:21,556 --> 00:11:24,306 A:middle
NaviagionControllerDelegate
peoplePicker

236
00:11:24,306 --> 00:11:26,706 A:middle
NavigationController
:didSelectPerson

237
00:11:27,046 --> 00:11:29,676 A:middle
and didSelectPerson
:property :identifier.

238
00:11:30,146 --> 00:11:32,146 A:middle
So go and update,
and migrate early.

239
00:11:32,146 --> 00:11:37,736 A:middle
Now, I've gone through several
different privacy changes

240
00:11:37,736 --> 00:11:40,466 A:middle
and what I want to encourage
everyone here to do is

241
00:11:40,466 --> 00:11:42,936 A:middle
if they're not already
have a device on iOS 8

242
00:11:43,196 --> 00:11:45,156 A:middle
and OS X Yosemite, update now.

243
00:11:45,876 --> 00:11:48,196 A:middle
Understand the impact these
changes will have on you

244
00:11:48,196 --> 00:11:51,566 A:middle
because you have a great
experience for your users today,

245
00:11:51,566 --> 00:11:54,646 A:middle
and you don't want to mess it
up as they move and migrate

246
00:11:54,856 --> 00:11:57,116 A:middle
to iOS 8; keep a
consistent great experience.

247
00:11:58,436 --> 00:12:00,086 A:middle
Now, I'm going to
hand it over to David,

248

249
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

250
00:11:58,436 --> 00:12:00,086 A:middle
Now, I'm going to
hand it over to David,

251
00:12:00,086 --> 00:12:02,576 A:middle
who's going to talk more
about the keys to prompting

252
00:12:02,576 --> 00:12:05,546 A:middle
with purpose and how to
be successful at that.

253
00:12:07,516 --> 00:12:11,626 A:middle
[ Applause ]

254
00:12:12,126 --> 00:12:13,366 A:middle
>> Thank you and good afternoon.

255
00:12:13,716 --> 00:12:15,586 A:middle
As Katie mentioned, I'm
going to talk to you

256
00:12:15,586 --> 00:12:19,456 A:middle
about both prompting your users
with purpose and then dive

257
00:12:19,456 --> 00:12:25,636 A:middle
into data isolation and how
it works on both iOS and OS X.

258
00:12:26,356 --> 00:12:29,586 A:middle
Prompting with purpose means
designing the experience your

259
00:12:29,586 --> 00:12:31,476 A:middle
users will receive
when they're confronted

260
00:12:31,476 --> 00:12:32,736 A:middle
with a privacy dialog.

261
00:12:32,736 --> 00:12:36,826 A:middle
There are five core
principles that form the basis

262
00:12:36,926 --> 00:12:41,536 A:middle
for prompting with purpose;
consent, transparency, context,

263
00:12:42,046 --> 00:12:44,526 A:middle
clarity, and minimization,
and we'll talk

264
00:12:44,526 --> 00:12:46,586 A:middle
about all of those coming up.

265
00:12:47,386 --> 00:12:50,336 A:middle
The first principle is consent.

266
00:12:51,016 --> 00:12:53,466 A:middle
Consent is getting
your user's approval

267
00:12:53,466 --> 00:12:54,836 A:middle
to access their user data.

268
00:12:55,006 --> 00:12:56,646 A:middle
This should already
be familiar to you.

269
00:12:57,246 --> 00:12:59,836 A:middle
The model that Apple has
chosen to adopt is the Just

270
00:12:59,836 --> 00:13:03,026 A:middle
in Time model, meaning that
consent is only presented

271

272
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

273
00:12:59,836 --> 00:13:03,026 A:middle
in Time model, meaning that
consent is only presented

274
00:13:03,026 --> 00:13:06,286 A:middle
to the user at the exact
time that the access occurs.

275
00:13:07,396 --> 00:13:10,706 A:middle
We think that Just in Time
access is a key differentiating

276
00:13:10,706 --> 00:13:12,006 A:middle
feature of our platform.

277
00:13:12,246 --> 00:13:14,496 A:middle
If the user decides
to allow access,

278
00:13:14,496 --> 00:13:15,486 A:middle
then you'll get data back.

279
00:13:15,856 --> 00:13:18,756 A:middle
And, if they decide not to allow
access, you won't get anything.

280
00:13:20,696 --> 00:13:23,356 A:middle
Transparency is the
second principle.

281
00:13:24,126 --> 00:13:26,386 A:middle
Transparency is complementary
to consent

282
00:13:26,746 --> 00:13:28,106 A:middle
in that it answers the question

283
00:13:28,106 --> 00:13:30,746 A:middle
of why an app needs
access to user data.

284
00:13:31,886 --> 00:13:33,696 A:middle
Apps are given a dedicated space

285
00:13:33,736 --> 00:13:35,786 A:middle
to tell users called
a purpose string.

286
00:13:36,276 --> 00:13:38,266 A:middle
And purpose strings
are as an apps chance

287
00:13:38,266 --> 00:13:41,706 A:middle
to explain the proposition
value of allowing that access.

288
00:13:41,856 --> 00:13:44,926 A:middle
If the user understands that
there might be more willing

289
00:13:44,926 --> 00:13:46,616 A:middle
to allow your application
access.

290
00:13:46,946 --> 00:13:49,586 A:middle
In this example, Calendar
wants to use Location

291
00:13:49,586 --> 00:13:52,376 A:middle
to estimate travel times and
improve location searches.

292
00:13:52,936 --> 00:13:58,226 A:middle
The third principle is context.

293
00:13:58,906 --> 00:14:02,676 A:middle
Context is making it clear
to your users what action led

294

295
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

296
00:13:58,906 --> 00:14:02,676 A:middle
Context is making it clear
to your users what action led

297
00:14:02,676 --> 00:14:03,906 A:middle
to the consent dialog.

298
00:14:04,536 --> 00:14:05,676 A:middle
Consider this example.

299
00:14:06,486 --> 00:14:07,546 A:middle
Here we have the App Store.

300
00:14:07,906 --> 00:14:10,626 A:middle
And, when the user
goes to the Near Me tab

301
00:14:10,966 --> 00:14:15,596 A:middle
and taps the Show Popular and
Near Me link they're presented

302
00:14:15,596 --> 00:14:18,906 A:middle
with this dialog saying the app
would like to use their location

303
00:14:19,366 --> 00:14:21,456 A:middle
to find relevant apps near them.

304
00:14:22,986 --> 00:14:27,816 A:middle
Contrast this with a conga line
of alerts that are presented

305
00:14:27,816 --> 00:14:30,726 A:middle
to the user right when the
application first opens;

306
00:14:31,076 --> 00:14:32,656 A:middle
not a great user experience.

307
00:14:33,196 --> 00:14:36,086 A:middle
Conga lines don't work
because they're not presented

308
00:14:36,086 --> 00:14:38,326 A:middle
at the correct time so
make sure you choose

309
00:14:38,326 --> 00:14:41,936 A:middle
to present yours at
the correct time.

310
00:14:42,776 --> 00:14:45,976 A:middle
The fourth principle is clarity.

311
00:14:46,666 --> 00:14:49,506 A:middle
Clarity is distilling the
purpose of your request

312
00:14:49,506 --> 00:14:52,686 A:middle
down to its essence because it
helps users build clear mental

313
00:14:52,686 --> 00:14:56,116 A:middle
models about what you're going
to do with their user data.

314
00:14:56,276 --> 00:14:56,966 A:middle
You can think of this

315
00:14:56,996 --> 00:14:59,876 A:middle
as improving the why,
and when, and where.

316

317
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

318
00:15:00,716 --> 00:15:03,786 A:middle
Give the user a guide
of what they can expect

319
00:15:03,786 --> 00:15:04,876 A:middle
from your application.

320
00:15:05,186 --> 00:15:07,756 A:middle
Be concise, but include
sufficient detail.

321
00:15:08,306 --> 00:15:10,916 A:middle
In this example, Reminders
clearly states what it's using

322
00:15:10,916 --> 00:15:11,696 A:middle
Location for.

323
00:15:13,916 --> 00:15:17,036 A:middle
The last and fifth
principle is minimization,

324
00:15:17,106 --> 00:15:18,446 A:middle
and this one's super simple

325
00:15:18,836 --> 00:15:21,236 A:middle
because it's exactly
what it sounds like.

326
00:15:21,446 --> 00:15:24,866 A:middle
If you don't need access to that
data then you shouldn't ask.

327
00:15:25,416 --> 00:15:31,106 A:middle
Scared users are more
likely to tap Don't Allow.

328
00:15:31,986 --> 00:15:34,966 A:middle
All of the consent dialogs
support a purpose string,

329
00:15:35,686 --> 00:15:37,546 A:middle
and their use is
highly encouraged

330
00:15:37,586 --> 00:15:39,306 A:middle
because it makes what
you're going to do

331
00:15:39,306 --> 00:15:41,646 A:middle
with the user data
very transparent.

332
00:15:42,996 --> 00:15:46,426 A:middle
All of the data classes
support one purpose string,

333
00:15:46,566 --> 00:15:50,076 A:middle
except for Location Services
in iOS 8, which supports two,

334
00:15:50,076 --> 00:15:52,386 A:middle
and we'll talk about
that coming up.

335
00:15:52,656 --> 00:15:54,156 A:middle
You can set these
purpose strings

336
00:15:54,186 --> 00:15:56,086 A:middle
in your application's
info.plist.

337
00:15:56,476 --> 00:15:58,836 A:middle
And for those of you who
localize your applications,

338
00:15:59,056 --> 00:16:00,716 A:middle
you can set the localized
versions

339

340
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

341
00:15:59,056 --> 00:16:00,716 A:middle
you can set the localized
versions

342
00:16:00,866 --> 00:16:02,526 A:middle
in Localizeable.strings.

343
00:16:03,286 --> 00:16:07,956 A:middle
What you need to do is
you need to go to X code,

344
00:16:08,146 --> 00:16:11,226 A:middle
select your target,
select the info.plist,

345
00:16:12,156 --> 00:16:13,976 A:middle
and then fill out the strings.

346
00:16:14,596 --> 00:16:17,606 A:middle
You should look for the
privacy-data class keys.

347
00:16:18,236 --> 00:16:22,706 A:middle
Now, X code is simply a
frontend to the info.plist so,

348
00:16:22,706 --> 00:16:25,716 A:middle
if you want to, you can always
edit the info.plist manually.

349
00:16:26,206 --> 00:16:28,816 A:middle
In this example we see we have a
new application here that wants

350
00:16:28,816 --> 00:16:32,796 A:middle
to access Camera and Microphone
so that they can help you record

351
00:16:32,796 --> 00:16:34,946 A:middle
that new music video
for your album.

352
00:16:35,546 --> 00:16:41,406 A:middle
Now, there are several new
purpose string keys on iOS,

353
00:16:42,006 --> 00:16:46,366 A:middle
including Location, Camera,
HealthKit, and Motion Activity.

354
00:16:47,026 --> 00:16:49,336 A:middle
The reason Motion
Activity is listed here is

355
00:16:49,336 --> 00:16:53,406 A:middle
because it was announced
after WWDC last year.

356
00:16:54,206 --> 00:16:57,296 A:middle
You can always find the full
list of purpose string keys

357
00:16:57,716 --> 00:17:00,846 A:middle
in the Information Property
List Key Reference located

358

359
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

360
00:16:57,716 --> 00:17:00,846 A:middle
in the Information Property
List Key Reference located

361
00:17:00,846 --> 00:17:02,236 A:middle
on the Apple Developer website.

362
00:17:02,756 --> 00:17:08,386 A:middle
When a user wants to go manage
their privacy settings on iOS,

363
00:17:08,935 --> 00:17:11,945 A:middle
they understand that they need
to look in the Settings app,

364
00:17:12,175 --> 00:17:14,965 A:middle
then Privacy, and then
look for the data class

365
00:17:14,965 --> 00:17:15,886 A:middle
that they want to manage.

366
00:17:16,546 --> 00:17:21,076 A:middle
Similarly, on OS X users will go
to System Preferences, Security

367
00:17:21,076 --> 00:17:23,036 A:middle
and Privacy, then Privacy.

368
00:17:23,626 --> 00:17:25,876 A:middle
This is what Apple and
developers have tried

369
00:17:25,876 --> 00:17:27,286 A:middle
to communicate with users.

370
00:17:28,606 --> 00:17:30,106 A:middle
However, users may want

371
00:17:30,106 --> 00:17:32,406 A:middle
to update their privacy
settings from time to time.

372
00:17:33,156 --> 00:17:35,186 A:middle
Perhaps your application
came out with a new feature

373
00:17:35,186 --> 00:17:36,416 A:middle
and they want to
take advantage of it,

374
00:17:37,126 --> 00:17:39,446 A:middle
or perhaps they've just simply
changed their mind on one

375
00:17:39,446 --> 00:17:40,616 A:middle
of their privacy settings.

376
00:17:41,456 --> 00:17:45,276 A:middle
We're excited to give you
a brand new ability today

377
00:17:45,616 --> 00:17:48,426 A:middle
to send users directly
to their privacy settings

378
00:17:48,616 --> 00:17:49,826 A:middle
so that they can manage them.

379
00:17:51,186 --> 00:17:55,176 A:middle
You can do that with
UIApplication sharedApplication

380
00:17:55,566 --> 00:17:57,966 A:middle
openURL and then pass it a URL

381
00:17:57,966 --> 00:18:01,356 A:middle
with a string UIApplication
OpenSettings URLString.

382

383
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

384
00:17:57,966 --> 00:18:01,356 A:middle
with a string UIApplication
OpenSettings URLString.

385
00:18:03,076 --> 00:18:07,026 A:middle
This is going to
drop them directly

386
00:18:07,026 --> 00:18:08,256 A:middle
into their settings bundle.

387
00:18:08,436 --> 00:18:11,286 A:middle
For each application
installed on iOS 8,

388
00:18:11,636 --> 00:18:14,146 A:middle
the device will now have
their own settings entries,

389
00:18:14,406 --> 00:18:16,616 A:middle
as well as full privacy
settings.

390
00:18:17,216 --> 00:18:20,016 A:middle
Users can go to these settings
and manage those settings.

391
00:18:20,436 --> 00:18:23,366 A:middle
If your application already
has a settings bundle,

392
00:18:23,746 --> 00:18:25,826 A:middle
then these entries
will be prepended to it

393
00:18:26,716 --> 00:18:30,096 A:middle
so you don't have to worry
about losing your settings.

394
00:18:30,466 --> 00:18:37,166 A:middle
All of the things
that we've talked

395
00:18:37,166 --> 00:18:40,046 A:middle
about so far form the
principles for data isolation.

396
00:18:40,306 --> 00:18:42,316 A:middle
For the developers
who are new out there,

397
00:18:42,316 --> 00:18:46,036 A:middle
data isolation is a technical
design where the OS intervenes

398
00:18:46,036 --> 00:18:48,576 A:middle
between an application
and the user's data

399
00:18:48,576 --> 00:18:49,866 A:middle
on behalf of the user.

400
00:18:50,386 --> 00:18:53,826 A:middle
This occurs outside the address
space of your process, however,

401
00:18:53,826 --> 00:18:56,036 A:middle
it's completely transparent
to your application.

402
00:18:56,686 --> 00:19:00,146 A:middle
Just simply calling the existing
APIs will help you gather

403

404
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

405
00:18:56,686 --> 00:19:00,146 A:middle
Just simply calling the existing
APIs will help you gather

406
00:19:00,146 --> 00:19:02,006 A:middle
consent and inform the user.

407
00:19:02,366 --> 00:19:05,366 A:middle
If they decide to
allow the application

408
00:19:05,366 --> 00:19:07,076 A:middle
to access the data,
you'll get data back.

409
00:19:07,586 --> 00:19:08,966 A:middle
And, if they don't allow access,

410
00:19:09,006 --> 00:19:11,046 A:middle
then you will receive
nothing back.

411
00:19:12,416 --> 00:19:17,006 A:middle
There are several new data
classes and updated data classes

412
00:19:17,006 --> 00:19:21,836 A:middle
on iOS 8, including
Location, Contacts, Camera,

413
00:19:21,946 --> 00:19:25,646 A:middle
which is now worldwide, Motion
Activity, and HealthKit.

414
00:19:26,116 --> 00:19:32,286 A:middle
OS X Yosemite supports all the
same data classes that it did

415
00:19:32,286 --> 00:19:36,626 A:middle
in OS X Mavericks;
Location, Contacts, Calendars,

416
00:19:36,626 --> 00:19:37,926 A:middle
Reminders, and Social.

417
00:19:37,926 --> 00:19:40,586 A:middle
However, there were no
new additions or updates.

418
00:19:44,256 --> 00:19:46,486 A:middle
If you're already
shipping an application

419
00:19:46,486 --> 00:19:47,616 A:middle
on the App Store, that's great!

420
00:19:48,006 --> 00:19:51,746 A:middle
This data isolation applies to
your application from day-one.

421
00:19:51,746 --> 00:19:53,216 A:middle
You don't have to recompile

422
00:19:53,336 --> 00:19:55,506 A:middle
or resubmit your
application to the App Store.

423
00:19:55,996 --> 00:19:58,266 A:middle
However, certain changes
can help you improve the

424
00:19:58,266 --> 00:19:59,396 A:middle
user experience.

425
00:19:59,606 --> 00:20:02,516 A:middle
For example, if you
are accessing Camera,

426

427
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

428
00:19:59,606 --> 00:20:02,516 A:middle
For example, if you
are accessing Camera,

429
00:20:02,766 --> 00:20:05,146 A:middle
new this year we've added
that to data isolation,

430
00:20:05,466 --> 00:20:08,326 A:middle
so additional UI might
be helpful to explain

431
00:20:08,326 --> 00:20:11,016 A:middle
to the user why they're
receiving a black screen,

432
00:20:11,016 --> 00:20:13,306 A:middle
or essentially all zeroes
in their video stream.

433
00:20:14,196 --> 00:20:18,246 A:middle
Also, adding purpose strings can
help clarify why you need access

434
00:20:18,336 --> 00:20:21,366 A:middle
to this data.

435
00:20:21,866 --> 00:20:23,776 A:middle
So, now that we know
what data isolation is,

436
00:20:24,396 --> 00:20:28,696 A:middle
let's briefly discuss what
that looks like on OS X.

437
00:20:30,486 --> 00:20:35,146 A:middle
On OS X, when an application
calls the purpose specific API,

438
00:20:35,806 --> 00:20:37,736 A:middle
the OS will handle that request

439
00:20:37,736 --> 00:20:39,406 A:middle
and present the dialog
to the user.

440
00:20:39,506 --> 00:20:43,046 A:middle
For example, if you call
ABAddressBook sharedAddressBook

441
00:20:43,396 --> 00:20:46,166 A:middle
ABPerson alloc init then

442
00:20:46,196 --> 00:20:48,746 A:middle
that will call the system
to pop up the dialog.

443
00:20:49,196 --> 00:20:51,686 A:middle
On OS X the calls
are synchronous.

444
00:20:51,686 --> 00:20:55,006 A:middle
So, you're going to want to
use Grand Central Dispatch

445
00:20:55,316 --> 00:20:58,006 A:middle
and wrap the invocation
in a block

446
00:20:58,006 --> 00:21:00,816 A:middle
to keep the UI responsive
while your user decides.

447

448
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

449
00:20:58,006 --> 00:21:00,816 A:middle
to keep the UI responsive
while your user decides.

450
00:21:01,576 --> 00:21:03,846 A:middle
After the user has made
their initial decision,

451
00:21:04,226 --> 00:21:06,266 A:middle
the APIs will return
immediately.

452
00:21:09,346 --> 00:21:13,396 A:middle
As I said before, when the
user makes their decision,

453
00:21:13,396 --> 00:21:15,166 A:middle
if they decide to
grant you access,

454
00:21:15,416 --> 00:21:17,266 A:middle
then you will receive
populated objects.

455
00:21:17,686 --> 00:21:19,326 A:middle
And, if they decide
not to allow access,

456
00:21:19,326 --> 00:21:22,086 A:middle
then you will either receive
nil objects or no objects.

457
00:21:22,916 --> 00:21:26,966 A:middle
For applications that use system
services, such as Spotlight

458
00:21:26,966 --> 00:21:29,706 A:middle
or AppleScript, then
the OS will still prompt

459
00:21:29,706 --> 00:21:30,956 A:middle
on the user's behalf.

460
00:21:33,976 --> 00:21:38,696 A:middle
On OS X applications can
participate in the app Sandbox

461
00:21:38,816 --> 00:21:41,446 A:middle
and if you ship on the Mac App
Store then you are required

462
00:21:41,446 --> 00:21:42,266 A:middle
to participate.

463
00:21:42,556 --> 00:21:44,226 A:middle
For the new developers
out there,

464
00:21:44,936 --> 00:21:48,306 A:middle
the Sandbox is a security design
that isolates your process

465
00:21:48,376 --> 00:21:50,286 A:middle
from the other processes
on the system,

466
00:21:50,286 --> 00:21:52,766 A:middle
as well as the operating system.

467
00:21:53,346 --> 00:21:56,586 A:middle
Applications that are Sandboxed
typically have a tight set

468
00:21:56,586 --> 00:21:58,506 A:middle
of restrictions that
are imposed upon them.

469
00:21:59,386 --> 00:22:03,536 A:middle
So, if you're going to Sandbox
your application there's going

470

471
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

472
00:21:59,386 --> 00:22:03,536 A:middle
So, if you're going to Sandbox
your application there's going

473
00:22:03,536 --> 00:22:05,166 A:middle
to be more work that
you'll have to do

474
00:22:05,166 --> 00:22:07,656 A:middle
to get these consent
dialogs to show up.

475
00:22:08,696 --> 00:22:11,416 A:middle
You'll need to add entitlements
to your entitlements plist,

476
00:22:11,416 --> 00:22:12,966 A:middle
which we'll talk about
here in a second.

477
00:22:13,856 --> 00:22:16,736 A:middle
An important note is that if
the permissions ever change

478
00:22:16,736 --> 00:22:18,786 A:middle
in the future while your
application is running,

479
00:22:19,376 --> 00:22:21,526 A:middle
the system will prompt the
user of whether they want

480
00:22:21,526 --> 00:22:25,246 A:middle
to terminate the app immediately
or wait until its next launch

481
00:22:25,446 --> 00:22:26,996 A:middle
to make the Sandbox consistent.

482
00:22:27,556 --> 00:22:33,776 A:middle
To add the entitlements to
the application all you have

483
00:22:33,776 --> 00:22:37,786 A:middle
to do is go to the
entitlements plist or use Xcode

484
00:22:38,356 --> 00:22:39,796 A:middle
to modify those entitlements.

485
00:22:40,326 --> 00:22:41,626 A:middle
What you would do
is you would go

486
00:22:41,626 --> 00:22:44,846 A:middle
to the targets My
Application Capabilities,

487
00:22:45,176 --> 00:22:46,466 A:middle
turn on the App Sandbox,

488
00:22:47,026 --> 00:22:49,086 A:middle
and then select the
entitlements that you want.

489
00:22:49,446 --> 00:22:52,226 A:middle
You should only build with the
entitlements that you need.

490
00:22:52,606 --> 00:22:56,726 A:middle
If you're interested in learning
more about the App Sandbox,

491
00:22:56,916 --> 00:22:59,916 A:middle
there's a reference at the end
of the talk to a practical guide

492
00:22:59,916 --> 00:23:03,476 A:middle
to the App Sandbox that
was presented in WWDC 2013.

493

494
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

495
00:22:59,916 --> 00:23:03,476 A:middle
to the App Sandbox that
was presented in WWDC 2013.

496
00:23:03,996 --> 00:23:09,186 A:middle
So now that we've talked
about data isolation on OS X,

497
00:23:09,416 --> 00:23:13,256 A:middle
let's talk a little bit
about data isolation on iOS

498
00:23:13,706 --> 00:23:19,866 A:middle
and contrast it to that.

499
00:23:20,626 --> 00:23:25,976 A:middle
On iOS data isolation
is obligatory

500
00:23:26,166 --> 00:23:29,696 A:middle
because applications are built
on top of the App Sandbox.

501
00:23:30,066 --> 00:23:32,396 A:middle
However, you don't need
to add entitlements

502
00:23:32,396 --> 00:23:34,556 A:middle
to your application
as you did in OS X.

503
00:23:35,396 --> 00:23:37,846 A:middle
Also, access is asynchronous

504
00:23:38,026 --> 00:23:40,456 A:middle
so API calls will
return immediately,

505
00:23:40,926 --> 00:23:44,406 A:middle
and then data would be returned
via a block or a delegate call.

506
00:23:47,246 --> 00:23:50,856 A:middle
Unlike OS X, if the user decides
to change the permissions

507
00:23:50,856 --> 00:23:53,326 A:middle
of your application, then
you will receive a SIGKILL

508
00:23:53,326 --> 00:23:55,156 A:middle
signal immediately.

509
00:23:55,236 --> 00:23:56,526 A:middle
There is no chance to wait

510
00:23:56,736 --> 00:23:58,746 A:middle
or have the user
decide at a later time.

511

512
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

513
00:24:00,726 --> 00:24:03,196 A:middle
You need to be prepared
to handle changes

514
00:24:03,706 --> 00:24:08,316 A:middle
in permission status via change
notifications and, honestly,

515
00:24:08,316 --> 00:24:09,606 A:middle
this was a good idea anyway

516
00:24:09,606 --> 00:24:12,526 A:middle
because the user can change
their permissions at any time.

517
00:24:14,976 --> 00:24:19,746 A:middle
There's multiple ways to trigger
these data consent popups

518
00:24:20,696 --> 00:24:23,096 A:middle
and all you have to do
is simply call the API.

519
00:24:24,026 --> 00:24:26,006 A:middle
There's four new APIs in iOS

520
00:24:26,006 --> 00:24:29,416 A:middle
that will trigger these
consents; Location, Photos,

521
00:24:29,596 --> 00:24:30,906 A:middle
Camera, and HealthKit.

522
00:24:31,286 --> 00:24:37,956 A:middle
And, we're going to go over
some examples of that right now.

523
00:24:39,096 --> 00:24:43,226 A:middle
Location Services in iOS 8 now
supports two different modes

524
00:24:43,296 --> 00:24:47,196 A:middle
of updating device location;
when in use and always.

525
00:24:47,876 --> 00:24:49,806 A:middle
And the functionality
that is provided

526
00:24:49,806 --> 00:24:51,886 A:middle
in both sounds similar
to how they're named.

527
00:24:52,806 --> 00:24:55,926 A:middle
Also, depending on what
targets you want to support

528
00:24:55,926 --> 00:24:59,036 A:middle
with your binary, you may need
to conditionalize your logic

529
00:24:59,646 --> 00:25:01,146 A:middle
to call the appropriate methods.

530

531
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

532
00:24:59,646 --> 00:25:01,146 A:middle
to call the appropriate methods.

533
00:25:03,176 --> 00:25:06,806 A:middle
When in Use is exactly
what it sounds like.

534
00:25:07,906 --> 00:25:11,436 A:middle
You're only able to access
the devices location while the

535
00:25:11,436 --> 00:25:13,086 A:middle
application is in
the foreground.

536
00:25:14,406 --> 00:25:17,806 A:middle
The API that you would call is
CLLocationManager requestWhenIn

537
00:25:17,806 --> 00:25:20,916 A:middle
UseAuthorization and
the info.plist key

538
00:25:20,916 --> 00:25:23,166 A:middle
that you would use
is NSLocationWhen

539
00:25:23,366 --> 00:25:25,316 A:middle
InUseUsage Description.

540
00:25:26,236 --> 00:25:28,816 A:middle
This is a more privacy-friendly
mode

541
00:25:29,116 --> 00:25:32,256 A:middle
because applications cannot
update location while they're

542
00:25:32,256 --> 00:25:33,056 A:middle
in the background.

543
00:25:33,636 --> 00:25:37,856 A:middle
Additionally, applications won't
have access to functionalities

544
00:25:37,856 --> 00:25:39,166 A:middle
such as Region Monitoring,

545
00:25:39,636 --> 00:25:44,566 A:middle
the Significant Location
Change API, or the Visits API.

546
00:25:45,756 --> 00:25:50,476 A:middle
Also, if your application
implements the UI Capability's

547
00:25:50,616 --> 00:25:54,176 A:middle
Background modes for
Location, in their plist,

548
00:25:54,686 --> 00:25:57,216 A:middle
then if you start updating
Location in the foreground,

549
00:25:57,576 --> 00:25:59,966 A:middle
and then serialize the
application to the background,

550

551
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

552
00:26:00,666 --> 00:26:03,946 A:middle
then the OS will implicate your
application as using Location

553
00:26:03,946 --> 00:26:07,406 A:middle
in the background by drawing
a double height status bar.

554
00:26:08,156 --> 00:26:11,056 A:middle
Here we can see that where
Fitness is using our Location

555
00:26:11,056 --> 00:26:14,966 A:middle
in the background.

556
00:26:15,526 --> 00:26:17,666 A:middle
Always authorization
is the second mode.

557
00:26:18,496 --> 00:26:21,966 A:middle
Its API is CLLocationManager
requestAlways Authorization

558
00:26:21,966 --> 00:26:23,976 A:middle
and the info.plist
key that you'll need

559
00:26:23,976 --> 00:26:27,286 A:middle
to implement is NSLocationAlways
UsageDescription.

560
00:26:28,046 --> 00:26:32,296 A:middle
You should only try and use
this mode when necessary

561
00:26:32,736 --> 00:26:35,636 A:middle
because it has an increased
privacy impact to the user

562
00:26:37,496 --> 00:26:40,736 A:middle
because applications can
start accessing Location data

563
00:26:40,946 --> 00:26:43,346 A:middle
in the background and
the app has access

564
00:26:43,346 --> 00:26:46,516 A:middle
to the significant Location
Change APIs, the Visits APIs,

565
00:26:46,896 --> 00:26:49,106 A:middle
as well as the Region
Monitoring APIs.

566
00:26:49,896 --> 00:26:53,656 A:middle
The default mode
for applications

567
00:26:53,656 --> 00:26:55,866 A:middle
that are not updated
to take advantage

568
00:26:55,866 --> 00:26:59,276 A:middle
of these new APIs will
be Always authorization.

569
00:26:59,976 --> 00:27:04,236 A:middle
And, if you use Always
authorization then the OS will

570

571
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

572
00:26:59,976 --> 00:27:04,236 A:middle
And, if you use Always
authorization then the OS will

573
00:27:04,236 --> 00:27:07,536 A:middle
occasionally re-prompt the
user for access to Location.

574
00:27:08,096 --> 00:27:10,046 A:middle
You should only use this mode

575
00:27:10,076 --> 00:27:12,796 A:middle
if you think your users
will thank you for doing so.

576
00:27:16,476 --> 00:27:21,216 A:middle
So, previously on iOS 7 you
could implement this info.plist

577
00:27:21,216 --> 00:27:23,596 A:middle
key, NSLocation
UsageDescription.

578
00:27:24,266 --> 00:27:25,496 A:middle
That's now deprecated.

579
00:27:26,196 --> 00:27:29,366 A:middle
And, on iOS 8 there are
two new purpose strings,

580
00:27:29,486 --> 00:27:32,036 A:middle
NSLocationWhen
InUseUsageDescription

581
00:27:32,416 --> 00:27:35,406 A:middle
and NSLocationAlways
UsageDescription.

582
00:27:35,936 --> 00:27:40,246 A:middle
You must put one or two of these
plist keys in your info.plist.

583
00:27:40,706 --> 00:27:43,986 A:middle
Calling the APIs without
these keys will not work.

584
00:27:45,026 --> 00:27:47,496 A:middle
If you want to target
multiple operating systems

585
00:27:47,496 --> 00:27:50,726 A:middle
in a single binary then
you may need multiple keys.

586
00:27:50,726 --> 00:27:55,736 A:middle
So, let's take a look at what
a code example might look

587
00:27:55,736 --> 00:27:57,016 A:middle
like for this.

588
00:27:57,856 --> 00:28:01,506 A:middle
On iOS 7 you probably would have
had some code that looks similar

589

590
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

591
00:27:57,856 --> 00:28:01,506 A:middle
On iOS 7 you probably would have
had some code that looks similar

592
00:28:01,506 --> 00:28:03,546 A:middle
to this, CLLocationManager.

593
00:28:03,546 --> 00:28:05,056 A:middle
You get a shared manager object

594
00:28:05,436 --> 00:28:07,796 A:middle
and then you call
startUpdatingLocation.

595
00:28:09,706 --> 00:28:13,666 A:middle
This is what implicitly prompted
the user for access to location.

596
00:28:14,496 --> 00:28:17,436 A:middle
In iOS 8 we're changing that so

597
00:28:17,436 --> 00:28:21,226 A:middle
that you explicitly request
access to a user's Location

598
00:28:21,226 --> 00:28:23,926 A:middle
by calling requestWhenIn
UseAuthorization.

599
00:28:24,226 --> 00:28:28,246 A:middle
In this example we see we're
asking the Objective-C runtime,

600
00:28:28,246 --> 00:28:29,766 A:middle
"Do you respond to
the selector Request

601
00:28:29,766 --> 00:28:31,056 A:middle
When in Use Authorization?"

602
00:28:31,366 --> 00:28:34,506 A:middle
And if not, then we call
the old way of doing it.

603
00:28:34,956 --> 00:28:38,016 A:middle
Alternatively, you can
also call requestWhenInUse

604
00:28:38,016 --> 00:28:39,826 A:middle
or requestAlways Authorization.

605
00:28:41,446 --> 00:28:44,106 A:middle
Note that if you fail
a particular request,

606
00:28:44,586 --> 00:28:47,396 A:middle
either Request Always
or Request When in Use,

607
00:28:47,766 --> 00:28:50,726 A:middle
you can't request the
other mode, you're done.

608
00:28:51,476 --> 00:28:55,316 A:middle
You can't prompt up or down,
in terms of access rights.

609
00:28:56,836 --> 00:29:00,756 A:middle
So, we've talked a lot about
Location, and the changes

610

611
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

612
00:28:56,836 --> 00:29:00,756 A:middle
So, we've talked a lot about
Location, and the changes

613
00:29:00,756 --> 00:29:02,986 A:middle
to Location, and what's new.

614
00:29:03,706 --> 00:29:05,566 A:middle
Here are the important
takeaway points.

615
00:29:05,966 --> 00:29:08,776 A:middle
There's two new modes
in iOS 8 versus iOS 7,

616
00:29:09,546 --> 00:29:11,316 A:middle
and there's two new
info.plist keys

617
00:29:11,316 --> 00:29:12,846 A:middle
that you'll have to implement.

618
00:29:14,386 --> 00:29:17,466 A:middle
While there is a
bunch of implications

619
00:29:17,966 --> 00:29:21,606 A:middle
to which modes you use, you
should check out what's right

620
00:29:21,606 --> 00:29:24,316 A:middle
for your application by
going to see "What's New

621
00:29:24,316 --> 00:29:25,996 A:middle
in Core Location"
that was presented

622
00:29:25,996 --> 00:29:27,216 A:middle
on Tuesday of this week.

623
00:29:27,686 --> 00:29:33,036 A:middle
The second example I would
like to talk about is Camera.

624
00:29:33,856 --> 00:29:38,846 A:middle
In iOS 8 Camera is a
data isolated data class.

625
00:29:39,686 --> 00:29:42,086 A:middle
Here, we create an
ABCapture Session,

626
00:29:42,556 --> 00:29:45,216 A:middle
and then we create
an ABCaptureDevice,

627
00:29:46,236 --> 00:29:49,516 A:middle
and simply calling the
API AVCapture DeviceInput

628
00:29:49,976 --> 00:29:53,736 A:middle
deviceInput WithDeviceError will
present the dialog to the user.

629
00:29:54,406 --> 00:29:58,836 A:middle
While the user decides, the
video stream will be all zeroes,

630
00:29:58,836 --> 00:30:01,596 A:middle
or essentially a black
screen, so you need to be able

631

632
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

633
00:29:58,836 --> 00:30:01,596 A:middle
or essentially a black
screen, so you need to be able

634
00:30:01,596 --> 00:30:03,096 A:middle
to explain that to your user.

635
00:30:03,766 --> 00:30:06,216 A:middle
Then below, you can
either handle the failure

636
00:30:06,286 --> 00:30:10,626 A:middle
or the success as you choose.

637
00:30:11,176 --> 00:30:13,366 A:middle
The last code example I
want to show is HealthKit.

638
00:30:13,896 --> 00:30:20,656 A:middle
On this code example,
we're checking first to see

639
00:30:20,986 --> 00:30:23,986 A:middle
if HealthKit data is
available on this device.

640
00:30:24,376 --> 00:30:27,586 A:middle
Then, we're allocinitting
an HKHealthStore and asking

641
00:30:27,836 --> 00:30:30,876 A:middle
for access to the heart
rate type identifier.

642
00:30:31,106 --> 00:30:34,026 A:middle
This is an important
point because access

643
00:30:34,026 --> 00:30:37,236 A:middle
to HealthKit data types
is very, very granular.

644
00:30:37,806 --> 00:30:41,136 A:middle
And, you should only ask for
access to the data classes

645
00:30:41,136 --> 00:30:42,936 A:middle
that you're going
to actively use.

646
00:30:43,426 --> 00:30:46,826 A:middle
What you would do then is
call requestAuthorization

647
00:30:46,826 --> 00:30:50,626 A:middle
ToShareTypes completion
to prompt the user.

648
00:30:51,456 --> 00:30:53,606 A:middle
Now, you can't check
to see whether

649
00:30:53,606 --> 00:30:57,216 A:middle
or not the user gave you access
to read or if there, in fact,

650
00:30:57,216 --> 00:30:58,986 A:middle
is any data at all
of that data type.

651
00:30:58,986 --> 00:31:00,476 A:middle
That's part of the
privacy design.

652

653
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

654
00:30:58,986 --> 00:31:00,476 A:middle
That's part of the
privacy design.

655
00:31:01,276 --> 00:31:02,616 A:middle
So, the success variable

656
00:31:02,946 --> 00:31:06,466 A:middle
in the block actually indicates
whether the user was prompted

657
00:31:06,466 --> 00:31:10,806 A:middle
or not, not what the
response of the user was.

658
00:31:11,696 --> 00:31:15,986 A:middle
If the request was not
successful, then the error --

659
00:31:16,096 --> 00:31:17,626 A:middle
the NS error will be populated.

660
00:31:20,226 --> 00:31:22,526 A:middle
Writing is slightly different.

661
00:31:22,526 --> 00:31:25,246 A:middle
You can check to see if you
have authorization to write,

662
00:31:25,646 --> 00:31:28,686 A:middle
and you do that by calling
authorizationStatus ForDataType.

663
00:31:29,126 --> 00:31:31,746 A:middle
This will return you back
in authorization status,

664
00:31:32,616 --> 00:31:35,156 A:middle
which you then can then
conditionalize your logic on.

665
00:31:36,286 --> 00:31:44,146 A:middle
Also, applications can only
edit, or modify, or delete data

666
00:31:44,146 --> 00:31:48,006 A:middle
that they have written, not
other applications' data.

667
00:31:48,756 --> 00:31:51,016 A:middle
So, you should check your
authorization status first,

668
00:31:51,476 --> 00:31:54,606 A:middle
and then if you need to,
ask the user for permission.

669
00:31:58,366 --> 00:31:59,686 A:middle
Calling saveObject

670

671
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

672
00:32:00,116 --> 00:32:03,516 A:middle
and deleteObject will modify
those particular objects.

673
00:32:04,076 --> 00:32:09,486 A:middle
So, we've talked
about data isolation.

674
00:32:09,846 --> 00:32:11,926 A:middle
What are the differences
on the different platforms,

675
00:32:11,926 --> 00:32:13,736 A:middle
and that's a lot of information.

676
00:32:13,876 --> 00:32:18,006 A:middle
So, we need to be able to test
it and it's really easy to test.

677
00:32:18,006 --> 00:32:20,516 A:middle
All you need to do is
run your application.

678
00:32:21,076 --> 00:32:23,236 A:middle
You should already
be testing on-device,

679
00:32:23,466 --> 00:32:26,116 A:middle
however the simulator
does support a lot

680
00:32:26,116 --> 00:32:28,296 A:middle
of the data isolated classes.

681
00:32:29,036 --> 00:32:32,116 A:middle
Note that apps can only trigger
the prompt once, so if you need

682
00:32:32,116 --> 00:32:36,196 A:middle
to go back and retrigger it
on the iOS you need to go

683
00:32:36,196 --> 00:32:40,746 A:middle
to Settings, General, Reset,
Reset Location and Privacy,

684
00:32:41,026 --> 00:32:43,736 A:middle
or on OS X use tccutil.

685
00:32:45,056 --> 00:32:49,106 A:middle
Consider all of the different
test cases, and there's four

686
00:32:49,106 --> 00:32:51,586 A:middle
of them; permission
being sought and denied,

687
00:32:52,366 --> 00:32:54,626 A:middle
permission being
sought and granted,

688
00:32:55,276 --> 00:32:58,536 A:middle
permission previously denied,
and permission restricted.

689
00:32:59,486 --> 00:33:02,046 A:middle
You might even want to
consider building these

690

691
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

692
00:32:59,486 --> 00:33:02,046 A:middle
You might even want to
consider building these

693
00:33:02,046 --> 00:33:06,236 A:middle
in to your unit tests so that
you don't ship any regressions.

694
00:33:07,136 --> 00:33:09,956 A:middle
I'd like to talk a little bit
about permission restricted,

695
00:33:10,176 --> 00:33:15,586 A:middle
as that's a special,
interesting case.

696
00:33:16,066 --> 00:33:18,356 A:middle
Restrictions can
prevent your users

697
00:33:18,476 --> 00:33:21,096 A:middle
from changing their privacy
settings even if they want to.

698
00:33:21,806 --> 00:33:24,086 A:middle
For example, enterprise
restriction

699
00:33:24,116 --> 00:33:27,126 A:middle
or on-device restrictions
can prevent the user

700
00:33:27,346 --> 00:33:28,996 A:middle
from changing their
privacy settings.

701
00:33:29,616 --> 00:33:31,756 A:middle
So, you should try to
send users to settings,

702
00:33:32,216 --> 00:33:33,866 A:middle
but your code should
be resilient

703
00:33:33,866 --> 00:33:35,366 A:middle
to the lack of data returned.

704
00:33:36,086 --> 00:33:38,786 A:middle
The OS can help you
fail gracefully.

705
00:33:39,266 --> 00:33:40,526 A:middle
Some of the picker classes

706
00:33:40,526 --> 00:33:44,446 A:middle
in iOS will actually show a lock
page indicating the user has

707
00:33:44,486 --> 00:33:47,046 A:middle
previously declined
access to that data type

708
00:33:47,696 --> 00:33:51,286 A:middle
so you shouldn't design dialogs
that say go flip the switch

709
00:33:51,286 --> 00:33:52,586 A:middle
in the case that
you're restricted

710
00:33:52,936 --> 00:33:56,426 A:middle
because users may not actually
be able to flip the switch.

711
00:33:58,096 --> 00:34:00,626 A:middle
It's easy to test
with restrictions.

712

713
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

714
00:33:58,096 --> 00:34:00,626 A:middle
It's easy to test
with restrictions.

715
00:34:00,996 --> 00:34:04,336 A:middle
All you have to do is go to
Settings, General Restrictions,

716
00:34:04,726 --> 00:34:06,346 A:middle
and then choose the
data type that you want

717
00:34:06,346 --> 00:34:07,386 A:middle
to test restrictions with.

718
00:34:07,976 --> 00:34:12,306 A:middle
So, we have some
great iOS sample code

719
00:34:12,306 --> 00:34:13,426 A:middle
out there for you today.

720
00:34:13,956 --> 00:34:15,775 A:middle
It's called "Checking
and Requesting Access

721
00:34:15,775 --> 00:34:19,216 A:middle
to Data Classes in Privacy
Settings" and it's available

722
00:34:19,216 --> 00:34:20,876 A:middle
on the iOS Developer Library.

723
00:34:22,235 --> 00:34:23,926 A:middle
You can use it directly
in your project

724
00:34:24,005 --> 00:34:26,306 A:middle
or just download it
and play with it.

725
00:34:27,196 --> 00:34:29,366 A:middle
So, that's data isolation

726
00:34:29,505 --> 00:34:31,735 A:middle
and prompting your
users with purpose.

727
00:34:32,116 --> 00:34:34,585 A:middle
I'm now going to give it back
to Katie so she can take you

728
00:34:34,585 --> 00:34:36,126 A:middle
through privacy best practices.

729
00:34:36,436 --> 00:34:36,786 A:middle
Thank you.

730
00:34:38,516 --> 00:34:43,106 A:middle
[ Applause ]

731
00:34:43,606 --> 00:34:44,235 A:middle
>> Thanks, David.

732
00:34:44,516 --> 00:34:47,335 A:middle
So now, I'm going to finish
off talking about some things

733
00:34:47,335 --> 00:34:50,025 A:middle
that you can do and apply
in your application.

734
00:34:50,616 --> 00:34:55,616 A:middle
I'm going to talk about
transparency, data collection,

735
00:34:56,436 --> 00:35:00,516 A:middle
avoiding fingerprinting, and
how to protect your users' data.

736

737
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

738
00:34:56,436 --> 00:35:00,516 A:middle
avoiding fingerprinting, and
how to protect your users' data.

739
00:35:01,336 --> 00:35:05,706 A:middle
So, David talked about
transparency already.

740
00:35:05,706 --> 00:35:08,986 A:middle
He talked about in terms of
consent and Just in Time alerts.

741
00:35:09,576 --> 00:35:11,956 A:middle
But, transparency is
important even wider.

742
00:35:12,266 --> 00:35:13,796 A:middle
This is all about insuring

743
00:35:13,796 --> 00:35:17,046 A:middle
that your users understand
what's happening to them

744
00:35:17,216 --> 00:35:18,576 A:middle
and what's happening
to their data.

745
00:35:19,826 --> 00:35:22,546 A:middle
Users should never be
surprised if you explain

746
00:35:22,546 --> 00:35:25,906 A:middle
to them how your code works or
what's happening to their data.

747
00:35:27,416 --> 00:35:29,956 A:middle
Think about what the
user expectations are.

748
00:35:29,956 --> 00:35:32,276 A:middle
This is what you should go
back to and think about.

749
00:35:32,276 --> 00:35:34,216 A:middle
What would users think
is happening here?

750
00:35:35,096 --> 00:35:38,066 A:middle
So, there's other ways
that we can be transparent.

751
00:35:38,926 --> 00:35:40,596 A:middle
Logging is one of those places.

752
00:35:40,926 --> 00:35:45,186 A:middle
For instance, both on iOS and
OS X, if the user has selected

753
00:35:45,746 --> 00:35:48,576 A:middle
to submit logs to
Apple via Diagnostics

754
00:35:48,576 --> 00:35:50,926 A:middle
and Usage the user can
go and look at these.

755
00:35:51,076 --> 00:35:55,506 A:middle
You can go in iOS under
Settings, Privacy, Diagnostics

756
00:35:55,506 --> 00:35:58,236 A:middle
and Usage, and look at all the
logs that will be sent to Apple.

757
00:35:59,036 --> 00:36:03,646 A:middle
You can also see them
via the console on OS X.

758

759
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

760
00:35:59,036 --> 00:36:03,646 A:middle
You can also see them
via the console on OS X.

761
00:36:04,436 --> 00:36:07,996 A:middle
Another example of this on
OS X is for crash reports.

762
00:36:08,506 --> 00:36:11,356 A:middle
You can then expand
out and view the data

763
00:36:11,356 --> 00:36:12,546 A:middle
that would be sent to Apple.

764
00:36:13,176 --> 00:36:16,266 A:middle
I would also encourage
you to think about his

765
00:36:16,266 --> 00:36:19,386 A:middle
when you have a data
store of user data.

766
00:36:20,546 --> 00:36:23,206 A:middle
Figure out a way to
visualize this data

767
00:36:23,206 --> 00:36:25,766 A:middle
and let them see what
information you're storing.

768
00:36:26,686 --> 00:36:29,606 A:middle
Users like when they have
the control to be able to see

769
00:36:29,606 --> 00:36:32,626 A:middle
and understand what's happening.

770
00:36:32,976 --> 00:36:35,056 A:middle
Your Privacy Policy
is another way

771
00:36:35,056 --> 00:36:37,116 A:middle
that you can be transparent
to users.

772
00:36:37,116 --> 00:36:37,966 A:middle
It's a great tool.

773
00:36:38,686 --> 00:36:42,646 A:middle
Your Privacy Policy should
include what data you collect,

774
00:36:43,386 --> 00:36:48,086 A:middle
what you plan to do with
that data, and if you plan

775
00:36:48,086 --> 00:36:49,786 A:middle
to share it with any third
parties, who they are.

776
00:36:51,246 --> 00:36:55,926 A:middle
As a family's sharing, you may
need to include a kid section

777
00:36:55,926 --> 00:36:57,426 A:middle
of your Privacy Policy, as well.

778
00:36:58,926 --> 00:37:01,716 A:middle
There are four different areas
this year where we are going

779

780
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

781
00:36:58,926 --> 00:37:01,716 A:middle
There are four different areas
this year where we are going

782
00:37:01,716 --> 00:37:04,826 A:middle
to be requiring a Privacy Policy
if you're taking advantage

783
00:37:04,826 --> 00:37:05,756 A:middle
of this functionality.

784
00:37:06,276 --> 00:37:09,236 A:middle
The first one is apps that
link against HealthKit.

785
00:37:10,276 --> 00:37:11,916 A:middle
Second, HomeKit.

786
00:37:13,226 --> 00:37:15,216 A:middle
Third, third party keyboards.

787
00:37:15,886 --> 00:37:19,456 A:middle
And lastly, if you want your app
to show up in the kids' section

788
00:37:19,456 --> 00:37:22,376 A:middle
of the app store you will
also require a Privacy Policy.

789
00:37:23,296 --> 00:37:26,456 A:middle
We make it easy to submit a
link and you can do it right

790
00:37:26,456 --> 00:37:29,416 A:middle
in iTunes Connect, and
then this will be visible

791
00:37:29,676 --> 00:37:30,916 A:middle
in all of the App Stores.

792
00:37:32,286 --> 00:37:34,916 A:middle
So, here you can see
in iTunes Connect,

793
00:37:34,976 --> 00:37:35,996 A:middle
you probably know this page,

794
00:37:35,996 --> 00:37:37,156 A:middle
it's where you write
the description

795
00:37:37,156 --> 00:37:38,826 A:middle
of what your app
does, what it is.

796
00:37:39,096 --> 00:37:41,716 A:middle
And at the bottom, here's
where you add a link

797
00:37:41,716 --> 00:37:42,796 A:middle
to your Privacy Policy.

798
00:37:44,616 --> 00:37:48,476 A:middle
Then, in the App Store on
the first page, if you scroll

799
00:37:48,476 --> 00:37:51,316 A:middle
down you can see, and
users can go and click

800
00:37:51,316 --> 00:37:53,486 A:middle
on your Privacy Policy
and go read it.

801
00:37:53,906 --> 00:37:56,086 A:middle
Now this, users can see it

802
00:37:56,086 --> 00:37:58,926 A:middle
and read it before they
have downloaded this app,

803
00:37:59,536 --> 00:38:00,486 A:middle
so it gives them the ability

804

805
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

806
00:37:59,536 --> 00:38:00,486 A:middle
so it gives them the ability

807
00:38:00,486 --> 00:38:03,866 A:middle
to understand what's happening
before it happens to their data.

808
00:38:03,866 --> 00:38:08,596 A:middle
Next, I'm going to talk
about data collection.

809
00:38:08,716 --> 00:38:11,916 A:middle
So, data collection is
a really powerful tool.

810
00:38:12,416 --> 00:38:15,046 A:middle
It's great to understand where
users are having problems,

811
00:38:15,356 --> 00:38:17,366 A:middle
where they're running
into issues or crashing,

812
00:38:18,196 --> 00:38:20,326 A:middle
where users are spending
the most time in your apps

813
00:38:20,326 --> 00:38:22,646 A:middle
so you can expand more
engineering resources there.

814
00:38:23,646 --> 00:38:27,776 A:middle
But, we believe that all data
collection does have privacy

815
00:38:27,776 --> 00:38:32,166 A:middle
impact, so you want a weigh
the benefits against the risks.

816
00:38:33,676 --> 00:38:36,476 A:middle
The thing that I work with teams
and talk to teams about is think

817
00:38:36,476 --> 00:38:38,976 A:middle
about the decision that
you're trying to achieve,

818
00:38:38,976 --> 00:38:41,216 A:middle
the decision you're trying to
make with the data collection,

819
00:38:41,546 --> 00:38:43,036 A:middle
and the question
you're trying to answer.

820
00:38:44,516 --> 00:38:46,746 A:middle
That's where you should
start with data collection.

821
00:38:47,116 --> 00:38:50,696 A:middle
And, if you can't think of
a question, you can't think

822
00:38:50,696 --> 00:38:53,096 A:middle
of anything that you're
going to do with the data,

823
00:38:53,096 --> 00:38:55,216 A:middle
the best question is -- because
I think it sounds interesting,

824
00:38:55,506 --> 00:38:57,726 A:middle
because I wondered,
then that's a good sign

825
00:38:57,726 --> 00:38:59,936 A:middle
that we shouldn't be
collecting that amount

826
00:38:59,936 --> 00:39:01,786 A:middle
of data and that data.

827

828
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

829
00:38:59,936 --> 00:39:01,786 A:middle
of data and that data.

830
00:39:02,546 --> 00:39:04,736 A:middle
So, we've all heard
about and heard

831
00:39:04,736 --> 00:39:06,346 A:middle
in the industry about breaches.

832
00:39:07,156 --> 00:39:11,046 A:middle
And one thing to think about is,
unfortunately, if this happens

833
00:39:11,046 --> 00:39:14,376 A:middle
to you, you want to be able to
explain how you plan you use

834
00:39:14,376 --> 00:39:15,566 A:middle
and have a clear explanation

835
00:39:15,566 --> 00:39:17,326 A:middle
for all the data
that you're storing.

836
00:39:18,066 --> 00:39:21,136 A:middle
If you don't have a good
explanation and users want

837
00:39:21,136 --> 00:39:23,816 A:middle
to understand, this will
have more of an impact

838
00:39:23,816 --> 00:39:26,736 A:middle
to your reputation and
your company's reputation.

839
00:39:28,216 --> 00:39:32,976 A:middle
Now, this is true both for
applications and servers,

840
00:39:33,046 --> 00:39:37,036 A:middle
so you shouldn't think of just
this on the iOS or OS X side.

841
00:39:38,936 --> 00:39:41,796 A:middle
There is six data collection
techniques on this slide.

842
00:39:42,316 --> 00:39:45,366 A:middle
Now, last year we got
into depth about them,

843
00:39:45,606 --> 00:39:47,276 A:middle
we talked about, defined them.

844
00:39:47,826 --> 00:39:50,626 A:middle
We gave examples on
how to apply them.

845
00:39:51,206 --> 00:39:54,256 A:middle
So, if you're interested in
these, and they're great to use

846
00:39:54,256 --> 00:39:57,316 A:middle
to protect your users' privacy
when doing data collection,

847
00:39:57,856 --> 00:39:59,456 A:middle
go and watch last year's talk.

848

849
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

850
00:40:00,056 --> 00:40:05,016 A:middle
And, these are great techniques
to use to avoid fingerprinting.

851
00:40:05,016 --> 00:40:07,106 A:middle
That's really one
of their main uses.

852
00:40:08,046 --> 00:40:09,556 A:middle
So, what is fingerprinting?

853
00:40:09,556 --> 00:40:12,046 A:middle
I mean, we hear about
fingerprinting, but what is it?

854
00:40:12,496 --> 00:40:14,016 A:middle
This is when a large number

855
00:40:14,016 --> 00:40:17,636 A:middle
of fairly static
metrics are collected.

856
00:40:18,466 --> 00:40:21,366 A:middle
A configuration, collecting
configurations is a good example

857
00:40:21,366 --> 00:40:23,766 A:middle
of this, and then they
can be pieced together

858
00:40:23,766 --> 00:40:28,426 A:middle
to form a fairly stable
semi-persistent fingerprint.

859
00:40:28,836 --> 00:40:31,626 A:middle
So then, any other
data that is logged

860
00:40:31,626 --> 00:40:34,586 A:middle
with this information is then
associated to this device.

861
00:40:36,036 --> 00:40:40,216 A:middle
This can happen very easily,
it can happen accidentally,

862
00:40:40,376 --> 00:40:42,766 A:middle
and it can happen
without collecting any

863
00:40:42,766 --> 00:40:43,946 A:middle
personal information.

864
00:40:44,626 --> 00:40:48,046 A:middle
You may think, "Well, there's no
personal information in my logs,

865
00:40:48,336 --> 00:40:51,226 A:middle
in my logging, so
there's no privacy impact.

866
00:40:52,076 --> 00:40:53,076 A:middle
This is not true.

867
00:40:53,466 --> 00:40:56,146 A:middle
You should go back, look at
what you're logging to see

868
00:40:56,146 --> 00:40:58,456 A:middle
if you have accidentally been
fingerprinting your users.

869
00:40:59,116 --> 00:41:01,956 A:middle
Now, I'm going to take
us through an example

870

871
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

872
00:40:59,116 --> 00:41:01,956 A:middle
Now, I'm going to take
us through an example

873
00:41:01,956 --> 00:41:03,596 A:middle
that helps illustrate
a little bit more

874
00:41:03,596 --> 00:41:05,576 A:middle
about how easy fingerprinting
can happen,

875
00:41:05,576 --> 00:41:06,536 A:middle
and how accidentally.

876
00:41:07,096 --> 00:41:09,576 A:middle
So, here we have an
initial user population.

877
00:41:09,806 --> 00:41:11,276 A:middle
All these dots, they're devices.

878
00:41:12,606 --> 00:41:14,856 A:middle
So, first we're going
to take all the devices

879
00:41:14,856 --> 00:41:16,736 A:middle
that have OS X Yosemite
installed,

880
00:41:18,116 --> 00:41:23,666 A:middle
then have a certain screen
resolution, a certain time zone,

881
00:41:24,006 --> 00:41:25,006 A:middle
Pacific Standard Time.

882
00:41:25,526 --> 00:41:28,556 A:middle
Do they have Java installed?

883
00:41:29,326 --> 00:41:31,236 A:middle
Are cookies enabled?

884
00:41:31,766 --> 00:41:37,196 A:middle
A certain version of Flash?

885
00:41:37,346 --> 00:41:40,456 A:middle
And, with a User-Agent string
of Safari OS X Yosemite,

886
00:41:40,676 --> 00:41:43,336 A:middle
we're down to a single
device, Alice.

887
00:41:44,636 --> 00:41:47,706 A:middle
So, this is where I encourage
all of you to go and look

888
00:41:47,706 --> 00:41:48,726 A:middle
at your data collection
and think

889
00:41:48,726 --> 00:41:50,296 A:middle
about if this is
happening to you.

890
00:41:50,296 --> 00:41:52,436 A:middle
And, this is where you
can easily apply some

891
00:41:52,436 --> 00:41:53,746 A:middle
of the data collection
techniques.

892
00:41:54,866 --> 00:41:56,206 A:middle
Maybe what you're doing,

893
00:41:56,206 --> 00:41:58,546 A:middle
it doesn't really matter what
screen resolution they have.

894
00:41:58,916 --> 00:42:03,156 A:middle
Bucketing it into high,
medium, and low maybe enough

895

896
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

897
00:41:58,916 --> 00:42:03,156 A:middle
Bucketing it into high,
medium, and low maybe enough

898
00:42:03,186 --> 00:42:06,176 A:middle
for your use, but it'll
have more people fall

899
00:42:06,176 --> 00:42:11,876 A:middle
into each bucket.

900
00:42:12,036 --> 00:42:14,006 A:middle
We all are creating way
more data these days,

901
00:42:14,206 --> 00:42:16,896 A:middle
and users are sharing
it with us.

902
00:42:16,976 --> 00:42:18,516 A:middle
So, you need to be mindful

903
00:42:18,516 --> 00:42:20,946 A:middle
about how you're
protecting all this data

904
00:42:21,066 --> 00:42:22,716 A:middle
that users are entrusting
you with.

905
00:42:23,346 --> 00:42:25,846 A:middle
So, there are a bunch

906
00:42:25,916 --> 00:42:31,346 A:middle
of different tools,
in both iOS and OS X.

907
00:42:31,346 --> 00:42:34,876 A:middle
And, we have provided a
help and make it easier

908
00:42:34,876 --> 00:42:36,356 A:middle
to protect your users' data.

909
00:42:37,016 --> 00:42:38,486 A:middle
The first one is the keychain.

910
00:42:39,016 --> 00:42:43,276 A:middle
All application credentials
should be stored

911
00:42:43,276 --> 00:42:44,096 A:middle
in the keychain.

912
00:42:45,316 --> 00:42:47,716 A:middle
Think about whether they
need to be synchronized

913
00:42:48,146 --> 00:42:50,476 A:middle
or if they can be stored
only on a single device.

914
00:42:51,496 --> 00:42:56,606 A:middle
Also, think about Touch ID,
presence, APIs, can you use this

915
00:42:56,676 --> 00:42:59,526 A:middle
to help protect your
users' data?

916

917
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

918
00:43:00,036 --> 00:43:05,146 A:middle
All client-server communication
should be encrypted.

919
00:43:06,386 --> 00:43:09,036 A:middle
Also, for the data you
are storing on-disk,

920
00:43:09,386 --> 00:43:10,586 A:middle
use data protection.

921
00:43:11,006 --> 00:43:14,046 A:middle
This is great on iOS that we
have different data protection

922
00:43:14,046 --> 00:43:18,506 A:middle
classes so then you can pick out
data that may be most sensitive

923
00:43:18,506 --> 00:43:23,066 A:middle
and store it at the
highest level.

924
00:43:23,066 --> 00:43:28,126 A:middle
Now, we've talked about a
bunch of different changes,

925
00:43:29,176 --> 00:43:32,346 A:middle
new data classes for data
isolation, but the thing I want

926
00:43:32,346 --> 00:43:34,386 A:middle
to leave you with is a
couple of things you can do

927
00:43:34,386 --> 00:43:35,496 A:middle
and act on immediately.

928
00:43:36,526 --> 00:43:40,196 A:middle
Make sure if you don't have a
device that's upgraded to iOS 8

929
00:43:40,566 --> 00:43:43,006 A:middle
or OS X Yosemite
that you do today.

930
00:43:43,926 --> 00:43:45,216 A:middle
Test on them.

931
00:43:45,316 --> 00:43:47,326 A:middle
Understand the impact
this has to your users

932
00:43:47,566 --> 00:43:50,926 A:middle
to ensure there's not going
to be user impact on launch.

933
00:43:52,356 --> 00:43:55,816 A:middle
Prompt users well, and this
really means purpose strings.

934
00:43:55,816 --> 00:44:00,376 A:middle
If you don't have purpose
strings, go add them.

935

936
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

937
00:43:55,816 --> 00:44:00,376 A:middle
If you don't have purpose
strings, go add them.

938
00:44:00,376 --> 00:44:01,696 A:middle
Look into the new data classes.

939
00:44:01,756 --> 00:44:03,326 A:middle
See if you can provide
a great experience

940
00:44:03,326 --> 00:44:05,036 A:middle
by taking advantage
of the new classes.

941
00:44:05,436 --> 00:44:07,926 A:middle
If you don't have a
Privacy Policy link,

942
00:44:08,326 --> 00:44:10,056 A:middle
go submit one to iTunes Connect.

943
00:44:10,786 --> 00:44:15,426 A:middle
And lastly, think about privacy
throughout the design process,

944
00:44:16,046 --> 00:44:20,736 A:middle
and this will help you
maintain your reputation

945
00:44:21,236 --> 00:44:28,486 A:middle
and a strong relationship
with your users.

946
00:44:28,906 --> 00:44:34,056 A:middle
Now, Paul is our Evangelist
and he is a great resource,

947
00:44:34,056 --> 00:44:37,536 A:middle
if you have any questions after
today, to go and reach out to.

948
00:44:39,246 --> 00:44:42,336 A:middle
Also, we have two pieces of
great sample code projects.

949
00:44:42,336 --> 00:44:43,816 A:middle
We have two sample
code projects.

950
00:44:44,136 --> 00:44:49,136 A:middle
The first one, privacy prompts,
this is a help start for how

951
00:44:49,136 --> 00:44:53,286 A:middle
to adopt data isolation,
and especially great to look

952
00:44:53,286 --> 00:44:55,136 A:middle
out for the new data
isolation classes.

953
00:44:56,376 --> 00:44:58,746 A:middle
Then, people picker,
this is good to look

954
00:44:58,746 --> 00:45:00,706 A:middle
at if you currently
use the people picker,

955

956
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

957
00:44:58,746 --> 00:45:00,706 A:middle
at if you currently
use the people picker,

958
00:45:00,706 --> 00:45:02,816 A:middle
or are wanting to
adopt it in iOS 8.

959
00:45:03,256 --> 00:45:08,966 A:middle
We talked about, today,
a few best practices

960
00:45:09,316 --> 00:45:10,786 A:middle
for maintaining your
users' privacy,

961
00:45:10,906 --> 00:45:11,946 A:middle
but there are a lot more.

962
00:45:12,476 --> 00:45:14,546 A:middle
Go look at this documentation
and see

963
00:45:14,546 --> 00:45:16,066 A:middle
which other ones you can adopt.

964
00:45:16,986 --> 00:45:19,456 A:middle
Also, there's always great
information to be found

965
00:45:19,456 --> 00:45:20,776 A:middle
at the Apple Developers' Forums.

966
00:45:22,116 --> 00:45:24,286 A:middle
We mentioned several talks.

967
00:45:24,406 --> 00:45:26,316 A:middle
The first one is
"Kids and Apps".

968
00:45:26,316 --> 00:45:28,146 A:middle
It's happening right
here after ours

969
00:45:28,146 --> 00:45:29,906 A:middle
and I would encourage
you guys all to stay.

970
00:45:31,516 --> 00:45:35,556 A:middle
"What's New in Core Location",
and "Keychain Authentication

971
00:45:35,556 --> 00:45:37,566 A:middle
with Touch ID" already
happened this week,

972
00:45:37,566 --> 00:45:38,836 A:middle
but are great to go watch.

973
00:45:39,066 --> 00:45:41,716 A:middle
And then from last
year or previous years,

974
00:45:41,966 --> 00:45:43,486 A:middle
"Protecting your
User's Privacy",

975
00:45:44,406 --> 00:45:45,656 A:middle
"Protecting User's Data",

976
00:45:45,726 --> 00:45:48,246 A:middle
and "A Practical Guide
to the App Sandbox".

977
00:45:49,686 --> 00:45:52,576 A:middle
From David and I,
thank you very much.

978
00:45:53,516 --> 00:45:57,880 A:middle
[ Applause ]

979
