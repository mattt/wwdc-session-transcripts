X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1
00:00:11,316 --> 00:00:12,056 A:middle
>> Good morning!

2
00:00:13,416 --> 00:00:14,766 A:middle
Hi there!

3
00:00:15,516 --> 00:00:20,116 A:middle
[ Applause ]

4
00:00:20,616 --> 00:00:23,736 A:middle
Welcome to Session
704, "Building Apps

5
00:00:23,736 --> 00:00:25,076 A:middle
for Enterprise and Education."

6
00:00:25,866 --> 00:00:27,536 A:middle
My name is Dave Rahardja.

7
00:00:27,786 --> 00:00:30,996 A:middle
I'm a software developer in
iOS, and today I'll be joined

8
00:00:31,496 --> 00:00:34,376 A:middle
by Alex Botkin, who
also works with me

9
00:00:34,796 --> 00:00:37,486 A:middle
on iOS device management.

10
00:00:39,956 --> 00:00:44,626 A:middle
So building apps
for the enterprise

11
00:00:44,626 --> 00:00:47,516 A:middle
and for the education
market really is not

12
00:00:47,516 --> 00:00:50,276 A:middle
that much different
from building apps

13
00:00:50,276 --> 00:00:51,266 A:middle
in the App Store, right?

14
00:00:52,296 --> 00:00:55,906 A:middle
You've got to get an app
that solves a problem.

15
00:00:57,306 --> 00:00:59,846 A:middle
You have to have an app
that is well-designed.

16

17
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

18
00:01:01,196 --> 00:01:04,525 A:middle
And it's got to be a
pleasure to use for the user.

19
00:01:05,916 --> 00:01:10,436 A:middle
But in an enterprise,
you've got some unique

20
00:01:10,436 --> 00:01:11,576 A:middle
requirements usually.

21
00:01:12,916 --> 00:01:16,096 A:middle
Your client's devices are very
likely going to be managed

22
00:01:16,486 --> 00:01:17,866 A:middle
under mobile device management.

23
00:01:19,636 --> 00:01:21,926 A:middle
These devices may be supervised.

24
00:01:22,016 --> 00:01:24,166 A:middle
And if you're not familiar
with what supervised means,

25
00:01:24,166 --> 00:01:26,636 A:middle
we'll talk about
that in a minute.

26
00:01:27,066 --> 00:01:30,236 A:middle
And there may be special use
cases that are kind of peculiar

27
00:01:30,236 --> 00:01:32,566 A:middle
to the business and
education market.

28
00:01:32,996 --> 00:01:37,956 A:middle
So today what I'm going to
present to you is some tips

29
00:01:37,956 --> 00:01:41,356 A:middle
and tricks to help you to
write your next enterprise

30
00:01:41,356 --> 00:01:44,766 A:middle
and education apps
so that they're

31
00:01:44,766 --> 00:01:46,616 A:middle
that much more pleasurable
to use

32
00:01:47,096 --> 00:01:50,296 A:middle
and makes you a much better
developer in this field.

33
00:01:52,626 --> 00:01:56,706 A:middle
So let's get started by talking
about mobile device management.

34

35
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

36
00:02:00,296 --> 00:02:03,466 A:middle
So what's mobile
device management?

37
00:02:04,706 --> 00:02:09,316 A:middle
Mobile device management is a
protocol that's built into iOS

38
00:02:09,316 --> 00:02:15,886 A:middle
and OS X that allows a server
to remotely manage that device.

39
00:02:16,446 --> 00:02:23,366 A:middle
A server that's managing a
device using MDM can install

40
00:02:23,366 --> 00:02:26,566 A:middle
network access such
as VPN or Wi-Fi.

41
00:02:27,276 --> 00:02:31,946 A:middle
It can install accounts
such as email,

42
00:02:31,946 --> 00:02:33,546 A:middle
calendar contacts and so forth.

43
00:02:34,776 --> 00:02:39,246 A:middle
New in iOS 8, they can now
install books such as PDFs,

44
00:02:39,386 --> 00:02:42,696 A:middle
ePubs and iBooks
Author as well as books

45
00:02:42,696 --> 00:02:45,406 A:middle
from the iBookstore
and manage them.

46
00:02:46,976 --> 00:02:50,186 A:middle
They can install single
sign-on using Kerberos.

47
00:02:51,016 --> 00:02:56,326 A:middle
And new in iOS 8, Kerberos can
now use an identity certificate

48
00:02:56,546 --> 00:02:58,886 A:middle
so that their identity
can be renewed

49
00:02:58,886 --> 00:03:01,976 A:middle
without the user ever having
to type in a password.

50

51
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

52
00:02:58,886 --> 00:03:01,976 A:middle
without the user ever having
to type in a password.

53
00:03:02,516 --> 00:03:08,706 A:middle
[ Applause ]

54
00:03:09,206 --> 00:03:14,766 A:middle
And most important to you
today, an MDM server can install

55
00:03:14,766 --> 00:03:18,596 A:middle
and configure your apps,
so this is very important.

56
00:03:19,716 --> 00:03:22,026 A:middle
And here's your first
tip for today.

57
00:03:22,996 --> 00:03:26,156 A:middle
Allow MDM to configure
your apps.

58
00:03:26,886 --> 00:03:28,356 A:middle
And we'll talk about how

59
00:03:28,356 --> 00:03:31,576 A:middle
that can be done
exactly in a few minutes.

60
00:03:33,666 --> 00:03:35,216 A:middle
So mobile device management.

61
00:03:35,706 --> 00:03:42,706 A:middle
Let's talk a few minutes about
managed apps and accounts.

62
00:03:42,976 --> 00:03:46,776 A:middle
So this is a little bit of
a terminology that we have.

63
00:03:48,186 --> 00:03:54,656 A:middle
Anything that MDM installs
on iOS, we call "managed".

64
00:03:56,076 --> 00:03:59,396 A:middle
These include everything that
you saw from the last slide.

65

66
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

67
00:04:00,286 --> 00:04:01,926 A:middle
Managed apps.

68
00:04:02,746 --> 00:04:03,706 A:middle
Managed accounts.

69
00:04:04,956 --> 00:04:07,996 A:middle
In iOS 8, as you know, you
can install third party

70
00:04:07,996 --> 00:04:08,976 A:middle
keyboard extensions.

71
00:04:09,446 --> 00:04:11,916 A:middle
The way you install third
party keyboard extensions

72
00:04:12,056 --> 00:04:17,526 A:middle
on iOS 8 is you install an app
that has an extension in it.

73
00:04:17,526 --> 00:04:19,826 A:middle
If that app was installed
using MDM,

74
00:04:20,375 --> 00:04:24,266 A:middle
that keyboard extension is then
considered as managed as well.

75
00:04:24,826 --> 00:04:30,746 A:middle
Of course in iOS 8 we have
this great new feature called

76
00:04:30,746 --> 00:04:34,336 A:middle
"document providers," thank you.

77
00:04:36,286 --> 00:04:38,256 A:middle
It's a really powerful feature.

78
00:04:39,106 --> 00:04:42,156 A:middle
And if you install
an app that happens

79
00:04:42,156 --> 00:04:47,256 A:middle
to vend a document provider
extension, such as an app

80
00:04:47,256 --> 00:04:52,206 A:middle
that gives access to your
intranet resources, or you know,

81
00:04:52,206 --> 00:04:58,836 A:middle
your network file storage, that
app also becomes "managed."

82

83
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

84
00:05:00,456 --> 00:05:03,296 A:middle
So this is in contrast
with things

85
00:05:03,296 --> 00:05:05,186 A:middle
that the user installed
themselves.

86
00:05:05,186 --> 00:05:07,406 A:middle
If the user goes out
and installs an app

87
00:05:07,686 --> 00:05:11,316 A:middle
from the App Store on their
own BYOD device for example,

88
00:05:11,966 --> 00:05:14,276 A:middle
those things are
considered not managed.

89
00:05:15,206 --> 00:05:18,946 A:middle
So we have managed, which is
the stuff that MDM installed.

90
00:05:18,946 --> 00:05:22,196 A:middle
And you have not managed, which
is what the user installs.

91
00:05:22,936 --> 00:05:26,346 A:middle
So why do we do this?

92
00:05:26,346 --> 00:05:31,956 A:middle
Well it helps iOS to
restrict data flow

93
00:05:32,296 --> 00:05:35,306 A:middle
so that your enterprise
data doesn't flow

94
00:05:35,306 --> 00:05:38,246 A:middle
into your user's data
space and vice versa.

95
00:05:39,526 --> 00:05:45,606 A:middle
So for example, if you are in a
managed app and you are looking

96
00:05:45,606 --> 00:05:50,396 A:middle
at a document and you tap open
in - you know that list of apps

97
00:05:50,396 --> 00:05:53,396 A:middle
that shows up on the
bottom of your screen?

98
00:05:53,396 --> 00:05:54,996 A:middle
All the apps that can
handle that document.

99
00:05:56,416 --> 00:06:01,066 A:middle
That list of apps will
be filtered down so that,

100

101
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

102
00:05:56,416 --> 00:06:01,066 A:middle
That list of apps will
be filtered down so that,

103
00:06:01,196 --> 00:06:02,746 A:middle
because you started
from a managed app,

104
00:06:02,916 --> 00:06:04,456 A:middle
only other managed apps

105
00:06:04,456 --> 00:06:06,556 A:middle
and accounts will
show up on that list.

106
00:06:07,066 --> 00:06:09,306 A:middle
And we do this automatically.

107
00:06:11,216 --> 00:06:15,886 A:middle
Conversely, when you
are in an unmanaged app

108
00:06:16,966 --> 00:06:21,176 A:middle
and you tap open
in, the list of apps

109
00:06:21,176 --> 00:06:23,956 A:middle
that you see will not
include managed apps.

110
00:06:25,146 --> 00:06:28,646 A:middle
So in that way, without
the user ever having

111
00:06:28,646 --> 00:06:30,986 A:middle
to do any switching
of, you know,

112
00:06:31,496 --> 00:06:35,806 A:middle
work and home, we
protect your data.

113
00:06:36,796 --> 00:06:37,896 A:middle
And we do this everywhere.

114
00:06:38,606 --> 00:06:42,116 A:middle
Emails. So you can't forward
a corporate email using your

115
00:06:42,116 --> 00:06:43,266 A:middle
iCloud account for example.

116
00:06:43,926 --> 00:06:45,396 A:middle
We do it in calendars.

117
00:06:45,886 --> 00:06:46,716 A:middle
In attachments.

118
00:06:47,296 --> 00:06:51,396 A:middle
We do it - in iOS 8 we have
managed domains in Safari.

119
00:06:51,566 --> 00:06:55,956 A:middle
So if you specify certain
domains in Safari as belonging

120
00:06:55,956 --> 00:07:00,276 A:middle
to your corporate intranet,
documents that you download

121

122
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

123
00:06:55,956 --> 00:07:00,276 A:middle
to your corporate intranet,
documents that you download

124
00:07:00,276 --> 00:07:04,186 A:middle
from those domains will
only go into managed apps.

125
00:07:04,686 --> 00:07:05,886 A:middle
Make sense?

126
00:07:06,516 --> 00:07:12,636 A:middle
[ Applause ]

127
00:07:13,136 --> 00:07:18,286 A:middle
And managed apps get
access to Per-App VPN.

128
00:07:18,816 --> 00:07:21,876 A:middle
This is a feature
we've had since iOS 7,

129
00:07:22,246 --> 00:07:23,626 A:middle
and it's proven very popular.

130
00:07:24,776 --> 00:07:26,756 A:middle
And what this is,
just as a review,

131
00:07:28,006 --> 00:07:31,416 A:middle
is that managed apps will
get the data tunneled

132
00:07:31,416 --> 00:07:34,246 A:middle
through this VPN, but
not anything else,

133
00:07:34,346 --> 00:07:35,246 A:middle
not the user's data.

134
00:07:36,206 --> 00:07:40,436 A:middle
So your VPN carries your
data and not the user's data.

135
00:07:41,186 --> 00:07:44,806 A:middle
Yet another way to separate
enterprise and personal data.

136
00:07:46,896 --> 00:07:48,156 A:middle
So what's the takeaway?

137
00:07:49,546 --> 00:07:55,796 A:middle
Rely on iOS to manage the data
flow between apps and accounts.

138
00:07:56,626 --> 00:07:57,696 A:middle
Don't try to do it yourself.

139
00:07:58,476 --> 00:08:03,286 A:middle
iOS has a great way of allowing
this to happen in a very clean

140

141
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

142
00:07:58,476 --> 00:08:03,286 A:middle
iOS has a great way of allowing
this to happen in a very clean

143
00:08:03,676 --> 00:08:06,136 A:middle
and intuitive way,
using the fact

144
00:08:06,136 --> 00:08:08,256 A:middle
that you're managing
a device over MDM.

145
00:08:08,776 --> 00:08:09,886 A:middle
All right.

146
00:08:10,066 --> 00:08:11,896 A:middle
So that's MDM.

147
00:08:20,156 --> 00:08:22,626 A:middle
Next let's talk about
supervised devices.

148
00:08:23,696 --> 00:08:25,016 A:middle
So what's this?

149
00:08:26,016 --> 00:08:31,946 A:middle
A supervised device is a device
that has been activated into,

150
00:08:31,986 --> 00:08:33,275 A:middle
you know, a supervision.

151
00:08:34,296 --> 00:08:39,596 A:middle
It tells iOS that the device
is owned by the enterprise.

152
00:08:40,275 --> 00:08:43,446 A:middle
This is in contrast to a
device that's owned by a user

153
00:08:43,446 --> 00:08:44,696 A:middle
such as Bring Your Own Device.

154
00:08:45,576 --> 00:08:50,126 A:middle
Right? Supervision can
only be set at activation.

155
00:08:51,466 --> 00:08:54,606 A:middle
There are two ways to set
supervision during activation.

156
00:08:55,736 --> 00:08:59,366 A:middle
The first way, and you saw
this in the keynote yesterday,

157
00:08:59,996 --> 00:09:01,526 A:middle
is Device Enrollment Program.

158

159
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

160
00:08:59,996 --> 00:09:01,526 A:middle
is Device Enrollment Program.

161
00:09:02,886 --> 00:09:07,506 A:middle
With DEP, devices that
your enterprise purchased

162
00:09:07,506 --> 00:09:12,626 A:middle
from Apple can be configured
so that they're supervised

163
00:09:12,626 --> 00:09:15,666 A:middle
and enrolled into your
MDM right out of the box.

164
00:09:16,216 --> 00:09:17,586 A:middle
You don't have to
touch it at all.

165
00:09:18,176 --> 00:09:20,066 A:middle
You hand the shrink-wrapped
box to the end user.

166
00:09:20,556 --> 00:09:21,266 A:middle
They unbox it.

167
00:09:21,686 --> 00:09:23,696 A:middle
They walk through
the setup assistant.

168
00:09:24,156 --> 00:09:25,736 A:middle
And they're supervised
and enrolled.

169
00:09:28,696 --> 00:09:32,646 A:middle
The second way is Apple
Configurator, which requires you

170
00:09:32,646 --> 00:09:35,016 A:middle
to take the device out
and plug it into USB.

171
00:09:36,256 --> 00:09:38,986 A:middle
Depending on your use
case and your scenarios,

172
00:09:39,166 --> 00:09:43,716 A:middle
one of these should
serve your needs.

173
00:09:43,856 --> 00:09:46,526 A:middle
So why do we supervise devices?

174
00:09:48,036 --> 00:09:48,796 A:middle
Well, I'll tell you why.

175
00:09:49,696 --> 00:09:52,596 A:middle
You get access to a whole
bunch of different restrictions

176
00:09:52,596 --> 00:09:57,856 A:middle
and controls that we only allow
on enterprise-owned devices.

177
00:09:58,756 --> 00:10:02,426 A:middle
Such as Always-On
VPN -- new in iOS 8.

178

179
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

180
00:09:58,756 --> 00:10:02,426 A:middle
Such as Always-On
VPN -- new in iOS 8.

181
00:10:03,836 --> 00:10:08,326 A:middle
Global HTTP proxy.

182
00:10:08,876 --> 00:10:12,866 A:middle
Third-party content
filter, also new in iOS 8.

183
00:10:14,456 --> 00:10:19,596 A:middle
Single App Mode, which locks
your device into a single app.

184
00:10:19,596 --> 00:10:20,746 A:middle
Perfect for kiosks.

185
00:10:21,266 --> 00:10:24,456 A:middle
And we'll see some
examples of that later.

186
00:10:25,466 --> 00:10:27,856 A:middle
We've got restriction
to prevent the user

187
00:10:27,856 --> 00:10:31,906 A:middle
from erasing their own device
-- anyone with students here?

188
00:10:32,446 --> 00:10:37,266 A:middle
And preventing enabling
restrictions -- also students.

189
00:10:37,336 --> 00:10:40,676 A:middle
When you're local, you
know, in your settings.

190
00:10:41,296 --> 00:10:42,336 A:middle
And many more.

191
00:10:42,536 --> 00:10:45,766 A:middle
The takeaway here is
please supervise your

192
00:10:45,766 --> 00:10:46,996 A:middle
enterprise-owned devices.

193
00:10:47,656 --> 00:10:49,646 A:middle
If you own it, supervise it.

194
00:10:49,956 --> 00:10:54,326 A:middle
You won't regret it.

195
00:10:54,596 --> 00:11:03,676 A:middle
OK. So for the next part
of our presentation,

196

197
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

198
00:10:54,596 --> 00:11:03,676 A:middle
OK. So for the next part
of our presentation,

199
00:11:05,436 --> 00:11:08,656 A:middle
we're going to show
you some example apps

200
00:11:09,336 --> 00:11:15,346 A:middle
that may illustrate some of
the use cases that you may face

201
00:11:15,916 --> 00:11:18,456 A:middle
when developing apps
for the enterprise.

202
00:11:19,126 --> 00:11:21,896 A:middle
The first app we're going

203
00:11:21,896 --> 00:11:25,626 A:middle
to show you is a
Document Access app.

204
00:11:25,626 --> 00:11:32,846 A:middle
This app is designed to
access a secure document,

205
00:11:32,846 --> 00:11:38,146 A:middle
like a sensitive document maybe
over your intranet, and store it

206
00:11:38,146 --> 00:11:40,356 A:middle
on the device in
a secure manner.

207
00:11:40,756 --> 00:11:47,886 A:middle
The second app that we're going
to see is a Point of Sale app.

208
00:11:47,886 --> 00:11:52,346 A:middle
This may be something like you
use in a retail store to check

209
00:11:52,346 --> 00:11:54,236 A:middle
out customers, you
know, buying your items.

210
00:11:54,886 --> 00:11:59,236 A:middle
And the third will be something
that education may use,

211
00:11:59,336 --> 00:12:03,366 A:middle
an Assessment app where
the student uses your app

212

213
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

214
00:11:59,336 --> 00:12:03,366 A:middle
an Assessment app where
the student uses your app

215
00:12:04,036 --> 00:12:05,286 A:middle
to take exams.

216
00:12:05,486 --> 00:12:08,266 A:middle
All right, so three
example apps.

217
00:12:08,766 --> 00:12:09,836 A:middle
Document Access.

218
00:12:10,326 --> 00:12:11,046 A:middle
Point of Sale.

219
00:12:11,696 --> 00:12:12,366 A:middle
And Assessment.

220
00:12:13,386 --> 00:12:16,716 A:middle
And along the way, we will
illustrate some of the things

221
00:12:16,716 --> 00:12:19,246 A:middle
that we talked about earlier.

222
00:12:20,666 --> 00:12:23,166 A:middle
So let's start with
the first app.

223
00:12:25,946 --> 00:12:28,206 A:middle
Okay, Secure Document Access.

224
00:12:31,336 --> 00:12:35,826 A:middle
Again, this app retrieves
a document securely

225
00:12:36,476 --> 00:12:37,946 A:middle
and displays it to the end user.

226
00:12:42,776 --> 00:12:43,416 A:middle
All right.

227
00:12:43,846 --> 00:12:49,806 A:middle
So let's talk a little bit
about MDM App Configuration.

228
00:12:51,416 --> 00:12:55,056 A:middle
So you remember a few
minutes ago I talked

229
00:12:55,056 --> 00:13:00,246 A:middle
about allowing an MDM server
to configure your apps.

230

231
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

232
00:12:55,056 --> 00:13:00,246 A:middle
about allowing an MDM server
to configure your apps.

233
00:13:01,546 --> 00:13:04,516 A:middle
Well how do you do this?

234
00:13:05,156 --> 00:13:06,526 A:middle
It's really very simple.

235
00:13:07,546 --> 00:13:10,166 A:middle
All you have to do is to
watch for the special key

236
00:13:10,566 --> 00:13:16,656 A:middle
in NSUserDefaults
com.apple.configuration.managed.

237
00:13:18,086 --> 00:13:21,096 A:middle
When you read this key
from your NSUserDefaults,

238
00:13:21,566 --> 00:13:24,276 A:middle
you get a dictionary
that magically appears

239
00:13:24,936 --> 00:13:29,156 A:middle
when the MDM server pushes a
configuration down to your app.

240
00:13:29,856 --> 00:13:32,616 A:middle
So the MDM server
pushes down a dictionary,

241
00:13:32,616 --> 00:13:35,856 A:middle
and you can access
it using this key.

242
00:13:36,156 --> 00:13:41,986 A:middle
Your app can then respond
to configuration changes.

243
00:13:44,296 --> 00:13:45,816 A:middle
So why do you want to do this?

244
00:13:46,616 --> 00:13:49,796 A:middle
Well what's the first
thing that you want to do

245
00:13:50,096 --> 00:13:52,136 A:middle
when you install an app?

246
00:13:52,136 --> 00:13:56,006 A:middle
You want to configure its URL
probably, hit some server.

247
00:13:57,506 --> 00:14:02,946 A:middle
You may have an app that is
deployed in more than one branch

248

249
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

250
00:13:57,506 --> 00:14:02,946 A:middle
You may have an app that is
deployed in more than one branch

251
00:14:03,066 --> 00:14:05,636 A:middle
of your business, and
you want to configure it

252
00:14:06,156 --> 00:14:07,626 A:middle
for that particular location.

253
00:14:08,986 --> 00:14:13,886 A:middle
Instead of having the end user
read instructions and say,

254
00:14:13,886 --> 00:14:16,806 A:middle
"Oh tap this and tap that
and go here and go there.

255
00:14:16,926 --> 00:14:17,836 A:middle
Type this URL in.

256
00:14:18,946 --> 00:14:21,826 A:middle
What could go wrong?"

257
00:14:21,826 --> 00:14:28,596 A:middle
You define your own keys and
say, "Hey if you install my app

258
00:14:28,596 --> 00:14:32,926 A:middle
over MDM, push down these
keys and I'll see them

259
00:14:32,926 --> 00:14:36,656 A:middle
and I'll use them for my app
without any user intervention."

260
00:14:37,646 --> 00:14:39,136 A:middle
Right? So app configuration.

261
00:14:40,606 --> 00:14:44,806 A:middle
So URLs are great, so in
this example we are going

262
00:14:44,806 --> 00:14:46,506 A:middle
to do some URL configuration.

263
00:14:47,666 --> 00:14:52,756 A:middle
And a trusted list of server
root certificates is also

264
00:14:52,756 --> 00:14:53,456 A:middle
very important.

265
00:14:53,756 --> 00:14:59,416 A:middle
It helps you to prevent
man-in-the-middle attacks.

266
00:14:59,416 --> 00:15:03,476 A:middle
And we'll show you how to
do that in the code example.

267

268
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

269
00:14:59,416 --> 00:15:03,476 A:middle
And we'll show you how to
do that in the code example.

270
00:15:04,466 --> 00:15:06,946 A:middle
I'm going to ask
Alex to come up here.

271
00:15:06,946 --> 00:15:10,376 A:middle
And he's going to show
you a little code example

272
00:15:11,936 --> 00:15:14,676 A:middle
that demonstrates MDM
App Configuration.

273
00:15:15,326 --> 00:15:18,356 A:middle
>> So, good morning developers.

274
00:15:19,016 --> 00:15:21,986 A:middle
So, we're going to switch
over to our demo laptop.

275
00:15:22,596 --> 00:15:24,256 A:middle
We're going to look
at some code.

276
00:15:24,686 --> 00:15:26,976 A:middle
So our first application
that we're looking

277
00:15:26,976 --> 00:15:29,646 A:middle
at today is our Secured
Document Access App.

278
00:15:29,646 --> 00:15:32,696 A:middle
Which we've called
"Secretive" in our example.

279
00:15:32,996 --> 00:15:36,366 A:middle
With MDM App Configuration,
the most important thing

280
00:15:36,366 --> 00:15:39,306 A:middle
that you need to do is to
make sure that you register

281
00:15:39,446 --> 00:15:43,776 A:middle
for the NSUserDefaultsDid
ChangeNotification.

282
00:15:44,146 --> 00:15:46,216 A:middle
This is the notification
that will be sent

283
00:15:46,216 --> 00:15:49,216 A:middle
out when an MDM app
configuration is pushed

284
00:15:49,216 --> 00:15:50,176 A:middle
down to your device.

285
00:15:50,176 --> 00:15:53,106 A:middle
So you need to be listening
to this notification,

286
00:15:53,316 --> 00:15:55,826 A:middle
and then rereading the
defaults when you receive it.

287
00:15:56,256 --> 00:15:58,576 A:middle
So in our example I
have a ViewController.

288
00:15:58,576 --> 00:16:00,856 A:middle
When the ViewController
loads, I'm going to register

289

290
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

291
00:15:58,576 --> 00:16:00,856 A:middle
When the ViewController
loads, I'm going to register

292
00:16:00,856 --> 00:16:01,996 A:middle
for this notification.

293
00:16:02,336 --> 00:16:05,806 A:middle
And every time I receive it, I'm
going to call re-default values

294
00:16:05,806 --> 00:16:08,076 A:middle
so that I can get my
values back again.

295
00:16:08,336 --> 00:16:12,446 A:middle
And in this example, I'm going
to load up re-default values

296
00:16:12,626 --> 00:16:14,066 A:middle
as soon as I get the view up,

297
00:16:14,316 --> 00:16:16,696 A:middle
so that I can get the
first initial load.

298
00:16:17,226 --> 00:16:20,466 A:middle
So in my example here - so
you remember that we talked

299
00:16:20,466 --> 00:16:23,596 A:middle
about the
com.apple.configuration.manage

300
00:16:23,596 --> 00:16:23,786 A:middle
key?

301
00:16:24,156 --> 00:16:26,836 A:middle
This is the key in
NSUserDefault where we're going

302
00:16:26,836 --> 00:16:30,766 A:middle
to be stuffing the NSDictionary
with your configuration.

303
00:16:31,246 --> 00:16:34,596 A:middle
And so you'll notice that I've
suggested some other keys here.

304
00:16:34,596 --> 00:16:36,846 A:middle
And in my dictionary
I'm going to have a key

305
00:16:36,846 --> 00:16:39,106 A:middle
which has a string
for my server URL.

306
00:16:39,456 --> 00:16:40,846 A:middle
Which is going to be the URL

307
00:16:40,846 --> 00:16:42,816 A:middle
for the document I'm
going to be retrieving.

308
00:16:43,416 --> 00:16:45,996 A:middle
And you'll also notice
that I have a key

309
00:16:46,126 --> 00:16:47,986 A:middle
for a server root certificate.

310
00:16:48,266 --> 00:16:50,346 A:middle
We'll get to this later
in the presentation,

311
00:16:50,486 --> 00:16:52,706 A:middle
but that's also why
I'm going to be pushing

312
00:16:52,706 --> 00:16:54,636 A:middle
down in this MDM
App Configuration.

313
00:16:55,106 --> 00:16:56,546 A:middle
So you'll notice
some re-defaults.

314
00:16:56,596 --> 00:16:59,156 A:middle
All I do is I call
into NSUserDefaults.

315
00:16:59,526 --> 00:17:02,526 A:middle
I make sure I call into
that configuration key.

316

317
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

318
00:16:59,526 --> 00:17:02,526 A:middle
I make sure I call into
that configuration key.

319
00:17:02,996 --> 00:17:05,006 A:middle
And then from the
dictionary I pull

320
00:17:05,006 --> 00:17:07,596 A:middle
out the relevant
information that I need,

321
00:17:07,806 --> 00:17:08,826 A:middle
such as the server URL.

322
00:17:09,146 --> 00:17:12,675 A:middle
An important thing to note is
do put error checking on this

323
00:17:12,675 --> 00:17:15,506 A:middle
to make sure that you're
not loading bad values.

324
00:17:16,205 --> 00:17:19,846 A:middle
And so now what we'll do is
I'll switch over to the iPad

325
00:17:19,846 --> 00:17:24,126 A:middle
and I'll push down an examp
MDM App Configuration.

326
00:17:24,126 --> 00:17:26,746 A:middle
So you'll notice
that I have my app

327
00:17:26,746 --> 00:17:28,826 A:middle
over here called "Secretive."

328
00:17:29,536 --> 00:17:33,706 A:middle
And when I open it up, I don't
have an MDM App Configuration

329
00:17:33,706 --> 00:17:34,436 A:middle
here currently.

330
00:17:34,436 --> 00:17:36,456 A:middle
I've installed the
managed app, but you know,

331
00:17:36,456 --> 00:17:38,146 A:middle
right now I don't
have my server URL.

332
00:17:38,376 --> 00:17:43,056 A:middle
So over on my MDM server, I've
loaded up a command to send

333
00:17:43,056 --> 00:17:46,756 A:middle
down the magical
app configuration.

334
00:17:47,636 --> 00:17:49,606 A:middle
And so I'm going to send
that notification down.

335
00:17:50,456 --> 00:17:53,166 A:middle
And you'll notice that when
I receive the notification

336
00:17:53,166 --> 00:17:56,656 A:middle
for NSUserDefaultsDidChange,
I automatically started

337
00:17:56,656 --> 00:17:58,546 A:middle
up a session and
retrieved this document

338
00:17:58,546 --> 00:18:00,036 A:middle
from the server URL
that I was given.

339

340
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

341
00:17:58,546 --> 00:18:00,036 A:middle
from the server URL
that I was given.

342
00:18:00,606 --> 00:18:02,766 A:middle
So that is MDM App
Configuration.

343
00:18:02,766 --> 00:18:03,976 A:middle
And we'll return to Dave.

344
00:18:04,516 --> 00:18:07,956 A:middle
[ Applause ]

345
00:18:08,456 --> 00:18:09,186 A:middle
>> Thanks Alex.

346
00:18:10,266 --> 00:18:11,226 A:middle
It's like magic.

347
00:18:12,486 --> 00:18:15,066 A:middle
Your apps get configured
correctly,

348
00:18:15,616 --> 00:18:17,316 A:middle
without having your
user do anything.

349
00:18:17,366 --> 00:18:17,806 A:middle
It's great.

350
00:18:19,036 --> 00:18:23,016 A:middle
I hope you caught that
little remark that Alex made.

351
00:18:23,736 --> 00:18:27,206 A:middle
"Please validate the input
that you get from the server."

352
00:18:28,116 --> 00:18:30,736 A:middle
Because as far as you are
concerned as an app writer,

353
00:18:31,036 --> 00:18:34,706 A:middle
the server is an unknown network
entity, and they're going

354
00:18:34,706 --> 00:18:37,446 A:middle
to be pushing down keys
that may be misformatted

355
00:18:37,816 --> 00:18:39,996 A:middle
or of the wrong type.

356
00:18:40,276 --> 00:18:42,986 A:middle
So please validate
the keys and make sure

357
00:18:42,986 --> 00:18:44,676 A:middle
that you understand
what they are.

358
00:18:44,986 --> 00:18:46,596 A:middle
Also publish what you understand

359
00:18:46,716 --> 00:18:50,586 A:middle
so that the server admins
can configure you correctly.

360
00:18:51,146 --> 00:18:54,966 A:middle
So that's MDM App Configuration.

361
00:18:56,466 --> 00:18:57,566 A:middle
Next. All right.

362
00:18:57,796 --> 00:19:01,886 A:middle
Let's talk about Single Sign-on.

363

364
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

365
00:18:57,796 --> 00:19:01,886 A:middle
Let's talk about Single Sign-on.

366
00:19:03,756 --> 00:19:07,986 A:middle
Single sign-on is a Kerberos -

367
00:19:08,356 --> 00:19:12,476 A:middle
we offer a Kerberos
single sign-on on iOS

368
00:19:13,186 --> 00:19:18,306 A:middle
that can be applied by the MDM
server across the entire system.

369
00:19:19,136 --> 00:19:23,186 A:middle
So that once you log
in, you will be logged

370
00:19:23,186 --> 00:19:25,936 A:middle
in across several different apps

371
00:19:26,106 --> 00:19:29,736 A:middle
when you're accessing the
same network resource.

372
00:19:30,356 --> 00:19:35,436 A:middle
So using Single Sign-on
couldn't be easier.

373
00:19:36,126 --> 00:19:40,066 A:middle
You just have to
use HTTP or HTTPS.

374
00:19:40,066 --> 00:19:42,636 A:middle
Which most of you probably are.

375
00:19:43,426 --> 00:19:47,286 A:middle
If you use NSURLConnection,
or NSURLSession,

376
00:19:48,236 --> 00:19:51,046 A:middle
Kerberos Single Sign-on
is free to you.

377
00:19:51,976 --> 00:19:53,816 A:middle
So here's the takeaway.

378
00:19:54,386 --> 00:19:58,156 A:middle
Don't do anything, and
it works; it's great.

379
00:19:59,346 --> 00:20:02,206 A:middle
The MDM server will
apply the configuration,

380

381
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

382
00:19:59,346 --> 00:20:02,206 A:middle
The MDM server will
apply the configuration,

383
00:20:02,656 --> 00:20:07,466 A:middle
and your apps will either
get a 200 OK or a 401 Fail.

384
00:20:08,026 --> 00:20:12,536 A:middle
If it's a 200 OK, assume that
the resource is available

385
00:20:12,536 --> 00:20:14,966 A:middle
to you and just use it.

386
00:20:15,586 --> 00:20:21,206 A:middle
Of course your apps may provide
alternate authentication,

387
00:20:21,626 --> 00:20:25,366 A:middle
such as you know, HTTP Digest.

388
00:20:25,966 --> 00:20:29,666 A:middle
And Kerberos authentication
will be attempted first.

389
00:20:30,596 --> 00:20:33,416 A:middle
And if that doesn't
work, iOS will fall back

390
00:20:33,416 --> 00:20:36,506 A:middle
to reporting an error to your
app, and you get the chance

391
00:20:36,546 --> 00:20:40,026 A:middle
to authenticate using
a different scheme.

392
00:20:40,596 --> 00:20:43,346 A:middle
So don't do anything.

393
00:20:43,976 --> 00:20:44,826 A:middle
No example.

394
00:20:46,236 --> 00:20:51,006 A:middle
Next. Okay.

395
00:20:51,626 --> 00:20:56,226 A:middle
Here is something that we've
gotten asked several times.

396
00:20:57,526 --> 00:21:02,656 A:middle
How do I download files securely
all the way from my server

397

398
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

399
00:20:57,526 --> 00:21:02,656 A:middle
How do I download files securely
all the way from my server

400
00:21:03,236 --> 00:21:08,246 A:middle
down to the flash on iOS?

401
00:21:08,356 --> 00:21:12,666 A:middle
As you may or may not know,
all files that you create

402
00:21:12,746 --> 00:21:18,196 A:middle
from your app already get
this protection level.

403
00:21:18,946 --> 00:21:23,586 A:middle
FileProtectionCompleteUntil
FirstUserAuthentication.

404
00:21:24,316 --> 00:21:27,806 A:middle
So just a recap, this means
that the file is encrypted.

405
00:21:28,856 --> 00:21:32,746 A:middle
Unreadable after you
restart your iOS device.

406
00:21:33,856 --> 00:21:36,676 A:middle
Once you enter your
passcode, the device -

407
00:21:36,676 --> 00:21:38,236 A:middle
the file is readable

408
00:21:39,156 --> 00:21:42,666 A:middle
and it remains readable
across device locks.

409
00:21:43,416 --> 00:21:45,586 A:middle
Until you restart
the device again.

410
00:21:46,926 --> 00:21:51,666 A:middle
So what we want to do is we
want to upgrade this file.

411
00:21:51,716 --> 00:21:54,276 A:middle
If you do nothing and you use,
you know, just write a file

412
00:21:54,276 --> 00:21:55,766 A:middle
to disk, this is what
you're going to get.

413
00:21:56,626 --> 00:21:58,126 A:middle
But we want to upgrade that.

414
00:21:58,396 --> 00:22:02,646 A:middle
So we want to have
the file be specified

415

416
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

417
00:21:58,396 --> 00:22:02,646 A:middle
So we want to have
the file be specified

418
00:22:02,646 --> 00:22:03,986 A:middle
as data protection complete.

419
00:22:05,436 --> 00:22:07,966 A:middle
Which means that whenever
you lock the device,

420
00:22:08,146 --> 00:22:11,116 A:middle
the file becomes
unreadable, cryptographically.

421
00:22:11,826 --> 00:22:15,476 A:middle
And the next time the user
enters their passcode,

422
00:22:15,976 --> 00:22:18,446 A:middle
the file becomes
readable again etcetera.

423
00:22:20,536 --> 00:22:22,566 A:middle
So we're going

424
00:22:22,566 --> 00:22:26,486 A:middle
to use NSURLSession
data task to do this.

425
00:22:27,606 --> 00:22:30,156 A:middle
And as a little bonus here,

426
00:22:30,156 --> 00:22:32,326 A:middle
so maybe this document
is extra sensitive,

427
00:22:32,606 --> 00:22:36,756 A:middle
you don't want this document to
appear in your user's backup.

428
00:22:37,826 --> 00:22:40,396 A:middle
So iCloud backup
or iTunes backup.

429
00:22:41,006 --> 00:22:43,896 A:middle
So we're going to show
you how to mark files

430
00:22:44,196 --> 00:22:46,536 A:middle
so that they don't
get backed up.

431
00:22:46,536 --> 00:22:49,726 A:middle
All right, let's switch over
back to Alex and he's going

432
00:22:49,726 --> 00:22:53,346 A:middle
to show you some
code to do this.

433
00:22:53,556 --> 00:22:56,016 A:middle
>> So back on our demo machine.

434
00:22:56,256 --> 00:22:59,186 A:middle
You'll notice that we have
on our ViewController set it

435
00:22:59,186 --> 00:23:01,456 A:middle
as implementing the delegates

436

437
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

438
00:22:59,186 --> 00:23:01,456 A:middle
as implementing the delegates

439
00:23:01,486 --> 00:23:04,816 A:middle
of NSURLSession and
NSURLSessionData.

440
00:23:05,366 --> 00:23:08,496 A:middle
And the reason we've
done this is we're going

441
00:23:08,496 --> 00:23:12,316 A:middle
to use those delegate callbacks
during our secure download.

442
00:23:12,766 --> 00:23:17,036 A:middle
So down here in SecureURLSession
that I have set up here,

443
00:23:17,366 --> 00:23:19,996 A:middle
I'm going to take that
server URL that I pulled

444
00:23:19,996 --> 00:23:22,216 A:middle
down from MDM App Configuration,

445
00:23:22,536 --> 00:23:26,446 A:middle
and I going to create an
NSURLSessionDataTask right here.

446
00:23:26,446 --> 00:23:29,846 A:middle
And you'll notice that I've left
the completionHandler as a nil.

447
00:23:30,046 --> 00:23:32,426 A:middle
And the reason I've done
this is by setting nil

448
00:23:32,426 --> 00:23:33,456 A:middle
for the completionHandler,

449
00:23:33,656 --> 00:23:36,826 A:middle
I will get the delegate
callbacks for the data task.

450
00:23:37,656 --> 00:23:39,606 A:middle
And that's the most
important thing for me.

451
00:23:40,056 --> 00:23:44,356 A:middle
So in URLSession
DataTaskDid ReceiveResponse.

452
00:23:44,776 --> 00:23:47,446 A:middle
I'm going to get this call as
soon as we make the connection,

453
00:23:47,486 --> 00:23:49,956 A:middle
and I'm going to create
a file where I'm going

454
00:23:49,956 --> 00:23:52,626 A:middle
to download my strategic
plan PDF.

455
00:23:53,416 --> 00:23:56,876 A:middle
And so you'll notice that I call
NSFileManager defaultManager

456
00:23:56,966 --> 00:23:59,726 A:middle
createFileAtPath
contents and attributes.

457
00:23:59,726 --> 00:24:01,476 A:middle
And the attribute
I'm going to pass

458

459
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

460
00:23:59,726 --> 00:24:01,476 A:middle
And the attribute
I'm going to pass

461
00:24:01,476 --> 00:24:03,846 A:middle
into it is this
NSFileProtectionKey.

462
00:24:04,226 --> 00:24:07,166 A:middle
And in that NSFileProtectionKey
I'm going to specify

463
00:24:07,166 --> 00:24:10,576 A:middle
that I want NSFile protection
complete and less open.

464
00:24:10,576 --> 00:24:13,256 A:middle
What this means is that
the file will be unreadable

465
00:24:13,256 --> 00:24:17,106 A:middle
when the device is locked,
unless the file is already open

466
00:24:17,426 --> 00:24:18,646 A:middle
when the device locks.

467
00:24:19,146 --> 00:24:20,626 A:middle
So while I'm downloading
I'm going

468
00:24:20,626 --> 00:24:21,836 A:middle
to set the attribute to that.

469
00:24:22,536 --> 00:24:25,866 A:middle
And so the other important thing
that we've mentioned already is

470
00:24:25,866 --> 00:24:28,526 A:middle
that we want to turn
off file backup.

471
00:24:29,296 --> 00:24:31,436 A:middle
And so what I'm going to
do is I'm going to set

472
00:24:31,576 --> 00:24:34,836 A:middle
onto the file URL
a resource value.

473
00:24:35,026 --> 00:24:37,536 A:middle
The key I'm going to set it

474
00:24:37,536 --> 00:24:40,816 A:middle
on is NSURLisExcluded
fromBackupKey.

475
00:24:41,156 --> 00:24:42,236 A:middle
And this key will make it

476
00:24:42,236 --> 00:24:44,306 A:middle
so that this file
will not be backed

477
00:24:44,306 --> 00:24:46,376 A:middle
up in iTunes or in iCloud.

478
00:24:47,176 --> 00:24:48,316 A:middle
And so we'll go

479
00:24:48,316 --> 00:24:51,166 A:middle
on in URLSessionDataTask
to receive data.

480
00:24:51,166 --> 00:24:53,136 A:middle
This delegate method
is going to be called,

481
00:24:53,136 --> 00:24:55,396 A:middle
every time I receive
new data from my server.

482
00:24:55,746 --> 00:24:57,326 A:middle
And I'm just going
to store it all

483
00:24:57,326 --> 00:24:59,466 A:middle
into that file I
created earlier.

484

485
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

486
00:25:00,016 --> 00:25:01,596 A:middle
And then at the very end

487
00:25:01,596 --> 00:25:04,306 A:middle
in URLSession
taskDidCompleteWithError.

488
00:25:04,306 --> 00:25:05,956 A:middle
I'm going to make sure
there were no errors.

489
00:25:05,956 --> 00:25:09,126 A:middle
And if there were no errors
I'm going to then change it

490
00:25:09,126 --> 00:25:10,226 A:middle
so that the attribute

491
00:25:10,256 --> 00:25:12,626 A:middle
for NSFileProtectionKey
is changed to complete.

492
00:25:12,626 --> 00:25:15,796 A:middle
Because at this point I decided,
you know, when the device locks,

493
00:25:15,796 --> 00:25:17,596 A:middle
I want this file
to be unreadable.

494
00:25:18,656 --> 00:25:21,816 A:middle
And that's pretty much it.

495
00:25:22,216 --> 00:25:24,176 A:middle
I would show you the demo,
but we've already shown you

496
00:25:24,176 --> 00:25:25,836 A:middle
that in MDM App Configurations.

497
00:25:25,836 --> 00:25:26,986 A:middle
So let's go back to Dave.

498
00:25:27,616 --> 00:25:28,166 A:middle
>> Thanks Alex.

499
00:25:30,766 --> 00:25:33,566 A:middle
So Downloading to a Secure File.

500
00:25:33,566 --> 00:25:34,296 A:middle
Here's how you do it.

501
00:25:34,976 --> 00:25:36,476 A:middle
You create an NSURLSession.

502
00:25:37,736 --> 00:25:42,156 A:middle
Create a file, when the
request begins, create a file

503
00:25:42,156 --> 00:25:45,656 A:middle
with dataProtection
CompleteUnlessOpen

504
00:25:46,256 --> 00:25:49,026 A:middle
so that you can continue
to write data to that file

505
00:25:49,456 --> 00:25:52,116 A:middle
as you're downloading it,
even if your device is locked.

506
00:25:53,266 --> 00:25:55,646 A:middle
When the file has
completely downloaded,

507
00:25:55,916 --> 00:25:58,806 A:middle
upgrade that protection
to FileProtectionComplete.

508
00:25:59,886 --> 00:26:02,676 A:middle
And as you can tell,
as you can see,

509

510
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

511
00:25:59,886 --> 00:26:02,676 A:middle
And as you can tell,
as you can see,

512
00:26:02,676 --> 00:26:06,206 A:middle
there's an NSURLMethod
you can call to set a bit

513
00:26:06,256 --> 00:26:10,016 A:middle
that says don't backup this
file to iTunes and iCloud.

514
00:26:11,526 --> 00:26:12,346 A:middle
All right.

515
00:26:13,216 --> 00:26:18,466 A:middle
Next. HTTPS Certificate Pinning.

516
00:26:18,586 --> 00:26:24,096 A:middle
We all know that HTTPS
is a way for the client

517
00:26:24,096 --> 00:26:26,806 A:middle
to tell whether it's talking
to the correct server.

518
00:26:28,196 --> 00:26:30,376 A:middle
This only works

519
00:26:30,376 --> 00:26:33,146 A:middle
if the certificate
chain is trustworthy.

520
00:26:34,336 --> 00:26:40,246 A:middle
So one of the things that we
usually do is we can specify

521
00:26:40,486 --> 00:26:43,476 A:middle
for this connection that
only these certificates are

522
00:26:43,476 --> 00:26:46,596 A:middle
to be trusted and not any other
certificate in your database

523
00:26:46,786 --> 00:26:51,976 A:middle
that may otherwise be
trusted, for example, Safari.

524
00:26:52,046 --> 00:26:56,196 A:middle
And to do this of
course you need HTTPS.

525
00:26:56,376 --> 00:27:00,126 A:middle
You need to specify your
trusted root certificates during

526

527
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

528
00:26:56,376 --> 00:27:00,126 A:middle
You need to specify your
trusted root certificates during

529
00:27:00,126 --> 00:27:02,016 A:middle
HTTPS authentication.

530
00:27:03,096 --> 00:27:06,836 A:middle
And you do this to prevent
man-in-the-middle attacks

531
00:27:07,326 --> 00:27:08,586 A:middle
that pretend to be your server.

532
00:27:08,586 --> 00:27:15,666 A:middle
And here's the takeaway - use
certificate pinning instead

533
00:27:16,156 --> 00:27:18,776 A:middle
of doing things like
SSID detection.

534
00:27:19,696 --> 00:27:22,716 A:middle
Especially in, you know,
like retail scenarios.

535
00:27:22,716 --> 00:27:27,686 A:middle
A lot of people use SSIDs or
some other kind of heuristic

536
00:27:27,956 --> 00:27:31,976 A:middle
to tell whether or not they're
talking to the correct server.

537
00:27:32,706 --> 00:27:35,366 A:middle
Instead of doing that,
make sure you are talking

538
00:27:35,366 --> 00:27:37,176 A:middle
to the correct server regardless

539
00:27:37,486 --> 00:27:39,496 A:middle
of the environment
that you're in.

540
00:27:40,516 --> 00:27:41,086 A:middle
All right.

541
00:27:41,506 --> 00:27:44,336 A:middle
To show you a short example of
how we do certificate pinning,

542
00:27:44,336 --> 00:27:49,106 A:middle
let's switch back to
Alex and his code.

543
00:27:49,316 --> 00:27:52,156 A:middle
>> So you will remember
that I mentioned that we had

544
00:27:52,156 --> 00:27:54,026 A:middle
that root certificate
key that I set.

545
00:27:54,466 --> 00:27:56,836 A:middle
So when I push down the
MDM App Configuration,

546
00:27:56,896 --> 00:28:00,056 A:middle
I push down the data for my
server's root certificate.

547

548
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

549
00:27:56,896 --> 00:28:00,056 A:middle
I push down the data for my
server's root certificate.

550
00:28:00,416 --> 00:28:03,056 A:middle
Because I want to check to make
sure that I'm not connecting

551
00:28:03,056 --> 00:28:06,626 A:middle
to the wrong server, and verify
that my users are connecting

552
00:28:06,626 --> 00:28:07,976 A:middle
to the server I want them to.

553
00:28:08,626 --> 00:28:11,146 A:middle
So you will notice that
I have here a method

554
00:28:11,146 --> 00:28:14,886 A:middle
that I've implemented called
URLSession didReceiveChallenge

555
00:28:15,016 --> 00:28:16,056 A:middle
with completionHandler.

556
00:28:16,056 --> 00:28:17,826 A:middle
And this is going to
be called when I try

557
00:28:17,826 --> 00:28:20,376 A:middle
and connect to my HTTPS server.

558
00:28:20,926 --> 00:28:23,376 A:middle
And when I try and connect,
I want to double check

559
00:28:23,426 --> 00:28:25,516 A:middle
that the authentication
method that was

560
00:28:25,986 --> 00:28:30,476 A:middle
in the challenge's protection
space is a NSURLAuthentication

561
00:28:30,476 --> 00:28:31,856 A:middle
MethodServerTrust.

562
00:28:32,186 --> 00:28:36,076 A:middle
If so, I'm going to get the
SecTrustRef from the server,

563
00:28:36,076 --> 00:28:39,616 A:middle
which is in challenge.protection
Space.serverTrust.

564
00:28:40,326 --> 00:28:42,406 A:middle
The next thing I'm going
to do is I'm going to load

565
00:28:42,406 --> 00:28:45,596 A:middle
up that root certificate that I
got from MDM App Configuration.

566
00:28:46,206 --> 00:28:48,066 A:middle
In this example,
I've already loaded

567
00:28:48,066 --> 00:28:50,566 A:middle
that when I did the
NSUserDefaultsReadback.

568
00:28:50,566 --> 00:28:52,496 A:middle
I put it into a variable
called self -

569
00:28:52,496 --> 00:28:54,986 A:middle
or into
serverRootCertificateData.

570
00:28:54,986 --> 00:28:56,576 A:middle
So I'm going to load
up that data.

571
00:28:56,816 --> 00:28:59,126 A:middle
And I'm going to create
a SecCertificate with it.

572
00:28:59,826 --> 00:29:00,906 A:middle
And I want to double check

573

574
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

575
00:28:59,826 --> 00:29:00,906 A:middle
And I want to double check

576
00:29:00,936 --> 00:29:02,586 A:middle
that the certificate
was created correctly

577
00:29:02,586 --> 00:29:04,066 A:middle
by making sure that's not null.

578
00:29:04,446 --> 00:29:08,346 A:middle
If so, I'm going to then
set the anchor certificates

579
00:29:08,766 --> 00:29:11,806 A:middle
on the server's challenge
trust that I got.

580
00:29:12,126 --> 00:29:14,076 A:middle
The reason I do this
is I want to make sure

581
00:29:14,076 --> 00:29:17,166 A:middle
that I only trust the root
certificate I sent down.

582
00:29:17,166 --> 00:29:20,936 A:middle
I don't want to trust any
of the default certificates

583
00:29:20,936 --> 00:29:22,906 A:middle
that are included
in the iOS device.

584
00:29:23,156 --> 00:29:25,236 A:middle
And by saying the root
anchor certificates,

585
00:29:25,356 --> 00:29:26,256 A:middle
I can exclude them.

586
00:29:26,636 --> 00:29:27,706 A:middle
You'll notice that I've called -

587
00:29:27,706 --> 00:29:30,136 A:middle
also have this method
SecTrustSetAnchor

588
00:29:30,136 --> 00:29:31,176 A:middle
CertificatesOnly.

589
00:29:31,406 --> 00:29:34,356 A:middle
If I wanted to make it so
that I also trust the default

590
00:29:34,356 --> 00:29:35,856 A:middle
certificates installed
on the device,

591
00:29:36,146 --> 00:29:39,236 A:middle
I would set this yes
value at the end to no.

592
00:29:39,316 --> 00:29:42,856 A:middle
If you are only setting it
for the anchor certificates

593
00:29:43,176 --> 00:29:45,386 A:middle
that you trust, you do
not have to set this.

594
00:29:45,616 --> 00:29:46,976 A:middle
I've only done it
in this example

595
00:29:46,976 --> 00:29:49,526 A:middle
to show you how you can trust
the device's certificates

596
00:29:49,576 --> 00:29:50,246 A:middle
if you want to.

597
00:29:50,926 --> 00:29:53,606 A:middle
And so the last thing that
I'm going to do is I'm going

598
00:29:53,606 --> 00:29:57,256 A:middle
to do a SecTrustEvaluate with
the serversChallengeTrust

599
00:29:57,576 --> 00:29:59,176 A:middle
and I'm going to
get a trust result.

600
00:29:59,176 --> 00:30:01,526 A:middle
From that trust result I'm going
to make sure that, you know,

601

602
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

603
00:29:59,176 --> 00:30:01,526 A:middle
From that trust result I'm going
to make sure that, you know,

604
00:30:01,666 --> 00:30:02,996 A:middle
I didn't receive any errors.

605
00:30:03,466 --> 00:30:05,926 A:middle
And make sure that the
SecTrustResult is either

606
00:30:05,926 --> 00:30:07,516 A:middle
unspecified or proceed.

607
00:30:08,296 --> 00:30:12,086 A:middle
And then if I find out that
I do trust this certificate,

608
00:30:12,086 --> 00:30:13,996 A:middle
or if I've turned off
certificate pinning,

609
00:30:14,396 --> 00:30:18,016 A:middle
I'm going to automatically just
say, call the completionHandler

610
00:30:18,046 --> 00:30:20,796 A:middle
with NSURLSessionAuth
ChallengeUseCredential

611
00:30:20,866 --> 00:30:23,046 A:middle
and give it the credential
that the server gave me.

612
00:30:23,606 --> 00:30:25,596 A:middle
If I don't trust
the certificate,

613
00:30:25,886 --> 00:30:28,106 A:middle
I will call instead
completionHandler

614
00:30:28,506 --> 00:30:31,916 A:middle
NSURLSessionAuthChallengeReject
ProtectionSpace.

615
00:30:32,106 --> 00:30:34,476 A:middle
And that will tell the
app that no, I'm not going

616
00:30:34,476 --> 00:30:35,866 A:middle
to allow you to download this.

617
00:30:36,416 --> 00:30:41,536 A:middle
So in our example, we'll
go back to the iPad again.

618
00:30:42,546 --> 00:30:44,256 A:middle
You'll notice I've already
downloaded this file.

619
00:30:44,256 --> 00:30:47,856 A:middle
In settings I've set up a pin
here called certificate pinning,

620
00:30:47,856 --> 00:30:48,866 A:middle
and I'm going to turn it on.

621
00:30:49,696 --> 00:30:54,246 A:middle
The next thing I'm going to
do is - oop they already went

622
00:30:54,246 --> 00:30:56,426 A:middle
through this, so let
me just reset this.

623
00:30:56,966 --> 00:31:01,006 A:middle
So when I call into
the app - yeah,

624

625
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

626
00:30:56,966 --> 00:31:01,006 A:middle
So when I call into
the app - yeah,

627
00:31:01,406 --> 00:31:03,446 A:middle
so you'll notice,
ignore the crash.

628
00:31:04,846 --> 00:31:08,616 A:middle
With this, when I called back
into the app it tried to load

629
00:31:08,616 --> 00:31:10,816 A:middle
up the document again
from the server.

630
00:31:11,056 --> 00:31:12,756 A:middle
And you'll notice
that it's telling me

631
00:31:12,756 --> 00:31:14,666 A:middle
that my certificate
pinned by the server -

632
00:31:15,056 --> 00:31:17,446 A:middle
the certificate presented by
the server is not the same

633
00:31:17,446 --> 00:31:18,476 A:middle
as my pin certificate.

634
00:31:18,836 --> 00:31:22,186 A:middle
Let me go back to my server,
and I'm going to change it

635
00:31:22,186 --> 00:31:24,096 A:middle
so that it presents
the right certificate.

636
00:31:24,596 --> 00:31:29,316 A:middle
So I've set up my server;
I've fixed the certificate.

637
00:31:29,686 --> 00:31:30,456 A:middle
Everything's good.

638
00:31:30,996 --> 00:31:32,936 A:middle
So I'm going to click
on my refresh.

639
00:31:33,976 --> 00:31:37,146 A:middle
And when I refresh, the pin
certificate was correct this

640
00:31:37,146 --> 00:31:38,976 A:middle
time, and so I was able
to load the document.

641
00:31:39,466 --> 00:31:40,976 A:middle
And so that is how you
do certificate pinning.

642
00:31:41,516 --> 00:31:46,266 A:middle
[ Applause ]

643
00:31:46,766 --> 00:31:47,406 A:middle
>> Thanks Alex.

644
00:31:48,646 --> 00:31:52,656 A:middle
HTTPS Certificate
Pinning assures you

645
00:31:52,656 --> 00:31:54,216 A:middle
that there's no
man-in-the-middle attack

646
00:31:55,046 --> 00:31:57,456 A:middle
with your connection
to your trusted server.

647
00:31:59,296 --> 00:32:04,296 A:middle
So what have we learned
from the first example app?

648

649
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

650
00:31:59,296 --> 00:32:04,296 A:middle
So what have we learned
from the first example app?

651
00:32:04,296 --> 00:32:06,106 A:middle
The Secure Document Viewer?

652
00:32:07,516 --> 00:32:11,386 A:middle
We learned that MDM App
Configuration is awesome.

653
00:32:12,036 --> 00:32:13,686 A:middle
It's magical.

654
00:32:14,266 --> 00:32:17,316 A:middle
Server can configure
your apps just right.

655
00:32:17,776 --> 00:32:19,276 A:middle
The user doesn't have to do it.

656
00:32:20,006 --> 00:32:24,406 A:middle
And you can offer keys to the
server admin to configure,

657
00:32:24,406 --> 00:32:27,816 A:middle
to set up your app just
the way they'd like it.

658
00:32:28,366 --> 00:32:31,266 A:middle
By the way, app configuration
can be delivered

659
00:32:32,246 --> 00:32:34,216 A:middle
as you're installing the app.

660
00:32:34,216 --> 00:32:37,496 A:middle
There is no race between app
installation and configuration.

661
00:32:39,476 --> 00:32:44,146 A:middle
We also learned that Single
Sign-on is also awesome.

662
00:32:44,146 --> 00:32:47,496 A:middle
Because you don't have to
do anything and it works.

663
00:32:47,996 --> 00:32:51,166 A:middle
All you have to do
is use HTTP or HTTPS.

664
00:32:51,696 --> 00:32:56,336 A:middle
And if your admin has configured
Single Sign-on on the device,

665
00:32:56,736 --> 00:33:00,076 A:middle
then it will just work or
you will get an auth failure.

666

667
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

668
00:32:56,736 --> 00:33:00,076 A:middle
then it will just work or
you will get an auth failure.

669
00:33:02,496 --> 00:33:07,506 A:middle
We learned how to download files
securely using NSURLSession

670
00:33:07,766 --> 00:33:11,316 A:middle
DataTask and setting the
correct protection level

671
00:33:11,316 --> 00:33:13,866 A:middle
at different parts of
the download as well

672
00:33:13,866 --> 00:33:14,946 A:middle
as excluding from backup.

673
00:33:15,796 --> 00:33:20,786 A:middle
And, of course, we saw how to
pin our HTTPS certificates.

674
00:33:21,796 --> 00:33:23,206 A:middle
So that's our first app.

675
00:33:26,056 --> 00:33:27,586 A:middle
All right, next app.

676
00:33:28,266 --> 00:33:28,866 A:middle
Point of sale.

677
00:33:30,196 --> 00:33:34,776 A:middle
For this example we're
going to show you a little -

678
00:33:35,056 --> 00:33:38,836 A:middle
maybe a device that a sales
associate might carry.

679
00:33:39,076 --> 00:33:41,466 A:middle
So we have a scanner on
the left-hand side here

680
00:33:41,466 --> 00:33:44,036 A:middle
on the tab bar which
will scan barcodes.

681
00:33:44,626 --> 00:33:48,226 A:middle
And we have a catalog that
lets them look up prices

682
00:33:48,296 --> 00:33:49,386 A:middle
for products, etcetera.

683
00:33:50,526 --> 00:33:51,106 A:middle
Baby clothes.

684
00:33:51,196 --> 00:33:54,986 A:middle
So the first thing I
want to talk to you

685
00:33:54,986 --> 00:33:59,106 A:middle
about is Single App Mode.

686
00:33:59,106 --> 00:34:05,736 A:middle
Single App Mode is a way that an
MDM server can lock the device

687

688
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

689
00:33:59,106 --> 00:34:05,736 A:middle
Single App Mode is a way that an
MDM server can lock the device

690
00:34:06,236 --> 00:34:08,735 A:middle
into just your app.

691
00:34:08,735 --> 00:34:10,386 A:middle
You can send a command down

692
00:34:11,096 --> 00:34:13,806 A:middle
and tell the device
just run this app.

693
00:34:14,255 --> 00:34:16,096 A:middle
If the app crashes,
it relaunches the app.

694
00:34:16,266 --> 00:34:18,846 A:middle
If the user presses
the Home button,

695
00:34:18,846 --> 00:34:19,775 A:middle
this gets stuck in the app.

696
00:34:20,786 --> 00:34:22,045 A:middle
So that's all in
Single App Mode.

697
00:34:22,045 --> 00:34:23,946 A:middle
We'll show that later
in a later example.

698
00:34:25,416 --> 00:34:29,356 A:middle
But first, I'd like
to talk about iBeacon.

699
00:34:30,616 --> 00:34:33,216 A:middle
So iBeacon is awesome.

700
00:34:33,795 --> 00:34:35,326 A:middle
It gives you context.

701
00:34:35,536 --> 00:34:38,846 A:middle
It tells your device,
it tells your app

702
00:34:38,985 --> 00:34:40,866 A:middle
that you're near
something, right?

703
00:34:41,426 --> 00:34:44,766 A:middle
You're near something
that you specify.

704
00:34:45,146 --> 00:34:49,386 A:middle
So you can use iBeacon to
provide your app with context.

705
00:34:49,386 --> 00:34:51,056 A:middle
In this case, for the
Point of Sale app,

706
00:34:51,545 --> 00:34:53,996 A:middle
we want to provide
the app the knowledge

707
00:34:53,996 --> 00:34:57,466 A:middle
that you're actually using
the barcode scanner near the

708
00:34:57,466 --> 00:34:58,886 A:middle
checkout register, right?

709
00:34:59,086 --> 00:35:00,686 A:middle
So if you take the
device elsewhere,

710

711
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

712
00:34:59,086 --> 00:35:00,686 A:middle
So if you take the
device elsewhere,

713
00:35:01,296 --> 00:35:06,006 A:middle
they will not allow you to
scan prices, to scan barcodes.

714
00:35:07,276 --> 00:35:10,426 A:middle
So using iBeacon in conjunction

715
00:35:10,426 --> 00:35:13,066 A:middle
with other core location
technologies such as, you know,

716
00:35:13,066 --> 00:35:17,716 A:middle
GPS and location, gives you
a really fine-grained control

717
00:35:17,716 --> 00:35:19,296 A:middle
over how your app is used.

718
00:35:20,036 --> 00:35:24,836 A:middle
And it gives you an ability
using MDM App Configuration

719
00:35:25,546 --> 00:35:28,336 A:middle
to let the admins
configure your apps

720
00:35:28,936 --> 00:35:30,816 A:middle
so that your app
can only be used

721
00:35:30,816 --> 00:35:32,306 A:middle
in this particular retail store.

722
00:35:32,596 --> 00:35:34,176 A:middle
Or in that particular context.

723
00:35:34,976 --> 00:35:36,476 A:middle
Right? So here's a tip.

724
00:35:36,786 --> 00:35:42,096 A:middle
Use iBeacon to verify your
location-sensitive operation.

725
00:35:42,976 --> 00:35:45,686 A:middle
So now I'm going to hand it off
to Alex again, and he's going

726
00:35:45,686 --> 00:35:48,186 A:middle
to show you a little example.

727
00:35:49,466 --> 00:35:53,456 A:middle
>> So for our point of sale app,
I have a [inaudible] app called

728
00:35:53,456 --> 00:35:55,876 A:middle
"Moolah," which is for
selling baby clothes.

729
00:35:56,196 --> 00:35:57,826 A:middle
And so in my example,

730
00:35:58,086 --> 00:35:59,856 A:middle
what I have is I have
this app delegate.

731
00:35:59,856 --> 00:36:01,446 A:middle
In this app delegate I'm going

732

733
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

734
00:35:59,856 --> 00:36:01,446 A:middle
In this app delegate I'm going

735
00:36:01,446 --> 00:36:04,036 A:middle
to create a CLLocationManager
object.

736
00:36:04,546 --> 00:36:07,726 A:middle
I'm going to set the app
delegate as the delegate

737
00:36:07,796 --> 00:36:09,086 A:middle
for the Location Manager.

738
00:36:09,136 --> 00:36:12,636 A:middle
The important thing for the
iBeacon, where we're going

739
00:36:12,636 --> 00:36:13,836 A:middle
to this method here

740
00:36:14,306 --> 00:36:15,876 A:middle
of
startMonitoringForRegisterBeacon

741
00:36:16,226 --> 00:36:20,366 A:middle
is that what I need to do is
I need to set up an NSUUID

742
00:36:20,446 --> 00:36:23,076 A:middle
for the region that I
want this to work in.

743
00:36:23,076 --> 00:36:26,826 A:middle
In my example, let's imagine
in our point of sale example

744
00:36:26,826 --> 00:36:30,146 A:middle
that we have - we want our
people at the register to be,

745
00:36:30,146 --> 00:36:31,416 A:middle
you know, in a general area.

746
00:36:31,416 --> 00:36:33,696 A:middle
We don't want them in the
back room scanning things

747
00:36:33,696 --> 00:36:37,866 A:middle
and selling things without the
security cameras around them.

748
00:36:37,906 --> 00:36:41,296 A:middle
So for our region I'm going to
create a UUID specified here,

749
00:36:41,346 --> 00:36:44,186 A:middle
and I'm going to give an
identifier of the app -

750
00:36:44,186 --> 00:36:45,476 A:middle
so "Moolah" in this case.

751
00:36:45,476 --> 00:36:48,616 A:middle
And I'm going to create a
CLBeaconRegion using the

752
00:36:48,616 --> 00:36:51,266 A:middle
proximityUUID I created
and the identifier.

753
00:36:51,686 --> 00:36:54,186 A:middle
I'm going to call on
to the location manager

754
00:36:54,186 --> 00:36:56,456 A:middle
to start monitoring
for this region.

755
00:36:57,196 --> 00:36:59,646 A:middle
One of the important
things that you need

756
00:36:59,646 --> 00:37:01,846 A:middle
to make sure you
implement is this method

757

758
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

759
00:36:59,646 --> 00:37:01,846 A:middle
to make sure you
implement is this method

760
00:37:01,846 --> 00:37:05,496 A:middle
of locationManager
didDetermineState forRegion.

761
00:37:05,886 --> 00:37:08,546 A:middle
This method will be called
when your app is not -

762
00:37:08,696 --> 00:37:11,966 A:middle
is in the background, so that
your app can receive region

763
00:37:11,966 --> 00:37:13,206 A:middle
notification changes.

764
00:37:13,206 --> 00:37:16,076 A:middle
So let's say, they
closed my register app.

765
00:37:16,156 --> 00:37:17,476 A:middle
They walked out of the store.

766
00:37:17,476 --> 00:37:20,486 A:middle
And then they opened -
walked out of the store.

767
00:37:20,726 --> 00:37:24,086 A:middle
You will receive
this method callback

768
00:37:24,436 --> 00:37:25,556 A:middle
when they leave the region.

769
00:37:25,926 --> 00:37:29,716 A:middle
And so in this example I'm just
going to - I have it so that

770
00:37:29,716 --> 00:37:33,826 A:middle
when you are inside the Beacon
region, I want to start figuring

771
00:37:33,826 --> 00:37:35,576 A:middle
out how far away they
are from the iBeacon.

772
00:37:35,576 --> 00:37:36,436 A:middle
Because I want to make sure

773
00:37:36,436 --> 00:37:39,696 A:middle
that my cashiers are
right close to the beacon.

774
00:37:39,696 --> 00:37:40,666 A:middle
I don't want them, you know,

775
00:37:41,016 --> 00:37:42,736 A:middle
all the way on the
other side of the store.

776
00:37:43,236 --> 00:37:45,846 A:middle
So I'm going to start ranging
the beacons in the region,

777
00:37:45,986 --> 00:37:48,056 A:middle
and one of the things I'm
going to do is I'm going

778
00:37:48,056 --> 00:37:49,246 A:middle
to implement this method

779
00:37:49,246 --> 00:37:52,596 A:middle
of locationManager
didRangeBeacons inRegion.

780
00:37:52,886 --> 00:37:55,216 A:middle
And I'm just going to
get the closest beacon,

781
00:37:55,216 --> 00:37:56,646 A:middle
because I don't particularly
care

782
00:37:56,646 --> 00:37:58,106 A:middle
about which iBeacon
they're close to,

783
00:37:58,106 --> 00:37:59,346 A:middle
as long as they're
close to one of them.

784
00:37:59,346 --> 00:38:01,546 A:middle
And I'm going to check the
proximity and make sure

785

786
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

787
00:37:59,346 --> 00:38:01,546 A:middle
And I'm going to check the
proximity and make sure

788
00:38:01,546 --> 00:38:03,026 A:middle
that it's not far or unknown.

789
00:38:03,396 --> 00:38:06,046 A:middle
If it's not, I'm going to say
that they're near the register.

790
00:38:06,046 --> 00:38:07,906 A:middle
Otherwise they're not
near the register,

791
00:38:08,236 --> 00:38:10,066 A:middle
and I set that variable
appropriately.

792
00:38:10,396 --> 00:38:11,556 A:middle
One of the other
things you're going

793
00:38:11,556 --> 00:38:13,416 A:middle
to notice is I've also
implemented the methods

794
00:38:13,416 --> 00:38:15,476 A:middle
of locationManager
didEnterRegion

795
00:38:15,536 --> 00:38:17,656 A:middle
and locationManager
didExitRegion.

796
00:38:17,656 --> 00:38:20,556 A:middle
Which will be called when
the app is in the foreground.

797
00:38:21,006 --> 00:38:23,216 A:middle
For my example I'm going to go

798
00:38:23,216 --> 00:38:26,296 A:middle
over to the trusty
iPhone I have over here.

799
00:38:27,136 --> 00:38:28,906 A:middle
You'll notice I have
my "Moolah" app here.

800
00:38:28,906 --> 00:38:30,466 A:middle
I'm going to open it up.

801
00:38:31,086 --> 00:38:34,206 A:middle
You'll notice right here I
have my Scan Barcodes View.

802
00:38:34,456 --> 00:38:36,846 A:middle
You'll notice right now
it's telling them to return

803
00:38:36,846 --> 00:38:38,946 A:middle
to the register area
because there's no iBeacon

804
00:38:38,946 --> 00:38:39,866 A:middle
that it can currently detect.

805
00:38:40,516 --> 00:38:42,926 A:middle
So back here on my
demo machines I'm going

806
00:38:42,926 --> 00:38:44,356 A:middle
to start up an iBeacon.

807
00:38:45,436 --> 00:38:47,426 A:middle
And so you'll notice that
as soon as it detected

808
00:38:47,426 --> 00:38:50,136 A:middle
that the iBeacon - that
I was within the region

809
00:38:50,136 --> 00:38:51,326 A:middle
and that I was ranged correctly,

810
00:38:51,666 --> 00:38:53,506 A:middle
I got this nice little
barcode view,

811
00:38:53,506 --> 00:38:55,466 A:middle
so I have a nice little camera.

812
00:38:55,766 --> 00:39:00,276 A:middle
My cashiers can just run through
the barcodes and do that.

813

814
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

815
00:38:55,766 --> 00:39:00,276 A:middle
My cashiers can just run through
the barcodes and do that.

816
00:39:00,276 --> 00:39:03,436 A:middle
This view will only show
up while I'm in the -

817
00:39:03,776 --> 00:39:07,316 A:middle
near the iBeacon that's
appropriate for it.

818
00:39:07,516 --> 00:39:08,906 A:middle
And so when I turn this off,

819
00:39:08,906 --> 00:39:11,326 A:middle
eventually this app will
receive a notification

820
00:39:11,326 --> 00:39:12,956 A:middle
that I've left the region

821
00:39:12,956 --> 00:39:15,366 A:middle
and that this view should
probably be turned off.

822
00:39:16,736 --> 00:39:20,356 A:middle
And you'll notice that I
also have a catalog section.

823
00:39:20,726 --> 00:39:23,696 A:middle
So you'll notice now that
I've turned off the iBeacon

824
00:39:23,696 --> 00:39:25,946 A:middle
that I am no longer
near the register,

825
00:39:25,946 --> 00:39:27,176 A:middle
and so the view is turned off.

826
00:39:28,156 --> 00:39:29,786 A:middle
And that is how you
use iBeacons.

827
00:39:30,516 --> 00:39:34,816 A:middle
[ Applause ]

828
00:39:35,316 --> 00:39:36,126 A:middle
>> Thanks Alex.

829
00:39:37,536 --> 00:39:40,426 A:middle
There's so much you
can do with iBeacons

830
00:39:40,426 --> 00:39:44,206 A:middle
that can provide a really
awesome user experience.

831
00:39:44,616 --> 00:39:47,266 A:middle
Both for your admins
and for the end users.

832
00:39:47,796 --> 00:39:53,746 A:middle
All right, next I'd like to
talk about Network Reachability.

833
00:39:55,146 --> 00:39:57,586 A:middle
Network Reachability
is a set of APIs

834
00:39:57,676 --> 00:40:00,186 A:middle
that lets you know whether
a server is reachable

835

836
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

837
00:39:57,676 --> 00:40:00,186 A:middle
that lets you know whether
a server is reachable

838
00:40:00,186 --> 00:40:01,436 A:middle
at all on the network.

839
00:40:01,796 --> 00:40:06,116 A:middle
And best of all, it
actually tells you

840
00:40:06,206 --> 00:40:07,766 A:middle
when the server becomes
reachable

841
00:40:07,766 --> 00:40:08,856 A:middle
or becomes unreachable.

842
00:40:09,396 --> 00:40:13,576 A:middle
So for the following
example I want you

843
00:40:13,576 --> 00:40:16,006 A:middle
to note you can use
Network Reachability

844
00:40:16,726 --> 00:40:20,016 A:middle
to provide intelligent,
offline behavior.

845
00:40:20,356 --> 00:40:25,066 A:middle
So back to Alex, and he's going
to show you how that's done.

846
00:40:25,276 --> 00:40:29,026 A:middle
>> So back in our "Moolah"
app, I have this method.

847
00:40:29,716 --> 00:40:32,606 A:middle
So I created an
SCNetworkReachabiltyFlags.

848
00:40:32,816 --> 00:40:35,266 A:middle
And I'm going to create
a reachability reference.

849
00:40:35,616 --> 00:40:36,096 A:middle
Which I do

850
00:40:36,096 --> 00:40:38,706 A:middle
by SCNetworkReachability
CreateWithName.

851
00:40:39,056 --> 00:40:41,336 A:middle
And the name I'm going to
pass into here is a domain.

852
00:40:41,336 --> 00:40:44,486 A:middle
So in my example up above,
I have defined apple.com

853
00:40:44,486 --> 00:40:48,126 A:middle
as the domain I want to watch
for and see the reachability of.

854
00:40:48,706 --> 00:40:51,006 A:middle
So once I do that, if
the reachability is null,

855
00:40:51,136 --> 00:40:53,886 A:middle
I can call
SCNetworkReachabilityGetFlags.

856
00:40:54,396 --> 00:40:57,106 A:middle
Then once I do that I can
check the flags, and I'm going

857
00:40:57,106 --> 00:40:57,406 A:middle
to check

858
00:40:57,466 --> 00:41:00,986 A:middle
that SCNetworkReachabilityFlags
is reachable.

859

860
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

861
00:40:57,466 --> 00:41:00,986 A:middle
that SCNetworkReachabilityFlags
is reachable.

862
00:41:01,476 --> 00:41:03,046 A:middle
And using that flag I'll know

863
00:41:03,046 --> 00:41:07,726 A:middle
when I cannot send a network
operations because the user is

864
00:41:07,726 --> 00:41:09,346 A:middle
in airplane mode for example.

865
00:41:09,846 --> 00:41:12,966 A:middle
Now this is nice and good, but
this is just one off method.

866
00:41:12,966 --> 00:41:14,666 A:middle
I don't want to be
calling this all the time.

867
00:41:15,026 --> 00:41:17,956 A:middle
So what I really want to do
is I want to register this

868
00:41:18,236 --> 00:41:20,886 A:middle
so that every time the
reachability configuration

869
00:41:20,886 --> 00:41:22,436 A:middle
changes, I get notified.

870
00:41:23,016 --> 00:41:26,156 A:middle
And so what I've done down
here is I've created an

871
00:41:26,156 --> 00:41:29,376 A:middle
SCNetworkReachabilityContext,
which I'm feeding

872
00:41:29,376 --> 00:41:32,236 A:middle
in the nice little block that
I've created to check the flags.

873
00:41:32,606 --> 00:41:34,886 A:middle
If the flags say that
it's not reachable,

874
00:41:34,886 --> 00:41:37,566 A:middle
I'm going to set my offline
variable appropriately.

875
00:41:37,566 --> 00:41:39,196 A:middle
And what I'm going to do is
I'm going to is I'm going

876
00:41:39,196 --> 00:41:41,976 A:middle
to call SCNetworkReachability
SetCallback.

877
00:41:42,426 --> 00:41:43,836 A:middle
I'm going to feed
it the reachability.

878
00:41:44,096 --> 00:41:46,956 A:middle
And I have to give it this
method, reachability change,

879
00:41:46,956 --> 00:41:48,076 A:middle
which is written in C.

880
00:41:48,366 --> 00:41:52,046 A:middle
The reason I put earlier
in that context that info

881
00:41:52,326 --> 00:41:53,816 A:middle
with that call block is I want

882
00:41:53,816 --> 00:41:55,316 A:middle
to keep all my code
in Objective-C.

883
00:41:55,316 --> 00:41:59,096 A:middle
So all I'm going to have my C
method reachabilityChanged do

884
00:41:59,096 --> 00:42:02,356 A:middle
up here is I'm just going
to have it call that block

885

886
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

887
00:41:59,096 --> 00:42:02,356 A:middle
up here is I'm just going
to have it call that block

888
00:42:02,356 --> 00:42:04,166 A:middle
that I feed into the info.

889
00:42:04,686 --> 00:42:07,166 A:middle
So that I don't have to mess
around with C code that much.

890
00:42:07,646 --> 00:42:10,466 A:middle
With the SCNetworkReachability
I set the callback.

891
00:42:10,636 --> 00:42:13,946 A:middle
I set the C method that I'm
calling into in the context.

892
00:42:14,226 --> 00:42:15,816 A:middle
And the next thing I
need to do is I need

893
00:42:15,816 --> 00:42:17,216 A:middle
to make sure I schedule this

894
00:42:17,216 --> 00:42:19,426 A:middle
so that this gets called
every once in a while.

895
00:42:19,426 --> 00:42:22,516 A:middle
The way I do that is I
call SCNetworkReachability

896
00:42:22,516 --> 00:42:23,476 A:middle
SetDispatchQueue.

897
00:42:23,966 --> 00:42:26,246 A:middle
I give it the reachability
reference I've created.

898
00:42:26,246 --> 00:42:28,836 A:middle
And I'm going to call this on
the main queue in my example.

899
00:42:29,146 --> 00:42:30,486 A:middle
You can do this on other queues.

900
00:42:30,586 --> 00:42:32,366 A:middle
I've chosen this
just for simplicity.

901
00:42:32,916 --> 00:42:35,986 A:middle
So now, if we return to my
iPhone example, you're going

902
00:42:36,796 --> 00:42:38,796 A:middle
to notice I have this
nice little catalog

903
00:42:38,796 --> 00:42:40,176 A:middle
of baby clothes that I can buy.

904
00:42:40,656 --> 00:42:42,386 A:middle
What I want to do
is I'm just going

905
00:42:42,386 --> 00:42:45,726 A:middle
to switch the app
into airplane mode.

906
00:42:46,726 --> 00:42:48,166 A:middle
When I switch it off
you're going to notice

907
00:42:48,166 --> 00:42:50,636 A:middle
that SCNetworkReachability
has changed my label

908
00:42:50,636 --> 00:42:53,406 A:middle
to inform the user that
they are currently offline.

909
00:42:53,766 --> 00:42:55,586 A:middle
And so you can use
this to gate behavior

910
00:42:55,586 --> 00:42:59,086 A:middle
that you don't want users to do
while they're offline, like try

911
00:42:59,086 --> 00:43:01,596 A:middle
and edit a document
that you want to sync

912

913
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

914
00:42:59,086 --> 00:43:01,596 A:middle
and edit a document
that you want to sync

915
00:43:01,596 --> 00:43:02,986 A:middle
up between multiple users.

916
00:43:03,536 --> 00:43:05,426 A:middle
And so that's SCNetwork
Reachability.

917
00:43:06,266 --> 00:43:08,236 A:middle
>> Well thanks Alex.

918
00:43:10,866 --> 00:43:14,656 A:middle
Network Reachability allows
you to provide intelligent,

919
00:43:15,006 --> 00:43:18,476 A:middle
offline behavior without having
to send a request and timing

920
00:43:18,476 --> 00:43:19,476 A:middle
out and things like that.

921
00:43:19,896 --> 00:43:21,486 A:middle
You know up front
that the network,

922
00:43:21,676 --> 00:43:25,176 A:middle
or your particular server
actually is not reachable

923
00:43:25,176 --> 00:43:27,706 A:middle
and you can take the
appropriate action.

924
00:43:29,476 --> 00:43:35,056 A:middle
So in summary, our second
app example shows us

925
00:43:35,056 --> 00:43:37,946 A:middle
that you can put an app into
Single App Mode using MDM,

926
00:43:37,946 --> 00:43:40,346 A:middle
again example to follow.

927
00:43:41,466 --> 00:43:45,986 A:middle
You can use iBeacon to
provide context for your app

928
00:43:46,636 --> 00:43:48,116 A:middle
and change your app's behavior,

929
00:43:48,116 --> 00:43:50,096 A:middle
depending on whether
it's near something.

930
00:43:50,666 --> 00:43:54,356 A:middle
You can use this with core
location to allow your admins

931
00:43:54,506 --> 00:43:57,776 A:middle
to really configure your
apps to a very fine grain.

932
00:43:59,396 --> 00:44:02,476 A:middle
And finally, network
reachability allows you

933

934
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

935
00:43:59,396 --> 00:44:02,476 A:middle
And finally, network
reachability allows you

936
00:44:02,476 --> 00:44:06,096 A:middle
to behave intelligently when
a server is not available.

937
00:44:06,466 --> 00:44:12,266 A:middle
Let's talk about our third and
final app example, Assessment.

938
00:44:13,006 --> 00:44:16,446 A:middle
So this is your typical
exam-taking app.

939
00:44:17,296 --> 00:44:22,896 A:middle
There are several modes of
operation here for exams.

940
00:44:24,106 --> 00:44:27,976 A:middle
For our example the
flow that we want

941
00:44:27,976 --> 00:44:31,126 A:middle
to show you is a
student operating

942
00:44:31,126 --> 00:44:34,586 A:middle
on an iPad, taking an exam.

943
00:44:35,466 --> 00:44:38,686 A:middle
And we're going to
download the exam packet

944
00:44:38,746 --> 00:44:41,976 A:middle
from a document provider from
your school's file system.

945
00:44:42,886 --> 00:44:46,706 A:middle
Once the user begins
taking the exam,

946
00:44:47,586 --> 00:44:51,626 A:middle
the exam app will lock them
in and they'll take the exam

947
00:44:51,626 --> 00:44:53,246 A:middle
and they'll submit it.

948
00:44:53,246 --> 00:44:56,576 A:middle
And the students will be
allowed to use the iPad again.

949
00:44:57,296 --> 00:45:01,796 A:middle
So let's start with
Document Providers.

950

951
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

952
00:44:57,296 --> 00:45:01,796 A:middle
So let's start with
Document Providers.

953
00:45:02,346 --> 00:45:04,966 A:middle
So document Providers,
as I mentioned before,

954
00:45:04,966 --> 00:45:07,716 A:middle
is a really awesome,
new feature of iOS 8.

955
00:45:08,496 --> 00:45:13,216 A:middle
It allows you to exchange
documents between apps.

956
00:45:13,446 --> 00:45:16,006 A:middle
When you install an app
as a document provider,

957
00:45:16,446 --> 00:45:21,686 A:middle
you are actually installing
network access for other apps.

958
00:45:22,856 --> 00:45:25,566 A:middle
To access Document Providers,

959
00:45:26,386 --> 00:45:28,566 A:middle
use the
UIDocumentPickerViewController.

960
00:45:28,946 --> 00:45:31,536 A:middle
This is the same one you
use for iCloud Doc folder.

961
00:45:32,006 --> 00:45:36,176 A:middle
Use Document Providers
to get access

962
00:45:36,296 --> 00:45:38,526 A:middle
to enterprise network resources.

963
00:45:39,156 --> 00:45:42,786 A:middle
Don't build in network
protocols into your app.

964
00:45:44,106 --> 00:45:48,646 A:middle
Instead, rely on the admin to
configure network access apps

965
00:45:48,976 --> 00:45:51,756 A:middle
that allows your app to access
those network resources.

966
00:45:52,366 --> 00:45:52,766 A:middle
All right.

967
00:45:52,816 --> 00:45:55,056 A:middle
So let's go back to
Alex and he's going

968
00:45:55,056 --> 00:45:59,306 A:middle
to show you a little
bit of an example.

969
00:45:59,356 --> 00:46:01,906 A:middle
>> So you'll notice that
I have an application,

970

971
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

972
00:45:59,356 --> 00:46:01,906 A:middle
>> So you'll notice that
I have an application,

973
00:46:01,906 --> 00:46:03,356 A:middle
which I've called
"Pencils Down."

974
00:46:03,536 --> 00:46:05,076 A:middle
What Pencils Down
is going to do is

975
00:46:05,076 --> 00:46:08,156 A:middle
that when the user starts
the test, I want them to go

976
00:46:08,156 --> 00:46:12,226 A:middle
into their high school's
document app,

977
00:46:12,626 --> 00:46:15,336 A:middle
and I want them to
retrieve the test.

978
00:46:15,336 --> 00:46:17,696 A:middle
And then I'm going
to proctor the exam

979
00:46:17,696 --> 00:46:18,726 A:middle
on behalf of the high school.

980
00:46:19,216 --> 00:46:21,616 A:middle
So in this example,
when I do start tests,

981
00:46:21,616 --> 00:46:24,126 A:middle
I have this
UIDocumentPickerViewController.

982
00:46:24,366 --> 00:46:27,136 A:middle
And I'm going to create one
in initWithDocumentTypes

983
00:46:27,136 --> 00:46:27,916 A:middle
that I'm going to allow.

984
00:46:27,916 --> 00:46:31,216 A:middle
In this case I'm going to choose
HTML, Tacs [phonetic] and RTF.

985
00:46:31,726 --> 00:46:33,076 A:middle
I'm going to set the mode.

986
00:46:33,076 --> 00:46:36,506 A:middle
In this case I'm going to use
UIDocumentPickerModeImport.

987
00:46:36,856 --> 00:46:39,936 A:middle
Because I want to get the file
and keep it in my app bundle.

988
00:46:40,466 --> 00:46:43,526 A:middle
The other thing I'm going to do
is I'm going to set the delegate

989
00:46:43,656 --> 00:46:45,876 A:middle
on the
UIDocumentPickerViewController

990
00:46:45,876 --> 00:46:46,616 A:middle
to myself.

991
00:46:46,786 --> 00:46:49,146 A:middle
And I'm going to present that
ViewController to the user.

992
00:46:49,546 --> 00:46:52,056 A:middle
Now when they go into
that document pick,

993
00:46:52,386 --> 00:46:54,086 A:middle
I can get two different
callbacks.

994
00:46:54,156 --> 00:46:56,086 A:middle
If, for example, they
fail to pick something,

995
00:46:56,086 --> 00:46:58,866 A:middle
they click done they don't find
the test file that they want,

996
00:46:59,276 --> 00:47:01,536 A:middle
I'm going to get
this documentPicker

997

998
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

999
00:46:59,276 --> 00:47:01,536 A:middle
I'm going to get
this documentPicker

1000
00:47:01,536 --> 00:47:02,756 A:middle
WasCancelled callback.

1001
00:47:03,236 --> 00:47:05,706 A:middle
And in this case I'm just
going to send a notification

1002
00:47:05,766 --> 00:47:08,826 A:middle
on the console that "Hey, I
couldn't find the document."

1003
00:47:09,826 --> 00:47:12,266 A:middle
If, for example, they
actually did pick a document,

1004
00:47:12,266 --> 00:47:15,756 A:middle
I will call this documentPicker
didPickDocumentAtURL will get

1005
00:47:15,786 --> 00:47:16,846 A:middle
called by the system.

1006
00:47:17,216 --> 00:47:19,876 A:middle
What I'll do is I will double
check that there's a natural URL

1007
00:47:19,876 --> 00:47:22,636 A:middle
and then I'm going to
open up the document.

1008
00:47:22,846 --> 00:47:25,526 A:middle
And if I am successful in
opening up the document,

1009
00:47:25,926 --> 00:47:27,946 A:middle
I am going to request
Single App Mode

1010
00:47:28,166 --> 00:47:30,396 A:middle
and load up the test for them.

1011
00:47:30,786 --> 00:47:34,236 A:middle
If we go over to the simulator,
we have our example here.

1012
00:47:34,236 --> 00:47:35,686 A:middle
So I have "Pencils Down."

1013
00:47:36,126 --> 00:47:36,956 A:middle
I go into my app.

1014
00:47:37,916 --> 00:47:39,956 A:middle
You notice I have this
nice little testing view.

1015
00:47:39,956 --> 00:47:42,986 A:middle
I'm going to click start test,
because I want to start a test

1016
00:47:43,106 --> 00:47:44,576 A:middle
with - that my high
school has given me.

1017
00:47:44,986 --> 00:47:45,986 A:middle
So I go into locations.

1018
00:47:45,986 --> 00:47:48,346 A:middle
And you'll notice that
I have this MHS Doc

1019
00:47:48,346 --> 00:47:49,916 A:middle
which is a Document Provider.

1020
00:47:50,326 --> 00:47:53,106 A:middle
I'm going to go into
here, and you'll notice

1021
00:47:53,106 --> 00:47:53,846 A:middle
that it has this view.

1022
00:47:53,846 --> 00:47:56,906 A:middle
This view is actually
coming from the MHS Docs App

1023
00:47:56,906 --> 00:47:58,516 A:middle
that I have installed
in the simulator.

1024
00:47:58,766 --> 00:48:00,596 A:middle
This view is not
created by your app.

1025

1026
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1027
00:47:58,766 --> 00:48:00,596 A:middle
This view is not
created by your app.

1028
00:48:00,886 --> 00:48:03,386 A:middle
And so in this case if I
wanted to, I could log in.

1029
00:48:03,786 --> 00:48:05,756 A:middle
MHS Docs would check
my credentials;

1030
00:48:05,756 --> 00:48:07,486 A:middle
make sure I'm actually
a high school student.

1031
00:48:07,906 --> 00:48:10,056 A:middle
So I'm just going to log in
with some blank credentials,

1032
00:48:10,106 --> 00:48:12,276 A:middle
and I'm going to select
my programming test

1033
00:48:12,276 --> 00:48:13,226 A:middle
that I need to do.

1034
00:48:13,486 --> 00:48:15,906 A:middle
And so you'll notice
that once I selected it,

1035
00:48:16,166 --> 00:48:19,346 A:middle
my app got that document
back, and I loaded it

1036
00:48:19,346 --> 00:48:22,016 A:middle
up into my nice little web
views, and started the test.

1037
00:48:22,536 --> 00:48:24,786 A:middle
And so that's how
Document Providers work.

1038
00:48:25,896 --> 00:48:26,506 A:middle
>> All right.

1039
00:48:27,516 --> 00:48:31,716 A:middle
[ Applause ]

1040
00:48:32,216 --> 00:48:35,406 A:middle
Document Providers are very
powerful, but they're very easy

1041
00:48:35,406 --> 00:48:38,716 A:middle
to use as you can tell.

1042
00:48:38,936 --> 00:48:42,666 A:middle
Next, let's talk about
Autonomous Single App Mode.

1043
00:48:42,796 --> 00:48:48,386 A:middle
We've mentioned before that
MDM can put your device

1044
00:48:48,386 --> 00:48:49,366 A:middle
into Single App Mode.

1045
00:48:49,946 --> 00:48:53,206 A:middle
Which means that it
will only run one app.

1046
00:48:54,086 --> 00:48:57,786 A:middle
But in the case of this exam
app, we want the app to be able

1047
00:48:57,786 --> 00:48:59,836 A:middle
to put itself into
Single App Mode.

1048

1049
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1050
00:49:00,586 --> 00:49:04,096 A:middle
So this mode of operation
is called Autonomous Single

1051
00:49:04,096 --> 00:49:04,546 A:middle
App Mode.

1052
00:49:05,496 --> 00:49:09,686 A:middle
Your app has to be preauthorized
by the MDM Server to do this.

1053
00:49:10,166 --> 00:49:12,516 A:middle
This can only be done
on a supervised device.

1054
00:49:13,426 --> 00:49:17,396 A:middle
But once that's in place,
your app can offer itself

1055
00:49:17,396 --> 00:49:21,156 A:middle
and say "Hey, I want
control of the iPad for now."

1056
00:49:21,266 --> 00:49:23,686 A:middle
So use Autonomous
Single App Mode

1057
00:49:23,986 --> 00:49:25,816 A:middle
to lock the user into your app.

1058
00:49:27,226 --> 00:49:31,276 A:middle
But please do it sparingly
because the user will get stuck

1059
00:49:31,276 --> 00:49:32,636 A:middle
in your app if you
don't get them out.

1060
00:49:33,496 --> 00:49:36,626 A:middle
Your app will crash and
restart, crash and restart.

1061
00:49:37,206 --> 00:49:38,876 A:middle
And the user will
not get out of it.

1062
00:49:38,876 --> 00:49:40,606 A:middle
So please be careful
when you do this.

1063
00:49:40,906 --> 00:49:42,836 A:middle
But it is a really
powerful feature.

1064
00:49:43,666 --> 00:49:48,746 A:middle
So Alex is going to
demonstrate how you can do this.

1065
00:49:49,286 --> 00:49:51,896 A:middle
>> So we're back to my
"Pencils Down" application.

1066
00:49:51,896 --> 00:49:54,946 A:middle
You're going to notice that here
I have this requestSingleAppMode

1067
00:49:55,216 --> 00:49:56,296 A:middle
method that I've created.

1068
00:49:56,556 --> 00:50:00,286 A:middle
What I'm going to call into
is UIAccessibilityRequest

1069

1070
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1071
00:49:56,556 --> 00:50:00,286 A:middle
What I'm going to call into
is UIAccessibilityRequest

1072
00:50:00,346 --> 00:50:01,396 A:middle
GuidedAccessSession.

1073
00:50:01,726 --> 00:50:04,456 A:middle
This is the method that will
start up Single App Mode.

1074
00:50:04,786 --> 00:50:06,486 A:middle
What I do is I feed it a Boolean

1075
00:50:06,486 --> 00:50:08,676 A:middle
of whether I want Single
App Mode on or off.

1076
00:50:09,066 --> 00:50:11,706 A:middle
The other thing I'll feed
into it is a completion block

1077
00:50:11,706 --> 00:50:14,136 A:middle
which is void BOOL didSucceed.

1078
00:50:14,326 --> 00:50:17,316 A:middle
This Boolean that I get
will tell me if I was able

1079
00:50:17,316 --> 00:50:20,266 A:middle
to successfully enter
or exit Single App Mode,

1080
00:50:20,506 --> 00:50:23,026 A:middle
depending on which mode I
set in the other Boolean.

1081
00:50:24,066 --> 00:50:26,726 A:middle
It's very important
to balance your calls.

1082
00:50:26,726 --> 00:50:29,866 A:middle
Because as we mentioned, you
will lock the user into your app

1083
00:50:30,506 --> 00:50:32,806 A:middle
if you don't call back into this

1084
00:50:32,806 --> 00:50:34,596 A:middle
to turn off Single
App Mode as well.

1085
00:50:35,096 --> 00:50:38,276 A:middle
Another important point is to
make sure that you register

1086
00:50:38,276 --> 00:50:41,396 A:middle
for the
UIAccessibilityGuidedAccess

1087
00:50:41,396 --> 00:50:43,036 A:middle
StatusDidChangeNotification.

1088
00:50:43,326 --> 00:50:44,826 A:middle
This notification will be sent

1089
00:50:44,826 --> 00:50:46,786 A:middle
out when Single App
Mode changes.

1090
00:50:47,186 --> 00:50:50,866 A:middle
And so what I've done is I've
created a little method called

1091
00:50:50,966 --> 00:50:52,656 A:middle
GuidedAccess DidChange
Notification.

1092
00:50:52,996 --> 00:50:55,796 A:middle
When I receive that
notification, I am just going

1093
00:50:55,796 --> 00:50:59,506 A:middle
to update my Single
App Mode - what is it?

1094
00:50:59,546 --> 00:51:03,106 A:middle
State. So you'll notice here I
have GuidedAccess StatusChanged.

1095

1096
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1097
00:50:59,546 --> 00:51:03,106 A:middle
State. So you'll notice here I
have GuidedAccess StatusChanged.

1098
00:51:03,246 --> 00:51:05,346 A:middle
And I said, you know,
I am in Single App Mode

1099
00:51:05,346 --> 00:51:06,756 A:middle
if I receive this notification.

1100
00:51:06,886 --> 00:51:10,516 A:middle
And so we'll move
over to our iPad.

1101
00:51:10,516 --> 00:51:13,476 A:middle
On this iPad is a supervised
device I've already set up.

1102
00:51:13,476 --> 00:51:17,286 A:middle
I've also pushed down an MDM
profile that defined that

1103
00:51:17,286 --> 00:51:20,286 A:middle
"Pencils Down," giving
its bundle ID is allowed

1104
00:51:20,286 --> 00:51:22,906 A:middle
to start Single App
Mode autonomously.

1105
00:51:22,976 --> 00:51:24,826 A:middle
So if I go into "Pencils Down."

1106
00:51:25,876 --> 00:51:27,416 A:middle
I'm going to start my tests.

1107
00:51:27,486 --> 00:51:30,046 A:middle
I'm going to skip over the
file provider section for now.

1108
00:51:30,556 --> 00:51:32,616 A:middle
You'll notice that
I am now in my test.

1109
00:51:32,616 --> 00:51:33,936 A:middle
If I try and exit the app

1110
00:51:34,406 --> 00:51:36,916 A:middle
by pressing the Home
button, nothing happens.

1111
00:51:37,286 --> 00:51:38,466 A:middle
I'm locked into here.

1112
00:51:38,906 --> 00:51:42,006 A:middle
Let's say I don't know
any of these questions

1113
00:51:42,006 --> 00:51:43,376 A:middle
so I'm just going
to submit the test.

1114
00:51:43,886 --> 00:51:46,446 A:middle
And the test was
successfully submitted.

1115
00:51:46,446 --> 00:51:48,626 A:middle
And so you'll now notice if I
press the Home button I'm able

1116
00:51:48,796 --> 00:51:49,976 A:middle
to exit because I
balanced the calls.

1117
00:51:50,516 --> 00:51:55,566 A:middle
[ Applause ]

1118
00:51:56,066 --> 00:51:56,736 A:middle
>> Thanks Alex.

1119
00:51:57,386 --> 00:51:58,636 A:middle
Autonomous Single App Mode.

1120
00:51:59,256 --> 00:52:00,216 A:middle
Very powerful.

1121

1122
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1123
00:51:59,256 --> 00:52:00,216 A:middle
Very powerful.

1124
00:52:00,916 --> 00:52:01,866 A:middle
Use it sparingly.

1125
00:52:02,516 --> 00:52:06,876 A:middle
Make sure the user can
get out of it eventually.

1126
00:52:07,656 --> 00:52:09,506 A:middle
Okay. Summary of the third app.

1127
00:52:10,256 --> 00:52:11,666 A:middle
Document Providers.

1128
00:52:12,086 --> 00:52:13,156 A:middle
Super powerful.

1129
00:52:13,156 --> 00:52:14,506 A:middle
New feature in iOS 8.

1130
00:52:14,826 --> 00:52:19,376 A:middle
Use it to gain access to network
resources in your enterprise.

1131
00:52:20,206 --> 00:52:24,316 A:middle
Add an app equals
at network access.

1132
00:52:24,726 --> 00:52:25,906 A:middle
Autonomous Single App Mode.

1133
00:52:26,516 --> 00:52:29,136 A:middle
Allows you to lock your own
app into Single App Mode

1134
00:52:29,286 --> 00:52:32,046 A:middle
so the user cannot go
to a different app.

1135
00:52:33,836 --> 00:52:36,266 A:middle
So what have we learned today?

1136
00:52:36,266 --> 00:52:40,236 A:middle
We learned that we should
assume that MDM will be used

1137
00:52:40,236 --> 00:52:41,816 A:middle
to manage your apps and devices.

1138
00:52:42,236 --> 00:52:44,806 A:middle
When you're writing apps
for business and education,

1139
00:52:45,196 --> 00:52:47,506 A:middle
assume MDM's going to
be there and is going

1140
00:52:47,506 --> 00:52:51,606 A:middle
to configure the
environment for your app.

1141
00:52:51,876 --> 00:52:53,196 A:middle
You can safely assume

1142
00:52:53,196 --> 00:52:56,656 A:middle
that enterprise owned
devices will be supervised.

1143
00:52:57,016 --> 00:53:00,616 A:middle
So check out the list of
features that are available

1144

1145
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1146
00:52:57,016 --> 00:53:00,616 A:middle
So check out the list of
features that are available

1147
00:53:00,616 --> 00:53:03,806 A:middle
to you when the device is
supervised and use them.

1148
00:53:04,356 --> 00:53:07,106 A:middle
On the other hand,
if you're writing

1149
00:53:07,106 --> 00:53:10,596 A:middle
for Bring Your Own Device
environment, you can assume

1150
00:53:10,596 --> 00:53:13,736 A:middle
that the devices will
not be supervised.

1151
00:53:14,426 --> 00:53:17,406 A:middle
So if your app is going to
work in both environments,

1152
00:53:17,716 --> 00:53:20,786 A:middle
be aware of the features that
are available in each case.

1153
00:53:21,206 --> 00:53:27,726 A:middle
And finally, rely on iOS
to provide a great set

1154
00:53:27,726 --> 00:53:30,356 A:middle
of systemwide features that
your apps can leverage.

1155
00:53:31,066 --> 00:53:32,056 A:middle
Single Sign-on.

1156
00:53:32,706 --> 00:53:35,046 A:middle
VPN. Global Proxy.

1157
00:53:35,966 --> 00:53:38,276 A:middle
Manage data flow
between the managed apps

1158
00:53:38,576 --> 00:53:40,296 A:middle
and the unmanaged
apps and accounts.

1159
00:53:41,296 --> 00:53:42,206 A:middle
Single App Mode.

1160
00:53:42,266 --> 00:53:45,276 A:middle
Both MDM driven and autonomous.

1161
00:53:46,636 --> 00:53:47,736 A:middle
Document Providers.

1162
00:53:49,226 --> 00:53:52,316 A:middle
iBeacon and Core
Location for context.

1163
00:53:52,316 --> 00:53:57,376 A:middle
All right, finally I want
to call your attention

1164
00:53:57,376 --> 00:54:00,006 A:middle
to a great new portal that
we've just put online,

1165

1166
X-TIMESTAMP-MAP=MPEGTS:181083,LOCAL:00:00:00,000

1167
00:53:57,376 --> 00:54:00,006 A:middle
to a great new portal that
we've just put online,

1168
00:54:00,206 --> 00:54:02,516 A:middle
developer.apple.com/enterprise,

1169
00:54:02,896 --> 00:54:04,466 A:middle
made for developers
just like you.

1170
00:54:05,516 --> 00:54:11,586 A:middle
[ Applause ]

1171
00:54:12,086 --> 00:54:14,236 A:middle
For more information, our
Evangelist is Paul Danbold.

1172
00:54:14,866 --> 00:54:16,796 A:middle
There's that enterprise
portal again.

1173
00:54:16,946 --> 00:54:18,616 A:middle
You will find most of
what you need in there.

1174
00:54:19,196 --> 00:54:22,156 A:middle
And of course the developer
forums is a great resource.

1175
00:54:23,586 --> 00:54:24,946 A:middle
Some related sessions.

1176
00:54:24,946 --> 00:54:28,056 A:middle
This morning we had
"Managing Apple Devices."

1177
00:54:29,016 --> 00:54:30,106 A:middle
Please check out that video.

1178
00:54:30,946 --> 00:54:33,076 A:middle
We have "Distributing
Enterprise Apps" right here,

1179
00:54:33,806 --> 00:54:34,726 A:middle
following this session.

1180
00:54:35,736 --> 00:54:39,676 A:middle
And if you're interested in
digging into Doc Providers -

1181
00:54:39,676 --> 00:54:43,236 A:middle
Document Providers - "Building
a Document-Based App" is

1182
00:54:43,236 --> 00:54:44,166 A:middle
a must-attend.

1183
00:54:44,926 --> 00:54:45,926 A:middle
Thursday, 11:30.

1184
00:54:46,616 --> 00:54:47,616 A:middle
Thank you very much.

1185
00:54:48,516 --> 00:54:52,500 A:middle
[ Applause ]

1186
